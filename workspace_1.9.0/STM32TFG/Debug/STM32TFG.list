
STM32TFG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000234c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08002458  08002458  00012458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024f0  080024f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080024f0  080024f0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024f0  080024f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024f0  080024f0  000124f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024f4  080024f4  000124f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080024f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000070  08002568  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002568  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005d49  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015f7  00000000  00000000  00025de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000710  00000000  00000000  000273e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000678  00000000  00000000  00027af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d6d  00000000  00000000  00028168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000079b8  00000000  00000000  0003fed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083641  00000000  00000000  0004788d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000caece  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002160  00000000  00000000  000caf20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002440 	.word	0x08002440

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002440 	.word	0x08002440

0800014c <__io_putchar>:
#include "SerialTask.h"


extern UART_HandleTypeDef huart2;

PUTCHAR_PROTOTYPE {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]

	while(HAL_OK != HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 30000)){
 8000154:	bf00      	nop
 8000156:	1d39      	adds	r1, r7, #4
 8000158:	f247 5330 	movw	r3, #30000	; 0x7530
 800015c:	2201      	movs	r2, #1
 800015e:	4805      	ldr	r0, [pc, #20]	; (8000174 <__io_putchar+0x28>)
 8000160:	f001 fa39 	bl	80015d6 <HAL_UART_Transmit>
 8000164:	4603      	mov	r3, r0
 8000166:	2b00      	cmp	r3, #0
 8000168:	d1f5      	bne.n	8000156 <__io_putchar+0xa>
		;
	}
	//xSemaphoreTake(xSemaphore, portMAX_DELAY);
	//HAL_UART_Transmit_IT(&huart2, (uint8_t*) &ch, 1);
	return ch;
 800016a:	687b      	ldr	r3, [r7, #4]

}
 800016c:	4618      	mov	r0, r3
 800016e:	3708      	adds	r7, #8
 8000170:	46bd      	mov	sp, r7
 8000172:	bd80      	pop	{r7, pc}
 8000174:	2000008c 	.word	0x2000008c

08000178 <__io_getchar>:

GETCHAR_PROTOTYPE {
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0

	uint8_t ch = 0;
 800017e:	2300      	movs	r3, #0
 8000180:	71fb      	strb	r3, [r7, #7]
	while (HAL_OK != HAL_UART_Receive(&huart2, (uint8_t*) &ch, 1, 30000)) {
 8000182:	bf00      	nop
 8000184:	1df9      	adds	r1, r7, #7
 8000186:	f247 5330 	movw	r3, #30000	; 0x7530
 800018a:	2201      	movs	r2, #1
 800018c:	4805      	ldr	r0, [pc, #20]	; (80001a4 <__io_getchar+0x2c>)
 800018e:	f001 fab4 	bl	80016fa <HAL_UART_Receive>
 8000192:	4603      	mov	r3, r0
 8000194:	2b00      	cmp	r3, #0
 8000196:	d1f5      	bne.n	8000184 <__io_getchar+0xc>
		;
	}
	return ch;
 8000198:	79fb      	ldrb	r3, [r7, #7]
}
 800019a:	4618      	mov	r0, r3
 800019c:	3708      	adds	r7, #8
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	2000008c 	.word	0x2000008c

080001a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ac:	f000 fa5a 	bl	8000664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b0:	f000 f80e 	bl	80001d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b4:	f000 f878 	bl	80002a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001b8:	f000 f84c 	bl	8000254 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("HOLAMUNDO\r\n");
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <main+0x24>)
 80001be:	f001 fcb7 	bl	8001b30 <puts>
	  		HAL_Delay(1000);
 80001c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001c6:	f000 faaf 	bl	8000728 <HAL_Delay>
	  printf("HOLAMUNDO\r\n");
 80001ca:	e7f7      	b.n	80001bc <main+0x14>
 80001cc:	08002458 	.word	0x08002458

080001d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b090      	sub	sp, #64	; 0x40
 80001d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d6:	f107 0318 	add.w	r3, r7, #24
 80001da:	2228      	movs	r2, #40	; 0x28
 80001dc:	2100      	movs	r1, #0
 80001de:	4618      	mov	r0, r3
 80001e0:	f001 fc30 	bl	8001a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
 80001ea:	605a      	str	r2, [r3, #4]
 80001ec:	609a      	str	r2, [r3, #8]
 80001ee:	60da      	str	r2, [r3, #12]
 80001f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001f2:	2302      	movs	r3, #2
 80001f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f6:	2301      	movs	r3, #1
 80001f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001fa:	2310      	movs	r3, #16
 80001fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001fe:	2302      	movs	r3, #2
 8000200:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000202:	2300      	movs	r3, #0
 8000204:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000206:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800020a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020c:	f107 0318 	add.w	r3, r7, #24
 8000210:	4618      	mov	r0, r3
 8000212:	f000 fd79 	bl	8000d08 <HAL_RCC_OscConfig>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d001      	beq.n	8000220 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800021c:	f000 f8b2 	bl	8000384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000220:	230f      	movs	r3, #15
 8000222:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000224:	2302      	movs	r3, #2
 8000226:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800022c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000230:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	2102      	movs	r1, #2
 800023a:	4618      	mov	r0, r3
 800023c:	f000 ffe6 	bl	800120c <HAL_RCC_ClockConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000246:	f000 f89d 	bl	8000384 <Error_Handler>
  }
}
 800024a:	bf00      	nop
 800024c:	3740      	adds	r7, #64	; 0x40
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
	...

08000254 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000258:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <MX_USART2_UART_Init+0x4c>)
 800025a:	4a12      	ldr	r2, [pc, #72]	; (80002a4 <MX_USART2_UART_Init+0x50>)
 800025c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800025e:	4b10      	ldr	r3, [pc, #64]	; (80002a0 <MX_USART2_UART_Init+0x4c>)
 8000260:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000264:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000266:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <MX_USART2_UART_Init+0x4c>)
 8000268:	2200      	movs	r2, #0
 800026a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800026c:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <MX_USART2_UART_Init+0x4c>)
 800026e:	2200      	movs	r2, #0
 8000270:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000272:	4b0b      	ldr	r3, [pc, #44]	; (80002a0 <MX_USART2_UART_Init+0x4c>)
 8000274:	2200      	movs	r2, #0
 8000276:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000278:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <MX_USART2_UART_Init+0x4c>)
 800027a:	220c      	movs	r2, #12
 800027c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800027e:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <MX_USART2_UART_Init+0x4c>)
 8000280:	2200      	movs	r2, #0
 8000282:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000284:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <MX_USART2_UART_Init+0x4c>)
 8000286:	2200      	movs	r2, #0
 8000288:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800028a:	4805      	ldr	r0, [pc, #20]	; (80002a0 <MX_USART2_UART_Init+0x4c>)
 800028c:	f001 f956 	bl	800153c <HAL_UART_Init>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000296:	f000 f875 	bl	8000384 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	2000008c 	.word	0x2000008c
 80002a4:	40004400 	.word	0x40004400

080002a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b088      	sub	sp, #32
 80002ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ae:	f107 0310 	add.w	r3, r7, #16
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002bc:	4b2d      	ldr	r3, [pc, #180]	; (8000374 <MX_GPIO_Init+0xcc>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a2c      	ldr	r2, [pc, #176]	; (8000374 <MX_GPIO_Init+0xcc>)
 80002c2:	f043 0310 	orr.w	r3, r3, #16
 80002c6:	6193      	str	r3, [r2, #24]
 80002c8:	4b2a      	ldr	r3, [pc, #168]	; (8000374 <MX_GPIO_Init+0xcc>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	f003 0310 	and.w	r3, r3, #16
 80002d0:	60fb      	str	r3, [r7, #12]
 80002d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002d4:	4b27      	ldr	r3, [pc, #156]	; (8000374 <MX_GPIO_Init+0xcc>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a26      	ldr	r2, [pc, #152]	; (8000374 <MX_GPIO_Init+0xcc>)
 80002da:	f043 0320 	orr.w	r3, r3, #32
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b24      	ldr	r3, [pc, #144]	; (8000374 <MX_GPIO_Init+0xcc>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0320 	and.w	r3, r3, #32
 80002e8:	60bb      	str	r3, [r7, #8]
 80002ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ec:	4b21      	ldr	r3, [pc, #132]	; (8000374 <MX_GPIO_Init+0xcc>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a20      	ldr	r2, [pc, #128]	; (8000374 <MX_GPIO_Init+0xcc>)
 80002f2:	f043 0304 	orr.w	r3, r3, #4
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b1e      	ldr	r3, [pc, #120]	; (8000374 <MX_GPIO_Init+0xcc>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0304 	and.w	r3, r3, #4
 8000300:	607b      	str	r3, [r7, #4]
 8000302:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000304:	4b1b      	ldr	r3, [pc, #108]	; (8000374 <MX_GPIO_Init+0xcc>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a1a      	ldr	r2, [pc, #104]	; (8000374 <MX_GPIO_Init+0xcc>)
 800030a:	f043 0308 	orr.w	r3, r3, #8
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b18      	ldr	r3, [pc, #96]	; (8000374 <MX_GPIO_Init+0xcc>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0308 	and.w	r3, r3, #8
 8000318:	603b      	str	r3, [r7, #0]
 800031a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	2120      	movs	r1, #32
 8000320:	4815      	ldr	r0, [pc, #84]	; (8000378 <MX_GPIO_Init+0xd0>)
 8000322:	f000 fcb7 	bl	8000c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000326:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800032a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800032c:	4b13      	ldr	r3, [pc, #76]	; (800037c <MX_GPIO_Init+0xd4>)
 800032e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000330:	2300      	movs	r3, #0
 8000332:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000334:	f107 0310 	add.w	r3, r7, #16
 8000338:	4619      	mov	r1, r3
 800033a:	4811      	ldr	r0, [pc, #68]	; (8000380 <MX_GPIO_Init+0xd8>)
 800033c:	f000 fb26 	bl	800098c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000340:	2320      	movs	r3, #32
 8000342:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000344:	2301      	movs	r3, #1
 8000346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000348:	2300      	movs	r3, #0
 800034a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034c:	2302      	movs	r3, #2
 800034e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000350:	f107 0310 	add.w	r3, r7, #16
 8000354:	4619      	mov	r1, r3
 8000356:	4808      	ldr	r0, [pc, #32]	; (8000378 <MX_GPIO_Init+0xd0>)
 8000358:	f000 fb18 	bl	800098c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800035c:	2200      	movs	r2, #0
 800035e:	2100      	movs	r1, #0
 8000360:	2028      	movs	r0, #40	; 0x28
 8000362:	f000 fadc 	bl	800091e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000366:	2028      	movs	r0, #40	; 0x28
 8000368:	f000 faf5 	bl	8000956 <HAL_NVIC_EnableIRQ>

}
 800036c:	bf00      	nop
 800036e:	3720      	adds	r7, #32
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	40021000 	.word	0x40021000
 8000378:	40010800 	.word	0x40010800
 800037c:	10110000 	.word	0x10110000
 8000380:	40011000 	.word	0x40011000

08000384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000388:	b672      	cpsid	i
}
 800038a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800038c:	e7fe      	b.n	800038c <Error_Handler+0x8>
	...

08000390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000396:	4b15      	ldr	r3, [pc, #84]	; (80003ec <HAL_MspInit+0x5c>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	4a14      	ldr	r2, [pc, #80]	; (80003ec <HAL_MspInit+0x5c>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	6193      	str	r3, [r2, #24]
 80003a2:	4b12      	ldr	r3, [pc, #72]	; (80003ec <HAL_MspInit+0x5c>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	f003 0301 	and.w	r3, r3, #1
 80003aa:	60bb      	str	r3, [r7, #8]
 80003ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ae:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <HAL_MspInit+0x5c>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	4a0e      	ldr	r2, [pc, #56]	; (80003ec <HAL_MspInit+0x5c>)
 80003b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b8:	61d3      	str	r3, [r2, #28]
 80003ba:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <HAL_MspInit+0x5c>)
 80003bc:	69db      	ldr	r3, [r3, #28]
 80003be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003c6:	4b0a      	ldr	r3, [pc, #40]	; (80003f0 <HAL_MspInit+0x60>)
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003d2:	60fb      	str	r3, [r7, #12]
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <HAL_MspInit+0x60>)
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e2:	bf00      	nop
 80003e4:	3714      	adds	r7, #20
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	40021000 	.word	0x40021000
 80003f0:	40010000 	.word	0x40010000

080003f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fc:	f107 0310 	add.w	r3, r7, #16
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a15      	ldr	r2, [pc, #84]	; (8000464 <HAL_UART_MspInit+0x70>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d123      	bne.n	800045c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000414:	4b14      	ldr	r3, [pc, #80]	; (8000468 <HAL_UART_MspInit+0x74>)
 8000416:	69db      	ldr	r3, [r3, #28]
 8000418:	4a13      	ldr	r2, [pc, #76]	; (8000468 <HAL_UART_MspInit+0x74>)
 800041a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800041e:	61d3      	str	r3, [r2, #28]
 8000420:	4b11      	ldr	r3, [pc, #68]	; (8000468 <HAL_UART_MspInit+0x74>)
 8000422:	69db      	ldr	r3, [r3, #28]
 8000424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000428:	60fb      	str	r3, [r7, #12]
 800042a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800042c:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <HAL_UART_MspInit+0x74>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a0d      	ldr	r2, [pc, #52]	; (8000468 <HAL_UART_MspInit+0x74>)
 8000432:	f043 0304 	orr.w	r3, r3, #4
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <HAL_UART_MspInit+0x74>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0304 	and.w	r3, r3, #4
 8000440:	60bb      	str	r3, [r7, #8]
 8000442:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000444:	230c      	movs	r3, #12
 8000446:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000448:	2302      	movs	r3, #2
 800044a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044c:	2302      	movs	r3, #2
 800044e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000450:	f107 0310 	add.w	r3, r7, #16
 8000454:	4619      	mov	r1, r3
 8000456:	4805      	ldr	r0, [pc, #20]	; (800046c <HAL_UART_MspInit+0x78>)
 8000458:	f000 fa98 	bl	800098c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800045c:	bf00      	nop
 800045e:	3720      	adds	r7, #32
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40004400 	.word	0x40004400
 8000468:	40021000 	.word	0x40021000
 800046c:	40010800 	.word	0x40010800

08000470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000474:	e7fe      	b.n	8000474 <NMI_Handler+0x4>

08000476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800047a:	e7fe      	b.n	800047a <HardFault_Handler+0x4>

0800047c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000480:	e7fe      	b.n	8000480 <MemManage_Handler+0x4>

08000482 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000486:	e7fe      	b.n	8000486 <BusFault_Handler+0x4>

08000488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800048c:	e7fe      	b.n	800048c <UsageFault_Handler+0x4>

0800048e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr

0800049a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr

080004a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr

080004b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b6:	f000 f91b 	bl	80006f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}

080004be <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80004c2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80004c6:	f000 fbfd 	bl	8000cc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}

080004ce <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b086      	sub	sp, #24
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	60f8      	str	r0, [r7, #12]
 80004d6:	60b9      	str	r1, [r7, #8]
 80004d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004da:	2300      	movs	r3, #0
 80004dc:	617b      	str	r3, [r7, #20]
 80004de:	e00a      	b.n	80004f6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004e0:	f7ff fe4a 	bl	8000178 <__io_getchar>
 80004e4:	4601      	mov	r1, r0
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	1c5a      	adds	r2, r3, #1
 80004ea:	60ba      	str	r2, [r7, #8]
 80004ec:	b2ca      	uxtb	r2, r1
 80004ee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	3301      	adds	r3, #1
 80004f4:	617b      	str	r3, [r7, #20]
 80004f6:	697a      	ldr	r2, [r7, #20]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	429a      	cmp	r2, r3
 80004fc:	dbf0      	blt.n	80004e0 <_read+0x12>
	}

return len;
 80004fe:	687b      	ldr	r3, [r7, #4]
}
 8000500:	4618      	mov	r0, r3
 8000502:	3718      	adds	r7, #24
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	e009      	b.n	800052e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	1c5a      	adds	r2, r3, #1
 800051e:	60ba      	str	r2, [r7, #8]
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff fe12 	bl	800014c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	3301      	adds	r3, #1
 800052c:	617b      	str	r3, [r7, #20]
 800052e:	697a      	ldr	r2, [r7, #20]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	429a      	cmp	r2, r3
 8000534:	dbf1      	blt.n	800051a <_write+0x12>
	}
	return len;
 8000536:	687b      	ldr	r3, [r7, #4]
}
 8000538:	4618      	mov	r0, r3
 800053a:	3718      	adds	r7, #24
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}

08000540 <_close>:

int _close(int file)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	return -1;
 8000548:	f04f 33ff 	mov.w	r3, #4294967295
}
 800054c:	4618      	mov	r0, r3
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr

08000556 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000556:	b480      	push	{r7}
 8000558:	b083      	sub	sp, #12
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
 800055e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000566:	605a      	str	r2, [r3, #4]
	return 0;
 8000568:	2300      	movs	r3, #0
}
 800056a:	4618      	mov	r0, r3
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr

08000574 <_isatty>:

int _isatty(int file)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	return 1;
 800057c:	2301      	movs	r3, #1
}
 800057e:	4618      	mov	r0, r3
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
	return 0;
 8000594:	2300      	movs	r3, #0
}
 8000596:	4618      	mov	r0, r3
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005a8:	4a14      	ldr	r2, [pc, #80]	; (80005fc <_sbrk+0x5c>)
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <_sbrk+0x60>)
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b4:	4b13      	ldr	r3, [pc, #76]	; (8000604 <_sbrk+0x64>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d102      	bne.n	80005c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <_sbrk+0x64>)
 80005be:	4a12      	ldr	r2, [pc, #72]	; (8000608 <_sbrk+0x68>)
 80005c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <_sbrk+0x64>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4413      	add	r3, r2
 80005ca:	693a      	ldr	r2, [r7, #16]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d207      	bcs.n	80005e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d0:	f001 fa0e 	bl	80019f0 <__errno>
 80005d4:	4603      	mov	r3, r0
 80005d6:	220c      	movs	r2, #12
 80005d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	e009      	b.n	80005f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <_sbrk+0x64>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <_sbrk+0x64>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	4a05      	ldr	r2, [pc, #20]	; (8000604 <_sbrk+0x64>)
 80005f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005f2:	68fb      	ldr	r3, [r7, #12]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20005000 	.word	0x20005000
 8000600:	00000400 	.word	0x00000400
 8000604:	200000d0 	.word	0x200000d0
 8000608:	200000e8 	.word	0x200000e8

0800060c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000618:	480c      	ldr	r0, [pc, #48]	; (800064c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800061a:	490d      	ldr	r1, [pc, #52]	; (8000650 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000620:	e002      	b.n	8000628 <LoopCopyDataInit>

08000622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000626:	3304      	adds	r3, #4

08000628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800062c:	d3f9      	bcc.n	8000622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062e:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000630:	4c0a      	ldr	r4, [pc, #40]	; (800065c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000634:	e001      	b.n	800063a <LoopFillZerobss>

08000636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000638:	3204      	adds	r2, #4

0800063a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800063c:	d3fb      	bcc.n	8000636 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800063e:	f7ff ffe5 	bl	800060c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000642:	f001 f9db 	bl	80019fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000646:	f7ff fdaf 	bl	80001a8 <main>
  bx lr
 800064a:	4770      	bx	lr
  ldr r0, =_sdata
 800064c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000650:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000654:	080024f8 	.word	0x080024f8
  ldr r2, =_sbss
 8000658:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800065c:	200000e8 	.word	0x200000e8

08000660 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000660:	e7fe      	b.n	8000660 <ADC1_2_IRQHandler>
	...

08000664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <HAL_Init+0x28>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a07      	ldr	r2, [pc, #28]	; (800068c <HAL_Init+0x28>)
 800066e:	f043 0310 	orr.w	r3, r3, #16
 8000672:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000674:	2003      	movs	r0, #3
 8000676:	f000 f947 	bl	8000908 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800067a:	2000      	movs	r0, #0
 800067c:	f000 f808 	bl	8000690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000680:	f7ff fe86 	bl	8000390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40022000 	.word	0x40022000

08000690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_InitTick+0x54>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <HAL_InitTick+0x58>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4619      	mov	r1, r3
 80006a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 f95f 	bl	8000972 <HAL_SYSTICK_Config>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e00e      	b.n	80006dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2b0f      	cmp	r3, #15
 80006c2:	d80a      	bhi.n	80006da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c4:	2200      	movs	r2, #0
 80006c6:	6879      	ldr	r1, [r7, #4]
 80006c8:	f04f 30ff 	mov.w	r0, #4294967295
 80006cc:	f000 f927 	bl	800091e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d0:	4a06      	ldr	r2, [pc, #24]	; (80006ec <HAL_InitTick+0x5c>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006d6:	2300      	movs	r3, #0
 80006d8:	e000      	b.n	80006dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006da:	2301      	movs	r3, #1
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000008 	.word	0x20000008
 80006ec:	20000004 	.word	0x20000004

080006f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <HAL_IncTick+0x1c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <HAL_IncTick+0x20>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4413      	add	r3, r2
 8000700:	4a03      	ldr	r2, [pc, #12]	; (8000710 <HAL_IncTick+0x20>)
 8000702:	6013      	str	r3, [r2, #0]
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	20000008 	.word	0x20000008
 8000710:	200000d4 	.word	0x200000d4

08000714 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  return uwTick;
 8000718:	4b02      	ldr	r3, [pc, #8]	; (8000724 <HAL_GetTick+0x10>)
 800071a:	681b      	ldr	r3, [r3, #0]
}
 800071c:	4618      	mov	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	200000d4 	.word	0x200000d4

08000728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000730:	f7ff fff0 	bl	8000714 <HAL_GetTick>
 8000734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000740:	d005      	beq.n	800074e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000742:	4b0a      	ldr	r3, [pc, #40]	; (800076c <HAL_Delay+0x44>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	461a      	mov	r2, r3
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	4413      	add	r3, r2
 800074c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800074e:	bf00      	nop
 8000750:	f7ff ffe0 	bl	8000714 <HAL_GetTick>
 8000754:	4602      	mov	r2, r0
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	68fa      	ldr	r2, [r7, #12]
 800075c:	429a      	cmp	r2, r3
 800075e:	d8f7      	bhi.n	8000750 <HAL_Delay+0x28>
  {
  }
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000008 	.word	0x20000008

08000770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800078c:	4013      	ands	r3, r2
 800078e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800079c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007a2:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <__NVIC_SetPriorityGrouping+0x44>)
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	60d3      	str	r3, [r2, #12]
}
 80007a8:	bf00      	nop
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <__NVIC_GetPriorityGrouping+0x18>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	f003 0307 	and.w	r3, r3, #7
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db0b      	blt.n	80007fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	f003 021f 	and.w	r2, r3, #31
 80007ec:	4906      	ldr	r1, [pc, #24]	; (8000808 <__NVIC_EnableIRQ+0x34>)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	095b      	lsrs	r3, r3, #5
 80007f4:	2001      	movs	r0, #1
 80007f6:	fa00 f202 	lsl.w	r2, r0, r2
 80007fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	e000e100 	.word	0xe000e100

0800080c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	6039      	str	r1, [r7, #0]
 8000816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081c:	2b00      	cmp	r3, #0
 800081e:	db0a      	blt.n	8000836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	b2da      	uxtb	r2, r3
 8000824:	490c      	ldr	r1, [pc, #48]	; (8000858 <__NVIC_SetPriority+0x4c>)
 8000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082a:	0112      	lsls	r2, r2, #4
 800082c:	b2d2      	uxtb	r2, r2
 800082e:	440b      	add	r3, r1
 8000830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000834:	e00a      	b.n	800084c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4908      	ldr	r1, [pc, #32]	; (800085c <__NVIC_SetPriority+0x50>)
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	f003 030f 	and.w	r3, r3, #15
 8000842:	3b04      	subs	r3, #4
 8000844:	0112      	lsls	r2, r2, #4
 8000846:	b2d2      	uxtb	r2, r2
 8000848:	440b      	add	r3, r1
 800084a:	761a      	strb	r2, [r3, #24]
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	e000e100 	.word	0xe000e100
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000860:	b480      	push	{r7}
 8000862:	b089      	sub	sp, #36	; 0x24
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f003 0307 	and.w	r3, r3, #7
 8000872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	f1c3 0307 	rsb	r3, r3, #7
 800087a:	2b04      	cmp	r3, #4
 800087c:	bf28      	it	cs
 800087e:	2304      	movcs	r3, #4
 8000880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	3304      	adds	r3, #4
 8000886:	2b06      	cmp	r3, #6
 8000888:	d902      	bls.n	8000890 <NVIC_EncodePriority+0x30>
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	3b03      	subs	r3, #3
 800088e:	e000      	b.n	8000892 <NVIC_EncodePriority+0x32>
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000894:	f04f 32ff 	mov.w	r2, #4294967295
 8000898:	69bb      	ldr	r3, [r7, #24]
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	43da      	mvns	r2, r3
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	401a      	ands	r2, r3
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	fa01 f303 	lsl.w	r3, r1, r3
 80008b2:	43d9      	mvns	r1, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b8:	4313      	orrs	r3, r2
         );
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3724      	adds	r7, #36	; 0x24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008d4:	d301      	bcc.n	80008da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008d6:	2301      	movs	r3, #1
 80008d8:	e00f      	b.n	80008fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008da:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <SysTick_Config+0x40>)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3b01      	subs	r3, #1
 80008e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008e2:	210f      	movs	r1, #15
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295
 80008e8:	f7ff ff90 	bl	800080c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <SysTick_Config+0x40>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f2:	4b04      	ldr	r3, [pc, #16]	; (8000904 <SysTick_Config+0x40>)
 80008f4:	2207      	movs	r2, #7
 80008f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	e000e010 	.word	0xe000e010

08000908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f7ff ff2d 	bl	8000770 <__NVIC_SetPriorityGrouping>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af00      	add	r7, sp, #0
 8000924:	4603      	mov	r3, r0
 8000926:	60b9      	str	r1, [r7, #8]
 8000928:	607a      	str	r2, [r7, #4]
 800092a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000930:	f7ff ff42 	bl	80007b8 <__NVIC_GetPriorityGrouping>
 8000934:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	68b9      	ldr	r1, [r7, #8]
 800093a:	6978      	ldr	r0, [r7, #20]
 800093c:	f7ff ff90 	bl	8000860 <NVIC_EncodePriority>
 8000940:	4602      	mov	r2, r0
 8000942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000946:	4611      	mov	r1, r2
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff5f 	bl	800080c <__NVIC_SetPriority>
}
 800094e:	bf00      	nop
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	4603      	mov	r3, r0
 800095e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff35 	bl	80007d4 <__NVIC_EnableIRQ>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff ffa2 	bl	80008c4 <SysTick_Config>
 8000980:	4603      	mov	r3, r0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800098c:	b480      	push	{r7}
 800098e:	b08b      	sub	sp, #44	; 0x2c
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800099e:	e169      	b.n	8000c74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009a0:	2201      	movs	r2, #1
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	69fa      	ldr	r2, [r7, #28]
 80009b0:	4013      	ands	r3, r2
 80009b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009b4:	69ba      	ldr	r2, [r7, #24]
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	f040 8158 	bne.w	8000c6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	4a9a      	ldr	r2, [pc, #616]	; (8000c2c <HAL_GPIO_Init+0x2a0>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d05e      	beq.n	8000a86 <HAL_GPIO_Init+0xfa>
 80009c8:	4a98      	ldr	r2, [pc, #608]	; (8000c2c <HAL_GPIO_Init+0x2a0>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d875      	bhi.n	8000aba <HAL_GPIO_Init+0x12e>
 80009ce:	4a98      	ldr	r2, [pc, #608]	; (8000c30 <HAL_GPIO_Init+0x2a4>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d058      	beq.n	8000a86 <HAL_GPIO_Init+0xfa>
 80009d4:	4a96      	ldr	r2, [pc, #600]	; (8000c30 <HAL_GPIO_Init+0x2a4>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d86f      	bhi.n	8000aba <HAL_GPIO_Init+0x12e>
 80009da:	4a96      	ldr	r2, [pc, #600]	; (8000c34 <HAL_GPIO_Init+0x2a8>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d052      	beq.n	8000a86 <HAL_GPIO_Init+0xfa>
 80009e0:	4a94      	ldr	r2, [pc, #592]	; (8000c34 <HAL_GPIO_Init+0x2a8>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d869      	bhi.n	8000aba <HAL_GPIO_Init+0x12e>
 80009e6:	4a94      	ldr	r2, [pc, #592]	; (8000c38 <HAL_GPIO_Init+0x2ac>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d04c      	beq.n	8000a86 <HAL_GPIO_Init+0xfa>
 80009ec:	4a92      	ldr	r2, [pc, #584]	; (8000c38 <HAL_GPIO_Init+0x2ac>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d863      	bhi.n	8000aba <HAL_GPIO_Init+0x12e>
 80009f2:	4a92      	ldr	r2, [pc, #584]	; (8000c3c <HAL_GPIO_Init+0x2b0>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d046      	beq.n	8000a86 <HAL_GPIO_Init+0xfa>
 80009f8:	4a90      	ldr	r2, [pc, #576]	; (8000c3c <HAL_GPIO_Init+0x2b0>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d85d      	bhi.n	8000aba <HAL_GPIO_Init+0x12e>
 80009fe:	2b12      	cmp	r3, #18
 8000a00:	d82a      	bhi.n	8000a58 <HAL_GPIO_Init+0xcc>
 8000a02:	2b12      	cmp	r3, #18
 8000a04:	d859      	bhi.n	8000aba <HAL_GPIO_Init+0x12e>
 8000a06:	a201      	add	r2, pc, #4	; (adr r2, 8000a0c <HAL_GPIO_Init+0x80>)
 8000a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0c:	08000a87 	.word	0x08000a87
 8000a10:	08000a61 	.word	0x08000a61
 8000a14:	08000a73 	.word	0x08000a73
 8000a18:	08000ab5 	.word	0x08000ab5
 8000a1c:	08000abb 	.word	0x08000abb
 8000a20:	08000abb 	.word	0x08000abb
 8000a24:	08000abb 	.word	0x08000abb
 8000a28:	08000abb 	.word	0x08000abb
 8000a2c:	08000abb 	.word	0x08000abb
 8000a30:	08000abb 	.word	0x08000abb
 8000a34:	08000abb 	.word	0x08000abb
 8000a38:	08000abb 	.word	0x08000abb
 8000a3c:	08000abb 	.word	0x08000abb
 8000a40:	08000abb 	.word	0x08000abb
 8000a44:	08000abb 	.word	0x08000abb
 8000a48:	08000abb 	.word	0x08000abb
 8000a4c:	08000abb 	.word	0x08000abb
 8000a50:	08000a69 	.word	0x08000a69
 8000a54:	08000a7d 	.word	0x08000a7d
 8000a58:	4a79      	ldr	r2, [pc, #484]	; (8000c40 <HAL_GPIO_Init+0x2b4>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d013      	beq.n	8000a86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a5e:	e02c      	b.n	8000aba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	623b      	str	r3, [r7, #32]
          break;
 8000a66:	e029      	b.n	8000abc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	623b      	str	r3, [r7, #32]
          break;
 8000a70:	e024      	b.n	8000abc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	68db      	ldr	r3, [r3, #12]
 8000a76:	3308      	adds	r3, #8
 8000a78:	623b      	str	r3, [r7, #32]
          break;
 8000a7a:	e01f      	b.n	8000abc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	330c      	adds	r3, #12
 8000a82:	623b      	str	r3, [r7, #32]
          break;
 8000a84:	e01a      	b.n	8000abc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d102      	bne.n	8000a94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a8e:	2304      	movs	r3, #4
 8000a90:	623b      	str	r3, [r7, #32]
          break;
 8000a92:	e013      	b.n	8000abc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d105      	bne.n	8000aa8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a9c:	2308      	movs	r3, #8
 8000a9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	69fa      	ldr	r2, [r7, #28]
 8000aa4:	611a      	str	r2, [r3, #16]
          break;
 8000aa6:	e009      	b.n	8000abc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	69fa      	ldr	r2, [r7, #28]
 8000ab0:	615a      	str	r2, [r3, #20]
          break;
 8000ab2:	e003      	b.n	8000abc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	623b      	str	r3, [r7, #32]
          break;
 8000ab8:	e000      	b.n	8000abc <HAL_GPIO_Init+0x130>
          break;
 8000aba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	2bff      	cmp	r3, #255	; 0xff
 8000ac0:	d801      	bhi.n	8000ac6 <HAL_GPIO_Init+0x13a>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	e001      	b.n	8000aca <HAL_GPIO_Init+0x13e>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	2bff      	cmp	r3, #255	; 0xff
 8000ad0:	d802      	bhi.n	8000ad8 <HAL_GPIO_Init+0x14c>
 8000ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	e002      	b.n	8000ade <HAL_GPIO_Init+0x152>
 8000ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ada:	3b08      	subs	r3, #8
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	210f      	movs	r1, #15
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	401a      	ands	r2, r3
 8000af0:	6a39      	ldr	r1, [r7, #32]
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	fa01 f303 	lsl.w	r3, r1, r3
 8000af8:	431a      	orrs	r2, r3
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f000 80b1 	beq.w	8000c6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b0c:	4b4d      	ldr	r3, [pc, #308]	; (8000c44 <HAL_GPIO_Init+0x2b8>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	4a4c      	ldr	r2, [pc, #304]	; (8000c44 <HAL_GPIO_Init+0x2b8>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	6193      	str	r3, [r2, #24]
 8000b18:	4b4a      	ldr	r3, [pc, #296]	; (8000c44 <HAL_GPIO_Init+0x2b8>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b24:	4a48      	ldr	r2, [pc, #288]	; (8000c48 <HAL_GPIO_Init+0x2bc>)
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	089b      	lsrs	r3, r3, #2
 8000b2a:	3302      	adds	r3, #2
 8000b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b34:	f003 0303 	and.w	r3, r3, #3
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	220f      	movs	r2, #15
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	43db      	mvns	r3, r3
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	4013      	ands	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a40      	ldr	r2, [pc, #256]	; (8000c4c <HAL_GPIO_Init+0x2c0>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d013      	beq.n	8000b78 <HAL_GPIO_Init+0x1ec>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a3f      	ldr	r2, [pc, #252]	; (8000c50 <HAL_GPIO_Init+0x2c4>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d00d      	beq.n	8000b74 <HAL_GPIO_Init+0x1e8>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a3e      	ldr	r2, [pc, #248]	; (8000c54 <HAL_GPIO_Init+0x2c8>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d007      	beq.n	8000b70 <HAL_GPIO_Init+0x1e4>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a3d      	ldr	r2, [pc, #244]	; (8000c58 <HAL_GPIO_Init+0x2cc>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d101      	bne.n	8000b6c <HAL_GPIO_Init+0x1e0>
 8000b68:	2303      	movs	r3, #3
 8000b6a:	e006      	b.n	8000b7a <HAL_GPIO_Init+0x1ee>
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	e004      	b.n	8000b7a <HAL_GPIO_Init+0x1ee>
 8000b70:	2302      	movs	r3, #2
 8000b72:	e002      	b.n	8000b7a <HAL_GPIO_Init+0x1ee>
 8000b74:	2301      	movs	r3, #1
 8000b76:	e000      	b.n	8000b7a <HAL_GPIO_Init+0x1ee>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b7c:	f002 0203 	and.w	r2, r2, #3
 8000b80:	0092      	lsls	r2, r2, #2
 8000b82:	4093      	lsls	r3, r2
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b8a:	492f      	ldr	r1, [pc, #188]	; (8000c48 <HAL_GPIO_Init+0x2bc>)
 8000b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8e:	089b      	lsrs	r3, r3, #2
 8000b90:	3302      	adds	r3, #2
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d006      	beq.n	8000bb2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ba4:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	492c      	ldr	r1, [pc, #176]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	600b      	str	r3, [r1, #0]
 8000bb0:	e006      	b.n	8000bc0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bb2:	4b2a      	ldr	r3, [pc, #168]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	4928      	ldr	r1, [pc, #160]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d006      	beq.n	8000bda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bcc:	4b23      	ldr	r3, [pc, #140]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000bce:	685a      	ldr	r2, [r3, #4]
 8000bd0:	4922      	ldr	r1, [pc, #136]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	604b      	str	r3, [r1, #4]
 8000bd8:	e006      	b.n	8000be8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bda:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	43db      	mvns	r3, r3
 8000be2:	491e      	ldr	r1, [pc, #120]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000be4:	4013      	ands	r3, r2
 8000be6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d006      	beq.n	8000c02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bf4:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000bf6:	689a      	ldr	r2, [r3, #8]
 8000bf8:	4918      	ldr	r1, [pc, #96]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	608b      	str	r3, [r1, #8]
 8000c00:	e006      	b.n	8000c10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c02:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000c04:	689a      	ldr	r2, [r3, #8]
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	4914      	ldr	r1, [pc, #80]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d021      	beq.n	8000c60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000c1e:	68da      	ldr	r2, [r3, #12]
 8000c20:	490e      	ldr	r1, [pc, #56]	; (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	60cb      	str	r3, [r1, #12]
 8000c28:	e021      	b.n	8000c6e <HAL_GPIO_Init+0x2e2>
 8000c2a:	bf00      	nop
 8000c2c:	10320000 	.word	0x10320000
 8000c30:	10310000 	.word	0x10310000
 8000c34:	10220000 	.word	0x10220000
 8000c38:	10210000 	.word	0x10210000
 8000c3c:	10120000 	.word	0x10120000
 8000c40:	10110000 	.word	0x10110000
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40010000 	.word	0x40010000
 8000c4c:	40010800 	.word	0x40010800
 8000c50:	40010c00 	.word	0x40010c00
 8000c54:	40011000 	.word	0x40011000
 8000c58:	40011400 	.word	0x40011400
 8000c5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c60:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <HAL_GPIO_Init+0x304>)
 8000c62:	68da      	ldr	r2, [r3, #12]
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	43db      	mvns	r3, r3
 8000c68:	4909      	ldr	r1, [pc, #36]	; (8000c90 <HAL_GPIO_Init+0x304>)
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c70:	3301      	adds	r3, #1
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f47f ae8e 	bne.w	80009a0 <HAL_GPIO_Init+0x14>
  }
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	372c      	adds	r7, #44	; 0x2c
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	40010400 	.word	0x40010400

08000c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	807b      	strh	r3, [r7, #2]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ca4:	787b      	ldrb	r3, [r7, #1]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000caa:	887a      	ldrh	r2, [r7, #2]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cb0:	e003      	b.n	8000cba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cb2:	887b      	ldrh	r3, [r7, #2]
 8000cb4:	041a      	lsls	r2, r3, #16
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	611a      	str	r2, [r3, #16]
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cd0:	695a      	ldr	r2, [r3, #20]
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d006      	beq.n	8000ce8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cdc:	88fb      	ldrh	r3, [r7, #6]
 8000cde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f806 	bl	8000cf4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40010400 	.word	0x40010400

08000cf4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e272      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f000 8087 	beq.w	8000e36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d28:	4b92      	ldr	r3, [pc, #584]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 030c 	and.w	r3, r3, #12
 8000d30:	2b04      	cmp	r3, #4
 8000d32:	d00c      	beq.n	8000d4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d34:	4b8f      	ldr	r3, [pc, #572]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 030c 	and.w	r3, r3, #12
 8000d3c:	2b08      	cmp	r3, #8
 8000d3e:	d112      	bne.n	8000d66 <HAL_RCC_OscConfig+0x5e>
 8000d40:	4b8c      	ldr	r3, [pc, #560]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d4c:	d10b      	bne.n	8000d66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d4e:	4b89      	ldr	r3, [pc, #548]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d06c      	beq.n	8000e34 <HAL_RCC_OscConfig+0x12c>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d168      	bne.n	8000e34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e24c      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d6e:	d106      	bne.n	8000d7e <HAL_RCC_OscConfig+0x76>
 8000d70:	4b80      	ldr	r3, [pc, #512]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a7f      	ldr	r2, [pc, #508]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d7a:	6013      	str	r3, [r2, #0]
 8000d7c:	e02e      	b.n	8000ddc <HAL_RCC_OscConfig+0xd4>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d10c      	bne.n	8000da0 <HAL_RCC_OscConfig+0x98>
 8000d86:	4b7b      	ldr	r3, [pc, #492]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a7a      	ldr	r2, [pc, #488]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d90:	6013      	str	r3, [r2, #0]
 8000d92:	4b78      	ldr	r3, [pc, #480]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a77      	ldr	r2, [pc, #476]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d9c:	6013      	str	r3, [r2, #0]
 8000d9e:	e01d      	b.n	8000ddc <HAL_RCC_OscConfig+0xd4>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000da8:	d10c      	bne.n	8000dc4 <HAL_RCC_OscConfig+0xbc>
 8000daa:	4b72      	ldr	r3, [pc, #456]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a71      	ldr	r2, [pc, #452]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	4b6f      	ldr	r3, [pc, #444]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a6e      	ldr	r2, [pc, #440]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc0:	6013      	str	r3, [r2, #0]
 8000dc2:	e00b      	b.n	8000ddc <HAL_RCC_OscConfig+0xd4>
 8000dc4:	4b6b      	ldr	r3, [pc, #428]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a6a      	ldr	r2, [pc, #424]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	4b68      	ldr	r3, [pc, #416]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a67      	ldr	r2, [pc, #412]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d013      	beq.n	8000e0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de4:	f7ff fc96 	bl	8000714 <HAL_GetTick>
 8000de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dea:	e008      	b.n	8000dfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dec:	f7ff fc92 	bl	8000714 <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b64      	cmp	r3, #100	; 0x64
 8000df8:	d901      	bls.n	8000dfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e200      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dfe:	4b5d      	ldr	r3, [pc, #372]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d0f0      	beq.n	8000dec <HAL_RCC_OscConfig+0xe4>
 8000e0a:	e014      	b.n	8000e36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e0c:	f7ff fc82 	bl	8000714 <HAL_GetTick>
 8000e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e12:	e008      	b.n	8000e26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e14:	f7ff fc7e 	bl	8000714 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b64      	cmp	r3, #100	; 0x64
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e1ec      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e26:	4b53      	ldr	r3, [pc, #332]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1f0      	bne.n	8000e14 <HAL_RCC_OscConfig+0x10c>
 8000e32:	e000      	b.n	8000e36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d063      	beq.n	8000f0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e42:	4b4c      	ldr	r3, [pc, #304]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 030c 	and.w	r3, r3, #12
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d00b      	beq.n	8000e66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e4e:	4b49      	ldr	r3, [pc, #292]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 030c 	and.w	r3, r3, #12
 8000e56:	2b08      	cmp	r3, #8
 8000e58:	d11c      	bne.n	8000e94 <HAL_RCC_OscConfig+0x18c>
 8000e5a:	4b46      	ldr	r3, [pc, #280]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d116      	bne.n	8000e94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e66:	4b43      	ldr	r3, [pc, #268]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d005      	beq.n	8000e7e <HAL_RCC_OscConfig+0x176>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	691b      	ldr	r3, [r3, #16]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d001      	beq.n	8000e7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e1c0      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e7e:	4b3d      	ldr	r3, [pc, #244]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	4939      	ldr	r1, [pc, #228]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e92:	e03a      	b.n	8000f0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d020      	beq.n	8000ede <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e9c:	4b36      	ldr	r3, [pc, #216]	; (8000f78 <HAL_RCC_OscConfig+0x270>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea2:	f7ff fc37 	bl	8000714 <HAL_GetTick>
 8000ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea8:	e008      	b.n	8000ebc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eaa:	f7ff fc33 	bl	8000714 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d901      	bls.n	8000ebc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e1a1      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0f0      	beq.n	8000eaa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec8:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	4927      	ldr	r1, [pc, #156]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	600b      	str	r3, [r1, #0]
 8000edc:	e015      	b.n	8000f0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ede:	4b26      	ldr	r3, [pc, #152]	; (8000f78 <HAL_RCC_OscConfig+0x270>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee4:	f7ff fc16 	bl	8000714 <HAL_GetTick>
 8000ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eea:	e008      	b.n	8000efe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eec:	f7ff fc12 	bl	8000714 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e180      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000efe:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1f0      	bne.n	8000eec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0308 	and.w	r3, r3, #8
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d03a      	beq.n	8000f8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d019      	beq.n	8000f52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f1e:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <HAL_RCC_OscConfig+0x274>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f24:	f7ff fbf6 	bl	8000714 <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f2a:	e008      	b.n	8000f3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f2c:	f7ff fbf2 	bl	8000714 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e160      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f0      	beq.n	8000f2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f000 fad8 	bl	8001500 <RCC_Delay>
 8000f50:	e01c      	b.n	8000f8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_RCC_OscConfig+0x274>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f58:	f7ff fbdc 	bl	8000714 <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f5e:	e00f      	b.n	8000f80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f60:	f7ff fbd8 	bl	8000714 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d908      	bls.n	8000f80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e146      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000
 8000f78:	42420000 	.word	0x42420000
 8000f7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f80:	4b92      	ldr	r3, [pc, #584]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8000f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1e9      	bne.n	8000f60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 0304 	and.w	r3, r3, #4
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f000 80a6 	beq.w	80010e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f9e:	4b8b      	ldr	r3, [pc, #556]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d10d      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000faa:	4b88      	ldr	r3, [pc, #544]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	4a87      	ldr	r2, [pc, #540]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8000fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	61d3      	str	r3, [r2, #28]
 8000fb6:	4b85      	ldr	r3, [pc, #532]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc6:	4b82      	ldr	r3, [pc, #520]	; (80011d0 <HAL_RCC_OscConfig+0x4c8>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d118      	bne.n	8001004 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fd2:	4b7f      	ldr	r3, [pc, #508]	; (80011d0 <HAL_RCC_OscConfig+0x4c8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a7e      	ldr	r2, [pc, #504]	; (80011d0 <HAL_RCC_OscConfig+0x4c8>)
 8000fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fde:	f7ff fb99 	bl	8000714 <HAL_GetTick>
 8000fe2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe4:	e008      	b.n	8000ff8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fe6:	f7ff fb95 	bl	8000714 <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b64      	cmp	r3, #100	; 0x64
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e103      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff8:	4b75      	ldr	r3, [pc, #468]	; (80011d0 <HAL_RCC_OscConfig+0x4c8>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0f0      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d106      	bne.n	800101a <HAL_RCC_OscConfig+0x312>
 800100c:	4b6f      	ldr	r3, [pc, #444]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	4a6e      	ldr	r2, [pc, #440]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	6213      	str	r3, [r2, #32]
 8001018:	e02d      	b.n	8001076 <HAL_RCC_OscConfig+0x36e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10c      	bne.n	800103c <HAL_RCC_OscConfig+0x334>
 8001022:	4b6a      	ldr	r3, [pc, #424]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	4a69      	ldr	r2, [pc, #420]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001028:	f023 0301 	bic.w	r3, r3, #1
 800102c:	6213      	str	r3, [r2, #32]
 800102e:	4b67      	ldr	r3, [pc, #412]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	4a66      	ldr	r2, [pc, #408]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001034:	f023 0304 	bic.w	r3, r3, #4
 8001038:	6213      	str	r3, [r2, #32]
 800103a:	e01c      	b.n	8001076 <HAL_RCC_OscConfig+0x36e>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	2b05      	cmp	r3, #5
 8001042:	d10c      	bne.n	800105e <HAL_RCC_OscConfig+0x356>
 8001044:	4b61      	ldr	r3, [pc, #388]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001046:	6a1b      	ldr	r3, [r3, #32]
 8001048:	4a60      	ldr	r2, [pc, #384]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 800104a:	f043 0304 	orr.w	r3, r3, #4
 800104e:	6213      	str	r3, [r2, #32]
 8001050:	4b5e      	ldr	r3, [pc, #376]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	4a5d      	ldr	r2, [pc, #372]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6213      	str	r3, [r2, #32]
 800105c:	e00b      	b.n	8001076 <HAL_RCC_OscConfig+0x36e>
 800105e:	4b5b      	ldr	r3, [pc, #364]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001060:	6a1b      	ldr	r3, [r3, #32]
 8001062:	4a5a      	ldr	r2, [pc, #360]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001064:	f023 0301 	bic.w	r3, r3, #1
 8001068:	6213      	str	r3, [r2, #32]
 800106a:	4b58      	ldr	r3, [pc, #352]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	4a57      	ldr	r2, [pc, #348]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001070:	f023 0304 	bic.w	r3, r3, #4
 8001074:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d015      	beq.n	80010aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800107e:	f7ff fb49 	bl	8000714 <HAL_GetTick>
 8001082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001084:	e00a      	b.n	800109c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001086:	f7ff fb45 	bl	8000714 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	f241 3288 	movw	r2, #5000	; 0x1388
 8001094:	4293      	cmp	r3, r2
 8001096:	d901      	bls.n	800109c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e0b1      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800109c:	4b4b      	ldr	r3, [pc, #300]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0ee      	beq.n	8001086 <HAL_RCC_OscConfig+0x37e>
 80010a8:	e014      	b.n	80010d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010aa:	f7ff fb33 	bl	8000714 <HAL_GetTick>
 80010ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010b0:	e00a      	b.n	80010c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010b2:	f7ff fb2f 	bl	8000714 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e09b      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010c8:	4b40      	ldr	r3, [pc, #256]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1ee      	bne.n	80010b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010d4:	7dfb      	ldrb	r3, [r7, #23]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d105      	bne.n	80010e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010da:	4b3c      	ldr	r3, [pc, #240]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	4a3b      	ldr	r2, [pc, #236]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 80010e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 8087 	beq.w	80011fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010f0:	4b36      	ldr	r3, [pc, #216]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 030c 	and.w	r3, r3, #12
 80010f8:	2b08      	cmp	r3, #8
 80010fa:	d061      	beq.n	80011c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	2b02      	cmp	r3, #2
 8001102:	d146      	bne.n	8001192 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001104:	4b33      	ldr	r3, [pc, #204]	; (80011d4 <HAL_RCC_OscConfig+0x4cc>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110a:	f7ff fb03 	bl	8000714 <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001112:	f7ff faff 	bl	8000714 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e06d      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001124:	4b29      	ldr	r3, [pc, #164]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1f0      	bne.n	8001112 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001138:	d108      	bne.n	800114c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800113a:	4b24      	ldr	r3, [pc, #144]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	4921      	ldr	r1, [pc, #132]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001148:	4313      	orrs	r3, r2
 800114a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800114c:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a19      	ldr	r1, [r3, #32]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115c:	430b      	orrs	r3, r1
 800115e:	491b      	ldr	r1, [pc, #108]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001160:	4313      	orrs	r3, r2
 8001162:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <HAL_RCC_OscConfig+0x4cc>)
 8001166:	2201      	movs	r2, #1
 8001168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116a:	f7ff fad3 	bl	8000714 <HAL_GetTick>
 800116e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001172:	f7ff facf 	bl	8000714 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e03d      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0f0      	beq.n	8001172 <HAL_RCC_OscConfig+0x46a>
 8001190:	e035      	b.n	80011fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <HAL_RCC_OscConfig+0x4cc>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001198:	f7ff fabc 	bl	8000714 <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011a0:	f7ff fab8 	bl	8000714 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e026      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f0      	bne.n	80011a0 <HAL_RCC_OscConfig+0x498>
 80011be:	e01e      	b.n	80011fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d107      	bne.n	80011d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e019      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40007000 	.word	0x40007000
 80011d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_RCC_OscConfig+0x500>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d106      	bne.n	80011fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d001      	beq.n	80011fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40021000 	.word	0x40021000

0800120c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d101      	bne.n	8001220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e0d0      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001220:	4b6a      	ldr	r3, [pc, #424]	; (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d910      	bls.n	8001250 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800122e:	4b67      	ldr	r3, [pc, #412]	; (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f023 0207 	bic.w	r2, r3, #7
 8001236:	4965      	ldr	r1, [pc, #404]	; (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	4313      	orrs	r3, r2
 800123c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800123e:	4b63      	ldr	r3, [pc, #396]	; (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	429a      	cmp	r2, r3
 800124a:	d001      	beq.n	8001250 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e0b8      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d020      	beq.n	800129e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001268:	4b59      	ldr	r3, [pc, #356]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	4a58      	ldr	r2, [pc, #352]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 800126e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001272:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0308 	and.w	r3, r3, #8
 800127c:	2b00      	cmp	r3, #0
 800127e:	d005      	beq.n	800128c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001280:	4b53      	ldr	r3, [pc, #332]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	4a52      	ldr	r2, [pc, #328]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001286:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800128a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800128c:	4b50      	ldr	r3, [pc, #320]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	494d      	ldr	r1, [pc, #308]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 800129a:	4313      	orrs	r3, r2
 800129c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d040      	beq.n	800132c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d107      	bne.n	80012c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b2:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d115      	bne.n	80012ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e07f      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d107      	bne.n	80012da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ca:	4b41      	ldr	r3, [pc, #260]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d109      	bne.n	80012ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e073      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012da:	4b3d      	ldr	r3, [pc, #244]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e06b      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ea:	4b39      	ldr	r3, [pc, #228]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f023 0203 	bic.w	r2, r3, #3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	4936      	ldr	r1, [pc, #216]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012fc:	f7ff fa0a 	bl	8000714 <HAL_GetTick>
 8001300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001302:	e00a      	b.n	800131a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001304:	f7ff fa06 	bl	8000714 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001312:	4293      	cmp	r3, r2
 8001314:	d901      	bls.n	800131a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e053      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 020c 	and.w	r2, r3, #12
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	429a      	cmp	r2, r3
 800132a:	d1eb      	bne.n	8001304 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0307 	and.w	r3, r3, #7
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	429a      	cmp	r2, r3
 8001338:	d210      	bcs.n	800135c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133a:	4b24      	ldr	r3, [pc, #144]	; (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f023 0207 	bic.w	r2, r3, #7
 8001342:	4922      	ldr	r1, [pc, #136]	; (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	4313      	orrs	r3, r2
 8001348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800134a:	4b20      	ldr	r3, [pc, #128]	; (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d001      	beq.n	800135c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e032      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	2b00      	cmp	r3, #0
 8001366:	d008      	beq.n	800137a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	4916      	ldr	r1, [pc, #88]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001376:	4313      	orrs	r3, r2
 8001378:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	2b00      	cmp	r3, #0
 8001384:	d009      	beq.n	800139a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	490e      	ldr	r1, [pc, #56]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001396:	4313      	orrs	r3, r2
 8001398:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800139a:	f000 f821 	bl	80013e0 <HAL_RCC_GetSysClockFreq>
 800139e:	4602      	mov	r2, r0
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	091b      	lsrs	r3, r3, #4
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	490a      	ldr	r1, [pc, #40]	; (80013d4 <HAL_RCC_ClockConfig+0x1c8>)
 80013ac:	5ccb      	ldrb	r3, [r1, r3]
 80013ae:	fa22 f303 	lsr.w	r3, r2, r3
 80013b2:	4a09      	ldr	r2, [pc, #36]	; (80013d8 <HAL_RCC_ClockConfig+0x1cc>)
 80013b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <HAL_RCC_ClockConfig+0x1d0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f968 	bl	8000690 <HAL_InitTick>

  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40022000 	.word	0x40022000
 80013d0:	40021000 	.word	0x40021000
 80013d4:	08002474 	.word	0x08002474
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000004 	.word	0x20000004

080013e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013e0:	b490      	push	{r4, r7}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013e6:	4b29      	ldr	r3, [pc, #164]	; (800148c <HAL_RCC_GetSysClockFreq+0xac>)
 80013e8:	1d3c      	adds	r4, r7, #4
 80013ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013f0:	f240 2301 	movw	r3, #513	; 0x201
 80013f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800140a:	4b21      	ldr	r3, [pc, #132]	; (8001490 <HAL_RCC_GetSysClockFreq+0xb0>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	2b04      	cmp	r3, #4
 8001418:	d002      	beq.n	8001420 <HAL_RCC_GetSysClockFreq+0x40>
 800141a:	2b08      	cmp	r3, #8
 800141c:	d003      	beq.n	8001426 <HAL_RCC_GetSysClockFreq+0x46>
 800141e:	e02b      	b.n	8001478 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001420:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001422:	623b      	str	r3, [r7, #32]
      break;
 8001424:	e02b      	b.n	800147e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	0c9b      	lsrs	r3, r3, #18
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	3328      	adds	r3, #40	; 0x28
 8001430:	443b      	add	r3, r7
 8001432:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001436:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d012      	beq.n	8001468 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	0c5b      	lsrs	r3, r3, #17
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	3328      	adds	r3, #40	; 0x28
 800144e:	443b      	add	r3, r7
 8001450:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001454:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	4a0e      	ldr	r2, [pc, #56]	; (8001494 <HAL_RCC_GetSysClockFreq+0xb4>)
 800145a:	fb03 f202 	mul.w	r2, r3, r2
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	fbb2 f3f3 	udiv	r3, r2, r3
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
 8001466:	e004      	b.n	8001472 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <HAL_RCC_GetSysClockFreq+0xb8>)
 800146c:	fb02 f303 	mul.w	r3, r2, r3
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	623b      	str	r3, [r7, #32]
      break;
 8001476:	e002      	b.n	800147e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_RCC_GetSysClockFreq+0xb4>)
 800147a:	623b      	str	r3, [r7, #32]
      break;
 800147c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800147e:	6a3b      	ldr	r3, [r7, #32]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3728      	adds	r7, #40	; 0x28
 8001484:	46bd      	mov	sp, r7
 8001486:	bc90      	pop	{r4, r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	08002464 	.word	0x08002464
 8001490:	40021000 	.word	0x40021000
 8001494:	007a1200 	.word	0x007a1200
 8001498:	003d0900 	.word	0x003d0900

0800149c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014a0:	4b02      	ldr	r3, [pc, #8]	; (80014ac <HAL_RCC_GetHCLKFreq+0x10>)
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	20000000 	.word	0x20000000

080014b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014b4:	f7ff fff2 	bl	800149c <HAL_RCC_GetHCLKFreq>
 80014b8:	4602      	mov	r2, r0
 80014ba:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	0a1b      	lsrs	r3, r3, #8
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	4903      	ldr	r1, [pc, #12]	; (80014d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014c6:	5ccb      	ldrb	r3, [r1, r3]
 80014c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40021000 	.word	0x40021000
 80014d4:	08002484 	.word	0x08002484

080014d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014dc:	f7ff ffde 	bl	800149c <HAL_RCC_GetHCLKFreq>
 80014e0:	4602      	mov	r2, r0
 80014e2:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	0adb      	lsrs	r3, r3, #11
 80014e8:	f003 0307 	and.w	r3, r3, #7
 80014ec:	4903      	ldr	r1, [pc, #12]	; (80014fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80014ee:	5ccb      	ldrb	r3, [r1, r3]
 80014f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40021000 	.word	0x40021000
 80014fc:	08002484 	.word	0x08002484

08001500 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <RCC_Delay+0x34>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <RCC_Delay+0x38>)
 800150e:	fba2 2303 	umull	r2, r3, r2, r3
 8001512:	0a5b      	lsrs	r3, r3, #9
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	fb02 f303 	mul.w	r3, r2, r3
 800151a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800151c:	bf00      	nop
  }
  while (Delay --);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	1e5a      	subs	r2, r3, #1
 8001522:	60fa      	str	r2, [r7, #12]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1f9      	bne.n	800151c <RCC_Delay+0x1c>
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	20000000 	.word	0x20000000
 8001538:	10624dd3 	.word	0x10624dd3

0800153c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e03f      	b.n	80015ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d106      	bne.n	8001568 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7fe ff46 	bl	80003f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2224      	movs	r2, #36	; 0x24
 800156c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68da      	ldr	r2, [r3, #12]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800157e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 f9a7 	bl	80018d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	691a      	ldr	r2, [r3, #16]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001594:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	695a      	ldr	r2, [r3, #20]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80015a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2220      	movs	r2, #32
 80015c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2220      	movs	r2, #32
 80015c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b08a      	sub	sp, #40	; 0x28
 80015da:	af02      	add	r7, sp, #8
 80015dc:	60f8      	str	r0, [r7, #12]
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	4613      	mov	r3, r2
 80015e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b20      	cmp	r3, #32
 80015f4:	d17c      	bne.n	80016f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <HAL_UART_Transmit+0x2c>
 80015fc:	88fb      	ldrh	r3, [r7, #6]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e075      	b.n	80016f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800160c:	2b01      	cmp	r3, #1
 800160e:	d101      	bne.n	8001614 <HAL_UART_Transmit+0x3e>
 8001610:	2302      	movs	r3, #2
 8001612:	e06e      	b.n	80016f2 <HAL_UART_Transmit+0x11c>
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2200      	movs	r2, #0
 8001620:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2221      	movs	r2, #33	; 0x21
 8001626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800162a:	f7ff f873 	bl	8000714 <HAL_GetTick>
 800162e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	88fa      	ldrh	r2, [r7, #6]
 8001634:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	88fa      	ldrh	r2, [r7, #6]
 800163a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001644:	d108      	bne.n	8001658 <HAL_UART_Transmit+0x82>
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d104      	bne.n	8001658 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	61bb      	str	r3, [r7, #24]
 8001656:	e003      	b.n	8001660 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001668:	e02a      	b.n	80016c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	2200      	movs	r2, #0
 8001672:	2180      	movs	r1, #128	; 0x80
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f000 f8e2 	bl	800183e <UART_WaitOnFlagUntilTimeout>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e036      	b.n	80016f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10b      	bne.n	80016a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001698:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	3302      	adds	r3, #2
 800169e:	61bb      	str	r3, [r7, #24]
 80016a0:	e007      	b.n	80016b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	781a      	ldrb	r2, [r3, #0]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	3301      	adds	r3, #1
 80016b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	3b01      	subs	r3, #1
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1cf      	bne.n	800166a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	2200      	movs	r2, #0
 80016d2:	2140      	movs	r1, #64	; 0x40
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f000 f8b2 	bl	800183e <UART_WaitOnFlagUntilTimeout>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e006      	b.n	80016f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2220      	movs	r2, #32
 80016e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	e000      	b.n	80016f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80016f0:	2302      	movs	r3, #2
  }
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3720      	adds	r7, #32
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b08a      	sub	sp, #40	; 0x28
 80016fe:	af02      	add	r7, sp, #8
 8001700:	60f8      	str	r0, [r7, #12]
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	4613      	mov	r3, r2
 8001708:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b20      	cmp	r3, #32
 8001718:	f040 808c 	bne.w	8001834 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <HAL_UART_Receive+0x2e>
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e084      	b.n	8001836 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_UART_Receive+0x40>
 8001736:	2302      	movs	r3, #2
 8001738:	e07d      	b.n	8001836 <HAL_UART_Receive+0x13c>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2200      	movs	r2, #0
 8001746:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2222      	movs	r2, #34	; 0x22
 800174c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2200      	movs	r2, #0
 8001754:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001756:	f7fe ffdd 	bl	8000714 <HAL_GetTick>
 800175a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	88fa      	ldrh	r2, [r7, #6]
 8001760:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	88fa      	ldrh	r2, [r7, #6]
 8001766:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001770:	d108      	bne.n	8001784 <HAL_UART_Receive+0x8a>
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d104      	bne.n	8001784 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	e003      	b.n	800178c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001794:	e043      	b.n	800181e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	2200      	movs	r2, #0
 800179e:	2120      	movs	r1, #32
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	f000 f84c 	bl	800183e <UART_WaitOnFlagUntilTimeout>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e042      	b.n	8001836 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10c      	bne.n	80017d0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	3302      	adds	r3, #2
 80017cc:	61bb      	str	r3, [r7, #24]
 80017ce:	e01f      	b.n	8001810 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017d8:	d007      	beq.n	80017ea <HAL_UART_Receive+0xf0>
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10a      	bne.n	80017f8 <HAL_UART_Receive+0xfe>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d106      	bne.n	80017f8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	701a      	strb	r2, [r3, #0]
 80017f6:	e008      	b.n	800180a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001804:	b2da      	uxtb	r2, r3
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3301      	adds	r3, #1
 800180e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001814:	b29b      	uxth	r3, r3
 8001816:	3b01      	subs	r3, #1
 8001818:	b29a      	uxth	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001822:	b29b      	uxth	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1b6      	bne.n	8001796 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2220      	movs	r2, #32
 800182c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	e000      	b.n	8001836 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001834:	2302      	movs	r3, #2
  }
}
 8001836:	4618      	mov	r0, r3
 8001838:	3720      	adds	r7, #32
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b084      	sub	sp, #16
 8001842:	af00      	add	r7, sp, #0
 8001844:	60f8      	str	r0, [r7, #12]
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	4613      	mov	r3, r2
 800184c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800184e:	e02c      	b.n	80018aa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001856:	d028      	beq.n	80018aa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d007      	beq.n	800186e <UART_WaitOnFlagUntilTimeout+0x30>
 800185e:	f7fe ff59 	bl	8000714 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	429a      	cmp	r2, r3
 800186c:	d21d      	bcs.n	80018aa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800187c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	695a      	ldr	r2, [r3, #20]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 0201 	bic.w	r2, r2, #1
 800188c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2220      	movs	r2, #32
 8001892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2220      	movs	r2, #32
 800189a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e00f      	b.n	80018ca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	4013      	ands	r3, r2
 80018b4:	68ba      	ldr	r2, [r7, #8]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	bf0c      	ite	eq
 80018ba:	2301      	moveq	r3, #1
 80018bc:	2300      	movne	r3, #0
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	461a      	mov	r2, r3
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d0c3      	beq.n	8001850 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68da      	ldr	r2, [r3, #12]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	4313      	orrs	r3, r2
 8001902:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800190e:	f023 030c 	bic.w	r3, r3, #12
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6812      	ldr	r2, [r2, #0]
 8001916:	68b9      	ldr	r1, [r7, #8]
 8001918:	430b      	orrs	r3, r1
 800191a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699a      	ldr	r2, [r3, #24]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a2c      	ldr	r2, [pc, #176]	; (80019e8 <UART_SetConfig+0x114>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d103      	bne.n	8001944 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800193c:	f7ff fdcc 	bl	80014d8 <HAL_RCC_GetPCLK2Freq>
 8001940:	60f8      	str	r0, [r7, #12]
 8001942:	e002      	b.n	800194a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001944:	f7ff fdb4 	bl	80014b0 <HAL_RCC_GetPCLK1Freq>
 8001948:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	009a      	lsls	r2, r3, #2
 8001954:	441a      	add	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001960:	4a22      	ldr	r2, [pc, #136]	; (80019ec <UART_SetConfig+0x118>)
 8001962:	fba2 2303 	umull	r2, r3, r2, r3
 8001966:	095b      	lsrs	r3, r3, #5
 8001968:	0119      	lsls	r1, r3, #4
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	009a      	lsls	r2, r3, #2
 8001974:	441a      	add	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001980:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <UART_SetConfig+0x118>)
 8001982:	fba3 0302 	umull	r0, r3, r3, r2
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	2064      	movs	r0, #100	; 0x64
 800198a:	fb00 f303 	mul.w	r3, r0, r3
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	3332      	adds	r3, #50	; 0x32
 8001994:	4a15      	ldr	r2, [pc, #84]	; (80019ec <UART_SetConfig+0x118>)
 8001996:	fba2 2303 	umull	r2, r3, r2, r3
 800199a:	095b      	lsrs	r3, r3, #5
 800199c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019a0:	4419      	add	r1, r3
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	009a      	lsls	r2, r3, #2
 80019ac:	441a      	add	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <UART_SetConfig+0x118>)
 80019ba:	fba3 0302 	umull	r0, r3, r3, r2
 80019be:	095b      	lsrs	r3, r3, #5
 80019c0:	2064      	movs	r0, #100	; 0x64
 80019c2:	fb00 f303 	mul.w	r3, r0, r3
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	3332      	adds	r3, #50	; 0x32
 80019cc:	4a07      	ldr	r2, [pc, #28]	; (80019ec <UART_SetConfig+0x118>)
 80019ce:	fba2 2303 	umull	r2, r3, r2, r3
 80019d2:	095b      	lsrs	r3, r3, #5
 80019d4:	f003 020f 	and.w	r2, r3, #15
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	440a      	add	r2, r1
 80019de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80019e0:	bf00      	nop
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40013800 	.word	0x40013800
 80019ec:	51eb851f 	.word	0x51eb851f

080019f0 <__errno>:
 80019f0:	4b01      	ldr	r3, [pc, #4]	; (80019f8 <__errno+0x8>)
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	2000000c 	.word	0x2000000c

080019fc <__libc_init_array>:
 80019fc:	b570      	push	{r4, r5, r6, lr}
 80019fe:	2600      	movs	r6, #0
 8001a00:	4d0c      	ldr	r5, [pc, #48]	; (8001a34 <__libc_init_array+0x38>)
 8001a02:	4c0d      	ldr	r4, [pc, #52]	; (8001a38 <__libc_init_array+0x3c>)
 8001a04:	1b64      	subs	r4, r4, r5
 8001a06:	10a4      	asrs	r4, r4, #2
 8001a08:	42a6      	cmp	r6, r4
 8001a0a:	d109      	bne.n	8001a20 <__libc_init_array+0x24>
 8001a0c:	f000 fd18 	bl	8002440 <_init>
 8001a10:	2600      	movs	r6, #0
 8001a12:	4d0a      	ldr	r5, [pc, #40]	; (8001a3c <__libc_init_array+0x40>)
 8001a14:	4c0a      	ldr	r4, [pc, #40]	; (8001a40 <__libc_init_array+0x44>)
 8001a16:	1b64      	subs	r4, r4, r5
 8001a18:	10a4      	asrs	r4, r4, #2
 8001a1a:	42a6      	cmp	r6, r4
 8001a1c:	d105      	bne.n	8001a2a <__libc_init_array+0x2e>
 8001a1e:	bd70      	pop	{r4, r5, r6, pc}
 8001a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a24:	4798      	blx	r3
 8001a26:	3601      	adds	r6, #1
 8001a28:	e7ee      	b.n	8001a08 <__libc_init_array+0xc>
 8001a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a2e:	4798      	blx	r3
 8001a30:	3601      	adds	r6, #1
 8001a32:	e7f2      	b.n	8001a1a <__libc_init_array+0x1e>
 8001a34:	080024f0 	.word	0x080024f0
 8001a38:	080024f0 	.word	0x080024f0
 8001a3c:	080024f0 	.word	0x080024f0
 8001a40:	080024f4 	.word	0x080024f4

08001a44 <memset>:
 8001a44:	4603      	mov	r3, r0
 8001a46:	4402      	add	r2, r0
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d100      	bne.n	8001a4e <memset+0xa>
 8001a4c:	4770      	bx	lr
 8001a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8001a52:	e7f9      	b.n	8001a48 <memset+0x4>

08001a54 <_puts_r>:
 8001a54:	b570      	push	{r4, r5, r6, lr}
 8001a56:	460e      	mov	r6, r1
 8001a58:	4605      	mov	r5, r0
 8001a5a:	b118      	cbz	r0, 8001a64 <_puts_r+0x10>
 8001a5c:	6983      	ldr	r3, [r0, #24]
 8001a5e:	b90b      	cbnz	r3, 8001a64 <_puts_r+0x10>
 8001a60:	f000 fa44 	bl	8001eec <__sinit>
 8001a64:	69ab      	ldr	r3, [r5, #24]
 8001a66:	68ac      	ldr	r4, [r5, #8]
 8001a68:	b913      	cbnz	r3, 8001a70 <_puts_r+0x1c>
 8001a6a:	4628      	mov	r0, r5
 8001a6c:	f000 fa3e 	bl	8001eec <__sinit>
 8001a70:	4b2c      	ldr	r3, [pc, #176]	; (8001b24 <_puts_r+0xd0>)
 8001a72:	429c      	cmp	r4, r3
 8001a74:	d120      	bne.n	8001ab8 <_puts_r+0x64>
 8001a76:	686c      	ldr	r4, [r5, #4]
 8001a78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a7a:	07db      	lsls	r3, r3, #31
 8001a7c:	d405      	bmi.n	8001a8a <_puts_r+0x36>
 8001a7e:	89a3      	ldrh	r3, [r4, #12]
 8001a80:	0598      	lsls	r0, r3, #22
 8001a82:	d402      	bmi.n	8001a8a <_puts_r+0x36>
 8001a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a86:	f000 facf 	bl	8002028 <__retarget_lock_acquire_recursive>
 8001a8a:	89a3      	ldrh	r3, [r4, #12]
 8001a8c:	0719      	lsls	r1, r3, #28
 8001a8e:	d51d      	bpl.n	8001acc <_puts_r+0x78>
 8001a90:	6923      	ldr	r3, [r4, #16]
 8001a92:	b1db      	cbz	r3, 8001acc <_puts_r+0x78>
 8001a94:	3e01      	subs	r6, #1
 8001a96:	68a3      	ldr	r3, [r4, #8]
 8001a98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	60a3      	str	r3, [r4, #8]
 8001aa0:	bb39      	cbnz	r1, 8001af2 <_puts_r+0x9e>
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	da38      	bge.n	8001b18 <_puts_r+0xc4>
 8001aa6:	4622      	mov	r2, r4
 8001aa8:	210a      	movs	r1, #10
 8001aaa:	4628      	mov	r0, r5
 8001aac:	f000 f848 	bl	8001b40 <__swbuf_r>
 8001ab0:	3001      	adds	r0, #1
 8001ab2:	d011      	beq.n	8001ad8 <_puts_r+0x84>
 8001ab4:	250a      	movs	r5, #10
 8001ab6:	e011      	b.n	8001adc <_puts_r+0x88>
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <_puts_r+0xd4>)
 8001aba:	429c      	cmp	r4, r3
 8001abc:	d101      	bne.n	8001ac2 <_puts_r+0x6e>
 8001abe:	68ac      	ldr	r4, [r5, #8]
 8001ac0:	e7da      	b.n	8001a78 <_puts_r+0x24>
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <_puts_r+0xd8>)
 8001ac4:	429c      	cmp	r4, r3
 8001ac6:	bf08      	it	eq
 8001ac8:	68ec      	ldreq	r4, [r5, #12]
 8001aca:	e7d5      	b.n	8001a78 <_puts_r+0x24>
 8001acc:	4621      	mov	r1, r4
 8001ace:	4628      	mov	r0, r5
 8001ad0:	f000 f888 	bl	8001be4 <__swsetup_r>
 8001ad4:	2800      	cmp	r0, #0
 8001ad6:	d0dd      	beq.n	8001a94 <_puts_r+0x40>
 8001ad8:	f04f 35ff 	mov.w	r5, #4294967295
 8001adc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ade:	07da      	lsls	r2, r3, #31
 8001ae0:	d405      	bmi.n	8001aee <_puts_r+0x9a>
 8001ae2:	89a3      	ldrh	r3, [r4, #12]
 8001ae4:	059b      	lsls	r3, r3, #22
 8001ae6:	d402      	bmi.n	8001aee <_puts_r+0x9a>
 8001ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001aea:	f000 fa9e 	bl	800202a <__retarget_lock_release_recursive>
 8001aee:	4628      	mov	r0, r5
 8001af0:	bd70      	pop	{r4, r5, r6, pc}
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	da04      	bge.n	8001b00 <_puts_r+0xac>
 8001af6:	69a2      	ldr	r2, [r4, #24]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	dc06      	bgt.n	8001b0a <_puts_r+0xb6>
 8001afc:	290a      	cmp	r1, #10
 8001afe:	d004      	beq.n	8001b0a <_puts_r+0xb6>
 8001b00:	6823      	ldr	r3, [r4, #0]
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	6022      	str	r2, [r4, #0]
 8001b06:	7019      	strb	r1, [r3, #0]
 8001b08:	e7c5      	b.n	8001a96 <_puts_r+0x42>
 8001b0a:	4622      	mov	r2, r4
 8001b0c:	4628      	mov	r0, r5
 8001b0e:	f000 f817 	bl	8001b40 <__swbuf_r>
 8001b12:	3001      	adds	r0, #1
 8001b14:	d1bf      	bne.n	8001a96 <_puts_r+0x42>
 8001b16:	e7df      	b.n	8001ad8 <_puts_r+0x84>
 8001b18:	250a      	movs	r5, #10
 8001b1a:	6823      	ldr	r3, [r4, #0]
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	6022      	str	r2, [r4, #0]
 8001b20:	701d      	strb	r5, [r3, #0]
 8001b22:	e7db      	b.n	8001adc <_puts_r+0x88>
 8001b24:	080024b0 	.word	0x080024b0
 8001b28:	080024d0 	.word	0x080024d0
 8001b2c:	08002490 	.word	0x08002490

08001b30 <puts>:
 8001b30:	4b02      	ldr	r3, [pc, #8]	; (8001b3c <puts+0xc>)
 8001b32:	4601      	mov	r1, r0
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	f7ff bf8d 	b.w	8001a54 <_puts_r>
 8001b3a:	bf00      	nop
 8001b3c:	2000000c 	.word	0x2000000c

08001b40 <__swbuf_r>:
 8001b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b42:	460e      	mov	r6, r1
 8001b44:	4614      	mov	r4, r2
 8001b46:	4605      	mov	r5, r0
 8001b48:	b118      	cbz	r0, 8001b52 <__swbuf_r+0x12>
 8001b4a:	6983      	ldr	r3, [r0, #24]
 8001b4c:	b90b      	cbnz	r3, 8001b52 <__swbuf_r+0x12>
 8001b4e:	f000 f9cd 	bl	8001eec <__sinit>
 8001b52:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <__swbuf_r+0x98>)
 8001b54:	429c      	cmp	r4, r3
 8001b56:	d12b      	bne.n	8001bb0 <__swbuf_r+0x70>
 8001b58:	686c      	ldr	r4, [r5, #4]
 8001b5a:	69a3      	ldr	r3, [r4, #24]
 8001b5c:	60a3      	str	r3, [r4, #8]
 8001b5e:	89a3      	ldrh	r3, [r4, #12]
 8001b60:	071a      	lsls	r2, r3, #28
 8001b62:	d52f      	bpl.n	8001bc4 <__swbuf_r+0x84>
 8001b64:	6923      	ldr	r3, [r4, #16]
 8001b66:	b36b      	cbz	r3, 8001bc4 <__swbuf_r+0x84>
 8001b68:	6923      	ldr	r3, [r4, #16]
 8001b6a:	6820      	ldr	r0, [r4, #0]
 8001b6c:	b2f6      	uxtb	r6, r6
 8001b6e:	1ac0      	subs	r0, r0, r3
 8001b70:	6963      	ldr	r3, [r4, #20]
 8001b72:	4637      	mov	r7, r6
 8001b74:	4283      	cmp	r3, r0
 8001b76:	dc04      	bgt.n	8001b82 <__swbuf_r+0x42>
 8001b78:	4621      	mov	r1, r4
 8001b7a:	4628      	mov	r0, r5
 8001b7c:	f000 f922 	bl	8001dc4 <_fflush_r>
 8001b80:	bb30      	cbnz	r0, 8001bd0 <__swbuf_r+0x90>
 8001b82:	68a3      	ldr	r3, [r4, #8]
 8001b84:	3001      	adds	r0, #1
 8001b86:	3b01      	subs	r3, #1
 8001b88:	60a3      	str	r3, [r4, #8]
 8001b8a:	6823      	ldr	r3, [r4, #0]
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	6022      	str	r2, [r4, #0]
 8001b90:	701e      	strb	r6, [r3, #0]
 8001b92:	6963      	ldr	r3, [r4, #20]
 8001b94:	4283      	cmp	r3, r0
 8001b96:	d004      	beq.n	8001ba2 <__swbuf_r+0x62>
 8001b98:	89a3      	ldrh	r3, [r4, #12]
 8001b9a:	07db      	lsls	r3, r3, #31
 8001b9c:	d506      	bpl.n	8001bac <__swbuf_r+0x6c>
 8001b9e:	2e0a      	cmp	r6, #10
 8001ba0:	d104      	bne.n	8001bac <__swbuf_r+0x6c>
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	4628      	mov	r0, r5
 8001ba6:	f000 f90d 	bl	8001dc4 <_fflush_r>
 8001baa:	b988      	cbnz	r0, 8001bd0 <__swbuf_r+0x90>
 8001bac:	4638      	mov	r0, r7
 8001bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bb0:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <__swbuf_r+0x9c>)
 8001bb2:	429c      	cmp	r4, r3
 8001bb4:	d101      	bne.n	8001bba <__swbuf_r+0x7a>
 8001bb6:	68ac      	ldr	r4, [r5, #8]
 8001bb8:	e7cf      	b.n	8001b5a <__swbuf_r+0x1a>
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <__swbuf_r+0xa0>)
 8001bbc:	429c      	cmp	r4, r3
 8001bbe:	bf08      	it	eq
 8001bc0:	68ec      	ldreq	r4, [r5, #12]
 8001bc2:	e7ca      	b.n	8001b5a <__swbuf_r+0x1a>
 8001bc4:	4621      	mov	r1, r4
 8001bc6:	4628      	mov	r0, r5
 8001bc8:	f000 f80c 	bl	8001be4 <__swsetup_r>
 8001bcc:	2800      	cmp	r0, #0
 8001bce:	d0cb      	beq.n	8001b68 <__swbuf_r+0x28>
 8001bd0:	f04f 37ff 	mov.w	r7, #4294967295
 8001bd4:	e7ea      	b.n	8001bac <__swbuf_r+0x6c>
 8001bd6:	bf00      	nop
 8001bd8:	080024b0 	.word	0x080024b0
 8001bdc:	080024d0 	.word	0x080024d0
 8001be0:	08002490 	.word	0x08002490

08001be4 <__swsetup_r>:
 8001be4:	4b32      	ldr	r3, [pc, #200]	; (8001cb0 <__swsetup_r+0xcc>)
 8001be6:	b570      	push	{r4, r5, r6, lr}
 8001be8:	681d      	ldr	r5, [r3, #0]
 8001bea:	4606      	mov	r6, r0
 8001bec:	460c      	mov	r4, r1
 8001bee:	b125      	cbz	r5, 8001bfa <__swsetup_r+0x16>
 8001bf0:	69ab      	ldr	r3, [r5, #24]
 8001bf2:	b913      	cbnz	r3, 8001bfa <__swsetup_r+0x16>
 8001bf4:	4628      	mov	r0, r5
 8001bf6:	f000 f979 	bl	8001eec <__sinit>
 8001bfa:	4b2e      	ldr	r3, [pc, #184]	; (8001cb4 <__swsetup_r+0xd0>)
 8001bfc:	429c      	cmp	r4, r3
 8001bfe:	d10f      	bne.n	8001c20 <__swsetup_r+0x3c>
 8001c00:	686c      	ldr	r4, [r5, #4]
 8001c02:	89a3      	ldrh	r3, [r4, #12]
 8001c04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c08:	0719      	lsls	r1, r3, #28
 8001c0a:	d42c      	bmi.n	8001c66 <__swsetup_r+0x82>
 8001c0c:	06dd      	lsls	r5, r3, #27
 8001c0e:	d411      	bmi.n	8001c34 <__swsetup_r+0x50>
 8001c10:	2309      	movs	r3, #9
 8001c12:	6033      	str	r3, [r6, #0]
 8001c14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1c:	81a3      	strh	r3, [r4, #12]
 8001c1e:	e03e      	b.n	8001c9e <__swsetup_r+0xba>
 8001c20:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <__swsetup_r+0xd4>)
 8001c22:	429c      	cmp	r4, r3
 8001c24:	d101      	bne.n	8001c2a <__swsetup_r+0x46>
 8001c26:	68ac      	ldr	r4, [r5, #8]
 8001c28:	e7eb      	b.n	8001c02 <__swsetup_r+0x1e>
 8001c2a:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <__swsetup_r+0xd8>)
 8001c2c:	429c      	cmp	r4, r3
 8001c2e:	bf08      	it	eq
 8001c30:	68ec      	ldreq	r4, [r5, #12]
 8001c32:	e7e6      	b.n	8001c02 <__swsetup_r+0x1e>
 8001c34:	0758      	lsls	r0, r3, #29
 8001c36:	d512      	bpl.n	8001c5e <__swsetup_r+0x7a>
 8001c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c3a:	b141      	cbz	r1, 8001c4e <__swsetup_r+0x6a>
 8001c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c40:	4299      	cmp	r1, r3
 8001c42:	d002      	beq.n	8001c4a <__swsetup_r+0x66>
 8001c44:	4630      	mov	r0, r6
 8001c46:	f000 fa57 	bl	80020f8 <_free_r>
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	6363      	str	r3, [r4, #52]	; 0x34
 8001c4e:	89a3      	ldrh	r3, [r4, #12]
 8001c50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001c54:	81a3      	strh	r3, [r4, #12]
 8001c56:	2300      	movs	r3, #0
 8001c58:	6063      	str	r3, [r4, #4]
 8001c5a:	6923      	ldr	r3, [r4, #16]
 8001c5c:	6023      	str	r3, [r4, #0]
 8001c5e:	89a3      	ldrh	r3, [r4, #12]
 8001c60:	f043 0308 	orr.w	r3, r3, #8
 8001c64:	81a3      	strh	r3, [r4, #12]
 8001c66:	6923      	ldr	r3, [r4, #16]
 8001c68:	b94b      	cbnz	r3, 8001c7e <__swsetup_r+0x9a>
 8001c6a:	89a3      	ldrh	r3, [r4, #12]
 8001c6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c74:	d003      	beq.n	8001c7e <__swsetup_r+0x9a>
 8001c76:	4621      	mov	r1, r4
 8001c78:	4630      	mov	r0, r6
 8001c7a:	f000 f9fd 	bl	8002078 <__smakebuf_r>
 8001c7e:	89a0      	ldrh	r0, [r4, #12]
 8001c80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c84:	f010 0301 	ands.w	r3, r0, #1
 8001c88:	d00a      	beq.n	8001ca0 <__swsetup_r+0xbc>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60a3      	str	r3, [r4, #8]
 8001c8e:	6963      	ldr	r3, [r4, #20]
 8001c90:	425b      	negs	r3, r3
 8001c92:	61a3      	str	r3, [r4, #24]
 8001c94:	6923      	ldr	r3, [r4, #16]
 8001c96:	b943      	cbnz	r3, 8001caa <__swsetup_r+0xc6>
 8001c98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001c9c:	d1ba      	bne.n	8001c14 <__swsetup_r+0x30>
 8001c9e:	bd70      	pop	{r4, r5, r6, pc}
 8001ca0:	0781      	lsls	r1, r0, #30
 8001ca2:	bf58      	it	pl
 8001ca4:	6963      	ldrpl	r3, [r4, #20]
 8001ca6:	60a3      	str	r3, [r4, #8]
 8001ca8:	e7f4      	b.n	8001c94 <__swsetup_r+0xb0>
 8001caa:	2000      	movs	r0, #0
 8001cac:	e7f7      	b.n	8001c9e <__swsetup_r+0xba>
 8001cae:	bf00      	nop
 8001cb0:	2000000c 	.word	0x2000000c
 8001cb4:	080024b0 	.word	0x080024b0
 8001cb8:	080024d0 	.word	0x080024d0
 8001cbc:	08002490 	.word	0x08002490

08001cc0 <__sflush_r>:
 8001cc0:	898a      	ldrh	r2, [r1, #12]
 8001cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cc4:	4605      	mov	r5, r0
 8001cc6:	0710      	lsls	r0, r2, #28
 8001cc8:	460c      	mov	r4, r1
 8001cca:	d457      	bmi.n	8001d7c <__sflush_r+0xbc>
 8001ccc:	684b      	ldr	r3, [r1, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	dc04      	bgt.n	8001cdc <__sflush_r+0x1c>
 8001cd2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	dc01      	bgt.n	8001cdc <__sflush_r+0x1c>
 8001cd8:	2000      	movs	r0, #0
 8001cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001cde:	2e00      	cmp	r6, #0
 8001ce0:	d0fa      	beq.n	8001cd8 <__sflush_r+0x18>
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001ce8:	682f      	ldr	r7, [r5, #0]
 8001cea:	602b      	str	r3, [r5, #0]
 8001cec:	d032      	beq.n	8001d54 <__sflush_r+0x94>
 8001cee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001cf0:	89a3      	ldrh	r3, [r4, #12]
 8001cf2:	075a      	lsls	r2, r3, #29
 8001cf4:	d505      	bpl.n	8001d02 <__sflush_r+0x42>
 8001cf6:	6863      	ldr	r3, [r4, #4]
 8001cf8:	1ac0      	subs	r0, r0, r3
 8001cfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001cfc:	b10b      	cbz	r3, 8001d02 <__sflush_r+0x42>
 8001cfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d00:	1ac0      	subs	r0, r0, r3
 8001d02:	2300      	movs	r3, #0
 8001d04:	4602      	mov	r2, r0
 8001d06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d08:	4628      	mov	r0, r5
 8001d0a:	6a21      	ldr	r1, [r4, #32]
 8001d0c:	47b0      	blx	r6
 8001d0e:	1c43      	adds	r3, r0, #1
 8001d10:	89a3      	ldrh	r3, [r4, #12]
 8001d12:	d106      	bne.n	8001d22 <__sflush_r+0x62>
 8001d14:	6829      	ldr	r1, [r5, #0]
 8001d16:	291d      	cmp	r1, #29
 8001d18:	d82c      	bhi.n	8001d74 <__sflush_r+0xb4>
 8001d1a:	4a29      	ldr	r2, [pc, #164]	; (8001dc0 <__sflush_r+0x100>)
 8001d1c:	40ca      	lsrs	r2, r1
 8001d1e:	07d6      	lsls	r6, r2, #31
 8001d20:	d528      	bpl.n	8001d74 <__sflush_r+0xb4>
 8001d22:	2200      	movs	r2, #0
 8001d24:	6062      	str	r2, [r4, #4]
 8001d26:	6922      	ldr	r2, [r4, #16]
 8001d28:	04d9      	lsls	r1, r3, #19
 8001d2a:	6022      	str	r2, [r4, #0]
 8001d2c:	d504      	bpl.n	8001d38 <__sflush_r+0x78>
 8001d2e:	1c42      	adds	r2, r0, #1
 8001d30:	d101      	bne.n	8001d36 <__sflush_r+0x76>
 8001d32:	682b      	ldr	r3, [r5, #0]
 8001d34:	b903      	cbnz	r3, 8001d38 <__sflush_r+0x78>
 8001d36:	6560      	str	r0, [r4, #84]	; 0x54
 8001d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d3a:	602f      	str	r7, [r5, #0]
 8001d3c:	2900      	cmp	r1, #0
 8001d3e:	d0cb      	beq.n	8001cd8 <__sflush_r+0x18>
 8001d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d44:	4299      	cmp	r1, r3
 8001d46:	d002      	beq.n	8001d4e <__sflush_r+0x8e>
 8001d48:	4628      	mov	r0, r5
 8001d4a:	f000 f9d5 	bl	80020f8 <_free_r>
 8001d4e:	2000      	movs	r0, #0
 8001d50:	6360      	str	r0, [r4, #52]	; 0x34
 8001d52:	e7c2      	b.n	8001cda <__sflush_r+0x1a>
 8001d54:	6a21      	ldr	r1, [r4, #32]
 8001d56:	2301      	movs	r3, #1
 8001d58:	4628      	mov	r0, r5
 8001d5a:	47b0      	blx	r6
 8001d5c:	1c41      	adds	r1, r0, #1
 8001d5e:	d1c7      	bne.n	8001cf0 <__sflush_r+0x30>
 8001d60:	682b      	ldr	r3, [r5, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0c4      	beq.n	8001cf0 <__sflush_r+0x30>
 8001d66:	2b1d      	cmp	r3, #29
 8001d68:	d001      	beq.n	8001d6e <__sflush_r+0xae>
 8001d6a:	2b16      	cmp	r3, #22
 8001d6c:	d101      	bne.n	8001d72 <__sflush_r+0xb2>
 8001d6e:	602f      	str	r7, [r5, #0]
 8001d70:	e7b2      	b.n	8001cd8 <__sflush_r+0x18>
 8001d72:	89a3      	ldrh	r3, [r4, #12]
 8001d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d78:	81a3      	strh	r3, [r4, #12]
 8001d7a:	e7ae      	b.n	8001cda <__sflush_r+0x1a>
 8001d7c:	690f      	ldr	r7, [r1, #16]
 8001d7e:	2f00      	cmp	r7, #0
 8001d80:	d0aa      	beq.n	8001cd8 <__sflush_r+0x18>
 8001d82:	0793      	lsls	r3, r2, #30
 8001d84:	bf18      	it	ne
 8001d86:	2300      	movne	r3, #0
 8001d88:	680e      	ldr	r6, [r1, #0]
 8001d8a:	bf08      	it	eq
 8001d8c:	694b      	ldreq	r3, [r1, #20]
 8001d8e:	1bf6      	subs	r6, r6, r7
 8001d90:	600f      	str	r7, [r1, #0]
 8001d92:	608b      	str	r3, [r1, #8]
 8001d94:	2e00      	cmp	r6, #0
 8001d96:	dd9f      	ble.n	8001cd8 <__sflush_r+0x18>
 8001d98:	4633      	mov	r3, r6
 8001d9a:	463a      	mov	r2, r7
 8001d9c:	4628      	mov	r0, r5
 8001d9e:	6a21      	ldr	r1, [r4, #32]
 8001da0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001da4:	47e0      	blx	ip
 8001da6:	2800      	cmp	r0, #0
 8001da8:	dc06      	bgt.n	8001db8 <__sflush_r+0xf8>
 8001daa:	89a3      	ldrh	r3, [r4, #12]
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001db4:	81a3      	strh	r3, [r4, #12]
 8001db6:	e790      	b.n	8001cda <__sflush_r+0x1a>
 8001db8:	4407      	add	r7, r0
 8001dba:	1a36      	subs	r6, r6, r0
 8001dbc:	e7ea      	b.n	8001d94 <__sflush_r+0xd4>
 8001dbe:	bf00      	nop
 8001dc0:	20400001 	.word	0x20400001

08001dc4 <_fflush_r>:
 8001dc4:	b538      	push	{r3, r4, r5, lr}
 8001dc6:	690b      	ldr	r3, [r1, #16]
 8001dc8:	4605      	mov	r5, r0
 8001dca:	460c      	mov	r4, r1
 8001dcc:	b913      	cbnz	r3, 8001dd4 <_fflush_r+0x10>
 8001dce:	2500      	movs	r5, #0
 8001dd0:	4628      	mov	r0, r5
 8001dd2:	bd38      	pop	{r3, r4, r5, pc}
 8001dd4:	b118      	cbz	r0, 8001dde <_fflush_r+0x1a>
 8001dd6:	6983      	ldr	r3, [r0, #24]
 8001dd8:	b90b      	cbnz	r3, 8001dde <_fflush_r+0x1a>
 8001dda:	f000 f887 	bl	8001eec <__sinit>
 8001dde:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <_fflush_r+0x6c>)
 8001de0:	429c      	cmp	r4, r3
 8001de2:	d11b      	bne.n	8001e1c <_fflush_r+0x58>
 8001de4:	686c      	ldr	r4, [r5, #4]
 8001de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0ef      	beq.n	8001dce <_fflush_r+0xa>
 8001dee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001df0:	07d0      	lsls	r0, r2, #31
 8001df2:	d404      	bmi.n	8001dfe <_fflush_r+0x3a>
 8001df4:	0599      	lsls	r1, r3, #22
 8001df6:	d402      	bmi.n	8001dfe <_fflush_r+0x3a>
 8001df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dfa:	f000 f915 	bl	8002028 <__retarget_lock_acquire_recursive>
 8001dfe:	4628      	mov	r0, r5
 8001e00:	4621      	mov	r1, r4
 8001e02:	f7ff ff5d 	bl	8001cc0 <__sflush_r>
 8001e06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e08:	4605      	mov	r5, r0
 8001e0a:	07da      	lsls	r2, r3, #31
 8001e0c:	d4e0      	bmi.n	8001dd0 <_fflush_r+0xc>
 8001e0e:	89a3      	ldrh	r3, [r4, #12]
 8001e10:	059b      	lsls	r3, r3, #22
 8001e12:	d4dd      	bmi.n	8001dd0 <_fflush_r+0xc>
 8001e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e16:	f000 f908 	bl	800202a <__retarget_lock_release_recursive>
 8001e1a:	e7d9      	b.n	8001dd0 <_fflush_r+0xc>
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <_fflush_r+0x70>)
 8001e1e:	429c      	cmp	r4, r3
 8001e20:	d101      	bne.n	8001e26 <_fflush_r+0x62>
 8001e22:	68ac      	ldr	r4, [r5, #8]
 8001e24:	e7df      	b.n	8001de6 <_fflush_r+0x22>
 8001e26:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <_fflush_r+0x74>)
 8001e28:	429c      	cmp	r4, r3
 8001e2a:	bf08      	it	eq
 8001e2c:	68ec      	ldreq	r4, [r5, #12]
 8001e2e:	e7da      	b.n	8001de6 <_fflush_r+0x22>
 8001e30:	080024b0 	.word	0x080024b0
 8001e34:	080024d0 	.word	0x080024d0
 8001e38:	08002490 	.word	0x08002490

08001e3c <std>:
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	b510      	push	{r4, lr}
 8001e40:	4604      	mov	r4, r0
 8001e42:	e9c0 3300 	strd	r3, r3, [r0]
 8001e46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e4a:	6083      	str	r3, [r0, #8]
 8001e4c:	8181      	strh	r1, [r0, #12]
 8001e4e:	6643      	str	r3, [r0, #100]	; 0x64
 8001e50:	81c2      	strh	r2, [r0, #14]
 8001e52:	6183      	str	r3, [r0, #24]
 8001e54:	4619      	mov	r1, r3
 8001e56:	2208      	movs	r2, #8
 8001e58:	305c      	adds	r0, #92	; 0x5c
 8001e5a:	f7ff fdf3 	bl	8001a44 <memset>
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <std+0x38>)
 8001e60:	6224      	str	r4, [r4, #32]
 8001e62:	6263      	str	r3, [r4, #36]	; 0x24
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <std+0x3c>)
 8001e66:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <std+0x40>)
 8001e6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <std+0x44>)
 8001e6e:	6323      	str	r3, [r4, #48]	; 0x30
 8001e70:	bd10      	pop	{r4, pc}
 8001e72:	bf00      	nop
 8001e74:	080022d1 	.word	0x080022d1
 8001e78:	080022f3 	.word	0x080022f3
 8001e7c:	0800232b 	.word	0x0800232b
 8001e80:	0800234f 	.word	0x0800234f

08001e84 <_cleanup_r>:
 8001e84:	4901      	ldr	r1, [pc, #4]	; (8001e8c <_cleanup_r+0x8>)
 8001e86:	f000 b8af 	b.w	8001fe8 <_fwalk_reent>
 8001e8a:	bf00      	nop
 8001e8c:	08001dc5 	.word	0x08001dc5

08001e90 <__sfmoreglue>:
 8001e90:	2268      	movs	r2, #104	; 0x68
 8001e92:	b570      	push	{r4, r5, r6, lr}
 8001e94:	1e4d      	subs	r5, r1, #1
 8001e96:	4355      	muls	r5, r2
 8001e98:	460e      	mov	r6, r1
 8001e9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001e9e:	f000 f993 	bl	80021c8 <_malloc_r>
 8001ea2:	4604      	mov	r4, r0
 8001ea4:	b140      	cbz	r0, 8001eb8 <__sfmoreglue+0x28>
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	e9c0 1600 	strd	r1, r6, [r0]
 8001eac:	300c      	adds	r0, #12
 8001eae:	60a0      	str	r0, [r4, #8]
 8001eb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001eb4:	f7ff fdc6 	bl	8001a44 <memset>
 8001eb8:	4620      	mov	r0, r4
 8001eba:	bd70      	pop	{r4, r5, r6, pc}

08001ebc <__sfp_lock_acquire>:
 8001ebc:	4801      	ldr	r0, [pc, #4]	; (8001ec4 <__sfp_lock_acquire+0x8>)
 8001ebe:	f000 b8b3 	b.w	8002028 <__retarget_lock_acquire_recursive>
 8001ec2:	bf00      	nop
 8001ec4:	200000d9 	.word	0x200000d9

08001ec8 <__sfp_lock_release>:
 8001ec8:	4801      	ldr	r0, [pc, #4]	; (8001ed0 <__sfp_lock_release+0x8>)
 8001eca:	f000 b8ae 	b.w	800202a <__retarget_lock_release_recursive>
 8001ece:	bf00      	nop
 8001ed0:	200000d9 	.word	0x200000d9

08001ed4 <__sinit_lock_acquire>:
 8001ed4:	4801      	ldr	r0, [pc, #4]	; (8001edc <__sinit_lock_acquire+0x8>)
 8001ed6:	f000 b8a7 	b.w	8002028 <__retarget_lock_acquire_recursive>
 8001eda:	bf00      	nop
 8001edc:	200000da 	.word	0x200000da

08001ee0 <__sinit_lock_release>:
 8001ee0:	4801      	ldr	r0, [pc, #4]	; (8001ee8 <__sinit_lock_release+0x8>)
 8001ee2:	f000 b8a2 	b.w	800202a <__retarget_lock_release_recursive>
 8001ee6:	bf00      	nop
 8001ee8:	200000da 	.word	0x200000da

08001eec <__sinit>:
 8001eec:	b510      	push	{r4, lr}
 8001eee:	4604      	mov	r4, r0
 8001ef0:	f7ff fff0 	bl	8001ed4 <__sinit_lock_acquire>
 8001ef4:	69a3      	ldr	r3, [r4, #24]
 8001ef6:	b11b      	cbz	r3, 8001f00 <__sinit+0x14>
 8001ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001efc:	f7ff bff0 	b.w	8001ee0 <__sinit_lock_release>
 8001f00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001f04:	6523      	str	r3, [r4, #80]	; 0x50
 8001f06:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <__sinit+0x68>)
 8001f08:	4a13      	ldr	r2, [pc, #76]	; (8001f58 <__sinit+0x6c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8001f0e:	42a3      	cmp	r3, r4
 8001f10:	bf08      	it	eq
 8001f12:	2301      	moveq	r3, #1
 8001f14:	4620      	mov	r0, r4
 8001f16:	bf08      	it	eq
 8001f18:	61a3      	streq	r3, [r4, #24]
 8001f1a:	f000 f81f 	bl	8001f5c <__sfp>
 8001f1e:	6060      	str	r0, [r4, #4]
 8001f20:	4620      	mov	r0, r4
 8001f22:	f000 f81b 	bl	8001f5c <__sfp>
 8001f26:	60a0      	str	r0, [r4, #8]
 8001f28:	4620      	mov	r0, r4
 8001f2a:	f000 f817 	bl	8001f5c <__sfp>
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2104      	movs	r1, #4
 8001f32:	60e0      	str	r0, [r4, #12]
 8001f34:	6860      	ldr	r0, [r4, #4]
 8001f36:	f7ff ff81 	bl	8001e3c <std>
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	2109      	movs	r1, #9
 8001f3e:	68a0      	ldr	r0, [r4, #8]
 8001f40:	f7ff ff7c 	bl	8001e3c <std>
 8001f44:	2202      	movs	r2, #2
 8001f46:	2112      	movs	r1, #18
 8001f48:	68e0      	ldr	r0, [r4, #12]
 8001f4a:	f7ff ff77 	bl	8001e3c <std>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	61a3      	str	r3, [r4, #24]
 8001f52:	e7d1      	b.n	8001ef8 <__sinit+0xc>
 8001f54:	0800248c 	.word	0x0800248c
 8001f58:	08001e85 	.word	0x08001e85

08001f5c <__sfp>:
 8001f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f5e:	4607      	mov	r7, r0
 8001f60:	f7ff ffac 	bl	8001ebc <__sfp_lock_acquire>
 8001f64:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <__sfp+0x84>)
 8001f66:	681e      	ldr	r6, [r3, #0]
 8001f68:	69b3      	ldr	r3, [r6, #24]
 8001f6a:	b913      	cbnz	r3, 8001f72 <__sfp+0x16>
 8001f6c:	4630      	mov	r0, r6
 8001f6e:	f7ff ffbd 	bl	8001eec <__sinit>
 8001f72:	3648      	adds	r6, #72	; 0x48
 8001f74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	d503      	bpl.n	8001f84 <__sfp+0x28>
 8001f7c:	6833      	ldr	r3, [r6, #0]
 8001f7e:	b30b      	cbz	r3, 8001fc4 <__sfp+0x68>
 8001f80:	6836      	ldr	r6, [r6, #0]
 8001f82:	e7f7      	b.n	8001f74 <__sfp+0x18>
 8001f84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001f88:	b9d5      	cbnz	r5, 8001fc0 <__sfp+0x64>
 8001f8a:	4b16      	ldr	r3, [pc, #88]	; (8001fe4 <__sfp+0x88>)
 8001f8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001f90:	60e3      	str	r3, [r4, #12]
 8001f92:	6665      	str	r5, [r4, #100]	; 0x64
 8001f94:	f000 f847 	bl	8002026 <__retarget_lock_init_recursive>
 8001f98:	f7ff ff96 	bl	8001ec8 <__sfp_lock_release>
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	4629      	mov	r1, r5
 8001fa0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001fa4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001fa8:	6025      	str	r5, [r4, #0]
 8001faa:	61a5      	str	r5, [r4, #24]
 8001fac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001fb0:	f7ff fd48 	bl	8001a44 <memset>
 8001fb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001fb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fc0:	3468      	adds	r4, #104	; 0x68
 8001fc2:	e7d9      	b.n	8001f78 <__sfp+0x1c>
 8001fc4:	2104      	movs	r1, #4
 8001fc6:	4638      	mov	r0, r7
 8001fc8:	f7ff ff62 	bl	8001e90 <__sfmoreglue>
 8001fcc:	4604      	mov	r4, r0
 8001fce:	6030      	str	r0, [r6, #0]
 8001fd0:	2800      	cmp	r0, #0
 8001fd2:	d1d5      	bne.n	8001f80 <__sfp+0x24>
 8001fd4:	f7ff ff78 	bl	8001ec8 <__sfp_lock_release>
 8001fd8:	230c      	movs	r3, #12
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	e7ee      	b.n	8001fbc <__sfp+0x60>
 8001fde:	bf00      	nop
 8001fe0:	0800248c 	.word	0x0800248c
 8001fe4:	ffff0001 	.word	0xffff0001

08001fe8 <_fwalk_reent>:
 8001fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fec:	4606      	mov	r6, r0
 8001fee:	4688      	mov	r8, r1
 8001ff0:	2700      	movs	r7, #0
 8001ff2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001ff6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001ffa:	f1b9 0901 	subs.w	r9, r9, #1
 8001ffe:	d505      	bpl.n	800200c <_fwalk_reent+0x24>
 8002000:	6824      	ldr	r4, [r4, #0]
 8002002:	2c00      	cmp	r4, #0
 8002004:	d1f7      	bne.n	8001ff6 <_fwalk_reent+0xe>
 8002006:	4638      	mov	r0, r7
 8002008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800200c:	89ab      	ldrh	r3, [r5, #12]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d907      	bls.n	8002022 <_fwalk_reent+0x3a>
 8002012:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002016:	3301      	adds	r3, #1
 8002018:	d003      	beq.n	8002022 <_fwalk_reent+0x3a>
 800201a:	4629      	mov	r1, r5
 800201c:	4630      	mov	r0, r6
 800201e:	47c0      	blx	r8
 8002020:	4307      	orrs	r7, r0
 8002022:	3568      	adds	r5, #104	; 0x68
 8002024:	e7e9      	b.n	8001ffa <_fwalk_reent+0x12>

08002026 <__retarget_lock_init_recursive>:
 8002026:	4770      	bx	lr

08002028 <__retarget_lock_acquire_recursive>:
 8002028:	4770      	bx	lr

0800202a <__retarget_lock_release_recursive>:
 800202a:	4770      	bx	lr

0800202c <__swhatbuf_r>:
 800202c:	b570      	push	{r4, r5, r6, lr}
 800202e:	460e      	mov	r6, r1
 8002030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002034:	4614      	mov	r4, r2
 8002036:	2900      	cmp	r1, #0
 8002038:	461d      	mov	r5, r3
 800203a:	b096      	sub	sp, #88	; 0x58
 800203c:	da08      	bge.n	8002050 <__swhatbuf_r+0x24>
 800203e:	2200      	movs	r2, #0
 8002040:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002044:	602a      	str	r2, [r5, #0]
 8002046:	061a      	lsls	r2, r3, #24
 8002048:	d410      	bmi.n	800206c <__swhatbuf_r+0x40>
 800204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800204e:	e00e      	b.n	800206e <__swhatbuf_r+0x42>
 8002050:	466a      	mov	r2, sp
 8002052:	f000 f9a3 	bl	800239c <_fstat_r>
 8002056:	2800      	cmp	r0, #0
 8002058:	dbf1      	blt.n	800203e <__swhatbuf_r+0x12>
 800205a:	9a01      	ldr	r2, [sp, #4]
 800205c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002060:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002064:	425a      	negs	r2, r3
 8002066:	415a      	adcs	r2, r3
 8002068:	602a      	str	r2, [r5, #0]
 800206a:	e7ee      	b.n	800204a <__swhatbuf_r+0x1e>
 800206c:	2340      	movs	r3, #64	; 0x40
 800206e:	2000      	movs	r0, #0
 8002070:	6023      	str	r3, [r4, #0]
 8002072:	b016      	add	sp, #88	; 0x58
 8002074:	bd70      	pop	{r4, r5, r6, pc}
	...

08002078 <__smakebuf_r>:
 8002078:	898b      	ldrh	r3, [r1, #12]
 800207a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800207c:	079d      	lsls	r5, r3, #30
 800207e:	4606      	mov	r6, r0
 8002080:	460c      	mov	r4, r1
 8002082:	d507      	bpl.n	8002094 <__smakebuf_r+0x1c>
 8002084:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002088:	6023      	str	r3, [r4, #0]
 800208a:	6123      	str	r3, [r4, #16]
 800208c:	2301      	movs	r3, #1
 800208e:	6163      	str	r3, [r4, #20]
 8002090:	b002      	add	sp, #8
 8002092:	bd70      	pop	{r4, r5, r6, pc}
 8002094:	466a      	mov	r2, sp
 8002096:	ab01      	add	r3, sp, #4
 8002098:	f7ff ffc8 	bl	800202c <__swhatbuf_r>
 800209c:	9900      	ldr	r1, [sp, #0]
 800209e:	4605      	mov	r5, r0
 80020a0:	4630      	mov	r0, r6
 80020a2:	f000 f891 	bl	80021c8 <_malloc_r>
 80020a6:	b948      	cbnz	r0, 80020bc <__smakebuf_r+0x44>
 80020a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020ac:	059a      	lsls	r2, r3, #22
 80020ae:	d4ef      	bmi.n	8002090 <__smakebuf_r+0x18>
 80020b0:	f023 0303 	bic.w	r3, r3, #3
 80020b4:	f043 0302 	orr.w	r3, r3, #2
 80020b8:	81a3      	strh	r3, [r4, #12]
 80020ba:	e7e3      	b.n	8002084 <__smakebuf_r+0xc>
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <__smakebuf_r+0x7c>)
 80020be:	62b3      	str	r3, [r6, #40]	; 0x28
 80020c0:	89a3      	ldrh	r3, [r4, #12]
 80020c2:	6020      	str	r0, [r4, #0]
 80020c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c8:	81a3      	strh	r3, [r4, #12]
 80020ca:	9b00      	ldr	r3, [sp, #0]
 80020cc:	6120      	str	r0, [r4, #16]
 80020ce:	6163      	str	r3, [r4, #20]
 80020d0:	9b01      	ldr	r3, [sp, #4]
 80020d2:	b15b      	cbz	r3, 80020ec <__smakebuf_r+0x74>
 80020d4:	4630      	mov	r0, r6
 80020d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020da:	f000 f971 	bl	80023c0 <_isatty_r>
 80020de:	b128      	cbz	r0, 80020ec <__smakebuf_r+0x74>
 80020e0:	89a3      	ldrh	r3, [r4, #12]
 80020e2:	f023 0303 	bic.w	r3, r3, #3
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	81a3      	strh	r3, [r4, #12]
 80020ec:	89a0      	ldrh	r0, [r4, #12]
 80020ee:	4305      	orrs	r5, r0
 80020f0:	81a5      	strh	r5, [r4, #12]
 80020f2:	e7cd      	b.n	8002090 <__smakebuf_r+0x18>
 80020f4:	08001e85 	.word	0x08001e85

080020f8 <_free_r>:
 80020f8:	b538      	push	{r3, r4, r5, lr}
 80020fa:	4605      	mov	r5, r0
 80020fc:	2900      	cmp	r1, #0
 80020fe:	d040      	beq.n	8002182 <_free_r+0x8a>
 8002100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002104:	1f0c      	subs	r4, r1, #4
 8002106:	2b00      	cmp	r3, #0
 8002108:	bfb8      	it	lt
 800210a:	18e4      	addlt	r4, r4, r3
 800210c:	f000 f97a 	bl	8002404 <__malloc_lock>
 8002110:	4a1c      	ldr	r2, [pc, #112]	; (8002184 <_free_r+0x8c>)
 8002112:	6813      	ldr	r3, [r2, #0]
 8002114:	b933      	cbnz	r3, 8002124 <_free_r+0x2c>
 8002116:	6063      	str	r3, [r4, #4]
 8002118:	6014      	str	r4, [r2, #0]
 800211a:	4628      	mov	r0, r5
 800211c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002120:	f000 b976 	b.w	8002410 <__malloc_unlock>
 8002124:	42a3      	cmp	r3, r4
 8002126:	d908      	bls.n	800213a <_free_r+0x42>
 8002128:	6820      	ldr	r0, [r4, #0]
 800212a:	1821      	adds	r1, r4, r0
 800212c:	428b      	cmp	r3, r1
 800212e:	bf01      	itttt	eq
 8002130:	6819      	ldreq	r1, [r3, #0]
 8002132:	685b      	ldreq	r3, [r3, #4]
 8002134:	1809      	addeq	r1, r1, r0
 8002136:	6021      	streq	r1, [r4, #0]
 8002138:	e7ed      	b.n	8002116 <_free_r+0x1e>
 800213a:	461a      	mov	r2, r3
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	b10b      	cbz	r3, 8002144 <_free_r+0x4c>
 8002140:	42a3      	cmp	r3, r4
 8002142:	d9fa      	bls.n	800213a <_free_r+0x42>
 8002144:	6811      	ldr	r1, [r2, #0]
 8002146:	1850      	adds	r0, r2, r1
 8002148:	42a0      	cmp	r0, r4
 800214a:	d10b      	bne.n	8002164 <_free_r+0x6c>
 800214c:	6820      	ldr	r0, [r4, #0]
 800214e:	4401      	add	r1, r0
 8002150:	1850      	adds	r0, r2, r1
 8002152:	4283      	cmp	r3, r0
 8002154:	6011      	str	r1, [r2, #0]
 8002156:	d1e0      	bne.n	800211a <_free_r+0x22>
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	4401      	add	r1, r0
 800215e:	6011      	str	r1, [r2, #0]
 8002160:	6053      	str	r3, [r2, #4]
 8002162:	e7da      	b.n	800211a <_free_r+0x22>
 8002164:	d902      	bls.n	800216c <_free_r+0x74>
 8002166:	230c      	movs	r3, #12
 8002168:	602b      	str	r3, [r5, #0]
 800216a:	e7d6      	b.n	800211a <_free_r+0x22>
 800216c:	6820      	ldr	r0, [r4, #0]
 800216e:	1821      	adds	r1, r4, r0
 8002170:	428b      	cmp	r3, r1
 8002172:	bf01      	itttt	eq
 8002174:	6819      	ldreq	r1, [r3, #0]
 8002176:	685b      	ldreq	r3, [r3, #4]
 8002178:	1809      	addeq	r1, r1, r0
 800217a:	6021      	streq	r1, [r4, #0]
 800217c:	6063      	str	r3, [r4, #4]
 800217e:	6054      	str	r4, [r2, #4]
 8002180:	e7cb      	b.n	800211a <_free_r+0x22>
 8002182:	bd38      	pop	{r3, r4, r5, pc}
 8002184:	200000dc 	.word	0x200000dc

08002188 <sbrk_aligned>:
 8002188:	b570      	push	{r4, r5, r6, lr}
 800218a:	4e0e      	ldr	r6, [pc, #56]	; (80021c4 <sbrk_aligned+0x3c>)
 800218c:	460c      	mov	r4, r1
 800218e:	6831      	ldr	r1, [r6, #0]
 8002190:	4605      	mov	r5, r0
 8002192:	b911      	cbnz	r1, 800219a <sbrk_aligned+0x12>
 8002194:	f000 f88c 	bl	80022b0 <_sbrk_r>
 8002198:	6030      	str	r0, [r6, #0]
 800219a:	4621      	mov	r1, r4
 800219c:	4628      	mov	r0, r5
 800219e:	f000 f887 	bl	80022b0 <_sbrk_r>
 80021a2:	1c43      	adds	r3, r0, #1
 80021a4:	d00a      	beq.n	80021bc <sbrk_aligned+0x34>
 80021a6:	1cc4      	adds	r4, r0, #3
 80021a8:	f024 0403 	bic.w	r4, r4, #3
 80021ac:	42a0      	cmp	r0, r4
 80021ae:	d007      	beq.n	80021c0 <sbrk_aligned+0x38>
 80021b0:	1a21      	subs	r1, r4, r0
 80021b2:	4628      	mov	r0, r5
 80021b4:	f000 f87c 	bl	80022b0 <_sbrk_r>
 80021b8:	3001      	adds	r0, #1
 80021ba:	d101      	bne.n	80021c0 <sbrk_aligned+0x38>
 80021bc:	f04f 34ff 	mov.w	r4, #4294967295
 80021c0:	4620      	mov	r0, r4
 80021c2:	bd70      	pop	{r4, r5, r6, pc}
 80021c4:	200000e0 	.word	0x200000e0

080021c8 <_malloc_r>:
 80021c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021cc:	1ccd      	adds	r5, r1, #3
 80021ce:	f025 0503 	bic.w	r5, r5, #3
 80021d2:	3508      	adds	r5, #8
 80021d4:	2d0c      	cmp	r5, #12
 80021d6:	bf38      	it	cc
 80021d8:	250c      	movcc	r5, #12
 80021da:	2d00      	cmp	r5, #0
 80021dc:	4607      	mov	r7, r0
 80021de:	db01      	blt.n	80021e4 <_malloc_r+0x1c>
 80021e0:	42a9      	cmp	r1, r5
 80021e2:	d905      	bls.n	80021f0 <_malloc_r+0x28>
 80021e4:	230c      	movs	r3, #12
 80021e6:	2600      	movs	r6, #0
 80021e8:	603b      	str	r3, [r7, #0]
 80021ea:	4630      	mov	r0, r6
 80021ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021f0:	4e2e      	ldr	r6, [pc, #184]	; (80022ac <_malloc_r+0xe4>)
 80021f2:	f000 f907 	bl	8002404 <__malloc_lock>
 80021f6:	6833      	ldr	r3, [r6, #0]
 80021f8:	461c      	mov	r4, r3
 80021fa:	bb34      	cbnz	r4, 800224a <_malloc_r+0x82>
 80021fc:	4629      	mov	r1, r5
 80021fe:	4638      	mov	r0, r7
 8002200:	f7ff ffc2 	bl	8002188 <sbrk_aligned>
 8002204:	1c43      	adds	r3, r0, #1
 8002206:	4604      	mov	r4, r0
 8002208:	d14d      	bne.n	80022a6 <_malloc_r+0xde>
 800220a:	6834      	ldr	r4, [r6, #0]
 800220c:	4626      	mov	r6, r4
 800220e:	2e00      	cmp	r6, #0
 8002210:	d140      	bne.n	8002294 <_malloc_r+0xcc>
 8002212:	6823      	ldr	r3, [r4, #0]
 8002214:	4631      	mov	r1, r6
 8002216:	4638      	mov	r0, r7
 8002218:	eb04 0803 	add.w	r8, r4, r3
 800221c:	f000 f848 	bl	80022b0 <_sbrk_r>
 8002220:	4580      	cmp	r8, r0
 8002222:	d13a      	bne.n	800229a <_malloc_r+0xd2>
 8002224:	6821      	ldr	r1, [r4, #0]
 8002226:	3503      	adds	r5, #3
 8002228:	1a6d      	subs	r5, r5, r1
 800222a:	f025 0503 	bic.w	r5, r5, #3
 800222e:	3508      	adds	r5, #8
 8002230:	2d0c      	cmp	r5, #12
 8002232:	bf38      	it	cc
 8002234:	250c      	movcc	r5, #12
 8002236:	4638      	mov	r0, r7
 8002238:	4629      	mov	r1, r5
 800223a:	f7ff ffa5 	bl	8002188 <sbrk_aligned>
 800223e:	3001      	adds	r0, #1
 8002240:	d02b      	beq.n	800229a <_malloc_r+0xd2>
 8002242:	6823      	ldr	r3, [r4, #0]
 8002244:	442b      	add	r3, r5
 8002246:	6023      	str	r3, [r4, #0]
 8002248:	e00e      	b.n	8002268 <_malloc_r+0xa0>
 800224a:	6822      	ldr	r2, [r4, #0]
 800224c:	1b52      	subs	r2, r2, r5
 800224e:	d41e      	bmi.n	800228e <_malloc_r+0xc6>
 8002250:	2a0b      	cmp	r2, #11
 8002252:	d916      	bls.n	8002282 <_malloc_r+0xba>
 8002254:	1961      	adds	r1, r4, r5
 8002256:	42a3      	cmp	r3, r4
 8002258:	6025      	str	r5, [r4, #0]
 800225a:	bf18      	it	ne
 800225c:	6059      	strne	r1, [r3, #4]
 800225e:	6863      	ldr	r3, [r4, #4]
 8002260:	bf08      	it	eq
 8002262:	6031      	streq	r1, [r6, #0]
 8002264:	5162      	str	r2, [r4, r5]
 8002266:	604b      	str	r3, [r1, #4]
 8002268:	4638      	mov	r0, r7
 800226a:	f104 060b 	add.w	r6, r4, #11
 800226e:	f000 f8cf 	bl	8002410 <__malloc_unlock>
 8002272:	f026 0607 	bic.w	r6, r6, #7
 8002276:	1d23      	adds	r3, r4, #4
 8002278:	1af2      	subs	r2, r6, r3
 800227a:	d0b6      	beq.n	80021ea <_malloc_r+0x22>
 800227c:	1b9b      	subs	r3, r3, r6
 800227e:	50a3      	str	r3, [r4, r2]
 8002280:	e7b3      	b.n	80021ea <_malloc_r+0x22>
 8002282:	6862      	ldr	r2, [r4, #4]
 8002284:	42a3      	cmp	r3, r4
 8002286:	bf0c      	ite	eq
 8002288:	6032      	streq	r2, [r6, #0]
 800228a:	605a      	strne	r2, [r3, #4]
 800228c:	e7ec      	b.n	8002268 <_malloc_r+0xa0>
 800228e:	4623      	mov	r3, r4
 8002290:	6864      	ldr	r4, [r4, #4]
 8002292:	e7b2      	b.n	80021fa <_malloc_r+0x32>
 8002294:	4634      	mov	r4, r6
 8002296:	6876      	ldr	r6, [r6, #4]
 8002298:	e7b9      	b.n	800220e <_malloc_r+0x46>
 800229a:	230c      	movs	r3, #12
 800229c:	4638      	mov	r0, r7
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	f000 f8b6 	bl	8002410 <__malloc_unlock>
 80022a4:	e7a1      	b.n	80021ea <_malloc_r+0x22>
 80022a6:	6025      	str	r5, [r4, #0]
 80022a8:	e7de      	b.n	8002268 <_malloc_r+0xa0>
 80022aa:	bf00      	nop
 80022ac:	200000dc 	.word	0x200000dc

080022b0 <_sbrk_r>:
 80022b0:	b538      	push	{r3, r4, r5, lr}
 80022b2:	2300      	movs	r3, #0
 80022b4:	4d05      	ldr	r5, [pc, #20]	; (80022cc <_sbrk_r+0x1c>)
 80022b6:	4604      	mov	r4, r0
 80022b8:	4608      	mov	r0, r1
 80022ba:	602b      	str	r3, [r5, #0]
 80022bc:	f7fe f970 	bl	80005a0 <_sbrk>
 80022c0:	1c43      	adds	r3, r0, #1
 80022c2:	d102      	bne.n	80022ca <_sbrk_r+0x1a>
 80022c4:	682b      	ldr	r3, [r5, #0]
 80022c6:	b103      	cbz	r3, 80022ca <_sbrk_r+0x1a>
 80022c8:	6023      	str	r3, [r4, #0]
 80022ca:	bd38      	pop	{r3, r4, r5, pc}
 80022cc:	200000e4 	.word	0x200000e4

080022d0 <__sread>:
 80022d0:	b510      	push	{r4, lr}
 80022d2:	460c      	mov	r4, r1
 80022d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022d8:	f000 f8a0 	bl	800241c <_read_r>
 80022dc:	2800      	cmp	r0, #0
 80022de:	bfab      	itete	ge
 80022e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80022e2:	89a3      	ldrhlt	r3, [r4, #12]
 80022e4:	181b      	addge	r3, r3, r0
 80022e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80022ea:	bfac      	ite	ge
 80022ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80022ee:	81a3      	strhlt	r3, [r4, #12]
 80022f0:	bd10      	pop	{r4, pc}

080022f2 <__swrite>:
 80022f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022f6:	461f      	mov	r7, r3
 80022f8:	898b      	ldrh	r3, [r1, #12]
 80022fa:	4605      	mov	r5, r0
 80022fc:	05db      	lsls	r3, r3, #23
 80022fe:	460c      	mov	r4, r1
 8002300:	4616      	mov	r6, r2
 8002302:	d505      	bpl.n	8002310 <__swrite+0x1e>
 8002304:	2302      	movs	r3, #2
 8002306:	2200      	movs	r2, #0
 8002308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800230c:	f000 f868 	bl	80023e0 <_lseek_r>
 8002310:	89a3      	ldrh	r3, [r4, #12]
 8002312:	4632      	mov	r2, r6
 8002314:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002318:	81a3      	strh	r3, [r4, #12]
 800231a:	4628      	mov	r0, r5
 800231c:	463b      	mov	r3, r7
 800231e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002326:	f000 b817 	b.w	8002358 <_write_r>

0800232a <__sseek>:
 800232a:	b510      	push	{r4, lr}
 800232c:	460c      	mov	r4, r1
 800232e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002332:	f000 f855 	bl	80023e0 <_lseek_r>
 8002336:	1c43      	adds	r3, r0, #1
 8002338:	89a3      	ldrh	r3, [r4, #12]
 800233a:	bf15      	itete	ne
 800233c:	6560      	strne	r0, [r4, #84]	; 0x54
 800233e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002342:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002346:	81a3      	strheq	r3, [r4, #12]
 8002348:	bf18      	it	ne
 800234a:	81a3      	strhne	r3, [r4, #12]
 800234c:	bd10      	pop	{r4, pc}

0800234e <__sclose>:
 800234e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002352:	f000 b813 	b.w	800237c <_close_r>
	...

08002358 <_write_r>:
 8002358:	b538      	push	{r3, r4, r5, lr}
 800235a:	4604      	mov	r4, r0
 800235c:	4608      	mov	r0, r1
 800235e:	4611      	mov	r1, r2
 8002360:	2200      	movs	r2, #0
 8002362:	4d05      	ldr	r5, [pc, #20]	; (8002378 <_write_r+0x20>)
 8002364:	602a      	str	r2, [r5, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	f7fe f8ce 	bl	8000508 <_write>
 800236c:	1c43      	adds	r3, r0, #1
 800236e:	d102      	bne.n	8002376 <_write_r+0x1e>
 8002370:	682b      	ldr	r3, [r5, #0]
 8002372:	b103      	cbz	r3, 8002376 <_write_r+0x1e>
 8002374:	6023      	str	r3, [r4, #0]
 8002376:	bd38      	pop	{r3, r4, r5, pc}
 8002378:	200000e4 	.word	0x200000e4

0800237c <_close_r>:
 800237c:	b538      	push	{r3, r4, r5, lr}
 800237e:	2300      	movs	r3, #0
 8002380:	4d05      	ldr	r5, [pc, #20]	; (8002398 <_close_r+0x1c>)
 8002382:	4604      	mov	r4, r0
 8002384:	4608      	mov	r0, r1
 8002386:	602b      	str	r3, [r5, #0]
 8002388:	f7fe f8da 	bl	8000540 <_close>
 800238c:	1c43      	adds	r3, r0, #1
 800238e:	d102      	bne.n	8002396 <_close_r+0x1a>
 8002390:	682b      	ldr	r3, [r5, #0]
 8002392:	b103      	cbz	r3, 8002396 <_close_r+0x1a>
 8002394:	6023      	str	r3, [r4, #0]
 8002396:	bd38      	pop	{r3, r4, r5, pc}
 8002398:	200000e4 	.word	0x200000e4

0800239c <_fstat_r>:
 800239c:	b538      	push	{r3, r4, r5, lr}
 800239e:	2300      	movs	r3, #0
 80023a0:	4d06      	ldr	r5, [pc, #24]	; (80023bc <_fstat_r+0x20>)
 80023a2:	4604      	mov	r4, r0
 80023a4:	4608      	mov	r0, r1
 80023a6:	4611      	mov	r1, r2
 80023a8:	602b      	str	r3, [r5, #0]
 80023aa:	f7fe f8d4 	bl	8000556 <_fstat>
 80023ae:	1c43      	adds	r3, r0, #1
 80023b0:	d102      	bne.n	80023b8 <_fstat_r+0x1c>
 80023b2:	682b      	ldr	r3, [r5, #0]
 80023b4:	b103      	cbz	r3, 80023b8 <_fstat_r+0x1c>
 80023b6:	6023      	str	r3, [r4, #0]
 80023b8:	bd38      	pop	{r3, r4, r5, pc}
 80023ba:	bf00      	nop
 80023bc:	200000e4 	.word	0x200000e4

080023c0 <_isatty_r>:
 80023c0:	b538      	push	{r3, r4, r5, lr}
 80023c2:	2300      	movs	r3, #0
 80023c4:	4d05      	ldr	r5, [pc, #20]	; (80023dc <_isatty_r+0x1c>)
 80023c6:	4604      	mov	r4, r0
 80023c8:	4608      	mov	r0, r1
 80023ca:	602b      	str	r3, [r5, #0]
 80023cc:	f7fe f8d2 	bl	8000574 <_isatty>
 80023d0:	1c43      	adds	r3, r0, #1
 80023d2:	d102      	bne.n	80023da <_isatty_r+0x1a>
 80023d4:	682b      	ldr	r3, [r5, #0]
 80023d6:	b103      	cbz	r3, 80023da <_isatty_r+0x1a>
 80023d8:	6023      	str	r3, [r4, #0]
 80023da:	bd38      	pop	{r3, r4, r5, pc}
 80023dc:	200000e4 	.word	0x200000e4

080023e0 <_lseek_r>:
 80023e0:	b538      	push	{r3, r4, r5, lr}
 80023e2:	4604      	mov	r4, r0
 80023e4:	4608      	mov	r0, r1
 80023e6:	4611      	mov	r1, r2
 80023e8:	2200      	movs	r2, #0
 80023ea:	4d05      	ldr	r5, [pc, #20]	; (8002400 <_lseek_r+0x20>)
 80023ec:	602a      	str	r2, [r5, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	f7fe f8ca 	bl	8000588 <_lseek>
 80023f4:	1c43      	adds	r3, r0, #1
 80023f6:	d102      	bne.n	80023fe <_lseek_r+0x1e>
 80023f8:	682b      	ldr	r3, [r5, #0]
 80023fa:	b103      	cbz	r3, 80023fe <_lseek_r+0x1e>
 80023fc:	6023      	str	r3, [r4, #0]
 80023fe:	bd38      	pop	{r3, r4, r5, pc}
 8002400:	200000e4 	.word	0x200000e4

08002404 <__malloc_lock>:
 8002404:	4801      	ldr	r0, [pc, #4]	; (800240c <__malloc_lock+0x8>)
 8002406:	f7ff be0f 	b.w	8002028 <__retarget_lock_acquire_recursive>
 800240a:	bf00      	nop
 800240c:	200000d8 	.word	0x200000d8

08002410 <__malloc_unlock>:
 8002410:	4801      	ldr	r0, [pc, #4]	; (8002418 <__malloc_unlock+0x8>)
 8002412:	f7ff be0a 	b.w	800202a <__retarget_lock_release_recursive>
 8002416:	bf00      	nop
 8002418:	200000d8 	.word	0x200000d8

0800241c <_read_r>:
 800241c:	b538      	push	{r3, r4, r5, lr}
 800241e:	4604      	mov	r4, r0
 8002420:	4608      	mov	r0, r1
 8002422:	4611      	mov	r1, r2
 8002424:	2200      	movs	r2, #0
 8002426:	4d05      	ldr	r5, [pc, #20]	; (800243c <_read_r+0x20>)
 8002428:	602a      	str	r2, [r5, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	f7fe f84f 	bl	80004ce <_read>
 8002430:	1c43      	adds	r3, r0, #1
 8002432:	d102      	bne.n	800243a <_read_r+0x1e>
 8002434:	682b      	ldr	r3, [r5, #0]
 8002436:	b103      	cbz	r3, 800243a <_read_r+0x1e>
 8002438:	6023      	str	r3, [r4, #0]
 800243a:	bd38      	pop	{r3, r4, r5, pc}
 800243c:	200000e4 	.word	0x200000e4

08002440 <_init>:
 8002440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002442:	bf00      	nop
 8002444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002446:	bc08      	pop	{r3}
 8002448:	469e      	mov	lr, r3
 800244a:	4770      	bx	lr

0800244c <_fini>:
 800244c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800244e:	bf00      	nop
 8002450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002452:	bc08      	pop	{r3}
 8002454:	469e      	mov	lr, r3
 8002456:	4770      	bx	lr
