
STM32TFG-WIFI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d998  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad8  0800db28  0800db28  0001db28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e600  0800e600  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800e600  0800e600  0001e600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e608  0800e608  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e608  0800e608  0001e608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e60c  0800e60c  0001e60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800e610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b44  20000074  0800e684  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002bb8  0800e684  00022bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032288  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000061e8  00000000  00000000  0005232c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002948  00000000  00000000  00058518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000026f8  00000000  00000000  0005ae60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ec47  00000000  00000000  0005d558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000304d5  00000000  00000000  0008c19f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d3f7  00000000  00000000  000bc674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c9a6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bd88  00000000  00000000  001c9abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800db10 	.word	0x0800db10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800db10 	.word	0x0800db10

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <S_SendInstructionStruct>:
	xSemaphoreGive(xSemaphoreSerialHandle);
	//Libero la memoria reservada por malloc
	free(pMov);
}

void S_SendInstructionStruct(MovementInstruction_t *pMov) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	//Transformo la instruccion a una cadena
	char *s_mov;
	I_MovementInstruction_toString(pMov, &s_mov);
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	4619      	mov	r1, r3
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f000 f918 	bl	80007c8 <I_MovementInstruction_toString>
	//Reservo el puerto serie
	while (xSemaphoreTake(xSemaphoreSerialHandle, portMAX_DELAY) != pdTRUE)
 8000598:	bf00      	nop
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <S_SendInstructionStruct+0x4c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f04f 31ff 	mov.w	r1, #4294967295
 80005a2:	4618      	mov	r0, r3
 80005a4:	f009 fc56 	bl	8009e54 <xQueueSemaphoreTake>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d1f5      	bne.n	800059a <S_SendInstructionStruct+0x16>
		;
	//Envio el struct por el puerto serie
	printf("%s\r\n", s_mov);
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	4619      	mov	r1, r3
 80005b2:	4808      	ldr	r0, [pc, #32]	; (80005d4 <S_SendInstructionStruct+0x50>)
 80005b4:	f00c f914 	bl	800c7e0 <iprintf>
	//Devuelvo el control del puerto serie
	xSemaphoreGive(xSemaphoreSerialHandle);
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <S_SendInstructionStruct+0x4c>)
 80005ba:	6818      	ldr	r0, [r3, #0]
 80005bc:	2300      	movs	r3, #0
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	f009 f941 	bl	8009848 <xQueueGenericSend>
}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200007e8 	.word	0x200007e8
 80005d4:	0800db28 	.word	0x0800db28

080005d8 <S_PrintOnSerial>:

void S_PrintOnSerial(const char *format, ...) {
 80005d8:	b40f      	push	{r0, r1, r2, r3}
 80005da:	b580      	push	{r7, lr}
 80005dc:	b082      	sub	sp, #8
 80005de:	af00      	add	r7, sp, #0
	while (xSemaphoreTake(xSemaphoreSerialHandle, portMAX_DELAY) != pdTRUE)
 80005e0:	bf00      	nop
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <S_PrintOnSerial+0x48>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f04f 31ff 	mov.w	r1, #4294967295
 80005ea:	4618      	mov	r0, r3
 80005ec:	f009 fc32 	bl	8009e54 <xQueueSemaphoreTake>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d1f5      	bne.n	80005e2 <S_PrintOnSerial+0xa>
		;
	va_list args;
	va_start(args, format);
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	607b      	str	r3, [r7, #4]
	printf(format, args);
 80005fc:	6879      	ldr	r1, [r7, #4]
 80005fe:	6938      	ldr	r0, [r7, #16]
 8000600:	f00c f8ee 	bl	800c7e0 <iprintf>
	va_end(args);
	// Give the semaphore to indicate that the transmission has finished
	xSemaphoreGiveFromISR(xSemaphoreSerialHandle, pdFALSE);
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <S_PrintOnSerial+0x48>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f009 fab5 	bl	8009b7a <xQueueGiveFromISR>
	// Yield to higher priority task if necessary
	portYIELD_FROM_ISR(pdFALSE);
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800061a:	b004      	add	sp, #16
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	200007e8 	.word	0x200007e8

08000624 <__io_putchar>:
#include "SerialTask.h"

PUTCHAR_PROTOTYPE {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	// Transmits character ch over UART1 and UART4
	while (HAL_OK != HAL_UART_Transmit_IT(&huart1, (uint8_t*) &ch, 1)) {
 800062c:	bf00      	nop
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2201      	movs	r2, #1
 8000632:	4619      	mov	r1, r3
 8000634:	480a      	ldr	r0, [pc, #40]	; (8000660 <__io_putchar+0x3c>)
 8000636:	f005 fd93 	bl	8006160 <HAL_UART_Transmit_IT>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1f6      	bne.n	800062e <__io_putchar+0xa>
		// Wait for transmit to finish
		;
	}
	while (HAL_OK != HAL_UART_Transmit_IT(&huart4, (uint8_t*) &ch, 1)) {
 8000640:	bf00      	nop
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2201      	movs	r2, #1
 8000646:	4619      	mov	r1, r3
 8000648:	4806      	ldr	r0, [pc, #24]	; (8000664 <__io_putchar+0x40>)
 800064a:	f005 fd89 	bl	8006160 <HAL_UART_Transmit_IT>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d1f6      	bne.n	8000642 <__io_putchar+0x1e>
		// Wait for transmit to finish
		;
	}
	return ch;
 8000654:	687b      	ldr	r3, [r7, #4]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000248 	.word	0x20000248
 8000664:	200001c4 	.word	0x200001c4

08000668 <serialRxTask>:

int printTransmision = 0;

void serialRxTask(void *parg) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	uint8_t ins = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	73fb      	strb	r3, [r7, #15]
	uint8_t time = 20;
 8000674:	2314      	movs	r3, #20
 8000676:	737b      	strb	r3, [r7, #13]
	uint8_t i = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	73bb      	strb	r3, [r7, #14]

	printf("rxtask");
 800067c:	4817      	ldr	r0, [pc, #92]	; (80006dc <serialRxTask+0x74>)
 800067e:	f00c f8af 	bl	800c7e0 <iprintf>

	while (i < 25) {
 8000682:	e023      	b.n	80006cc <serialRxTask+0x64>
		// Allocate memory for a MovementInstruction_t struct
		MovementInstruction_t *pMov = malloc(sizeof(MovementInstruction_t));
 8000684:	2002      	movs	r0, #2
 8000686:	f00b ff95 	bl	800c5b4 <malloc>
 800068a:	4603      	mov	r3, r0
 800068c:	60bb      	str	r3, [r7, #8]
		// Create the struct to be sent to the queue
		I_CreateInstructionStruct(ins, time, pMov);
 800068e:	7b79      	ldrb	r1, [r7, #13]
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	68ba      	ldr	r2, [r7, #8]
 8000694:	4618      	mov	r0, r3
 8000696:	f000 f8b5 	bl	8000804 <I_CreateInstructionStruct>
		// Send the struct to the queue
		xQueueSend(instructionQueueHandle, pMov, 1);
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <serialRxTask+0x78>)
 800069c:	6818      	ldr	r0, [r3, #0]
 800069e:	2300      	movs	r3, #0
 80006a0:	2201      	movs	r2, #1
 80006a2:	68b9      	ldr	r1, [r7, #8]
 80006a4:	f009 f8d0 	bl	8009848 <xQueueGenericSend>
		// Delay for 1 second
		vTaskDelay(10);
 80006a8:	200a      	movs	r0, #10
 80006aa:	f00a f86b 	bl	800a784 <vTaskDelay>
		// Free the memory of the MovementInstruction_t struct
		free(pMov);
 80006ae:	68b8      	ldr	r0, [r7, #8]
 80006b0:	f00b ff88 	bl	800c5c4 <free>
		// Update the instruction to be sent
		ins = (ins + 1) % I_NUM_INSTRUCTIONS;
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	3301      	adds	r3, #1
 80006b8:	2205      	movs	r2, #5
 80006ba:	fb93 f1f2 	sdiv	r1, r3, r2
 80006be:	fb01 f202 	mul.w	r2, r1, r2
 80006c2:	1a9b      	subs	r3, r3, r2
 80006c4:	73fb      	strb	r3, [r7, #15]
		i++;
 80006c6:	7bbb      	ldrb	r3, [r7, #14]
 80006c8:	3301      	adds	r3, #1
 80006ca:	73bb      	strb	r3, [r7, #14]
	while (i < 25) {
 80006cc:	7bbb      	ldrb	r3, [r7, #14]
 80006ce:	2b18      	cmp	r3, #24
 80006d0:	d9d8      	bls.n	8000684 <serialRxTask+0x1c>
	}

	while (1) {
		vTaskDelay(1000);
 80006d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006d6:	f00a f855 	bl	800a784 <vTaskDelay>
 80006da:	e7fa      	b.n	80006d2 <serialRxTask+0x6a>
 80006dc:	0800db30 	.word	0x0800db30
 80006e0:	200007e4 	.word	0x200007e4

080006e4 <serialTxTask>:
	}
}

void serialTxTask(void *parg) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	while (1) {
		MovementInstruction_t pMov;
		// Receive the instruction from the queue
		xQueueReceive(instructionQueueHandle, &pMov, portMAX_DELAY);
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <serialTxTask+0x2c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f107 010c 	add.w	r1, r7, #12
 80006f4:	f04f 32ff 	mov.w	r2, #4294967295
 80006f8:	4618      	mov	r0, r3
 80006fa:	f009 facb 	bl	8009c94 <xQueueReceive>
		// Send the instruction over the serial port
		S_SendInstructionStruct(&pMov);
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff3e 	bl	8000584 <S_SendInstructionStruct>
		// Wait for the duration of the instruction
		vTaskDelay(50);
 8000708:	2032      	movs	r0, #50	; 0x32
 800070a:	f00a f83b 	bl	800a784 <vTaskDelay>
	while (1) {
 800070e:	e7ed      	b.n	80006ec <serialTxTask+0x8>
 8000710:	200007e4 	.word	0x200007e4

08000714 <WebServerTask>:
	}
}

void WebServerTask(void *pArg) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]

	S_PrintOnSerial("ServidorWeb\r\n");
 800071c:	4807      	ldr	r0, [pc, #28]	; (800073c <WebServerTask+0x28>)
 800071e:	f7ff ff5b 	bl	80005d8 <S_PrintOnSerial>

	if(RequestJSONProcess() != 0)
 8000722:	f001 f90d 	bl	8001940 <RequestJSONProcess>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d002      	beq.n	8000732 <WebServerTask+0x1e>
		S_PrintOnSerial("Se ha detenido el proceso de peticiones");
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <WebServerTask+0x2c>)
 800072e:	f7ff ff53 	bl	80005d8 <S_PrintOnSerial>

	while(1)
		vTaskDelay(1000);
 8000732:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000736:	f00a f825 	bl	800a784 <vTaskDelay>
 800073a:	e7fa      	b.n	8000732 <WebServerTask+0x1e>
 800073c:	0800db38 	.word	0x0800db38
 8000740:	0800db48 	.word	0x0800db48

08000744 <CreateSerialObjects>:
}

void CreateSerialObjects() {
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	// Create a queue with 16 elements, each element has a size of 1 byte
	instructionQueueHandle = xQueueCreate(16, 1);
 8000748:	2200      	movs	r2, #0
 800074a:	2101      	movs	r1, #1
 800074c:	2010      	movs	r0, #16
 800074e:	f008 ffb3 	bl	80096b8 <xQueueGenericCreate>
 8000752:	4603      	mov	r3, r0
 8000754:	4a01      	ldr	r2, [pc, #4]	; (800075c <CreateSerialObjects+0x18>)
 8000756:	6013      	str	r3, [r2, #0]
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200007e4 	.word	0x200007e4

08000760 <CreateSerialTask>:

void CreateSerialTask() {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af02      	add	r7, sp, #8
	xTaskCreate(WebServerTask, "TareaWebServer", 256, NULL, 2, NULL);
 8000766:	2300      	movs	r3, #0
 8000768:	9301      	str	r3, [sp, #4]
 800076a:	2302      	movs	r3, #2
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	2300      	movs	r3, #0
 8000770:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000774:	490e      	ldr	r1, [pc, #56]	; (80007b0 <CreateSerialTask+0x50>)
 8000776:	480f      	ldr	r0, [pc, #60]	; (80007b4 <CreateSerialTask+0x54>)
 8000778:	f009 fea9 	bl	800a4ce <xTaskCreate>
	xTaskCreate(serialTxTask, "serialTxTask", 256, NULL, 1, NULL);
 800077c:	2300      	movs	r3, #0
 800077e:	9301      	str	r3, [sp, #4]
 8000780:	2301      	movs	r3, #1
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2300      	movs	r3, #0
 8000786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800078a:	490b      	ldr	r1, [pc, #44]	; (80007b8 <CreateSerialTask+0x58>)
 800078c:	480b      	ldr	r0, [pc, #44]	; (80007bc <CreateSerialTask+0x5c>)
 800078e:	f009 fe9e 	bl	800a4ce <xTaskCreate>
	xTaskCreate(serialRxTask, "serialRxTask", 256, NULL, 1, NULL);
 8000792:	2300      	movs	r3, #0
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	2300      	movs	r3, #0
 800079c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007a0:	4907      	ldr	r1, [pc, #28]	; (80007c0 <CreateSerialTask+0x60>)
 80007a2:	4808      	ldr	r0, [pc, #32]	; (80007c4 <CreateSerialTask+0x64>)
 80007a4:	f009 fe93 	bl	800a4ce <xTaskCreate>
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	0800db70 	.word	0x0800db70
 80007b4:	08000715 	.word	0x08000715
 80007b8:	0800db80 	.word	0x0800db80
 80007bc:	080006e5 	.word	0x080006e5
 80007c0:	0800db90 	.word	0x0800db90
 80007c4:	08000669 	.word	0x08000669

080007c8 <I_MovementInstruction_toString>:
 *      Author: josec
 */

#include "generalTypes.h"

void I_MovementInstruction_toString(MovementInstruction_t *pMovIns, char **buf) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]

	char *s = (char*) malloc(NUM_CHARS_PER_INSTRUCTION);
 80007d2:	2307      	movs	r3, #7
 80007d4:	4618      	mov	r0, r3
 80007d6:	f00b feed 	bl	800c5b4 <malloc>
 80007da:	4603      	mov	r3, r0
 80007dc:	60fb      	str	r3, [r7, #12]

	sprintf(s, "%d %d", pMovIns->instruction, pMovIns->duration);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	785b      	ldrb	r3, [r3, #1]
 80007e8:	4905      	ldr	r1, [pc, #20]	; (8000800 <I_MovementInstruction_toString+0x38>)
 80007ea:	68f8      	ldr	r0, [r7, #12]
 80007ec:	f00c f934 	bl	800ca58 <siprintf>

	*buf = s;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	601a      	str	r2, [r3, #0]
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	0800dba0 	.word	0x0800dba0

08000804 <I_CreateInstructionStruct>:

uint8_t I_CreateInstructionStruct(uint8_t instCode, uint8_t time,
		MovementInstruction_t *pMovOut) {
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	603a      	str	r2, [r7, #0]
 800080e:	71fb      	strb	r3, [r7, #7]
 8000810:	460b      	mov	r3, r1
 8000812:	71bb      	strb	r3, [r7, #6]
	// Comprueba que todos los parametros sean correctos
	if (instCode < I_NUM_INSTRUCTIONS) {
 8000814:	2205      	movs	r2, #5
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	4293      	cmp	r3, r2
 800081a:	d20e      	bcs.n	800083a <I_CreateInstructionStruct+0x36>
		if (time < I_MAX_TIME_EXECUTION) {
 800081c:	2264      	movs	r2, #100	; 0x64
 800081e:	79bb      	ldrb	r3, [r7, #6]
 8000820:	4293      	cmp	r3, r2
 8000822:	d208      	bcs.n	8000836 <I_CreateInstructionStruct+0x32>
			if (pMovOut != NULL) {
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d005      	beq.n	8000836 <I_CreateInstructionStruct+0x32>
				pMovOut->instruction = instCode;
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	79fa      	ldrb	r2, [r7, #7]
 800082e:	701a      	strb	r2, [r3, #0]
				pMovOut->duration = time;
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	79ba      	ldrb	r2, [r7, #6]
 8000834:	705a      	strb	r2, [r3, #1]
			}
		}
		return 1;
 8000836:	2301      	movs	r3, #1
 8000838:	e006      	b.n	8000848 <I_CreateInstructionStruct+0x44>
	}
	// Si no devuelve una instruccion NOPE
	else {
		pMovOut->instruction = I_NOPE;
 800083a:	2200      	movs	r2, #0
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	701a      	strb	r2, [r3, #0]
		pMovOut->duration = I_MAX_TIME_EXECUTION;
 8000840:	2264      	movs	r2, #100	; 0x64
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	705a      	strb	r2, [r3, #1]
		return 0;
 8000846:	2300      	movs	r3, #0
	}
}
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000858:	f001 f9d5 	bl	8001c06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085c:	f000 f85c 	bl	8000918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000860:	f000 fa26 	bl	8000cb0 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000864:	f000 f8ba 	bl	80009dc <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000868:	f000 f8f0 	bl	8000a4c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800086c:	f000 f92e 	bl	8000acc <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000870:	f000 f952 	bl	8000b18 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000874:	f000 f9be 	bl	8000bf4 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000878:	f000 f9ec 	bl	8000c54 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 800087c:	f000 f98a 	bl	8000b94 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000880:	f008 fb7a 	bl	8008f78 <osKernelInitialize>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of xSemaphoreSerial */
  xSemaphoreSerialHandle = osSemaphoreNew(1, 1, &xSemaphoreSerial_attributes);
 8000884:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <main+0x90>)
 8000886:	2101      	movs	r1, #1
 8000888:	2001      	movs	r0, #1
 800088a:	f008 fc51 	bl	8009130 <osSemaphoreNew>
 800088e:	4603      	mov	r3, r0
 8000890:	4a15      	ldr	r2, [pc, #84]	; (80008e8 <main+0x94>)
 8000892:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
	/* add semaphores, ... */
	CreateSerialObjects();
 8000894:	f7ff ff56 	bl	8000744 <CreateSerialObjects>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of instructionQueue */
  instructionQueueHandle = osMessageQueueNew (100, sizeof(MovementInstruction_t), &instructionQueue_attributes);
 8000898:	4a14      	ldr	r2, [pc, #80]	; (80008ec <main+0x98>)
 800089a:	2102      	movs	r1, #2
 800089c:	2064      	movs	r0, #100	; 0x64
 800089e:	f008 fcd0 	bl	8009242 <osMessageQueueNew>
 80008a2:	4603      	mov	r3, r0
 80008a4:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <main+0x9c>)
 80008a6:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of RxTask */
  RxTaskHandle = osThreadNew(serialRxTask, NULL, &RxTask_attributes);
 80008a8:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <main+0xa0>)
 80008aa:	2100      	movs	r1, #0
 80008ac:	4812      	ldr	r0, [pc, #72]	; (80008f8 <main+0xa4>)
 80008ae:	f008 fbad 	bl	800900c <osThreadNew>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4a11      	ldr	r2, [pc, #68]	; (80008fc <main+0xa8>)
 80008b6:	6013      	str	r3, [r2, #0]

  /* creation of TxTask */
  TxTaskHandle = osThreadNew(serialTxTask, NULL, &TxTask_attributes);
 80008b8:	4a11      	ldr	r2, [pc, #68]	; (8000900 <main+0xac>)
 80008ba:	2100      	movs	r1, #0
 80008bc:	4811      	ldr	r0, [pc, #68]	; (8000904 <main+0xb0>)
 80008be:	f008 fba5 	bl	800900c <osThreadNew>
 80008c2:	4603      	mov	r3, r0
 80008c4:	4a10      	ldr	r2, [pc, #64]	; (8000908 <main+0xb4>)
 80008c6:	6013      	str	r3, [r2, #0]

  /* creation of WebServerTask */
  WebServerTaskHandle = osThreadNew(WebServerTask, NULL, &WebServerTask_attributes);
 80008c8:	4a10      	ldr	r2, [pc, #64]	; (800090c <main+0xb8>)
 80008ca:	2100      	movs	r1, #0
 80008cc:	4810      	ldr	r0, [pc, #64]	; (8000910 <main+0xbc>)
 80008ce:	f008 fb9d 	bl	800900c <osThreadNew>
 80008d2:	4603      	mov	r3, r0
 80008d4:	4a0f      	ldr	r2, [pc, #60]	; (8000914 <main+0xc0>)
 80008d6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	CreateSerialTask();
 80008d8:	f7ff ff42 	bl	8000760 <CreateSerialTask>
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008dc:	f008 fb70 	bl	8008fc0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80008e0:	e7fe      	b.n	80008e0 <main+0x8c>
 80008e2:	bf00      	nop
 80008e4:	0800e460 	.word	0x0800e460
 80008e8:	200007e8 	.word	0x200007e8
 80008ec:	0800e448 	.word	0x0800e448
 80008f0:	200007e4 	.word	0x200007e4
 80008f4:	0800e3dc 	.word	0x0800e3dc
 80008f8:	08000669 	.word	0x08000669
 80008fc:	200007d8 	.word	0x200007d8
 8000900:	0800e400 	.word	0x0800e400
 8000904:	080006e5 	.word	0x080006e5
 8000908:	200007dc 	.word	0x200007dc
 800090c:	0800e424 	.word	0x0800e424
 8000910:	08000715 	.word	0x08000715
 8000914:	200007e0 	.word	0x200007e0

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b096      	sub	sp, #88	; 0x58
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	2244      	movs	r2, #68	; 0x44
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f00b fe72 	bl	800c610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	463b      	mov	r3, r7
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800093a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800093e:	f002 f99f 	bl	8002c80 <HAL_PWREx_ControlVoltageScaling>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000948:	f000 fb66 	bl	8001018 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800094c:	f002 f97a 	bl	8002c44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000950:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <SystemClock_Config+0xc0>)
 8000952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000956:	4a20      	ldr	r2, [pc, #128]	; (80009d8 <SystemClock_Config+0xc0>)
 8000958:	f023 0318 	bic.w	r3, r3, #24
 800095c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000960:	2314      	movs	r3, #20
 8000962:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000964:	2301      	movs	r3, #1
 8000966:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000968:	2301      	movs	r3, #1
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000970:	2360      	movs	r3, #96	; 0x60
 8000972:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000974:	2302      	movs	r3, #2
 8000976:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000978:	2301      	movs	r3, #1
 800097a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800097c:	2301      	movs	r3, #1
 800097e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000980:	2328      	movs	r3, #40	; 0x28
 8000982:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000984:	2307      	movs	r3, #7
 8000986:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000988:	2302      	movs	r3, #2
 800098a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800098c:	2302      	movs	r3, #2
 800098e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4618      	mov	r0, r3
 8000996:	f002 fa95 	bl	8002ec4 <HAL_RCC_OscConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80009a0:	f000 fb3a 	bl	8001018 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a4:	230f      	movs	r3, #15
 80009a6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a8:	2303      	movs	r3, #3
 80009aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009b8:	463b      	mov	r3, r7
 80009ba:	2104      	movs	r1, #4
 80009bc:	4618      	mov	r0, r3
 80009be:	f002 fe5d 	bl	800367c <HAL_RCC_ClockConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009c8:	f000 fb26 	bl	8001018 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80009cc:	f003 fb96 	bl	80040fc <HAL_RCCEx_EnableMSIPLLMode>
}
 80009d0:	bf00      	nop
 80009d2:	3758      	adds	r7, #88	; 0x58
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40021000 	.word	0x40021000

080009dc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_DFSDM1_Init+0x68>)
 80009e2:	4a19      	ldr	r2, [pc, #100]	; (8000a48 <MX_DFSDM1_Init+0x6c>)
 80009e4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80009e6:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_DFSDM1_Init+0x68>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_DFSDM1_Init+0x68>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_DFSDM1_Init+0x68>)
 80009f4:	2202      	movs	r2, #2
 80009f6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_DFSDM1_Init+0x68>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_DFSDM1_Init+0x68>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_DFSDM1_Init+0x68>)
 8000a06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a0a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000a0c:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <MX_DFSDM1_Init+0x68>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_DFSDM1_Init+0x68>)
 8000a14:	2204      	movs	r2, #4
 8000a16:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <MX_DFSDM1_Init+0x68>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_DFSDM1_Init+0x68>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <MX_DFSDM1_Init+0x68>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_DFSDM1_Init+0x68>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_DFSDM1_Init+0x68>)
 8000a32:	f001 fa27 	bl	8001e84 <HAL_DFSDM_ChannelInit>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000a3c:	f000 faec 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000090 	.word	0x20000090
 8000a48:	40016020 	.word	0x40016020

08000a4c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <MX_I2C2_Init+0x74>)
 8000a52:	4a1c      	ldr	r2, [pc, #112]	; (8000ac4 <MX_I2C2_Init+0x78>)
 8000a54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <MX_I2C2_Init+0x74>)
 8000a58:	4a1b      	ldr	r2, [pc, #108]	; (8000ac8 <MX_I2C2_Init+0x7c>)
 8000a5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a5c:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <MX_I2C2_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <MX_I2C2_Init+0x74>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <MX_I2C2_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a6e:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_I2C2_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <MX_I2C2_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <MX_I2C2_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_I2C2_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a86:	480e      	ldr	r0, [pc, #56]	; (8000ac0 <MX_I2C2_Init+0x74>)
 8000a88:	f001 fe6e 	bl	8002768 <HAL_I2C_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a92:	f000 fac1 	bl	8001018 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a96:	2100      	movs	r1, #0
 8000a98:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <MX_I2C2_Init+0x74>)
 8000a9a:	f001 fef4 	bl	8002886 <HAL_I2CEx_ConfigAnalogFilter>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000aa4:	f000 fab8 	bl	8001018 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_I2C2_Init+0x74>)
 8000aac:	f001 ff36 	bl	800291c <HAL_I2CEx_ConfigDigitalFilter>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ab6:	f000 faaf 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200000c8 	.word	0x200000c8
 8000ac4:	40005800 	.word	0x40005800
 8000ac8:	10909cec 	.word	0x10909cec

08000acc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_QUADSPI_Init+0x44>)
 8000ad2:	4a10      	ldr	r2, [pc, #64]	; (8000b14 <MX_QUADSPI_Init+0x48>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_QUADSPI_Init+0x44>)
 8000ad8:	2202      	movs	r2, #2
 8000ada:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_QUADSPI_Init+0x44>)
 8000ade:	2204      	movs	r2, #4
 8000ae0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_QUADSPI_Init+0x44>)
 8000ae4:	2210      	movs	r2, #16
 8000ae6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_QUADSPI_Init+0x44>)
 8000aea:	2217      	movs	r2, #23
 8000aec:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_QUADSPI_Init+0x44>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_QUADSPI_Init+0x44>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_QUADSPI_Init+0x44>)
 8000afc:	f002 f926 	bl	8002d4c <HAL_QSPI_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000b06:	f000 fa87 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	2000011c 	.word	0x2000011c
 8000b14:	a0001000 	.word	0xa0001000

08000b18 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <MX_SPI3_Init+0x74>)
 8000b1e:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <MX_SPI3_Init+0x78>)
 8000b20:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b22:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <MX_SPI3_Init+0x74>)
 8000b24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b28:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <MX_SPI3_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <MX_SPI3_Init+0x74>)
 8000b32:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b36:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_SPI3_Init+0x74>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <MX_SPI3_Init+0x74>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_SPI3_Init+0x74>)
 8000b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b4a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_SPI3_Init+0x74>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_SPI3_Init+0x74>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_SPI3_Init+0x74>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_SPI3_Init+0x74>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_SPI3_Init+0x74>)
 8000b66:	2207      	movs	r2, #7
 8000b68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_SPI3_Init+0x74>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_SPI3_Init+0x74>)
 8000b72:	2208      	movs	r2, #8
 8000b74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_SPI3_Init+0x74>)
 8000b78:	f003 fca2 	bl	80044c0 <HAL_SPI_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000b82:	f000 fa49 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000160 	.word	0x20000160
 8000b90:	40003c00 	.word	0x40003c00

08000b94 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_UART4_Init+0x58>)
 8000b9a:	4a15      	ldr	r2, [pc, #84]	; (8000bf0 <MX_UART4_Init+0x5c>)
 8000b9c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <MX_UART4_Init+0x58>)
 8000ba0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ba4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_UART4_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_UART4_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_UART4_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_UART4_Init+0x58>)
 8000bba:	220c      	movs	r2, #12
 8000bbc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <MX_UART4_Init+0x58>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_UART4_Init+0x58>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <MX_UART4_Init+0x58>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_UART4_Init+0x58>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_UART4_Init+0x58>)
 8000bd8:	f005 fa74 	bl	80060c4 <HAL_UART_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000be2:	f000 fa19 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200001c4 	.word	0x200001c4
 8000bf0:	40004c00 	.word	0x40004c00

08000bf4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000bfa:	4a15      	ldr	r2, [pc, #84]	; (8000c50 <MX_USART1_UART_Init+0x5c>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c38:	f005 fa44 	bl	80060c4 <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c42:	f000 f9e9 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000248 	.word	0x20000248
 8000c50:	40013800 	.word	0x40013800

08000c54 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c62:	2206      	movs	r2, #6
 8000c64:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c68:	2202      	movs	r2, #2
 8000c6a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c6e:	2202      	movs	r2, #2
 8000c70:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c98:	f001 fe8c 	bl	80029b4 <HAL_PCD_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ca2:	f000 f9b9 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200002cc 	.word	0x200002cc

08000cb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cc6:	4bbc      	ldr	r3, [pc, #752]	; (8000fb8 <MX_GPIO_Init+0x308>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	4abb      	ldr	r2, [pc, #748]	; (8000fb8 <MX_GPIO_Init+0x308>)
 8000ccc:	f043 0310 	orr.w	r3, r3, #16
 8000cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd2:	4bb9      	ldr	r3, [pc, #740]	; (8000fb8 <MX_GPIO_Init+0x308>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	f003 0310 	and.w	r3, r3, #16
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cde:	4bb6      	ldr	r3, [pc, #728]	; (8000fb8 <MX_GPIO_Init+0x308>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	4ab5      	ldr	r2, [pc, #724]	; (8000fb8 <MX_GPIO_Init+0x308>)
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cea:	4bb3      	ldr	r3, [pc, #716]	; (8000fb8 <MX_GPIO_Init+0x308>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	4bb0      	ldr	r3, [pc, #704]	; (8000fb8 <MX_GPIO_Init+0x308>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	4aaf      	ldr	r2, [pc, #700]	; (8000fb8 <MX_GPIO_Init+0x308>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d02:	4bad      	ldr	r3, [pc, #692]	; (8000fb8 <MX_GPIO_Init+0x308>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	4baa      	ldr	r3, [pc, #680]	; (8000fb8 <MX_GPIO_Init+0x308>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	4aa9      	ldr	r2, [pc, #676]	; (8000fb8 <MX_GPIO_Init+0x308>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1a:	4ba7      	ldr	r3, [pc, #668]	; (8000fb8 <MX_GPIO_Init+0x308>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d26:	4ba4      	ldr	r3, [pc, #656]	; (8000fb8 <MX_GPIO_Init+0x308>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	4aa3      	ldr	r2, [pc, #652]	; (8000fb8 <MX_GPIO_Init+0x308>)
 8000d2c:	f043 0308 	orr.w	r3, r3, #8
 8000d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d32:	4ba1      	ldr	r3, [pc, #644]	; (8000fb8 <MX_GPIO_Init+0x308>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	f003 0308 	and.w	r3, r3, #8
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000d44:	489d      	ldr	r0, [pc, #628]	; (8000fbc <MX_GPIO_Init+0x30c>)
 8000d46:	f001 fcdf 	bl	8002708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f248 1104 	movw	r1, #33028	; 0x8104
 8000d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d54:	f001 fcd8 	bl	8002708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000d5e:	4898      	ldr	r0, [pc, #608]	; (8000fc0 <MX_GPIO_Init+0x310>)
 8000d60:	f001 fcd2 	bl	8002708 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f241 0181 	movw	r1, #4225	; 0x1081
 8000d6a:	4896      	ldr	r0, [pc, #600]	; (8000fc4 <MX_GPIO_Init+0x314>)
 8000d6c:	f001 fccc 	bl	8002708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d76:	4893      	ldr	r0, [pc, #588]	; (8000fc4 <MX_GPIO_Init+0x314>)
 8000d78:	f001 fcc6 	bl	8002708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000d82:	4891      	ldr	r0, [pc, #580]	; (8000fc8 <MX_GPIO_Init+0x318>)
 8000d84:	f001 fcc0 	bl	8002708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2120      	movs	r1, #32
 8000d8c:	488c      	ldr	r0, [pc, #560]	; (8000fc0 <MX_GPIO_Init+0x310>)
 8000d8e:	f001 fcbb 	bl	8002708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d92:	2201      	movs	r2, #1
 8000d94:	2101      	movs	r1, #1
 8000d96:	4889      	ldr	r0, [pc, #548]	; (8000fbc <MX_GPIO_Init+0x30c>)
 8000d98:	f001 fcb6 	bl	8002708 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000d9c:	f240 1315 	movw	r3, #277	; 0x115
 8000da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	4881      	ldr	r0, [pc, #516]	; (8000fbc <MX_GPIO_Init+0x30c>)
 8000db6:	f001 f9f1 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000dba:	236a      	movs	r3, #106	; 0x6a
 8000dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dbe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	487b      	ldr	r0, [pc, #492]	; (8000fbc <MX_GPIO_Init+0x30c>)
 8000dd0:	f001 f9e4 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000dd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dda:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	4877      	ldr	r0, [pc, #476]	; (8000fc8 <MX_GPIO_Init+0x318>)
 8000dec:	f001 f9d6 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000df0:	233f      	movs	r3, #63	; 0x3f
 8000df2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000df4:	230b      	movs	r3, #11
 8000df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4619      	mov	r1, r3
 8000e02:	4871      	ldr	r0, [pc, #452]	; (8000fc8 <MX_GPIO_Init+0x318>)
 8000e04:	f001 f9ca 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000e08:	f248 1304 	movw	r3, #33028	; 0x8104
 8000e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e24:	f001 f9ba 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000e28:	2308      	movs	r3, #8
 8000e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4619      	mov	r1, r3
 8000e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e46:	f001 f9a9 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000e4a:	23e0      	movs	r3, #224	; 0xe0
 8000e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e5a:	2305      	movs	r3, #5
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e68:	f001 f998 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	484f      	ldr	r0, [pc, #316]	; (8000fc0 <MX_GPIO_Init+0x310>)
 8000e82:	f001 f98b 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000e86:	2302      	movs	r3, #2
 8000e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e8a:	230b      	movs	r3, #11
 8000e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	4849      	ldr	r0, [pc, #292]	; (8000fc0 <MX_GPIO_Init+0x310>)
 8000e9a:	f001 f97f 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e9e:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000ea2:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4842      	ldr	r0, [pc, #264]	; (8000fc0 <MX_GPIO_Init+0x310>)
 8000eb8:	f001 f970 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ece:	2307      	movs	r3, #7
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	483a      	ldr	r0, [pc, #232]	; (8000fc4 <MX_GPIO_Init+0x314>)
 8000eda:	f001 f95f 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000ede:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000ee2:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ee4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4833      	ldr	r0, [pc, #204]	; (8000fc4 <MX_GPIO_Init+0x314>)
 8000ef6:	f001 f951 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000efa:	f243 0381 	movw	r3, #12417	; 0x3081
 8000efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f00:	2301      	movs	r3, #1
 8000f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	4619      	mov	r1, r3
 8000f12:	482c      	ldr	r0, [pc, #176]	; (8000fc4 <MX_GPIO_Init+0x314>)
 8000f14:	f001 f942 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000f18:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4825      	ldr	r0, [pc, #148]	; (8000fc8 <MX_GPIO_Init+0x318>)
 8000f32:	f001 f933 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000f36:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f3c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	481e      	ldr	r0, [pc, #120]	; (8000fc8 <MX_GPIO_Init+0x318>)
 8000f4e:	f001 f925 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000f52:	2302      	movs	r3, #2
 8000f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f62:	2305      	movs	r3, #5
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4815      	ldr	r0, [pc, #84]	; (8000fc4 <MX_GPIO_Init+0x314>)
 8000f6e:	f001 f915 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PD5 PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|GPIO_PIN_5|PMOD_UART2_RX_Pin;
 8000f72:	2378      	movs	r3, #120	; 0x78
 8000f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f82:	2307      	movs	r3, #7
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <MX_GPIO_Init+0x314>)
 8000f8e:	f001 f905 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000f92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f98:	2312      	movs	r3, #18
 8000f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fa4:	2304      	movs	r3, #4
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4619      	mov	r1, r3
 8000fae:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <MX_GPIO_Init+0x310>)
 8000fb0:	f001 f8f4 	bl	800219c <HAL_GPIO_Init>
 8000fb4:	e00a      	b.n	8000fcc <MX_GPIO_Init+0x31c>
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	48001000 	.word	0x48001000
 8000fc0:	48000400 	.word	0x48000400
 8000fc4:	48000c00 	.word	0x48000c00
 8000fc8:	48000800 	.word	0x48000800

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2105      	movs	r1, #5
 8000fd0:	2017      	movs	r0, #23
 8000fd2:	f000 ff2d 	bl	8001e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fd6:	2017      	movs	r0, #23
 8000fd8:	f000 ff46 	bl	8001e68 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2105      	movs	r1, #5
 8000fe0:	2028      	movs	r0, #40	; 0x28
 8000fe2:	f000 ff25 	bl	8001e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fe6:	2028      	movs	r0, #40	; 0x28
 8000fe8:	f000 ff3e 	bl	8001e68 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fec:	bf00      	nop
 8000fee:	3728      	adds	r7, #40	; 0x28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d101      	bne.n	800100a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001006:	f000 fe17 	bl	8001c38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40000800 	.word	0x40000800

08001018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101c:	b672      	cpsid	i
}
 800101e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001020:	e7fe      	b.n	8001020 <Error_Handler+0x8>
	...

08001024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <HAL_MspInit+0x4c>)
 800102c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102e:	4a10      	ldr	r2, [pc, #64]	; (8001070 <HAL_MspInit+0x4c>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6613      	str	r3, [r2, #96]	; 0x60
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HAL_MspInit+0x4c>)
 8001038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <HAL_MspInit+0x4c>)
 8001044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <HAL_MspInit+0x4c>)
 8001048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104c:	6593      	str	r3, [r2, #88]	; 0x58
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <HAL_MspInit+0x4c>)
 8001050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	210f      	movs	r1, #15
 800105e:	f06f 0001 	mvn.w	r0, #1
 8001062:	f000 fee5 	bl	8001e30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000

08001074 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b0ac      	sub	sp, #176	; 0xb0
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2288      	movs	r2, #136	; 0x88
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f00b fabb 	bl	800c610 <memset>
  if(DFSDM1_Init == 0)
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d142      	bne.n	8001128 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80010a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 fd38 	bl	8003b28 <HAL_RCCEx_PeriphCLKConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80010be:	f7ff ffab 	bl	8001018 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80010c2:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c6:	4a1b      	ldr	r2, [pc, #108]	; (8001134 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010cc:	6613      	str	r3, [r2, #96]	; 0x60
 80010ce:	4b19      	ldr	r3, [pc, #100]	; (8001134 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010da:	4b16      	ldr	r3, [pc, #88]	; (8001134 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	4a15      	ldr	r2, [pc, #84]	; (8001134 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010e0:	f043 0310 	orr.w	r3, r3, #16
 80010e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	f003 0310 	and.w	r3, r3, #16
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80010f2:	f44f 7320 	mov.w	r3, #640	; 0x280
 80010f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800110c:	2306      	movs	r3, #6
 800110e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001112:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001116:	4619      	mov	r1, r3
 8001118:	4807      	ldr	r0, [pc, #28]	; (8001138 <HAL_DFSDM_ChannelMspInit+0xc4>)
 800111a:	f001 f83f 	bl	800219c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800111e:	4b04      	ldr	r3, [pc, #16]	; (8001130 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	3301      	adds	r3, #1
 8001124:	4a02      	ldr	r2, [pc, #8]	; (8001130 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001126:	6013      	str	r3, [r2, #0]
  }

}
 8001128:	bf00      	nop
 800112a:	37b0      	adds	r7, #176	; 0xb0
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200007ec 	.word	0x200007ec
 8001134:	40021000 	.word	0x40021000
 8001138:	48001000 	.word	0x48001000

0800113c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b0ac      	sub	sp, #176	; 0xb0
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2288      	movs	r2, #136	; 0x88
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f00b fa57 	bl	800c610 <memset>
  if(hi2c->Instance==I2C2)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a21      	ldr	r2, [pc, #132]	; (80011ec <HAL_I2C_MspInit+0xb0>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d13b      	bne.n	80011e4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001170:	2300      	movs	r3, #0
 8001172:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4618      	mov	r0, r3
 800117a:	f002 fcd5 	bl	8003b28 <HAL_RCCEx_PeriphCLKConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001184:	f7ff ff48 	bl	8001018 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <HAL_I2C_MspInit+0xb4>)
 800118a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118c:	4a18      	ldr	r2, [pc, #96]	; (80011f0 <HAL_I2C_MspInit+0xb4>)
 800118e:	f043 0302 	orr.w	r3, r3, #2
 8001192:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <HAL_I2C_MspInit+0xb4>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80011a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a8:	2312      	movs	r3, #18
 80011aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b4:	2303      	movs	r3, #3
 80011b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011ba:	2304      	movs	r3, #4
 80011bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011c4:	4619      	mov	r1, r3
 80011c6:	480b      	ldr	r0, [pc, #44]	; (80011f4 <HAL_I2C_MspInit+0xb8>)
 80011c8:	f000 ffe8 	bl	800219c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_I2C_MspInit+0xb4>)
 80011ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d0:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <HAL_I2C_MspInit+0xb4>)
 80011d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011d6:	6593      	str	r3, [r2, #88]	; 0x58
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <HAL_I2C_MspInit+0xb4>)
 80011da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011e4:	bf00      	nop
 80011e6:	37b0      	adds	r7, #176	; 0xb0
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40005800 	.word	0x40005800
 80011f0:	40021000 	.word	0x40021000
 80011f4:	48000400 	.word	0x48000400

080011f8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a17      	ldr	r2, [pc, #92]	; (8001274 <HAL_QSPI_MspInit+0x7c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d128      	bne.n	800126c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <HAL_QSPI_MspInit+0x80>)
 800121c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800121e:	4a16      	ldr	r2, [pc, #88]	; (8001278 <HAL_QSPI_MspInit+0x80>)
 8001220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001224:	6513      	str	r3, [r2, #80]	; 0x50
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <HAL_QSPI_MspInit+0x80>)
 8001228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800122a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <HAL_QSPI_MspInit+0x80>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	4a10      	ldr	r2, [pc, #64]	; (8001278 <HAL_QSPI_MspInit+0x80>)
 8001238:	f043 0310 	orr.w	r3, r3, #16
 800123c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <HAL_QSPI_MspInit+0x80>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	f003 0310 	and.w	r3, r3, #16
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800124a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800124e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800125c:	230a      	movs	r3, #10
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4619      	mov	r1, r3
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <HAL_QSPI_MspInit+0x84>)
 8001268:	f000 ff98 	bl	800219c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800126c:	bf00      	nop
 800126e:	3728      	adds	r7, #40	; 0x28
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	a0001000 	.word	0xa0001000
 8001278:	40021000 	.word	0x40021000
 800127c:	48001000 	.word	0x48001000

08001280 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a17      	ldr	r2, [pc, #92]	; (80012fc <HAL_SPI_MspInit+0x7c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d128      	bne.n	80012f4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_SPI_MspInit+0x80>)
 80012a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a6:	4a16      	ldr	r2, [pc, #88]	; (8001300 <HAL_SPI_MspInit+0x80>)
 80012a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ac:	6593      	str	r3, [r2, #88]	; 0x58
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <HAL_SPI_MspInit+0x80>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_SPI_MspInit+0x80>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	4a10      	ldr	r2, [pc, #64]	; (8001300 <HAL_SPI_MspInit+0x80>)
 80012c0:	f043 0304 	orr.w	r3, r3, #4
 80012c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <HAL_SPI_MspInit+0x80>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80012d2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012e4:	2306      	movs	r3, #6
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <HAL_SPI_MspInit+0x84>)
 80012f0:	f000 ff54 	bl	800219c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	; 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40003c00 	.word	0x40003c00
 8001300:	40021000 	.word	0x40021000
 8001304:	48000800 	.word	0x48000800

08001308 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a08      	ldr	r2, [pc, #32]	; (8001338 <HAL_SPI_MspDeInit+0x30>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d10a      	bne.n	8001330 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <HAL_SPI_MspDeInit+0x34>)
 800131c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131e:	4a07      	ldr	r2, [pc, #28]	; (800133c <HAL_SPI_MspDeInit+0x34>)
 8001320:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001324:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8001326:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <HAL_SPI_MspDeInit+0x38>)
 800132c:	f001 f8e0 	bl	80024f0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40003c00 	.word	0x40003c00
 800133c:	40021000 	.word	0x40021000
 8001340:	48000800 	.word	0x48000800

08001344 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b0ae      	sub	sp, #184	; 0xb8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	2288      	movs	r2, #136	; 0x88
 8001362:	2100      	movs	r1, #0
 8001364:	4618      	mov	r0, r3
 8001366:	f00b f953 	bl	800c610 <memset>
  if(huart->Instance==UART4)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a4a      	ldr	r2, [pc, #296]	; (8001498 <HAL_UART_MspInit+0x154>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d144      	bne.n	80013fe <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001374:	2308      	movs	r3, #8
 8001376:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001378:	2300      	movs	r3, #0
 800137a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4618      	mov	r0, r3
 8001382:	f002 fbd1 	bl	8003b28 <HAL_RCCEx_PeriphCLKConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800138c:	f7ff fe44 	bl	8001018 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001390:	4b42      	ldr	r3, [pc, #264]	; (800149c <HAL_UART_MspInit+0x158>)
 8001392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001394:	4a41      	ldr	r2, [pc, #260]	; (800149c <HAL_UART_MspInit+0x158>)
 8001396:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800139a:	6593      	str	r3, [r2, #88]	; 0x58
 800139c:	4b3f      	ldr	r3, [pc, #252]	; (800149c <HAL_UART_MspInit+0x158>)
 800139e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013a4:	61bb      	str	r3, [r7, #24]
 80013a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a8:	4b3c      	ldr	r3, [pc, #240]	; (800149c <HAL_UART_MspInit+0x158>)
 80013aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ac:	4a3b      	ldr	r2, [pc, #236]	; (800149c <HAL_UART_MspInit+0x158>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b4:	4b39      	ldr	r3, [pc, #228]	; (800149c <HAL_UART_MspInit+0x158>)
 80013b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80013c0:	2303      	movs	r3, #3
 80013c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d2:	2303      	movs	r3, #3
 80013d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80013d8:	2308      	movs	r3, #8
 80013da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013e2:	4619      	mov	r1, r3
 80013e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e8:	f000 fed8 	bl	800219c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2105      	movs	r1, #5
 80013f0:	2034      	movs	r0, #52	; 0x34
 80013f2:	f000 fd1d 	bl	8001e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80013f6:	2034      	movs	r0, #52	; 0x34
 80013f8:	f000 fd36 	bl	8001e68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013fc:	e047      	b.n	800148e <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART1)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a27      	ldr	r2, [pc, #156]	; (80014a0 <HAL_UART_MspInit+0x15c>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d142      	bne.n	800148e <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001408:	2301      	movs	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800140c:	2300      	movs	r3, #0
 800140e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	4618      	mov	r0, r3
 8001416:	f002 fb87 	bl	8003b28 <HAL_RCCEx_PeriphCLKConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001420:	f7ff fdfa 	bl	8001018 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001424:	4b1d      	ldr	r3, [pc, #116]	; (800149c <HAL_UART_MspInit+0x158>)
 8001426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001428:	4a1c      	ldr	r2, [pc, #112]	; (800149c <HAL_UART_MspInit+0x158>)
 800142a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800142e:	6613      	str	r3, [r2, #96]	; 0x60
 8001430:	4b1a      	ldr	r3, [pc, #104]	; (800149c <HAL_UART_MspInit+0x158>)
 8001432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001434:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143c:	4b17      	ldr	r3, [pc, #92]	; (800149c <HAL_UART_MspInit+0x158>)
 800143e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001440:	4a16      	ldr	r2, [pc, #88]	; (800149c <HAL_UART_MspInit+0x158>)
 8001442:	f043 0302 	orr.w	r3, r3, #2
 8001446:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <HAL_UART_MspInit+0x158>)
 800144a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001454:	23c0      	movs	r3, #192	; 0xc0
 8001456:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800146c:	2307      	movs	r3, #7
 800146e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001476:	4619      	mov	r1, r3
 8001478:	480a      	ldr	r0, [pc, #40]	; (80014a4 <HAL_UART_MspInit+0x160>)
 800147a:	f000 fe8f 	bl	800219c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2105      	movs	r1, #5
 8001482:	2025      	movs	r0, #37	; 0x25
 8001484:	f000 fcd4 	bl	8001e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001488:	2025      	movs	r0, #37	; 0x25
 800148a:	f000 fced 	bl	8001e68 <HAL_NVIC_EnableIRQ>
}
 800148e:	bf00      	nop
 8001490:	37b8      	adds	r7, #184	; 0xb8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40004c00 	.word	0x40004c00
 800149c:	40021000 	.word	0x40021000
 80014a0:	40013800 	.word	0x40013800
 80014a4:	48000400 	.word	0x48000400

080014a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b0ac      	sub	sp, #176	; 0xb0
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2288      	movs	r2, #136	; 0x88
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f00b f8a1 	bl	800c610 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014d6:	d17c      	bne.n	80015d2 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80014d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014dc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80014de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80014e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80014e6:	2301      	movs	r3, #1
 80014e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80014ea:	2301      	movs	r3, #1
 80014ec:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80014ee:	2318      	movs	r3, #24
 80014f0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80014f2:	2307      	movs	r3, #7
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80014f6:	2302      	movs	r3, #2
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80014fa:	2302      	movs	r3, #2
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80014fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001502:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4618      	mov	r0, r3
 800150a:	f002 fb0d 	bl	8003b28 <HAL_RCCEx_PeriphCLKConfig>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001514:	f7ff fd80 	bl	8001018 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001518:	4b30      	ldr	r3, [pc, #192]	; (80015dc <HAL_PCD_MspInit+0x134>)
 800151a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151c:	4a2f      	ldr	r2, [pc, #188]	; (80015dc <HAL_PCD_MspInit+0x134>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001524:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <HAL_PCD_MspInit+0x134>)
 8001526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001534:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001544:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001548:	4619      	mov	r1, r3
 800154a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154e:	f000 fe25 	bl	800219c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001552:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001556:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001566:	2303      	movs	r3, #3
 8001568:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800156c:	230a      	movs	r3, #10
 800156e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001572:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001576:	4619      	mov	r1, r3
 8001578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157c:	f000 fe0e 	bl	800219c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <HAL_PCD_MspInit+0x134>)
 8001582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001584:	4a15      	ldr	r2, [pc, #84]	; (80015dc <HAL_PCD_MspInit+0x134>)
 8001586:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800158a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <HAL_PCD_MspInit+0x134>)
 800158e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_PCD_MspInit+0x134>)
 800159a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d114      	bne.n	80015ce <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a4:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <HAL_PCD_MspInit+0x134>)
 80015a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a8:	4a0c      	ldr	r2, [pc, #48]	; (80015dc <HAL_PCD_MspInit+0x134>)
 80015aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ae:	6593      	str	r3, [r2, #88]	; 0x58
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_PCD_MspInit+0x134>)
 80015b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80015bc:	f001 fbb6 	bl	8002d2c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_PCD_MspInit+0x134>)
 80015c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c4:	4a05      	ldr	r2, [pc, #20]	; (80015dc <HAL_PCD_MspInit+0x134>)
 80015c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ca:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80015cc:	e001      	b.n	80015d2 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80015ce:	f001 fbad 	bl	8002d2c <HAL_PWREx_EnableVddUSB>
}
 80015d2:	bf00      	nop
 80015d4:	37b0      	adds	r7, #176	; 0xb0
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000

080015e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08e      	sub	sp, #56	; 0x38
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80015ee:	4b34      	ldr	r3, [pc, #208]	; (80016c0 <HAL_InitTick+0xe0>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	4a33      	ldr	r2, [pc, #204]	; (80016c0 <HAL_InitTick+0xe0>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	6593      	str	r3, [r2, #88]	; 0x58
 80015fa:	4b31      	ldr	r3, [pc, #196]	; (80016c0 <HAL_InitTick+0xe0>)
 80015fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001606:	f107 0210 	add.w	r2, r7, #16
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f002 f9f7 	bl	8003a04 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800161a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161c:	2b00      	cmp	r3, #0
 800161e:	d103      	bne.n	8001628 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001620:	f002 f9c4 	bl	80039ac <HAL_RCC_GetPCLK1Freq>
 8001624:	6378      	str	r0, [r7, #52]	; 0x34
 8001626:	e004      	b.n	8001632 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001628:	f002 f9c0 	bl	80039ac <HAL_RCC_GetPCLK1Freq>
 800162c:	4603      	mov	r3, r0
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001634:	4a23      	ldr	r2, [pc, #140]	; (80016c4 <HAL_InitTick+0xe4>)
 8001636:	fba2 2303 	umull	r2, r3, r2, r3
 800163a:	0c9b      	lsrs	r3, r3, #18
 800163c:	3b01      	subs	r3, #1
 800163e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001640:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <HAL_InitTick+0xe8>)
 8001642:	4a22      	ldr	r2, [pc, #136]	; (80016cc <HAL_InitTick+0xec>)
 8001644:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <HAL_InitTick+0xe8>)
 8001648:	f240 32e7 	movw	r2, #999	; 0x3e7
 800164c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800164e:	4a1e      	ldr	r2, [pc, #120]	; (80016c8 <HAL_InitTick+0xe8>)
 8001650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001652:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001654:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <HAL_InitTick+0xe8>)
 8001656:	2200      	movs	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165a:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <HAL_InitTick+0xe8>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001660:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <HAL_InitTick+0xe8>)
 8001662:	2200      	movs	r2, #0
 8001664:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001666:	4818      	ldr	r0, [pc, #96]	; (80016c8 <HAL_InitTick+0xe8>)
 8001668:	f004 fa5b 	bl	8005b22 <HAL_TIM_Base_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001672:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001676:	2b00      	cmp	r3, #0
 8001678:	d11b      	bne.n	80016b2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800167a:	4813      	ldr	r0, [pc, #76]	; (80016c8 <HAL_InitTick+0xe8>)
 800167c:	f004 fab2 	bl	8005be4 <HAL_TIM_Base_Start_IT>
 8001680:	4603      	mov	r3, r0
 8001682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001686:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800168a:	2b00      	cmp	r3, #0
 800168c:	d111      	bne.n	80016b2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800168e:	201e      	movs	r0, #30
 8001690:	f000 fbea 	bl	8001e68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b0f      	cmp	r3, #15
 8001698:	d808      	bhi.n	80016ac <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800169a:	2200      	movs	r2, #0
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	201e      	movs	r0, #30
 80016a0:	f000 fbc6 	bl	8001e30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016a4:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <HAL_InitTick+0xf0>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	e002      	b.n	80016b2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3738      	adds	r7, #56	; 0x38
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000
 80016c4:	431bde83 	.word	0x431bde83
 80016c8:	200007f0 	.word	0x200007f0
 80016cc:	40000800 	.word	0x40000800
 80016d0:	20000004 	.word	0x20000004

080016d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <NMI_Handler+0x4>

080016da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016de:	e7fe      	b.n	80016de <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <MemManage_Handler+0x4>

080016e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <BusFault_Handler+0x4>

080016ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <UsageFault_Handler+0x4>

080016f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001704:	2020      	movs	r0, #32
 8001706:	f001 f817 	bl	8002738 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800170a:	2040      	movs	r0, #64	; 0x40
 800170c:	f001 f814 	bl	8002738 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001710:	2080      	movs	r0, #128	; 0x80
 8001712:	f001 f811 	bl	8002738 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001716:	f44f 7080 	mov.w	r0, #256	; 0x100
 800171a:	f001 f80d 	bl	8002738 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <TIM4_IRQHandler+0x10>)
 800172a:	f004 facb 	bl	8005cc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200007f0 	.word	0x200007f0

08001738 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <USART1_IRQHandler+0x10>)
 800173e:	f004 fd7d 	bl	800623c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000248 	.word	0x20000248

0800174c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001750:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001754:	f000 fff0 	bl	8002738 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001758:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800175c:	f000 ffec 	bl	8002738 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001760:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001764:	f000 ffe8 	bl	8002738 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001768:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800176c:	f000 ffe4 	bl	8002738 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001770:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001774:	f000 ffe0 	bl	8002738 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}

0800177c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <UART4_IRQHandler+0x10>)
 8001782:	f004 fd5b 	bl	800623c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200001c4 	.word	0x200001c4

08001790 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
	return 1;
 8001794:	2301      	movs	r3, #1
}
 8001796:	4618      	mov	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <_kill>:

int _kill(int pid, int sig)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017aa:	f00a fddf 	bl	800c36c <__errno>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2216      	movs	r2, #22
 80017b2:	601a      	str	r2, [r3, #0]
	return -1;
 80017b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <_exit>:

void _exit (int status)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ffe7 	bl	80017a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017d2:	e7fe      	b.n	80017d2 <_exit+0x12>

080017d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	e00a      	b.n	80017fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017e6:	f3af 8000 	nop.w
 80017ea:	4601      	mov	r1, r0
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	60ba      	str	r2, [r7, #8]
 80017f2:	b2ca      	uxtb	r2, r1
 80017f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	3301      	adds	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	429a      	cmp	r2, r3
 8001802:	dbf0      	blt.n	80017e6 <_read+0x12>
	}

return len;
 8001804:	687b      	ldr	r3, [r7, #4]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b086      	sub	sp, #24
 8001812:	af00      	add	r7, sp, #0
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	e009      	b.n	8001834 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	60ba      	str	r2, [r7, #8]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fefb 	bl	8000624 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	3301      	adds	r3, #1
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	429a      	cmp	r2, r3
 800183a:	dbf1      	blt.n	8001820 <_write+0x12>
	}
	return len;
 800183c:	687b      	ldr	r3, [r7, #4]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <_close>:

int _close(int file)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
	return -1;
 800184e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800186e:	605a      	str	r2, [r3, #4]
	return 0;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <_isatty>:

int _isatty(int file)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
	return 1;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
	return 0;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b8:	4a14      	ldr	r2, [pc, #80]	; (800190c <_sbrk+0x5c>)
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <_sbrk+0x60>)
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <_sbrk+0x64>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d102      	bne.n	80018d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <_sbrk+0x64>)
 80018ce:	4a12      	ldr	r2, [pc, #72]	; (8001918 <_sbrk+0x68>)
 80018d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d207      	bcs.n	80018f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e0:	f00a fd44 	bl	800c36c <__errno>
 80018e4:	4603      	mov	r3, r0
 80018e6:	220c      	movs	r2, #12
 80018e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
 80018ee:	e009      	b.n	8001904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <_sbrk+0x64>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	4a05      	ldr	r2, [pc, #20]	; (8001914 <_sbrk+0x64>)
 8001900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001902:	68fb      	ldr	r3, [r7, #12]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20018000 	.word	0x20018000
 8001910:	00000400 	.word	0x00000400
 8001914:	2000083c 	.word	0x2000083c
 8001918:	20002bb8 	.word	0x20002bb8

0800191c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <SystemInit+0x20>)
 8001922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001926:	4a05      	ldr	r2, [pc, #20]	; (800193c <SystemInit+0x20>)
 8001928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800192c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <RequestJSONProcess>:
	}
	return stopserver;

}

int RequestJSONProcess() {
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
	bool StopServer = false;
 8001946:	2300      	movs	r3, #0
 8001948:	71fb      	strb	r3, [r7, #7]

	if (WIFI_Init() != WIFI_STATUS_OK)
 800194a:	f007 fa05 	bl	8008d58 <WIFI_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <RequestJSONProcess+0x18>
		return 1;
 8001954:	2301      	movs	r3, #1
 8001956:	e01b      	b.n	8001990 <RequestJSONProcess+0x50>
	if (WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) != WIFI_STATUS_OK)
 8001958:	2203      	movs	r2, #3
 800195a:	490f      	ldr	r1, [pc, #60]	; (8001998 <RequestJSONProcess+0x58>)
 800195c:	480f      	ldr	r0, [pc, #60]	; (800199c <RequestJSONProcess+0x5c>)
 800195e:	f007 fa27 	bl	8008db0 <WIFI_Connect>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <RequestJSONProcess+0x2c>
		return 1;
 8001968:	2301      	movs	r3, #1
 800196a:	e011      	b.n	8001990 <RequestJSONProcess+0x50>

	do {
		S_PrintOnSerial("PETICION\r\n");
 800196c:	480c      	ldr	r0, [pc, #48]	; (80019a0 <RequestJSONProcess+0x60>)
 800196e:	f7fe fe33 	bl	80005d8 <S_PrintOnSerial>
		StopServer = RequestJSON();
 8001972:	f000 f817 	bl	80019a4 <RequestJSON>
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
		vTaskDelay(2000);
 800197a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800197e:	f008 ff01 	bl	800a784 <vTaskDelay>
	} while (StopServer == false);
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	f083 0301 	eor.w	r3, r3, #1
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1ee      	bne.n	800196c <RequestJSONProcess+0x2c>

	return 1;
 800198e:	2301      	movs	r3, #1
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	0800dbf0 	.word	0x0800dbf0
 800199c:	0800dc08 	.word	0x0800dc08
 80019a0:	0800dc6c 	.word	0x0800dc6c

080019a4 <RequestJSON>:

static bool RequestJSON() {
 80019a4:	b590      	push	{r4, r7, lr}
 80019a6:	f6ad 2d34 	subw	sp, sp, #2612	; 0xa34
 80019aa:	af02      	add	r7, sp, #8
	uint8_t ret;
	// Dirección IP y puerto del servidor
	const char *serverIP = "192.168.18.3";
 80019ac:	4b67      	ldr	r3, [pc, #412]	; (8001b4c <RequestJSON+0x1a8>)
 80019ae:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
	const uint16_t serverPort = 5000;
 80019b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80019b6:	f8a7 3a1a 	strh.w	r3, [r7, #2586]	; 0xa1a

	// URL del recurso JSON
	const char *url = "/mi-api";
 80019ba:	4b65      	ldr	r3, [pc, #404]	; (8001b50 <RequestJSON+0x1ac>)
 80019bc:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14

	// Abrir una conexión con el servidor
	uint8_t serverIPAddr[4] = { 192, 168, 18, 3 }; // Dirección IP del servidor
 80019c0:	4b64      	ldr	r3, [pc, #400]	; (8001b54 <RequestJSON+0x1b0>)
 80019c2:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
	ret = WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "Cliente",
 80019c6:	f607 220c 	addw	r2, r7, #2572	; 0xa0c
 80019ca:	2300      	movs	r3, #0
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	f8b7 3a1a 	ldrh.w	r3, [r7, #2586]	; 0xa1a
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	4613      	mov	r3, r2
 80019d6:	4a60      	ldr	r2, [pc, #384]	; (8001b58 <RequestJSON+0x1b4>)
 80019d8:	2100      	movs	r1, #0
 80019da:	2000      	movs	r0, #0
 80019dc:	f007 fa0a 	bl	8008df4 <WIFI_OpenClientConnection>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f887 3a13 	strb.w	r3, [r7, #2579]	; 0xa13
			serverIPAddr, serverPort, 0);

	if (ret == WIFI_STATUS_OK) {
 80019e6:	f897 3a13 	ldrb.w	r3, [r7, #2579]	; 0xa13
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f040 80a8 	bne.w	8001b40 <RequestJSON+0x19c>
		// La conexión con el servidor se ha establecido correctamente

		// Construir la solicitud HTTP GET para el recurso JSON
		char request[512];
		snprintf(request, sizeof(request), "GET %s HTTP/1.1\r\n"
 80019f0:	f8b7 3a1a 	ldrh.w	r3, [r7, #2586]	; 0xa1a
 80019f4:	1d38      	adds	r0, r7, #4
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	; 0xa14
 8001a02:	4a56      	ldr	r2, [pc, #344]	; (8001b5c <RequestJSON+0x1b8>)
 8001a04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a08:	f00a fff2 	bl	800c9f0 <sniprintf>
				"Host: %s:%d\r\n"
				"Connection: close\r\n\r\n", url, serverIP, serverPort);

		// Enviar la solicitud al servidor
		uint16_t sentDataLength;
		ret = WIFI_SendData(0, (uint8_t*) request, strlen(request),
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fbde 	bl	80001d0 <strlen>
 8001a14:	4603      	mov	r3, r0
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	f607 230a 	addw	r3, r7, #2570	; 0xa0a
 8001a1c:	1d39      	adds	r1, r7, #4
 8001a1e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001a22:	9000      	str	r0, [sp, #0]
 8001a24:	2000      	movs	r0, #0
 8001a26:	f007 fa1f 	bl	8008e68 <WIFI_SendData>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f887 3a13 	strb.w	r3, [r7, #2579]	; 0xa13
				&sentDataLength, WIFI_WRITE_TIMEOUT);

		if (ret == WIFI_STATUS_OK && sentDataLength == strlen(request)) {
 8001a30:	f897 3a13 	ldrb.w	r3, [r7, #2579]	; 0xa13
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f040 8083 	bne.w	8001b40 <RequestJSON+0x19c>
 8001a3a:	f8b7 3a0a 	ldrh.w	r3, [r7, #2570]	; 0xa0a
 8001a3e:	461c      	mov	r4, r3
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fbc4 	bl	80001d0 <strlen>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	429c      	cmp	r4, r3
 8001a4c:	d178      	bne.n	8001b40 <RequestJSON+0x19c>

			// Buffer para almacenar la respuesta
			uint8_t response[MAX_RESPONSE_SIZE];

			// Variables para rastrear el tamaño de los datos recibidos
			uint16_t receivedLength = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f8a7 3a08 	strh.w	r3, [r7, #2568]	; 0xa08
			uint16_t totalReceivedLength = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f8a7 3a26 	strh.w	r3, [r7, #2598]	; 0xa26

			// Bucle para recibir los datos en bloques hasta que se reciba toda la respuesta
		do {
			// Recepción de datos del servidor
			WIFI_Status_t ret = WIFI_ReceiveData(0,
 8001a5a:	f8b7 3a08 	ldrh.w	r3, [r7, #2568]	; 0xa08
 8001a5e:	461a      	mov	r2, r3
 8001a60:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8001a64:	1899      	adds	r1, r3, r2
 8001a66:	f8b7 3a26 	ldrh.w	r3, [r7, #2598]	; 0xa26
 8001a6a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8001a74:	f242 7010 	movw	r0, #10000	; 0x2710
 8001a78:	9000      	str	r0, [sp, #0]
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f007 fa16 	bl	8008eac <WIFI_ReceiveData>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f887 3a12 	strb.w	r3, [r7, #2578]	; 0xa12
					response + receivedLength,
					MAX_RESPONSE_SIZE - totalReceivedLength,
					&receivedLength, WIFI_READ_TIMEOUT);
			if (ret == WIFI_STATUS_OK) {
 8001a86:	f897 3a12 	ldrb.w	r3, [r7, #2578]	; 0xa12
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d107      	bne.n	8001a9e <RequestJSON+0xfa>
				// Datos recibidos correctamente

				// Actualizar el tamaño total de datos recibidos
				totalReceivedLength += receivedLength;
 8001a8e:	f8b7 2a08 	ldrh.w	r2, [r7, #2568]	; 0xa08
 8001a92:	f8b7 3a26 	ldrh.w	r3, [r7, #2598]	; 0xa26
 8001a96:	4413      	add	r3, r2
 8001a98:	f8a7 3a26 	strh.w	r3, [r7, #2598]	; 0xa26
 8001a9c:	e00e      	b.n	8001abc <RequestJSON+0x118>
				// Realizar cualquier procesamiento adicional necesario aquí
			} else if (ret == WIFI_STATUS_TIMEOUT) {
 8001a9e:	f897 3a12 	ldrb.w	r3, [r7, #2578]	; 0xa12
 8001aa2:	2b05      	cmp	r3, #5
 8001aa4:	d106      	bne.n	8001ab4 <RequestJSON+0x110>
				// Tiempo de espera agotado, se ha recibido una parte de la respuesta
				S_PrintOnSerial(
 8001aa6:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8001aaa:	4619      	mov	r1, r3
 8001aac:	482c      	ldr	r0, [pc, #176]	; (8001b60 <RequestJSON+0x1bc>)
 8001aae:	f7fe fd93 	bl	80005d8 <S_PrintOnSerial>
 8001ab2:	e003      	b.n	8001abc <RequestJSON+0x118>
						"Tiempo de espera agotado, se ha recibido una parte de la respuesta\r\n",
						response);
			} else {
				// Error al recibir los datos
				S_PrintOnSerial("Error al recibir los datos\r\n");
 8001ab4:	482b      	ldr	r0, [pc, #172]	; (8001b64 <RequestJSON+0x1c0>)
 8001ab6:	f7fe fd8f 	bl	80005d8 <S_PrintOnSerial>
				break;
 8001aba:	e013      	b.n	8001ae4 <RequestJSON+0x140>
			}
			if (strstr((char*)response, AT_OK_STRING) != NULL)
 8001abc:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8001ac0:	4929      	ldr	r1, [pc, #164]	; (8001b68 <RequestJSON+0x1c4>)
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f00b f83e 	bl	800cb44 <strstr>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d109      	bne.n	8001ae2 <RequestJSON+0x13e>
				break;
			}while (receivedLength > 0
 8001ace:	f8b7 3a08 	ldrh.w	r3, [r7, #2568]	; 0xa08
					&& totalReceivedLength < MAX_RESPONSE_SIZE);
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d006      	beq.n	8001ae4 <RequestJSON+0x140>
 8001ad6:	f8b7 3a26 	ldrh.w	r3, [r7, #2598]	; 0xa26
 8001ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ade:	d3bc      	bcc.n	8001a5a <RequestJSON+0xb6>
 8001ae0:	e000      	b.n	8001ae4 <RequestJSON+0x140>
				break;
 8001ae2:	bf00      	nop
			//S_PrintOnSerial("Datos recibidos correctamente\r\n");
			// Crear un buffer de caracteres para almacenar la cadena de respuesta
			char responseString[MAX_RESPONSE_SIZE + 1];// +1 para el carácter nulo de terminación

			// Copiar los elementos del array de respuesta en la cadena de caracteres
			for (int i = 0; i < totalReceivedLength; i++) {
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
 8001aea:	e015      	b.n	8001b18 <RequestJSON+0x174>
				responseString[i] = (char) response[i];
 8001aec:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8001af0:	f6a3 0224 	subw	r2, r3, #2084	; 0x824
 8001af4:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
 8001af8:	4413      	add	r3, r2
 8001afa:	7819      	ldrb	r1, [r3, #0]
 8001afc:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8001b00:	f2a3 4224 	subw	r2, r3, #1060	; 0x424
 8001b04:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
 8001b08:	4413      	add	r3, r2
 8001b0a:	460a      	mov	r2, r1
 8001b0c:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < totalReceivedLength; i++) {
 8001b0e:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
 8001b12:	3301      	adds	r3, #1
 8001b14:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
 8001b18:	f8b7 3a26 	ldrh.w	r3, [r7, #2598]	; 0xa26
 8001b1c:	f8d7 2a20 	ldr.w	r2, [r7, #2592]	; 0xa20
 8001b20:	429a      	cmp	r2, r3
 8001b22:	dbe3      	blt.n	8001aec <RequestJSON+0x148>
			}
			responseString[totalReceivedLength] = '\0'; // Agregar el carácter nulo de terminación
 8001b24:	f8b7 3a26 	ldrh.w	r3, [r7, #2598]	; 0xa26
 8001b28:	f607 2228 	addw	r2, r7, #2600	; 0xa28
 8001b2c:	f2a2 4224 	subw	r2, r2, #1060	; 0x424
 8001b30:	2100      	movs	r1, #0
 8001b32:	54d1      	strb	r1, [r2, r3]

			// Imprimir la cadena de respuesta
			printf("API Response: %s\r\n", responseString);
 8001b34:	f207 6304 	addw	r3, r7, #1540	; 0x604
 8001b38:	4619      	mov	r1, r3
 8001b3a:	480c      	ldr	r0, [pc, #48]	; (8001b6c <RequestJSON+0x1c8>)
 8001b3c:	f00a fe50 	bl	800c7e0 <iprintf>

	} else {
		// Ocurrió un error al abrir la conexión con el servidor
		// Manejar el error apropiadamente
	}
}
 8001b40:	bf00      	nop
 8001b42:	4618      	mov	r0, r3
 8001b44:	f607 272c 	addw	r7, r7, #2604	; 0xa2c
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd90      	pop	{r4, r7, pc}
 8001b4c:	0800dc78 	.word	0x0800dc78
 8001b50:	0800dc88 	.word	0x0800dc88
 8001b54:	0312a8c0 	.word	0x0312a8c0
 8001b58:	0800dc90 	.word	0x0800dc90
 8001b5c:	0800dc98 	.word	0x0800dc98
 8001b60:	0800dccc 	.word	0x0800dccc
 8001b64:	0800dd14 	.word	0x0800dd14
 8001b68:	0800dd34 	.word	0x0800dd34
 8001b6c:	0800dd40 	.word	0x0800dd40

08001b70 <EXTI1_IRQHandler>:
/**
 * @brief  This function handles external lines 1interrupt request.
 * @param  None
 * @retval None
 */
void EXTI1_IRQHandler(void) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001b74:	2002      	movs	r0, #2
 8001b76:	f000 fddf 	bl	8002738 <HAL_GPIO_EXTI_IRQHandler>
	portYIELD_FROM_ISR(pdFALSE);
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_GPIO_EXTI_Callback>:
/**
 * @brief  EXTI line detection callback.
 * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8001b88:	88fb      	ldrh	r3, [r7, #6]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d102      	bne.n	8001b94 <HAL_GPIO_EXTI_Callback+0x16>
	case (GPIO_PIN_1): {
		SPI_WIFI_ISR();
 8001b8e:	f007 f8d3 	bl	8008d38 <SPI_WIFI_ISR>
		break;
 8001b92:	e000      	b.n	8001b96 <HAL_GPIO_EXTI_Callback+0x18>
	}
	default: {
		break;
 8001b94:	bf00      	nop
	}
	}
	portYIELD_FROM_ISR(pdFALSE);
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <SPI3_IRQHandler>:
 * @brief  SPI3 line detection callback.
 * @param  None
 * @retval None
 */
extern SPI_HandleTypeDef hspi;
void SPI3_IRQHandler(void) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	HAL_SPI_IRQHandler(&hspi);
 8001ba4:	4802      	ldr	r0, [pc, #8]	; (8001bb0 <SPI3_IRQHandler+0x10>)
 8001ba6:	f003 fa87 	bl	80050b8 <HAL_SPI_IRQHandler>
	portYIELD_FROM_ISR(pdFALSE);
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	2000086c 	.word	0x2000086c

08001bb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bb8:	f7ff feb0 	bl	800191c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bbc:	480c      	ldr	r0, [pc, #48]	; (8001bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bbe:	490d      	ldr	r1, [pc, #52]	; (8001bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <LoopForever+0xe>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc4:	e002      	b.n	8001bcc <LoopCopyDataInit>

08001bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bca:	3304      	adds	r3, #4

08001bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd0:	d3f9      	bcc.n	8001bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bd4:	4c0a      	ldr	r4, [pc, #40]	; (8001c00 <LoopForever+0x16>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd8:	e001      	b.n	8001bde <LoopFillZerobss>

08001bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bdc:	3204      	adds	r2, #4

08001bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be0:	d3fb      	bcc.n	8001bda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001be2:	f00a fcbf 	bl	800c564 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001be6:	f7fe fe35 	bl	8000854 <main>

08001bea <LoopForever>:

LoopForever:
    b LoopForever
 8001bea:	e7fe      	b.n	8001bea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001bf8:	0800e610 	.word	0x0800e610
  ldr r2, =_sbss
 8001bfc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001c00:	20002bb8 	.word	0x20002bb8

08001c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c04:	e7fe      	b.n	8001c04 <ADC1_2_IRQHandler>

08001c06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c10:	2003      	movs	r0, #3
 8001c12:	f000 f902 	bl	8001e1a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c16:	200f      	movs	r0, #15
 8001c18:	f7ff fce2 	bl	80015e0 <HAL_InitTick>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	71fb      	strb	r3, [r7, #7]
 8001c26:	e001      	b.n	8001c2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c28:	f7ff f9fc 	bl	8001024 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_IncTick+0x20>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_IncTick+0x24>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <HAL_IncTick+0x24>)
 8001c4a:	6013      	str	r3, [r2, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000008 	.word	0x20000008
 8001c5c:	20000840 	.word	0x20000840

08001c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return uwTick;
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <HAL_GetTick+0x14>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000840 	.word	0x20000840

08001c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c80:	f7ff ffee 	bl	8001c60 <HAL_GetTick>
 8001c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c90:	d005      	beq.n	8001c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_Delay+0x44>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c9e:	bf00      	nop
 8001ca0:	f7ff ffde 	bl	8001c60 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d8f7      	bhi.n	8001ca0 <HAL_Delay+0x28>
  {
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000008 	.word	0x20000008

08001cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf2:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	60d3      	str	r3, [r2, #12]
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <__NVIC_GetPriorityGrouping+0x18>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	f003 0307 	and.w	r3, r3, #7
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	db0b      	blt.n	8001d4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	f003 021f 	and.w	r2, r3, #31
 8001d3c:	4907      	ldr	r1, [pc, #28]	; (8001d5c <__NVIC_EnableIRQ+0x38>)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	095b      	lsrs	r3, r3, #5
 8001d44:	2001      	movs	r0, #1
 8001d46:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000e100 	.word	0xe000e100

08001d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	6039      	str	r1, [r7, #0]
 8001d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	db0a      	blt.n	8001d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	490c      	ldr	r1, [pc, #48]	; (8001dac <__NVIC_SetPriority+0x4c>)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	0112      	lsls	r2, r2, #4
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	440b      	add	r3, r1
 8001d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d88:	e00a      	b.n	8001da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4908      	ldr	r1, [pc, #32]	; (8001db0 <__NVIC_SetPriority+0x50>)
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	3b04      	subs	r3, #4
 8001d98:	0112      	lsls	r2, r2, #4
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	761a      	strb	r2, [r3, #24]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000e100 	.word	0xe000e100
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f1c3 0307 	rsb	r3, r3, #7
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	bf28      	it	cs
 8001dd2:	2304      	movcs	r3, #4
 8001dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d902      	bls.n	8001de4 <NVIC_EncodePriority+0x30>
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3b03      	subs	r3, #3
 8001de2:	e000      	b.n	8001de6 <NVIC_EncodePriority+0x32>
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43da      	mvns	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	401a      	ands	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	43d9      	mvns	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	4313      	orrs	r3, r2
         );
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3724      	adds	r7, #36	; 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ff4c 	bl	8001cc0 <__NVIC_SetPriorityGrouping>
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e42:	f7ff ff61 	bl	8001d08 <__NVIC_GetPriorityGrouping>
 8001e46:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	68b9      	ldr	r1, [r7, #8]
 8001e4c:	6978      	ldr	r0, [r7, #20]
 8001e4e:	f7ff ffb1 	bl	8001db4 <NVIC_EncodePriority>
 8001e52:	4602      	mov	r2, r0
 8001e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e58:	4611      	mov	r1, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff ff80 	bl	8001d60 <__NVIC_SetPriority>
}
 8001e60:	bf00      	nop
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff ff54 	bl	8001d24 <__NVIC_EnableIRQ>
}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e0ac      	b.n	8001ff0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f8b2 	bl	8002004 <DFSDM_GetChannelFromInstance>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	4a55      	ldr	r2, [pc, #340]	; (8001ff8 <HAL_DFSDM_ChannelInit+0x174>)
 8001ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e09f      	b.n	8001ff0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff f8df 	bl	8001074 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001eb6:	4b51      	ldr	r3, [pc, #324]	; (8001ffc <HAL_DFSDM_ChannelInit+0x178>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	4a4f      	ldr	r2, [pc, #316]	; (8001ffc <HAL_DFSDM_ChannelInit+0x178>)
 8001ebe:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001ec0:	4b4e      	ldr	r3, [pc, #312]	; (8001ffc <HAL_DFSDM_ChannelInit+0x178>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d125      	bne.n	8001f14 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001ec8:	4b4d      	ldr	r3, [pc, #308]	; (8002000 <HAL_DFSDM_ChannelInit+0x17c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a4c      	ldr	r2, [pc, #304]	; (8002000 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ece:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001ed2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001ed4:	4b4a      	ldr	r3, [pc, #296]	; (8002000 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	4948      	ldr	r1, [pc, #288]	; (8002000 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001ee2:	4b47      	ldr	r3, [pc, #284]	; (8002000 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a46      	ldr	r2, [pc, #280]	; (8002000 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ee8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001eec:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	791b      	ldrb	r3, [r3, #4]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d108      	bne.n	8001f08 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001ef6:	4b42      	ldr	r3, [pc, #264]	; (8002000 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	041b      	lsls	r3, r3, #16
 8001f02:	493f      	ldr	r1, [pc, #252]	; (8002000 <HAL_DFSDM_ChannelInit+0x17c>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001f08:	4b3d      	ldr	r3, [pc, #244]	; (8002000 <HAL_DFSDM_ChannelInit+0x17c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a3c      	ldr	r2, [pc, #240]	; (8002000 <HAL_DFSDM_ChannelInit+0x17c>)
 8001f0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f12:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001f22:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6819      	ldr	r1, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001f32:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001f38:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 020f 	bic.w	r2, r2, #15
 8001f50:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6819      	ldr	r1, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001f78:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6899      	ldr	r1, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f002 0207 	and.w	r2, r2, #7
 8001fa4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fd0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 f810 	bl	8002004 <DFSDM_GetChannelFromInstance>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	4904      	ldr	r1, [pc, #16]	; (8001ff8 <HAL_DFSDM_ChannelInit+0x174>)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000848 	.word	0x20000848
 8001ffc:	20000844 	.word	0x20000844
 8002000:	40016000 	.word	0x40016000

08002004 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a1c      	ldr	r2, [pc, #112]	; (8002080 <DFSDM_GetChannelFromInstance+0x7c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d102      	bne.n	800201a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	e02b      	b.n	8002072 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a19      	ldr	r2, [pc, #100]	; (8002084 <DFSDM_GetChannelFromInstance+0x80>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d102      	bne.n	8002028 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002022:	2301      	movs	r3, #1
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	e024      	b.n	8002072 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a17      	ldr	r2, [pc, #92]	; (8002088 <DFSDM_GetChannelFromInstance+0x84>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d102      	bne.n	8002036 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002030:	2302      	movs	r3, #2
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	e01d      	b.n	8002072 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a14      	ldr	r2, [pc, #80]	; (800208c <DFSDM_GetChannelFromInstance+0x88>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d102      	bne.n	8002044 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800203e:	2304      	movs	r3, #4
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	e016      	b.n	8002072 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a12      	ldr	r2, [pc, #72]	; (8002090 <DFSDM_GetChannelFromInstance+0x8c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d102      	bne.n	8002052 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800204c:	2305      	movs	r3, #5
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	e00f      	b.n	8002072 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a0f      	ldr	r2, [pc, #60]	; (8002094 <DFSDM_GetChannelFromInstance+0x90>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d102      	bne.n	8002060 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800205a:	2306      	movs	r3, #6
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	e008      	b.n	8002072 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a0d      	ldr	r2, [pc, #52]	; (8002098 <DFSDM_GetChannelFromInstance+0x94>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d102      	bne.n	800206e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002068:	2307      	movs	r3, #7
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	e001      	b.n	8002072 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800206e:	2303      	movs	r3, #3
 8002070:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002072:	68fb      	ldr	r3, [r7, #12]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	40016000 	.word	0x40016000
 8002084:	40016020 	.word	0x40016020
 8002088:	40016040 	.word	0x40016040
 800208c:	40016080 	.word	0x40016080
 8002090:	400160a0 	.word	0x400160a0
 8002094:	400160c0 	.word	0x400160c0
 8002098:	400160e0 	.word	0x400160e0

0800209c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d008      	beq.n	80020c6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2204      	movs	r2, #4
 80020b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e022      	b.n	800210c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 020e 	bic.w	r2, r2, #14
 80020d4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0201 	bic.w	r2, r2, #1
 80020e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	f003 021c 	and.w	r2, r3, #28
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	2101      	movs	r1, #1
 80020f4:	fa01 f202 	lsl.w	r2, r1, r2
 80020f8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800210a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800210c:	4618      	mov	r0, r3
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d005      	beq.n	800213c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2204      	movs	r2, #4
 8002134:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
 800213a:	e029      	b.n	8002190 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 020e 	bic.w	r2, r2, #14
 800214a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0201 	bic.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002160:	f003 021c 	and.w	r2, r3, #28
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	2101      	movs	r1, #1
 800216a:	fa01 f202 	lsl.w	r2, r1, r2
 800216e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	4798      	blx	r3
    }
  }
  return status;
 8002190:	7bfb      	ldrb	r3, [r7, #15]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800219c:	b480      	push	{r7}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021aa:	e17f      	b.n	80024ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	2101      	movs	r1, #1
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	fa01 f303 	lsl.w	r3, r1, r3
 80021b8:	4013      	ands	r3, r2
 80021ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 8171 	beq.w	80024a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d005      	beq.n	80021dc <HAL_GPIO_Init+0x40>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d130      	bne.n	800223e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	2203      	movs	r2, #3
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002212:	2201      	movs	r2, #1
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	4013      	ands	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	091b      	lsrs	r3, r3, #4
 8002228:	f003 0201 	and.w	r2, r3, #1
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	2b03      	cmp	r3, #3
 8002248:	d118      	bne.n	800227c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002250:	2201      	movs	r2, #1
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4013      	ands	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	08db      	lsrs	r3, r3, #3
 8002266:	f003 0201 	and.w	r2, r3, #1
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	2b03      	cmp	r3, #3
 8002286:	d017      	beq.n	80022b8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	2203      	movs	r2, #3
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4013      	ands	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d123      	bne.n	800230c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	08da      	lsrs	r2, r3, #3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3208      	adds	r2, #8
 80022cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	220f      	movs	r2, #15
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4013      	ands	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	08da      	lsrs	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3208      	adds	r2, #8
 8002306:	6939      	ldr	r1, [r7, #16]
 8002308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	2203      	movs	r2, #3
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4013      	ands	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 0203 	and.w	r2, r3, #3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 80ac 	beq.w	80024a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800234e:	4b5f      	ldr	r3, [pc, #380]	; (80024cc <HAL_GPIO_Init+0x330>)
 8002350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002352:	4a5e      	ldr	r2, [pc, #376]	; (80024cc <HAL_GPIO_Init+0x330>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6613      	str	r3, [r2, #96]	; 0x60
 800235a:	4b5c      	ldr	r3, [pc, #368]	; (80024cc <HAL_GPIO_Init+0x330>)
 800235c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	60bb      	str	r3, [r7, #8]
 8002364:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002366:	4a5a      	ldr	r2, [pc, #360]	; (80024d0 <HAL_GPIO_Init+0x334>)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	089b      	lsrs	r3, r3, #2
 800236c:	3302      	adds	r3, #2
 800236e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002372:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	220f      	movs	r2, #15
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4013      	ands	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002390:	d025      	beq.n	80023de <HAL_GPIO_Init+0x242>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a4f      	ldr	r2, [pc, #316]	; (80024d4 <HAL_GPIO_Init+0x338>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d01f      	beq.n	80023da <HAL_GPIO_Init+0x23e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a4e      	ldr	r2, [pc, #312]	; (80024d8 <HAL_GPIO_Init+0x33c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d019      	beq.n	80023d6 <HAL_GPIO_Init+0x23a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a4d      	ldr	r2, [pc, #308]	; (80024dc <HAL_GPIO_Init+0x340>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d013      	beq.n	80023d2 <HAL_GPIO_Init+0x236>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a4c      	ldr	r2, [pc, #304]	; (80024e0 <HAL_GPIO_Init+0x344>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d00d      	beq.n	80023ce <HAL_GPIO_Init+0x232>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a4b      	ldr	r2, [pc, #300]	; (80024e4 <HAL_GPIO_Init+0x348>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d007      	beq.n	80023ca <HAL_GPIO_Init+0x22e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a4a      	ldr	r2, [pc, #296]	; (80024e8 <HAL_GPIO_Init+0x34c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d101      	bne.n	80023c6 <HAL_GPIO_Init+0x22a>
 80023c2:	2306      	movs	r3, #6
 80023c4:	e00c      	b.n	80023e0 <HAL_GPIO_Init+0x244>
 80023c6:	2307      	movs	r3, #7
 80023c8:	e00a      	b.n	80023e0 <HAL_GPIO_Init+0x244>
 80023ca:	2305      	movs	r3, #5
 80023cc:	e008      	b.n	80023e0 <HAL_GPIO_Init+0x244>
 80023ce:	2304      	movs	r3, #4
 80023d0:	e006      	b.n	80023e0 <HAL_GPIO_Init+0x244>
 80023d2:	2303      	movs	r3, #3
 80023d4:	e004      	b.n	80023e0 <HAL_GPIO_Init+0x244>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e002      	b.n	80023e0 <HAL_GPIO_Init+0x244>
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <HAL_GPIO_Init+0x244>
 80023de:	2300      	movs	r3, #0
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	f002 0203 	and.w	r2, r2, #3
 80023e6:	0092      	lsls	r2, r2, #2
 80023e8:	4093      	lsls	r3, r2
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023f0:	4937      	ldr	r1, [pc, #220]	; (80024d0 <HAL_GPIO_Init+0x334>)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	089b      	lsrs	r3, r3, #2
 80023f6:	3302      	adds	r3, #2
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023fe:	4b3b      	ldr	r3, [pc, #236]	; (80024ec <HAL_GPIO_Init+0x350>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	43db      	mvns	r3, r3
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4013      	ands	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4313      	orrs	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002422:	4a32      	ldr	r2, [pc, #200]	; (80024ec <HAL_GPIO_Init+0x350>)
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002428:	4b30      	ldr	r3, [pc, #192]	; (80024ec <HAL_GPIO_Init+0x350>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	43db      	mvns	r3, r3
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4013      	ands	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800244c:	4a27      	ldr	r2, [pc, #156]	; (80024ec <HAL_GPIO_Init+0x350>)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002452:	4b26      	ldr	r3, [pc, #152]	; (80024ec <HAL_GPIO_Init+0x350>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	43db      	mvns	r3, r3
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002476:	4a1d      	ldr	r2, [pc, #116]	; (80024ec <HAL_GPIO_Init+0x350>)
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800247c:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <HAL_GPIO_Init+0x350>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	43db      	mvns	r3, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024a0:	4a12      	ldr	r2, [pc, #72]	; (80024ec <HAL_GPIO_Init+0x350>)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	3301      	adds	r3, #1
 80024aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	fa22 f303 	lsr.w	r3, r2, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f47f ae78 	bne.w	80021ac <HAL_GPIO_Init+0x10>
  }
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	371c      	adds	r7, #28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40010000 	.word	0x40010000
 80024d4:	48000400 	.word	0x48000400
 80024d8:	48000800 	.word	0x48000800
 80024dc:	48000c00 	.word	0x48000c00
 80024e0:	48001000 	.word	0x48001000
 80024e4:	48001400 	.word	0x48001400
 80024e8:	48001800 	.word	0x48001800
 80024ec:	40010400 	.word	0x40010400

080024f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80024fe:	e0cd      	b.n	800269c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002500:	2201      	movs	r2, #1
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 80c0 	beq.w	8002696 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002516:	4a68      	ldr	r2, [pc, #416]	; (80026b8 <HAL_GPIO_DeInit+0x1c8>)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	089b      	lsrs	r3, r3, #2
 800251c:	3302      	adds	r3, #2
 800251e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002522:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	220f      	movs	r2, #15
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4013      	ands	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800253e:	d025      	beq.n	800258c <HAL_GPIO_DeInit+0x9c>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a5e      	ldr	r2, [pc, #376]	; (80026bc <HAL_GPIO_DeInit+0x1cc>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d01f      	beq.n	8002588 <HAL_GPIO_DeInit+0x98>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a5d      	ldr	r2, [pc, #372]	; (80026c0 <HAL_GPIO_DeInit+0x1d0>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d019      	beq.n	8002584 <HAL_GPIO_DeInit+0x94>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a5c      	ldr	r2, [pc, #368]	; (80026c4 <HAL_GPIO_DeInit+0x1d4>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d013      	beq.n	8002580 <HAL_GPIO_DeInit+0x90>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a5b      	ldr	r2, [pc, #364]	; (80026c8 <HAL_GPIO_DeInit+0x1d8>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d00d      	beq.n	800257c <HAL_GPIO_DeInit+0x8c>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a5a      	ldr	r2, [pc, #360]	; (80026cc <HAL_GPIO_DeInit+0x1dc>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d007      	beq.n	8002578 <HAL_GPIO_DeInit+0x88>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a59      	ldr	r2, [pc, #356]	; (80026d0 <HAL_GPIO_DeInit+0x1e0>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d101      	bne.n	8002574 <HAL_GPIO_DeInit+0x84>
 8002570:	2306      	movs	r3, #6
 8002572:	e00c      	b.n	800258e <HAL_GPIO_DeInit+0x9e>
 8002574:	2307      	movs	r3, #7
 8002576:	e00a      	b.n	800258e <HAL_GPIO_DeInit+0x9e>
 8002578:	2305      	movs	r3, #5
 800257a:	e008      	b.n	800258e <HAL_GPIO_DeInit+0x9e>
 800257c:	2304      	movs	r3, #4
 800257e:	e006      	b.n	800258e <HAL_GPIO_DeInit+0x9e>
 8002580:	2303      	movs	r3, #3
 8002582:	e004      	b.n	800258e <HAL_GPIO_DeInit+0x9e>
 8002584:	2302      	movs	r3, #2
 8002586:	e002      	b.n	800258e <HAL_GPIO_DeInit+0x9e>
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <HAL_GPIO_DeInit+0x9e>
 800258c:	2300      	movs	r3, #0
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	f002 0203 	and.w	r2, r2, #3
 8002594:	0092      	lsls	r2, r2, #2
 8002596:	4093      	lsls	r3, r2
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	429a      	cmp	r2, r3
 800259c:	d132      	bne.n	8002604 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800259e:	4b4d      	ldr	r3, [pc, #308]	; (80026d4 <HAL_GPIO_DeInit+0x1e4>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	43db      	mvns	r3, r3
 80025a6:	494b      	ldr	r1, [pc, #300]	; (80026d4 <HAL_GPIO_DeInit+0x1e4>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80025ac:	4b49      	ldr	r3, [pc, #292]	; (80026d4 <HAL_GPIO_DeInit+0x1e4>)
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	4947      	ldr	r1, [pc, #284]	; (80026d4 <HAL_GPIO_DeInit+0x1e4>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80025ba:	4b46      	ldr	r3, [pc, #280]	; (80026d4 <HAL_GPIO_DeInit+0x1e4>)
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	4944      	ldr	r1, [pc, #272]	; (80026d4 <HAL_GPIO_DeInit+0x1e4>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80025c8:	4b42      	ldr	r3, [pc, #264]	; (80026d4 <HAL_GPIO_DeInit+0x1e4>)
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	4940      	ldr	r1, [pc, #256]	; (80026d4 <HAL_GPIO_DeInit+0x1e4>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f003 0303 	and.w	r3, r3, #3
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	220f      	movs	r2, #15
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80025e6:	4a34      	ldr	r2, [pc, #208]	; (80026b8 <HAL_GPIO_DeInit+0x1c8>)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	089b      	lsrs	r3, r3, #2
 80025ec:	3302      	adds	r3, #2
 80025ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	43da      	mvns	r2, r3
 80025f6:	4830      	ldr	r0, [pc, #192]	; (80026b8 <HAL_GPIO_DeInit+0x1c8>)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	089b      	lsrs	r3, r3, #2
 80025fc:	400a      	ands	r2, r1
 80025fe:	3302      	adds	r3, #2
 8002600:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	2103      	movs	r1, #3
 800260e:	fa01 f303 	lsl.w	r3, r1, r3
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	08da      	lsrs	r2, r3, #3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3208      	adds	r2, #8
 8002620:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	220f      	movs	r2, #15
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	08d2      	lsrs	r2, r2, #3
 8002638:	4019      	ands	r1, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3208      	adds	r2, #8
 800263e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	2103      	movs	r1, #3
 800264c:	fa01 f303 	lsl.w	r3, r1, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	401a      	ands	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	2101      	movs	r1, #1
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	fa01 f303 	lsl.w	r3, r1, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	401a      	ands	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	2103      	movs	r1, #3
 8002676:	fa01 f303 	lsl.w	r3, r1, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	401a      	ands	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002686:	2101      	movs	r1, #1
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	fa01 f303 	lsl.w	r3, r1, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	401a      	ands	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	3301      	adds	r3, #1
 800269a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	fa22 f303 	lsr.w	r3, r2, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f47f af2b 	bne.w	8002500 <HAL_GPIO_DeInit+0x10>
  }
}
 80026aa:	bf00      	nop
 80026ac:	bf00      	nop
 80026ae:	371c      	adds	r7, #28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	40010000 	.word	0x40010000
 80026bc:	48000400 	.word	0x48000400
 80026c0:	48000800 	.word	0x48000800
 80026c4:	48000c00 	.word	0x48000c00
 80026c8:	48001000 	.word	0x48001000
 80026cc:	48001400 	.word	0x48001400
 80026d0:	48001800 	.word	0x48001800
 80026d4:	40010400 	.word	0x40010400

080026d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	887b      	ldrh	r3, [r7, #2]
 80026ea:	4013      	ands	r3, r2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d002      	beq.n	80026f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026f0:	2301      	movs	r3, #1
 80026f2:	73fb      	strb	r3, [r7, #15]
 80026f4:	e001      	b.n	80026fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026f6:	2300      	movs	r3, #0
 80026f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	807b      	strh	r3, [r7, #2]
 8002714:	4613      	mov	r3, r2
 8002716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002718:	787b      	ldrb	r3, [r7, #1]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800271e:	887a      	ldrh	r2, [r7, #2]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002724:	e002      	b.n	800272c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002726:	887a      	ldrh	r2, [r7, #2]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002742:	4b08      	ldr	r3, [pc, #32]	; (8002764 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	88fb      	ldrh	r3, [r7, #6]
 8002748:	4013      	ands	r3, r2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d006      	beq.n	800275c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800274e:	4a05      	ldr	r2, [pc, #20]	; (8002764 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002750:	88fb      	ldrh	r3, [r7, #6]
 8002752:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002754:	88fb      	ldrh	r3, [r7, #6]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fa11 	bl	8001b7e <HAL_GPIO_EXTI_Callback>
  }
}
 800275c:	bf00      	nop
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40010400 	.word	0x40010400

08002768 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e081      	b.n	800287e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d106      	bne.n	8002794 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7fe fcd4 	bl	800113c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2224      	movs	r2, #36	; 0x24
 8002798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0201 	bic.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d107      	bne.n	80027e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	e006      	b.n	80027f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80027ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d104      	bne.n	8002802 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002800:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002814:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002824:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69d9      	ldr	r1, [r3, #28]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a1a      	ldr	r2, [r3, #32]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0201 	orr.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b20      	cmp	r3, #32
 800289a:	d138      	bne.n	800290e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e032      	b.n	8002910 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2224      	movs	r2, #36	; 0x24
 80028b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0201 	bic.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028d8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6819      	ldr	r1, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0201 	orr.w	r2, r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	e000      	b.n	8002910 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800290e:	2302      	movs	r3, #2
  }
}
 8002910:	4618      	mov	r0, r3
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b20      	cmp	r3, #32
 8002930:	d139      	bne.n	80029a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800293c:	2302      	movs	r3, #2
 800293e:	e033      	b.n	80029a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2224      	movs	r2, #36	; 0x24
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0201 	bic.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800296e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	021b      	lsls	r3, r3, #8
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f042 0201 	orr.w	r2, r2, #1
 8002990:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029a2:	2300      	movs	r3, #0
 80029a4:	e000      	b.n	80029a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029a6:	2302      	movs	r3, #2
  }
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029b6:	b08f      	sub	sp, #60	; 0x3c
 80029b8:	af0a      	add	r7, sp, #40	; 0x28
 80029ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e116      	b.n	8002bf4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d106      	bne.n	80029e6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7fe fd61 	bl	80014a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2203      	movs	r2, #3
 80029ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d102      	bne.n	8002a00 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f004 fd17 	bl	8007438 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	687e      	ldr	r6, [r7, #4]
 8002a12:	466d      	mov	r5, sp
 8002a14:	f106 0410 	add.w	r4, r6, #16
 8002a18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a20:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a24:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a28:	1d33      	adds	r3, r6, #4
 8002a2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a2c:	6838      	ldr	r0, [r7, #0]
 8002a2e:	f004 fcd7 	bl	80073e0 <USB_CoreInit>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0d7      	b.n	8002bf4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2100      	movs	r1, #0
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f004 fd05 	bl	800745a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a50:	2300      	movs	r3, #0
 8002a52:	73fb      	strb	r3, [r7, #15]
 8002a54:	e04a      	b.n	8002aec <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a56:	7bfa      	ldrb	r2, [r7, #15]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	4413      	add	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	333d      	adds	r3, #61	; 0x3d
 8002a66:	2201      	movs	r2, #1
 8002a68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	333c      	adds	r3, #60	; 0x3c
 8002a7a:	7bfa      	ldrb	r2, [r7, #15]
 8002a7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a7e:	7bfa      	ldrb	r2, [r7, #15]
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	b298      	uxth	r0, r3
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	4613      	mov	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	440b      	add	r3, r1
 8002a90:	3344      	adds	r3, #68	; 0x44
 8002a92:	4602      	mov	r2, r0
 8002a94:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a96:	7bfa      	ldrb	r2, [r7, #15]
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	3340      	adds	r3, #64	; 0x40
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002aaa:	7bfa      	ldrb	r2, [r7, #15]
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	3348      	adds	r3, #72	; 0x48
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002abe:	7bfa      	ldrb	r2, [r7, #15]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	334c      	adds	r3, #76	; 0x4c
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ad2:	7bfa      	ldrb	r2, [r7, #15]
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	3354      	adds	r3, #84	; 0x54
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	73fb      	strb	r3, [r7, #15]
 8002aec:	7bfa      	ldrb	r2, [r7, #15]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d3af      	bcc.n	8002a56 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af6:	2300      	movs	r3, #0
 8002af8:	73fb      	strb	r3, [r7, #15]
 8002afa:	e044      	b.n	8002b86 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002afc:	7bfa      	ldrb	r2, [r7, #15]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002b0e:	2200      	movs	r2, #0
 8002b10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b12:	7bfa      	ldrb	r2, [r7, #15]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b28:	7bfa      	ldrb	r2, [r7, #15]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4413      	add	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b3e:	7bfa      	ldrb	r2, [r7, #15]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b54:	7bfa      	ldrb	r2, [r7, #15]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b6a:	7bfa      	ldrb	r2, [r7, #15]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4413      	add	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
 8002b82:	3301      	adds	r3, #1
 8002b84:	73fb      	strb	r3, [r7, #15]
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d3b5      	bcc.n	8002afc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	603b      	str	r3, [r7, #0]
 8002b96:	687e      	ldr	r6, [r7, #4]
 8002b98:	466d      	mov	r5, sp
 8002b9a:	f106 0410 	add.w	r4, r6, #16
 8002b9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ba0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ba2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ba4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ba6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002baa:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bae:	1d33      	adds	r3, r6, #4
 8002bb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bb2:	6838      	ldr	r0, [r7, #0]
 8002bb4:	f004 fc9e 	bl	80074f4 <USB_DevInit>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d005      	beq.n	8002bca <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e014      	b.n	8002bf4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d102      	bne.n	8002be8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f80a 	bl	8002bfc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f004 fe4a 	bl	8007886 <USB_DevDisconnect>

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bfc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	f043 0303 	orr.w	r3, r3, #3
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c48:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a04      	ldr	r2, [pc, #16]	; (8002c60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c52:	6013      	str	r3, [r2, #0]
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40007000 	.word	0x40007000

08002c64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c68:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <HAL_PWREx_GetVoltageRange+0x18>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40007000 	.word	0x40007000

08002c80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c8e:	d130      	bne.n	8002cf2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c90:	4b23      	ldr	r3, [pc, #140]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c9c:	d038      	beq.n	8002d10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c9e:	4b20      	ldr	r3, [pc, #128]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ca6:	4a1e      	ldr	r2, [pc, #120]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ca8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cae:	4b1d      	ldr	r3, [pc, #116]	; (8002d24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2232      	movs	r2, #50	; 0x32
 8002cb4:	fb02 f303 	mul.w	r3, r2, r3
 8002cb8:	4a1b      	ldr	r2, [pc, #108]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	0c9b      	lsrs	r3, r3, #18
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cc4:	e002      	b.n	8002ccc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ccc:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd8:	d102      	bne.n	8002ce0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f2      	bne.n	8002cc6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ce0:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cec:	d110      	bne.n	8002d10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e00f      	b.n	8002d12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cfe:	d007      	beq.n	8002d10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d00:	4b07      	ldr	r3, [pc, #28]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d08:	4a05      	ldr	r2, [pc, #20]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40007000 	.word	0x40007000
 8002d24:	20000000 	.word	0x20000000
 8002d28:	431bde83 	.word	0x431bde83

08002d2c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	4a04      	ldr	r2, [pc, #16]	; (8002d48 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d3a:	6053      	str	r3, [r2, #4]
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40007000 	.word	0x40007000

08002d4c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af02      	add	r7, sp, #8
 8002d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002d54:	f7fe ff84 	bl	8001c60 <HAL_GetTick>
 8002d58:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e063      	b.n	8002e2c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10b      	bne.n	8002d88 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7fe fa3d 	bl	80011f8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002d7e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f858 	bl	8002e38 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	021a      	lsls	r2, r3, #8
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	2120      	movs	r1, #32
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f850 	bl	8002e54 <QSPI_WaitFlagStateUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002db8:	7afb      	ldrb	r3, [r7, #11]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d131      	bne.n	8002e22 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002dc8:	f023 0310 	bic.w	r3, r3, #16
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6852      	ldr	r2, [r2, #4]
 8002dd0:	0611      	lsls	r1, r2, #24
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	68d2      	ldr	r2, [r2, #12]
 8002dd6:	4311      	orrs	r1, r2
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <HAL_QSPI_Init+0xe8>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6912      	ldr	r2, [r2, #16]
 8002dee:	0411      	lsls	r1, r2, #16
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6952      	ldr	r2, [r2, #20]
 8002df4:	4311      	orrs	r1, r2
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6992      	ldr	r2, [r2, #24]
 8002dfa:	4311      	orrs	r1, r2
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6812      	ldr	r2, [r2, #0]
 8002e00:	430b      	orrs	r3, r1
 8002e02:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0201 	orr.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002e2a:	7afb      	ldrb	r3, [r7, #11]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	ffe0f8fe 	.word	0xffe0f8fe

08002e38 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	603b      	str	r3, [r7, #0]
 8002e60:	4613      	mov	r3, r2
 8002e62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002e64:	e01a      	b.n	8002e9c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6c:	d016      	beq.n	8002e9c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e6e:	f7fe fef7 	bl	8001c60 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d302      	bcc.n	8002e84 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10b      	bne.n	8002e9c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2204      	movs	r2, #4
 8002e88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e90:	f043 0201 	orr.w	r2, r3, #1
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e00e      	b.n	8002eba <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	bf14      	ite	ne
 8002eaa:	2301      	movne	r3, #1
 8002eac:	2300      	moveq	r3, #0
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d1d6      	bne.n	8002e66 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e3ca      	b.n	800366c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ed6:	4b97      	ldr	r3, [pc, #604]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 030c 	and.w	r3, r3, #12
 8002ede:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ee0:	4b94      	ldr	r3, [pc, #592]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 80e4 	beq.w	80030c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d007      	beq.n	8002f0e <HAL_RCC_OscConfig+0x4a>
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	2b0c      	cmp	r3, #12
 8002f02:	f040 808b 	bne.w	800301c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	f040 8087 	bne.w	800301c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f0e:	4b89      	ldr	r3, [pc, #548]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d005      	beq.n	8002f26 <HAL_RCC_OscConfig+0x62>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e3a2      	b.n	800366c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1a      	ldr	r2, [r3, #32]
 8002f2a:	4b82      	ldr	r3, [pc, #520]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d004      	beq.n	8002f40 <HAL_RCC_OscConfig+0x7c>
 8002f36:	4b7f      	ldr	r3, [pc, #508]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f3e:	e005      	b.n	8002f4c <HAL_RCC_OscConfig+0x88>
 8002f40:	4b7c      	ldr	r3, [pc, #496]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8002f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f46:	091b      	lsrs	r3, r3, #4
 8002f48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d223      	bcs.n	8002f98 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 fd87 	bl	8003a68 <RCC_SetFlashLatencyFromMSIRange>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e383      	b.n	800366c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f64:	4b73      	ldr	r3, [pc, #460]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a72      	ldr	r2, [pc, #456]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8002f6a:	f043 0308 	orr.w	r3, r3, #8
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	4b70      	ldr	r3, [pc, #448]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	496d      	ldr	r1, [pc, #436]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f82:	4b6c      	ldr	r3, [pc, #432]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	021b      	lsls	r3, r3, #8
 8002f90:	4968      	ldr	r1, [pc, #416]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	604b      	str	r3, [r1, #4]
 8002f96:	e025      	b.n	8002fe4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f98:	4b66      	ldr	r3, [pc, #408]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a65      	ldr	r2, [pc, #404]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8002f9e:	f043 0308 	orr.w	r3, r3, #8
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	4b63      	ldr	r3, [pc, #396]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	4960      	ldr	r1, [pc, #384]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fb6:	4b5f      	ldr	r3, [pc, #380]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	495b      	ldr	r1, [pc, #364]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d109      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fd47 	bl	8003a68 <RCC_SetFlashLatencyFromMSIRange>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e343      	b.n	800366c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fe4:	f000 fc4a 	bl	800387c <HAL_RCC_GetSysClockFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b52      	ldr	r3, [pc, #328]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	091b      	lsrs	r3, r3, #4
 8002ff0:	f003 030f 	and.w	r3, r3, #15
 8002ff4:	4950      	ldr	r1, [pc, #320]	; (8003138 <HAL_RCC_OscConfig+0x274>)
 8002ff6:	5ccb      	ldrb	r3, [r1, r3]
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8003000:	4a4e      	ldr	r2, [pc, #312]	; (800313c <HAL_RCC_OscConfig+0x278>)
 8003002:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003004:	4b4e      	ldr	r3, [pc, #312]	; (8003140 <HAL_RCC_OscConfig+0x27c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7fe fae9 	bl	80015e0 <HAL_InitTick>
 800300e:	4603      	mov	r3, r0
 8003010:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d052      	beq.n	80030be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	e327      	b.n	800366c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d032      	beq.n	800308a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003024:	4b43      	ldr	r3, [pc, #268]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a42      	ldr	r2, [pc, #264]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003030:	f7fe fe16 	bl	8001c60 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003038:	f7fe fe12 	bl	8001c60 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e310      	b.n	800366c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800304a:	4b3a      	ldr	r3, [pc, #232]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003056:	4b37      	ldr	r3, [pc, #220]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a36      	ldr	r2, [pc, #216]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 800305c:	f043 0308 	orr.w	r3, r3, #8
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	4b34      	ldr	r3, [pc, #208]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	4931      	ldr	r1, [pc, #196]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8003070:	4313      	orrs	r3, r2
 8003072:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003074:	4b2f      	ldr	r3, [pc, #188]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	021b      	lsls	r3, r3, #8
 8003082:	492c      	ldr	r1, [pc, #176]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8003084:	4313      	orrs	r3, r2
 8003086:	604b      	str	r3, [r1, #4]
 8003088:	e01a      	b.n	80030c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800308a:	4b2a      	ldr	r3, [pc, #168]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a29      	ldr	r2, [pc, #164]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8003090:	f023 0301 	bic.w	r3, r3, #1
 8003094:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003096:	f7fe fde3 	bl	8001c60 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800309e:	f7fe fddf 	bl	8001c60 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e2dd      	b.n	800366c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030b0:	4b20      	ldr	r3, [pc, #128]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1f0      	bne.n	800309e <HAL_RCC_OscConfig+0x1da>
 80030bc:	e000      	b.n	80030c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d074      	beq.n	80031b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d005      	beq.n	80030de <HAL_RCC_OscConfig+0x21a>
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	2b0c      	cmp	r3, #12
 80030d6:	d10e      	bne.n	80030f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d10b      	bne.n	80030f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030de:	4b15      	ldr	r3, [pc, #84]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d064      	beq.n	80031b4 <HAL_RCC_OscConfig+0x2f0>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d160      	bne.n	80031b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e2ba      	b.n	800366c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030fe:	d106      	bne.n	800310e <HAL_RCC_OscConfig+0x24a>
 8003100:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a0b      	ldr	r2, [pc, #44]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8003106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	e026      	b.n	800315c <HAL_RCC_OscConfig+0x298>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003116:	d115      	bne.n	8003144 <HAL_RCC_OscConfig+0x280>
 8003118:	4b06      	ldr	r3, [pc, #24]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a05      	ldr	r2, [pc, #20]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 800311e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003122:	6013      	str	r3, [r2, #0]
 8003124:	4b03      	ldr	r3, [pc, #12]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a02      	ldr	r2, [pc, #8]	; (8003134 <HAL_RCC_OscConfig+0x270>)
 800312a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800312e:	6013      	str	r3, [r2, #0]
 8003130:	e014      	b.n	800315c <HAL_RCC_OscConfig+0x298>
 8003132:	bf00      	nop
 8003134:	40021000 	.word	0x40021000
 8003138:	0800e470 	.word	0x0800e470
 800313c:	20000000 	.word	0x20000000
 8003140:	20000004 	.word	0x20000004
 8003144:	4ba0      	ldr	r3, [pc, #640]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a9f      	ldr	r2, [pc, #636]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 800314a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	4b9d      	ldr	r3, [pc, #628]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a9c      	ldr	r2, [pc, #624]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 8003156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800315a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d013      	beq.n	800318c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fe fd7c 	bl	8001c60 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800316c:	f7fe fd78 	bl	8001c60 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b64      	cmp	r3, #100	; 0x64
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e276      	b.n	800366c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800317e:	4b92      	ldr	r3, [pc, #584]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0f0      	beq.n	800316c <HAL_RCC_OscConfig+0x2a8>
 800318a:	e014      	b.n	80031b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318c:	f7fe fd68 	bl	8001c60 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003194:	f7fe fd64 	bl	8001c60 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b64      	cmp	r3, #100	; 0x64
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e262      	b.n	800366c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031a6:	4b88      	ldr	r3, [pc, #544]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x2d0>
 80031b2:	e000      	b.n	80031b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d060      	beq.n	8003284 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d005      	beq.n	80031d4 <HAL_RCC_OscConfig+0x310>
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	2b0c      	cmp	r3, #12
 80031cc:	d119      	bne.n	8003202 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d116      	bne.n	8003202 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031d4:	4b7c      	ldr	r3, [pc, #496]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_RCC_OscConfig+0x328>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e23f      	b.n	800366c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ec:	4b76      	ldr	r3, [pc, #472]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	061b      	lsls	r3, r3, #24
 80031fa:	4973      	ldr	r1, [pc, #460]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003200:	e040      	b.n	8003284 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d023      	beq.n	8003252 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800320a:	4b6f      	ldr	r3, [pc, #444]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a6e      	ldr	r2, [pc, #440]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 8003210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003214:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003216:	f7fe fd23 	bl	8001c60 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800321e:	f7fe fd1f 	bl	8001c60 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e21d      	b.n	800366c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003230:	4b65      	ldr	r3, [pc, #404]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323c:	4b62      	ldr	r3, [pc, #392]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	061b      	lsls	r3, r3, #24
 800324a:	495f      	ldr	r1, [pc, #380]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 800324c:	4313      	orrs	r3, r2
 800324e:	604b      	str	r3, [r1, #4]
 8003250:	e018      	b.n	8003284 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003252:	4b5d      	ldr	r3, [pc, #372]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a5c      	ldr	r2, [pc, #368]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 8003258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800325c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325e:	f7fe fcff 	bl	8001c60 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003266:	f7fe fcfb 	bl	8001c60 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e1f9      	b.n	800366c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003278:	4b53      	ldr	r3, [pc, #332]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1f0      	bne.n	8003266 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d03c      	beq.n	800330a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d01c      	beq.n	80032d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003298:	4b4b      	ldr	r3, [pc, #300]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 800329a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800329e:	4a4a      	ldr	r2, [pc, #296]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a8:	f7fe fcda 	bl	8001c60 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b0:	f7fe fcd6 	bl	8001c60 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e1d4      	b.n	800366c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032c2:	4b41      	ldr	r3, [pc, #260]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 80032c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0ef      	beq.n	80032b0 <HAL_RCC_OscConfig+0x3ec>
 80032d0:	e01b      	b.n	800330a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d2:	4b3d      	ldr	r3, [pc, #244]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 80032d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032d8:	4a3b      	ldr	r2, [pc, #236]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 80032da:	f023 0301 	bic.w	r3, r3, #1
 80032de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e2:	f7fe fcbd 	bl	8001c60 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ea:	f7fe fcb9 	bl	8001c60 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e1b7      	b.n	800366c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032fc:	4b32      	ldr	r3, [pc, #200]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 80032fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1ef      	bne.n	80032ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0304 	and.w	r3, r3, #4
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 80a6 	beq.w	8003464 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003318:	2300      	movs	r3, #0
 800331a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800331c:	4b2a      	ldr	r3, [pc, #168]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 800331e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10d      	bne.n	8003344 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003328:	4b27      	ldr	r3, [pc, #156]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 800332a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332c:	4a26      	ldr	r2, [pc, #152]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 800332e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003332:	6593      	str	r3, [r2, #88]	; 0x58
 8003334:	4b24      	ldr	r3, [pc, #144]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 8003336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003340:	2301      	movs	r3, #1
 8003342:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003344:	4b21      	ldr	r3, [pc, #132]	; (80033cc <HAL_RCC_OscConfig+0x508>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334c:	2b00      	cmp	r3, #0
 800334e:	d118      	bne.n	8003382 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003350:	4b1e      	ldr	r3, [pc, #120]	; (80033cc <HAL_RCC_OscConfig+0x508>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a1d      	ldr	r2, [pc, #116]	; (80033cc <HAL_RCC_OscConfig+0x508>)
 8003356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800335a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800335c:	f7fe fc80 	bl	8001c60 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003364:	f7fe fc7c 	bl	8001c60 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e17a      	b.n	800366c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003376:	4b15      	ldr	r3, [pc, #84]	; (80033cc <HAL_RCC_OscConfig+0x508>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0f0      	beq.n	8003364 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d108      	bne.n	800339c <HAL_RCC_OscConfig+0x4d8>
 800338a:	4b0f      	ldr	r3, [pc, #60]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 800338c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003390:	4a0d      	ldr	r2, [pc, #52]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800339a:	e029      	b.n	80033f0 <HAL_RCC_OscConfig+0x52c>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2b05      	cmp	r3, #5
 80033a2:	d115      	bne.n	80033d0 <HAL_RCC_OscConfig+0x50c>
 80033a4:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033aa:	4a07      	ldr	r2, [pc, #28]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 80033ac:	f043 0304 	orr.w	r3, r3, #4
 80033b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033b4:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ba:	4a03      	ldr	r2, [pc, #12]	; (80033c8 <HAL_RCC_OscConfig+0x504>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033c4:	e014      	b.n	80033f0 <HAL_RCC_OscConfig+0x52c>
 80033c6:	bf00      	nop
 80033c8:	40021000 	.word	0x40021000
 80033cc:	40007000 	.word	0x40007000
 80033d0:	4b9c      	ldr	r3, [pc, #624]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d6:	4a9b      	ldr	r2, [pc, #620]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 80033d8:	f023 0301 	bic.w	r3, r3, #1
 80033dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033e0:	4b98      	ldr	r3, [pc, #608]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e6:	4a97      	ldr	r2, [pc, #604]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 80033e8:	f023 0304 	bic.w	r3, r3, #4
 80033ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d016      	beq.n	8003426 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f8:	f7fe fc32 	bl	8001c60 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033fe:	e00a      	b.n	8003416 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003400:	f7fe fc2e 	bl	8001c60 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	f241 3288 	movw	r2, #5000	; 0x1388
 800340e:	4293      	cmp	r3, r2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e12a      	b.n	800366c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003416:	4b8b      	ldr	r3, [pc, #556]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0ed      	beq.n	8003400 <HAL_RCC_OscConfig+0x53c>
 8003424:	e015      	b.n	8003452 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003426:	f7fe fc1b 	bl	8001c60 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800342c:	e00a      	b.n	8003444 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342e:	f7fe fc17 	bl	8001c60 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	f241 3288 	movw	r2, #5000	; 0x1388
 800343c:	4293      	cmp	r3, r2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e113      	b.n	800366c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003444:	4b7f      	ldr	r3, [pc, #508]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1ed      	bne.n	800342e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003452:	7ffb      	ldrb	r3, [r7, #31]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d105      	bne.n	8003464 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003458:	4b7a      	ldr	r3, [pc, #488]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 800345a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345c:	4a79      	ldr	r2, [pc, #484]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 800345e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003462:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 80fe 	beq.w	800366a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003472:	2b02      	cmp	r3, #2
 8003474:	f040 80d0 	bne.w	8003618 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003478:	4b72      	ldr	r3, [pc, #456]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f003 0203 	and.w	r2, r3, #3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	429a      	cmp	r2, r3
 800348a:	d130      	bne.n	80034ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	3b01      	subs	r3, #1
 8003498:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800349a:	429a      	cmp	r2, r3
 800349c:	d127      	bne.n	80034ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d11f      	bne.n	80034ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034b8:	2a07      	cmp	r2, #7
 80034ba:	bf14      	ite	ne
 80034bc:	2201      	movne	r2, #1
 80034be:	2200      	moveq	r2, #0
 80034c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d113      	bne.n	80034ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	3b01      	subs	r3, #1
 80034d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d109      	bne.n	80034ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	085b      	lsrs	r3, r3, #1
 80034e6:	3b01      	subs	r3, #1
 80034e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d06e      	beq.n	80035cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	2b0c      	cmp	r3, #12
 80034f2:	d069      	beq.n	80035c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034f4:	4b53      	ldr	r3, [pc, #332]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d105      	bne.n	800350c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003500:	4b50      	ldr	r3, [pc, #320]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0ad      	b.n	800366c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003510:	4b4c      	ldr	r3, [pc, #304]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a4b      	ldr	r2, [pc, #300]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 8003516:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800351a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800351c:	f7fe fba0 	bl	8001c60 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003524:	f7fe fb9c 	bl	8001c60 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e09a      	b.n	800366c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003536:	4b43      	ldr	r3, [pc, #268]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f0      	bne.n	8003524 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003542:	4b40      	ldr	r3, [pc, #256]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	4b40      	ldr	r3, [pc, #256]	; (8003648 <HAL_RCC_OscConfig+0x784>)
 8003548:	4013      	ands	r3, r2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003552:	3a01      	subs	r2, #1
 8003554:	0112      	lsls	r2, r2, #4
 8003556:	4311      	orrs	r1, r2
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800355c:	0212      	lsls	r2, r2, #8
 800355e:	4311      	orrs	r1, r2
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003564:	0852      	lsrs	r2, r2, #1
 8003566:	3a01      	subs	r2, #1
 8003568:	0552      	lsls	r2, r2, #21
 800356a:	4311      	orrs	r1, r2
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003570:	0852      	lsrs	r2, r2, #1
 8003572:	3a01      	subs	r2, #1
 8003574:	0652      	lsls	r2, r2, #25
 8003576:	4311      	orrs	r1, r2
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800357c:	0912      	lsrs	r2, r2, #4
 800357e:	0452      	lsls	r2, r2, #17
 8003580:	430a      	orrs	r2, r1
 8003582:	4930      	ldr	r1, [pc, #192]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 8003584:	4313      	orrs	r3, r2
 8003586:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003588:	4b2e      	ldr	r3, [pc, #184]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a2d      	ldr	r2, [pc, #180]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 800358e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003592:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003594:	4b2b      	ldr	r3, [pc, #172]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4a2a      	ldr	r2, [pc, #168]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 800359a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800359e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035a0:	f7fe fb5e 	bl	8001c60 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a8:	f7fe fb5a 	bl	8001c60 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e058      	b.n	800366c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ba:	4b22      	ldr	r3, [pc, #136]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035c6:	e050      	b.n	800366a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e04f      	b.n	800366c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035cc:	4b1d      	ldr	r3, [pc, #116]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d148      	bne.n	800366a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035d8:	4b1a      	ldr	r3, [pc, #104]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a19      	ldr	r2, [pc, #100]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 80035de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035e4:	4b17      	ldr	r3, [pc, #92]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	4a16      	ldr	r2, [pc, #88]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 80035ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035f0:	f7fe fb36 	bl	8001c60 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f8:	f7fe fb32 	bl	8001c60 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e030      	b.n	800366c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800360a:	4b0e      	ldr	r3, [pc, #56]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0x734>
 8003616:	e028      	b.n	800366a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	2b0c      	cmp	r3, #12
 800361c:	d023      	beq.n	8003666 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361e:	4b09      	ldr	r3, [pc, #36]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a08      	ldr	r2, [pc, #32]	; (8003644 <HAL_RCC_OscConfig+0x780>)
 8003624:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362a:	f7fe fb19 	bl	8001c60 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003630:	e00c      	b.n	800364c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003632:	f7fe fb15 	bl	8001c60 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d905      	bls.n	800364c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e013      	b.n	800366c <HAL_RCC_OscConfig+0x7a8>
 8003644:	40021000 	.word	0x40021000
 8003648:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800364c:	4b09      	ldr	r3, [pc, #36]	; (8003674 <HAL_RCC_OscConfig+0x7b0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1ec      	bne.n	8003632 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003658:	4b06      	ldr	r3, [pc, #24]	; (8003674 <HAL_RCC_OscConfig+0x7b0>)
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	4905      	ldr	r1, [pc, #20]	; (8003674 <HAL_RCC_OscConfig+0x7b0>)
 800365e:	4b06      	ldr	r3, [pc, #24]	; (8003678 <HAL_RCC_OscConfig+0x7b4>)
 8003660:	4013      	ands	r3, r2
 8003662:	60cb      	str	r3, [r1, #12]
 8003664:	e001      	b.n	800366a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3720      	adds	r7, #32
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40021000 	.word	0x40021000
 8003678:	feeefffc 	.word	0xfeeefffc

0800367c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0e7      	b.n	8003860 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003690:	4b75      	ldr	r3, [pc, #468]	; (8003868 <HAL_RCC_ClockConfig+0x1ec>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d910      	bls.n	80036c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369e:	4b72      	ldr	r3, [pc, #456]	; (8003868 <HAL_RCC_ClockConfig+0x1ec>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 0207 	bic.w	r2, r3, #7
 80036a6:	4970      	ldr	r1, [pc, #448]	; (8003868 <HAL_RCC_ClockConfig+0x1ec>)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ae:	4b6e      	ldr	r3, [pc, #440]	; (8003868 <HAL_RCC_ClockConfig+0x1ec>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0cf      	b.n	8003860 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d010      	beq.n	80036ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	4b66      	ldr	r3, [pc, #408]	; (800386c <HAL_RCC_ClockConfig+0x1f0>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036d8:	429a      	cmp	r2, r3
 80036da:	d908      	bls.n	80036ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036dc:	4b63      	ldr	r3, [pc, #396]	; (800386c <HAL_RCC_ClockConfig+0x1f0>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	4960      	ldr	r1, [pc, #384]	; (800386c <HAL_RCC_ClockConfig+0x1f0>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d04c      	beq.n	8003794 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b03      	cmp	r3, #3
 8003700:	d107      	bne.n	8003712 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003702:	4b5a      	ldr	r3, [pc, #360]	; (800386c <HAL_RCC_ClockConfig+0x1f0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d121      	bne.n	8003752 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e0a6      	b.n	8003860 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d107      	bne.n	800372a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800371a:	4b54      	ldr	r3, [pc, #336]	; (800386c <HAL_RCC_ClockConfig+0x1f0>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d115      	bne.n	8003752 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e09a      	b.n	8003860 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d107      	bne.n	8003742 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003732:	4b4e      	ldr	r3, [pc, #312]	; (800386c <HAL_RCC_ClockConfig+0x1f0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e08e      	b.n	8003860 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003742:	4b4a      	ldr	r3, [pc, #296]	; (800386c <HAL_RCC_ClockConfig+0x1f0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e086      	b.n	8003860 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003752:	4b46      	ldr	r3, [pc, #280]	; (800386c <HAL_RCC_ClockConfig+0x1f0>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f023 0203 	bic.w	r2, r3, #3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	4943      	ldr	r1, [pc, #268]	; (800386c <HAL_RCC_ClockConfig+0x1f0>)
 8003760:	4313      	orrs	r3, r2
 8003762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003764:	f7fe fa7c 	bl	8001c60 <HAL_GetTick>
 8003768:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800376a:	e00a      	b.n	8003782 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800376c:	f7fe fa78 	bl	8001c60 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	f241 3288 	movw	r2, #5000	; 0x1388
 800377a:	4293      	cmp	r3, r2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e06e      	b.n	8003860 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003782:	4b3a      	ldr	r3, [pc, #232]	; (800386c <HAL_RCC_ClockConfig+0x1f0>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 020c 	and.w	r2, r3, #12
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	429a      	cmp	r2, r3
 8003792:	d1eb      	bne.n	800376c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d010      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	4b31      	ldr	r3, [pc, #196]	; (800386c <HAL_RCC_ClockConfig+0x1f0>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d208      	bcs.n	80037c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b0:	4b2e      	ldr	r3, [pc, #184]	; (800386c <HAL_RCC_ClockConfig+0x1f0>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	492b      	ldr	r1, [pc, #172]	; (800386c <HAL_RCC_ClockConfig+0x1f0>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037c2:	4b29      	ldr	r3, [pc, #164]	; (8003868 <HAL_RCC_ClockConfig+0x1ec>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d210      	bcs.n	80037f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d0:	4b25      	ldr	r3, [pc, #148]	; (8003868 <HAL_RCC_ClockConfig+0x1ec>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f023 0207 	bic.w	r2, r3, #7
 80037d8:	4923      	ldr	r1, [pc, #140]	; (8003868 <HAL_RCC_ClockConfig+0x1ec>)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	4313      	orrs	r3, r2
 80037de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e0:	4b21      	ldr	r3, [pc, #132]	; (8003868 <HAL_RCC_ClockConfig+0x1ec>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d001      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e036      	b.n	8003860 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d008      	beq.n	8003810 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037fe:	4b1b      	ldr	r3, [pc, #108]	; (800386c <HAL_RCC_ClockConfig+0x1f0>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	4918      	ldr	r1, [pc, #96]	; (800386c <HAL_RCC_ClockConfig+0x1f0>)
 800380c:	4313      	orrs	r3, r2
 800380e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d009      	beq.n	8003830 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800381c:	4b13      	ldr	r3, [pc, #76]	; (800386c <HAL_RCC_ClockConfig+0x1f0>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4910      	ldr	r1, [pc, #64]	; (800386c <HAL_RCC_ClockConfig+0x1f0>)
 800382c:	4313      	orrs	r3, r2
 800382e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003830:	f000 f824 	bl	800387c <HAL_RCC_GetSysClockFreq>
 8003834:	4602      	mov	r2, r0
 8003836:	4b0d      	ldr	r3, [pc, #52]	; (800386c <HAL_RCC_ClockConfig+0x1f0>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	091b      	lsrs	r3, r3, #4
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	490b      	ldr	r1, [pc, #44]	; (8003870 <HAL_RCC_ClockConfig+0x1f4>)
 8003842:	5ccb      	ldrb	r3, [r1, r3]
 8003844:	f003 031f 	and.w	r3, r3, #31
 8003848:	fa22 f303 	lsr.w	r3, r2, r3
 800384c:	4a09      	ldr	r2, [pc, #36]	; (8003874 <HAL_RCC_ClockConfig+0x1f8>)
 800384e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003850:	4b09      	ldr	r3, [pc, #36]	; (8003878 <HAL_RCC_ClockConfig+0x1fc>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4618      	mov	r0, r3
 8003856:	f7fd fec3 	bl	80015e0 <HAL_InitTick>
 800385a:	4603      	mov	r3, r0
 800385c:	72fb      	strb	r3, [r7, #11]

  return status;
 800385e:	7afb      	ldrb	r3, [r7, #11]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40022000 	.word	0x40022000
 800386c:	40021000 	.word	0x40021000
 8003870:	0800e470 	.word	0x0800e470
 8003874:	20000000 	.word	0x20000000
 8003878:	20000004 	.word	0x20000004

0800387c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800387c:	b480      	push	{r7}
 800387e:	b089      	sub	sp, #36	; 0x24
 8003880:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003882:	2300      	movs	r3, #0
 8003884:	61fb      	str	r3, [r7, #28]
 8003886:	2300      	movs	r3, #0
 8003888:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800388a:	4b3e      	ldr	r3, [pc, #248]	; (8003984 <HAL_RCC_GetSysClockFreq+0x108>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 030c 	and.w	r3, r3, #12
 8003892:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003894:	4b3b      	ldr	r3, [pc, #236]	; (8003984 <HAL_RCC_GetSysClockFreq+0x108>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0303 	and.w	r3, r3, #3
 800389c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_RCC_GetSysClockFreq+0x34>
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	2b0c      	cmp	r3, #12
 80038a8:	d121      	bne.n	80038ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d11e      	bne.n	80038ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038b0:	4b34      	ldr	r3, [pc, #208]	; (8003984 <HAL_RCC_GetSysClockFreq+0x108>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d107      	bne.n	80038cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038bc:	4b31      	ldr	r3, [pc, #196]	; (8003984 <HAL_RCC_GetSysClockFreq+0x108>)
 80038be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038c2:	0a1b      	lsrs	r3, r3, #8
 80038c4:	f003 030f 	and.w	r3, r3, #15
 80038c8:	61fb      	str	r3, [r7, #28]
 80038ca:	e005      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038cc:	4b2d      	ldr	r3, [pc, #180]	; (8003984 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	091b      	lsrs	r3, r3, #4
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80038d8:	4a2b      	ldr	r2, [pc, #172]	; (8003988 <HAL_RCC_GetSysClockFreq+0x10c>)
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10d      	bne.n	8003904 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038ec:	e00a      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d102      	bne.n	80038fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038f4:	4b25      	ldr	r3, [pc, #148]	; (800398c <HAL_RCC_GetSysClockFreq+0x110>)
 80038f6:	61bb      	str	r3, [r7, #24]
 80038f8:	e004      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d101      	bne.n	8003904 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003900:	4b23      	ldr	r3, [pc, #140]	; (8003990 <HAL_RCC_GetSysClockFreq+0x114>)
 8003902:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	2b0c      	cmp	r3, #12
 8003908:	d134      	bne.n	8003974 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800390a:	4b1e      	ldr	r3, [pc, #120]	; (8003984 <HAL_RCC_GetSysClockFreq+0x108>)
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2b02      	cmp	r3, #2
 8003918:	d003      	beq.n	8003922 <HAL_RCC_GetSysClockFreq+0xa6>
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b03      	cmp	r3, #3
 800391e:	d003      	beq.n	8003928 <HAL_RCC_GetSysClockFreq+0xac>
 8003920:	e005      	b.n	800392e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003922:	4b1a      	ldr	r3, [pc, #104]	; (800398c <HAL_RCC_GetSysClockFreq+0x110>)
 8003924:	617b      	str	r3, [r7, #20]
      break;
 8003926:	e005      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003928:	4b19      	ldr	r3, [pc, #100]	; (8003990 <HAL_RCC_GetSysClockFreq+0x114>)
 800392a:	617b      	str	r3, [r7, #20]
      break;
 800392c:	e002      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	617b      	str	r3, [r7, #20]
      break;
 8003932:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003934:	4b13      	ldr	r3, [pc, #76]	; (8003984 <HAL_RCC_GetSysClockFreq+0x108>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	091b      	lsrs	r3, r3, #4
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	3301      	adds	r3, #1
 8003940:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003942:	4b10      	ldr	r3, [pc, #64]	; (8003984 <HAL_RCC_GetSysClockFreq+0x108>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	0a1b      	lsrs	r3, r3, #8
 8003948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	fb03 f202 	mul.w	r2, r3, r2
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	fbb2 f3f3 	udiv	r3, r2, r3
 8003958:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800395a:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <HAL_RCC_GetSysClockFreq+0x108>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	0e5b      	lsrs	r3, r3, #25
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	3301      	adds	r3, #1
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003972:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003974:	69bb      	ldr	r3, [r7, #24]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3724      	adds	r7, #36	; 0x24
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	40021000 	.word	0x40021000
 8003988:	0800e488 	.word	0x0800e488
 800398c:	00f42400 	.word	0x00f42400
 8003990:	007a1200 	.word	0x007a1200

08003994 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003998:	4b03      	ldr	r3, [pc, #12]	; (80039a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800399a:	681b      	ldr	r3, [r3, #0]
}
 800399c:	4618      	mov	r0, r3
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	20000000 	.word	0x20000000

080039ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039b0:	f7ff fff0 	bl	8003994 <HAL_RCC_GetHCLKFreq>
 80039b4:	4602      	mov	r2, r0
 80039b6:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	0a1b      	lsrs	r3, r3, #8
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	4904      	ldr	r1, [pc, #16]	; (80039d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039c2:	5ccb      	ldrb	r3, [r1, r3]
 80039c4:	f003 031f 	and.w	r3, r3, #31
 80039c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40021000 	.word	0x40021000
 80039d4:	0800e480 	.word	0x0800e480

080039d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80039dc:	f7ff ffda 	bl	8003994 <HAL_RCC_GetHCLKFreq>
 80039e0:	4602      	mov	r2, r0
 80039e2:	4b06      	ldr	r3, [pc, #24]	; (80039fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	0adb      	lsrs	r3, r3, #11
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	4904      	ldr	r1, [pc, #16]	; (8003a00 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039ee:	5ccb      	ldrb	r3, [r1, r3]
 80039f0:	f003 031f 	and.w	r3, r3, #31
 80039f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40021000 	.word	0x40021000
 8003a00:	0800e480 	.word	0x0800e480

08003a04 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	220f      	movs	r2, #15
 8003a12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003a14:	4b12      	ldr	r3, [pc, #72]	; (8003a60 <HAL_RCC_GetClockConfig+0x5c>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 0203 	and.w	r2, r3, #3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003a20:	4b0f      	ldr	r3, [pc, #60]	; (8003a60 <HAL_RCC_GetClockConfig+0x5c>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003a2c:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <HAL_RCC_GetClockConfig+0x5c>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003a38:	4b09      	ldr	r3, [pc, #36]	; (8003a60 <HAL_RCC_GetClockConfig+0x5c>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	08db      	lsrs	r3, r3, #3
 8003a3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003a46:	4b07      	ldr	r3, [pc, #28]	; (8003a64 <HAL_RCC_GetClockConfig+0x60>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0207 	and.w	r2, r3, #7
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	601a      	str	r2, [r3, #0]
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	40021000 	.word	0x40021000
 8003a64:	40022000 	.word	0x40022000

08003a68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a70:	2300      	movs	r3, #0
 8003a72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a74:	4b2a      	ldr	r3, [pc, #168]	; (8003b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a80:	f7ff f8f0 	bl	8002c64 <HAL_PWREx_GetVoltageRange>
 8003a84:	6178      	str	r0, [r7, #20]
 8003a86:	e014      	b.n	8003ab2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a88:	4b25      	ldr	r3, [pc, #148]	; (8003b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8c:	4a24      	ldr	r2, [pc, #144]	; (8003b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a92:	6593      	str	r3, [r2, #88]	; 0x58
 8003a94:	4b22      	ldr	r3, [pc, #136]	; (8003b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003aa0:	f7ff f8e0 	bl	8002c64 <HAL_PWREx_GetVoltageRange>
 8003aa4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003aa6:	4b1e      	ldr	r3, [pc, #120]	; (8003b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aaa:	4a1d      	ldr	r2, [pc, #116]	; (8003b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ab8:	d10b      	bne.n	8003ad2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b80      	cmp	r3, #128	; 0x80
 8003abe:	d919      	bls.n	8003af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2ba0      	cmp	r3, #160	; 0xa0
 8003ac4:	d902      	bls.n	8003acc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	613b      	str	r3, [r7, #16]
 8003aca:	e013      	b.n	8003af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003acc:	2301      	movs	r3, #1
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	e010      	b.n	8003af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b80      	cmp	r3, #128	; 0x80
 8003ad6:	d902      	bls.n	8003ade <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ad8:	2303      	movs	r3, #3
 8003ada:	613b      	str	r3, [r7, #16]
 8003adc:	e00a      	b.n	8003af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b80      	cmp	r3, #128	; 0x80
 8003ae2:	d102      	bne.n	8003aea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	613b      	str	r3, [r7, #16]
 8003ae8:	e004      	b.n	8003af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b70      	cmp	r3, #112	; 0x70
 8003aee:	d101      	bne.n	8003af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003af0:	2301      	movs	r3, #1
 8003af2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003af4:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f023 0207 	bic.w	r2, r3, #7
 8003afc:	4909      	ldr	r1, [pc, #36]	; (8003b24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b04:	4b07      	ldr	r3, [pc, #28]	; (8003b24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d001      	beq.n	8003b16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40022000 	.word	0x40022000

08003b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b30:	2300      	movs	r3, #0
 8003b32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b34:	2300      	movs	r3, #0
 8003b36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d041      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b4c:	d02a      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b52:	d824      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b58:	d008      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b5e:	d81e      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00a      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b68:	d010      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b6a:	e018      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b6c:	4b86      	ldr	r3, [pc, #536]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	4a85      	ldr	r2, [pc, #532]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b76:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b78:	e015      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	2100      	movs	r1, #0
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 facb 	bl	800411c <RCCEx_PLLSAI1_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b8a:	e00c      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3320      	adds	r3, #32
 8003b90:	2100      	movs	r1, #0
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fbb6 	bl	8004304 <RCCEx_PLLSAI2_Config>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b9c:	e003      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	74fb      	strb	r3, [r7, #19]
      break;
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ba6:	7cfb      	ldrb	r3, [r7, #19]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10b      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bac:	4b76      	ldr	r3, [pc, #472]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bba:	4973      	ldr	r1, [pc, #460]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003bc2:	e001      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc4:	7cfb      	ldrb	r3, [r7, #19]
 8003bc6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d041      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bdc:	d02a      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003bde:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003be2:	d824      	bhi.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003be4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003be8:	d008      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bee:	d81e      	bhi.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bf8:	d010      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bfa:	e018      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bfc:	4b62      	ldr	r3, [pc, #392]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	4a61      	ldr	r2, [pc, #388]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c06:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c08:	e015      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	2100      	movs	r1, #0
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 fa83 	bl	800411c <RCCEx_PLLSAI1_Config>
 8003c16:	4603      	mov	r3, r0
 8003c18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c1a:	e00c      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3320      	adds	r3, #32
 8003c20:	2100      	movs	r1, #0
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fb6e 	bl	8004304 <RCCEx_PLLSAI2_Config>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c2c:	e003      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	74fb      	strb	r3, [r7, #19]
      break;
 8003c32:	e000      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c36:	7cfb      	ldrb	r3, [r7, #19]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10b      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c3c:	4b52      	ldr	r3, [pc, #328]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c42:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c4a:	494f      	ldr	r1, [pc, #316]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c52:	e001      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c54:	7cfb      	ldrb	r3, [r7, #19]
 8003c56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80a0 	beq.w	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c66:	2300      	movs	r3, #0
 8003c68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c6a:	4b47      	ldr	r3, [pc, #284]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00d      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c80:	4b41      	ldr	r3, [pc, #260]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c84:	4a40      	ldr	r2, [pc, #256]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c8c:	4b3e      	ldr	r3, [pc, #248]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c94:	60bb      	str	r3, [r7, #8]
 8003c96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c9c:	4b3b      	ldr	r3, [pc, #236]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a3a      	ldr	r2, [pc, #232]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ca8:	f7fd ffda 	bl	8001c60 <HAL_GetTick>
 8003cac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cae:	e009      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb0:	f7fd ffd6 	bl	8001c60 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d902      	bls.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	74fb      	strb	r3, [r7, #19]
        break;
 8003cc2:	e005      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cc4:	4b31      	ldr	r3, [pc, #196]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0ef      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003cd0:	7cfb      	ldrb	r3, [r7, #19]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d15c      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cd6:	4b2c      	ldr	r3, [pc, #176]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01f      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d019      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cf4:	4b24      	ldr	r3, [pc, #144]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cfe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d00:	4b21      	ldr	r3, [pc, #132]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d06:	4a20      	ldr	r2, [pc, #128]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d10:	4b1d      	ldr	r3, [pc, #116]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d16:	4a1c      	ldr	r2, [pc, #112]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d20:	4a19      	ldr	r2, [pc, #100]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d016      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d32:	f7fd ff95 	bl	8001c60 <HAL_GetTick>
 8003d36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d38:	e00b      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3a:	f7fd ff91 	bl	8001c60 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d902      	bls.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	74fb      	strb	r3, [r7, #19]
            break;
 8003d50:	e006      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d52:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0ec      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d60:	7cfb      	ldrb	r3, [r7, #19]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d66:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d76:	4904      	ldr	r1, [pc, #16]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d7e:	e009      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d80:	7cfb      	ldrb	r3, [r7, #19]
 8003d82:	74bb      	strb	r3, [r7, #18]
 8003d84:	e006      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d86:	bf00      	nop
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d90:	7cfb      	ldrb	r3, [r7, #19]
 8003d92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d94:	7c7b      	ldrb	r3, [r7, #17]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d105      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d9a:	4b9e      	ldr	r3, [pc, #632]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9e:	4a9d      	ldr	r2, [pc, #628]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003da4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003db2:	4b98      	ldr	r3, [pc, #608]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db8:	f023 0203 	bic.w	r2, r3, #3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc0:	4994      	ldr	r1, [pc, #592]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dd4:	4b8f      	ldr	r3, [pc, #572]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dda:	f023 020c 	bic.w	r2, r3, #12
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de2:	498c      	ldr	r1, [pc, #560]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003df6:	4b87      	ldr	r3, [pc, #540]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	4983      	ldr	r1, [pc, #524]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00a      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e18:	4b7e      	ldr	r3, [pc, #504]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	497b      	ldr	r1, [pc, #492]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e3a:	4b76      	ldr	r3, [pc, #472]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e48:	4972      	ldr	r1, [pc, #456]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0320 	and.w	r3, r3, #32
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e5c:	4b6d      	ldr	r3, [pc, #436]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6a:	496a      	ldr	r1, [pc, #424]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e7e:	4b65      	ldr	r3, [pc, #404]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8c:	4961      	ldr	r1, [pc, #388]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ea0:	4b5c      	ldr	r3, [pc, #368]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eae:	4959      	ldr	r1, [pc, #356]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ec2:	4b54      	ldr	r3, [pc, #336]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed0:	4950      	ldr	r1, [pc, #320]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ee4:	4b4b      	ldr	r3, [pc, #300]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef2:	4948      	ldr	r1, [pc, #288]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f06:	4b43      	ldr	r3, [pc, #268]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f14:	493f      	ldr	r1, [pc, #252]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d028      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f28:	4b3a      	ldr	r3, [pc, #232]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f36:	4937      	ldr	r1, [pc, #220]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f46:	d106      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f48:	4b32      	ldr	r3, [pc, #200]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	4a31      	ldr	r2, [pc, #196]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f52:	60d3      	str	r3, [r2, #12]
 8003f54:	e011      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f5e:	d10c      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3304      	adds	r3, #4
 8003f64:	2101      	movs	r1, #1
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 f8d8 	bl	800411c <RCCEx_PLLSAI1_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f70:	7cfb      	ldrb	r3, [r7, #19]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f76:	7cfb      	ldrb	r3, [r7, #19]
 8003f78:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d028      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f86:	4b23      	ldr	r3, [pc, #140]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f94:	491f      	ldr	r1, [pc, #124]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fa4:	d106      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fa6:	4b1b      	ldr	r3, [pc, #108]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	4a1a      	ldr	r2, [pc, #104]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fb0:	60d3      	str	r3, [r2, #12]
 8003fb2:	e011      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fbc:	d10c      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 f8a9 	bl	800411c <RCCEx_PLLSAI1_Config>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fce:	7cfb      	ldrb	r3, [r7, #19]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003fd4:	7cfb      	ldrb	r3, [r7, #19]
 8003fd6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d02b      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff2:	4908      	ldr	r1, [pc, #32]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004002:	d109      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004004:	4b03      	ldr	r3, [pc, #12]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	4a02      	ldr	r2, [pc, #8]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800400e:	60d3      	str	r3, [r2, #12]
 8004010:	e014      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004012:	bf00      	nop
 8004014:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800401c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004020:	d10c      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3304      	adds	r3, #4
 8004026:	2101      	movs	r1, #1
 8004028:	4618      	mov	r0, r3
 800402a:	f000 f877 	bl	800411c <RCCEx_PLLSAI1_Config>
 800402e:	4603      	mov	r3, r0
 8004030:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004032:	7cfb      	ldrb	r3, [r7, #19]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004038:	7cfb      	ldrb	r3, [r7, #19]
 800403a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d02f      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004048:	4b2b      	ldr	r3, [pc, #172]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004056:	4928      	ldr	r1, [pc, #160]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004062:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004066:	d10d      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	2102      	movs	r1, #2
 800406e:	4618      	mov	r0, r3
 8004070:	f000 f854 	bl	800411c <RCCEx_PLLSAI1_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004078:	7cfb      	ldrb	r3, [r7, #19]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d014      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800407e:	7cfb      	ldrb	r3, [r7, #19]
 8004080:	74bb      	strb	r3, [r7, #18]
 8004082:	e011      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800408c:	d10c      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	3320      	adds	r3, #32
 8004092:	2102      	movs	r1, #2
 8004094:	4618      	mov	r0, r3
 8004096:	f000 f935 	bl	8004304 <RCCEx_PLLSAI2_Config>
 800409a:	4603      	mov	r3, r0
 800409c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800409e:	7cfb      	ldrb	r3, [r7, #19]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040a4:	7cfb      	ldrb	r3, [r7, #19]
 80040a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00a      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040b4:	4b10      	ldr	r3, [pc, #64]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040c2:	490d      	ldr	r1, [pc, #52]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00b      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040d6:	4b08      	ldr	r3, [pc, #32]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040e6:	4904      	ldr	r1, [pc, #16]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40021000 	.word	0x40021000

080040fc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004100:	4b05      	ldr	r3, [pc, #20]	; (8004118 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a04      	ldr	r2, [pc, #16]	; (8004118 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004106:	f043 0304 	orr.w	r3, r3, #4
 800410a:	6013      	str	r3, [r2, #0]
}
 800410c:	bf00      	nop
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40021000 	.word	0x40021000

0800411c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800412a:	4b75      	ldr	r3, [pc, #468]	; (8004300 <RCCEx_PLLSAI1_Config+0x1e4>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d018      	beq.n	8004168 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004136:	4b72      	ldr	r3, [pc, #456]	; (8004300 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f003 0203 	and.w	r2, r3, #3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d10d      	bne.n	8004162 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
       ||
 800414a:	2b00      	cmp	r3, #0
 800414c:	d009      	beq.n	8004162 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800414e:	4b6c      	ldr	r3, [pc, #432]	; (8004300 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	091b      	lsrs	r3, r3, #4
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
       ||
 800415e:	429a      	cmp	r2, r3
 8004160:	d047      	beq.n	80041f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	73fb      	strb	r3, [r7, #15]
 8004166:	e044      	b.n	80041f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b03      	cmp	r3, #3
 800416e:	d018      	beq.n	80041a2 <RCCEx_PLLSAI1_Config+0x86>
 8004170:	2b03      	cmp	r3, #3
 8004172:	d825      	bhi.n	80041c0 <RCCEx_PLLSAI1_Config+0xa4>
 8004174:	2b01      	cmp	r3, #1
 8004176:	d002      	beq.n	800417e <RCCEx_PLLSAI1_Config+0x62>
 8004178:	2b02      	cmp	r3, #2
 800417a:	d009      	beq.n	8004190 <RCCEx_PLLSAI1_Config+0x74>
 800417c:	e020      	b.n	80041c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800417e:	4b60      	ldr	r3, [pc, #384]	; (8004300 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d11d      	bne.n	80041c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800418e:	e01a      	b.n	80041c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004190:	4b5b      	ldr	r3, [pc, #364]	; (8004300 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004198:	2b00      	cmp	r3, #0
 800419a:	d116      	bne.n	80041ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a0:	e013      	b.n	80041ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041a2:	4b57      	ldr	r3, [pc, #348]	; (8004300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10f      	bne.n	80041ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041ae:	4b54      	ldr	r3, [pc, #336]	; (8004300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d109      	bne.n	80041ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041be:	e006      	b.n	80041ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
      break;
 80041c4:	e004      	b.n	80041d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041c6:	bf00      	nop
 80041c8:	e002      	b.n	80041d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041ca:	bf00      	nop
 80041cc:	e000      	b.n	80041d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80041d0:	7bfb      	ldrb	r3, [r7, #15]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10d      	bne.n	80041f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041d6:	4b4a      	ldr	r3, [pc, #296]	; (8004300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6819      	ldr	r1, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	3b01      	subs	r3, #1
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	430b      	orrs	r3, r1
 80041ec:	4944      	ldr	r1, [pc, #272]	; (8004300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d17d      	bne.n	80042f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041f8:	4b41      	ldr	r3, [pc, #260]	; (8004300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a40      	ldr	r2, [pc, #256]	; (8004300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004202:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004204:	f7fd fd2c 	bl	8001c60 <HAL_GetTick>
 8004208:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800420a:	e009      	b.n	8004220 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800420c:	f7fd fd28 	bl	8001c60 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d902      	bls.n	8004220 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	73fb      	strb	r3, [r7, #15]
        break;
 800421e:	e005      	b.n	800422c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004220:	4b37      	ldr	r3, [pc, #220]	; (8004300 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1ef      	bne.n	800420c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d160      	bne.n	80042f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d111      	bne.n	800425c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004238:	4b31      	ldr	r3, [pc, #196]	; (8004300 <RCCEx_PLLSAI1_Config+0x1e4>)
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6892      	ldr	r2, [r2, #8]
 8004248:	0211      	lsls	r1, r2, #8
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	68d2      	ldr	r2, [r2, #12]
 800424e:	0912      	lsrs	r2, r2, #4
 8004250:	0452      	lsls	r2, r2, #17
 8004252:	430a      	orrs	r2, r1
 8004254:	492a      	ldr	r1, [pc, #168]	; (8004300 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004256:	4313      	orrs	r3, r2
 8004258:	610b      	str	r3, [r1, #16]
 800425a:	e027      	b.n	80042ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d112      	bne.n	8004288 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004262:	4b27      	ldr	r3, [pc, #156]	; (8004300 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800426a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6892      	ldr	r2, [r2, #8]
 8004272:	0211      	lsls	r1, r2, #8
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6912      	ldr	r2, [r2, #16]
 8004278:	0852      	lsrs	r2, r2, #1
 800427a:	3a01      	subs	r2, #1
 800427c:	0552      	lsls	r2, r2, #21
 800427e:	430a      	orrs	r2, r1
 8004280:	491f      	ldr	r1, [pc, #124]	; (8004300 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004282:	4313      	orrs	r3, r2
 8004284:	610b      	str	r3, [r1, #16]
 8004286:	e011      	b.n	80042ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004288:	4b1d      	ldr	r3, [pc, #116]	; (8004300 <RCCEx_PLLSAI1_Config+0x1e4>)
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004290:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6892      	ldr	r2, [r2, #8]
 8004298:	0211      	lsls	r1, r2, #8
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6952      	ldr	r2, [r2, #20]
 800429e:	0852      	lsrs	r2, r2, #1
 80042a0:	3a01      	subs	r2, #1
 80042a2:	0652      	lsls	r2, r2, #25
 80042a4:	430a      	orrs	r2, r1
 80042a6:	4916      	ldr	r1, [pc, #88]	; (8004300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042ac:	4b14      	ldr	r3, [pc, #80]	; (8004300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a13      	ldr	r2, [pc, #76]	; (8004300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b8:	f7fd fcd2 	bl	8001c60 <HAL_GetTick>
 80042bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042be:	e009      	b.n	80042d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042c0:	f7fd fcce 	bl	8001c60 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d902      	bls.n	80042d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	73fb      	strb	r3, [r7, #15]
          break;
 80042d2:	e005      	b.n	80042e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042d4:	4b0a      	ldr	r3, [pc, #40]	; (8004300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0ef      	beq.n	80042c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042e6:	4b06      	ldr	r3, [pc, #24]	; (8004300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e8:	691a      	ldr	r2, [r3, #16]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	4904      	ldr	r1, [pc, #16]	; (8004300 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40021000 	.word	0x40021000

08004304 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004312:	4b6a      	ldr	r3, [pc, #424]	; (80044bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d018      	beq.n	8004350 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800431e:	4b67      	ldr	r3, [pc, #412]	; (80044bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f003 0203 	and.w	r2, r3, #3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d10d      	bne.n	800434a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
       ||
 8004332:	2b00      	cmp	r3, #0
 8004334:	d009      	beq.n	800434a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004336:	4b61      	ldr	r3, [pc, #388]	; (80044bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	091b      	lsrs	r3, r3, #4
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
       ||
 8004346:	429a      	cmp	r2, r3
 8004348:	d047      	beq.n	80043da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	73fb      	strb	r3, [r7, #15]
 800434e:	e044      	b.n	80043da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b03      	cmp	r3, #3
 8004356:	d018      	beq.n	800438a <RCCEx_PLLSAI2_Config+0x86>
 8004358:	2b03      	cmp	r3, #3
 800435a:	d825      	bhi.n	80043a8 <RCCEx_PLLSAI2_Config+0xa4>
 800435c:	2b01      	cmp	r3, #1
 800435e:	d002      	beq.n	8004366 <RCCEx_PLLSAI2_Config+0x62>
 8004360:	2b02      	cmp	r3, #2
 8004362:	d009      	beq.n	8004378 <RCCEx_PLLSAI2_Config+0x74>
 8004364:	e020      	b.n	80043a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004366:	4b55      	ldr	r3, [pc, #340]	; (80044bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d11d      	bne.n	80043ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004376:	e01a      	b.n	80043ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004378:	4b50      	ldr	r3, [pc, #320]	; (80044bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004380:	2b00      	cmp	r3, #0
 8004382:	d116      	bne.n	80043b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004388:	e013      	b.n	80043b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800438a:	4b4c      	ldr	r3, [pc, #304]	; (80044bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10f      	bne.n	80043b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004396:	4b49      	ldr	r3, [pc, #292]	; (80044bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d109      	bne.n	80043b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043a6:	e006      	b.n	80043b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
      break;
 80043ac:	e004      	b.n	80043b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043ae:	bf00      	nop
 80043b0:	e002      	b.n	80043b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043b2:	bf00      	nop
 80043b4:	e000      	b.n	80043b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10d      	bne.n	80043da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043be:	4b3f      	ldr	r3, [pc, #252]	; (80044bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6819      	ldr	r1, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	430b      	orrs	r3, r1
 80043d4:	4939      	ldr	r1, [pc, #228]	; (80044bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043da:	7bfb      	ldrb	r3, [r7, #15]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d167      	bne.n	80044b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043e0:	4b36      	ldr	r3, [pc, #216]	; (80044bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a35      	ldr	r2, [pc, #212]	; (80044bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ec:	f7fd fc38 	bl	8001c60 <HAL_GetTick>
 80043f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043f2:	e009      	b.n	8004408 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043f4:	f7fd fc34 	bl	8001c60 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d902      	bls.n	8004408 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	73fb      	strb	r3, [r7, #15]
        break;
 8004406:	e005      	b.n	8004414 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004408:	4b2c      	ldr	r3, [pc, #176]	; (80044bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1ef      	bne.n	80043f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004414:	7bfb      	ldrb	r3, [r7, #15]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d14a      	bne.n	80044b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d111      	bne.n	8004444 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004420:	4b26      	ldr	r3, [pc, #152]	; (80044bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6892      	ldr	r2, [r2, #8]
 8004430:	0211      	lsls	r1, r2, #8
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	68d2      	ldr	r2, [r2, #12]
 8004436:	0912      	lsrs	r2, r2, #4
 8004438:	0452      	lsls	r2, r2, #17
 800443a:	430a      	orrs	r2, r1
 800443c:	491f      	ldr	r1, [pc, #124]	; (80044bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800443e:	4313      	orrs	r3, r2
 8004440:	614b      	str	r3, [r1, #20]
 8004442:	e011      	b.n	8004468 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004444:	4b1d      	ldr	r3, [pc, #116]	; (80044bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800444c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6892      	ldr	r2, [r2, #8]
 8004454:	0211      	lsls	r1, r2, #8
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6912      	ldr	r2, [r2, #16]
 800445a:	0852      	lsrs	r2, r2, #1
 800445c:	3a01      	subs	r2, #1
 800445e:	0652      	lsls	r2, r2, #25
 8004460:	430a      	orrs	r2, r1
 8004462:	4916      	ldr	r1, [pc, #88]	; (80044bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004464:	4313      	orrs	r3, r2
 8004466:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004468:	4b14      	ldr	r3, [pc, #80]	; (80044bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a13      	ldr	r2, [pc, #76]	; (80044bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800446e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004472:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004474:	f7fd fbf4 	bl	8001c60 <HAL_GetTick>
 8004478:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800447a:	e009      	b.n	8004490 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800447c:	f7fd fbf0 	bl	8001c60 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d902      	bls.n	8004490 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	73fb      	strb	r3, [r7, #15]
          break;
 800448e:	e005      	b.n	800449c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004490:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0ef      	beq.n	800447c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800449c:	7bfb      	ldrb	r3, [r7, #15]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d106      	bne.n	80044b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044a2:	4b06      	ldr	r3, [pc, #24]	; (80044bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a4:	695a      	ldr	r2, [r3, #20]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	4904      	ldr	r1, [pc, #16]	; (80044bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40021000 	.word	0x40021000

080044c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e095      	b.n	80045fe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d108      	bne.n	80044ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044e2:	d009      	beq.n	80044f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	61da      	str	r2, [r3, #28]
 80044ea:	e005      	b.n	80044f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fc feb4 	bl	8001280 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800452e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004538:	d902      	bls.n	8004540 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	e002      	b.n	8004546 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004544:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800454e:	d007      	beq.n	8004560 <HAL_SPI_Init+0xa0>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004558:	d002      	beq.n	8004560 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a2:	ea42 0103 	orr.w	r1, r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	0c1b      	lsrs	r3, r3, #16
 80045bc:	f003 0204 	and.w	r2, r3, #4
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80045dc:	ea42 0103 	orr.w	r1, r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b082      	sub	sp, #8
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e01a      	b.n	800464e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800462e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7fc fe69 	bl	8001308 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b088      	sub	sp, #32
 800465a:	af02      	add	r7, sp, #8
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	603b      	str	r3, [r7, #0]
 8004662:	4613      	mov	r3, r2
 8004664:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004672:	d112      	bne.n	800469a <HAL_SPI_Receive+0x44>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10e      	bne.n	800469a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2204      	movs	r2, #4
 8004680:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004684:	88fa      	ldrh	r2, [r7, #6]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	4613      	mov	r3, r2
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	68b9      	ldr	r1, [r7, #8]
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f910 	bl	80048b6 <HAL_SPI_TransmitReceive>
 8004696:	4603      	mov	r3, r0
 8004698:	e109      	b.n	80048ae <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_SPI_Receive+0x52>
 80046a4:	2302      	movs	r3, #2
 80046a6:	e102      	b.n	80048ae <HAL_SPI_Receive+0x258>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046b0:	f7fd fad6 	bl	8001c60 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d002      	beq.n	80046c8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80046c2:	2302      	movs	r3, #2
 80046c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046c6:	e0e9      	b.n	800489c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <HAL_SPI_Receive+0x7e>
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d102      	bne.n	80046da <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046d8:	e0e0      	b.n	800489c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2204      	movs	r2, #4
 80046de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	88fa      	ldrh	r2, [r7, #6]
 80046f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	88fa      	ldrh	r2, [r7, #6]
 80046fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004724:	d908      	bls.n	8004738 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004734:	605a      	str	r2, [r3, #4]
 8004736:	e007      	b.n	8004748 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004746:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004750:	d10f      	bne.n	8004772 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004760:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004770:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477c:	2b40      	cmp	r3, #64	; 0x40
 800477e:	d007      	beq.n	8004790 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800478e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004798:	d867      	bhi.n	800486a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800479a:	e030      	b.n	80047fe <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d117      	bne.n	80047da <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f103 020c 	add.w	r2, r3, #12
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	7812      	ldrb	r2, [r2, #0]
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	3b01      	subs	r3, #1
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80047d8:	e011      	b.n	80047fe <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047da:	f7fd fa41 	bl	8001c60 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d803      	bhi.n	80047f2 <HAL_SPI_Receive+0x19c>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f0:	d102      	bne.n	80047f8 <HAL_SPI_Receive+0x1a2>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d102      	bne.n	80047fe <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80047fc:	e04e      	b.n	800489c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004804:	b29b      	uxth	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1c8      	bne.n	800479c <HAL_SPI_Receive+0x146>
 800480a:	e034      	b.n	8004876 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b01      	cmp	r3, #1
 8004818:	d115      	bne.n	8004846 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004824:	b292      	uxth	r2, r2
 8004826:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482c:	1c9a      	adds	r2, r3, #2
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004838:	b29b      	uxth	r3, r3
 800483a:	3b01      	subs	r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004844:	e011      	b.n	800486a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004846:	f7fd fa0b 	bl	8001c60 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d803      	bhi.n	800485e <HAL_SPI_Receive+0x208>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485c:	d102      	bne.n	8004864 <HAL_SPI_Receive+0x20e>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d102      	bne.n	800486a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004868:	e018      	b.n	800489c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1ca      	bne.n	800480c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	6839      	ldr	r1, [r7, #0]
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f001 f802 	bl	8005884 <SPI_EndRxTransaction>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2220      	movs	r2, #32
 800488a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	75fb      	strb	r3, [r7, #23]
 8004898:	e000      	b.n	800489c <HAL_SPI_Receive+0x246>
  }

error :
 800489a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80048ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b08a      	sub	sp, #40	; 0x28
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	60f8      	str	r0, [r7, #12]
 80048be:	60b9      	str	r1, [r7, #8]
 80048c0:	607a      	str	r2, [r7, #4]
 80048c2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80048c4:	2301      	movs	r3, #1
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80048c8:	2300      	movs	r3, #0
 80048ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_SPI_TransmitReceive+0x26>
 80048d8:	2302      	movs	r3, #2
 80048da:	e1fb      	b.n	8004cd4 <HAL_SPI_TransmitReceive+0x41e>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048e4:	f7fd f9bc 	bl	8001c60 <HAL_GetTick>
 80048e8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048f0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80048f8:	887b      	ldrh	r3, [r7, #2]
 80048fa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80048fc:	887b      	ldrh	r3, [r7, #2]
 80048fe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004900:	7efb      	ldrb	r3, [r7, #27]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d00e      	beq.n	8004924 <HAL_SPI_TransmitReceive+0x6e>
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800490c:	d106      	bne.n	800491c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d102      	bne.n	800491c <HAL_SPI_TransmitReceive+0x66>
 8004916:	7efb      	ldrb	r3, [r7, #27]
 8004918:	2b04      	cmp	r3, #4
 800491a:	d003      	beq.n	8004924 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800491c:	2302      	movs	r3, #2
 800491e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004922:	e1cd      	b.n	8004cc0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d005      	beq.n	8004936 <HAL_SPI_TransmitReceive+0x80>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <HAL_SPI_TransmitReceive+0x80>
 8004930:	887b      	ldrh	r3, [r7, #2]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d103      	bne.n	800493e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800493c:	e1c0      	b.n	8004cc0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b04      	cmp	r3, #4
 8004948:	d003      	beq.n	8004952 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2205      	movs	r2, #5
 800494e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	887a      	ldrh	r2, [r7, #2]
 8004962:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	887a      	ldrh	r2, [r7, #2]
 800496a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	887a      	ldrh	r2, [r7, #2]
 8004978:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	887a      	ldrh	r2, [r7, #2]
 800497e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004994:	d802      	bhi.n	800499c <HAL_SPI_TransmitReceive+0xe6>
 8004996:	8a3b      	ldrh	r3, [r7, #16]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d908      	bls.n	80049ae <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049aa:	605a      	str	r2, [r3, #4]
 80049ac:	e007      	b.n	80049be <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049bc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c8:	2b40      	cmp	r3, #64	; 0x40
 80049ca:	d007      	beq.n	80049dc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049e4:	d97c      	bls.n	8004ae0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d002      	beq.n	80049f4 <HAL_SPI_TransmitReceive+0x13e>
 80049ee:	8a7b      	ldrh	r3, [r7, #18]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d169      	bne.n	8004ac8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f8:	881a      	ldrh	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	1c9a      	adds	r2, r3, #2
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a18:	e056      	b.n	8004ac8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d11b      	bne.n	8004a60 <HAL_SPI_TransmitReceive+0x1aa>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d016      	beq.n	8004a60 <HAL_SPI_TransmitReceive+0x1aa>
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d113      	bne.n	8004a60 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3c:	881a      	ldrh	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a48:	1c9a      	adds	r2, r3, #2
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d11c      	bne.n	8004aa8 <HAL_SPI_TransmitReceive+0x1f2>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d016      	beq.n	8004aa8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68da      	ldr	r2, [r3, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a84:	b292      	uxth	r2, r2
 8004a86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	1c9a      	adds	r2, r3, #2
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004aa8:	f7fd f8da 	bl	8001c60 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d807      	bhi.n	8004ac8 <HAL_SPI_TransmitReceive+0x212>
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abe:	d003      	beq.n	8004ac8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004ac6:	e0fb      	b.n	8004cc0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1a3      	bne.n	8004a1a <HAL_SPI_TransmitReceive+0x164>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d19d      	bne.n	8004a1a <HAL_SPI_TransmitReceive+0x164>
 8004ade:	e0df      	b.n	8004ca0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_SPI_TransmitReceive+0x23a>
 8004ae8:	8a7b      	ldrh	r3, [r7, #18]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	f040 80cb 	bne.w	8004c86 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d912      	bls.n	8004b20 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	881a      	ldrh	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0a:	1c9a      	adds	r2, r3, #2
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	3b02      	subs	r3, #2
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b1e:	e0b2      	b.n	8004c86 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	330c      	adds	r3, #12
 8004b2a:	7812      	ldrb	r2, [r2, #0]
 8004b2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b46:	e09e      	b.n	8004c86 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d134      	bne.n	8004bc0 <HAL_SPI_TransmitReceive+0x30a>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d02f      	beq.n	8004bc0 <HAL_SPI_TransmitReceive+0x30a>
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d12c      	bne.n	8004bc0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d912      	bls.n	8004b96 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b74:	881a      	ldrh	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b80:	1c9a      	adds	r2, r3, #2
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	3b02      	subs	r3, #2
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b94:	e012      	b.n	8004bbc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	330c      	adds	r3, #12
 8004ba0:	7812      	ldrb	r2, [r2, #0]
 8004ba2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d148      	bne.n	8004c60 <HAL_SPI_TransmitReceive+0x3aa>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d042      	beq.n	8004c60 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d923      	bls.n	8004c2e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	b292      	uxth	r2, r2
 8004bf2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	1c9a      	adds	r2, r3, #2
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b02      	subs	r3, #2
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d81f      	bhi.n	8004c5c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c2a:	605a      	str	r2, [r3, #4]
 8004c2c:	e016      	b.n	8004c5c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f103 020c 	add.w	r2, r3, #12
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	7812      	ldrb	r2, [r2, #0]
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	1c5a      	adds	r2, r3, #1
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c60:	f7fc fffe 	bl	8001c60 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d803      	bhi.n	8004c78 <HAL_SPI_TransmitReceive+0x3c2>
 8004c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c76:	d102      	bne.n	8004c7e <HAL_SPI_TransmitReceive+0x3c8>
 8004c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d103      	bne.n	8004c86 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004c84:	e01c      	b.n	8004cc0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f47f af5b 	bne.w	8004b48 <HAL_SPI_TransmitReceive+0x292>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f47f af54 	bne.w	8004b48 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ca0:	69fa      	ldr	r2, [r7, #28]
 8004ca2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 fe45 	bl	8005934 <SPI_EndRxTxTransaction>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d006      	beq.n	8004cbe <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	661a      	str	r2, [r3, #96]	; 0x60
 8004cbc:	e000      	b.n	8004cc0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004cbe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004cd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3728      	adds	r7, #40	; 0x28
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004cea:	2300      	movs	r3, #0
 8004cec:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d101      	bne.n	8004cfc <HAL_SPI_Transmit_IT+0x20>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e072      	b.n	8004de2 <HAL_SPI_Transmit_IT+0x106>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <HAL_SPI_Transmit_IT+0x34>
 8004d0a:	88fb      	ldrh	r3, [r7, #6]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d102      	bne.n	8004d16 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d14:	e060      	b.n	8004dd8 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d002      	beq.n	8004d28 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004d22:	2302      	movs	r3, #2
 8004d24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d26:	e057      	b.n	8004dd8 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2203      	movs	r2, #3
 8004d2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	88fa      	ldrh	r2, [r7, #6]
 8004d40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	88fa      	ldrh	r2, [r7, #6]
 8004d46:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d6c:	d903      	bls.n	8004d76 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	4a1f      	ldr	r2, [pc, #124]	; (8004df0 <HAL_SPI_Transmit_IT+0x114>)
 8004d72:	651a      	str	r2, [r3, #80]	; 0x50
 8004d74:	e002      	b.n	8004d7c <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4a1e      	ldr	r2, [pc, #120]	; (8004df4 <HAL_SPI_Transmit_IT+0x118>)
 8004d7a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d84:	d10f      	bne.n	8004da6 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004da4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004db4:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc0:	2b40      	cmp	r3, #64	; 0x40
 8004dc2:	d008      	beq.n	8004dd6 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	e000      	b.n	8004dd8 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8004dd6:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	371c      	adds	r7, #28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	08005603 	.word	0x08005603
 8004df4:	080055bd 	.word	0x080055bd

08004df8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	4613      	mov	r3, r2
 8004e04:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d110      	bne.n	8004e34 <HAL_SPI_Receive_IT+0x3c>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e1a:	d10b      	bne.n	8004e34 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2204      	movs	r2, #4
 8004e20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8004e24:	88fb      	ldrh	r3, [r7, #6]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	68b9      	ldr	r1, [r7, #8]
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 f894 	bl	8004f58 <HAL_SPI_TransmitReceive_IT>
 8004e30:	4603      	mov	r3, r0
 8004e32:	e089      	b.n	8004f48 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d101      	bne.n	8004e42 <HAL_SPI_Receive_IT+0x4a>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	e082      	b.n	8004f48 <HAL_SPI_Receive_IT+0x150>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d002      	beq.n	8004e5c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8004e56:	2302      	movs	r3, #2
 8004e58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e5a:	e070      	b.n	8004f3e <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_SPI_Receive_IT+0x70>
 8004e62:	88fb      	ldrh	r3, [r7, #6]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d102      	bne.n	8004e6e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e6c:	e067      	b.n	8004f3e <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2204      	movs	r2, #4
 8004e72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	88fa      	ldrh	r2, [r7, #6]
 8004e86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	88fa      	ldrh	r2, [r7, #6]
 8004e8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004eb2:	d90b      	bls.n	8004ecc <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ec2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4a22      	ldr	r2, [pc, #136]	; (8004f50 <HAL_SPI_Receive_IT+0x158>)
 8004ec8:	64da      	str	r2, [r3, #76]	; 0x4c
 8004eca:	e00a      	b.n	8004ee2 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004eda:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4a1d      	ldr	r2, [pc, #116]	; (8004f54 <HAL_SPI_Receive_IT+0x15c>)
 8004ee0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eea:	d10f      	bne.n	8004f0c <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004efa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f0a:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004f1a:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f26:	2b40      	cmp	r3, #64	; 0x40
 8004f28:	d008      	beq.n	8004f3c <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	e000      	b.n	8004f3e <HAL_SPI_Receive_IT+0x146>
  }

error :
 8004f3c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	08005571 	.word	0x08005571
 8004f54:	08005521 	.word	0x08005521

08004f58 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
 8004f64:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d101      	bne.n	8004f78 <HAL_SPI_TransmitReceive_IT+0x20>
 8004f74:	2302      	movs	r3, #2
 8004f76:	e091      	b.n	800509c <HAL_SPI_TransmitReceive_IT+0x144>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f86:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f8e:	7dbb      	ldrb	r3, [r7, #22]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d00d      	beq.n	8004fb0 <HAL_SPI_TransmitReceive_IT+0x58>
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f9a:	d106      	bne.n	8004faa <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d102      	bne.n	8004faa <HAL_SPI_TransmitReceive_IT+0x52>
 8004fa4:	7dbb      	ldrb	r3, [r7, #22]
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d002      	beq.n	8004fb0 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8004faa:	2302      	movs	r3, #2
 8004fac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fae:	e070      	b.n	8005092 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d005      	beq.n	8004fc2 <HAL_SPI_TransmitReceive_IT+0x6a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <HAL_SPI_TransmitReceive_IT+0x6a>
 8004fbc:	887b      	ldrh	r3, [r7, #2]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d102      	bne.n	8004fc8 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fc6:	e064      	b.n	8005092 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d003      	beq.n	8004fdc <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2205      	movs	r2, #5
 8004fd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	887a      	ldrh	r2, [r7, #2]
 8004fec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	887a      	ldrh	r2, [r7, #2]
 8004ff2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	887a      	ldrh	r2, [r7, #2]
 8004ffe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	887a      	ldrh	r2, [r7, #2]
 8005006:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005012:	d906      	bls.n	8005022 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4a24      	ldr	r2, [pc, #144]	; (80050a8 <HAL_SPI_TransmitReceive_IT+0x150>)
 8005018:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4a23      	ldr	r2, [pc, #140]	; (80050ac <HAL_SPI_TransmitReceive_IT+0x154>)
 800501e:	651a      	str	r2, [r3, #80]	; 0x50
 8005020:	e005      	b.n	800502e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4a22      	ldr	r2, [pc, #136]	; (80050b0 <HAL_SPI_TransmitReceive_IT+0x158>)
 8005026:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4a22      	ldr	r2, [pc, #136]	; (80050b4 <HAL_SPI_TransmitReceive_IT+0x15c>)
 800502c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005036:	d802      	bhi.n	800503e <HAL_SPI_TransmitReceive_IT+0xe6>
 8005038:	887b      	ldrh	r3, [r7, #2]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d908      	bls.n	8005050 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800504c:	605a      	str	r2, [r3, #4]
 800504e:	e007      	b.n	8005060 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800505e:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800506e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507a:	2b40      	cmp	r3, #64	; 0x40
 800507c:	d008      	beq.n	8005090 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	e000      	b.n	8005092 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8005090:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800509a:	7dfb      	ldrb	r3, [r7, #23]
}
 800509c:	4618      	mov	r0, r3
 800509e:	371c      	adds	r7, #28
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	0800545b 	.word	0x0800545b
 80050ac:	080054c1 	.word	0x080054c1
 80050b0:	0800530b 	.word	0x0800530b
 80050b4:	080053c9 	.word	0x080053c9

080050b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	099b      	lsrs	r3, r3, #6
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10f      	bne.n	80050fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	099b      	lsrs	r3, r3, #6
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d004      	beq.n	80050fc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	4798      	blx	r3
    return;
 80050fa:	e0d7      	b.n	80052ac <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	085b      	lsrs	r3, r3, #1
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00a      	beq.n	800511e <HAL_SPI_IRQHandler+0x66>
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	09db      	lsrs	r3, r3, #7
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d004      	beq.n	800511e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	4798      	blx	r3
    return;
 800511c:	e0c6      	b.n	80052ac <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	095b      	lsrs	r3, r3, #5
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10c      	bne.n	8005144 <HAL_SPI_IRQHandler+0x8c>
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	099b      	lsrs	r3, r3, #6
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	0a1b      	lsrs	r3, r3, #8
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 80b4 	beq.w	80052ac <HAL_SPI_IRQHandler+0x1f4>
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	095b      	lsrs	r3, r3, #5
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 80ad 	beq.w	80052ac <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	099b      	lsrs	r3, r3, #6
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d023      	beq.n	80051a6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b03      	cmp	r3, #3
 8005168:	d011      	beq.n	800518e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800516e:	f043 0204 	orr.w	r2, r3, #4
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	617b      	str	r3, [r7, #20]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	e00b      	b.n	80051a6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800518e:	2300      	movs	r3, #0
 8005190:	613b      	str	r3, [r7, #16]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	613b      	str	r3, [r7, #16]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	613b      	str	r3, [r7, #16]
 80051a2:	693b      	ldr	r3, [r7, #16]
        return;
 80051a4:	e082      	b.n	80052ac <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	095b      	lsrs	r3, r3, #5
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d014      	beq.n	80051dc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051b6:	f043 0201 	orr.w	r2, r3, #1
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80051be:	2300      	movs	r3, #0
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	0a1b      	lsrs	r3, r3, #8
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00c      	beq.n	8005202 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ec:	f043 0208 	orr.w	r2, r3, #8
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80051f4:	2300      	movs	r3, #0
 80051f6:	60bb      	str	r3, [r7, #8]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	60bb      	str	r3, [r7, #8]
 8005200:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005206:	2b00      	cmp	r3, #0
 8005208:	d04f      	beq.n	80052aa <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005218:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d104      	bne.n	8005236 <HAL_SPI_IRQHandler+0x17e>
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d034      	beq.n	80052a0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0203 	bic.w	r2, r2, #3
 8005244:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524a:	2b00      	cmp	r3, #0
 800524c:	d011      	beq.n	8005272 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005252:	4a18      	ldr	r2, [pc, #96]	; (80052b4 <HAL_SPI_IRQHandler+0x1fc>)
 8005254:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525a:	4618      	mov	r0, r3
 800525c:	f7fc ff5c 	bl	8002118 <HAL_DMA_Abort_IT>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d005      	beq.n	8005272 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800526a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005276:	2b00      	cmp	r3, #0
 8005278:	d016      	beq.n	80052a8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527e:	4a0d      	ldr	r2, [pc, #52]	; (80052b4 <HAL_SPI_IRQHandler+0x1fc>)
 8005280:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005286:	4618      	mov	r0, r3
 8005288:	f7fc ff46 	bl	8002118 <HAL_DMA_Abort_IT>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005296:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800529e:	e003      	b.n	80052a8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f813 	bl	80052cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80052a6:	e000      	b.n	80052aa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80052a8:	bf00      	nop
    return;
 80052aa:	bf00      	nop
  }
}
 80052ac:	3720      	adds	r7, #32
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	080052e1 	.word	0x080052e1

080052b8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f7ff ffe5 	bl	80052cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005302:	bf00      	nop
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b082      	sub	sp, #8
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b01      	cmp	r3, #1
 800531c:	d923      	bls.n	8005366 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68da      	ldr	r2, [r3, #12]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	b292      	uxth	r2, r2
 800532a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005330:	1c9a      	adds	r2, r3, #2
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b02      	subs	r3, #2
 8005340:	b29a      	uxth	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800534e:	b29b      	uxth	r3, r3
 8005350:	2b01      	cmp	r3, #1
 8005352:	d11f      	bne.n	8005394 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005362:	605a      	str	r2, [r3, #4]
 8005364:	e016      	b.n	8005394 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f103 020c 	add.w	r2, r3, #12
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	7812      	ldrb	r2, [r2, #0]
 8005374:	b2d2      	uxtb	r2, r2
 8005376:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005388:	b29b      	uxth	r3, r3
 800538a:	3b01      	subs	r3, #1
 800538c:	b29a      	uxth	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800539a:	b29b      	uxth	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10f      	bne.n	80053c0 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80053ae:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d102      	bne.n	80053c0 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fb00 	bl	80059c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80053c0:	bf00      	nop
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d912      	bls.n	8005400 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	881a      	ldrh	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ea:	1c9a      	adds	r2, r3, #2
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3b02      	subs	r3, #2
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053fe:	e012      	b.n	8005426 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	330c      	adds	r3, #12
 800540a:	7812      	ldrb	r2, [r2, #0]
 800540c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800541c:	b29b      	uxth	r3, r3
 800541e:	3b01      	subs	r3, #1
 8005420:	b29a      	uxth	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800542a:	b29b      	uxth	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d110      	bne.n	8005452 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800543e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005446:	b29b      	uxth	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d102      	bne.n	8005452 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 fab7 	bl	80059c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005452:	bf00      	nop
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b082      	sub	sp, #8
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68da      	ldr	r2, [r3, #12]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	b292      	uxth	r2, r2
 800546e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005474:	1c9a      	adds	r2, r3, #2
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005480:	b29b      	uxth	r3, r3
 8005482:	3b01      	subs	r3, #1
 8005484:	b29a      	uxth	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005492:	b29b      	uxth	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10f      	bne.n	80054b8 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054a6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d102      	bne.n	80054b8 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fa84 	bl	80059c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80054b8:	bf00      	nop
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054cc:	881a      	ldrh	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	1c9a      	adds	r2, r3, #2
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d110      	bne.n	8005518 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005504:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800550c:	b29b      	uxth	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d102      	bne.n	8005518 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fa54 	bl	80059c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005518:	bf00      	nop
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f103 020c 	add.w	r2, r3, #12
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005534:	7812      	ldrb	r2, [r2, #0]
 8005536:	b2d2      	uxtb	r2, r2
 8005538:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800554a:	b29b      	uxth	r3, r3
 800554c:	3b01      	subs	r3, #1
 800554e:	b29a      	uxth	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800555c:	b29b      	uxth	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d102      	bne.n	8005568 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 fa6e 	bl	8005a44 <SPI_CloseRx_ISR>
  }
}
 8005568:	bf00      	nop
 800556a:	3708      	adds	r7, #8
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005582:	b292      	uxth	r2, r2
 8005584:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	1c9a      	adds	r2, r3, #2
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005596:	b29b      	uxth	r3, r3
 8005598:	3b01      	subs	r3, #1
 800559a:	b29a      	uxth	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d102      	bne.n	80055b4 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fa48 	bl	8005a44 <SPI_CloseRx_ISR>
  }
}
 80055b4:	bf00      	nop
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	330c      	adds	r3, #12
 80055ce:	7812      	ldrb	r2, [r2, #0]
 80055d0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	3b01      	subs	r3, #1
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d102      	bne.n	80055fa <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fa55 	bl	8005aa4 <SPI_CloseTx_ISR>
  }
}
 80055fa:	bf00      	nop
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b082      	sub	sp, #8
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560e:	881a      	ldrh	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561a:	1c9a      	adds	r2, r3, #2
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005624:	b29b      	uxth	r3, r3
 8005626:	3b01      	subs	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005632:	b29b      	uxth	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	d102      	bne.n	800563e <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 fa33 	bl	8005aa4 <SPI_CloseTx_ISR>
  }
}
 800563e:	bf00      	nop
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
	...

08005648 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b088      	sub	sp, #32
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	603b      	str	r3, [r7, #0]
 8005654:	4613      	mov	r3, r2
 8005656:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005658:	f7fc fb02 	bl	8001c60 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005660:	1a9b      	subs	r3, r3, r2
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	4413      	add	r3, r2
 8005666:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005668:	f7fc fafa 	bl	8001c60 <HAL_GetTick>
 800566c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800566e:	4b39      	ldr	r3, [pc, #228]	; (8005754 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	015b      	lsls	r3, r3, #5
 8005674:	0d1b      	lsrs	r3, r3, #20
 8005676:	69fa      	ldr	r2, [r7, #28]
 8005678:	fb02 f303 	mul.w	r3, r2, r3
 800567c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800567e:	e054      	b.n	800572a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005686:	d050      	beq.n	800572a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005688:	f7fc faea 	bl	8001c60 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	69fa      	ldr	r2, [r7, #28]
 8005694:	429a      	cmp	r2, r3
 8005696:	d902      	bls.n	800569e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d13d      	bne.n	800571a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056b6:	d111      	bne.n	80056dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056c0:	d004      	beq.n	80056cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ca:	d107      	bne.n	80056dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056e4:	d10f      	bne.n	8005706 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005704:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e017      	b.n	800574a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	3b01      	subs	r3, #1
 8005728:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4013      	ands	r3, r2
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	429a      	cmp	r2, r3
 8005738:	bf0c      	ite	eq
 800573a:	2301      	moveq	r3, #1
 800573c:	2300      	movne	r3, #0
 800573e:	b2db      	uxtb	r3, r3
 8005740:	461a      	mov	r2, r3
 8005742:	79fb      	ldrb	r3, [r7, #7]
 8005744:	429a      	cmp	r2, r3
 8005746:	d19b      	bne.n	8005680 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3720      	adds	r7, #32
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	20000000 	.word	0x20000000

08005758 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b08a      	sub	sp, #40	; 0x28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
 8005764:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800576a:	f7fc fa79 	bl	8001c60 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	1a9b      	subs	r3, r3, r2
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	4413      	add	r3, r2
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800577a:	f7fc fa71 	bl	8001c60 <HAL_GetTick>
 800577e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	330c      	adds	r3, #12
 8005786:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005788:	4b3d      	ldr	r3, [pc, #244]	; (8005880 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	4613      	mov	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	00da      	lsls	r2, r3, #3
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	0d1b      	lsrs	r3, r3, #20
 8005798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800579a:	fb02 f303 	mul.w	r3, r2, r3
 800579e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80057a0:	e060      	b.n	8005864 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80057a8:	d107      	bne.n	80057ba <SPI_WaitFifoStateUntilTimeout+0x62>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d104      	bne.n	80057ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c0:	d050      	beq.n	8005864 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057c2:	f7fc fa4d 	bl	8001c60 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d902      	bls.n	80057d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d13d      	bne.n	8005854 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057f0:	d111      	bne.n	8005816 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057fa:	d004      	beq.n	8005806 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005804:	d107      	bne.n	8005816 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005814:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800581e:	d10f      	bne.n	8005840 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800583e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e010      	b.n	8005876 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800585a:	2300      	movs	r3, #0
 800585c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	3b01      	subs	r3, #1
 8005862:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689a      	ldr	r2, [r3, #8]
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	4013      	ands	r3, r2
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	429a      	cmp	r2, r3
 8005872:	d196      	bne.n	80057a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3728      	adds	r7, #40	; 0x28
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20000000 	.word	0x20000000

08005884 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af02      	add	r7, sp, #8
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005898:	d111      	bne.n	80058be <SPI_EndRxTransaction+0x3a>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a2:	d004      	beq.n	80058ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ac:	d107      	bne.n	80058be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058bc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2200      	movs	r2, #0
 80058c6:	2180      	movs	r1, #128	; 0x80
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f7ff febd 	bl	8005648 <SPI_WaitFlagStateUntilTimeout>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d007      	beq.n	80058e4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058d8:	f043 0220 	orr.w	r2, r3, #32
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e023      	b.n	800592c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058ec:	d11d      	bne.n	800592a <SPI_EndRxTransaction+0xa6>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058f6:	d004      	beq.n	8005902 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005900:	d113      	bne.n	800592a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2200      	movs	r2, #0
 800590a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f7ff ff22 	bl	8005758 <SPI_WaitFifoStateUntilTimeout>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d007      	beq.n	800592a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800591e:	f043 0220 	orr.w	r2, r3, #32
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e000      	b.n	800592c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af02      	add	r7, sp, #8
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2200      	movs	r2, #0
 8005948:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f7ff ff03 	bl	8005758 <SPI_WaitFifoStateUntilTimeout>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d007      	beq.n	8005968 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800595c:	f043 0220 	orr.w	r2, r3, #32
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e027      	b.n	80059b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	2200      	movs	r2, #0
 8005970:	2180      	movs	r1, #128	; 0x80
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f7ff fe68 	bl	8005648 <SPI_WaitFlagStateUntilTimeout>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d007      	beq.n	800598e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005982:	f043 0220 	orr.w	r2, r3, #32
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e014      	b.n	80059b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2200      	movs	r2, #0
 8005996:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f7ff fedc 	bl	8005758 <SPI_WaitFifoStateUntilTimeout>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d007      	beq.n	80059b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059aa:	f043 0220 	orr.w	r2, r3, #32
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e000      	b.n	80059b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059c8:	f7fc f94a 	bl	8001c60 <HAL_GetTick>
 80059cc:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 0220 	bic.w	r2, r2, #32
 80059dc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	2164      	movs	r1, #100	; 0x64
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7ff ffa6 	bl	8005934 <SPI_EndRxTxTransaction>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d005      	beq.n	80059fa <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f2:	f043 0220 	orr.w	r2, r3, #32
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d115      	bne.n	8005a2e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d107      	bne.n	8005a1e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f003 f966 	bl	8008ce8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005a1c:	e00e      	b.n	8005a3c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7ff fc46 	bl	80052b8 <HAL_SPI_TxRxCpltCallback>
}
 8005a2c:	e006      	b.n	8005a3c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7ff fc48 	bl	80052cc <HAL_SPI_ErrorCallback>
}
 8005a3c:	bf00      	nop
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a5a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8005a5c:	f7fc f900 	bl	8001c60 <HAL_GetTick>
 8005a60:	4603      	mov	r3, r0
 8005a62:	461a      	mov	r2, r3
 8005a64:	2164      	movs	r1, #100	; 0x64
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7ff ff0c 	bl	8005884 <SPI_EndRxTransaction>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d005      	beq.n	8005a7e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a76:	f043 0220 	orr.w	r2, r3, #32
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d103      	bne.n	8005a96 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f003 f92a 	bl	8008ce8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005a94:	e002      	b.n	8005a9c <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7ff fc18 	bl	80052cc <HAL_SPI_ErrorCallback>
}
 8005a9c:	bf00      	nop
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005aac:	f7fc f8d8 	bl	8001c60 <HAL_GetTick>
 8005ab0:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ac0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	2164      	movs	r1, #100	; 0x64
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7ff ff34 	bl	8005934 <SPI_EndRxTxTransaction>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d005      	beq.n	8005ade <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad6:	f043 0220 	orr.w	r2, r3, #32
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10a      	bne.n	8005afc <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60bb      	str	r3, [r7, #8]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	60bb      	str	r3, [r7, #8]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	60bb      	str	r3, [r7, #8]
 8005afa:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d003      	beq.n	8005b14 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7ff fbdd 	bl	80052cc <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005b12:	e002      	b.n	8005b1a <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f003 f8fb 	bl	8008d10 <HAL_SPI_TxCpltCallback>
}
 8005b1a:	bf00      	nop
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b082      	sub	sp, #8
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e049      	b.n	8005bc8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d106      	bne.n	8005b4e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 f841 	bl	8005bd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2202      	movs	r2, #2
 8005b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4610      	mov	r0, r2
 8005b62:	f000 f9f7 	bl	8005f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d001      	beq.n	8005bfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e04f      	b.n	8005c9c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68da      	ldr	r2, [r3, #12]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
 8005c12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a23      	ldr	r2, [pc, #140]	; (8005ca8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d01d      	beq.n	8005c5a <HAL_TIM_Base_Start_IT+0x76>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c26:	d018      	beq.n	8005c5a <HAL_TIM_Base_Start_IT+0x76>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a1f      	ldr	r2, [pc, #124]	; (8005cac <HAL_TIM_Base_Start_IT+0xc8>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d013      	beq.n	8005c5a <HAL_TIM_Base_Start_IT+0x76>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a1e      	ldr	r2, [pc, #120]	; (8005cb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00e      	beq.n	8005c5a <HAL_TIM_Base_Start_IT+0x76>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a1c      	ldr	r2, [pc, #112]	; (8005cb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d009      	beq.n	8005c5a <HAL_TIM_Base_Start_IT+0x76>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a1b      	ldr	r2, [pc, #108]	; (8005cb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d004      	beq.n	8005c5a <HAL_TIM_Base_Start_IT+0x76>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a19      	ldr	r2, [pc, #100]	; (8005cbc <HAL_TIM_Base_Start_IT+0xd8>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d115      	bne.n	8005c86 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	4b17      	ldr	r3, [pc, #92]	; (8005cc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c62:	4013      	ands	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b06      	cmp	r3, #6
 8005c6a:	d015      	beq.n	8005c98 <HAL_TIM_Base_Start_IT+0xb4>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c72:	d011      	beq.n	8005c98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0201 	orr.w	r2, r2, #1
 8005c82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c84:	e008      	b.n	8005c98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f042 0201 	orr.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	e000      	b.n	8005c9a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	40012c00 	.word	0x40012c00
 8005cac:	40000400 	.word	0x40000400
 8005cb0:	40000800 	.word	0x40000800
 8005cb4:	40000c00 	.word	0x40000c00
 8005cb8:	40013400 	.word	0x40013400
 8005cbc:	40014000 	.word	0x40014000
 8005cc0:	00010007 	.word	0x00010007

08005cc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d122      	bne.n	8005d20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d11b      	bne.n	8005d20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f06f 0202 	mvn.w	r2, #2
 8005cf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	f003 0303 	and.w	r3, r3, #3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f905 	bl	8005f16 <HAL_TIM_IC_CaptureCallback>
 8005d0c:	e005      	b.n	8005d1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f8f7 	bl	8005f02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f908 	bl	8005f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	f003 0304 	and.w	r3, r3, #4
 8005d2a:	2b04      	cmp	r3, #4
 8005d2c:	d122      	bne.n	8005d74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	2b04      	cmp	r3, #4
 8005d3a:	d11b      	bne.n	8005d74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f06f 0204 	mvn.w	r2, #4
 8005d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2202      	movs	r2, #2
 8005d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f8db 	bl	8005f16 <HAL_TIM_IC_CaptureCallback>
 8005d60:	e005      	b.n	8005d6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f8cd 	bl	8005f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f8de 	bl	8005f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f003 0308 	and.w	r3, r3, #8
 8005d7e:	2b08      	cmp	r3, #8
 8005d80:	d122      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f003 0308 	and.w	r3, r3, #8
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d11b      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f06f 0208 	mvn.w	r2, #8
 8005d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2204      	movs	r2, #4
 8005d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	f003 0303 	and.w	r3, r3, #3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f8b1 	bl	8005f16 <HAL_TIM_IC_CaptureCallback>
 8005db4:	e005      	b.n	8005dc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f8a3 	bl	8005f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f8b4 	bl	8005f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f003 0310 	and.w	r3, r3, #16
 8005dd2:	2b10      	cmp	r3, #16
 8005dd4:	d122      	bne.n	8005e1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f003 0310 	and.w	r3, r3, #16
 8005de0:	2b10      	cmp	r3, #16
 8005de2:	d11b      	bne.n	8005e1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f06f 0210 	mvn.w	r2, #16
 8005dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2208      	movs	r2, #8
 8005df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f887 	bl	8005f16 <HAL_TIM_IC_CaptureCallback>
 8005e08:	e005      	b.n	8005e16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f879 	bl	8005f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f88a 	bl	8005f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d10e      	bne.n	8005e48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d107      	bne.n	8005e48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f06f 0201 	mvn.w	r2, #1
 8005e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7fb f8d6 	bl	8000ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e52:	2b80      	cmp	r3, #128	; 0x80
 8005e54:	d10e      	bne.n	8005e74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e60:	2b80      	cmp	r3, #128	; 0x80
 8005e62:	d107      	bne.n	8005e74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f914 	bl	800609c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e82:	d10e      	bne.n	8005ea2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e8e:	2b80      	cmp	r3, #128	; 0x80
 8005e90:	d107      	bne.n	8005ea2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f907 	bl	80060b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eac:	2b40      	cmp	r3, #64	; 0x40
 8005eae:	d10e      	bne.n	8005ece <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eba:	2b40      	cmp	r3, #64	; 0x40
 8005ebc:	d107      	bne.n	8005ece <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f838 	bl	8005f3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	f003 0320 	and.w	r3, r3, #32
 8005ed8:	2b20      	cmp	r3, #32
 8005eda:	d10e      	bne.n	8005efa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f003 0320 	and.w	r3, r3, #32
 8005ee6:	2b20      	cmp	r3, #32
 8005ee8:	d107      	bne.n	8005efa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f06f 0220 	mvn.w	r2, #32
 8005ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f8c7 	bl	8006088 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005efa:	bf00      	nop
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f46:	bf00      	nop
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
	...

08005f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a40      	ldr	r2, [pc, #256]	; (8006068 <TIM_Base_SetConfig+0x114>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d013      	beq.n	8005f94 <TIM_Base_SetConfig+0x40>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f72:	d00f      	beq.n	8005f94 <TIM_Base_SetConfig+0x40>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a3d      	ldr	r2, [pc, #244]	; (800606c <TIM_Base_SetConfig+0x118>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d00b      	beq.n	8005f94 <TIM_Base_SetConfig+0x40>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a3c      	ldr	r2, [pc, #240]	; (8006070 <TIM_Base_SetConfig+0x11c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d007      	beq.n	8005f94 <TIM_Base_SetConfig+0x40>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a3b      	ldr	r2, [pc, #236]	; (8006074 <TIM_Base_SetConfig+0x120>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d003      	beq.n	8005f94 <TIM_Base_SetConfig+0x40>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a3a      	ldr	r2, [pc, #232]	; (8006078 <TIM_Base_SetConfig+0x124>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d108      	bne.n	8005fa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a2f      	ldr	r2, [pc, #188]	; (8006068 <TIM_Base_SetConfig+0x114>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d01f      	beq.n	8005fee <TIM_Base_SetConfig+0x9a>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb4:	d01b      	beq.n	8005fee <TIM_Base_SetConfig+0x9a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a2c      	ldr	r2, [pc, #176]	; (800606c <TIM_Base_SetConfig+0x118>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d017      	beq.n	8005fee <TIM_Base_SetConfig+0x9a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a2b      	ldr	r2, [pc, #172]	; (8006070 <TIM_Base_SetConfig+0x11c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d013      	beq.n	8005fee <TIM_Base_SetConfig+0x9a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a2a      	ldr	r2, [pc, #168]	; (8006074 <TIM_Base_SetConfig+0x120>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d00f      	beq.n	8005fee <TIM_Base_SetConfig+0x9a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a29      	ldr	r2, [pc, #164]	; (8006078 <TIM_Base_SetConfig+0x124>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d00b      	beq.n	8005fee <TIM_Base_SetConfig+0x9a>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a28      	ldr	r2, [pc, #160]	; (800607c <TIM_Base_SetConfig+0x128>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d007      	beq.n	8005fee <TIM_Base_SetConfig+0x9a>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a27      	ldr	r2, [pc, #156]	; (8006080 <TIM_Base_SetConfig+0x12c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d003      	beq.n	8005fee <TIM_Base_SetConfig+0x9a>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a26      	ldr	r2, [pc, #152]	; (8006084 <TIM_Base_SetConfig+0x130>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d108      	bne.n	8006000 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a10      	ldr	r2, [pc, #64]	; (8006068 <TIM_Base_SetConfig+0x114>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d00f      	beq.n	800604c <TIM_Base_SetConfig+0xf8>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a12      	ldr	r2, [pc, #72]	; (8006078 <TIM_Base_SetConfig+0x124>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d00b      	beq.n	800604c <TIM_Base_SetConfig+0xf8>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a11      	ldr	r2, [pc, #68]	; (800607c <TIM_Base_SetConfig+0x128>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d007      	beq.n	800604c <TIM_Base_SetConfig+0xf8>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a10      	ldr	r2, [pc, #64]	; (8006080 <TIM_Base_SetConfig+0x12c>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d003      	beq.n	800604c <TIM_Base_SetConfig+0xf8>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a0f      	ldr	r2, [pc, #60]	; (8006084 <TIM_Base_SetConfig+0x130>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d103      	bne.n	8006054 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	691a      	ldr	r2, [r3, #16]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	615a      	str	r2, [r3, #20]
}
 800605a:	bf00      	nop
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	40012c00 	.word	0x40012c00
 800606c:	40000400 	.word	0x40000400
 8006070:	40000800 	.word	0x40000800
 8006074:	40000c00 	.word	0x40000c00
 8006078:	40013400 	.word	0x40013400
 800607c:	40014000 	.word	0x40014000
 8006080:	40014400 	.word	0x40014400
 8006084:	40014800 	.word	0x40014800

08006088 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e040      	b.n	8006158 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d106      	bne.n	80060ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7fb f92c 	bl	8001344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2224      	movs	r2, #36	; 0x24
 80060f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 0201 	bic.w	r2, r2, #1
 8006100:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fb9c 	bl	8006840 <UART_SetConfig>
 8006108:	4603      	mov	r3, r0
 800610a:	2b01      	cmp	r3, #1
 800610c:	d101      	bne.n	8006112 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e022      	b.n	8006158 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	2b00      	cmp	r3, #0
 8006118:	d002      	beq.n	8006120 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fe48 	bl	8006db0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800612e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689a      	ldr	r2, [r3, #8]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800613e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 0201 	orr.w	r2, r2, #1
 800614e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fecf 	bl	8006ef4 <UART_CheckIdleState>
 8006156:	4603      	mov	r3, r0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006160:	b480      	push	{r7}
 8006162:	b08b      	sub	sp, #44	; 0x2c
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	4613      	mov	r3, r2
 800616c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006172:	2b20      	cmp	r3, #32
 8006174:	d156      	bne.n	8006224 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <HAL_UART_Transmit_IT+0x22>
 800617c:	88fb      	ldrh	r3, [r7, #6]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e04f      	b.n	8006226 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800618c:	2b01      	cmp	r3, #1
 800618e:	d101      	bne.n	8006194 <HAL_UART_Transmit_IT+0x34>
 8006190:	2302      	movs	r3, #2
 8006192:	e048      	b.n	8006226 <HAL_UART_Transmit_IT+0xc6>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	88fa      	ldrh	r2, [r7, #6]
 80061a6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	88fa      	ldrh	r2, [r7, #6]
 80061ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2221      	movs	r2, #33	; 0x21
 80061c4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ce:	d107      	bne.n	80061e0 <HAL_UART_Transmit_IT+0x80>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d103      	bne.n	80061e0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	4a16      	ldr	r2, [pc, #88]	; (8006234 <HAL_UART_Transmit_IT+0xd4>)
 80061dc:	669a      	str	r2, [r3, #104]	; 0x68
 80061de:	e002      	b.n	80061e6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	4a15      	ldr	r2, [pc, #84]	; (8006238 <HAL_UART_Transmit_IT+0xd8>)
 80061e4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	e853 3f00 	ldrex	r3, [r3]
 80061fa:	613b      	str	r3, [r7, #16]
   return(result);
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006202:	627b      	str	r3, [r7, #36]	; 0x24
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	461a      	mov	r2, r3
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	623b      	str	r3, [r7, #32]
 800620e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006210:	69f9      	ldr	r1, [r7, #28]
 8006212:	6a3a      	ldr	r2, [r7, #32]
 8006214:	e841 2300 	strex	r3, r2, [r1]
 8006218:	61bb      	str	r3, [r7, #24]
   return(result);
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1e6      	bne.n	80061ee <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	e000      	b.n	8006226 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006224:	2302      	movs	r3, #2
  }
}
 8006226:	4618      	mov	r0, r3
 8006228:	372c      	adds	r7, #44	; 0x2c
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	080072b9 	.word	0x080072b9
 8006238:	08007201 	.word	0x08007201

0800623c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b0ba      	sub	sp, #232	; 0xe8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006262:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006266:	f640 030f 	movw	r3, #2063	; 0x80f
 800626a:	4013      	ands	r3, r2
 800626c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006270:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006274:	2b00      	cmp	r3, #0
 8006276:	d115      	bne.n	80062a4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800627c:	f003 0320 	and.w	r3, r3, #32
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00f      	beq.n	80062a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006288:	f003 0320 	and.w	r3, r3, #32
 800628c:	2b00      	cmp	r3, #0
 800628e:	d009      	beq.n	80062a4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 82a6 	beq.w	80067e6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	4798      	blx	r3
      }
      return;
 80062a2:	e2a0      	b.n	80067e6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80062a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 8117 	beq.w	80064dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80062ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d106      	bne.n	80062c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80062ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80062be:	4b85      	ldr	r3, [pc, #532]	; (80064d4 <HAL_UART_IRQHandler+0x298>)
 80062c0:	4013      	ands	r3, r2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 810a 	beq.w	80064dc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d011      	beq.n	80062f8 <HAL_UART_IRQHandler+0xbc>
 80062d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00b      	beq.n	80062f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2201      	movs	r2, #1
 80062e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062ee:	f043 0201 	orr.w	r2, r3, #1
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062fc:	f003 0302 	and.w	r3, r3, #2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d011      	beq.n	8006328 <HAL_UART_IRQHandler+0xec>
 8006304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00b      	beq.n	8006328 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2202      	movs	r2, #2
 8006316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800631e:	f043 0204 	orr.w	r2, r3, #4
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d011      	beq.n	8006358 <HAL_UART_IRQHandler+0x11c>
 8006334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00b      	beq.n	8006358 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2204      	movs	r2, #4
 8006346:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800634e:	f043 0202 	orr.w	r2, r3, #2
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800635c:	f003 0308 	and.w	r3, r3, #8
 8006360:	2b00      	cmp	r3, #0
 8006362:	d017      	beq.n	8006394 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b00      	cmp	r3, #0
 800636e:	d105      	bne.n	800637c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006374:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00b      	beq.n	8006394 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2208      	movs	r2, #8
 8006382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800638a:	f043 0208 	orr.w	r2, r3, #8
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800639c:	2b00      	cmp	r3, #0
 800639e:	d012      	beq.n	80063c6 <HAL_UART_IRQHandler+0x18a>
 80063a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00c      	beq.n	80063c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063bc:	f043 0220 	orr.w	r2, r3, #32
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 820c 	beq.w	80067ea <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80063d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d6:	f003 0320 	and.w	r3, r3, #32
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00d      	beq.n	80063fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063e2:	f003 0320 	and.w	r3, r3, #32
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d007      	beq.n	80063fa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d003      	beq.n	80063fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006400:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640e:	2b40      	cmp	r3, #64	; 0x40
 8006410:	d005      	beq.n	800641e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006412:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006416:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800641a:	2b00      	cmp	r3, #0
 800641c:	d04f      	beq.n	80064be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fe75 	bl	800710e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642e:	2b40      	cmp	r3, #64	; 0x40
 8006430:	d141      	bne.n	80064b6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	3308      	adds	r3, #8
 8006438:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006440:	e853 3f00 	ldrex	r3, [r3]
 8006444:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006448:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800644c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006450:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3308      	adds	r3, #8
 800645a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800645e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006462:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006466:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800646a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800646e:	e841 2300 	strex	r3, r2, [r1]
 8006472:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006476:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1d9      	bne.n	8006432 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006482:	2b00      	cmp	r3, #0
 8006484:	d013      	beq.n	80064ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648a:	4a13      	ldr	r2, [pc, #76]	; (80064d8 <HAL_UART_IRQHandler+0x29c>)
 800648c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006492:	4618      	mov	r0, r3
 8006494:	f7fb fe40 	bl	8002118 <HAL_DMA_Abort_IT>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d017      	beq.n	80064ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80064a8:	4610      	mov	r0, r2
 80064aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ac:	e00f      	b.n	80064ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f9b0 	bl	8006814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b4:	e00b      	b.n	80064ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f9ac 	bl	8006814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064bc:	e007      	b.n	80064ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f9a8 	bl	8006814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80064cc:	e18d      	b.n	80067ea <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ce:	bf00      	nop
    return;
 80064d0:	e18b      	b.n	80067ea <HAL_UART_IRQHandler+0x5ae>
 80064d2:	bf00      	nop
 80064d4:	04000120 	.word	0x04000120
 80064d8:	080071d5 	.word	0x080071d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	f040 8146 	bne.w	8006772 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80064e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ea:	f003 0310 	and.w	r3, r3, #16
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 813f 	beq.w	8006772 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80064f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064f8:	f003 0310 	and.w	r3, r3, #16
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 8138 	beq.w	8006772 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2210      	movs	r2, #16
 8006508:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006514:	2b40      	cmp	r3, #64	; 0x40
 8006516:	f040 80b4 	bne.w	8006682 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006526:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800652a:	2b00      	cmp	r3, #0
 800652c:	f000 815f 	beq.w	80067ee <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006536:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800653a:	429a      	cmp	r2, r3
 800653c:	f080 8157 	bcs.w	80067ee <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006546:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	f040 8085 	bne.w	8006666 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006564:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006568:	e853 3f00 	ldrex	r3, [r3]
 800656c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006570:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006578:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	461a      	mov	r2, r3
 8006582:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006586:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800658a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006592:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006596:	e841 2300 	strex	r3, r2, [r1]
 800659a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800659e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1da      	bne.n	800655c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3308      	adds	r3, #8
 80065ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80065b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065b8:	f023 0301 	bic.w	r3, r3, #1
 80065bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3308      	adds	r3, #8
 80065c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80065ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80065ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80065d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80065d6:	e841 2300 	strex	r3, r2, [r1]
 80065da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80065dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1e1      	bne.n	80065a6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3308      	adds	r3, #8
 80065e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065ec:	e853 3f00 	ldrex	r3, [r3]
 80065f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80065f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3308      	adds	r3, #8
 8006602:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006606:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006608:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800660c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800660e:	e841 2300 	strex	r3, r2, [r1]
 8006612:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006614:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1e3      	bne.n	80065e2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2220      	movs	r2, #32
 800661e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800662e:	e853 3f00 	ldrex	r3, [r3]
 8006632:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006636:	f023 0310 	bic.w	r3, r3, #16
 800663a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	461a      	mov	r2, r3
 8006644:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006648:	65bb      	str	r3, [r7, #88]	; 0x58
 800664a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800664e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006650:	e841 2300 	strex	r3, r2, [r1]
 8006654:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1e4      	bne.n	8006626 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006660:	4618      	mov	r0, r3
 8006662:	f7fb fd1b 	bl	800209c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006672:	b29b      	uxth	r3, r3
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	b29b      	uxth	r3, r3
 8006678:	4619      	mov	r1, r3
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f8d4 	bl	8006828 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006680:	e0b5      	b.n	80067ee <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800668e:	b29b      	uxth	r3, r3
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f000 80a7 	beq.w	80067f2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80066a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 80a2 	beq.w	80067f2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b6:	e853 3f00 	ldrex	r3, [r3]
 80066ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	461a      	mov	r2, r3
 80066cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066d0:	647b      	str	r3, [r7, #68]	; 0x44
 80066d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066d8:	e841 2300 	strex	r3, r2, [r1]
 80066dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1e4      	bne.n	80066ae <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3308      	adds	r3, #8
 80066ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	e853 3f00 	ldrex	r3, [r3]
 80066f2:	623b      	str	r3, [r7, #32]
   return(result);
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	f023 0301 	bic.w	r3, r3, #1
 80066fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	3308      	adds	r3, #8
 8006704:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006708:	633a      	str	r2, [r7, #48]	; 0x30
 800670a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800670e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006710:	e841 2300 	strex	r3, r2, [r1]
 8006714:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1e3      	bne.n	80066e4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2220      	movs	r2, #32
 8006720:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	e853 3f00 	ldrex	r3, [r3]
 800673a:	60fb      	str	r3, [r7, #12]
   return(result);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 0310 	bic.w	r3, r3, #16
 8006742:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	461a      	mov	r2, r3
 800674c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006750:	61fb      	str	r3, [r7, #28]
 8006752:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006754:	69b9      	ldr	r1, [r7, #24]
 8006756:	69fa      	ldr	r2, [r7, #28]
 8006758:	e841 2300 	strex	r3, r2, [r1]
 800675c:	617b      	str	r3, [r7, #20]
   return(result);
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1e4      	bne.n	800672e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006764:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006768:	4619      	mov	r1, r3
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f85c 	bl	8006828 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006770:	e03f      	b.n	80067f2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00e      	beq.n	800679c <HAL_UART_IRQHandler+0x560>
 800677e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d008      	beq.n	800679c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006792:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fe19 	bl	80073cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800679a:	e02d      	b.n	80067f8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800679c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00e      	beq.n	80067c6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80067a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d008      	beq.n	80067c6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d01c      	beq.n	80067f6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	4798      	blx	r3
    }
    return;
 80067c4:	e017      	b.n	80067f6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80067c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d012      	beq.n	80067f8 <HAL_UART_IRQHandler+0x5bc>
 80067d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00c      	beq.n	80067f8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fdca 	bl	8007378 <UART_EndTransmit_IT>
    return;
 80067e4:	e008      	b.n	80067f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80067e6:	bf00      	nop
 80067e8:	e006      	b.n	80067f8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80067ea:	bf00      	nop
 80067ec:	e004      	b.n	80067f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80067ee:	bf00      	nop
 80067f0:	e002      	b.n	80067f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80067f2:	bf00      	nop
 80067f4:	e000      	b.n	80067f8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80067f6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80067f8:	37e8      	adds	r7, #232	; 0xe8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop

08006800 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	460b      	mov	r3, r1
 8006832:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006844:	b08a      	sub	sp, #40	; 0x28
 8006846:	af00      	add	r7, sp, #0
 8006848:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	689a      	ldr	r2, [r3, #8]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	431a      	orrs	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	431a      	orrs	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	4313      	orrs	r3, r2
 8006866:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	4ba4      	ldr	r3, [pc, #656]	; (8006b00 <UART_SetConfig+0x2c0>)
 8006870:	4013      	ands	r3, r2
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	6812      	ldr	r2, [r2, #0]
 8006876:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006878:	430b      	orrs	r3, r1
 800687a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	68da      	ldr	r2, [r3, #12]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a99      	ldr	r2, [pc, #612]	; (8006b04 <UART_SetConfig+0x2c4>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d004      	beq.n	80068ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a8:	4313      	orrs	r3, r2
 80068aa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068bc:	430a      	orrs	r2, r1
 80068be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a90      	ldr	r2, [pc, #576]	; (8006b08 <UART_SetConfig+0x2c8>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d126      	bne.n	8006918 <UART_SetConfig+0xd8>
 80068ca:	4b90      	ldr	r3, [pc, #576]	; (8006b0c <UART_SetConfig+0x2cc>)
 80068cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d0:	f003 0303 	and.w	r3, r3, #3
 80068d4:	2b03      	cmp	r3, #3
 80068d6:	d81b      	bhi.n	8006910 <UART_SetConfig+0xd0>
 80068d8:	a201      	add	r2, pc, #4	; (adr r2, 80068e0 <UART_SetConfig+0xa0>)
 80068da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068de:	bf00      	nop
 80068e0:	080068f1 	.word	0x080068f1
 80068e4:	08006901 	.word	0x08006901
 80068e8:	080068f9 	.word	0x080068f9
 80068ec:	08006909 	.word	0x08006909
 80068f0:	2301      	movs	r3, #1
 80068f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068f6:	e116      	b.n	8006b26 <UART_SetConfig+0x2e6>
 80068f8:	2302      	movs	r3, #2
 80068fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068fe:	e112      	b.n	8006b26 <UART_SetConfig+0x2e6>
 8006900:	2304      	movs	r3, #4
 8006902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006906:	e10e      	b.n	8006b26 <UART_SetConfig+0x2e6>
 8006908:	2308      	movs	r3, #8
 800690a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800690e:	e10a      	b.n	8006b26 <UART_SetConfig+0x2e6>
 8006910:	2310      	movs	r3, #16
 8006912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006916:	e106      	b.n	8006b26 <UART_SetConfig+0x2e6>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a7c      	ldr	r2, [pc, #496]	; (8006b10 <UART_SetConfig+0x2d0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d138      	bne.n	8006994 <UART_SetConfig+0x154>
 8006922:	4b7a      	ldr	r3, [pc, #488]	; (8006b0c <UART_SetConfig+0x2cc>)
 8006924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006928:	f003 030c 	and.w	r3, r3, #12
 800692c:	2b0c      	cmp	r3, #12
 800692e:	d82d      	bhi.n	800698c <UART_SetConfig+0x14c>
 8006930:	a201      	add	r2, pc, #4	; (adr r2, 8006938 <UART_SetConfig+0xf8>)
 8006932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006936:	bf00      	nop
 8006938:	0800696d 	.word	0x0800696d
 800693c:	0800698d 	.word	0x0800698d
 8006940:	0800698d 	.word	0x0800698d
 8006944:	0800698d 	.word	0x0800698d
 8006948:	0800697d 	.word	0x0800697d
 800694c:	0800698d 	.word	0x0800698d
 8006950:	0800698d 	.word	0x0800698d
 8006954:	0800698d 	.word	0x0800698d
 8006958:	08006975 	.word	0x08006975
 800695c:	0800698d 	.word	0x0800698d
 8006960:	0800698d 	.word	0x0800698d
 8006964:	0800698d 	.word	0x0800698d
 8006968:	08006985 	.word	0x08006985
 800696c:	2300      	movs	r3, #0
 800696e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006972:	e0d8      	b.n	8006b26 <UART_SetConfig+0x2e6>
 8006974:	2302      	movs	r3, #2
 8006976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800697a:	e0d4      	b.n	8006b26 <UART_SetConfig+0x2e6>
 800697c:	2304      	movs	r3, #4
 800697e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006982:	e0d0      	b.n	8006b26 <UART_SetConfig+0x2e6>
 8006984:	2308      	movs	r3, #8
 8006986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800698a:	e0cc      	b.n	8006b26 <UART_SetConfig+0x2e6>
 800698c:	2310      	movs	r3, #16
 800698e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006992:	e0c8      	b.n	8006b26 <UART_SetConfig+0x2e6>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a5e      	ldr	r2, [pc, #376]	; (8006b14 <UART_SetConfig+0x2d4>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d125      	bne.n	80069ea <UART_SetConfig+0x1aa>
 800699e:	4b5b      	ldr	r3, [pc, #364]	; (8006b0c <UART_SetConfig+0x2cc>)
 80069a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80069a8:	2b30      	cmp	r3, #48	; 0x30
 80069aa:	d016      	beq.n	80069da <UART_SetConfig+0x19a>
 80069ac:	2b30      	cmp	r3, #48	; 0x30
 80069ae:	d818      	bhi.n	80069e2 <UART_SetConfig+0x1a2>
 80069b0:	2b20      	cmp	r3, #32
 80069b2:	d00a      	beq.n	80069ca <UART_SetConfig+0x18a>
 80069b4:	2b20      	cmp	r3, #32
 80069b6:	d814      	bhi.n	80069e2 <UART_SetConfig+0x1a2>
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d002      	beq.n	80069c2 <UART_SetConfig+0x182>
 80069bc:	2b10      	cmp	r3, #16
 80069be:	d008      	beq.n	80069d2 <UART_SetConfig+0x192>
 80069c0:	e00f      	b.n	80069e2 <UART_SetConfig+0x1a2>
 80069c2:	2300      	movs	r3, #0
 80069c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069c8:	e0ad      	b.n	8006b26 <UART_SetConfig+0x2e6>
 80069ca:	2302      	movs	r3, #2
 80069cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069d0:	e0a9      	b.n	8006b26 <UART_SetConfig+0x2e6>
 80069d2:	2304      	movs	r3, #4
 80069d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069d8:	e0a5      	b.n	8006b26 <UART_SetConfig+0x2e6>
 80069da:	2308      	movs	r3, #8
 80069dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e0:	e0a1      	b.n	8006b26 <UART_SetConfig+0x2e6>
 80069e2:	2310      	movs	r3, #16
 80069e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e8:	e09d      	b.n	8006b26 <UART_SetConfig+0x2e6>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a4a      	ldr	r2, [pc, #296]	; (8006b18 <UART_SetConfig+0x2d8>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d125      	bne.n	8006a40 <UART_SetConfig+0x200>
 80069f4:	4b45      	ldr	r3, [pc, #276]	; (8006b0c <UART_SetConfig+0x2cc>)
 80069f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006a00:	d016      	beq.n	8006a30 <UART_SetConfig+0x1f0>
 8006a02:	2bc0      	cmp	r3, #192	; 0xc0
 8006a04:	d818      	bhi.n	8006a38 <UART_SetConfig+0x1f8>
 8006a06:	2b80      	cmp	r3, #128	; 0x80
 8006a08:	d00a      	beq.n	8006a20 <UART_SetConfig+0x1e0>
 8006a0a:	2b80      	cmp	r3, #128	; 0x80
 8006a0c:	d814      	bhi.n	8006a38 <UART_SetConfig+0x1f8>
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d002      	beq.n	8006a18 <UART_SetConfig+0x1d8>
 8006a12:	2b40      	cmp	r3, #64	; 0x40
 8006a14:	d008      	beq.n	8006a28 <UART_SetConfig+0x1e8>
 8006a16:	e00f      	b.n	8006a38 <UART_SetConfig+0x1f8>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a1e:	e082      	b.n	8006b26 <UART_SetConfig+0x2e6>
 8006a20:	2302      	movs	r3, #2
 8006a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a26:	e07e      	b.n	8006b26 <UART_SetConfig+0x2e6>
 8006a28:	2304      	movs	r3, #4
 8006a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a2e:	e07a      	b.n	8006b26 <UART_SetConfig+0x2e6>
 8006a30:	2308      	movs	r3, #8
 8006a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a36:	e076      	b.n	8006b26 <UART_SetConfig+0x2e6>
 8006a38:	2310      	movs	r3, #16
 8006a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a3e:	e072      	b.n	8006b26 <UART_SetConfig+0x2e6>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a35      	ldr	r2, [pc, #212]	; (8006b1c <UART_SetConfig+0x2dc>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d12a      	bne.n	8006aa0 <UART_SetConfig+0x260>
 8006a4a:	4b30      	ldr	r3, [pc, #192]	; (8006b0c <UART_SetConfig+0x2cc>)
 8006a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a58:	d01a      	beq.n	8006a90 <UART_SetConfig+0x250>
 8006a5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a5e:	d81b      	bhi.n	8006a98 <UART_SetConfig+0x258>
 8006a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a64:	d00c      	beq.n	8006a80 <UART_SetConfig+0x240>
 8006a66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a6a:	d815      	bhi.n	8006a98 <UART_SetConfig+0x258>
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d003      	beq.n	8006a78 <UART_SetConfig+0x238>
 8006a70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a74:	d008      	beq.n	8006a88 <UART_SetConfig+0x248>
 8006a76:	e00f      	b.n	8006a98 <UART_SetConfig+0x258>
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a7e:	e052      	b.n	8006b26 <UART_SetConfig+0x2e6>
 8006a80:	2302      	movs	r3, #2
 8006a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a86:	e04e      	b.n	8006b26 <UART_SetConfig+0x2e6>
 8006a88:	2304      	movs	r3, #4
 8006a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a8e:	e04a      	b.n	8006b26 <UART_SetConfig+0x2e6>
 8006a90:	2308      	movs	r3, #8
 8006a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a96:	e046      	b.n	8006b26 <UART_SetConfig+0x2e6>
 8006a98:	2310      	movs	r3, #16
 8006a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a9e:	e042      	b.n	8006b26 <UART_SetConfig+0x2e6>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a17      	ldr	r2, [pc, #92]	; (8006b04 <UART_SetConfig+0x2c4>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d13a      	bne.n	8006b20 <UART_SetConfig+0x2e0>
 8006aaa:	4b18      	ldr	r3, [pc, #96]	; (8006b0c <UART_SetConfig+0x2cc>)
 8006aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ab4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ab8:	d01a      	beq.n	8006af0 <UART_SetConfig+0x2b0>
 8006aba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006abe:	d81b      	bhi.n	8006af8 <UART_SetConfig+0x2b8>
 8006ac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ac4:	d00c      	beq.n	8006ae0 <UART_SetConfig+0x2a0>
 8006ac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aca:	d815      	bhi.n	8006af8 <UART_SetConfig+0x2b8>
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d003      	beq.n	8006ad8 <UART_SetConfig+0x298>
 8006ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ad4:	d008      	beq.n	8006ae8 <UART_SetConfig+0x2a8>
 8006ad6:	e00f      	b.n	8006af8 <UART_SetConfig+0x2b8>
 8006ad8:	2300      	movs	r3, #0
 8006ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ade:	e022      	b.n	8006b26 <UART_SetConfig+0x2e6>
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ae6:	e01e      	b.n	8006b26 <UART_SetConfig+0x2e6>
 8006ae8:	2304      	movs	r3, #4
 8006aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aee:	e01a      	b.n	8006b26 <UART_SetConfig+0x2e6>
 8006af0:	2308      	movs	r3, #8
 8006af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006af6:	e016      	b.n	8006b26 <UART_SetConfig+0x2e6>
 8006af8:	2310      	movs	r3, #16
 8006afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006afe:	e012      	b.n	8006b26 <UART_SetConfig+0x2e6>
 8006b00:	efff69f3 	.word	0xefff69f3
 8006b04:	40008000 	.word	0x40008000
 8006b08:	40013800 	.word	0x40013800
 8006b0c:	40021000 	.word	0x40021000
 8006b10:	40004400 	.word	0x40004400
 8006b14:	40004800 	.word	0x40004800
 8006b18:	40004c00 	.word	0x40004c00
 8006b1c:	40005000 	.word	0x40005000
 8006b20:	2310      	movs	r3, #16
 8006b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a9f      	ldr	r2, [pc, #636]	; (8006da8 <UART_SetConfig+0x568>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d17a      	bne.n	8006c26 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b34:	2b08      	cmp	r3, #8
 8006b36:	d824      	bhi.n	8006b82 <UART_SetConfig+0x342>
 8006b38:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <UART_SetConfig+0x300>)
 8006b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3e:	bf00      	nop
 8006b40:	08006b65 	.word	0x08006b65
 8006b44:	08006b83 	.word	0x08006b83
 8006b48:	08006b6d 	.word	0x08006b6d
 8006b4c:	08006b83 	.word	0x08006b83
 8006b50:	08006b73 	.word	0x08006b73
 8006b54:	08006b83 	.word	0x08006b83
 8006b58:	08006b83 	.word	0x08006b83
 8006b5c:	08006b83 	.word	0x08006b83
 8006b60:	08006b7b 	.word	0x08006b7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b64:	f7fc ff22 	bl	80039ac <HAL_RCC_GetPCLK1Freq>
 8006b68:	61f8      	str	r0, [r7, #28]
        break;
 8006b6a:	e010      	b.n	8006b8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b6c:	4b8f      	ldr	r3, [pc, #572]	; (8006dac <UART_SetConfig+0x56c>)
 8006b6e:	61fb      	str	r3, [r7, #28]
        break;
 8006b70:	e00d      	b.n	8006b8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b72:	f7fc fe83 	bl	800387c <HAL_RCC_GetSysClockFreq>
 8006b76:	61f8      	str	r0, [r7, #28]
        break;
 8006b78:	e009      	b.n	8006b8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b7e:	61fb      	str	r3, [r7, #28]
        break;
 8006b80:	e005      	b.n	8006b8e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006b82:	2300      	movs	r3, #0
 8006b84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f000 80fb 	beq.w	8006d8c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	005b      	lsls	r3, r3, #1
 8006b9e:	4413      	add	r3, r2
 8006ba0:	69fa      	ldr	r2, [r7, #28]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d305      	bcc.n	8006bb2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006bac:	69fa      	ldr	r2, [r7, #28]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d903      	bls.n	8006bba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006bb8:	e0e8      	b.n	8006d8c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	461c      	mov	r4, r3
 8006bc0:	4615      	mov	r5, r2
 8006bc2:	f04f 0200 	mov.w	r2, #0
 8006bc6:	f04f 0300 	mov.w	r3, #0
 8006bca:	022b      	lsls	r3, r5, #8
 8006bcc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006bd0:	0222      	lsls	r2, r4, #8
 8006bd2:	68f9      	ldr	r1, [r7, #12]
 8006bd4:	6849      	ldr	r1, [r1, #4]
 8006bd6:	0849      	lsrs	r1, r1, #1
 8006bd8:	2000      	movs	r0, #0
 8006bda:	4688      	mov	r8, r1
 8006bdc:	4681      	mov	r9, r0
 8006bde:	eb12 0a08 	adds.w	sl, r2, r8
 8006be2:	eb43 0b09 	adc.w	fp, r3, r9
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	603b      	str	r3, [r7, #0]
 8006bee:	607a      	str	r2, [r7, #4]
 8006bf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bf4:	4650      	mov	r0, sl
 8006bf6:	4659      	mov	r1, fp
 8006bf8:	f7f9 fb42 	bl	8000280 <__aeabi_uldivmod>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	4613      	mov	r3, r2
 8006c02:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c0a:	d308      	bcc.n	8006c1e <UART_SetConfig+0x3de>
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c12:	d204      	bcs.n	8006c1e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	69ba      	ldr	r2, [r7, #24]
 8006c1a:	60da      	str	r2, [r3, #12]
 8006c1c:	e0b6      	b.n	8006d8c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c24:	e0b2      	b.n	8006d8c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c2e:	d15e      	bne.n	8006cee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006c30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c34:	2b08      	cmp	r3, #8
 8006c36:	d828      	bhi.n	8006c8a <UART_SetConfig+0x44a>
 8006c38:	a201      	add	r2, pc, #4	; (adr r2, 8006c40 <UART_SetConfig+0x400>)
 8006c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3e:	bf00      	nop
 8006c40:	08006c65 	.word	0x08006c65
 8006c44:	08006c6d 	.word	0x08006c6d
 8006c48:	08006c75 	.word	0x08006c75
 8006c4c:	08006c8b 	.word	0x08006c8b
 8006c50:	08006c7b 	.word	0x08006c7b
 8006c54:	08006c8b 	.word	0x08006c8b
 8006c58:	08006c8b 	.word	0x08006c8b
 8006c5c:	08006c8b 	.word	0x08006c8b
 8006c60:	08006c83 	.word	0x08006c83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c64:	f7fc fea2 	bl	80039ac <HAL_RCC_GetPCLK1Freq>
 8006c68:	61f8      	str	r0, [r7, #28]
        break;
 8006c6a:	e014      	b.n	8006c96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c6c:	f7fc feb4 	bl	80039d8 <HAL_RCC_GetPCLK2Freq>
 8006c70:	61f8      	str	r0, [r7, #28]
        break;
 8006c72:	e010      	b.n	8006c96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c74:	4b4d      	ldr	r3, [pc, #308]	; (8006dac <UART_SetConfig+0x56c>)
 8006c76:	61fb      	str	r3, [r7, #28]
        break;
 8006c78:	e00d      	b.n	8006c96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c7a:	f7fc fdff 	bl	800387c <HAL_RCC_GetSysClockFreq>
 8006c7e:	61f8      	str	r0, [r7, #28]
        break;
 8006c80:	e009      	b.n	8006c96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c86:	61fb      	str	r3, [r7, #28]
        break;
 8006c88:	e005      	b.n	8006c96 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d077      	beq.n	8006d8c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	005a      	lsls	r2, r3, #1
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	085b      	lsrs	r3, r3, #1
 8006ca6:	441a      	add	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	2b0f      	cmp	r3, #15
 8006cb6:	d916      	bls.n	8006ce6 <UART_SetConfig+0x4a6>
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cbe:	d212      	bcs.n	8006ce6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	f023 030f 	bic.w	r3, r3, #15
 8006cc8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	085b      	lsrs	r3, r3, #1
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	f003 0307 	and.w	r3, r3, #7
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	8afb      	ldrh	r3, [r7, #22]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	8afa      	ldrh	r2, [r7, #22]
 8006ce2:	60da      	str	r2, [r3, #12]
 8006ce4:	e052      	b.n	8006d8c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006cec:	e04e      	b.n	8006d8c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cf2:	2b08      	cmp	r3, #8
 8006cf4:	d827      	bhi.n	8006d46 <UART_SetConfig+0x506>
 8006cf6:	a201      	add	r2, pc, #4	; (adr r2, 8006cfc <UART_SetConfig+0x4bc>)
 8006cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfc:	08006d21 	.word	0x08006d21
 8006d00:	08006d29 	.word	0x08006d29
 8006d04:	08006d31 	.word	0x08006d31
 8006d08:	08006d47 	.word	0x08006d47
 8006d0c:	08006d37 	.word	0x08006d37
 8006d10:	08006d47 	.word	0x08006d47
 8006d14:	08006d47 	.word	0x08006d47
 8006d18:	08006d47 	.word	0x08006d47
 8006d1c:	08006d3f 	.word	0x08006d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d20:	f7fc fe44 	bl	80039ac <HAL_RCC_GetPCLK1Freq>
 8006d24:	61f8      	str	r0, [r7, #28]
        break;
 8006d26:	e014      	b.n	8006d52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d28:	f7fc fe56 	bl	80039d8 <HAL_RCC_GetPCLK2Freq>
 8006d2c:	61f8      	str	r0, [r7, #28]
        break;
 8006d2e:	e010      	b.n	8006d52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d30:	4b1e      	ldr	r3, [pc, #120]	; (8006dac <UART_SetConfig+0x56c>)
 8006d32:	61fb      	str	r3, [r7, #28]
        break;
 8006d34:	e00d      	b.n	8006d52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d36:	f7fc fda1 	bl	800387c <HAL_RCC_GetSysClockFreq>
 8006d3a:	61f8      	str	r0, [r7, #28]
        break;
 8006d3c:	e009      	b.n	8006d52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d42:	61fb      	str	r3, [r7, #28]
        break;
 8006d44:	e005      	b.n	8006d52 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d50:	bf00      	nop
    }

    if (pclk != 0U)
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d019      	beq.n	8006d8c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	085a      	lsrs	r2, r3, #1
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	441a      	add	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d6a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	2b0f      	cmp	r3, #15
 8006d70:	d909      	bls.n	8006d86 <UART_SetConfig+0x546>
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d78:	d205      	bcs.n	8006d86 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	60da      	str	r2, [r3, #12]
 8006d84:	e002      	b.n	8006d8c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006d98:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3728      	adds	r7, #40	; 0x28
 8006da0:	46bd      	mov	sp, r7
 8006da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006da6:	bf00      	nop
 8006da8:	40008000 	.word	0x40008000
 8006dac:	00f42400 	.word	0x00f42400

08006db0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	f003 0301 	and.w	r3, r3, #1
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00a      	beq.n	8006dda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00a      	beq.n	8006dfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	f003 0304 	and.w	r3, r3, #4
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00a      	beq.n	8006e1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	f003 0308 	and.w	r3, r3, #8
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00a      	beq.n	8006e40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e44:	f003 0310 	and.w	r3, r3, #16
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00a      	beq.n	8006e62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e66:	f003 0320 	and.w	r3, r3, #32
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00a      	beq.n	8006e84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	430a      	orrs	r2, r1
 8006e82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d01a      	beq.n	8006ec6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eae:	d10a      	bne.n	8006ec6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00a      	beq.n	8006ee8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	605a      	str	r2, [r3, #4]
  }
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af02      	add	r7, sp, #8
 8006efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f04:	f7fa feac 	bl	8001c60 <HAL_GetTick>
 8006f08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0308 	and.w	r3, r3, #8
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d10e      	bne.n	8006f36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f82d 	bl	8006f86 <UART_WaitOnFlagUntilTimeout>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e023      	b.n	8006f7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0304 	and.w	r3, r3, #4
 8006f40:	2b04      	cmp	r3, #4
 8006f42:	d10e      	bne.n	8006f62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f817 	bl	8006f86 <UART_WaitOnFlagUntilTimeout>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e00d      	b.n	8006f7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2220      	movs	r2, #32
 8006f66:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b09c      	sub	sp, #112	; 0x70
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	60f8      	str	r0, [r7, #12]
 8006f8e:	60b9      	str	r1, [r7, #8]
 8006f90:	603b      	str	r3, [r7, #0]
 8006f92:	4613      	mov	r3, r2
 8006f94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f96:	e0a5      	b.n	80070e4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9e:	f000 80a1 	beq.w	80070e4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fa2:	f7fa fe5d 	bl	8001c60 <HAL_GetTick>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d302      	bcc.n	8006fb8 <UART_WaitOnFlagUntilTimeout+0x32>
 8006fb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d13e      	bne.n	8007036 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fc0:	e853 3f00 	ldrex	r3, [r3]
 8006fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fcc:	667b      	str	r3, [r7, #100]	; 0x64
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fd8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006fdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006fde:	e841 2300 	strex	r3, r2, [r1]
 8006fe2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1e6      	bne.n	8006fb8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	3308      	adds	r3, #8
 8006ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff4:	e853 3f00 	ldrex	r3, [r3]
 8006ff8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffc:	f023 0301 	bic.w	r3, r3, #1
 8007000:	663b      	str	r3, [r7, #96]	; 0x60
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3308      	adds	r3, #8
 8007008:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800700a:	64ba      	str	r2, [r7, #72]	; 0x48
 800700c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007010:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007012:	e841 2300 	strex	r3, r2, [r1]
 8007016:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1e5      	bne.n	8006fea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2220      	movs	r2, #32
 8007022:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2220      	movs	r2, #32
 8007028:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e067      	b.n	8007106 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0304 	and.w	r3, r3, #4
 8007040:	2b00      	cmp	r3, #0
 8007042:	d04f      	beq.n	80070e4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	69db      	ldr	r3, [r3, #28]
 800704a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800704e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007052:	d147      	bne.n	80070e4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800705c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007066:	e853 3f00 	ldrex	r3, [r3]
 800706a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007072:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	461a      	mov	r2, r3
 800707a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800707c:	637b      	str	r3, [r7, #52]	; 0x34
 800707e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007080:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007082:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007084:	e841 2300 	strex	r3, r2, [r1]
 8007088:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800708a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1e6      	bne.n	800705e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	3308      	adds	r3, #8
 8007096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	e853 3f00 	ldrex	r3, [r3]
 800709e:	613b      	str	r3, [r7, #16]
   return(result);
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	f023 0301 	bic.w	r3, r3, #1
 80070a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3308      	adds	r3, #8
 80070ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070b0:	623a      	str	r2, [r7, #32]
 80070b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b4:	69f9      	ldr	r1, [r7, #28]
 80070b6:	6a3a      	ldr	r2, [r7, #32]
 80070b8:	e841 2300 	strex	r3, r2, [r1]
 80070bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1e5      	bne.n	8007090 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2220      	movs	r2, #32
 80070c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2220      	movs	r2, #32
 80070ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2220      	movs	r2, #32
 80070d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e010      	b.n	8007106 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	69da      	ldr	r2, [r3, #28]
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	4013      	ands	r3, r2
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	bf0c      	ite	eq
 80070f4:	2301      	moveq	r3, #1
 80070f6:	2300      	movne	r3, #0
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	461a      	mov	r2, r3
 80070fc:	79fb      	ldrb	r3, [r7, #7]
 80070fe:	429a      	cmp	r2, r3
 8007100:	f43f af4a 	beq.w	8006f98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3770      	adds	r7, #112	; 0x70
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800710e:	b480      	push	{r7}
 8007110:	b095      	sub	sp, #84	; 0x54
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800711e:	e853 3f00 	ldrex	r3, [r3]
 8007122:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007126:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800712a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	461a      	mov	r2, r3
 8007132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007134:	643b      	str	r3, [r7, #64]	; 0x40
 8007136:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007138:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800713a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800713c:	e841 2300 	strex	r3, r2, [r1]
 8007140:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1e6      	bne.n	8007116 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	3308      	adds	r3, #8
 800714e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007150:	6a3b      	ldr	r3, [r7, #32]
 8007152:	e853 3f00 	ldrex	r3, [r3]
 8007156:	61fb      	str	r3, [r7, #28]
   return(result);
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	f023 0301 	bic.w	r3, r3, #1
 800715e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3308      	adds	r3, #8
 8007166:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007168:	62fa      	str	r2, [r7, #44]	; 0x2c
 800716a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800716e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007170:	e841 2300 	strex	r3, r2, [r1]
 8007174:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1e5      	bne.n	8007148 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007180:	2b01      	cmp	r3, #1
 8007182:	d118      	bne.n	80071b6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	e853 3f00 	ldrex	r3, [r3]
 8007190:	60bb      	str	r3, [r7, #8]
   return(result);
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	f023 0310 	bic.w	r3, r3, #16
 8007198:	647b      	str	r3, [r7, #68]	; 0x44
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071a2:	61bb      	str	r3, [r7, #24]
 80071a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a6:	6979      	ldr	r1, [r7, #20]
 80071a8:	69ba      	ldr	r2, [r7, #24]
 80071aa:	e841 2300 	strex	r3, r2, [r1]
 80071ae:	613b      	str	r3, [r7, #16]
   return(result);
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1e6      	bne.n	8007184 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2220      	movs	r2, #32
 80071ba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80071c8:	bf00      	nop
 80071ca:	3754      	adds	r7, #84	; 0x54
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f7ff fb0e 	bl	8006814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071f8:	bf00      	nop
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007200:	b480      	push	{r7}
 8007202:	b08f      	sub	sp, #60	; 0x3c
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800720c:	2b21      	cmp	r3, #33	; 0x21
 800720e:	d14d      	bne.n	80072ac <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007216:	b29b      	uxth	r3, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	d132      	bne.n	8007282 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	e853 3f00 	ldrex	r3, [r3]
 8007228:	61fb      	str	r3, [r7, #28]
   return(result);
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007230:	637b      	str	r3, [r7, #52]	; 0x34
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	461a      	mov	r2, r3
 8007238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800723a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800723c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007242:	e841 2300 	strex	r3, r2, [r1]
 8007246:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1e6      	bne.n	800721c <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	e853 3f00 	ldrex	r3, [r3]
 800725a:	60bb      	str	r3, [r7, #8]
   return(result);
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007262:	633b      	str	r3, [r7, #48]	; 0x30
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	461a      	mov	r2, r3
 800726a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726c:	61bb      	str	r3, [r7, #24]
 800726e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007270:	6979      	ldr	r1, [r7, #20]
 8007272:	69ba      	ldr	r2, [r7, #24]
 8007274:	e841 2300 	strex	r3, r2, [r1]
 8007278:	613b      	str	r3, [r7, #16]
   return(result);
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1e6      	bne.n	800724e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007280:	e014      	b.n	80072ac <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007286:	781a      	ldrb	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	b292      	uxth	r2, r2
 800728e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007294:	1c5a      	adds	r2, r3, #1
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	3b01      	subs	r3, #1
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80072ac:	bf00      	nop
 80072ae:	373c      	adds	r7, #60	; 0x3c
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b091      	sub	sp, #68	; 0x44
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072c4:	2b21      	cmp	r3, #33	; 0x21
 80072c6:	d151      	bne.n	800736c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d132      	bne.n	800733a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	e853 3f00 	ldrex	r3, [r3]
 80072e0:	623b      	str	r3, [r7, #32]
   return(result);
 80072e2:	6a3b      	ldr	r3, [r7, #32]
 80072e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f2:	633b      	str	r3, [r7, #48]	; 0x30
 80072f4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072fa:	e841 2300 	strex	r3, r2, [r1]
 80072fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1e6      	bne.n	80072d4 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	e853 3f00 	ldrex	r3, [r3]
 8007312:	60fb      	str	r3, [r7, #12]
   return(result);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800731a:	637b      	str	r3, [r7, #52]	; 0x34
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	461a      	mov	r2, r3
 8007322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007324:	61fb      	str	r3, [r7, #28]
 8007326:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007328:	69b9      	ldr	r1, [r7, #24]
 800732a:	69fa      	ldr	r2, [r7, #28]
 800732c:	e841 2300 	strex	r3, r2, [r1]
 8007330:	617b      	str	r3, [r7, #20]
   return(result);
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1e6      	bne.n	8007306 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007338:	e018      	b.n	800736c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800733e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007342:	881a      	ldrh	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800734c:	b292      	uxth	r2, r2
 800734e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007354:	1c9a      	adds	r2, r3, #2
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007360:	b29b      	uxth	r3, r3
 8007362:	3b01      	subs	r3, #1
 8007364:	b29a      	uxth	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800736c:	bf00      	nop
 800736e:	3744      	adds	r7, #68	; 0x44
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b088      	sub	sp, #32
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	e853 3f00 	ldrex	r3, [r3]
 800738c:	60bb      	str	r3, [r7, #8]
   return(result);
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007394:	61fb      	str	r3, [r7, #28]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	61bb      	str	r3, [r7, #24]
 80073a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a2:	6979      	ldr	r1, [r7, #20]
 80073a4:	69ba      	ldr	r2, [r7, #24]
 80073a6:	e841 2300 	strex	r3, r2, [r1]
 80073aa:	613b      	str	r3, [r7, #16]
   return(result);
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1e6      	bne.n	8007380 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2220      	movs	r2, #32
 80073b6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7ff fa1e 	bl	8006800 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073c4:	bf00      	nop
 80073c6:	3720      	adds	r7, #32
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073e0:	b084      	sub	sp, #16
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b084      	sub	sp, #16
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	f107 001c 	add.w	r0, r7, #28
 80073ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fa70 	bl	80078e4 <USB_CoreReset>
 8007404:	4603      	mov	r3, r0
 8007406:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800740a:	2b00      	cmp	r3, #0
 800740c:	d106      	bne.n	800741c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007412:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	639a      	str	r2, [r3, #56]	; 0x38
 800741a:	e005      	b.n	8007428 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007420:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007428:	7bfb      	ldrb	r3, [r7, #15]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007434:	b004      	add	sp, #16
 8007436:	4770      	bx	lr

08007438 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	f023 0201 	bic.w	r2, r3, #1
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	460b      	mov	r3, r1
 8007464:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007476:	78fb      	ldrb	r3, [r7, #3]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d115      	bne.n	80074a8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007488:	2001      	movs	r0, #1
 800748a:	f7fa fbf5 	bl	8001c78 <HAL_Delay>
      ms++;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	3301      	adds	r3, #1
 8007492:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 fa17 	bl	80078c8 <USB_GetMode>
 800749a:	4603      	mov	r3, r0
 800749c:	2b01      	cmp	r3, #1
 800749e:	d01e      	beq.n	80074de <USB_SetCurrentMode+0x84>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2b31      	cmp	r3, #49	; 0x31
 80074a4:	d9f0      	bls.n	8007488 <USB_SetCurrentMode+0x2e>
 80074a6:	e01a      	b.n	80074de <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80074a8:	78fb      	ldrb	r3, [r7, #3]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d115      	bne.n	80074da <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80074ba:	2001      	movs	r0, #1
 80074bc:	f7fa fbdc 	bl	8001c78 <HAL_Delay>
      ms++;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	3301      	adds	r3, #1
 80074c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f9fe 	bl	80078c8 <USB_GetMode>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d005      	beq.n	80074de <USB_SetCurrentMode+0x84>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2b31      	cmp	r3, #49	; 0x31
 80074d6:	d9f0      	bls.n	80074ba <USB_SetCurrentMode+0x60>
 80074d8:	e001      	b.n	80074de <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e005      	b.n	80074ea <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2b32      	cmp	r3, #50	; 0x32
 80074e2:	d101      	bne.n	80074e8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e000      	b.n	80074ea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074f4:	b084      	sub	sp, #16
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b086      	sub	sp, #24
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
 80074fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007502:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800750e:	2300      	movs	r3, #0
 8007510:	613b      	str	r3, [r7, #16]
 8007512:	e009      	b.n	8007528 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	3340      	adds	r3, #64	; 0x40
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	2200      	movs	r2, #0
 8007520:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	3301      	adds	r3, #1
 8007526:	613b      	str	r3, [r7, #16]
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	2b0e      	cmp	r3, #14
 800752c:	d9f2      	bls.n	8007514 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800752e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007530:	2b00      	cmp	r3, #0
 8007532:	d11c      	bne.n	800756e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007542:	f043 0302 	orr.w	r3, r3, #2
 8007546:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	e005      	b.n	800757a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007572:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007580:	461a      	mov	r2, r3
 8007582:	2300      	movs	r3, #0
 8007584:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800758c:	4619      	mov	r1, r3
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007594:	461a      	mov	r2, r3
 8007596:	680b      	ldr	r3, [r1, #0]
 8007598:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800759a:	2103      	movs	r1, #3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f959 	bl	8007854 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075a2:	2110      	movs	r1, #16
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f8f1 	bl	800778c <USB_FlushTxFifo>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d001      	beq.n	80075b4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f91d 	bl	80077f4 <USB_FlushRxFifo>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d001      	beq.n	80075c4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ca:	461a      	mov	r2, r3
 80075cc:	2300      	movs	r3, #0
 80075ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075d6:	461a      	mov	r2, r3
 80075d8:	2300      	movs	r3, #0
 80075da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075e2:	461a      	mov	r2, r3
 80075e4:	2300      	movs	r3, #0
 80075e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075e8:	2300      	movs	r3, #0
 80075ea:	613b      	str	r3, [r7, #16]
 80075ec:	e043      	b.n	8007676 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	015a      	lsls	r2, r3, #5
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	4413      	add	r3, r2
 80075f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007600:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007604:	d118      	bne.n	8007638 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10a      	bne.n	8007622 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	015a      	lsls	r2, r3, #5
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4413      	add	r3, r2
 8007614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007618:	461a      	mov	r2, r3
 800761a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800761e:	6013      	str	r3, [r2, #0]
 8007620:	e013      	b.n	800764a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800762e:	461a      	mov	r2, r3
 8007630:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007634:	6013      	str	r3, [r2, #0]
 8007636:	e008      	b.n	800764a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	015a      	lsls	r2, r3, #5
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	4413      	add	r3, r2
 8007640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007644:	461a      	mov	r2, r3
 8007646:	2300      	movs	r3, #0
 8007648:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	015a      	lsls	r2, r3, #5
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	4413      	add	r3, r2
 8007652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007656:	461a      	mov	r2, r3
 8007658:	2300      	movs	r3, #0
 800765a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	015a      	lsls	r2, r3, #5
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4413      	add	r3, r2
 8007664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007668:	461a      	mov	r2, r3
 800766a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800766e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	3301      	adds	r3, #1
 8007674:	613b      	str	r3, [r7, #16]
 8007676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	429a      	cmp	r2, r3
 800767c:	d3b7      	bcc.n	80075ee <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800767e:	2300      	movs	r3, #0
 8007680:	613b      	str	r3, [r7, #16]
 8007682:	e043      	b.n	800770c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	4413      	add	r3, r2
 800768c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007696:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800769a:	d118      	bne.n	80076ce <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10a      	bne.n	80076b8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	015a      	lsls	r2, r3, #5
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	4413      	add	r3, r2
 80076aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ae:	461a      	mov	r2, r3
 80076b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80076b4:	6013      	str	r3, [r2, #0]
 80076b6:	e013      	b.n	80076e0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c4:	461a      	mov	r2, r3
 80076c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80076ca:	6013      	str	r3, [r2, #0]
 80076cc:	e008      	b.n	80076e0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	015a      	lsls	r2, r3, #5
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	4413      	add	r3, r2
 80076d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076da:	461a      	mov	r2, r3
 80076dc:	2300      	movs	r3, #0
 80076de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ec:	461a      	mov	r2, r3
 80076ee:	2300      	movs	r3, #0
 80076f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	015a      	lsls	r2, r3, #5
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	4413      	add	r3, r2
 80076fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076fe:	461a      	mov	r2, r3
 8007700:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007704:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	3301      	adds	r3, #1
 800770a:	613b      	str	r3, [r7, #16]
 800770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	429a      	cmp	r2, r3
 8007712:	d3b7      	bcc.n	8007684 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007722:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007726:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007734:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	699b      	ldr	r3, [r3, #24]
 800773a:	f043 0210 	orr.w	r2, r3, #16
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	699a      	ldr	r2, [r3, #24]
 8007746:	4b10      	ldr	r3, [pc, #64]	; (8007788 <USB_DevInit+0x294>)
 8007748:	4313      	orrs	r3, r2
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800774e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007750:	2b00      	cmp	r3, #0
 8007752:	d005      	beq.n	8007760 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	f043 0208 	orr.w	r2, r3, #8
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007762:	2b01      	cmp	r3, #1
 8007764:	d107      	bne.n	8007776 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800776e:	f043 0304 	orr.w	r3, r3, #4
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007776:	7dfb      	ldrb	r3, [r7, #23]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3718      	adds	r7, #24
 800777c:	46bd      	mov	sp, r7
 800777e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007782:	b004      	add	sp, #16
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	803c3800 	.word	0x803c3800

0800778c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007796:	2300      	movs	r3, #0
 8007798:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	3301      	adds	r3, #1
 800779e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4a13      	ldr	r2, [pc, #76]	; (80077f0 <USB_FlushTxFifo+0x64>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d901      	bls.n	80077ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e01b      	b.n	80077e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	daf2      	bge.n	800779a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80077b4:	2300      	movs	r3, #0
 80077b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	019b      	lsls	r3, r3, #6
 80077bc:	f043 0220 	orr.w	r2, r3, #32
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3301      	adds	r3, #1
 80077c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	4a08      	ldr	r2, [pc, #32]	; (80077f0 <USB_FlushTxFifo+0x64>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d901      	bls.n	80077d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e006      	b.n	80077e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	f003 0320 	and.w	r3, r3, #32
 80077de:	2b20      	cmp	r3, #32
 80077e0:	d0f0      	beq.n	80077c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	00030d40 	.word	0x00030d40

080077f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077fc:	2300      	movs	r3, #0
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	3301      	adds	r3, #1
 8007804:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	4a11      	ldr	r2, [pc, #68]	; (8007850 <USB_FlushRxFifo+0x5c>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d901      	bls.n	8007812 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e018      	b.n	8007844 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	2b00      	cmp	r3, #0
 8007818:	daf2      	bge.n	8007800 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800781a:	2300      	movs	r3, #0
 800781c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2210      	movs	r2, #16
 8007822:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	3301      	adds	r3, #1
 8007828:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	4a08      	ldr	r2, [pc, #32]	; (8007850 <USB_FlushRxFifo+0x5c>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d901      	bls.n	8007836 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e006      	b.n	8007844 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	f003 0310 	and.w	r3, r3, #16
 800783e:	2b10      	cmp	r3, #16
 8007840:	d0f0      	beq.n	8007824 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	00030d40 	.word	0x00030d40

08007854 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	460b      	mov	r3, r1
 800785e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	78fb      	ldrb	r3, [r7, #3]
 800786e:	68f9      	ldr	r1, [r7, #12]
 8007870:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007874:	4313      	orrs	r3, r2
 8007876:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007886:	b480      	push	{r7}
 8007888:	b085      	sub	sp, #20
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078a0:	f023 0303 	bic.w	r3, r3, #3
 80078a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078b4:	f043 0302 	orr.w	r3, r3, #2
 80078b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	f003 0301 	and.w	r3, r3, #1
}
 80078d8:	4618      	mov	r0, r3
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078ec:	2300      	movs	r3, #0
 80078ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	3301      	adds	r3, #1
 80078f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	4a13      	ldr	r2, [pc, #76]	; (8007948 <USB_CoreReset+0x64>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d901      	bls.n	8007902 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e01b      	b.n	800793a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	daf2      	bge.n	80078f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800790a:	2300      	movs	r3, #0
 800790c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	f043 0201 	orr.w	r2, r3, #1
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	3301      	adds	r3, #1
 800791e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	4a09      	ldr	r2, [pc, #36]	; (8007948 <USB_CoreReset+0x64>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d901      	bls.n	800792c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	e006      	b.n	800793a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	2b01      	cmp	r3, #1
 8007936:	d0f0      	beq.n	800791a <USB_CoreReset+0x36>

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	00030d40 	.word	0x00030d40

0800794c <ParseNumber>:
 * @brief  Parses and returns number from string.
 * @param  ptr: pointer to string
 * @param  cnt: pointer to the number of parsed digit
 * @retval integer value.
 */
static int32_t ParseNumber(char *ptr, uint8_t *cnt) {
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
	uint8_t minus = 0, i = 0;
 8007956:	2300      	movs	r3, #0
 8007958:	73fb      	strb	r3, [r7, #15]
 800795a:	2300      	movs	r3, #0
 800795c:	73bb      	strb	r3, [r7, #14]
	int32_t sum = 0;
 800795e:	2300      	movs	r3, #0
 8007960:	60bb      	str	r3, [r7, #8]

	if (*ptr == '-') { /* Check for minus character */
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	2b2d      	cmp	r3, #45	; 0x2d
 8007968:	d119      	bne.n	800799e <ParseNumber+0x52>
		minus = 1;
 800796a:	2301      	movs	r3, #1
 800796c:	73fb      	strb	r3, [r7, #15]
		ptr++;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	3301      	adds	r3, #1
 8007972:	607b      	str	r3, [r7, #4]
		i++;
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	3301      	adds	r3, #1
 8007978:	73bb      	strb	r3, [r7, #14]
	}
	while (CHARISNUM(*ptr)) { /* Parse number */
 800797a:	e010      	b.n	800799e <ParseNumber+0x52>
		sum = 10 * sum + CHAR2NUM(*ptr);
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	4613      	mov	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4413      	add	r3, r2
 8007984:	005b      	lsls	r3, r3, #1
 8007986:	461a      	mov	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	3b30      	subs	r3, #48	; 0x30
 800798e:	4413      	add	r3, r2
 8007990:	60bb      	str	r3, [r7, #8]
		ptr++;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	3301      	adds	r3, #1
 8007996:	607b      	str	r3, [r7, #4]
		i++;
 8007998:	7bbb      	ldrb	r3, [r7, #14]
 800799a:	3301      	adds	r3, #1
 800799c:	73bb      	strb	r3, [r7, #14]
	while (CHARISNUM(*ptr)) { /* Parse number */
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	2b2f      	cmp	r3, #47	; 0x2f
 80079a4:	d903      	bls.n	80079ae <ParseNumber+0x62>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	2b39      	cmp	r3, #57	; 0x39
 80079ac:	d9e6      	bls.n	800797c <ParseNumber+0x30>
	}
	if (cnt != NULL) { /* Save number of characters used for number */
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d002      	beq.n	80079ba <ParseNumber+0x6e>
		*cnt = i;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	7bba      	ldrb	r2, [r7, #14]
 80079b8:	701a      	strb	r2, [r3, #0]
	}
	if (minus) { /* Minus detected */
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <ParseNumber+0x7a>
		return 0 - sum;
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	425b      	negs	r3, r3
 80079c4:	e000      	b.n	80079c8 <ParseNumber+0x7c>
	}
	return sum; /* Return number */
 80079c6:	68bb      	ldr	r3, [r7, #8]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3714      	adds	r7, #20
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <ParseIP>:
 * @brief  Parses and returns IP address.
 * @param  ptr: pointer to string
 * @param  arr: pointer to IP array
 * @retval None.
 */
static void ParseIP(char *ptr, uint8_t *arr) {
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
	uint8_t hexnum = 0, hexcnt;
 80079de:	2300      	movs	r3, #0
 80079e0:	73fb      	strb	r3, [r7, #15]

	while (*ptr) {
 80079e2:	e019      	b.n	8007a18 <ParseIP+0x44>
		hexcnt = 1;
 80079e4:	2301      	movs	r3, #1
 80079e6:	73bb      	strb	r3, [r7, #14]
		if (*ptr != '.') {
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	2b2e      	cmp	r3, #46	; 0x2e
 80079ee:	d00e      	beq.n	8007a0e <ParseIP+0x3a>
			arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 80079f0:	f107 030e 	add.w	r3, r7, #14
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7ff ffa8 	bl	800794c <ParseNumber>
 80079fc:	4601      	mov	r1, r0
 80079fe:	7bfb      	ldrb	r3, [r7, #15]
 8007a00:	1c5a      	adds	r2, r3, #1
 8007a02:	73fa      	strb	r2, [r7, #15]
 8007a04:	461a      	mov	r2, r3
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	4413      	add	r3, r2
 8007a0a:	b2ca      	uxtb	r2, r1
 8007a0c:	701a      	strb	r2, [r3, #0]
		}
		ptr = ptr + hexcnt;
 8007a0e:	7bbb      	ldrb	r3, [r7, #14]
 8007a10:	461a      	mov	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4413      	add	r3, r2
 8007a16:	607b      	str	r3, [r7, #4]
	while (*ptr) {
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1e1      	bne.n	80079e4 <ParseIP+0x10>
	}
}
 8007a20:	bf00      	nop
 8007a22:	bf00      	nop
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
	...

08007a2c <AT_ParseInfo>:
 * @brief  Parses ES module informations and save them in the handle.
 * @param  Obj: pointer to module handle
 * @param  ptr: pointer to string
 * @retval None.
 */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata) {
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
	char *ptr;
	uint8_t num = 0;
 8007a36:	2300      	movs	r3, #0
 8007a38:	72fb      	strb	r3, [r7, #11]

	ptr = strtok((char*) pdata + 2, ",");
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	3302      	adds	r3, #2
 8007a3e:	4934      	ldr	r1, [pc, #208]	; (8007b10 <AT_ParseInfo+0xe4>)
 8007a40:	4618      	mov	r0, r3
 8007a42:	f005 f895 	bl	800cb70 <strtok>
 8007a46:	60f8      	str	r0, [r7, #12]

	while (ptr != NULL) {
 8007a48:	e05a      	b.n	8007b00 <AT_ParseInfo+0xd4>
		switch (num++) {
 8007a4a:	7afb      	ldrb	r3, [r7, #11]
 8007a4c:	1c5a      	adds	r2, r3, #1
 8007a4e:	72fa      	strb	r2, [r7, #11]
 8007a50:	2b06      	cmp	r3, #6
 8007a52:	d84f      	bhi.n	8007af4 <AT_ParseInfo+0xc8>
 8007a54:	a201      	add	r2, pc, #4	; (adr r2, 8007a5c <AT_ParseInfo+0x30>)
 8007a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5a:	bf00      	nop
 8007a5c:	08007a79 	.word	0x08007a79
 8007a60:	08007a87 	.word	0x08007a87
 8007a64:	08007a97 	.word	0x08007a97
 8007a68:	08007aa7 	.word	0x08007aa7
 8007a6c:	08007ab7 	.word	0x08007ab7
 8007a70:	08007ac7 	.word	0x08007ac7
 8007a74:	08007adb 	.word	0x08007adb
		case 0:
			strncpy((char*) Obj->Product_ID, ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	68f9      	ldr	r1, [r7, #12]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f005 f84d 	bl	800cb1e <strncpy>
			break;
 8007a84:	e037      	b.n	8007af6 <AT_ParseInfo+0xca>

		case 1:
			strncpy((char*) Obj->FW_Rev, ptr, ES_WIFI_FW_REV_SIZE);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	3320      	adds	r3, #32
 8007a8a:	2218      	movs	r2, #24
 8007a8c:	68f9      	ldr	r1, [r7, #12]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f005 f845 	bl	800cb1e <strncpy>
			break;
 8007a94:	e02f      	b.n	8007af6 <AT_ParseInfo+0xca>

		case 2:
			strncpy((char*) Obj->API_Rev, ptr, ES_WIFI_API_REV_SIZE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	3338      	adds	r3, #56	; 0x38
 8007a9a:	2210      	movs	r2, #16
 8007a9c:	68f9      	ldr	r1, [r7, #12]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f005 f83d 	bl	800cb1e <strncpy>
			break;
 8007aa4:	e027      	b.n	8007af6 <AT_ParseInfo+0xca>

		case 3:
			strncpy((char*) Obj->Stack_Rev, ptr, ES_WIFI_STACK_REV_SIZE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	3348      	adds	r3, #72	; 0x48
 8007aaa:	2210      	movs	r2, #16
 8007aac:	68f9      	ldr	r1, [r7, #12]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f005 f835 	bl	800cb1e <strncpy>
			break;
 8007ab4:	e01f      	b.n	8007af6 <AT_ParseInfo+0xca>

		case 4:
			strncpy((char*) Obj->RTOS_Rev, ptr, ES_WIFI_RTOS_REV_SIZE);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	3358      	adds	r3, #88	; 0x58
 8007aba:	2210      	movs	r2, #16
 8007abc:	68f9      	ldr	r1, [r7, #12]
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f005 f82d 	bl	800cb1e <strncpy>
			break;
 8007ac4:	e017      	b.n	8007af6 <AT_ParseInfo+0xca>

		case 5:
			Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f7ff ff3f 	bl	800794c <ParseNumber>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8007ad8:	e00d      	b.n	8007af6 <AT_ParseInfo+0xca>

		case 6:
			ptr = strtok(ptr, "\r");
 8007ada:	490e      	ldr	r1, [pc, #56]	; (8007b14 <AT_ParseInfo+0xe8>)
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f005 f847 	bl	800cb70 <strtok>
 8007ae2:	60f8      	str	r0, [r7, #12]
			strncpy((char*) Obj->Product_Name, ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	3368      	adds	r3, #104	; 0x68
 8007ae8:	2220      	movs	r2, #32
 8007aea:	68f9      	ldr	r1, [r7, #12]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f005 f816 	bl	800cb1e <strncpy>
			break;
 8007af2:	e000      	b.n	8007af6 <AT_ParseInfo+0xca>

		default:
			break;
 8007af4:	bf00      	nop
		}
		ptr = strtok(NULL, ",");
 8007af6:	4906      	ldr	r1, [pc, #24]	; (8007b10 <AT_ParseInfo+0xe4>)
 8007af8:	2000      	movs	r0, #0
 8007afa:	f005 f839 	bl	800cb70 <strtok>
 8007afe:	60f8      	str	r0, [r7, #12]
	while (ptr != NULL) {
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1a1      	bne.n	8007a4a <AT_ParseInfo+0x1e>
	}
}
 8007b06:	bf00      	nop
 8007b08:	bf00      	nop
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	0800df30 	.word	0x0800df30
 8007b14:	0800df34 	.word	0x0800df34

08007b18 <AT_ParseConnSettings>:
 * @brief  Parses WIFI connection settings.
 * @param  NetSettings: settings
 * @param  pdata: pointer to data
 * @retval None.
 */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings) {
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
	uint8_t num = 0;
 8007b22:	2300      	movs	r3, #0
 8007b24:	73fb      	strb	r3, [r7, #15]
	char *ptr;

	ptr = strtok(pdata + 2, ",");
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	3302      	adds	r3, #2
 8007b2a:	4952      	ldr	r1, [pc, #328]	; (8007c74 <AT_ParseConnSettings+0x15c>)
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f005 f81f 	bl	800cb70 <strtok>
 8007b32:	60b8      	str	r0, [r7, #8]

	while (ptr != NULL) {
 8007b34:	e095      	b.n	8007c62 <AT_ParseConnSettings+0x14a>
		switch (num++) {
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
 8007b38:	1c5a      	adds	r2, r3, #1
 8007b3a:	73fa      	strb	r2, [r7, #15]
 8007b3c:	2b0b      	cmp	r3, #11
 8007b3e:	d87f      	bhi.n	8007c40 <AT_ParseConnSettings+0x128>
 8007b40:	a201      	add	r2, pc, #4	; (adr r2, 8007b48 <AT_ParseConnSettings+0x30>)
 8007b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b46:	bf00      	nop
 8007b48:	08007b79 	.word	0x08007b79
 8007b4c:	08007b87 	.word	0x08007b87
 8007b50:	08007b97 	.word	0x08007b97
 8007b54:	08007bab 	.word	0x08007bab
 8007b58:	08007bbf 	.word	0x08007bbf
 8007b5c:	08007bd3 	.word	0x08007bd3
 8007b60:	08007be1 	.word	0x08007be1
 8007b64:	08007bef 	.word	0x08007bef
 8007b68:	08007bfd 	.word	0x08007bfd
 8007b6c:	08007c0b 	.word	0x08007c0b
 8007b70:	08007c19 	.word	0x08007c19
 8007b74:	08007c2d 	.word	0x08007c2d
		case 0:
			strncpy((char*) NetSettings->SSID, ptr,
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	2221      	movs	r2, #33	; 0x21
 8007b7c:	68b9      	ldr	r1, [r7, #8]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f004 ffcd 	bl	800cb1e <strncpy>
			ES_WIFI_MAX_SSID_NAME_SIZE + 1);
			break;
 8007b84:	e05d      	b.n	8007c42 <AT_ParseConnSettings+0x12a>

		case 1:
			strncpy((char*) NetSettings->pswd, ptr,
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	3321      	adds	r3, #33	; 0x21
 8007b8a:	2221      	movs	r2, #33	; 0x21
 8007b8c:	68b9      	ldr	r1, [r7, #8]
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f004 ffc5 	bl	800cb1e <strncpy>
			ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
			break;
 8007b94:	e055      	b.n	8007c42 <AT_ParseConnSettings+0x12a>

		case 2:
			NetSettings->Security = (ES_WIFI_SecurityType_t) ParseNumber(ptr,
 8007b96:	2100      	movs	r1, #0
 8007b98:	68b8      	ldr	r0, [r7, #8]
 8007b9a:	f7ff fed7 	bl	800794c <ParseNumber>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	b2da      	uxtb	r2, r3
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			NULL);
			break;
 8007ba8:	e04b      	b.n	8007c42 <AT_ParseConnSettings+0x12a>

		case 3:
			NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8007baa:	2100      	movs	r1, #0
 8007bac:	68b8      	ldr	r0, [r7, #8]
 8007bae:	f7ff fecd 	bl	800794c <ParseNumber>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	b2da      	uxtb	r2, r3
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
			break;
 8007bbc:	e041      	b.n	8007c42 <AT_ParseConnSettings+0x12a>

		case 4:
			NetSettings->IP_Ver = (ES_WIFI_IPVer_t) ParseNumber(ptr, NULL);
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	68b8      	ldr	r0, [r7, #8]
 8007bc2:	f7ff fec3 	bl	800794c <ParseNumber>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			break;
 8007bd0:	e037      	b.n	8007c42 <AT_ParseConnSettings+0x12a>

		case 5:
			ParseIP(ptr, NetSettings->IP_Addr);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	3348      	adds	r3, #72	; 0x48
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	68b8      	ldr	r0, [r7, #8]
 8007bda:	f7ff fefb 	bl	80079d4 <ParseIP>
			break;
 8007bde:	e030      	b.n	8007c42 <AT_ParseConnSettings+0x12a>

		case 6:
			ParseIP(ptr, NetSettings->IP_Mask);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	334c      	adds	r3, #76	; 0x4c
 8007be4:	4619      	mov	r1, r3
 8007be6:	68b8      	ldr	r0, [r7, #8]
 8007be8:	f7ff fef4 	bl	80079d4 <ParseIP>
			break;
 8007bec:	e029      	b.n	8007c42 <AT_ParseConnSettings+0x12a>

		case 7:
			ParseIP(ptr, NetSettings->Gateway_Addr);
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	3350      	adds	r3, #80	; 0x50
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	68b8      	ldr	r0, [r7, #8]
 8007bf6:	f7ff feed 	bl	80079d4 <ParseIP>
			break;
 8007bfa:	e022      	b.n	8007c42 <AT_ParseConnSettings+0x12a>

		case 8:
			ParseIP(ptr, NetSettings->DNS1);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	3354      	adds	r3, #84	; 0x54
 8007c00:	4619      	mov	r1, r3
 8007c02:	68b8      	ldr	r0, [r7, #8]
 8007c04:	f7ff fee6 	bl	80079d4 <ParseIP>
			break;
 8007c08:	e01b      	b.n	8007c42 <AT_ParseConnSettings+0x12a>

		case 9:
			ParseIP(ptr, NetSettings->DNS2);
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	3358      	adds	r3, #88	; 0x58
 8007c0e:	4619      	mov	r1, r3
 8007c10:	68b8      	ldr	r0, [r7, #8]
 8007c12:	f7ff fedf 	bl	80079d4 <ParseIP>
			break;
 8007c16:	e014      	b.n	8007c42 <AT_ParseConnSettings+0x12a>

		case 10:
			NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8007c18:	2100      	movs	r1, #0
 8007c1a:	68b8      	ldr	r0, [r7, #8]
 8007c1c:	f7ff fe96 	bl	800794c <ParseNumber>
 8007c20:	4603      	mov	r3, r0
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			break;
 8007c2a:	e00a      	b.n	8007c42 <AT_ParseConnSettings+0x12a>

		case 11:
			NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	68b8      	ldr	r0, [r7, #8]
 8007c30:	f7ff fe8c 	bl	800794c <ParseNumber>
 8007c34:	4603      	mov	r3, r0
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			break;
 8007c3e:	e000      	b.n	8007c42 <AT_ParseConnSettings+0x12a>

		default:
			break;
 8007c40:	bf00      	nop
		}
		ptr = strtok(NULL, ",");
 8007c42:	490c      	ldr	r1, [pc, #48]	; (8007c74 <AT_ParseConnSettings+0x15c>)
 8007c44:	2000      	movs	r0, #0
 8007c46:	f004 ff93 	bl	800cb70 <strtok>
 8007c4a:	60b8      	str	r0, [r7, #8]
		if ((ptr != NULL) && (ptr[-1] == ',')) { /* Ignore empty fields */
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d007      	beq.n	8007c62 <AT_ParseConnSettings+0x14a>
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	3b01      	subs	r3, #1
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	2b2c      	cmp	r3, #44	; 0x2c
 8007c5a:	d102      	bne.n	8007c62 <AT_ParseConnSettings+0x14a>
			num++;
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	73fb      	strb	r3, [r7, #15]
	while (ptr != NULL) {
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f47f af66 	bne.w	8007b36 <AT_ParseConnSettings+0x1e>
		}
	}
}
 8007c6a:	bf00      	nop
 8007c6c:	bf00      	nop
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	0800df30 	.word	0x0800df30

08007c78 <AT_ExecuteCommand>:
 * @param  cmd: pointer to command string
 * @param  pdata: pointer to returned data
 * @retval Operation Status.
 */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t *cmd,
		uint8_t *pdata) {
 8007c78:	b590      	push	{r4, r7, lr}
 8007c7a:	b087      	sub	sp, #28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]
	int ret = 0;
 8007c84:	2300      	movs	r3, #0
 8007c86:	613b      	str	r3, [r7, #16]
	int16_t recv_len = 0;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	82fb      	strh	r3, [r7, #22]
	LOCK_WIFI();

	ret = Obj->fops.IO_Send(cmd, strlen((char*) cmd), Obj->Timeout);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8007c92:	68b8      	ldr	r0, [r7, #8]
 8007c94:	f7f8 fa9c 	bl	80001d0 <strlen>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	b299      	uxth	r1, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	68b8      	ldr	r0, [r7, #8]
 8007ca6:	47a0      	blx	r4
 8007ca8:	4603      	mov	r3, r0
 8007caa:	613b      	str	r3, [r7, #16]

	if (ret > 0) {
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	dd3e      	ble.n	8007d30 <AT_ExecuteCommand+0xb8>
		recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007cbe:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	4798      	blx	r3
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	82fb      	strh	r3, [r7, #22]
		if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE)) {
 8007cca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	dd27      	ble.n	8007d22 <AT_ExecuteCommand+0xaa>
 8007cd2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007cd6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007cda:	dc22      	bgt.n	8007d22 <AT_ExecuteCommand+0xaa>
			if (recv_len == ES_WIFI_DATA_SIZE) {
 8007cdc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007ce0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007ce4:	d105      	bne.n	8007cf2 <AT_ExecuteCommand+0x7a>
				// ES_WIFI_DATA_SIZE maybe too small !!
				recv_len--;
 8007ce6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	3b01      	subs	r3, #1
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	82fb      	strh	r3, [r7, #22]
			}
			*(pdata + recv_len) = 0;
 8007cf2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	701a      	strb	r2, [r3, #0]
			if (strstr((char*) pdata, AT_OK_STRING)) {
 8007cfe:	490f      	ldr	r1, [pc, #60]	; (8007d3c <AT_ExecuteCommand+0xc4>)
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f004 ff1f 	bl	800cb44 <strstr>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d001      	beq.n	8007d10 <AT_ExecuteCommand+0x98>
				UNLOCK_WIFI();
				return ES_WIFI_STATUS_OK;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	e010      	b.n	8007d32 <AT_ExecuteCommand+0xba>
			} else if (strstr((char*) pdata, AT_ERROR_STRING)) {
 8007d10:	490b      	ldr	r1, [pc, #44]	; (8007d40 <AT_ExecuteCommand+0xc8>)
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f004 ff16 	bl	800cb44 <strstr>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <AT_ExecuteCommand+0xaa>
				UNLOCK_WIFI();
				return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007d1e:	2305      	movs	r3, #5
 8007d20:	e007      	b.n	8007d32 <AT_ExecuteCommand+0xba>
			}
		}
		if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER) {
 8007d22:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007d26:	f113 0f04 	cmn.w	r3, #4
 8007d2a:	d101      	bne.n	8007d30 <AT_ExecuteCommand+0xb8>
			UNLOCK_WIFI();
			return ES_WIFI_STATUS_MODULE_CRASH;
 8007d2c:	2306      	movs	r3, #6
 8007d2e:	e000      	b.n	8007d32 <AT_ExecuteCommand+0xba>
		}
	}UNLOCK_WIFI();
	return ES_WIFI_STATUS_IO_ERROR;
 8007d30:	2304      	movs	r3, #4
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	371c      	adds	r7, #28
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd90      	pop	{r4, r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	0800df44 	.word	0x0800df44
 8007d40:	0800df50 	.word	0x0800df50

08007d44 <AT_RequestSendData>:
 * @param  pdata: pointer to returned data
 * @retval Operation Status.
 */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t *cmd,
		uint8_t *pcmd_data, uint16_t len, uint8_t *pdata) {
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b086      	sub	sp, #24
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	607a      	str	r2, [r7, #4]
 8007d50:	807b      	strh	r3, [r7, #2]
	int16_t send_len = 0;
 8007d52:	2300      	movs	r3, #0
 8007d54:	82fb      	strh	r3, [r7, #22]
	int16_t recv_len = 0;
 8007d56:	2300      	movs	r3, #0
 8007d58:	82bb      	strh	r3, [r7, #20]
	uint16_t cmd_len = 0;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	827b      	strh	r3, [r7, #18]
	uint16_t n;

	LOCK_WIFI();
	cmd_len = strlen((char*) cmd);
 8007d5e:	68b8      	ldr	r0, [r7, #8]
 8007d60:	f7f8 fa36 	bl	80001d0 <strlen>
 8007d64:	4603      	mov	r3, r0
 8007d66:	827b      	strh	r3, [r7, #18]

	/* can send only even number of byte on first send */
	if (cmd_len & 1)
 8007d68:	8a7b      	ldrh	r3, [r7, #18]
 8007d6a:	f003 0301 	and.w	r3, r3, #1
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d001      	beq.n	8007d76 <AT_RequestSendData+0x32>
		return ES_WIFI_STATUS_ERROR;
 8007d72:	2302      	movs	r3, #2
 8007d74:	e053      	b.n	8007e1e <AT_RequestSendData+0xda>
	n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007d82:	8a79      	ldrh	r1, [r7, #18]
 8007d84:	68b8      	ldr	r0, [r7, #8]
 8007d86:	4798      	blx	r3
 8007d88:	4603      	mov	r3, r0
 8007d8a:	823b      	strh	r3, [r7, #16]
	if (n == cmd_len) {
 8007d8c:	8a3a      	ldrh	r2, [r7, #16]
 8007d8e:	8a7b      	ldrh	r3, [r7, #18]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d143      	bne.n	8007e1c <AT_RequestSendData+0xd8>
		send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007da0:	8879      	ldrh	r1, [r7, #2]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	4798      	blx	r3
 8007da6:	4603      	mov	r3, r0
 8007da8:	82fb      	strh	r3, [r7, #22]
		if (send_len == len) {
 8007daa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007dae:	887b      	ldrh	r3, [r7, #2]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d131      	bne.n	8007e18 <AT_RequestSendData+0xd4>
			recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	6a38      	ldr	r0, [r7, #32]
 8007dc4:	4798      	blx	r3
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	82bb      	strh	r3, [r7, #20]
			if (recv_len > 0) {
 8007dca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	dd19      	ble.n	8007e06 <AT_RequestSendData+0xc2>
				*(pdata + recv_len) = 0;
 8007dd2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007dd6:	6a3a      	ldr	r2, [r7, #32]
 8007dd8:	4413      	add	r3, r2
 8007dda:	2200      	movs	r2, #0
 8007ddc:	701a      	strb	r2, [r3, #0]
				if (strstr((char*) pdata, AT_OK_STRING)) {
 8007dde:	4912      	ldr	r1, [pc, #72]	; (8007e28 <AT_RequestSendData+0xe4>)
 8007de0:	6a38      	ldr	r0, [r7, #32]
 8007de2:	f004 feaf 	bl	800cb44 <strstr>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d001      	beq.n	8007df0 <AT_RequestSendData+0xac>
					UNLOCK_WIFI();
					return ES_WIFI_STATUS_OK;
 8007dec:	2300      	movs	r3, #0
 8007dee:	e016      	b.n	8007e1e <AT_RequestSendData+0xda>
				} else if (strstr((char*) pdata, AT_ERROR_STRING)) {
 8007df0:	490e      	ldr	r1, [pc, #56]	; (8007e2c <AT_RequestSendData+0xe8>)
 8007df2:	6a38      	ldr	r0, [r7, #32]
 8007df4:	f004 fea6 	bl	800cb44 <strstr>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <AT_RequestSendData+0xbe>
					UNLOCK_WIFI();
					return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007dfe:	2305      	movs	r3, #5
 8007e00:	e00d      	b.n	8007e1e <AT_RequestSendData+0xda>
				} else {
					UNLOCK_WIFI();
					return ES_WIFI_STATUS_ERROR;
 8007e02:	2302      	movs	r3, #2
 8007e04:	e00b      	b.n	8007e1e <AT_RequestSendData+0xda>
				}
			}UNLOCK_WIFI();
			if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER) {
 8007e06:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007e0a:	f113 0f04 	cmn.w	r3, #4
 8007e0e:	d101      	bne.n	8007e14 <AT_RequestSendData+0xd0>
				return ES_WIFI_STATUS_MODULE_CRASH;
 8007e10:	2306      	movs	r3, #6
 8007e12:	e004      	b.n	8007e1e <AT_RequestSendData+0xda>
			}
			return ES_WIFI_STATUS_ERROR;
 8007e14:	2302      	movs	r3, #2
 8007e16:	e002      	b.n	8007e1e <AT_RequestSendData+0xda>
		} else {
			return ES_WIFI_STATUS_ERROR;
 8007e18:	2302      	movs	r3, #2
 8007e1a:	e000      	b.n	8007e1e <AT_RequestSendData+0xda>
		}
	}
	return ES_WIFI_STATUS_IO_ERROR;
 8007e1c:	2304      	movs	r3, #4
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3718      	adds	r7, #24
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	0800df44 	.word	0x0800df44
 8007e2c:	0800df50 	.word	0x0800df50

08007e30 <AT_RequestReceiveData>:
 * @param  Reqlen : requested Data length.
 * @param  ReadData : pointer to received data length.
 * @retval Operation Status.
 */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj,
		uint8_t *cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData) {
 8007e30:	b590      	push	{r4, r7, lr}
 8007e32:	b087      	sub	sp, #28
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
 8007e3c:	807b      	strh	r3, [r7, #2]
	int len;
	uint8_t *p = Obj->CmdData;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007e44:	613b      	str	r3, [r7, #16]

	LOCK_WIFI();
	if (Obj->fops.IO_Send(cmd, strlen((char*) cmd), Obj->Timeout) > 0) {
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8007e4c:	68b8      	ldr	r0, [r7, #8]
 8007e4e:	f7f8 f9bf 	bl	80001d0 <strlen>
 8007e52:	4603      	mov	r3, r0
 8007e54:	b299      	uxth	r1, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	68b8      	ldr	r0, [r7, #8]
 8007e60:	47a0      	blx	r4
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	dd6f      	ble.n	8007f48 <AT_RequestReceiveData+0x118>
		len = Obj->fops.IO_Receive(p, 0, Obj->Timeout);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007e74:	2100      	movs	r1, #0
 8007e76:	6938      	ldr	r0, [r7, #16]
 8007e78:	4798      	blx	r3
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	617b      	str	r3, [r7, #20]
		if ((p[0] != '\r') || (p[1] != '\n')) {
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	2b0d      	cmp	r3, #13
 8007e84:	d104      	bne.n	8007e90 <AT_RequestReceiveData+0x60>
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	2b0a      	cmp	r3, #10
 8007e8e:	d001      	beq.n	8007e94 <AT_RequestReceiveData+0x64>
			return ES_WIFI_STATUS_IO_ERROR;
 8007e90:	2304      	movs	r3, #4
 8007e92:	e05a      	b.n	8007f4a <AT_RequestReceiveData+0x11a>
		}
		len -= 2;
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	3b02      	subs	r3, #2
 8007e98:	617b      	str	r3, [r7, #20]
		p += 2;
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	3302      	adds	r3, #2
 8007e9e:	613b      	str	r3, [r7, #16]
		if (len >= AT_OK_STRING_LEN) {
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	2b07      	cmp	r3, #7
 8007ea4:	d94a      	bls.n	8007f3c <AT_RequestReceiveData+0x10c>
			while (len && (p[len - 1] == 0x15))
 8007ea6:	e002      	b.n	8007eae <AT_RequestReceiveData+0x7e>
				len--;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	617b      	str	r3, [r7, #20]
			while (len && (p[len - 1] == 0x15))
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d006      	beq.n	8007ec2 <AT_RequestReceiveData+0x92>
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	4413      	add	r3, r2
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	2b15      	cmp	r3, #21
 8007ec0:	d0f2      	beq.n	8007ea8 <AT_RequestReceiveData+0x78>
			p[len] = '\0';
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	2200      	movs	r2, #0
 8007eca:	701a      	strb	r2, [r3, #0]
			if (strstr((char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING)) {
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	3b08      	subs	r3, #8
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	491f      	ldr	r1, [pc, #124]	; (8007f54 <AT_RequestReceiveData+0x124>)
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f004 fe34 	bl	800cb44 <strstr>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d016      	beq.n	8007f10 <AT_RequestReceiveData+0xe0>
				*ReadData = len - AT_OK_STRING_LEN;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	3b08      	subs	r3, #8
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eec:	801a      	strh	r2, [r3, #0]
				if (*ReadData > Reqlen) {
 8007eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	887a      	ldrh	r2, [r7, #2]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d202      	bcs.n	8007efe <AT_RequestReceiveData+0xce>
					*ReadData = Reqlen;
 8007ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efa:	887a      	ldrh	r2, [r7, #2]
 8007efc:	801a      	strh	r2, [r3, #0]
				}
				memcpy(pdata, p, *ReadData);
 8007efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f00:	881b      	ldrh	r3, [r3, #0]
 8007f02:	461a      	mov	r2, r3
 8007f04:	6939      	ldr	r1, [r7, #16]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f004 fb74 	bl	800c5f4 <memcpy>
				UNLOCK_WIFI();
				return ES_WIFI_STATUS_OK;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	e01c      	b.n	8007f4a <AT_RequestReceiveData+0x11a>
			} else if (memcmp((char*) p + len - AT_DELIMETER_LEN,
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	3b04      	subs	r3, #4
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	4413      	add	r3, r2
 8007f18:	2204      	movs	r2, #4
 8007f1a:	490f      	ldr	r1, [pc, #60]	; (8007f58 <AT_RequestReceiveData+0x128>)
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f004 fb59 	bl	800c5d4 <memcmp>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d104      	bne.n	8007f32 <AT_RequestReceiveData+0x102>
			AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0) {
				*ReadData = 0;
 8007f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	801a      	strh	r2, [r3, #0]
				UNLOCK_WIFI();
				return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007f2e:	2305      	movs	r3, #5
 8007f30:	e00b      	b.n	8007f4a <AT_RequestReceiveData+0x11a>
			}

			UNLOCK_WIFI();
			*ReadData = 0;
 8007f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f34:	2200      	movs	r2, #0
 8007f36:	801a      	strh	r2, [r3, #0]
			return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007f38:	2305      	movs	r3, #5
 8007f3a:	e006      	b.n	8007f4a <AT_RequestReceiveData+0x11a>
		}
		if (len == ES_WIFI_ERROR_STUFFING_FOREVER) {
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	f113 0f04 	cmn.w	r3, #4
 8007f42:	d101      	bne.n	8007f48 <AT_RequestReceiveData+0x118>
			UNLOCK_WIFI();
			return ES_WIFI_STATUS_MODULE_CRASH;
 8007f44:	2306      	movs	r3, #6
 8007f46:	e000      	b.n	8007f4a <AT_RequestReceiveData+0x11a>
		}
	}UNLOCK_WIFI();
	return ES_WIFI_STATUS_IO_ERROR;
 8007f48:	2304      	movs	r3, #4
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	371c      	adds	r7, #28
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd90      	pop	{r4, r7, pc}
 8007f52:	bf00      	nop
 8007f54:	0800df44 	.word	0x0800df44
 8007f58:	0800df58 	.word	0x0800df58

08007f5c <ES_WIFI_Init>:
/**
 * @brief  Initialize WIFI module.
 * @param  Obj: pointer to module handle
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj) {
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
	ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8007f64:	2302      	movs	r3, #2
 8007f66:	73fb      	strb	r3, [r7, #15]

	LOCK_WIFI();

	Obj->Timeout = ES_WIFI_TIMEOUT;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f247 5230 	movw	r2, #30000	; 0x7530
 8007f6e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

	if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0) {
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8007f78:	2000      	movs	r0, #0
 8007f7a:	4798      	blx	r3
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d113      	bne.n	8007faa <ES_WIFI_Init+0x4e>
		ret = AT_ExecuteCommand(Obj, (uint8_t*) "I?\r\n", Obj->CmdData);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007f88:	461a      	mov	r2, r3
 8007f8a:	490a      	ldr	r1, [pc, #40]	; (8007fb4 <ES_WIFI_Init+0x58>)
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f7ff fe73 	bl	8007c78 <AT_ExecuteCommand>
 8007f92:	4603      	mov	r3, r0
 8007f94:	73fb      	strb	r3, [r7, #15]

		if (ret == ES_WIFI_STATUS_OK) {
 8007f96:	7bfb      	ldrb	r3, [r7, #15]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d106      	bne.n	8007faa <ES_WIFI_Init+0x4e>
			AT_ParseInfo(Obj, Obj->CmdData);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f7ff fd41 	bl	8007a2c <AT_ParseInfo>
		}
	}UNLOCK_WIFI();
	return ret;
 8007faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	0800df60 	.word	0x0800df60

08007fb8 <ES_WIFI_RegisterBusIO>:
 * @param  Obj: pointer to module handle
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj,
		IO_Init_Func IO_Init, IO_DeInit_Func IO_DeInit, IO_Delay_Func IO_Delay,
		IO_Send_Func IO_Send, IO_Receive_Func IO_Receive) {
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
 8007fc4:	603b      	str	r3, [r7, #0]
	if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive) {
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00b      	beq.n	8007fe4 <ES_WIFI_RegisterBusIO+0x2c>
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d008      	beq.n	8007fe4 <ES_WIFI_RegisterBusIO+0x2c>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d005      	beq.n	8007fe4 <ES_WIFI_RegisterBusIO+0x2c>
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d002      	beq.n	8007fe4 <ES_WIFI_RegisterBusIO+0x2c>
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <ES_WIFI_RegisterBusIO+0x30>
		return ES_WIFI_STATUS_ERROR;
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	e014      	b.n	8008012 <ES_WIFI_RegisterBusIO+0x5a>
	}

	Obj->fops.IO_Init = IO_Init;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	68ba      	ldr	r2, [r7, #8]
 8007fec:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	Obj->fops.IO_DeInit = IO_DeInit;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	Obj->fops.IO_Send = IO_Send;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	69ba      	ldr	r2, [r7, #24]
 8007ffc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	Obj->fops.IO_Receive = IO_Receive;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	69fa      	ldr	r2, [r7, #28]
 8008004:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	Obj->fops.IO_Delay = IO_Delay;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	return ES_WIFI_STATUS_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3714      	adds	r7, #20
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
	...

08008020 <ES_WIFI_Connect>:
 * @param  Password: the Access point password.
 * @param  SecType: Security type.
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
		const char *Password, ES_WIFI_SecurityType_t SecType) {
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
 800802c:	70fb      	strb	r3, [r7, #3]
	ES_WIFI_Status_t ret;
	LOCK_WIFI();

	sprintf((char*) Obj->CmdData, "C1=%s\r", SSID);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	4932      	ldr	r1, [pc, #200]	; (8008100 <ES_WIFI_Connect+0xe0>)
 8008038:	4618      	mov	r0, r3
 800803a:	f004 fd0d 	bl	800ca58 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800804a:	461a      	mov	r2, r3
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f7ff fe13 	bl	8007c78 <AT_ExecuteCommand>
 8008052:	4603      	mov	r3, r0
 8008054:	75fb      	strb	r3, [r7, #23]
	if (ret == ES_WIFI_STATUS_OK) {
 8008056:	7dfb      	ldrb	r3, [r7, #23]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d14b      	bne.n	80080f4 <ES_WIFI_Connect+0xd4>
		sprintf((char*) Obj->CmdData, "C2=%s\r", Password);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	4927      	ldr	r1, [pc, #156]	; (8008104 <ES_WIFI_Connect+0xe4>)
 8008066:	4618      	mov	r0, r3
 8008068:	f004 fcf6 	bl	800ca58 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008078:	461a      	mov	r2, r3
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f7ff fdfc 	bl	8007c78 <AT_ExecuteCommand>
 8008080:	4603      	mov	r3, r0
 8008082:	75fb      	strb	r3, [r7, #23]

		if (ret == ES_WIFI_STATUS_OK) {
 8008084:	7dfb      	ldrb	r3, [r7, #23]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d134      	bne.n	80080f4 <ES_WIFI_Connect+0xd4>
			Obj->Security = SecType;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	78fa      	ldrb	r2, [r7, #3]
 800808e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
			sprintf((char*) Obj->CmdData, "C3=%d\r", (uint8_t) SecType);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008098:	78fa      	ldrb	r2, [r7, #3]
 800809a:	491b      	ldr	r1, [pc, #108]	; (8008108 <ES_WIFI_Connect+0xe8>)
 800809c:	4618      	mov	r0, r3
 800809e:	f004 fcdb 	bl	800ca58 <siprintf>
			ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80080ae:	461a      	mov	r2, r3
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f7ff fde1 	bl	8007c78 <AT_ExecuteCommand>
 80080b6:	4603      	mov	r3, r0
 80080b8:	75fb      	strb	r3, [r7, #23]

			if (ret == ES_WIFI_STATUS_OK) {
 80080ba:	7dfb      	ldrb	r3, [r7, #23]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d119      	bne.n	80080f4 <ES_WIFI_Connect+0xd4>
				sprintf((char*) Obj->CmdData, "C0\r");
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80080c6:	4911      	ldr	r1, [pc, #68]	; (800810c <ES_WIFI_Connect+0xec>)
 80080c8:	4618      	mov	r0, r3
 80080ca:	f004 fcc5 	bl	800ca58 <siprintf>
				ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80080da:	461a      	mov	r2, r3
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f7ff fdcb 	bl	8007c78 <AT_ExecuteCommand>
 80080e2:	4603      	mov	r3, r0
 80080e4:	75fb      	strb	r3, [r7, #23]
				if (ret == ES_WIFI_STATUS_OK) {
 80080e6:	7dfb      	ldrb	r3, [r7, #23]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d103      	bne.n	80080f4 <ES_WIFI_Connect+0xd4>
					Obj->NetSettings.IsConnected = 1;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
				}
			}
		}
	}UNLOCK_WIFI();
	return ret;
 80080f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3718      	adds	r7, #24
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	0800df78 	.word	0x0800df78
 8008104:	0800df80 	.word	0x0800df80
 8008108:	0800df88 	.word	0x0800df88
 800810c:	0800df90 	.word	0x0800df90

08008110 <ES_WIFI_GetNetworkSettings>:
 * @brief  Return network settings.
 * @param  Obj: pointer to module handle
 * @param  Pointer to network setting structure.
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj) {
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
	ES_WIFI_Status_t ret;
	LOCK_WIFI();

	sprintf((char*) Obj->CmdData, "C?\r");
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800811e:	4910      	ldr	r1, [pc, #64]	; (8008160 <ES_WIFI_GetNetworkSettings+0x50>)
 8008120:	4618      	mov	r0, r3
 8008122:	f004 fc99 	bl	800ca58 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008132:	461a      	mov	r2, r3
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f7ff fd9f 	bl	8007c78 <AT_ExecuteCommand>
 800813a:	4603      	mov	r3, r0
 800813c:	73fb      	strb	r3, [r7, #15]

	if (ret == ES_WIFI_STATUS_OK) {
 800813e:	7bfb      	ldrb	r3, [r7, #15]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d108      	bne.n	8008156 <ES_WIFI_GetNetworkSettings+0x46>
		AT_ParseConnSettings((char*) Obj->CmdData, &Obj->NetSettings);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	338d      	adds	r3, #141	; 0x8d
 800814e:	4619      	mov	r1, r3
 8008150:	4610      	mov	r0, r2
 8008152:	f7ff fce1 	bl	8007b18 <AT_ParseConnSettings>
	}

	UNLOCK_WIFI();
	return ret;
 8008156:	7bfb      	ldrb	r3, [r7, #15]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	0800df9c 	.word	0x0800df9c

08008164 <ES_WIFI_StartClientConnection>:
 * @param  Obj: pointer to module handle
 * @param  conn: pointer to the connection structure
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj,
		ES_WIFI_Conn_t *conn) {
 8008164:	b590      	push	{r4, r7, lr}
 8008166:	b087      	sub	sp, #28
 8008168:	af02      	add	r7, sp, #8
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
	ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800816e:	2300      	movs	r3, #0
 8008170:	73fb      	strb	r3, [r7, #15]

	if (((conn->Type == ES_WIFI_TCP_CONNECTION)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d003      	beq.n	8008182 <ES_WIFI_StartClientConnection+0x1e>
			|| (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	2b03      	cmp	r3, #3
 8008180:	d105      	bne.n	800818e <ES_WIFI_StartClientConnection+0x2a>
			&& (conn->RemotePort == 0))
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	885b      	ldrh	r3, [r3, #2]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d101      	bne.n	800818e <ES_WIFI_StartClientConnection+0x2a>
		return ES_WIFI_STATUS_ERROR;
 800818a:	2302      	movs	r3, #2
 800818c:	e0c1      	b.n	8008312 <ES_WIFI_StartClientConnection+0x1ae>

	LOCK_WIFI();

	sprintf((char*) Obj->CmdData, "P0=%d\r", conn->Number);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	785b      	ldrb	r3, [r3, #1]
 8008198:	461a      	mov	r2, r3
 800819a:	4960      	ldr	r1, [pc, #384]	; (800831c <ES_WIFI_StartClientConnection+0x1b8>)
 800819c:	f004 fc5c 	bl	800ca58 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80081ac:	461a      	mov	r2, r3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7ff fd62 	bl	8007c78 <AT_ExecuteCommand>
 80081b4:	4603      	mov	r3, r0
 80081b6:	73fb      	strb	r3, [r7, #15]

	if (ret == ES_WIFI_STATUS_OK) {
 80081b8:	7bfb      	ldrb	r3, [r7, #15]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d114      	bne.n	80081e8 <ES_WIFI_StartClientConnection+0x84>
		sprintf((char*) Obj->CmdData, "P1=%d\r", conn->Type);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	461a      	mov	r2, r3
 80081ca:	4955      	ldr	r1, [pc, #340]	; (8008320 <ES_WIFI_StartClientConnection+0x1bc>)
 80081cc:	f004 fc44 	bl	800ca58 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80081dc:	461a      	mov	r2, r3
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f7ff fd4a 	bl	8007c78 <AT_ExecuteCommand>
 80081e4:	4603      	mov	r3, r0
 80081e6:	73fb      	strb	r3, [r7, #15]
	}

	if (ret == ES_WIFI_STATUS_OK) {
 80081e8:	7bfb      	ldrb	r3, [r7, #15]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d114      	bne.n	8008218 <ES_WIFI_StartClientConnection+0xb4>
		sprintf((char*) Obj->CmdData, "P2=%d\r", conn->LocalPort);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	889b      	ldrh	r3, [r3, #4]
 80081f8:	461a      	mov	r2, r3
 80081fa:	494a      	ldr	r1, [pc, #296]	; (8008324 <ES_WIFI_StartClientConnection+0x1c0>)
 80081fc:	f004 fc2c 	bl	800ca58 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800820c:	461a      	mov	r2, r3
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f7ff fd32 	bl	8007c78 <AT_ExecuteCommand>
 8008214:	4603      	mov	r3, r0
 8008216:	73fb      	strb	r3, [r7, #15]
	}

	if ((ret == ES_WIFI_STATUS_OK)
 8008218:	7bfb      	ldrb	r3, [r7, #15]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d11c      	bne.n	8008258 <ES_WIFI_StartClientConnection+0xf4>
			&& ((conn->Type == ES_WIFI_TCP_CONNECTION)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d003      	beq.n	800822e <ES_WIFI_StartClientConnection+0xca>
					|| (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))) {
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	2b03      	cmp	r3, #3
 800822c:	d114      	bne.n	8008258 <ES_WIFI_StartClientConnection+0xf4>
		sprintf((char*) Obj->CmdData, "P4=%d\r", conn->RemotePort);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	885b      	ldrh	r3, [r3, #2]
 8008238:	461a      	mov	r2, r3
 800823a:	493b      	ldr	r1, [pc, #236]	; (8008328 <ES_WIFI_StartClientConnection+0x1c4>)
 800823c:	f004 fc0c 	bl	800ca58 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800824c:	461a      	mov	r2, r3
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f7ff fd12 	bl	8007c78 <AT_ExecuteCommand>
 8008254:	4603      	mov	r3, r0
 8008256:	73fb      	strb	r3, [r7, #15]
	}

	if ((ret == ES_WIFI_STATUS_OK)
 8008258:	7bfb      	ldrb	r3, [r7, #15]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d128      	bne.n	80082b0 <ES_WIFI_StartClientConnection+0x14c>
			&& ((conn->Type == ES_WIFI_TCP_CONNECTION)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d003      	beq.n	800826e <ES_WIFI_StartClientConnection+0x10a>
					|| (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))) {
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	2b03      	cmp	r3, #3
 800826c:	d120      	bne.n	80082b0 <ES_WIFI_StartClientConnection+0x14c>
		sprintf((char*) Obj->CmdData, "P3=%d.%d.%d.%d\r", conn->RemoteIP[0],
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	799b      	ldrb	r3, [r3, #6]
 8008278:	4619      	mov	r1, r3
				conn->RemoteIP[1], conn->RemoteIP[2], conn->RemoteIP[3]);
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	79db      	ldrb	r3, [r3, #7]
		sprintf((char*) Obj->CmdData, "P3=%d.%d.%d.%d\r", conn->RemoteIP[0],
 800827e:	461c      	mov	r4, r3
				conn->RemoteIP[1], conn->RemoteIP[2], conn->RemoteIP[3]);
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	7a1b      	ldrb	r3, [r3, #8]
		sprintf((char*) Obj->CmdData, "P3=%d.%d.%d.%d\r", conn->RemoteIP[0],
 8008284:	461a      	mov	r2, r3
				conn->RemoteIP[1], conn->RemoteIP[2], conn->RemoteIP[3]);
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	7a5b      	ldrb	r3, [r3, #9]
		sprintf((char*) Obj->CmdData, "P3=%d.%d.%d.%d\r", conn->RemoteIP[0],
 800828a:	9301      	str	r3, [sp, #4]
 800828c:	9200      	str	r2, [sp, #0]
 800828e:	4623      	mov	r3, r4
 8008290:	460a      	mov	r2, r1
 8008292:	4926      	ldr	r1, [pc, #152]	; (800832c <ES_WIFI_StartClientConnection+0x1c8>)
 8008294:	f004 fbe0 	bl	800ca58 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80082a4:	461a      	mov	r2, r3
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7ff fce6 	bl	8007c78 <AT_ExecuteCommand>
 80082ac:	4603      	mov	r3, r0
 80082ae:	73fb      	strb	r3, [r7, #15]
	}

	if ((ret == ES_WIFI_STATUS_OK)
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d116      	bne.n	80082e4 <ES_WIFI_StartClientConnection+0x180>
			&& (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) {
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d112      	bne.n	80082e4 <ES_WIFI_StartClientConnection+0x180>
		sprintf((char*) Obj->CmdData, "P9=2\r");
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80082c4:	491a      	ldr	r1, [pc, #104]	; (8008330 <ES_WIFI_StartClientConnection+0x1cc>)
 80082c6:	4618      	mov	r0, r3
 80082c8:	f004 fbc6 	bl	800ca58 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80082d8:	461a      	mov	r2, r3
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f7ff fccc 	bl	8007c78 <AT_ExecuteCommand>
 80082e0:	4603      	mov	r3, r0
 80082e2:	73fb      	strb	r3, [r7, #15]
	}

	if (ret == ES_WIFI_STATUS_OK) {
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d112      	bne.n	8008310 <ES_WIFI_StartClientConnection+0x1ac>
		sprintf((char*) Obj->CmdData, "P6=1\r");
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80082f0:	4910      	ldr	r1, [pc, #64]	; (8008334 <ES_WIFI_StartClientConnection+0x1d0>)
 80082f2:	4618      	mov	r0, r3
 80082f4:	f004 fbb0 	bl	800ca58 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008304:	461a      	mov	r2, r3
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7ff fcb6 	bl	8007c78 <AT_ExecuteCommand>
 800830c:	4603      	mov	r3, r0
 800830e:	73fb      	strb	r3, [r7, #15]
	}

	UNLOCK_WIFI();
	return ret;
 8008310:	7bfb      	ldrb	r3, [r7, #15]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3714      	adds	r7, #20
 8008316:	46bd      	mov	sp, r7
 8008318:	bd90      	pop	{r4, r7, pc}
 800831a:	bf00      	nop
 800831c:	0800e060 	.word	0x0800e060
 8008320:	0800e068 	.word	0x0800e068
 8008324:	0800e070 	.word	0x0800e070
 8008328:	0800e078 	.word	0x0800e078
 800832c:	0800e080 	.word	0x0800e080
 8008330:	0800e090 	.word	0x0800e090
 8008334:	0800e098 	.word	0x0800e098

08008338 <ES_WIFI_SendData>:
 * @param  pdata: pointer to data
 * @param  len : length of the data to be sent
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
		uint8_t *pdata, uint16_t Reqlen, uint16_t *SentLen, uint32_t Timeout) {
 8008338:	b580      	push	{r7, lr}
 800833a:	b088      	sub	sp, #32
 800833c:	af02      	add	r7, sp, #8
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	607a      	str	r2, [r7, #4]
 8008342:	461a      	mov	r2, r3
 8008344:	460b      	mov	r3, r1
 8008346:	72fb      	strb	r3, [r7, #11]
 8008348:	4613      	mov	r3, r2
 800834a:	813b      	strh	r3, [r7, #8]
	uint32_t wkgTimeOut;

	ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800834c:	2302      	movs	r3, #2
 800834e:	74fb      	strb	r3, [r7, #19]

	if (Timeout == 0) {
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	2b00      	cmp	r3, #0
 8008354:	d102      	bne.n	800835c <ES_WIFI_SendData+0x24>
		wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8008356:	2301      	movs	r3, #1
 8008358:	617b      	str	r3, [r7, #20]
 800835a:	e001      	b.n	8008360 <ES_WIFI_SendData+0x28>
	} else {
		wkgTimeOut = Timeout;
 800835c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835e:	617b      	str	r3, [r7, #20]
	}

	LOCK_WIFI();
	if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 8008360:	893b      	ldrh	r3, [r7, #8]
 8008362:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8008366:	d302      	bcc.n	800836e <ES_WIFI_SendData+0x36>
		Reqlen = ES_WIFI_PAYLOAD_SIZE;
 8008368:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800836c:	813b      	strh	r3, [r7, #8]

	*SentLen = Reqlen;
 800836e:	6a3b      	ldr	r3, [r7, #32]
 8008370:	893a      	ldrh	r2, [r7, #8]
 8008372:	801a      	strh	r2, [r3, #0]
	sprintf((char*) Obj->CmdData, "P0=%d\r", Socket);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800837a:	7afa      	ldrb	r2, [r7, #11]
 800837c:	4942      	ldr	r1, [pc, #264]	; (8008488 <ES_WIFI_SendData+0x150>)
 800837e:	4618      	mov	r0, r3
 8008380:	f004 fb6a 	bl	800ca58 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008390:	461a      	mov	r2, r3
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f7ff fc70 	bl	8007c78 <AT_ExecuteCommand>
 8008398:	4603      	mov	r3, r0
 800839a:	74fb      	strb	r3, [r7, #19]
	if (ret == ES_WIFI_STATUS_OK) {
 800839c:	7cfb      	ldrb	r3, [r7, #19]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d15e      	bne.n	8008460 <ES_WIFI_SendData+0x128>
		sprintf((char*) Obj->CmdData, "S2=%lu\r", wkgTimeOut);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	4938      	ldr	r1, [pc, #224]	; (800848c <ES_WIFI_SendData+0x154>)
 80083ac:	4618      	mov	r0, r3
 80083ae:	f004 fb53 	bl	800ca58 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80083be:	461a      	mov	r2, r3
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f7ff fc59 	bl	8007c78 <AT_ExecuteCommand>
 80083c6:	4603      	mov	r3, r0
 80083c8:	74fb      	strb	r3, [r7, #19]

		if (ret == ES_WIFI_STATUS_OK) {
 80083ca:	7cfb      	ldrb	r3, [r7, #19]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d13d      	bne.n	800844c <ES_WIFI_SendData+0x114>
			sprintf((char*) Obj->CmdData, "S3=%04d\r", Reqlen);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80083d6:	893a      	ldrh	r2, [r7, #8]
 80083d8:	492d      	ldr	r1, [pc, #180]	; (8008490 <ES_WIFI_SendData+0x158>)
 80083da:	4618      	mov	r0, r3
 80083dc:	f004 fb3c 	bl	800ca58 <siprintf>
			ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen,
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f503 7194 	add.w	r1, r3, #296	; 0x128
					Obj->CmdData);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
			ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen,
 80083ec:	893a      	ldrh	r2, [r7, #8]
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	4613      	mov	r3, r2
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f7ff fca5 	bl	8007d44 <AT_RequestSendData>
 80083fa:	4603      	mov	r3, r0
 80083fc:	74fb      	strb	r3, [r7, #19]

			if (ret == ES_WIFI_STATUS_OK) {
 80083fe:	7cfb      	ldrb	r3, [r7, #19]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d119      	bne.n	8008438 <ES_WIFI_SendData+0x100>
				if (strstr((char*) Obj->CmdData, "-1\r\n")) {
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800840a:	4922      	ldr	r1, [pc, #136]	; (8008494 <ES_WIFI_SendData+0x15c>)
 800840c:	4618      	mov	r0, r3
 800840e:	f004 fb99 	bl	800cb44 <strstr>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d02c      	beq.n	8008472 <ES_WIFI_SendData+0x13a>
					DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData)
 8008418:	f240 72c7 	movw	r2, #1991	; 0x7c7
 800841c:	491e      	ldr	r1, [pc, #120]	; (8008498 <ES_WIFI_SendData+0x160>)
 800841e:	481f      	ldr	r0, [pc, #124]	; (800849c <ES_WIFI_SendData+0x164>)
 8008420:	f004 f9de 	bl	800c7e0 <iprintf>
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800842a:	4619      	mov	r1, r3
 800842c:	481c      	ldr	r0, [pc, #112]	; (80084a0 <ES_WIFI_SendData+0x168>)
 800842e:	f004 f9d7 	bl	800c7e0 <iprintf>
					;
					ret = ES_WIFI_STATUS_ERROR;
 8008432:	2302      	movs	r3, #2
 8008434:	74fb      	strb	r3, [r7, #19]
 8008436:	e01c      	b.n	8008472 <ES_WIFI_SendData+0x13a>
				}
			} else {
				DEBUG("Send Data command failed\n")
 8008438:	f240 72cc 	movw	r2, #1996	; 0x7cc
 800843c:	4916      	ldr	r1, [pc, #88]	; (8008498 <ES_WIFI_SendData+0x160>)
 800843e:	4817      	ldr	r0, [pc, #92]	; (800849c <ES_WIFI_SendData+0x164>)
 8008440:	f004 f9ce 	bl	800c7e0 <iprintf>
 8008444:	4817      	ldr	r0, [pc, #92]	; (80084a4 <ES_WIFI_SendData+0x16c>)
 8008446:	f004 fa51 	bl	800c8ec <puts>
 800844a:	e012      	b.n	8008472 <ES_WIFI_SendData+0x13a>
				;
			}
		} else {
			DEBUG("S2 command failed\n")
 800844c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008450:	4911      	ldr	r1, [pc, #68]	; (8008498 <ES_WIFI_SendData+0x160>)
 8008452:	4812      	ldr	r0, [pc, #72]	; (800849c <ES_WIFI_SendData+0x164>)
 8008454:	f004 f9c4 	bl	800c7e0 <iprintf>
 8008458:	4813      	ldr	r0, [pc, #76]	; (80084a8 <ES_WIFI_SendData+0x170>)
 800845a:	f004 fa47 	bl	800c8ec <puts>
 800845e:	e008      	b.n	8008472 <ES_WIFI_SendData+0x13a>
			;
		}
	} else {
		DEBUG("P0 command failed\n")
 8008460:	f240 72d4 	movw	r2, #2004	; 0x7d4
 8008464:	490c      	ldr	r1, [pc, #48]	; (8008498 <ES_WIFI_SendData+0x160>)
 8008466:	480d      	ldr	r0, [pc, #52]	; (800849c <ES_WIFI_SendData+0x164>)
 8008468:	f004 f9ba 	bl	800c7e0 <iprintf>
 800846c:	480f      	ldr	r0, [pc, #60]	; (80084ac <ES_WIFI_SendData+0x174>)
 800846e:	f004 fa3d 	bl	800c8ec <puts>
		;
	}

	if (ret == ES_WIFI_STATUS_ERROR) {
 8008472:	7cfb      	ldrb	r3, [r7, #19]
 8008474:	2b02      	cmp	r3, #2
 8008476:	d102      	bne.n	800847e <ES_WIFI_SendData+0x146>
		*SentLen = 0;
 8008478:	6a3b      	ldr	r3, [r7, #32]
 800847a:	2200      	movs	r2, #0
 800847c:	801a      	strh	r2, [r3, #0]
	}UNLOCK_WIFI();
	return ret;
 800847e:	7cfb      	ldrb	r3, [r7, #19]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3718      	adds	r7, #24
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	0800e060 	.word	0x0800e060
 800848c:	0800e218 	.word	0x0800e218
 8008490:	0800e220 	.word	0x0800e220
 8008494:	0800e22c 	.word	0x0800e22c
 8008498:	0800e0f0 	.word	0x0800e0f0
 800849c:	0800e10c 	.word	0x0800e10c
 80084a0:	0800e234 	.word	0x0800e234
 80084a4:	0800e250 	.word	0x0800e250
 80084a8:	0800e26c 	.word	0x0800e26c
 80084ac:	0800e280 	.word	0x0800e280

080084b0 <ES_WIFI_ReceiveData>:
 * @param  len : pointer to the length of the data to be received
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket,
		uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen,
		uint32_t Timeout) {
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b088      	sub	sp, #32
 80084b4:	af02      	add	r7, sp, #8
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	607a      	str	r2, [r7, #4]
 80084ba:	461a      	mov	r2, r3
 80084bc:	460b      	mov	r3, r1
 80084be:	72fb      	strb	r3, [r7, #11]
 80084c0:	4613      	mov	r3, r2
 80084c2:	813b      	strh	r3, [r7, #8]
	uint32_t wkgTimeOut;

	ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80084c4:	2302      	movs	r3, #2
 80084c6:	74fb      	strb	r3, [r7, #19]

	if (Timeout == 0) {
 80084c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d102      	bne.n	80084d4 <ES_WIFI_ReceiveData+0x24>
		wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 80084ce:	2301      	movs	r3, #1
 80084d0:	617b      	str	r3, [r7, #20]
 80084d2:	e001      	b.n	80084d8 <ES_WIFI_ReceiveData+0x28>
	} else {
		wkgTimeOut = Timeout;
 80084d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d6:	617b      	str	r3, [r7, #20]
	}

	LOCK_WIFI();

	if (Reqlen <= ES_WIFI_PAYLOAD_SIZE) {
 80084d8:	893b      	ldrh	r3, [r7, #8]
 80084da:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80084de:	f200 808b 	bhi.w	80085f8 <ES_WIFI_ReceiveData+0x148>
		sprintf((char*) Obj->CmdData, "P0=%d\r", Socket);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80084e8:	7afa      	ldrb	r2, [r7, #11]
 80084ea:	4946      	ldr	r1, [pc, #280]	; (8008604 <ES_WIFI_ReceiveData+0x154>)
 80084ec:	4618      	mov	r0, r3
 80084ee:	f004 fab3 	bl	800ca58 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80084fe:	461a      	mov	r2, r3
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f7ff fbb9 	bl	8007c78 <AT_ExecuteCommand>
 8008506:	4603      	mov	r3, r0
 8008508:	74fb      	strb	r3, [r7, #19]

		if (ret == ES_WIFI_STATUS_OK) {
 800850a:	7cfb      	ldrb	r3, [r7, #19]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d165      	bne.n	80085dc <ES_WIFI_ReceiveData+0x12c>
			sprintf((char*) Obj->CmdData, "R1=%d\r", Reqlen);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008516:	893a      	ldrh	r2, [r7, #8]
 8008518:	493b      	ldr	r1, [pc, #236]	; (8008608 <ES_WIFI_ReceiveData+0x158>)
 800851a:	4618      	mov	r0, r3
 800851c:	f004 fa9c 	bl	800ca58 <siprintf>
			ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800852c:	461a      	mov	r2, r3
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f7ff fba2 	bl	8007c78 <AT_ExecuteCommand>
 8008534:	4603      	mov	r3, r0
 8008536:	74fb      	strb	r3, [r7, #19]
			if (ret == ES_WIFI_STATUS_OK) {
 8008538:	7cfb      	ldrb	r3, [r7, #19]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d141      	bne.n	80085c2 <ES_WIFI_ReceiveData+0x112>
				sprintf((char*) Obj->CmdData, "R2=%lu\r", wkgTimeOut);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	4931      	ldr	r1, [pc, #196]	; (800860c <ES_WIFI_ReceiveData+0x15c>)
 8008548:	4618      	mov	r0, r3
 800854a:	f004 fa85 	bl	800ca58 <siprintf>
				ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800855a:	461a      	mov	r2, r3
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f7ff fb8b 	bl	8007c78 <AT_ExecuteCommand>
 8008562:	4603      	mov	r3, r0
 8008564:	74fb      	strb	r3, [r7, #19]
				if (ret == ES_WIFI_STATUS_OK) {
 8008566:	7cfb      	ldrb	r3, [r7, #19]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d120      	bne.n	80085ae <ES_WIFI_ReceiveData+0xfe>
					sprintf((char*) Obj->CmdData, "R0\r");
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008572:	4927      	ldr	r1, [pc, #156]	; (8008610 <ES_WIFI_ReceiveData+0x160>)
 8008574:	4618      	mov	r0, r3
 8008576:	f004 fa6f 	bl	800ca58 <siprintf>
					ret = AT_RequestReceiveData(Obj, Obj->CmdData,
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008580:	893a      	ldrh	r2, [r7, #8]
 8008582:	6a3b      	ldr	r3, [r7, #32]
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	4613      	mov	r3, r2
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f7ff fc50 	bl	8007e30 <AT_RequestReceiveData>
 8008590:	4603      	mov	r3, r0
 8008592:	74fb      	strb	r3, [r7, #19]
							(char*) pdata, Reqlen, Receivedlen);
					if (ret != ES_WIFI_STATUS_OK) {
 8008594:	7cfb      	ldrb	r3, [r7, #19]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d02e      	beq.n	80085f8 <ES_WIFI_ReceiveData+0x148>
						DEBUG("AT_RequestReceiveData  failed\n")
 800859a:	f44f 6205 	mov.w	r2, #2128	; 0x850
 800859e:	491d      	ldr	r1, [pc, #116]	; (8008614 <ES_WIFI_ReceiveData+0x164>)
 80085a0:	481d      	ldr	r0, [pc, #116]	; (8008618 <ES_WIFI_ReceiveData+0x168>)
 80085a2:	f004 f91d 	bl	800c7e0 <iprintf>
 80085a6:	481d      	ldr	r0, [pc, #116]	; (800861c <ES_WIFI_ReceiveData+0x16c>)
 80085a8:	f004 f9a0 	bl	800c8ec <puts>
 80085ac:	e024      	b.n	80085f8 <ES_WIFI_ReceiveData+0x148>
						;
					}
				} else {
					DEBUG("setting timeout failed\n")
 80085ae:	f640 0254 	movw	r2, #2132	; 0x854
 80085b2:	4918      	ldr	r1, [pc, #96]	; (8008614 <ES_WIFI_ReceiveData+0x164>)
 80085b4:	4818      	ldr	r0, [pc, #96]	; (8008618 <ES_WIFI_ReceiveData+0x168>)
 80085b6:	f004 f913 	bl	800c7e0 <iprintf>
 80085ba:	4819      	ldr	r0, [pc, #100]	; (8008620 <ES_WIFI_ReceiveData+0x170>)
 80085bc:	f004 f996 	bl	800c8ec <puts>
 80085c0:	e01a      	b.n	80085f8 <ES_WIFI_ReceiveData+0x148>
					;
				}
			} else {
				DEBUG("setting requested len failed\n")
 80085c2:	f640 0258 	movw	r2, #2136	; 0x858
 80085c6:	4913      	ldr	r1, [pc, #76]	; (8008614 <ES_WIFI_ReceiveData+0x164>)
 80085c8:	4813      	ldr	r0, [pc, #76]	; (8008618 <ES_WIFI_ReceiveData+0x168>)
 80085ca:	f004 f909 	bl	800c7e0 <iprintf>
 80085ce:	4815      	ldr	r0, [pc, #84]	; (8008624 <ES_WIFI_ReceiveData+0x174>)
 80085d0:	f004 f98c 	bl	800c8ec <puts>
				;
				*Receivedlen = 0;
 80085d4:	6a3b      	ldr	r3, [r7, #32]
 80085d6:	2200      	movs	r2, #0
 80085d8:	801a      	strh	r2, [r3, #0]
 80085da:	e00d      	b.n	80085f8 <ES_WIFI_ReceiveData+0x148>
			}
		} else {
			DEBUG("setting socket for read failed\n")
 80085dc:	f640 025d 	movw	r2, #2141	; 0x85d
 80085e0:	490c      	ldr	r1, [pc, #48]	; (8008614 <ES_WIFI_ReceiveData+0x164>)
 80085e2:	480d      	ldr	r0, [pc, #52]	; (8008618 <ES_WIFI_ReceiveData+0x168>)
 80085e4:	f004 f8fc 	bl	800c7e0 <iprintf>
 80085e8:	480f      	ldr	r0, [pc, #60]	; (8008628 <ES_WIFI_ReceiveData+0x178>)
 80085ea:	f004 f97f 	bl	800c8ec <puts>
			;
			issue15++;
 80085ee:	4b0f      	ldr	r3, [pc, #60]	; (800862c <ES_WIFI_ReceiveData+0x17c>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	3301      	adds	r3, #1
 80085f4:	4a0d      	ldr	r2, [pc, #52]	; (800862c <ES_WIFI_ReceiveData+0x17c>)
 80085f6:	6013      	str	r3, [r2, #0]
		}
	}UNLOCK_WIFI();
	return ret;
 80085f8:	7cfb      	ldrb	r3, [r7, #19]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3718      	adds	r7, #24
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	0800e060 	.word	0x0800e060
 8008608:	0800e2a4 	.word	0x0800e2a4
 800860c:	0800e2ac 	.word	0x0800e2ac
 8008610:	0800e2b4 	.word	0x0800e2b4
 8008614:	0800e0f0 	.word	0x0800e0f0
 8008618:	0800e10c 	.word	0x0800e10c
 800861c:	0800e2b8 	.word	0x0800e2b8
 8008620:	0800e2d8 	.word	0x0800e2d8
 8008624:	0800e2f0 	.word	0x0800e2f0
 8008628:	0800e310 	.word	0x0800e310
 800862c:	20000868 	.word	0x20000868

08008630 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b08c      	sub	sp, #48	; 0x30
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8008638:	4b57      	ldr	r3, [pc, #348]	; (8008798 <SPI_WIFI_MspInit+0x168>)
 800863a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800863c:	4a56      	ldr	r2, [pc, #344]	; (8008798 <SPI_WIFI_MspInit+0x168>)
 800863e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008642:	6593      	str	r3, [r2, #88]	; 0x58
 8008644:	4b54      	ldr	r3, [pc, #336]	; (8008798 <SPI_WIFI_MspInit+0x168>)
 8008646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800864c:	61bb      	str	r3, [r7, #24]
 800864e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008650:	4b51      	ldr	r3, [pc, #324]	; (8008798 <SPI_WIFI_MspInit+0x168>)
 8008652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008654:	4a50      	ldr	r2, [pc, #320]	; (8008798 <SPI_WIFI_MspInit+0x168>)
 8008656:	f043 0302 	orr.w	r3, r3, #2
 800865a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800865c:	4b4e      	ldr	r3, [pc, #312]	; (8008798 <SPI_WIFI_MspInit+0x168>)
 800865e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008660:	f003 0302 	and.w	r3, r3, #2
 8008664:	617b      	str	r3, [r7, #20]
 8008666:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008668:	4b4b      	ldr	r3, [pc, #300]	; (8008798 <SPI_WIFI_MspInit+0x168>)
 800866a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800866c:	4a4a      	ldr	r2, [pc, #296]	; (8008798 <SPI_WIFI_MspInit+0x168>)
 800866e:	f043 0304 	orr.w	r3, r3, #4
 8008672:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008674:	4b48      	ldr	r3, [pc, #288]	; (8008798 <SPI_WIFI_MspInit+0x168>)
 8008676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008678:	f003 0304 	and.w	r3, r3, #4
 800867c:	613b      	str	r3, [r7, #16]
 800867e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008680:	4b45      	ldr	r3, [pc, #276]	; (8008798 <SPI_WIFI_MspInit+0x168>)
 8008682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008684:	4a44      	ldr	r2, [pc, #272]	; (8008798 <SPI_WIFI_MspInit+0x168>)
 8008686:	f043 0310 	orr.w	r3, r3, #16
 800868a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800868c:	4b42      	ldr	r3, [pc, #264]	; (8008798 <SPI_WIFI_MspInit+0x168>)
 800868e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008690:	f003 0310 	and.w	r3, r3, #16
 8008694:	60fb      	str	r3, [r7, #12]
 8008696:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8008698:	2200      	movs	r2, #0
 800869a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800869e:	483f      	ldr	r0, [pc, #252]	; (800879c <SPI_WIFI_MspInit+0x16c>)
 80086a0:	f7fa f832 	bl	8002708 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 80086a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086a8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80086aa:	2301      	movs	r3, #1
 80086ac:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80086ae:	2300      	movs	r3, #0
 80086b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80086b2:	2300      	movs	r3, #0
 80086b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80086b6:	f107 031c 	add.w	r3, r7, #28
 80086ba:	4619      	mov	r1, r3
 80086bc:	4837      	ldr	r0, [pc, #220]	; (800879c <SPI_WIFI_MspInit+0x16c>)
 80086be:	f7f9 fd6d 	bl	800219c <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 80086c2:	2302      	movs	r3, #2
 80086c4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80086c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80086ca:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80086cc:	2300      	movs	r3, #0
 80086ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80086d0:	2300      	movs	r3, #0
 80086d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80086d4:	f107 031c 	add.w	r3, r7, #28
 80086d8:	4619      	mov	r1, r3
 80086da:	4831      	ldr	r0, [pc, #196]	; (80087a0 <SPI_WIFI_MspInit+0x170>)
 80086dc:	f7f9 fd5e 	bl	800219c <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 80086e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086e4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80086e6:	2301      	movs	r3, #1
 80086e8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80086ea:	2300      	movs	r3, #0
 80086ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80086ee:	2300      	movs	r3, #0
 80086f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 80086f2:	2300      	movs	r3, #0
 80086f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80086f6:	f107 031c 	add.w	r3, r7, #28
 80086fa:	4619      	mov	r1, r3
 80086fc:	4828      	ldr	r0, [pc, #160]	; (80087a0 <SPI_WIFI_MspInit+0x170>)
 80086fe:	f7f9 fd4d 	bl	800219c <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8008702:	2201      	movs	r2, #1
 8008704:	2101      	movs	r1, #1
 8008706:	4826      	ldr	r0, [pc, #152]	; (80087a0 <SPI_WIFI_MspInit+0x170>)
 8008708:	f7f9 fffe 	bl	8002708 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 800870c:	2301      	movs	r3, #1
 800870e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8008710:	2301      	movs	r3, #1
 8008712:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008714:	2300      	movs	r3, #0
 8008716:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008718:	2301      	movs	r3, #1
 800871a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 800871c:	f107 031c 	add.w	r3, r7, #28
 8008720:	4619      	mov	r1, r3
 8008722:	481f      	ldr	r0, [pc, #124]	; (80087a0 <SPI_WIFI_MspInit+0x170>)
 8008724:	f7f9 fd3a 	bl	800219c <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8008728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800872c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800872e:	2302      	movs	r3, #2
 8008730:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008732:	2300      	movs	r3, #0
 8008734:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008736:	2301      	movs	r3, #1
 8008738:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800873a:	2306      	movs	r3, #6
 800873c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800873e:	f107 031c 	add.w	r3, r7, #28
 8008742:	4619      	mov	r1, r3
 8008744:	4817      	ldr	r0, [pc, #92]	; (80087a4 <SPI_WIFI_MspInit+0x174>)
 8008746:	f7f9 fd29 	bl	800219c <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 800874a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800874e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8008750:	2302      	movs	r3, #2
 8008752:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008754:	2300      	movs	r3, #0
 8008756:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008758:	2301      	movs	r3, #1
 800875a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800875c:	2306      	movs	r3, #6
 800875e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8008760:	f107 031c 	add.w	r3, r7, #28
 8008764:	4619      	mov	r1, r3
 8008766:	480f      	ldr	r0, [pc, #60]	; (80087a4 <SPI_WIFI_MspInit+0x174>)
 8008768:	f7f9 fd18 	bl	800219c <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 800876c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008770:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8008772:	2302      	movs	r3, #2
 8008774:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8008776:	2301      	movs	r3, #1
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800877a:	2301      	movs	r3, #1
 800877c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800877e:	2306      	movs	r3, #6
 8008780:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8008782:	f107 031c 	add.w	r3, r7, #28
 8008786:	4619      	mov	r1, r3
 8008788:	4806      	ldr	r0, [pc, #24]	; (80087a4 <SPI_WIFI_MspInit+0x174>)
 800878a:	f7f9 fd07 	bl	800219c <HAL_GPIO_Init>
}
 800878e:	bf00      	nop
 8008790:	3730      	adds	r7, #48	; 0x30
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	40021000 	.word	0x40021000
 800879c:	48000400 	.word	0x48000400
 80087a0:	48001000 	.word	0x48001000
 80087a4:	48000800 	.word	0x48000800

080087a8 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	4603      	mov	r3, r0
 80087b0:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 80087b2:	2300      	movs	r3, #0
 80087b4:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 80087b6:	88fb      	ldrh	r3, [r7, #6]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d145      	bne.n	8008848 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 80087bc:	4b27      	ldr	r3, [pc, #156]	; (800885c <SPI_WIFI_Init+0xb4>)
 80087be:	4a28      	ldr	r2, [pc, #160]	; (8008860 <SPI_WIFI_Init+0xb8>)
 80087c0:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 80087c2:	4826      	ldr	r0, [pc, #152]	; (800885c <SPI_WIFI_Init+0xb4>)
 80087c4:	f7ff ff34 	bl	8008630 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 80087c8:	4b24      	ldr	r3, [pc, #144]	; (800885c <SPI_WIFI_Init+0xb4>)
 80087ca:	f44f 7282 	mov.w	r2, #260	; 0x104
 80087ce:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 80087d0:	4b22      	ldr	r3, [pc, #136]	; (800885c <SPI_WIFI_Init+0xb4>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 80087d6:	4b21      	ldr	r3, [pc, #132]	; (800885c <SPI_WIFI_Init+0xb4>)
 80087d8:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80087dc:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80087de:	4b1f      	ldr	r3, [pc, #124]	; (800885c <SPI_WIFI_Init+0xb4>)
 80087e0:	2200      	movs	r2, #0
 80087e2:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80087e4:	4b1d      	ldr	r3, [pc, #116]	; (800885c <SPI_WIFI_Init+0xb4>)
 80087e6:	2200      	movs	r2, #0
 80087e8:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 80087ea:	4b1c      	ldr	r3, [pc, #112]	; (800885c <SPI_WIFI_Init+0xb4>)
 80087ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087f0:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 80087f2:	4b1a      	ldr	r3, [pc, #104]	; (800885c <SPI_WIFI_Init+0xb4>)
 80087f4:	2210      	movs	r2, #16
 80087f6:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80087f8:	4b18      	ldr	r3, [pc, #96]	; (800885c <SPI_WIFI_Init+0xb4>)
 80087fa:	2200      	movs	r2, #0
 80087fc:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 80087fe:	4b17      	ldr	r3, [pc, #92]	; (800885c <SPI_WIFI_Init+0xb4>)
 8008800:	2200      	movs	r2, #0
 8008802:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8008804:	4b15      	ldr	r3, [pc, #84]	; (800885c <SPI_WIFI_Init+0xb4>)
 8008806:	2200      	movs	r2, #0
 8008808:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 800880a:	4b14      	ldr	r3, [pc, #80]	; (800885c <SPI_WIFI_Init+0xb4>)
 800880c:	2200      	movs	r2, #0
 800880e:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8008810:	4812      	ldr	r0, [pc, #72]	; (800885c <SPI_WIFI_Init+0xb4>)
 8008812:	f7fb fe55 	bl	80044c0 <HAL_SPI_Init>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d002      	beq.n	8008822 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 800881c:	f04f 33ff 	mov.w	r3, #4294967295
 8008820:	e018      	b.n	8008854 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8008822:	2200      	movs	r2, #0
 8008824:	2100      	movs	r1, #0
 8008826:	2007      	movs	r0, #7
 8008828:	f7f9 fb02 	bl	8001e30 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 800882c:	2007      	movs	r0, #7
 800882e:	f7f9 fb1b 	bl	8001e68 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8008832:	2200      	movs	r2, #0
 8008834:	2100      	movs	r1, #0
 8008836:	2033      	movs	r0, #51	; 0x33
 8008838:	f7f9 fafa 	bl	8001e30 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 800883c:	2033      	movs	r0, #51	; 0x33
 800883e:	f7f9 fb13 	bl	8001e68 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8008842:	200a      	movs	r0, #10
 8008844:	f000 f9fe 	bl	8008c44 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 8008848:	f000 f80c 	bl	8008864 <SPI_WIFI_ResetModule>
 800884c:	4603      	mov	r3, r0
 800884e:	73fb      	strb	r3, [r7, #15]

  return rc;
 8008850:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008854:	4618      	mov	r0, r3
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	2000086c 	.word	0x2000086c
 8008860:	40003c00 	.word	0x40003c00

08008864 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800886a:	f7f9 f9f9 	bl	8001c60 <HAL_GetTick>
 800886e:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8008870:	2300      	movs	r3, #0
 8008872:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8008874:	2200      	movs	r2, #0
 8008876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800887a:	4830      	ldr	r0, [pc, #192]	; (800893c <SPI_WIFI_ResetModule+0xd8>)
 800887c:	f7f9 ff44 	bl	8002708 <HAL_GPIO_WritePin>
 8008880:	200a      	movs	r0, #10
 8008882:	f7f9 f9f9 	bl	8001c78 <HAL_Delay>
 8008886:	2201      	movs	r2, #1
 8008888:	f44f 7180 	mov.w	r1, #256	; 0x100
 800888c:	482b      	ldr	r0, [pc, #172]	; (800893c <SPI_WIFI_ResetModule+0xd8>)
 800888e:	f7f9 ff3b 	bl	8002708 <HAL_GPIO_WritePin>
 8008892:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008896:	f7f9 f9ef 	bl	8001c78 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 800889a:	2200      	movs	r2, #0
 800889c:	2101      	movs	r1, #1
 800889e:	4827      	ldr	r0, [pc, #156]	; (800893c <SPI_WIFI_ResetModule+0xd8>)
 80088a0:	f7f9 ff32 	bl	8002708 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80088a4:	200f      	movs	r0, #15
 80088a6:	f000 f9cd 	bl	8008c44 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 80088aa:	e020      	b.n	80088ee <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
 80088ae:	463a      	mov	r2, r7
 80088b0:	18d1      	adds	r1, r2, r3
 80088b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80088b6:	2201      	movs	r2, #1
 80088b8:	4821      	ldr	r0, [pc, #132]	; (8008940 <SPI_WIFI_ResetModule+0xdc>)
 80088ba:	f7fb fecc 	bl	8004656 <HAL_SPI_Receive>
 80088be:	4603      	mov	r3, r0
 80088c0:	71fb      	strb	r3, [r7, #7]
    count += 2;
 80088c2:	7bfb      	ldrb	r3, [r7, #15]
 80088c4:	3302      	adds	r3, #2
 80088c6:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 80088c8:	f7f9 f9ca 	bl	8001c60 <HAL_GetTick>
 80088cc:	4602      	mov	r2, r0
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088d6:	d202      	bcs.n	80088de <SPI_WIFI_ResetModule+0x7a>
 80088d8:	79fb      	ldrb	r3, [r7, #7]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d007      	beq.n	80088ee <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 80088de:	2201      	movs	r2, #1
 80088e0:	2101      	movs	r1, #1
 80088e2:	4816      	ldr	r0, [pc, #88]	; (800893c <SPI_WIFI_ResetModule+0xd8>)
 80088e4:	f7f9 ff10 	bl	8002708 <HAL_GPIO_WritePin>
      return -1;
 80088e8:	f04f 33ff 	mov.w	r3, #4294967295
 80088ec:	e021      	b.n	8008932 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 80088ee:	2102      	movs	r1, #2
 80088f0:	4812      	ldr	r0, [pc, #72]	; (800893c <SPI_WIFI_ResetModule+0xd8>)
 80088f2:	f7f9 fef1 	bl	80026d8 <HAL_GPIO_ReadPin>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d0d7      	beq.n	80088ac <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 80088fc:	2201      	movs	r2, #1
 80088fe:	2101      	movs	r1, #1
 8008900:	480e      	ldr	r0, [pc, #56]	; (800893c <SPI_WIFI_ResetModule+0xd8>)
 8008902:	f7f9 ff01 	bl	8002708 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8008906:	783b      	ldrb	r3, [r7, #0]
 8008908:	2b15      	cmp	r3, #21
 800890a:	d10e      	bne.n	800892a <SPI_WIFI_ResetModule+0xc6>
 800890c:	787b      	ldrb	r3, [r7, #1]
 800890e:	2b15      	cmp	r3, #21
 8008910:	d10b      	bne.n	800892a <SPI_WIFI_ResetModule+0xc6>
 8008912:	78bb      	ldrb	r3, [r7, #2]
 8008914:	2b0d      	cmp	r3, #13
 8008916:	d108      	bne.n	800892a <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8008918:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800891a:	2b0a      	cmp	r3, #10
 800891c:	d105      	bne.n	800892a <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800891e:	793b      	ldrb	r3, [r7, #4]
 8008920:	2b3e      	cmp	r3, #62	; 0x3e
 8008922:	d102      	bne.n	800892a <SPI_WIFI_ResetModule+0xc6>
 8008924:	797b      	ldrb	r3, [r7, #5]
 8008926:	2b20      	cmp	r3, #32
 8008928:	d002      	beq.n	8008930 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 800892a:	f04f 33ff 	mov.w	r3, #4294967295
 800892e:	e000      	b.n	8008932 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	48001000 	.word	0x48001000
 8008940:	2000086c 	.word	0x2000086c

08008944 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8008948:	4802      	ldr	r0, [pc, #8]	; (8008954 <SPI_WIFI_DeInit+0x10>)
 800894a:	f7fb fe5c 	bl	8004606 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	bd80      	pop	{r7, pc}
 8008954:	2000086c 	.word	0x2000086c

08008958 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8008960:	f7f9 f97e 	bl	8001c60 <HAL_GetTick>
 8008964:	4603      	mov	r3, r0
 8008966:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8008968:	e00a      	b.n	8008980 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800896a:	f7f9 f979 	bl	8001c60 <HAL_GetTick>
 800896e:	4602      	mov	r2, r0
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	1ad2      	subs	r2, r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	429a      	cmp	r2, r3
 8008978:	d902      	bls.n	8008980 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800897a:	f04f 33ff 	mov.w	r3, #4294967295
 800897e:	e007      	b.n	8008990 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8008980:	2102      	movs	r1, #2
 8008982:	4805      	ldr	r0, [pc, #20]	; (8008998 <wait_cmddata_rdy_high+0x40>)
 8008984:	f7f9 fea8 	bl	80026d8 <HAL_GPIO_ReadPin>
 8008988:	4603      	mov	r3, r0
 800898a:	2b01      	cmp	r3, #1
 800898c:	d1ed      	bne.n	800896a <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	48001000 	.word	0x48001000

0800899c <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80089a4:	f7f9 f95c 	bl	8001c60 <HAL_GetTick>
 80089a8:	4603      	mov	r3, r0
 80089aa:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 80089ac:	e00a      	b.n	80089c4 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80089ae:	f7f9 f957 	bl	8001c60 <HAL_GetTick>
 80089b2:	4602      	mov	r2, r0
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	1ad2      	subs	r2, r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d902      	bls.n	80089c4 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 80089be:	f04f 33ff 	mov.w	r3, #4294967295
 80089c2:	e004      	b.n	80089ce <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 80089c4:	4b04      	ldr	r3, [pc, #16]	; (80089d8 <wait_cmddata_rdy_rising_event+0x3c>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d0f0      	beq.n	80089ae <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 80089cc:	2300      	movs	r3, #0
#endif
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	200008d8 	.word	0x200008d8

080089dc <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80089e4:	f7f9 f93c 	bl	8001c60 <HAL_GetTick>
 80089e8:	4603      	mov	r3, r0
 80089ea:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 80089ec:	e00a      	b.n	8008a04 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80089ee:	f7f9 f937 	bl	8001c60 <HAL_GetTick>
 80089f2:	4602      	mov	r2, r0
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	1ad2      	subs	r2, r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d902      	bls.n	8008a04 <wait_spi_rx_event+0x28>
    {
      return -1;
 80089fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008a02:	e004      	b.n	8008a0e <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 8008a04:	4b04      	ldr	r3, [pc, #16]	; (8008a18 <wait_spi_rx_event+0x3c>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d0f0      	beq.n	80089ee <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8008a0c:	2300      	movs	r3, #0
#endif
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	200008d0 	.word	0x200008d0

08008a1c <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8008a24:	f7f9 f91c 	bl	8001c60 <HAL_GetTick>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 8008a2c:	e00a      	b.n	8008a44 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8008a2e:	f7f9 f917 	bl	8001c60 <HAL_GetTick>
 8008a32:	4602      	mov	r2, r0
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	1ad2      	subs	r2, r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d902      	bls.n	8008a44 <wait_spi_tx_event+0x28>
    {
      return -1;
 8008a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a42:	e004      	b.n	8008a4e <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 8008a44:	4b04      	ldr	r3, [pc, #16]	; (8008a58 <wait_spi_tx_event+0x3c>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d0f0      	beq.n	8008a2e <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8008a4c:	2300      	movs	r3, #0
#endif
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	200008d4 	.word	0x200008d4

08008a5c <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	460b      	mov	r3, r1
 8008a66:	607a      	str	r2, [r7, #4]
 8008a68:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 8008a6e:	2201      	movs	r2, #1
 8008a70:	2101      	movs	r1, #1
 8008a72:	4834      	ldr	r0, [pc, #208]	; (8008b44 <SPI_WIFI_ReceiveData+0xe8>)
 8008a74:	f7f9 fe48 	bl	8002708 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8008a78:	2003      	movs	r0, #3
 8008a7a:	f000 f8e3 	bl	8008c44 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7ff ff8b 	bl	800899c <wait_cmddata_rdy_rising_event>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	da02      	bge.n	8008a92 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8008a8c:	f06f 0302 	mvn.w	r3, #2
 8008a90:	e054      	b.n	8008b3c <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8008a92:	2200      	movs	r2, #0
 8008a94:	2101      	movs	r1, #1
 8008a96:	482b      	ldr	r0, [pc, #172]	; (8008b44 <SPI_WIFI_ReceiveData+0xe8>)
 8008a98:	f7f9 fe36 	bl	8002708 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8008a9c:	200f      	movs	r0, #15
 8008a9e:	f000 f8d1 	bl	8008c44 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8008aa2:	e03d      	b.n	8008b20 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8008aa4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008aa8:	897b      	ldrh	r3, [r7, #10]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	db02      	blt.n	8008ab4 <SPI_WIFI_ReceiveData+0x58>
 8008aae:	897b      	ldrh	r3, [r7, #10]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d13c      	bne.n	8008b2e <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8008ab4:	4b24      	ldr	r3, [pc, #144]	; (8008b48 <SPI_WIFI_ReceiveData+0xec>)
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8008aba:	f107 0314 	add.w	r3, r7, #20
 8008abe:	2201      	movs	r2, #1
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	4822      	ldr	r0, [pc, #136]	; (8008b4c <SPI_WIFI_ReceiveData+0xf0>)
 8008ac4:	f7fc f998 	bl	8004df8 <HAL_SPI_Receive_IT>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d007      	beq.n	8008ade <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8008ace:	2201      	movs	r2, #1
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	481c      	ldr	r0, [pc, #112]	; (8008b44 <SPI_WIFI_ReceiveData+0xe8>)
 8008ad4:	f7f9 fe18 	bl	8002708 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8008ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8008adc:	e02e      	b.n	8008b3c <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7ff ff7b 	bl	80089dc <wait_spi_rx_event>

      pData[0] = tmp[0];
 8008ae6:	7d3a      	ldrb	r2, [r7, #20]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	3301      	adds	r3, #1
 8008af0:	7d7a      	ldrb	r2, [r7, #21]
 8008af2:	701a      	strb	r2, [r3, #0]
      length += 2;
 8008af4:	8afb      	ldrh	r3, [r7, #22]
 8008af6:	3302      	adds	r3, #2
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	3302      	adds	r3, #2
 8008b00:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8008b02:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008b06:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008b0a:	db09      	blt.n	8008b20 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	2101      	movs	r1, #1
 8008b10:	480c      	ldr	r0, [pc, #48]	; (8008b44 <SPI_WIFI_ReceiveData+0xe8>)
 8008b12:	f7f9 fdf9 	bl	8002708 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8008b16:	f7ff fea5 	bl	8008864 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8008b1a:	f06f 0303 	mvn.w	r3, #3
 8008b1e:	e00d      	b.n	8008b3c <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8008b20:	2102      	movs	r1, #2
 8008b22:	4808      	ldr	r0, [pc, #32]	; (8008b44 <SPI_WIFI_ReceiveData+0xe8>)
 8008b24:	f7f9 fdd8 	bl	80026d8 <HAL_GPIO_ReadPin>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d0ba      	beq.n	8008aa4 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8008b2e:	2201      	movs	r2, #1
 8008b30:	2101      	movs	r1, #1
 8008b32:	4804      	ldr	r0, [pc, #16]	; (8008b44 <SPI_WIFI_ReceiveData+0xe8>)
 8008b34:	f7f9 fde8 	bl	8002708 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8008b38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3718      	adds	r7, #24
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	48001000 	.word	0x48001000
 8008b48:	200008d0 	.word	0x200008d0
 8008b4c:	2000086c 	.word	0x2000086c

08008b50 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	460b      	mov	r3, r1
 8008b5a:	607a      	str	r2, [r7, #4]
 8008b5c:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7ff fef9 	bl	8008958 <wait_cmddata_rdy_high>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	da02      	bge.n	8008b72 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8008b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b70:	e04f      	b.n	8008c12 <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 8008b72:	4b2a      	ldr	r3, [pc, #168]	; (8008c1c <SPI_WIFI_SendData+0xcc>)
 8008b74:	2201      	movs	r2, #1
 8008b76:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8008b78:	2200      	movs	r2, #0
 8008b7a:	2101      	movs	r1, #1
 8008b7c:	4828      	ldr	r0, [pc, #160]	; (8008c20 <SPI_WIFI_SendData+0xd0>)
 8008b7e:	f7f9 fdc3 	bl	8002708 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8008b82:	200f      	movs	r0, #15
 8008b84:	f000 f85e 	bl	8008c44 <SPI_WIFI_DelayUs>
  if (len > 1)
 8008b88:	897b      	ldrh	r3, [r7, #10]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d919      	bls.n	8008bc2 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 8008b8e:	4b25      	ldr	r3, [pc, #148]	; (8008c24 <SPI_WIFI_SendData+0xd4>)
 8008b90:	2201      	movs	r2, #1
 8008b92:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8008b94:	897b      	ldrh	r3, [r7, #10]
 8008b96:	085b      	lsrs	r3, r3, #1
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	68f9      	ldr	r1, [r7, #12]
 8008b9e:	4822      	ldr	r0, [pc, #136]	; (8008c28 <SPI_WIFI_SendData+0xd8>)
 8008ba0:	f7fc f89c 	bl	8004cdc <HAL_SPI_Transmit_IT>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d007      	beq.n	8008bba <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8008baa:	2201      	movs	r2, #1
 8008bac:	2101      	movs	r1, #1
 8008bae:	481c      	ldr	r0, [pc, #112]	; (8008c20 <SPI_WIFI_SendData+0xd0>)
 8008bb0:	f7f9 fdaa 	bl	8002708 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8008bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8008bb8:	e02b      	b.n	8008c12 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7ff ff2d 	bl	8008a1c <wait_spi_tx_event>
  }
  
  if ( len & 1)
 8008bc2:	897b      	ldrh	r3, [r7, #10]
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d020      	beq.n	8008c0e <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 8008bcc:	897b      	ldrh	r3, [r7, #10]
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8008bd8:	230a      	movs	r3, #10
 8008bda:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8008bdc:	4b11      	ldr	r3, [pc, #68]	; (8008c24 <SPI_WIFI_SendData+0xd4>)
 8008bde:	2201      	movs	r2, #1
 8008be0:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8008be2:	f107 0314 	add.w	r3, r7, #20
 8008be6:	2201      	movs	r2, #1
 8008be8:	4619      	mov	r1, r3
 8008bea:	480f      	ldr	r0, [pc, #60]	; (8008c28 <SPI_WIFI_SendData+0xd8>)
 8008bec:	f7fc f876 	bl	8004cdc <HAL_SPI_Transmit_IT>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d007      	beq.n	8008c06 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	2101      	movs	r1, #1
 8008bfa:	4809      	ldr	r0, [pc, #36]	; (8008c20 <SPI_WIFI_SendData+0xd0>)
 8008bfc:	f7f9 fd84 	bl	8002708 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8008c00:	f04f 33ff 	mov.w	r3, #4294967295
 8008c04:	e005      	b.n	8008c12 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7ff ff07 	bl	8008a1c <wait_spi_tx_event>
    
  }
  return len;
 8008c0e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3718      	adds	r7, #24
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	200008d8 	.word	0x200008d8
 8008c20:	48001000 	.word	0x48001000
 8008c24:	200008d4 	.word	0x200008d4
 8008c28:	2000086c 	.word	0x2000086c

08008c2c <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7f9 f81f 	bl	8001c78 <HAL_Delay>
}
 8008c3a:	bf00      	nop
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
	...

08008c44 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8008c50:	2300      	movs	r3, #0
 8008c52:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8008c54:	4b20      	ldr	r3, [pc, #128]	; (8008cd8 <SPI_WIFI_DelayUs+0x94>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d122      	bne.n	8008ca2 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8008c5c:	4b1f      	ldr	r3, [pc, #124]	; (8008cdc <SPI_WIFI_DelayUs+0x98>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a1f      	ldr	r2, [pc, #124]	; (8008ce0 <SPI_WIFI_DelayUs+0x9c>)
 8008c62:	fba2 2303 	umull	r2, r3, r2, r3
 8008c66:	099b      	lsrs	r3, r3, #6
 8008c68:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8008c72:	f7f8 fff5 	bl	8001c60 <HAL_GetTick>
 8008c76:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8008c78:	e002      	b.n	8008c80 <SPI_WIFI_DelayUs+0x3c>
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	60bb      	str	r3, [r7, #8]
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d1f9      	bne.n	8008c7a <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 8008c86:	f7f8 ffeb 	bl	8001c60 <HAL_GetTick>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	1ad3      	subs	r3, r2, r3
 8008c90:	4a11      	ldr	r2, [pc, #68]	; (8008cd8 <SPI_WIFI_DelayUs+0x94>)
 8008c92:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8008c94:	4b10      	ldr	r3, [pc, #64]	; (8008cd8 <SPI_WIFI_DelayUs+0x94>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d102      	bne.n	8008ca2 <SPI_WIFI_DelayUs+0x5e>
 8008c9c:	4b0e      	ldr	r3, [pc, #56]	; (8008cd8 <SPI_WIFI_DelayUs+0x94>)
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8008ca2:	4b0e      	ldr	r3, [pc, #56]	; (8008cdc <SPI_WIFI_DelayUs+0x98>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a0f      	ldr	r2, [pc, #60]	; (8008ce4 <SPI_WIFI_DelayUs+0xa0>)
 8008ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8008cac:	0c9a      	lsrs	r2, r3, #18
 8008cae:	4b0a      	ldr	r3, [pc, #40]	; (8008cd8 <SPI_WIFI_DelayUs+0x94>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cb6:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	697a      	ldr	r2, [r7, #20]
 8008cbc:	fb02 f303 	mul.w	r3, r2, r3
 8008cc0:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8008cc2:	e002      	b.n	8008cca <SPI_WIFI_DelayUs+0x86>
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	60bb      	str	r3, [r7, #8]
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d1f9      	bne.n	8008cc4 <SPI_WIFI_DelayUs+0x80>
  return;
 8008cd0:	bf00      	nop
}
 8008cd2:	3718      	adds	r7, #24
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	200008dc 	.word	0x200008dc
 8008cdc:	20000000 	.word	0x20000000
 8008ce0:	10624dd3 	.word	0x10624dd3
 8008ce4:	431bde83 	.word	0x431bde83

08008ce8 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8008cf0:	4b06      	ldr	r3, [pc, #24]	; (8008d0c <HAL_SPI_RxCpltCallback+0x24>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d002      	beq.n	8008cfe <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8008cf8:	4b04      	ldr	r3, [pc, #16]	; (8008d0c <HAL_SPI_RxCpltCallback+0x24>)
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	601a      	str	r2, [r3, #0]
  }
}
 8008cfe:	bf00      	nop
 8008d00:	370c      	adds	r7, #12
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	200008d0 	.word	0x200008d0

08008d10 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8008d18:	4b06      	ldr	r3, [pc, #24]	; (8008d34 <HAL_SPI_TxCpltCallback+0x24>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d002      	beq.n	8008d26 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8008d20:	4b04      	ldr	r3, [pc, #16]	; (8008d34 <HAL_SPI_TxCpltCallback+0x24>)
 8008d22:	2200      	movs	r2, #0
 8008d24:	601a      	str	r2, [r3, #0]
  }
}
 8008d26:	bf00      	nop
 8008d28:	370c      	adds	r7, #12
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	200008d4 	.word	0x200008d4

08008d38 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8008d3c:	4b05      	ldr	r3, [pc, #20]	; (8008d54 <SPI_WIFI_ISR+0x1c>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d102      	bne.n	8008d4a <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8008d44:	4b03      	ldr	r3, [pc, #12]	; (8008d54 <SPI_WIFI_ISR+0x1c>)
 8008d46:	2200      	movs	r2, #0
 8008d48:	601a      	str	r2, [r3, #0]
   }
}
 8008d4a:	bf00      	nop
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr
 8008d54:	200008d8 	.word	0x200008d8

08008d58 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8008d62:	4b0d      	ldr	r3, [pc, #52]	; (8008d98 <WIFI_Init+0x40>)
 8008d64:	9301      	str	r3, [sp, #4]
 8008d66:	4b0d      	ldr	r3, [pc, #52]	; (8008d9c <WIFI_Init+0x44>)
 8008d68:	9300      	str	r3, [sp, #0]
 8008d6a:	4b0d      	ldr	r3, [pc, #52]	; (8008da0 <WIFI_Init+0x48>)
 8008d6c:	4a0d      	ldr	r2, [pc, #52]	; (8008da4 <WIFI_Init+0x4c>)
 8008d6e:	490e      	ldr	r1, [pc, #56]	; (8008da8 <WIFI_Init+0x50>)
 8008d70:	480e      	ldr	r0, [pc, #56]	; (8008dac <WIFI_Init+0x54>)
 8008d72:	f7ff f921 	bl	8007fb8 <ES_WIFI_RegisterBusIO>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d107      	bne.n	8008d8c <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8008d7c:	480b      	ldr	r0, [pc, #44]	; (8008dac <WIFI_Init+0x54>)
 8008d7e:	f7ff f8ed 	bl	8007f5c <ES_WIFI_Init>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d101      	bne.n	8008d8c <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8008d8c:	79fb      	ldrb	r3, [r7, #7]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3708      	adds	r7, #8
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	08008a5d 	.word	0x08008a5d
 8008d9c:	08008b51 	.word	0x08008b51
 8008da0:	08008c2d 	.word	0x08008c2d
 8008da4:	08008945 	.word	0x08008945
 8008da8:	080087a9 	.word	0x080087a9
 8008dac:	200008e0 	.word	0x200008e0

08008db0 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	4613      	mov	r3, r2
 8008dbc:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8008dc2:	79fb      	ldrb	r3, [r7, #7]
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	68f9      	ldr	r1, [r7, #12]
 8008dc8:	4809      	ldr	r0, [pc, #36]	; (8008df0 <WIFI_Connect+0x40>)
 8008dca:	f7ff f929 	bl	8008020 <ES_WIFI_Connect>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d107      	bne.n	8008de4 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8008dd4:	4806      	ldr	r0, [pc, #24]	; (8008df0 <WIFI_Connect+0x40>)
 8008dd6:	f7ff f99b 	bl	8008110 <ES_WIFI_GetNetworkSettings>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d101      	bne.n	8008de4 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8008de0:	2300      	movs	r3, #0
 8008de2:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8008de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3718      	adds	r7, #24
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	200008e0 	.word	0x200008e0

08008df4 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b08a      	sub	sp, #40	; 0x28
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	607a      	str	r2, [r7, #4]
 8008dfe:	603b      	str	r3, [r7, #0]
 8008e00:	460b      	mov	r3, r1
 8008e02:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 8008e10:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008e12:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 8008e14:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008e16:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8008e18:	7afb      	ldrb	r3, [r7, #11]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	bf14      	ite	ne
 8008e1e:	2301      	movne	r3, #1
 8008e20:	2300      	moveq	r3, #0
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	785b      	ldrb	r3, [r3, #1]
 8008e30:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	789b      	ldrb	r3, [r3, #2]
 8008e36:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	78db      	ldrb	r3, [r3, #3]
 8008e3c:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8008e3e:	f107 0310 	add.w	r3, r7, #16
 8008e42:	4619      	mov	r1, r3
 8008e44:	4807      	ldr	r0, [pc, #28]	; (8008e64 <WIFI_OpenClientConnection+0x70>)
 8008e46:	f7ff f98d 	bl	8008164 <ES_WIFI_StartClientConnection>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d102      	bne.n	8008e56 <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 8008e50:	2300      	movs	r3, #0
 8008e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8008e56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3728      	adds	r7, #40	; 0x28
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	200008e0 	.word	0x200008e0

08008e68 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b088      	sub	sp, #32
 8008e6c:	af02      	add	r7, sp, #8
 8008e6e:	60b9      	str	r1, [r7, #8]
 8008e70:	607b      	str	r3, [r7, #4]
 8008e72:	4603      	mov	r3, r0
 8008e74:	73fb      	strb	r3, [r7, #15]
 8008e76:	4613      	mov	r3, r2
 8008e78:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8008e7e:	89ba      	ldrh	r2, [r7, #12]
 8008e80:	7bf9      	ldrb	r1, [r7, #15]
 8008e82:	6a3b      	ldr	r3, [r7, #32]
 8008e84:	9301      	str	r3, [sp, #4]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	4806      	ldr	r0, [pc, #24]	; (8008ea8 <WIFI_SendData+0x40>)
 8008e90:	f7ff fa52 	bl	8008338 <ES_WIFI_SendData>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d101      	bne.n	8008e9e <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8008e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3718      	adds	r7, #24
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	200008e0 	.word	0x200008e0

08008eac <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b088      	sub	sp, #32
 8008eb0:	af02      	add	r7, sp, #8
 8008eb2:	60b9      	str	r1, [r7, #8]
 8008eb4:	607b      	str	r3, [r7, #4]
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	73fb      	strb	r3, [r7, #15]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8008ec2:	89ba      	ldrh	r2, [r7, #12]
 8008ec4:	7bf9      	ldrb	r1, [r7, #15]
 8008ec6:	6a3b      	ldr	r3, [r7, #32]
 8008ec8:	9301      	str	r3, [sp, #4]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	9300      	str	r3, [sp, #0]
 8008ece:	4613      	mov	r3, r2
 8008ed0:	68ba      	ldr	r2, [r7, #8]
 8008ed2:	4806      	ldr	r0, [pc, #24]	; (8008eec <WIFI_ReceiveData+0x40>)
 8008ed4:	f7ff faec 	bl	80084b0 <ES_WIFI_ReceiveData>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d101      	bne.n	8008ee2 <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8008ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3718      	adds	r7, #24
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	200008e0 	.word	0x200008e0

08008ef0 <__NVIC_SetPriority>:
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	6039      	str	r1, [r7, #0]
 8008efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	db0a      	blt.n	8008f1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	b2da      	uxtb	r2, r3
 8008f08:	490c      	ldr	r1, [pc, #48]	; (8008f3c <__NVIC_SetPriority+0x4c>)
 8008f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f0e:	0112      	lsls	r2, r2, #4
 8008f10:	b2d2      	uxtb	r2, r2
 8008f12:	440b      	add	r3, r1
 8008f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008f18:	e00a      	b.n	8008f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	4908      	ldr	r1, [pc, #32]	; (8008f40 <__NVIC_SetPriority+0x50>)
 8008f20:	79fb      	ldrb	r3, [r7, #7]
 8008f22:	f003 030f 	and.w	r3, r3, #15
 8008f26:	3b04      	subs	r3, #4
 8008f28:	0112      	lsls	r2, r2, #4
 8008f2a:	b2d2      	uxtb	r2, r2
 8008f2c:	440b      	add	r3, r1
 8008f2e:	761a      	strb	r2, [r3, #24]
}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr
 8008f3c:	e000e100 	.word	0xe000e100
 8008f40:	e000ed00 	.word	0xe000ed00

08008f44 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008f44:	b580      	push	{r7, lr}
 8008f46:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008f48:	4b05      	ldr	r3, [pc, #20]	; (8008f60 <SysTick_Handler+0x1c>)
 8008f4a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008f4c:	f002 f8aa 	bl	800b0a4 <xTaskGetSchedulerState>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d001      	beq.n	8008f5a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008f56:	f002 ff8f 	bl	800be78 <xPortSysTickHandler>
  }
}
 8008f5a:	bf00      	nop
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	e000e010 	.word	0xe000e010

08008f64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008f64:	b580      	push	{r7, lr}
 8008f66:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008f68:	2100      	movs	r1, #0
 8008f6a:	f06f 0004 	mvn.w	r0, #4
 8008f6e:	f7ff ffbf 	bl	8008ef0 <__NVIC_SetPriority>
#endif
}
 8008f72:	bf00      	nop
 8008f74:	bd80      	pop	{r7, pc}
	...

08008f78 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f7e:	f3ef 8305 	mrs	r3, IPSR
 8008f82:	603b      	str	r3, [r7, #0]
  return(result);
 8008f84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d003      	beq.n	8008f92 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008f8a:	f06f 0305 	mvn.w	r3, #5
 8008f8e:	607b      	str	r3, [r7, #4]
 8008f90:	e00c      	b.n	8008fac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008f92:	4b0a      	ldr	r3, [pc, #40]	; (8008fbc <osKernelInitialize+0x44>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d105      	bne.n	8008fa6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008f9a:	4b08      	ldr	r3, [pc, #32]	; (8008fbc <osKernelInitialize+0x44>)
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	607b      	str	r3, [r7, #4]
 8008fa4:	e002      	b.n	8008fac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8008faa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008fac:	687b      	ldr	r3, [r7, #4]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	370c      	adds	r7, #12
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	200011e0 	.word	0x200011e0

08008fc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fc6:	f3ef 8305 	mrs	r3, IPSR
 8008fca:	603b      	str	r3, [r7, #0]
  return(result);
 8008fcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d003      	beq.n	8008fda <osKernelStart+0x1a>
    stat = osErrorISR;
 8008fd2:	f06f 0305 	mvn.w	r3, #5
 8008fd6:	607b      	str	r3, [r7, #4]
 8008fd8:	e010      	b.n	8008ffc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008fda:	4b0b      	ldr	r3, [pc, #44]	; (8009008 <osKernelStart+0x48>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d109      	bne.n	8008ff6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008fe2:	f7ff ffbf 	bl	8008f64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008fe6:	4b08      	ldr	r3, [pc, #32]	; (8009008 <osKernelStart+0x48>)
 8008fe8:	2202      	movs	r2, #2
 8008fea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008fec:	f001 fbfe 	bl	800a7ec <vTaskStartScheduler>
      stat = osOK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	607b      	str	r3, [r7, #4]
 8008ff4:	e002      	b.n	8008ffc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8008ffa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008ffc:	687b      	ldr	r3, [r7, #4]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	200011e0 	.word	0x200011e0

0800900c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800900c:	b580      	push	{r7, lr}
 800900e:	b08e      	sub	sp, #56	; 0x38
 8009010:	af04      	add	r7, sp, #16
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009018:	2300      	movs	r3, #0
 800901a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800901c:	f3ef 8305 	mrs	r3, IPSR
 8009020:	617b      	str	r3, [r7, #20]
  return(result);
 8009022:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009024:	2b00      	cmp	r3, #0
 8009026:	d17e      	bne.n	8009126 <osThreadNew+0x11a>
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d07b      	beq.n	8009126 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800902e:	2380      	movs	r3, #128	; 0x80
 8009030:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009032:	2318      	movs	r3, #24
 8009034:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009036:	2300      	movs	r3, #0
 8009038:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800903a:	f04f 33ff 	mov.w	r3, #4294967295
 800903e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d045      	beq.n	80090d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d002      	beq.n	8009054 <osThreadNew+0x48>
        name = attr->name;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d002      	beq.n	8009062 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	699b      	ldr	r3, [r3, #24]
 8009060:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d008      	beq.n	800907a <osThreadNew+0x6e>
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	2b38      	cmp	r3, #56	; 0x38
 800906c:	d805      	bhi.n	800907a <osThreadNew+0x6e>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	2b00      	cmp	r3, #0
 8009078:	d001      	beq.n	800907e <osThreadNew+0x72>
        return (NULL);
 800907a:	2300      	movs	r3, #0
 800907c:	e054      	b.n	8009128 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	695b      	ldr	r3, [r3, #20]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d003      	beq.n	800908e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	695b      	ldr	r3, [r3, #20]
 800908a:	089b      	lsrs	r3, r3, #2
 800908c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00e      	beq.n	80090b4 <osThreadNew+0xa8>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	2bbb      	cmp	r3, #187	; 0xbb
 800909c:	d90a      	bls.n	80090b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d006      	beq.n	80090b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d002      	beq.n	80090b4 <osThreadNew+0xa8>
        mem = 1;
 80090ae:	2301      	movs	r3, #1
 80090b0:	61bb      	str	r3, [r7, #24]
 80090b2:	e010      	b.n	80090d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d10c      	bne.n	80090d6 <osThreadNew+0xca>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d108      	bne.n	80090d6 <osThreadNew+0xca>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d104      	bne.n	80090d6 <osThreadNew+0xca>
          mem = 0;
 80090cc:	2300      	movs	r3, #0
 80090ce:	61bb      	str	r3, [r7, #24]
 80090d0:	e001      	b.n	80090d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80090d2:	2300      	movs	r3, #0
 80090d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d110      	bne.n	80090fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80090e4:	9202      	str	r2, [sp, #8]
 80090e6:	9301      	str	r3, [sp, #4]
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	6a3a      	ldr	r2, [r7, #32]
 80090f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f001 f98e 	bl	800a414 <xTaskCreateStatic>
 80090f8:	4603      	mov	r3, r0
 80090fa:	613b      	str	r3, [r7, #16]
 80090fc:	e013      	b.n	8009126 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d110      	bne.n	8009126 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009104:	6a3b      	ldr	r3, [r7, #32]
 8009106:	b29a      	uxth	r2, r3
 8009108:	f107 0310 	add.w	r3, r7, #16
 800910c:	9301      	str	r3, [sp, #4]
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f001 f9d9 	bl	800a4ce <xTaskCreate>
 800911c:	4603      	mov	r3, r0
 800911e:	2b01      	cmp	r3, #1
 8009120:	d001      	beq.n	8009126 <osThreadNew+0x11a>
            hTask = NULL;
 8009122:	2300      	movs	r3, #0
 8009124:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009126:	693b      	ldr	r3, [r7, #16]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3728      	adds	r7, #40	; 0x28
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009130:	b580      	push	{r7, lr}
 8009132:	b08a      	sub	sp, #40	; 0x28
 8009134:	af02      	add	r7, sp, #8
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800913c:	2300      	movs	r3, #0
 800913e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009140:	f3ef 8305 	mrs	r3, IPSR
 8009144:	613b      	str	r3, [r7, #16]
  return(result);
 8009146:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009148:	2b00      	cmp	r3, #0
 800914a:	d175      	bne.n	8009238 <osSemaphoreNew+0x108>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d072      	beq.n	8009238 <osSemaphoreNew+0x108>
 8009152:	68ba      	ldr	r2, [r7, #8]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	429a      	cmp	r2, r3
 8009158:	d86e      	bhi.n	8009238 <osSemaphoreNew+0x108>
    mem = -1;
 800915a:	f04f 33ff 	mov.w	r3, #4294967295
 800915e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d015      	beq.n	8009192 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d006      	beq.n	800917c <osSemaphoreNew+0x4c>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	2b4f      	cmp	r3, #79	; 0x4f
 8009174:	d902      	bls.n	800917c <osSemaphoreNew+0x4c>
        mem = 1;
 8009176:	2301      	movs	r3, #1
 8009178:	61bb      	str	r3, [r7, #24]
 800917a:	e00c      	b.n	8009196 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d108      	bne.n	8009196 <osSemaphoreNew+0x66>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d104      	bne.n	8009196 <osSemaphoreNew+0x66>
          mem = 0;
 800918c:	2300      	movs	r3, #0
 800918e:	61bb      	str	r3, [r7, #24]
 8009190:	e001      	b.n	8009196 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009192:	2300      	movs	r3, #0
 8009194:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800919c:	d04c      	beq.n	8009238 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d128      	bne.n	80091f6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d10a      	bne.n	80091c0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	2203      	movs	r2, #3
 80091b0:	9200      	str	r2, [sp, #0]
 80091b2:	2200      	movs	r2, #0
 80091b4:	2100      	movs	r1, #0
 80091b6:	2001      	movs	r0, #1
 80091b8:	f000 fa06 	bl	80095c8 <xQueueGenericCreateStatic>
 80091bc:	61f8      	str	r0, [r7, #28]
 80091be:	e005      	b.n	80091cc <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80091c0:	2203      	movs	r2, #3
 80091c2:	2100      	movs	r1, #0
 80091c4:	2001      	movs	r0, #1
 80091c6:	f000 fa77 	bl	80096b8 <xQueueGenericCreate>
 80091ca:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d022      	beq.n	8009218 <osSemaphoreNew+0xe8>
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d01f      	beq.n	8009218 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80091d8:	2300      	movs	r3, #0
 80091da:	2200      	movs	r2, #0
 80091dc:	2100      	movs	r1, #0
 80091de:	69f8      	ldr	r0, [r7, #28]
 80091e0:	f000 fb32 	bl	8009848 <xQueueGenericSend>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d016      	beq.n	8009218 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80091ea:	69f8      	ldr	r0, [r7, #28]
 80091ec:	f000 ff3e 	bl	800a06c <vQueueDelete>
            hSemaphore = NULL;
 80091f0:	2300      	movs	r3, #0
 80091f2:	61fb      	str	r3, [r7, #28]
 80091f4:	e010      	b.n	8009218 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d108      	bne.n	800920e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	461a      	mov	r2, r3
 8009202:	68b9      	ldr	r1, [r7, #8]
 8009204:	68f8      	ldr	r0, [r7, #12]
 8009206:	f000 fab4 	bl	8009772 <xQueueCreateCountingSemaphoreStatic>
 800920a:	61f8      	str	r0, [r7, #28]
 800920c:	e004      	b.n	8009218 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800920e:	68b9      	ldr	r1, [r7, #8]
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f000 fae5 	bl	80097e0 <xQueueCreateCountingSemaphore>
 8009216:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00c      	beq.n	8009238 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d003      	beq.n	800922c <osSemaphoreNew+0xfc>
          name = attr->name;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	617b      	str	r3, [r7, #20]
 800922a:	e001      	b.n	8009230 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800922c:	2300      	movs	r3, #0
 800922e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009230:	6979      	ldr	r1, [r7, #20]
 8009232:	69f8      	ldr	r0, [r7, #28]
 8009234:	f001 f866 	bl	800a304 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009238:	69fb      	ldr	r3, [r7, #28]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3720      	adds	r7, #32
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009242:	b580      	push	{r7, lr}
 8009244:	b08a      	sub	sp, #40	; 0x28
 8009246:	af02      	add	r7, sp, #8
 8009248:	60f8      	str	r0, [r7, #12]
 800924a:	60b9      	str	r1, [r7, #8]
 800924c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800924e:	2300      	movs	r3, #0
 8009250:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009252:	f3ef 8305 	mrs	r3, IPSR
 8009256:	613b      	str	r3, [r7, #16]
  return(result);
 8009258:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800925a:	2b00      	cmp	r3, #0
 800925c:	d15f      	bne.n	800931e <osMessageQueueNew+0xdc>
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d05c      	beq.n	800931e <osMessageQueueNew+0xdc>
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d059      	beq.n	800931e <osMessageQueueNew+0xdc>
    mem = -1;
 800926a:	f04f 33ff 	mov.w	r3, #4294967295
 800926e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d029      	beq.n	80092ca <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d012      	beq.n	80092a4 <osMessageQueueNew+0x62>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	2b4f      	cmp	r3, #79	; 0x4f
 8009284:	d90e      	bls.n	80092a4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00a      	beq.n	80092a4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	695a      	ldr	r2, [r3, #20]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	68b9      	ldr	r1, [r7, #8]
 8009296:	fb01 f303 	mul.w	r3, r1, r3
 800929a:	429a      	cmp	r2, r3
 800929c:	d302      	bcc.n	80092a4 <osMessageQueueNew+0x62>
        mem = 1;
 800929e:	2301      	movs	r3, #1
 80092a0:	61bb      	str	r3, [r7, #24]
 80092a2:	e014      	b.n	80092ce <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d110      	bne.n	80092ce <osMessageQueueNew+0x8c>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d10c      	bne.n	80092ce <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d108      	bne.n	80092ce <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	695b      	ldr	r3, [r3, #20]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d104      	bne.n	80092ce <osMessageQueueNew+0x8c>
          mem = 0;
 80092c4:	2300      	movs	r3, #0
 80092c6:	61bb      	str	r3, [r7, #24]
 80092c8:	e001      	b.n	80092ce <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80092ca:	2300      	movs	r3, #0
 80092cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d10b      	bne.n	80092ec <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	691a      	ldr	r2, [r3, #16]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	2100      	movs	r1, #0
 80092de:	9100      	str	r1, [sp, #0]
 80092e0:	68b9      	ldr	r1, [r7, #8]
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	f000 f970 	bl	80095c8 <xQueueGenericCreateStatic>
 80092e8:	61f8      	str	r0, [r7, #28]
 80092ea:	e008      	b.n	80092fe <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d105      	bne.n	80092fe <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80092f2:	2200      	movs	r2, #0
 80092f4:	68b9      	ldr	r1, [r7, #8]
 80092f6:	68f8      	ldr	r0, [r7, #12]
 80092f8:	f000 f9de 	bl	80096b8 <xQueueGenericCreate>
 80092fc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00c      	beq.n	800931e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d003      	beq.n	8009312 <osMessageQueueNew+0xd0>
        name = attr->name;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	617b      	str	r3, [r7, #20]
 8009310:	e001      	b.n	8009316 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009312:	2300      	movs	r3, #0
 8009314:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009316:	6979      	ldr	r1, [r7, #20]
 8009318:	69f8      	ldr	r0, [r7, #28]
 800931a:	f000 fff3 	bl	800a304 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800931e:	69fb      	ldr	r3, [r7, #28]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3720      	adds	r7, #32
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	4a07      	ldr	r2, [pc, #28]	; (8009354 <vApplicationGetIdleTaskMemory+0x2c>)
 8009338:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	4a06      	ldr	r2, [pc, #24]	; (8009358 <vApplicationGetIdleTaskMemory+0x30>)
 800933e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2280      	movs	r2, #128	; 0x80
 8009344:	601a      	str	r2, [r3, #0]
}
 8009346:	bf00      	nop
 8009348:	3714      	adds	r7, #20
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	200011e4 	.word	0x200011e4
 8009358:	200012a0 	.word	0x200012a0

0800935c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	4a07      	ldr	r2, [pc, #28]	; (8009388 <vApplicationGetTimerTaskMemory+0x2c>)
 800936c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	4a06      	ldr	r2, [pc, #24]	; (800938c <vApplicationGetTimerTaskMemory+0x30>)
 8009372:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800937a:	601a      	str	r2, [r3, #0]
}
 800937c:	bf00      	nop
 800937e:	3714      	adds	r7, #20
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr
 8009388:	200014a0 	.word	0x200014a0
 800938c:	2000155c 	.word	0x2000155c

08009390 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f103 0208 	add.w	r2, r3, #8
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f04f 32ff 	mov.w	r2, #4294967295
 80093a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f103 0208 	add.w	r2, r3, #8
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f103 0208 	add.w	r2, r3, #8
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80093c4:	bf00      	nop
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80093de:	bf00      	nop
 80093e0:	370c      	adds	r7, #12
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr

080093ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80093ea:	b480      	push	{r7}
 80093ec:	b085      	sub	sp, #20
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
 80093f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	689a      	ldr	r2, [r3, #8]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	1c5a      	adds	r2, r3, #1
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	601a      	str	r2, [r3, #0]
}
 8009426:	bf00      	nop
 8009428:	3714      	adds	r7, #20
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr

08009432 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009432:	b480      	push	{r7}
 8009434:	b085      	sub	sp, #20
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009448:	d103      	bne.n	8009452 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	60fb      	str	r3, [r7, #12]
 8009450:	e00c      	b.n	800946c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	3308      	adds	r3, #8
 8009456:	60fb      	str	r3, [r7, #12]
 8009458:	e002      	b.n	8009460 <vListInsert+0x2e>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	60fb      	str	r3, [r7, #12]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	429a      	cmp	r2, r3
 800946a:	d2f6      	bcs.n	800945a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	683a      	ldr	r2, [r7, #0]
 800947a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	683a      	ldr	r2, [r7, #0]
 8009486:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	1c5a      	adds	r2, r3, #1
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	601a      	str	r2, [r3, #0]
}
 8009498:	bf00      	nop
 800949a:	3714      	adds	r7, #20
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	691b      	ldr	r3, [r3, #16]
 80094b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	6892      	ldr	r2, [r2, #8]
 80094ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	6852      	ldr	r2, [r2, #4]
 80094c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d103      	bne.n	80094d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	689a      	ldr	r2, [r3, #8]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	1e5a      	subs	r2, r3, #1
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3714      	adds	r7, #20
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10a      	bne.n	8009522 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800950c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009510:	f383 8811 	msr	BASEPRI, r3
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800951e:	bf00      	nop
 8009520:	e7fe      	b.n	8009520 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009522:	f002 fc17 	bl	800bd54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800952e:	68f9      	ldr	r1, [r7, #12]
 8009530:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009532:	fb01 f303 	mul.w	r3, r1, r3
 8009536:	441a      	add	r2, r3
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2200      	movs	r2, #0
 8009540:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009552:	3b01      	subs	r3, #1
 8009554:	68f9      	ldr	r1, [r7, #12]
 8009556:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009558:	fb01 f303 	mul.w	r3, r1, r3
 800955c:	441a      	add	r2, r3
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	22ff      	movs	r2, #255	; 0xff
 8009566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	22ff      	movs	r2, #255	; 0xff
 800956e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d114      	bne.n	80095a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d01a      	beq.n	80095b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	3310      	adds	r3, #16
 8009584:	4618      	mov	r0, r3
 8009586:	f001 fbcb 	bl	800ad20 <xTaskRemoveFromEventList>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d012      	beq.n	80095b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009590:	4b0c      	ldr	r3, [pc, #48]	; (80095c4 <xQueueGenericReset+0xcc>)
 8009592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009596:	601a      	str	r2, [r3, #0]
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	e009      	b.n	80095b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	3310      	adds	r3, #16
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7ff fef2 	bl	8009390 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	3324      	adds	r3, #36	; 0x24
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7ff feed 	bl	8009390 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80095b6:	f002 fbfd 	bl	800bdb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80095ba:	2301      	movs	r3, #1
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	e000ed04 	.word	0xe000ed04

080095c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b08e      	sub	sp, #56	; 0x38
 80095cc:	af02      	add	r7, sp, #8
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
 80095d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d10a      	bne.n	80095f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80095dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e0:	f383 8811 	msr	BASEPRI, r3
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80095ee:	bf00      	nop
 80095f0:	e7fe      	b.n	80095f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d10a      	bne.n	800960e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80095f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fc:	f383 8811 	msr	BASEPRI, r3
 8009600:	f3bf 8f6f 	isb	sy
 8009604:	f3bf 8f4f 	dsb	sy
 8009608:	627b      	str	r3, [r7, #36]	; 0x24
}
 800960a:	bf00      	nop
 800960c:	e7fe      	b.n	800960c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d002      	beq.n	800961a <xQueueGenericCreateStatic+0x52>
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d001      	beq.n	800961e <xQueueGenericCreateStatic+0x56>
 800961a:	2301      	movs	r3, #1
 800961c:	e000      	b.n	8009620 <xQueueGenericCreateStatic+0x58>
 800961e:	2300      	movs	r3, #0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10a      	bne.n	800963a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009628:	f383 8811 	msr	BASEPRI, r3
 800962c:	f3bf 8f6f 	isb	sy
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	623b      	str	r3, [r7, #32]
}
 8009636:	bf00      	nop
 8009638:	e7fe      	b.n	8009638 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d102      	bne.n	8009646 <xQueueGenericCreateStatic+0x7e>
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d101      	bne.n	800964a <xQueueGenericCreateStatic+0x82>
 8009646:	2301      	movs	r3, #1
 8009648:	e000      	b.n	800964c <xQueueGenericCreateStatic+0x84>
 800964a:	2300      	movs	r3, #0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10a      	bne.n	8009666 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009654:	f383 8811 	msr	BASEPRI, r3
 8009658:	f3bf 8f6f 	isb	sy
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	61fb      	str	r3, [r7, #28]
}
 8009662:	bf00      	nop
 8009664:	e7fe      	b.n	8009664 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009666:	2350      	movs	r3, #80	; 0x50
 8009668:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	2b50      	cmp	r3, #80	; 0x50
 800966e:	d00a      	beq.n	8009686 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009674:	f383 8811 	msr	BASEPRI, r3
 8009678:	f3bf 8f6f 	isb	sy
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	61bb      	str	r3, [r7, #24]
}
 8009682:	bf00      	nop
 8009684:	e7fe      	b.n	8009684 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009686:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800968c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968e:	2b00      	cmp	r3, #0
 8009690:	d00d      	beq.n	80096ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009694:	2201      	movs	r2, #1
 8009696:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800969a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800969e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a0:	9300      	str	r3, [sp, #0]
 80096a2:	4613      	mov	r3, r2
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	68b9      	ldr	r1, [r7, #8]
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f000 f83f 	bl	800972c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80096ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3730      	adds	r7, #48	; 0x30
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b08a      	sub	sp, #40	; 0x28
 80096bc:	af02      	add	r7, sp, #8
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	4613      	mov	r3, r2
 80096c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d10a      	bne.n	80096e2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80096cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d0:	f383 8811 	msr	BASEPRI, r3
 80096d4:	f3bf 8f6f 	isb	sy
 80096d8:	f3bf 8f4f 	dsb	sy
 80096dc:	613b      	str	r3, [r7, #16]
}
 80096de:	bf00      	nop
 80096e0:	e7fe      	b.n	80096e0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	68ba      	ldr	r2, [r7, #8]
 80096e6:	fb02 f303 	mul.w	r3, r2, r3
 80096ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	3350      	adds	r3, #80	; 0x50
 80096f0:	4618      	mov	r0, r3
 80096f2:	f002 fc51 	bl	800bf98 <pvPortMalloc>
 80096f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d011      	beq.n	8009722 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	3350      	adds	r3, #80	; 0x50
 8009706:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	2200      	movs	r2, #0
 800970c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009710:	79fa      	ldrb	r2, [r7, #7]
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	4613      	mov	r3, r2
 8009718:	697a      	ldr	r2, [r7, #20]
 800971a:	68b9      	ldr	r1, [r7, #8]
 800971c:	68f8      	ldr	r0, [r7, #12]
 800971e:	f000 f805 	bl	800972c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009722:	69bb      	ldr	r3, [r7, #24]
	}
 8009724:	4618      	mov	r0, r3
 8009726:	3720      	adds	r7, #32
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
 8009738:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d103      	bne.n	8009748 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009740:	69bb      	ldr	r3, [r7, #24]
 8009742:	69ba      	ldr	r2, [r7, #24]
 8009744:	601a      	str	r2, [r3, #0]
 8009746:	e002      	b.n	800974e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	68ba      	ldr	r2, [r7, #8]
 8009758:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800975a:	2101      	movs	r1, #1
 800975c:	69b8      	ldr	r0, [r7, #24]
 800975e:	f7ff fecb 	bl	80094f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	78fa      	ldrb	r2, [r7, #3]
 8009766:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800976a:	bf00      	nop
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009772:	b580      	push	{r7, lr}
 8009774:	b08a      	sub	sp, #40	; 0x28
 8009776:	af02      	add	r7, sp, #8
 8009778:	60f8      	str	r0, [r7, #12]
 800977a:	60b9      	str	r1, [r7, #8]
 800977c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d10a      	bne.n	800979a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009788:	f383 8811 	msr	BASEPRI, r3
 800978c:	f3bf 8f6f 	isb	sy
 8009790:	f3bf 8f4f 	dsb	sy
 8009794:	61bb      	str	r3, [r7, #24]
}
 8009796:	bf00      	nop
 8009798:	e7fe      	b.n	8009798 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800979a:	68ba      	ldr	r2, [r7, #8]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	429a      	cmp	r2, r3
 80097a0:	d90a      	bls.n	80097b8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80097a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a6:	f383 8811 	msr	BASEPRI, r3
 80097aa:	f3bf 8f6f 	isb	sy
 80097ae:	f3bf 8f4f 	dsb	sy
 80097b2:	617b      	str	r3, [r7, #20]
}
 80097b4:	bf00      	nop
 80097b6:	e7fe      	b.n	80097b6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80097b8:	2302      	movs	r3, #2
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	2100      	movs	r1, #0
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f7ff ff00 	bl	80095c8 <xQueueGenericCreateStatic>
 80097c8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80097ca:	69fb      	ldr	r3, [r7, #28]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d002      	beq.n	80097d6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	68ba      	ldr	r2, [r7, #8]
 80097d4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80097d6:	69fb      	ldr	r3, [r7, #28]
	}
 80097d8:	4618      	mov	r0, r3
 80097da:	3720      	adds	r7, #32
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b086      	sub	sp, #24
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d10a      	bne.n	8009806 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80097f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f4:	f383 8811 	msr	BASEPRI, r3
 80097f8:	f3bf 8f6f 	isb	sy
 80097fc:	f3bf 8f4f 	dsb	sy
 8009800:	613b      	str	r3, [r7, #16]
}
 8009802:	bf00      	nop
 8009804:	e7fe      	b.n	8009804 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009806:	683a      	ldr	r2, [r7, #0]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	429a      	cmp	r2, r3
 800980c:	d90a      	bls.n	8009824 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800980e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009812:	f383 8811 	msr	BASEPRI, r3
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	60fb      	str	r3, [r7, #12]
}
 8009820:	bf00      	nop
 8009822:	e7fe      	b.n	8009822 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009824:	2202      	movs	r2, #2
 8009826:	2100      	movs	r1, #0
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f7ff ff45 	bl	80096b8 <xQueueGenericCreate>
 800982e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d002      	beq.n	800983c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	683a      	ldr	r2, [r7, #0]
 800983a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800983c:	697b      	ldr	r3, [r7, #20]
	}
 800983e:	4618      	mov	r0, r3
 8009840:	3718      	adds	r7, #24
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
	...

08009848 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b08e      	sub	sp, #56	; 0x38
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	607a      	str	r2, [r7, #4]
 8009854:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009856:	2300      	movs	r3, #0
 8009858:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800985e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009860:	2b00      	cmp	r3, #0
 8009862:	d10a      	bne.n	800987a <xQueueGenericSend+0x32>
	__asm volatile
 8009864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009868:	f383 8811 	msr	BASEPRI, r3
 800986c:	f3bf 8f6f 	isb	sy
 8009870:	f3bf 8f4f 	dsb	sy
 8009874:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009876:	bf00      	nop
 8009878:	e7fe      	b.n	8009878 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d103      	bne.n	8009888 <xQueueGenericSend+0x40>
 8009880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009884:	2b00      	cmp	r3, #0
 8009886:	d101      	bne.n	800988c <xQueueGenericSend+0x44>
 8009888:	2301      	movs	r3, #1
 800988a:	e000      	b.n	800988e <xQueueGenericSend+0x46>
 800988c:	2300      	movs	r3, #0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d10a      	bne.n	80098a8 <xQueueGenericSend+0x60>
	__asm volatile
 8009892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009896:	f383 8811 	msr	BASEPRI, r3
 800989a:	f3bf 8f6f 	isb	sy
 800989e:	f3bf 8f4f 	dsb	sy
 80098a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80098a4:	bf00      	nop
 80098a6:	e7fe      	b.n	80098a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d103      	bne.n	80098b6 <xQueueGenericSend+0x6e>
 80098ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d101      	bne.n	80098ba <xQueueGenericSend+0x72>
 80098b6:	2301      	movs	r3, #1
 80098b8:	e000      	b.n	80098bc <xQueueGenericSend+0x74>
 80098ba:	2300      	movs	r3, #0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d10a      	bne.n	80098d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80098c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c4:	f383 8811 	msr	BASEPRI, r3
 80098c8:	f3bf 8f6f 	isb	sy
 80098cc:	f3bf 8f4f 	dsb	sy
 80098d0:	623b      	str	r3, [r7, #32]
}
 80098d2:	bf00      	nop
 80098d4:	e7fe      	b.n	80098d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80098d6:	f001 fbe5 	bl	800b0a4 <xTaskGetSchedulerState>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d102      	bne.n	80098e6 <xQueueGenericSend+0x9e>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d101      	bne.n	80098ea <xQueueGenericSend+0xa2>
 80098e6:	2301      	movs	r3, #1
 80098e8:	e000      	b.n	80098ec <xQueueGenericSend+0xa4>
 80098ea:	2300      	movs	r3, #0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10a      	bne.n	8009906 <xQueueGenericSend+0xbe>
	__asm volatile
 80098f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	61fb      	str	r3, [r7, #28]
}
 8009902:	bf00      	nop
 8009904:	e7fe      	b.n	8009904 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009906:	f002 fa25 	bl	800bd54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800990a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800990e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009912:	429a      	cmp	r2, r3
 8009914:	d302      	bcc.n	800991c <xQueueGenericSend+0xd4>
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	2b02      	cmp	r3, #2
 800991a:	d129      	bne.n	8009970 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800991c:	683a      	ldr	r2, [r7, #0]
 800991e:	68b9      	ldr	r1, [r7, #8]
 8009920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009922:	f000 fbde 	bl	800a0e2 <prvCopyDataToQueue>
 8009926:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992c:	2b00      	cmp	r3, #0
 800992e:	d010      	beq.n	8009952 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009932:	3324      	adds	r3, #36	; 0x24
 8009934:	4618      	mov	r0, r3
 8009936:	f001 f9f3 	bl	800ad20 <xTaskRemoveFromEventList>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d013      	beq.n	8009968 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009940:	4b3f      	ldr	r3, [pc, #252]	; (8009a40 <xQueueGenericSend+0x1f8>)
 8009942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009946:	601a      	str	r2, [r3, #0]
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	e00a      	b.n	8009968 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009954:	2b00      	cmp	r3, #0
 8009956:	d007      	beq.n	8009968 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009958:	4b39      	ldr	r3, [pc, #228]	; (8009a40 <xQueueGenericSend+0x1f8>)
 800995a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800995e:	601a      	str	r2, [r3, #0]
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009968:	f002 fa24 	bl	800bdb4 <vPortExitCritical>
				return pdPASS;
 800996c:	2301      	movs	r3, #1
 800996e:	e063      	b.n	8009a38 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d103      	bne.n	800997e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009976:	f002 fa1d 	bl	800bdb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800997a:	2300      	movs	r3, #0
 800997c:	e05c      	b.n	8009a38 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800997e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009980:	2b00      	cmp	r3, #0
 8009982:	d106      	bne.n	8009992 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009984:	f107 0314 	add.w	r3, r7, #20
 8009988:	4618      	mov	r0, r3
 800998a:	f001 fa2d 	bl	800ade8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800998e:	2301      	movs	r3, #1
 8009990:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009992:	f002 fa0f 	bl	800bdb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009996:	f000 ff99 	bl	800a8cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800999a:	f002 f9db 	bl	800bd54 <vPortEnterCritical>
 800999e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099a4:	b25b      	sxtb	r3, r3
 80099a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099aa:	d103      	bne.n	80099b4 <xQueueGenericSend+0x16c>
 80099ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ae:	2200      	movs	r2, #0
 80099b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099ba:	b25b      	sxtb	r3, r3
 80099bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c0:	d103      	bne.n	80099ca <xQueueGenericSend+0x182>
 80099c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c4:	2200      	movs	r2, #0
 80099c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099ca:	f002 f9f3 	bl	800bdb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80099ce:	1d3a      	adds	r2, r7, #4
 80099d0:	f107 0314 	add.w	r3, r7, #20
 80099d4:	4611      	mov	r1, r2
 80099d6:	4618      	mov	r0, r3
 80099d8:	f001 fa1c 	bl	800ae14 <xTaskCheckForTimeOut>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d124      	bne.n	8009a2c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80099e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099e4:	f000 fc75 	bl	800a2d2 <prvIsQueueFull>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d018      	beq.n	8009a20 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80099ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f0:	3310      	adds	r3, #16
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	4611      	mov	r1, r2
 80099f6:	4618      	mov	r0, r3
 80099f8:	f001 f942 	bl	800ac80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80099fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099fe:	f000 fc00 	bl	800a202 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009a02:	f000 ff71 	bl	800a8e8 <xTaskResumeAll>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f47f af7c 	bne.w	8009906 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009a0e:	4b0c      	ldr	r3, [pc, #48]	; (8009a40 <xQueueGenericSend+0x1f8>)
 8009a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a14:	601a      	str	r2, [r3, #0]
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	f3bf 8f6f 	isb	sy
 8009a1e:	e772      	b.n	8009906 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009a20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a22:	f000 fbee 	bl	800a202 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a26:	f000 ff5f 	bl	800a8e8 <xTaskResumeAll>
 8009a2a:	e76c      	b.n	8009906 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009a2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a2e:	f000 fbe8 	bl	800a202 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a32:	f000 ff59 	bl	800a8e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009a36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3738      	adds	r7, #56	; 0x38
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	e000ed04 	.word	0xe000ed04

08009a44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b090      	sub	sp, #64	; 0x40
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
 8009a50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d10a      	bne.n	8009a72 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a60:	f383 8811 	msr	BASEPRI, r3
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	f3bf 8f4f 	dsb	sy
 8009a6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a6e:	bf00      	nop
 8009a70:	e7fe      	b.n	8009a70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d103      	bne.n	8009a80 <xQueueGenericSendFromISR+0x3c>
 8009a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d101      	bne.n	8009a84 <xQueueGenericSendFromISR+0x40>
 8009a80:	2301      	movs	r3, #1
 8009a82:	e000      	b.n	8009a86 <xQueueGenericSendFromISR+0x42>
 8009a84:	2300      	movs	r3, #0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d10a      	bne.n	8009aa0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8e:	f383 8811 	msr	BASEPRI, r3
 8009a92:	f3bf 8f6f 	isb	sy
 8009a96:	f3bf 8f4f 	dsb	sy
 8009a9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a9c:	bf00      	nop
 8009a9e:	e7fe      	b.n	8009a9e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	2b02      	cmp	r3, #2
 8009aa4:	d103      	bne.n	8009aae <xQueueGenericSendFromISR+0x6a>
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d101      	bne.n	8009ab2 <xQueueGenericSendFromISR+0x6e>
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e000      	b.n	8009ab4 <xQueueGenericSendFromISR+0x70>
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10a      	bne.n	8009ace <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abc:	f383 8811 	msr	BASEPRI, r3
 8009ac0:	f3bf 8f6f 	isb	sy
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	623b      	str	r3, [r7, #32]
}
 8009aca:	bf00      	nop
 8009acc:	e7fe      	b.n	8009acc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ace:	f002 fa23 	bl	800bf18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009ad2:	f3ef 8211 	mrs	r2, BASEPRI
 8009ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ada:	f383 8811 	msr	BASEPRI, r3
 8009ade:	f3bf 8f6f 	isb	sy
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	61fa      	str	r2, [r7, #28]
 8009ae8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009aea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009aec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d302      	bcc.n	8009b00 <xQueueGenericSendFromISR+0xbc>
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	d12f      	bne.n	8009b60 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b10:	683a      	ldr	r2, [r7, #0]
 8009b12:	68b9      	ldr	r1, [r7, #8]
 8009b14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009b16:	f000 fae4 	bl	800a0e2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009b1a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b22:	d112      	bne.n	8009b4a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d016      	beq.n	8009b5a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2e:	3324      	adds	r3, #36	; 0x24
 8009b30:	4618      	mov	r0, r3
 8009b32:	f001 f8f5 	bl	800ad20 <xTaskRemoveFromEventList>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00e      	beq.n	8009b5a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00b      	beq.n	8009b5a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2201      	movs	r2, #1
 8009b46:	601a      	str	r2, [r3, #0]
 8009b48:	e007      	b.n	8009b5a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009b4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009b4e:	3301      	adds	r3, #1
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	b25a      	sxtb	r2, r3
 8009b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009b5e:	e001      	b.n	8009b64 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009b60:	2300      	movs	r3, #0
 8009b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b66:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009b6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3740      	adds	r7, #64	; 0x40
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b08e      	sub	sp, #56	; 0x38
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
 8009b82:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d10a      	bne.n	8009ba4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b92:	f383 8811 	msr	BASEPRI, r3
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	623b      	str	r3, [r7, #32]
}
 8009ba0:	bf00      	nop
 8009ba2:	e7fe      	b.n	8009ba2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00a      	beq.n	8009bc2 <xQueueGiveFromISR+0x48>
	__asm volatile
 8009bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb0:	f383 8811 	msr	BASEPRI, r3
 8009bb4:	f3bf 8f6f 	isb	sy
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	61fb      	str	r3, [r7, #28]
}
 8009bbe:	bf00      	nop
 8009bc0:	e7fe      	b.n	8009bc0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d103      	bne.n	8009bd2 <xQueueGiveFromISR+0x58>
 8009bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bcc:	689b      	ldr	r3, [r3, #8]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d101      	bne.n	8009bd6 <xQueueGiveFromISR+0x5c>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e000      	b.n	8009bd8 <xQueueGiveFromISR+0x5e>
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d10a      	bne.n	8009bf2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8009bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be0:	f383 8811 	msr	BASEPRI, r3
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	61bb      	str	r3, [r7, #24]
}
 8009bee:	bf00      	nop
 8009bf0:	e7fe      	b.n	8009bf0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009bf2:	f002 f991 	bl	800bf18 <vPortValidateInterruptPriority>
	__asm volatile
 8009bf6:	f3ef 8211 	mrs	r2, BASEPRI
 8009bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfe:	f383 8811 	msr	BASEPRI, r3
 8009c02:	f3bf 8f6f 	isb	sy
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	617a      	str	r2, [r7, #20]
 8009c0c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009c0e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d22b      	bcs.n	8009c7a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2e:	1c5a      	adds	r2, r3, #1
 8009c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c32:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009c34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c3c:	d112      	bne.n	8009c64 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d016      	beq.n	8009c74 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c48:	3324      	adds	r3, #36	; 0x24
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f001 f868 	bl	800ad20 <xTaskRemoveFromEventList>
 8009c50:	4603      	mov	r3, r0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00e      	beq.n	8009c74 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00b      	beq.n	8009c74 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	601a      	str	r2, [r3, #0]
 8009c62:	e007      	b.n	8009c74 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c68:	3301      	adds	r3, #1
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	b25a      	sxtb	r2, r3
 8009c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009c74:	2301      	movs	r3, #1
 8009c76:	637b      	str	r3, [r7, #52]	; 0x34
 8009c78:	e001      	b.n	8009c7e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8009c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c80:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f383 8811 	msr	BASEPRI, r3
}
 8009c88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3738      	adds	r7, #56	; 0x38
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b08c      	sub	sp, #48	; 0x30
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d10a      	bne.n	8009cc4 <xQueueReceive+0x30>
	__asm volatile
 8009cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb2:	f383 8811 	msr	BASEPRI, r3
 8009cb6:	f3bf 8f6f 	isb	sy
 8009cba:	f3bf 8f4f 	dsb	sy
 8009cbe:	623b      	str	r3, [r7, #32]
}
 8009cc0:	bf00      	nop
 8009cc2:	e7fe      	b.n	8009cc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d103      	bne.n	8009cd2 <xQueueReceive+0x3e>
 8009cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d101      	bne.n	8009cd6 <xQueueReceive+0x42>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e000      	b.n	8009cd8 <xQueueReceive+0x44>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d10a      	bne.n	8009cf2 <xQueueReceive+0x5e>
	__asm volatile
 8009cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce0:	f383 8811 	msr	BASEPRI, r3
 8009ce4:	f3bf 8f6f 	isb	sy
 8009ce8:	f3bf 8f4f 	dsb	sy
 8009cec:	61fb      	str	r3, [r7, #28]
}
 8009cee:	bf00      	nop
 8009cf0:	e7fe      	b.n	8009cf0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009cf2:	f001 f9d7 	bl	800b0a4 <xTaskGetSchedulerState>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d102      	bne.n	8009d02 <xQueueReceive+0x6e>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d101      	bne.n	8009d06 <xQueueReceive+0x72>
 8009d02:	2301      	movs	r3, #1
 8009d04:	e000      	b.n	8009d08 <xQueueReceive+0x74>
 8009d06:	2300      	movs	r3, #0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d10a      	bne.n	8009d22 <xQueueReceive+0x8e>
	__asm volatile
 8009d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d10:	f383 8811 	msr	BASEPRI, r3
 8009d14:	f3bf 8f6f 	isb	sy
 8009d18:	f3bf 8f4f 	dsb	sy
 8009d1c:	61bb      	str	r3, [r7, #24]
}
 8009d1e:	bf00      	nop
 8009d20:	e7fe      	b.n	8009d20 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d22:	f002 f817 	bl	800bd54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d01f      	beq.n	8009d72 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009d32:	68b9      	ldr	r1, [r7, #8]
 8009d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d36:	f000 fa3e 	bl	800a1b6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3c:	1e5a      	subs	r2, r3, #1
 8009d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00f      	beq.n	8009d6a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4c:	3310      	adds	r3, #16
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f000 ffe6 	bl	800ad20 <xTaskRemoveFromEventList>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d007      	beq.n	8009d6a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009d5a:	4b3d      	ldr	r3, [pc, #244]	; (8009e50 <xQueueReceive+0x1bc>)
 8009d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d60:	601a      	str	r2, [r3, #0]
 8009d62:	f3bf 8f4f 	dsb	sy
 8009d66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009d6a:	f002 f823 	bl	800bdb4 <vPortExitCritical>
				return pdPASS;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e069      	b.n	8009e46 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d103      	bne.n	8009d80 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d78:	f002 f81c 	bl	800bdb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	e062      	b.n	8009e46 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d106      	bne.n	8009d94 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d86:	f107 0310 	add.w	r3, r7, #16
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f001 f82c 	bl	800ade8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d90:	2301      	movs	r3, #1
 8009d92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d94:	f002 f80e 	bl	800bdb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d98:	f000 fd98 	bl	800a8cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d9c:	f001 ffda 	bl	800bd54 <vPortEnterCritical>
 8009da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009da6:	b25b      	sxtb	r3, r3
 8009da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dac:	d103      	bne.n	8009db6 <xQueueReceive+0x122>
 8009dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db0:	2200      	movs	r2, #0
 8009db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dbc:	b25b      	sxtb	r3, r3
 8009dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc2:	d103      	bne.n	8009dcc <xQueueReceive+0x138>
 8009dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009dcc:	f001 fff2 	bl	800bdb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009dd0:	1d3a      	adds	r2, r7, #4
 8009dd2:	f107 0310 	add.w	r3, r7, #16
 8009dd6:	4611      	mov	r1, r2
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f001 f81b 	bl	800ae14 <xTaskCheckForTimeOut>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d123      	bne.n	8009e2c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009de6:	f000 fa5e 	bl	800a2a6 <prvIsQueueEmpty>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d017      	beq.n	8009e20 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df2:	3324      	adds	r3, #36	; 0x24
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	4611      	mov	r1, r2
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f000 ff41 	bl	800ac80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009dfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e00:	f000 f9ff 	bl	800a202 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e04:	f000 fd70 	bl	800a8e8 <xTaskResumeAll>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d189      	bne.n	8009d22 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009e0e:	4b10      	ldr	r3, [pc, #64]	; (8009e50 <xQueueReceive+0x1bc>)
 8009e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e14:	601a      	str	r2, [r3, #0]
 8009e16:	f3bf 8f4f 	dsb	sy
 8009e1a:	f3bf 8f6f 	isb	sy
 8009e1e:	e780      	b.n	8009d22 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009e20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e22:	f000 f9ee 	bl	800a202 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e26:	f000 fd5f 	bl	800a8e8 <xTaskResumeAll>
 8009e2a:	e77a      	b.n	8009d22 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009e2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e2e:	f000 f9e8 	bl	800a202 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e32:	f000 fd59 	bl	800a8e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e38:	f000 fa35 	bl	800a2a6 <prvIsQueueEmpty>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	f43f af6f 	beq.w	8009d22 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009e44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3730      	adds	r7, #48	; 0x30
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	e000ed04 	.word	0xe000ed04

08009e54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b08e      	sub	sp, #56	; 0x38
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009e66:	2300      	movs	r3, #0
 8009e68:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d10a      	bne.n	8009e86 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	623b      	str	r3, [r7, #32]
}
 8009e82:	bf00      	nop
 8009e84:	e7fe      	b.n	8009e84 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00a      	beq.n	8009ea4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	61fb      	str	r3, [r7, #28]
}
 8009ea0:	bf00      	nop
 8009ea2:	e7fe      	b.n	8009ea2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ea4:	f001 f8fe 	bl	800b0a4 <xTaskGetSchedulerState>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d102      	bne.n	8009eb4 <xQueueSemaphoreTake+0x60>
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d101      	bne.n	8009eb8 <xQueueSemaphoreTake+0x64>
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	e000      	b.n	8009eba <xQueueSemaphoreTake+0x66>
 8009eb8:	2300      	movs	r3, #0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d10a      	bne.n	8009ed4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec2:	f383 8811 	msr	BASEPRI, r3
 8009ec6:	f3bf 8f6f 	isb	sy
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	61bb      	str	r3, [r7, #24]
}
 8009ed0:	bf00      	nop
 8009ed2:	e7fe      	b.n	8009ed2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ed4:	f001 ff3e 	bl	800bd54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009edc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d024      	beq.n	8009f2e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee6:	1e5a      	subs	r2, r3, #1
 8009ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d104      	bne.n	8009efe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009ef4:	f001 fa4c 	bl	800b390 <pvTaskIncrementMutexHeldCount>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009efc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d00f      	beq.n	8009f26 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f08:	3310      	adds	r3, #16
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f000 ff08 	bl	800ad20 <xTaskRemoveFromEventList>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d007      	beq.n	8009f26 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009f16:	4b54      	ldr	r3, [pc, #336]	; (800a068 <xQueueSemaphoreTake+0x214>)
 8009f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f1c:	601a      	str	r2, [r3, #0]
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009f26:	f001 ff45 	bl	800bdb4 <vPortExitCritical>
				return pdPASS;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e097      	b.n	800a05e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d111      	bne.n	8009f58 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00a      	beq.n	8009f50 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3e:	f383 8811 	msr	BASEPRI, r3
 8009f42:	f3bf 8f6f 	isb	sy
 8009f46:	f3bf 8f4f 	dsb	sy
 8009f4a:	617b      	str	r3, [r7, #20]
}
 8009f4c:	bf00      	nop
 8009f4e:	e7fe      	b.n	8009f4e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009f50:	f001 ff30 	bl	800bdb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009f54:	2300      	movs	r3, #0
 8009f56:	e082      	b.n	800a05e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d106      	bne.n	8009f6c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f5e:	f107 030c 	add.w	r3, r7, #12
 8009f62:	4618      	mov	r0, r3
 8009f64:	f000 ff40 	bl	800ade8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f6c:	f001 ff22 	bl	800bdb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f70:	f000 fcac 	bl	800a8cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f74:	f001 feee 	bl	800bd54 <vPortEnterCritical>
 8009f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f7e:	b25b      	sxtb	r3, r3
 8009f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f84:	d103      	bne.n	8009f8e <xQueueSemaphoreTake+0x13a>
 8009f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f94:	b25b      	sxtb	r3, r3
 8009f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f9a:	d103      	bne.n	8009fa4 <xQueueSemaphoreTake+0x150>
 8009f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fa4:	f001 ff06 	bl	800bdb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009fa8:	463a      	mov	r2, r7
 8009faa:	f107 030c 	add.w	r3, r7, #12
 8009fae:	4611      	mov	r1, r2
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f000 ff2f 	bl	800ae14 <xTaskCheckForTimeOut>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d132      	bne.n	800a022 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009fbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009fbe:	f000 f972 	bl	800a2a6 <prvIsQueueEmpty>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d026      	beq.n	800a016 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d109      	bne.n	8009fe4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009fd0:	f001 fec0 	bl	800bd54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f001 f881 	bl	800b0e0 <xTaskPriorityInherit>
 8009fde:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009fe0:	f001 fee8 	bl	800bdb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe6:	3324      	adds	r3, #36	; 0x24
 8009fe8:	683a      	ldr	r2, [r7, #0]
 8009fea:	4611      	mov	r1, r2
 8009fec:	4618      	mov	r0, r3
 8009fee:	f000 fe47 	bl	800ac80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009ff2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ff4:	f000 f905 	bl	800a202 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009ff8:	f000 fc76 	bl	800a8e8 <xTaskResumeAll>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f47f af68 	bne.w	8009ed4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a004:	4b18      	ldr	r3, [pc, #96]	; (800a068 <xQueueSemaphoreTake+0x214>)
 800a006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a00a:	601a      	str	r2, [r3, #0]
 800a00c:	f3bf 8f4f 	dsb	sy
 800a010:	f3bf 8f6f 	isb	sy
 800a014:	e75e      	b.n	8009ed4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a016:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a018:	f000 f8f3 	bl	800a202 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a01c:	f000 fc64 	bl	800a8e8 <xTaskResumeAll>
 800a020:	e758      	b.n	8009ed4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a022:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a024:	f000 f8ed 	bl	800a202 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a028:	f000 fc5e 	bl	800a8e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a02c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a02e:	f000 f93a 	bl	800a2a6 <prvIsQueueEmpty>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	f43f af4d 	beq.w	8009ed4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d00d      	beq.n	800a05c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a040:	f001 fe88 	bl	800bd54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a044:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a046:	f000 f834 	bl	800a0b2 <prvGetDisinheritPriorityAfterTimeout>
 800a04a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a052:	4618      	mov	r0, r3
 800a054:	f001 f91a 	bl	800b28c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a058:	f001 feac 	bl	800bdb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a05c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3738      	adds	r7, #56	; 0x38
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	e000ed04 	.word	0xe000ed04

0800a06c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d10a      	bne.n	800a094 <vQueueDelete+0x28>
	__asm volatile
 800a07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a082:	f383 8811 	msr	BASEPRI, r3
 800a086:	f3bf 8f6f 	isb	sy
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	60bb      	str	r3, [r7, #8]
}
 800a090:	bf00      	nop
 800a092:	e7fe      	b.n	800a092 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a094:	68f8      	ldr	r0, [r7, #12]
 800a096:	f000 f95f 	bl	800a358 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d102      	bne.n	800a0aa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a0a4:	68f8      	ldr	r0, [r7, #12]
 800a0a6:	f002 f843 	bl	800c130 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a0aa:	bf00      	nop
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a0b2:	b480      	push	{r7}
 800a0b4:	b085      	sub	sp, #20
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d006      	beq.n	800a0d0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a0cc:	60fb      	str	r3, [r7, #12]
 800a0ce:	e001      	b.n	800a0d4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
	}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3714      	adds	r7, #20
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr

0800a0e2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b086      	sub	sp, #24
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	60f8      	str	r0, [r7, #12]
 800a0ea:	60b9      	str	r1, [r7, #8]
 800a0ec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0f6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d10d      	bne.n	800a11c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d14d      	bne.n	800a1a4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	4618      	mov	r0, r3
 800a10e:	f001 f84f 	bl	800b1b0 <xTaskPriorityDisinherit>
 800a112:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2200      	movs	r2, #0
 800a118:	609a      	str	r2, [r3, #8]
 800a11a:	e043      	b.n	800a1a4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d119      	bne.n	800a156 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6858      	ldr	r0, [r3, #4]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12a:	461a      	mov	r2, r3
 800a12c:	68b9      	ldr	r1, [r7, #8]
 800a12e:	f002 fa61 	bl	800c5f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	685a      	ldr	r2, [r3, #4]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a13a:	441a      	add	r2, r3
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	685a      	ldr	r2, [r3, #4]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d32b      	bcc.n	800a1a4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	605a      	str	r2, [r3, #4]
 800a154:	e026      	b.n	800a1a4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	68d8      	ldr	r0, [r3, #12]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a15e:	461a      	mov	r2, r3
 800a160:	68b9      	ldr	r1, [r7, #8]
 800a162:	f002 fa47 	bl	800c5f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	68da      	ldr	r2, [r3, #12]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a16e:	425b      	negs	r3, r3
 800a170:	441a      	add	r2, r3
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	68da      	ldr	r2, [r3, #12]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d207      	bcs.n	800a192 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	689a      	ldr	r2, [r3, #8]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a18a:	425b      	negs	r3, r3
 800a18c:	441a      	add	r2, r3
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2b02      	cmp	r3, #2
 800a196:	d105      	bne.n	800a1a4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d002      	beq.n	800a1a4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	1c5a      	adds	r2, r3, #1
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a1ac:	697b      	ldr	r3, [r7, #20]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3718      	adds	r7, #24
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b082      	sub	sp, #8
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
 800a1be:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d018      	beq.n	800a1fa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	68da      	ldr	r2, [r3, #12]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d0:	441a      	add	r2, r3
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	68da      	ldr	r2, [r3, #12]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d303      	bcc.n	800a1ea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	68d9      	ldr	r1, [r3, #12]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	6838      	ldr	r0, [r7, #0]
 800a1f6:	f002 f9fd 	bl	800c5f4 <memcpy>
	}
}
 800a1fa:	bf00      	nop
 800a1fc:	3708      	adds	r7, #8
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b084      	sub	sp, #16
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a20a:	f001 fda3 	bl	800bd54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a214:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a216:	e011      	b.n	800a23c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d012      	beq.n	800a246 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	3324      	adds	r3, #36	; 0x24
 800a224:	4618      	mov	r0, r3
 800a226:	f000 fd7b 	bl	800ad20 <xTaskRemoveFromEventList>
 800a22a:	4603      	mov	r3, r0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d001      	beq.n	800a234 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a230:	f000 fe52 	bl	800aed8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a234:	7bfb      	ldrb	r3, [r7, #15]
 800a236:	3b01      	subs	r3, #1
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a23c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a240:	2b00      	cmp	r3, #0
 800a242:	dce9      	bgt.n	800a218 <prvUnlockQueue+0x16>
 800a244:	e000      	b.n	800a248 <prvUnlockQueue+0x46>
					break;
 800a246:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	22ff      	movs	r2, #255	; 0xff
 800a24c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a250:	f001 fdb0 	bl	800bdb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a254:	f001 fd7e 	bl	800bd54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a25e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a260:	e011      	b.n	800a286 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d012      	beq.n	800a290 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	3310      	adds	r3, #16
 800a26e:	4618      	mov	r0, r3
 800a270:	f000 fd56 	bl	800ad20 <xTaskRemoveFromEventList>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d001      	beq.n	800a27e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a27a:	f000 fe2d 	bl	800aed8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a27e:	7bbb      	ldrb	r3, [r7, #14]
 800a280:	3b01      	subs	r3, #1
 800a282:	b2db      	uxtb	r3, r3
 800a284:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a286:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	dce9      	bgt.n	800a262 <prvUnlockQueue+0x60>
 800a28e:	e000      	b.n	800a292 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a290:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	22ff      	movs	r2, #255	; 0xff
 800a296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a29a:	f001 fd8b 	bl	800bdb4 <vPortExitCritical>
}
 800a29e:	bf00      	nop
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b084      	sub	sp, #16
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2ae:	f001 fd51 	bl	800bd54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d102      	bne.n	800a2c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	60fb      	str	r3, [r7, #12]
 800a2be:	e001      	b.n	800a2c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a2c4:	f001 fd76 	bl	800bdb4 <vPortExitCritical>

	return xReturn;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3710      	adds	r7, #16
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}

0800a2d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a2d2:	b580      	push	{r7, lr}
 800a2d4:	b084      	sub	sp, #16
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2da:	f001 fd3b 	bl	800bd54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d102      	bne.n	800a2f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	60fb      	str	r3, [r7, #12]
 800a2ee:	e001      	b.n	800a2f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a2f4:	f001 fd5e 	bl	800bdb4 <vPortExitCritical>

	return xReturn;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
	...

0800a304 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a304:	b480      	push	{r7}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a30e:	2300      	movs	r3, #0
 800a310:	60fb      	str	r3, [r7, #12]
 800a312:	e014      	b.n	800a33e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a314:	4a0f      	ldr	r2, [pc, #60]	; (800a354 <vQueueAddToRegistry+0x50>)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10b      	bne.n	800a338 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a320:	490c      	ldr	r1, [pc, #48]	; (800a354 <vQueueAddToRegistry+0x50>)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	683a      	ldr	r2, [r7, #0]
 800a326:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a32a:	4a0a      	ldr	r2, [pc, #40]	; (800a354 <vQueueAddToRegistry+0x50>)
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	00db      	lsls	r3, r3, #3
 800a330:	4413      	add	r3, r2
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a336:	e006      	b.n	800a346 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	3301      	adds	r3, #1
 800a33c:	60fb      	str	r3, [r7, #12]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2b07      	cmp	r3, #7
 800a342:	d9e7      	bls.n	800a314 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a344:	bf00      	nop
 800a346:	bf00      	nop
 800a348:	3714      	adds	r7, #20
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop
 800a354:	2000195c 	.word	0x2000195c

0800a358 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a358:	b480      	push	{r7}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a360:	2300      	movs	r3, #0
 800a362:	60fb      	str	r3, [r7, #12]
 800a364:	e016      	b.n	800a394 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a366:	4a10      	ldr	r2, [pc, #64]	; (800a3a8 <vQueueUnregisterQueue+0x50>)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	00db      	lsls	r3, r3, #3
 800a36c:	4413      	add	r3, r2
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	429a      	cmp	r2, r3
 800a374:	d10b      	bne.n	800a38e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a376:	4a0c      	ldr	r2, [pc, #48]	; (800a3a8 <vQueueUnregisterQueue+0x50>)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2100      	movs	r1, #0
 800a37c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a380:	4a09      	ldr	r2, [pc, #36]	; (800a3a8 <vQueueUnregisterQueue+0x50>)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	00db      	lsls	r3, r3, #3
 800a386:	4413      	add	r3, r2
 800a388:	2200      	movs	r2, #0
 800a38a:	605a      	str	r2, [r3, #4]
				break;
 800a38c:	e006      	b.n	800a39c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	3301      	adds	r3, #1
 800a392:	60fb      	str	r3, [r7, #12]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2b07      	cmp	r3, #7
 800a398:	d9e5      	bls.n	800a366 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a39a:	bf00      	nop
 800a39c:	bf00      	nop
 800a39e:	3714      	adds	r7, #20
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr
 800a3a8:	2000195c 	.word	0x2000195c

0800a3ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a3bc:	f001 fcca 	bl	800bd54 <vPortEnterCritical>
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3c6:	b25b      	sxtb	r3, r3
 800a3c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3cc:	d103      	bne.n	800a3d6 <vQueueWaitForMessageRestricted+0x2a>
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3dc:	b25b      	sxtb	r3, r3
 800a3de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e2:	d103      	bne.n	800a3ec <vQueueWaitForMessageRestricted+0x40>
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3ec:	f001 fce2 	bl	800bdb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d106      	bne.n	800a406 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	3324      	adds	r3, #36	; 0x24
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	68b9      	ldr	r1, [r7, #8]
 800a400:	4618      	mov	r0, r3
 800a402:	f000 fc61 	bl	800acc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a406:	6978      	ldr	r0, [r7, #20]
 800a408:	f7ff fefb 	bl	800a202 <prvUnlockQueue>
	}
 800a40c:	bf00      	nop
 800a40e:	3718      	adds	r7, #24
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a414:	b580      	push	{r7, lr}
 800a416:	b08e      	sub	sp, #56	; 0x38
 800a418:	af04      	add	r7, sp, #16
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
 800a420:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10a      	bne.n	800a43e <xTaskCreateStatic+0x2a>
	__asm volatile
 800a428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42c:	f383 8811 	msr	BASEPRI, r3
 800a430:	f3bf 8f6f 	isb	sy
 800a434:	f3bf 8f4f 	dsb	sy
 800a438:	623b      	str	r3, [r7, #32]
}
 800a43a:	bf00      	nop
 800a43c:	e7fe      	b.n	800a43c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a440:	2b00      	cmp	r3, #0
 800a442:	d10a      	bne.n	800a45a <xTaskCreateStatic+0x46>
	__asm volatile
 800a444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a448:	f383 8811 	msr	BASEPRI, r3
 800a44c:	f3bf 8f6f 	isb	sy
 800a450:	f3bf 8f4f 	dsb	sy
 800a454:	61fb      	str	r3, [r7, #28]
}
 800a456:	bf00      	nop
 800a458:	e7fe      	b.n	800a458 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a45a:	23bc      	movs	r3, #188	; 0xbc
 800a45c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	2bbc      	cmp	r3, #188	; 0xbc
 800a462:	d00a      	beq.n	800a47a <xTaskCreateStatic+0x66>
	__asm volatile
 800a464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a468:	f383 8811 	msr	BASEPRI, r3
 800a46c:	f3bf 8f6f 	isb	sy
 800a470:	f3bf 8f4f 	dsb	sy
 800a474:	61bb      	str	r3, [r7, #24]
}
 800a476:	bf00      	nop
 800a478:	e7fe      	b.n	800a478 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a47a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d01e      	beq.n	800a4c0 <xTaskCreateStatic+0xac>
 800a482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a484:	2b00      	cmp	r3, #0
 800a486:	d01b      	beq.n	800a4c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a490:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a494:	2202      	movs	r2, #2
 800a496:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a49a:	2300      	movs	r3, #0
 800a49c:	9303      	str	r3, [sp, #12]
 800a49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a0:	9302      	str	r3, [sp, #8]
 800a4a2:	f107 0314 	add.w	r3, r7, #20
 800a4a6:	9301      	str	r3, [sp, #4]
 800a4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4aa:	9300      	str	r3, [sp, #0]
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	68b9      	ldr	r1, [r7, #8]
 800a4b2:	68f8      	ldr	r0, [r7, #12]
 800a4b4:	f000 f850 	bl	800a558 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a4b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4ba:	f000 f8f3 	bl	800a6a4 <prvAddNewTaskToReadyList>
 800a4be:	e001      	b.n	800a4c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a4c4:	697b      	ldr	r3, [r7, #20]
	}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3728      	adds	r7, #40	; 0x28
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b08c      	sub	sp, #48	; 0x30
 800a4d2:	af04      	add	r7, sp, #16
 800a4d4:	60f8      	str	r0, [r7, #12]
 800a4d6:	60b9      	str	r1, [r7, #8]
 800a4d8:	603b      	str	r3, [r7, #0]
 800a4da:	4613      	mov	r3, r2
 800a4dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a4de:	88fb      	ldrh	r3, [r7, #6]
 800a4e0:	009b      	lsls	r3, r3, #2
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f001 fd58 	bl	800bf98 <pvPortMalloc>
 800a4e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d00e      	beq.n	800a50e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a4f0:	20bc      	movs	r0, #188	; 0xbc
 800a4f2:	f001 fd51 	bl	800bf98 <pvPortMalloc>
 800a4f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d003      	beq.n	800a506 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	697a      	ldr	r2, [r7, #20]
 800a502:	631a      	str	r2, [r3, #48]	; 0x30
 800a504:	e005      	b.n	800a512 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a506:	6978      	ldr	r0, [r7, #20]
 800a508:	f001 fe12 	bl	800c130 <vPortFree>
 800a50c:	e001      	b.n	800a512 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a50e:	2300      	movs	r3, #0
 800a510:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a512:	69fb      	ldr	r3, [r7, #28]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d017      	beq.n	800a548 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a518:	69fb      	ldr	r3, [r7, #28]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a520:	88fa      	ldrh	r2, [r7, #6]
 800a522:	2300      	movs	r3, #0
 800a524:	9303      	str	r3, [sp, #12]
 800a526:	69fb      	ldr	r3, [r7, #28]
 800a528:	9302      	str	r3, [sp, #8]
 800a52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52c:	9301      	str	r3, [sp, #4]
 800a52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	68b9      	ldr	r1, [r7, #8]
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f000 f80e 	bl	800a558 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a53c:	69f8      	ldr	r0, [r7, #28]
 800a53e:	f000 f8b1 	bl	800a6a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a542:	2301      	movs	r3, #1
 800a544:	61bb      	str	r3, [r7, #24]
 800a546:	e002      	b.n	800a54e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a548:	f04f 33ff 	mov.w	r3, #4294967295
 800a54c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a54e:	69bb      	ldr	r3, [r7, #24]
	}
 800a550:	4618      	mov	r0, r3
 800a552:	3720      	adds	r7, #32
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b088      	sub	sp, #32
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	60b9      	str	r1, [r7, #8]
 800a562:	607a      	str	r2, [r7, #4]
 800a564:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a568:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	461a      	mov	r2, r3
 800a570:	21a5      	movs	r1, #165	; 0xa5
 800a572:	f002 f84d 	bl	800c610 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a580:	3b01      	subs	r3, #1
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	4413      	add	r3, r2
 800a586:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	f023 0307 	bic.w	r3, r3, #7
 800a58e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	f003 0307 	and.w	r3, r3, #7
 800a596:	2b00      	cmp	r3, #0
 800a598:	d00a      	beq.n	800a5b0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a59e:	f383 8811 	msr	BASEPRI, r3
 800a5a2:	f3bf 8f6f 	isb	sy
 800a5a6:	f3bf 8f4f 	dsb	sy
 800a5aa:	617b      	str	r3, [r7, #20]
}
 800a5ac:	bf00      	nop
 800a5ae:	e7fe      	b.n	800a5ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d01f      	beq.n	800a5f6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	61fb      	str	r3, [r7, #28]
 800a5ba:	e012      	b.n	800a5e2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a5bc:	68ba      	ldr	r2, [r7, #8]
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	7819      	ldrb	r1, [r3, #0]
 800a5c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	3334      	adds	r3, #52	; 0x34
 800a5cc:	460a      	mov	r2, r1
 800a5ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a5d0:	68ba      	ldr	r2, [r7, #8]
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d006      	beq.n	800a5ea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	3301      	adds	r3, #1
 800a5e0:	61fb      	str	r3, [r7, #28]
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	2b0f      	cmp	r3, #15
 800a5e6:	d9e9      	bls.n	800a5bc <prvInitialiseNewTask+0x64>
 800a5e8:	e000      	b.n	800a5ec <prvInitialiseNewTask+0x94>
			{
				break;
 800a5ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a5f4:	e003      	b.n	800a5fe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a600:	2b37      	cmp	r3, #55	; 0x37
 800a602:	d901      	bls.n	800a608 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a604:	2337      	movs	r3, #55	; 0x37
 800a606:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a60c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a612:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a616:	2200      	movs	r2, #0
 800a618:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61c:	3304      	adds	r3, #4
 800a61e:	4618      	mov	r0, r3
 800a620:	f7fe fed6 	bl	80093d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a626:	3318      	adds	r3, #24
 800a628:	4618      	mov	r0, r3
 800a62a:	f7fe fed1 	bl	80093d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a632:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a636:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a642:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a646:	2200      	movs	r2, #0
 800a648:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64e:	2200      	movs	r2, #0
 800a650:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a656:	3354      	adds	r3, #84	; 0x54
 800a658:	2260      	movs	r2, #96	; 0x60
 800a65a:	2100      	movs	r1, #0
 800a65c:	4618      	mov	r0, r3
 800a65e:	f001 ffd7 	bl	800c610 <memset>
 800a662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a664:	4a0c      	ldr	r2, [pc, #48]	; (800a698 <prvInitialiseNewTask+0x140>)
 800a666:	659a      	str	r2, [r3, #88]	; 0x58
 800a668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66a:	4a0c      	ldr	r2, [pc, #48]	; (800a69c <prvInitialiseNewTask+0x144>)
 800a66c:	65da      	str	r2, [r3, #92]	; 0x5c
 800a66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a670:	4a0b      	ldr	r2, [pc, #44]	; (800a6a0 <prvInitialiseNewTask+0x148>)
 800a672:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a674:	683a      	ldr	r2, [r7, #0]
 800a676:	68f9      	ldr	r1, [r7, #12]
 800a678:	69b8      	ldr	r0, [r7, #24]
 800a67a:	f001 fa3f 	bl	800bafc <pxPortInitialiseStack>
 800a67e:	4602      	mov	r2, r0
 800a680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a682:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a686:	2b00      	cmp	r3, #0
 800a688:	d002      	beq.n	800a690 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a68e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a690:	bf00      	nop
 800a692:	3720      	adds	r7, #32
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}
 800a698:	0800e4d8 	.word	0x0800e4d8
 800a69c:	0800e4f8 	.word	0x0800e4f8
 800a6a0:	0800e4b8 	.word	0x0800e4b8

0800a6a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a6ac:	f001 fb52 	bl	800bd54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a6b0:	4b2d      	ldr	r3, [pc, #180]	; (800a768 <prvAddNewTaskToReadyList+0xc4>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	4a2c      	ldr	r2, [pc, #176]	; (800a768 <prvAddNewTaskToReadyList+0xc4>)
 800a6b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a6ba:	4b2c      	ldr	r3, [pc, #176]	; (800a76c <prvAddNewTaskToReadyList+0xc8>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d109      	bne.n	800a6d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a6c2:	4a2a      	ldr	r2, [pc, #168]	; (800a76c <prvAddNewTaskToReadyList+0xc8>)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a6c8:	4b27      	ldr	r3, [pc, #156]	; (800a768 <prvAddNewTaskToReadyList+0xc4>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d110      	bne.n	800a6f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a6d0:	f000 fc26 	bl	800af20 <prvInitialiseTaskLists>
 800a6d4:	e00d      	b.n	800a6f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a6d6:	4b26      	ldr	r3, [pc, #152]	; (800a770 <prvAddNewTaskToReadyList+0xcc>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d109      	bne.n	800a6f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a6de:	4b23      	ldr	r3, [pc, #140]	; (800a76c <prvAddNewTaskToReadyList+0xc8>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d802      	bhi.n	800a6f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a6ec:	4a1f      	ldr	r2, [pc, #124]	; (800a76c <prvAddNewTaskToReadyList+0xc8>)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a6f2:	4b20      	ldr	r3, [pc, #128]	; (800a774 <prvAddNewTaskToReadyList+0xd0>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	4a1e      	ldr	r2, [pc, #120]	; (800a774 <prvAddNewTaskToReadyList+0xd0>)
 800a6fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a6fc:	4b1d      	ldr	r3, [pc, #116]	; (800a774 <prvAddNewTaskToReadyList+0xd0>)
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a708:	4b1b      	ldr	r3, [pc, #108]	; (800a778 <prvAddNewTaskToReadyList+0xd4>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d903      	bls.n	800a718 <prvAddNewTaskToReadyList+0x74>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a714:	4a18      	ldr	r2, [pc, #96]	; (800a778 <prvAddNewTaskToReadyList+0xd4>)
 800a716:	6013      	str	r3, [r2, #0]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a71c:	4613      	mov	r3, r2
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	4413      	add	r3, r2
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	4a15      	ldr	r2, [pc, #84]	; (800a77c <prvAddNewTaskToReadyList+0xd8>)
 800a726:	441a      	add	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	3304      	adds	r3, #4
 800a72c:	4619      	mov	r1, r3
 800a72e:	4610      	mov	r0, r2
 800a730:	f7fe fe5b 	bl	80093ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a734:	f001 fb3e 	bl	800bdb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a738:	4b0d      	ldr	r3, [pc, #52]	; (800a770 <prvAddNewTaskToReadyList+0xcc>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d00e      	beq.n	800a75e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a740:	4b0a      	ldr	r3, [pc, #40]	; (800a76c <prvAddNewTaskToReadyList+0xc8>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d207      	bcs.n	800a75e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a74e:	4b0c      	ldr	r3, [pc, #48]	; (800a780 <prvAddNewTaskToReadyList+0xdc>)
 800a750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a754:	601a      	str	r2, [r3, #0]
 800a756:	f3bf 8f4f 	dsb	sy
 800a75a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a75e:	bf00      	nop
 800a760:	3708      	adds	r7, #8
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	20001e70 	.word	0x20001e70
 800a76c:	2000199c 	.word	0x2000199c
 800a770:	20001e7c 	.word	0x20001e7c
 800a774:	20001e8c 	.word	0x20001e8c
 800a778:	20001e78 	.word	0x20001e78
 800a77c:	200019a0 	.word	0x200019a0
 800a780:	e000ed04 	.word	0xe000ed04

0800a784 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a78c:	2300      	movs	r3, #0
 800a78e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d017      	beq.n	800a7c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a796:	4b13      	ldr	r3, [pc, #76]	; (800a7e4 <vTaskDelay+0x60>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00a      	beq.n	800a7b4 <vTaskDelay+0x30>
	__asm volatile
 800a79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	f3bf 8f6f 	isb	sy
 800a7aa:	f3bf 8f4f 	dsb	sy
 800a7ae:	60bb      	str	r3, [r7, #8]
}
 800a7b0:	bf00      	nop
 800a7b2:	e7fe      	b.n	800a7b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a7b4:	f000 f88a 	bl	800a8cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a7b8:	2100      	movs	r1, #0
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 fdfc 	bl	800b3b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a7c0:	f000 f892 	bl	800a8e8 <xTaskResumeAll>
 800a7c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d107      	bne.n	800a7dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a7cc:	4b06      	ldr	r3, [pc, #24]	; (800a7e8 <vTaskDelay+0x64>)
 800a7ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a7dc:	bf00      	nop
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	20001e98 	.word	0x20001e98
 800a7e8:	e000ed04 	.word	0xe000ed04

0800a7ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b08a      	sub	sp, #40	; 0x28
 800a7f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a7fa:	463a      	mov	r2, r7
 800a7fc:	1d39      	adds	r1, r7, #4
 800a7fe:	f107 0308 	add.w	r3, r7, #8
 800a802:	4618      	mov	r0, r3
 800a804:	f7fe fd90 	bl	8009328 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a808:	6839      	ldr	r1, [r7, #0]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	68ba      	ldr	r2, [r7, #8]
 800a80e:	9202      	str	r2, [sp, #8]
 800a810:	9301      	str	r3, [sp, #4]
 800a812:	2300      	movs	r3, #0
 800a814:	9300      	str	r3, [sp, #0]
 800a816:	2300      	movs	r3, #0
 800a818:	460a      	mov	r2, r1
 800a81a:	4924      	ldr	r1, [pc, #144]	; (800a8ac <vTaskStartScheduler+0xc0>)
 800a81c:	4824      	ldr	r0, [pc, #144]	; (800a8b0 <vTaskStartScheduler+0xc4>)
 800a81e:	f7ff fdf9 	bl	800a414 <xTaskCreateStatic>
 800a822:	4603      	mov	r3, r0
 800a824:	4a23      	ldr	r2, [pc, #140]	; (800a8b4 <vTaskStartScheduler+0xc8>)
 800a826:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a828:	4b22      	ldr	r3, [pc, #136]	; (800a8b4 <vTaskStartScheduler+0xc8>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d002      	beq.n	800a836 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a830:	2301      	movs	r3, #1
 800a832:	617b      	str	r3, [r7, #20]
 800a834:	e001      	b.n	800a83a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a836:	2300      	movs	r3, #0
 800a838:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d102      	bne.n	800a846 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a840:	f000 fe0e 	bl	800b460 <xTimerCreateTimerTask>
 800a844:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d11b      	bne.n	800a884 <vTaskStartScheduler+0x98>
	__asm volatile
 800a84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a850:	f383 8811 	msr	BASEPRI, r3
 800a854:	f3bf 8f6f 	isb	sy
 800a858:	f3bf 8f4f 	dsb	sy
 800a85c:	613b      	str	r3, [r7, #16]
}
 800a85e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a860:	4b15      	ldr	r3, [pc, #84]	; (800a8b8 <vTaskStartScheduler+0xcc>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	3354      	adds	r3, #84	; 0x54
 800a866:	4a15      	ldr	r2, [pc, #84]	; (800a8bc <vTaskStartScheduler+0xd0>)
 800a868:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a86a:	4b15      	ldr	r3, [pc, #84]	; (800a8c0 <vTaskStartScheduler+0xd4>)
 800a86c:	f04f 32ff 	mov.w	r2, #4294967295
 800a870:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a872:	4b14      	ldr	r3, [pc, #80]	; (800a8c4 <vTaskStartScheduler+0xd8>)
 800a874:	2201      	movs	r2, #1
 800a876:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a878:	4b13      	ldr	r3, [pc, #76]	; (800a8c8 <vTaskStartScheduler+0xdc>)
 800a87a:	2200      	movs	r2, #0
 800a87c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a87e:	f001 f9c7 	bl	800bc10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a882:	e00e      	b.n	800a8a2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a88a:	d10a      	bne.n	800a8a2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a890:	f383 8811 	msr	BASEPRI, r3
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	f3bf 8f4f 	dsb	sy
 800a89c:	60fb      	str	r3, [r7, #12]
}
 800a89e:	bf00      	nop
 800a8a0:	e7fe      	b.n	800a8a0 <vTaskStartScheduler+0xb4>
}
 800a8a2:	bf00      	nop
 800a8a4:	3718      	adds	r7, #24
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	0800e3c4 	.word	0x0800e3c4
 800a8b0:	0800aef1 	.word	0x0800aef1
 800a8b4:	20001e94 	.word	0x20001e94
 800a8b8:	2000199c 	.word	0x2000199c
 800a8bc:	20000010 	.word	0x20000010
 800a8c0:	20001e90 	.word	0x20001e90
 800a8c4:	20001e7c 	.word	0x20001e7c
 800a8c8:	20001e74 	.word	0x20001e74

0800a8cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a8d0:	4b04      	ldr	r3, [pc, #16]	; (800a8e4 <vTaskSuspendAll+0x18>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	4a03      	ldr	r2, [pc, #12]	; (800a8e4 <vTaskSuspendAll+0x18>)
 800a8d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a8da:	bf00      	nop
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr
 800a8e4:	20001e98 	.word	0x20001e98

0800a8e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a8f6:	4b42      	ldr	r3, [pc, #264]	; (800aa00 <xTaskResumeAll+0x118>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d10a      	bne.n	800a914 <xTaskResumeAll+0x2c>
	__asm volatile
 800a8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a902:	f383 8811 	msr	BASEPRI, r3
 800a906:	f3bf 8f6f 	isb	sy
 800a90a:	f3bf 8f4f 	dsb	sy
 800a90e:	603b      	str	r3, [r7, #0]
}
 800a910:	bf00      	nop
 800a912:	e7fe      	b.n	800a912 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a914:	f001 fa1e 	bl	800bd54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a918:	4b39      	ldr	r3, [pc, #228]	; (800aa00 <xTaskResumeAll+0x118>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	3b01      	subs	r3, #1
 800a91e:	4a38      	ldr	r2, [pc, #224]	; (800aa00 <xTaskResumeAll+0x118>)
 800a920:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a922:	4b37      	ldr	r3, [pc, #220]	; (800aa00 <xTaskResumeAll+0x118>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d162      	bne.n	800a9f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a92a:	4b36      	ldr	r3, [pc, #216]	; (800aa04 <xTaskResumeAll+0x11c>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d05e      	beq.n	800a9f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a932:	e02f      	b.n	800a994 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a934:	4b34      	ldr	r3, [pc, #208]	; (800aa08 <xTaskResumeAll+0x120>)
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	3318      	adds	r3, #24
 800a940:	4618      	mov	r0, r3
 800a942:	f7fe fdaf 	bl	80094a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	3304      	adds	r3, #4
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7fe fdaa 	bl	80094a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a954:	4b2d      	ldr	r3, [pc, #180]	; (800aa0c <xTaskResumeAll+0x124>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d903      	bls.n	800a964 <xTaskResumeAll+0x7c>
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a960:	4a2a      	ldr	r2, [pc, #168]	; (800aa0c <xTaskResumeAll+0x124>)
 800a962:	6013      	str	r3, [r2, #0]
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a968:	4613      	mov	r3, r2
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	4413      	add	r3, r2
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	4a27      	ldr	r2, [pc, #156]	; (800aa10 <xTaskResumeAll+0x128>)
 800a972:	441a      	add	r2, r3
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	3304      	adds	r3, #4
 800a978:	4619      	mov	r1, r3
 800a97a:	4610      	mov	r0, r2
 800a97c:	f7fe fd35 	bl	80093ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a984:	4b23      	ldr	r3, [pc, #140]	; (800aa14 <xTaskResumeAll+0x12c>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d302      	bcc.n	800a994 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a98e:	4b22      	ldr	r3, [pc, #136]	; (800aa18 <xTaskResumeAll+0x130>)
 800a990:	2201      	movs	r2, #1
 800a992:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a994:	4b1c      	ldr	r3, [pc, #112]	; (800aa08 <xTaskResumeAll+0x120>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d1cb      	bne.n	800a934 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d001      	beq.n	800a9a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a9a2:	f000 fb5f 	bl	800b064 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a9a6:	4b1d      	ldr	r3, [pc, #116]	; (800aa1c <xTaskResumeAll+0x134>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d010      	beq.n	800a9d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a9b2:	f000 f847 	bl	800aa44 <xTaskIncrementTick>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d002      	beq.n	800a9c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a9bc:	4b16      	ldr	r3, [pc, #88]	; (800aa18 <xTaskResumeAll+0x130>)
 800a9be:	2201      	movs	r2, #1
 800a9c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	3b01      	subs	r3, #1
 800a9c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d1f1      	bne.n	800a9b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a9ce:	4b13      	ldr	r3, [pc, #76]	; (800aa1c <xTaskResumeAll+0x134>)
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a9d4:	4b10      	ldr	r3, [pc, #64]	; (800aa18 <xTaskResumeAll+0x130>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d009      	beq.n	800a9f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a9e0:	4b0f      	ldr	r3, [pc, #60]	; (800aa20 <xTaskResumeAll+0x138>)
 800a9e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9e6:	601a      	str	r2, [r3, #0]
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a9f0:	f001 f9e0 	bl	800bdb4 <vPortExitCritical>

	return xAlreadyYielded;
 800a9f4:	68bb      	ldr	r3, [r7, #8]
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	20001e98 	.word	0x20001e98
 800aa04:	20001e70 	.word	0x20001e70
 800aa08:	20001e30 	.word	0x20001e30
 800aa0c:	20001e78 	.word	0x20001e78
 800aa10:	200019a0 	.word	0x200019a0
 800aa14:	2000199c 	.word	0x2000199c
 800aa18:	20001e84 	.word	0x20001e84
 800aa1c:	20001e80 	.word	0x20001e80
 800aa20:	e000ed04 	.word	0xe000ed04

0800aa24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aa2a:	4b05      	ldr	r3, [pc, #20]	; (800aa40 <xTaskGetTickCount+0x1c>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aa30:	687b      	ldr	r3, [r7, #4]
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	370c      	adds	r7, #12
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop
 800aa40:	20001e74 	.word	0x20001e74

0800aa44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b086      	sub	sp, #24
 800aa48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa4e:	4b4f      	ldr	r3, [pc, #316]	; (800ab8c <xTaskIncrementTick+0x148>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f040 808f 	bne.w	800ab76 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aa58:	4b4d      	ldr	r3, [pc, #308]	; (800ab90 <xTaskIncrementTick+0x14c>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aa60:	4a4b      	ldr	r2, [pc, #300]	; (800ab90 <xTaskIncrementTick+0x14c>)
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d120      	bne.n	800aaae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aa6c:	4b49      	ldr	r3, [pc, #292]	; (800ab94 <xTaskIncrementTick+0x150>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d00a      	beq.n	800aa8c <xTaskIncrementTick+0x48>
	__asm volatile
 800aa76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7a:	f383 8811 	msr	BASEPRI, r3
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	f3bf 8f4f 	dsb	sy
 800aa86:	603b      	str	r3, [r7, #0]
}
 800aa88:	bf00      	nop
 800aa8a:	e7fe      	b.n	800aa8a <xTaskIncrementTick+0x46>
 800aa8c:	4b41      	ldr	r3, [pc, #260]	; (800ab94 <xTaskIncrementTick+0x150>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	60fb      	str	r3, [r7, #12]
 800aa92:	4b41      	ldr	r3, [pc, #260]	; (800ab98 <xTaskIncrementTick+0x154>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a3f      	ldr	r2, [pc, #252]	; (800ab94 <xTaskIncrementTick+0x150>)
 800aa98:	6013      	str	r3, [r2, #0]
 800aa9a:	4a3f      	ldr	r2, [pc, #252]	; (800ab98 <xTaskIncrementTick+0x154>)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6013      	str	r3, [r2, #0]
 800aaa0:	4b3e      	ldr	r3, [pc, #248]	; (800ab9c <xTaskIncrementTick+0x158>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	4a3d      	ldr	r2, [pc, #244]	; (800ab9c <xTaskIncrementTick+0x158>)
 800aaa8:	6013      	str	r3, [r2, #0]
 800aaaa:	f000 fadb 	bl	800b064 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aaae:	4b3c      	ldr	r3, [pc, #240]	; (800aba0 <xTaskIncrementTick+0x15c>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	693a      	ldr	r2, [r7, #16]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d349      	bcc.n	800ab4c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aab8:	4b36      	ldr	r3, [pc, #216]	; (800ab94 <xTaskIncrementTick+0x150>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d104      	bne.n	800aacc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aac2:	4b37      	ldr	r3, [pc, #220]	; (800aba0 <xTaskIncrementTick+0x15c>)
 800aac4:	f04f 32ff 	mov.w	r2, #4294967295
 800aac8:	601a      	str	r2, [r3, #0]
					break;
 800aaca:	e03f      	b.n	800ab4c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aacc:	4b31      	ldr	r3, [pc, #196]	; (800ab94 <xTaskIncrementTick+0x150>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	68db      	ldr	r3, [r3, #12]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aadc:	693a      	ldr	r2, [r7, #16]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d203      	bcs.n	800aaec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aae4:	4a2e      	ldr	r2, [pc, #184]	; (800aba0 <xTaskIncrementTick+0x15c>)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aaea:	e02f      	b.n	800ab4c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	3304      	adds	r3, #4
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7fe fcd7 	bl	80094a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d004      	beq.n	800ab08 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	3318      	adds	r3, #24
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7fe fcce 	bl	80094a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab0c:	4b25      	ldr	r3, [pc, #148]	; (800aba4 <xTaskIncrementTick+0x160>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d903      	bls.n	800ab1c <xTaskIncrementTick+0xd8>
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab18:	4a22      	ldr	r2, [pc, #136]	; (800aba4 <xTaskIncrementTick+0x160>)
 800ab1a:	6013      	str	r3, [r2, #0]
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab20:	4613      	mov	r3, r2
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	4413      	add	r3, r2
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	4a1f      	ldr	r2, [pc, #124]	; (800aba8 <xTaskIncrementTick+0x164>)
 800ab2a:	441a      	add	r2, r3
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	3304      	adds	r3, #4
 800ab30:	4619      	mov	r1, r3
 800ab32:	4610      	mov	r0, r2
 800ab34:	f7fe fc59 	bl	80093ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab3c:	4b1b      	ldr	r3, [pc, #108]	; (800abac <xTaskIncrementTick+0x168>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d3b8      	bcc.n	800aab8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ab46:	2301      	movs	r3, #1
 800ab48:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab4a:	e7b5      	b.n	800aab8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ab4c:	4b17      	ldr	r3, [pc, #92]	; (800abac <xTaskIncrementTick+0x168>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab52:	4915      	ldr	r1, [pc, #84]	; (800aba8 <xTaskIncrementTick+0x164>)
 800ab54:	4613      	mov	r3, r2
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	4413      	add	r3, r2
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	440b      	add	r3, r1
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d901      	bls.n	800ab68 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ab64:	2301      	movs	r3, #1
 800ab66:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ab68:	4b11      	ldr	r3, [pc, #68]	; (800abb0 <xTaskIncrementTick+0x16c>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d007      	beq.n	800ab80 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ab70:	2301      	movs	r3, #1
 800ab72:	617b      	str	r3, [r7, #20]
 800ab74:	e004      	b.n	800ab80 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ab76:	4b0f      	ldr	r3, [pc, #60]	; (800abb4 <xTaskIncrementTick+0x170>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	4a0d      	ldr	r2, [pc, #52]	; (800abb4 <xTaskIncrementTick+0x170>)
 800ab7e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ab80:	697b      	ldr	r3, [r7, #20]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3718      	adds	r7, #24
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	20001e98 	.word	0x20001e98
 800ab90:	20001e74 	.word	0x20001e74
 800ab94:	20001e28 	.word	0x20001e28
 800ab98:	20001e2c 	.word	0x20001e2c
 800ab9c:	20001e88 	.word	0x20001e88
 800aba0:	20001e90 	.word	0x20001e90
 800aba4:	20001e78 	.word	0x20001e78
 800aba8:	200019a0 	.word	0x200019a0
 800abac:	2000199c 	.word	0x2000199c
 800abb0:	20001e84 	.word	0x20001e84
 800abb4:	20001e80 	.word	0x20001e80

0800abb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800abbe:	4b2a      	ldr	r3, [pc, #168]	; (800ac68 <vTaskSwitchContext+0xb0>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d003      	beq.n	800abce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800abc6:	4b29      	ldr	r3, [pc, #164]	; (800ac6c <vTaskSwitchContext+0xb4>)
 800abc8:	2201      	movs	r2, #1
 800abca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800abcc:	e046      	b.n	800ac5c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800abce:	4b27      	ldr	r3, [pc, #156]	; (800ac6c <vTaskSwitchContext+0xb4>)
 800abd0:	2200      	movs	r2, #0
 800abd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abd4:	4b26      	ldr	r3, [pc, #152]	; (800ac70 <vTaskSwitchContext+0xb8>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	60fb      	str	r3, [r7, #12]
 800abda:	e010      	b.n	800abfe <vTaskSwitchContext+0x46>
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d10a      	bne.n	800abf8 <vTaskSwitchContext+0x40>
	__asm volatile
 800abe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe6:	f383 8811 	msr	BASEPRI, r3
 800abea:	f3bf 8f6f 	isb	sy
 800abee:	f3bf 8f4f 	dsb	sy
 800abf2:	607b      	str	r3, [r7, #4]
}
 800abf4:	bf00      	nop
 800abf6:	e7fe      	b.n	800abf6 <vTaskSwitchContext+0x3e>
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	3b01      	subs	r3, #1
 800abfc:	60fb      	str	r3, [r7, #12]
 800abfe:	491d      	ldr	r1, [pc, #116]	; (800ac74 <vTaskSwitchContext+0xbc>)
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	4613      	mov	r3, r2
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	4413      	add	r3, r2
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	440b      	add	r3, r1
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d0e4      	beq.n	800abdc <vTaskSwitchContext+0x24>
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	4613      	mov	r3, r2
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	4413      	add	r3, r2
 800ac1a:	009b      	lsls	r3, r3, #2
 800ac1c:	4a15      	ldr	r2, [pc, #84]	; (800ac74 <vTaskSwitchContext+0xbc>)
 800ac1e:	4413      	add	r3, r2
 800ac20:	60bb      	str	r3, [r7, #8]
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	685a      	ldr	r2, [r3, #4]
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	605a      	str	r2, [r3, #4]
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	685a      	ldr	r2, [r3, #4]
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	3308      	adds	r3, #8
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d104      	bne.n	800ac42 <vTaskSwitchContext+0x8a>
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	685a      	ldr	r2, [r3, #4]
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	605a      	str	r2, [r3, #4]
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	4a0b      	ldr	r2, [pc, #44]	; (800ac78 <vTaskSwitchContext+0xc0>)
 800ac4a:	6013      	str	r3, [r2, #0]
 800ac4c:	4a08      	ldr	r2, [pc, #32]	; (800ac70 <vTaskSwitchContext+0xb8>)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ac52:	4b09      	ldr	r3, [pc, #36]	; (800ac78 <vTaskSwitchContext+0xc0>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	3354      	adds	r3, #84	; 0x54
 800ac58:	4a08      	ldr	r2, [pc, #32]	; (800ac7c <vTaskSwitchContext+0xc4>)
 800ac5a:	6013      	str	r3, [r2, #0]
}
 800ac5c:	bf00      	nop
 800ac5e:	3714      	adds	r7, #20
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr
 800ac68:	20001e98 	.word	0x20001e98
 800ac6c:	20001e84 	.word	0x20001e84
 800ac70:	20001e78 	.word	0x20001e78
 800ac74:	200019a0 	.word	0x200019a0
 800ac78:	2000199c 	.word	0x2000199c
 800ac7c:	20000010 	.word	0x20000010

0800ac80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d10a      	bne.n	800aca6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ac90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	60fb      	str	r3, [r7, #12]
}
 800aca2:	bf00      	nop
 800aca4:	e7fe      	b.n	800aca4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aca6:	4b07      	ldr	r3, [pc, #28]	; (800acc4 <vTaskPlaceOnEventList+0x44>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	3318      	adds	r3, #24
 800acac:	4619      	mov	r1, r3
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f7fe fbbf 	bl	8009432 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800acb4:	2101      	movs	r1, #1
 800acb6:	6838      	ldr	r0, [r7, #0]
 800acb8:	f000 fb7e 	bl	800b3b8 <prvAddCurrentTaskToDelayedList>
}
 800acbc:	bf00      	nop
 800acbe:	3710      	adds	r7, #16
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	2000199c 	.word	0x2000199c

0800acc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b086      	sub	sp, #24
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	60b9      	str	r1, [r7, #8]
 800acd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d10a      	bne.n	800acf0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800acda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acde:	f383 8811 	msr	BASEPRI, r3
 800ace2:	f3bf 8f6f 	isb	sy
 800ace6:	f3bf 8f4f 	dsb	sy
 800acea:	617b      	str	r3, [r7, #20]
}
 800acec:	bf00      	nop
 800acee:	e7fe      	b.n	800acee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800acf0:	4b0a      	ldr	r3, [pc, #40]	; (800ad1c <vTaskPlaceOnEventListRestricted+0x54>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	3318      	adds	r3, #24
 800acf6:	4619      	mov	r1, r3
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	f7fe fb76 	bl	80093ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d002      	beq.n	800ad0a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ad04:	f04f 33ff 	mov.w	r3, #4294967295
 800ad08:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ad0a:	6879      	ldr	r1, [r7, #4]
 800ad0c:	68b8      	ldr	r0, [r7, #8]
 800ad0e:	f000 fb53 	bl	800b3b8 <prvAddCurrentTaskToDelayedList>
	}
 800ad12:	bf00      	nop
 800ad14:	3718      	adds	r7, #24
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	2000199c 	.word	0x2000199c

0800ad20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b086      	sub	sp, #24
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	68db      	ldr	r3, [r3, #12]
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d10a      	bne.n	800ad4c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ad36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3a:	f383 8811 	msr	BASEPRI, r3
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	f3bf 8f4f 	dsb	sy
 800ad46:	60fb      	str	r3, [r7, #12]
}
 800ad48:	bf00      	nop
 800ad4a:	e7fe      	b.n	800ad4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	3318      	adds	r3, #24
 800ad50:	4618      	mov	r0, r3
 800ad52:	f7fe fba7 	bl	80094a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad56:	4b1e      	ldr	r3, [pc, #120]	; (800add0 <xTaskRemoveFromEventList+0xb0>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d11d      	bne.n	800ad9a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	3304      	adds	r3, #4
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fe fb9e 	bl	80094a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad6c:	4b19      	ldr	r3, [pc, #100]	; (800add4 <xTaskRemoveFromEventList+0xb4>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d903      	bls.n	800ad7c <xTaskRemoveFromEventList+0x5c>
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad78:	4a16      	ldr	r2, [pc, #88]	; (800add4 <xTaskRemoveFromEventList+0xb4>)
 800ad7a:	6013      	str	r3, [r2, #0]
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad80:	4613      	mov	r3, r2
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	4413      	add	r3, r2
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	4a13      	ldr	r2, [pc, #76]	; (800add8 <xTaskRemoveFromEventList+0xb8>)
 800ad8a:	441a      	add	r2, r3
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	3304      	adds	r3, #4
 800ad90:	4619      	mov	r1, r3
 800ad92:	4610      	mov	r0, r2
 800ad94:	f7fe fb29 	bl	80093ea <vListInsertEnd>
 800ad98:	e005      	b.n	800ada6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	3318      	adds	r3, #24
 800ad9e:	4619      	mov	r1, r3
 800ada0:	480e      	ldr	r0, [pc, #56]	; (800addc <xTaskRemoveFromEventList+0xbc>)
 800ada2:	f7fe fb22 	bl	80093ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adaa:	4b0d      	ldr	r3, [pc, #52]	; (800ade0 <xTaskRemoveFromEventList+0xc0>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d905      	bls.n	800adc0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800adb4:	2301      	movs	r3, #1
 800adb6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800adb8:	4b0a      	ldr	r3, [pc, #40]	; (800ade4 <xTaskRemoveFromEventList+0xc4>)
 800adba:	2201      	movs	r2, #1
 800adbc:	601a      	str	r2, [r3, #0]
 800adbe:	e001      	b.n	800adc4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800adc0:	2300      	movs	r3, #0
 800adc2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800adc4:	697b      	ldr	r3, [r7, #20]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3718      	adds	r7, #24
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	20001e98 	.word	0x20001e98
 800add4:	20001e78 	.word	0x20001e78
 800add8:	200019a0 	.word	0x200019a0
 800addc:	20001e30 	.word	0x20001e30
 800ade0:	2000199c 	.word	0x2000199c
 800ade4:	20001e84 	.word	0x20001e84

0800ade8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ade8:	b480      	push	{r7}
 800adea:	b083      	sub	sp, #12
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800adf0:	4b06      	ldr	r3, [pc, #24]	; (800ae0c <vTaskInternalSetTimeOutState+0x24>)
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800adf8:	4b05      	ldr	r3, [pc, #20]	; (800ae10 <vTaskInternalSetTimeOutState+0x28>)
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	605a      	str	r2, [r3, #4]
}
 800ae00:	bf00      	nop
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr
 800ae0c:	20001e88 	.word	0x20001e88
 800ae10:	20001e74 	.word	0x20001e74

0800ae14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b088      	sub	sp, #32
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d10a      	bne.n	800ae3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ae24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae28:	f383 8811 	msr	BASEPRI, r3
 800ae2c:	f3bf 8f6f 	isb	sy
 800ae30:	f3bf 8f4f 	dsb	sy
 800ae34:	613b      	str	r3, [r7, #16]
}
 800ae36:	bf00      	nop
 800ae38:	e7fe      	b.n	800ae38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d10a      	bne.n	800ae56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ae40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae44:	f383 8811 	msr	BASEPRI, r3
 800ae48:	f3bf 8f6f 	isb	sy
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	60fb      	str	r3, [r7, #12]
}
 800ae52:	bf00      	nop
 800ae54:	e7fe      	b.n	800ae54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ae56:	f000 ff7d 	bl	800bd54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ae5a:	4b1d      	ldr	r3, [pc, #116]	; (800aed0 <xTaskCheckForTimeOut+0xbc>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	69ba      	ldr	r2, [r7, #24]
 800ae66:	1ad3      	subs	r3, r2, r3
 800ae68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae72:	d102      	bne.n	800ae7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ae74:	2300      	movs	r3, #0
 800ae76:	61fb      	str	r3, [r7, #28]
 800ae78:	e023      	b.n	800aec2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	4b15      	ldr	r3, [pc, #84]	; (800aed4 <xTaskCheckForTimeOut+0xc0>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d007      	beq.n	800ae96 <xTaskCheckForTimeOut+0x82>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	69ba      	ldr	r2, [r7, #24]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d302      	bcc.n	800ae96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ae90:	2301      	movs	r3, #1
 800ae92:	61fb      	str	r3, [r7, #28]
 800ae94:	e015      	b.n	800aec2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	697a      	ldr	r2, [r7, #20]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d20b      	bcs.n	800aeb8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	1ad2      	subs	r2, r2, r3
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7ff ff9b 	bl	800ade8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	61fb      	str	r3, [r7, #28]
 800aeb6:	e004      	b.n	800aec2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	2200      	movs	r2, #0
 800aebc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aebe:	2301      	movs	r3, #1
 800aec0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aec2:	f000 ff77 	bl	800bdb4 <vPortExitCritical>

	return xReturn;
 800aec6:	69fb      	ldr	r3, [r7, #28]
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3720      	adds	r7, #32
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}
 800aed0:	20001e74 	.word	0x20001e74
 800aed4:	20001e88 	.word	0x20001e88

0800aed8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aed8:	b480      	push	{r7}
 800aeda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aedc:	4b03      	ldr	r3, [pc, #12]	; (800aeec <vTaskMissedYield+0x14>)
 800aede:	2201      	movs	r2, #1
 800aee0:	601a      	str	r2, [r3, #0]
}
 800aee2:	bf00      	nop
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr
 800aeec:	20001e84 	.word	0x20001e84

0800aef0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aef8:	f000 f852 	bl	800afa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aefc:	4b06      	ldr	r3, [pc, #24]	; (800af18 <prvIdleTask+0x28>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2b01      	cmp	r3, #1
 800af02:	d9f9      	bls.n	800aef8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800af04:	4b05      	ldr	r3, [pc, #20]	; (800af1c <prvIdleTask+0x2c>)
 800af06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af0a:	601a      	str	r2, [r3, #0]
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800af14:	e7f0      	b.n	800aef8 <prvIdleTask+0x8>
 800af16:	bf00      	nop
 800af18:	200019a0 	.word	0x200019a0
 800af1c:	e000ed04 	.word	0xe000ed04

0800af20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af26:	2300      	movs	r3, #0
 800af28:	607b      	str	r3, [r7, #4]
 800af2a:	e00c      	b.n	800af46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	4613      	mov	r3, r2
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	4413      	add	r3, r2
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	4a12      	ldr	r2, [pc, #72]	; (800af80 <prvInitialiseTaskLists+0x60>)
 800af38:	4413      	add	r3, r2
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7fe fa28 	bl	8009390 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	3301      	adds	r3, #1
 800af44:	607b      	str	r3, [r7, #4]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2b37      	cmp	r3, #55	; 0x37
 800af4a:	d9ef      	bls.n	800af2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800af4c:	480d      	ldr	r0, [pc, #52]	; (800af84 <prvInitialiseTaskLists+0x64>)
 800af4e:	f7fe fa1f 	bl	8009390 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800af52:	480d      	ldr	r0, [pc, #52]	; (800af88 <prvInitialiseTaskLists+0x68>)
 800af54:	f7fe fa1c 	bl	8009390 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800af58:	480c      	ldr	r0, [pc, #48]	; (800af8c <prvInitialiseTaskLists+0x6c>)
 800af5a:	f7fe fa19 	bl	8009390 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800af5e:	480c      	ldr	r0, [pc, #48]	; (800af90 <prvInitialiseTaskLists+0x70>)
 800af60:	f7fe fa16 	bl	8009390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800af64:	480b      	ldr	r0, [pc, #44]	; (800af94 <prvInitialiseTaskLists+0x74>)
 800af66:	f7fe fa13 	bl	8009390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800af6a:	4b0b      	ldr	r3, [pc, #44]	; (800af98 <prvInitialiseTaskLists+0x78>)
 800af6c:	4a05      	ldr	r2, [pc, #20]	; (800af84 <prvInitialiseTaskLists+0x64>)
 800af6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800af70:	4b0a      	ldr	r3, [pc, #40]	; (800af9c <prvInitialiseTaskLists+0x7c>)
 800af72:	4a05      	ldr	r2, [pc, #20]	; (800af88 <prvInitialiseTaskLists+0x68>)
 800af74:	601a      	str	r2, [r3, #0]
}
 800af76:	bf00      	nop
 800af78:	3708      	adds	r7, #8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	200019a0 	.word	0x200019a0
 800af84:	20001e00 	.word	0x20001e00
 800af88:	20001e14 	.word	0x20001e14
 800af8c:	20001e30 	.word	0x20001e30
 800af90:	20001e44 	.word	0x20001e44
 800af94:	20001e5c 	.word	0x20001e5c
 800af98:	20001e28 	.word	0x20001e28
 800af9c:	20001e2c 	.word	0x20001e2c

0800afa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afa6:	e019      	b.n	800afdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800afa8:	f000 fed4 	bl	800bd54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afac:	4b10      	ldr	r3, [pc, #64]	; (800aff0 <prvCheckTasksWaitingTermination+0x50>)
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	68db      	ldr	r3, [r3, #12]
 800afb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	3304      	adds	r3, #4
 800afb8:	4618      	mov	r0, r3
 800afba:	f7fe fa73 	bl	80094a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800afbe:	4b0d      	ldr	r3, [pc, #52]	; (800aff4 <prvCheckTasksWaitingTermination+0x54>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	3b01      	subs	r3, #1
 800afc4:	4a0b      	ldr	r2, [pc, #44]	; (800aff4 <prvCheckTasksWaitingTermination+0x54>)
 800afc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800afc8:	4b0b      	ldr	r3, [pc, #44]	; (800aff8 <prvCheckTasksWaitingTermination+0x58>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	3b01      	subs	r3, #1
 800afce:	4a0a      	ldr	r2, [pc, #40]	; (800aff8 <prvCheckTasksWaitingTermination+0x58>)
 800afd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800afd2:	f000 feef 	bl	800bdb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 f810 	bl	800affc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afdc:	4b06      	ldr	r3, [pc, #24]	; (800aff8 <prvCheckTasksWaitingTermination+0x58>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d1e1      	bne.n	800afa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800afe4:	bf00      	nop
 800afe6:	bf00      	nop
 800afe8:	3708      	adds	r7, #8
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	20001e44 	.word	0x20001e44
 800aff4:	20001e70 	.word	0x20001e70
 800aff8:	20001e58 	.word	0x20001e58

0800affc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	3354      	adds	r3, #84	; 0x54
 800b008:	4618      	mov	r0, r3
 800b00a:	f001 fc85 	bl	800c918 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b014:	2b00      	cmp	r3, #0
 800b016:	d108      	bne.n	800b02a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b01c:	4618      	mov	r0, r3
 800b01e:	f001 f887 	bl	800c130 <vPortFree>
				vPortFree( pxTCB );
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f001 f884 	bl	800c130 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b028:	e018      	b.n	800b05c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b030:	2b01      	cmp	r3, #1
 800b032:	d103      	bne.n	800b03c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f001 f87b 	bl	800c130 <vPortFree>
	}
 800b03a:	e00f      	b.n	800b05c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b042:	2b02      	cmp	r3, #2
 800b044:	d00a      	beq.n	800b05c <prvDeleteTCB+0x60>
	__asm volatile
 800b046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b04a:	f383 8811 	msr	BASEPRI, r3
 800b04e:	f3bf 8f6f 	isb	sy
 800b052:	f3bf 8f4f 	dsb	sy
 800b056:	60fb      	str	r3, [r7, #12]
}
 800b058:	bf00      	nop
 800b05a:	e7fe      	b.n	800b05a <prvDeleteTCB+0x5e>
	}
 800b05c:	bf00      	nop
 800b05e:	3710      	adds	r7, #16
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b06a:	4b0c      	ldr	r3, [pc, #48]	; (800b09c <prvResetNextTaskUnblockTime+0x38>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d104      	bne.n	800b07e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b074:	4b0a      	ldr	r3, [pc, #40]	; (800b0a0 <prvResetNextTaskUnblockTime+0x3c>)
 800b076:	f04f 32ff 	mov.w	r2, #4294967295
 800b07a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b07c:	e008      	b.n	800b090 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b07e:	4b07      	ldr	r3, [pc, #28]	; (800b09c <prvResetNextTaskUnblockTime+0x38>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	4a04      	ldr	r2, [pc, #16]	; (800b0a0 <prvResetNextTaskUnblockTime+0x3c>)
 800b08e:	6013      	str	r3, [r2, #0]
}
 800b090:	bf00      	nop
 800b092:	370c      	adds	r7, #12
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr
 800b09c:	20001e28 	.word	0x20001e28
 800b0a0:	20001e90 	.word	0x20001e90

0800b0a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b0aa:	4b0b      	ldr	r3, [pc, #44]	; (800b0d8 <xTaskGetSchedulerState+0x34>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d102      	bne.n	800b0b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	607b      	str	r3, [r7, #4]
 800b0b6:	e008      	b.n	800b0ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0b8:	4b08      	ldr	r3, [pc, #32]	; (800b0dc <xTaskGetSchedulerState+0x38>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d102      	bne.n	800b0c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b0c0:	2302      	movs	r3, #2
 800b0c2:	607b      	str	r3, [r7, #4]
 800b0c4:	e001      	b.n	800b0ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b0ca:	687b      	ldr	r3, [r7, #4]
	}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	370c      	adds	r7, #12
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr
 800b0d8:	20001e7c 	.word	0x20001e7c
 800b0dc:	20001e98 	.word	0x20001e98

0800b0e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d051      	beq.n	800b19a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0fa:	4b2a      	ldr	r3, [pc, #168]	; (800b1a4 <xTaskPriorityInherit+0xc4>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b100:	429a      	cmp	r2, r3
 800b102:	d241      	bcs.n	800b188 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	699b      	ldr	r3, [r3, #24]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	db06      	blt.n	800b11a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b10c:	4b25      	ldr	r3, [pc, #148]	; (800b1a4 <xTaskPriorityInherit+0xc4>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b112:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	6959      	ldr	r1, [r3, #20]
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b122:	4613      	mov	r3, r2
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	4413      	add	r3, r2
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	4a1f      	ldr	r2, [pc, #124]	; (800b1a8 <xTaskPriorityInherit+0xc8>)
 800b12c:	4413      	add	r3, r2
 800b12e:	4299      	cmp	r1, r3
 800b130:	d122      	bne.n	800b178 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	3304      	adds	r3, #4
 800b136:	4618      	mov	r0, r3
 800b138:	f7fe f9b4 	bl	80094a4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b13c:	4b19      	ldr	r3, [pc, #100]	; (800b1a4 <xTaskPriorityInherit+0xc4>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b14a:	4b18      	ldr	r3, [pc, #96]	; (800b1ac <xTaskPriorityInherit+0xcc>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	429a      	cmp	r2, r3
 800b150:	d903      	bls.n	800b15a <xTaskPriorityInherit+0x7a>
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b156:	4a15      	ldr	r2, [pc, #84]	; (800b1ac <xTaskPriorityInherit+0xcc>)
 800b158:	6013      	str	r3, [r2, #0]
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b15e:	4613      	mov	r3, r2
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	4413      	add	r3, r2
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	4a10      	ldr	r2, [pc, #64]	; (800b1a8 <xTaskPriorityInherit+0xc8>)
 800b168:	441a      	add	r2, r3
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	3304      	adds	r3, #4
 800b16e:	4619      	mov	r1, r3
 800b170:	4610      	mov	r0, r2
 800b172:	f7fe f93a 	bl	80093ea <vListInsertEnd>
 800b176:	e004      	b.n	800b182 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b178:	4b0a      	ldr	r3, [pc, #40]	; (800b1a4 <xTaskPriorityInherit+0xc4>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b182:	2301      	movs	r3, #1
 800b184:	60fb      	str	r3, [r7, #12]
 800b186:	e008      	b.n	800b19a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b18c:	4b05      	ldr	r3, [pc, #20]	; (800b1a4 <xTaskPriorityInherit+0xc4>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b192:	429a      	cmp	r2, r3
 800b194:	d201      	bcs.n	800b19a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b196:	2301      	movs	r3, #1
 800b198:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b19a:	68fb      	ldr	r3, [r7, #12]
	}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3710      	adds	r7, #16
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	2000199c 	.word	0x2000199c
 800b1a8:	200019a0 	.word	0x200019a0
 800b1ac:	20001e78 	.word	0x20001e78

0800b1b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b086      	sub	sp, #24
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d056      	beq.n	800b274 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b1c6:	4b2e      	ldr	r3, [pc, #184]	; (800b280 <xTaskPriorityDisinherit+0xd0>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	693a      	ldr	r2, [r7, #16]
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d00a      	beq.n	800b1e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d4:	f383 8811 	msr	BASEPRI, r3
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	60fb      	str	r3, [r7, #12]
}
 800b1e2:	bf00      	nop
 800b1e4:	e7fe      	b.n	800b1e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d10a      	bne.n	800b204 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f2:	f383 8811 	msr	BASEPRI, r3
 800b1f6:	f3bf 8f6f 	isb	sy
 800b1fa:	f3bf 8f4f 	dsb	sy
 800b1fe:	60bb      	str	r3, [r7, #8]
}
 800b200:	bf00      	nop
 800b202:	e7fe      	b.n	800b202 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b208:	1e5a      	subs	r2, r3, #1
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b216:	429a      	cmp	r2, r3
 800b218:	d02c      	beq.n	800b274 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d128      	bne.n	800b274 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	3304      	adds	r3, #4
 800b226:	4618      	mov	r0, r3
 800b228:	f7fe f93c 	bl	80094a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b238:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b244:	4b0f      	ldr	r3, [pc, #60]	; (800b284 <xTaskPriorityDisinherit+0xd4>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d903      	bls.n	800b254 <xTaskPriorityDisinherit+0xa4>
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b250:	4a0c      	ldr	r2, [pc, #48]	; (800b284 <xTaskPriorityDisinherit+0xd4>)
 800b252:	6013      	str	r3, [r2, #0]
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b258:	4613      	mov	r3, r2
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	4413      	add	r3, r2
 800b25e:	009b      	lsls	r3, r3, #2
 800b260:	4a09      	ldr	r2, [pc, #36]	; (800b288 <xTaskPriorityDisinherit+0xd8>)
 800b262:	441a      	add	r2, r3
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	3304      	adds	r3, #4
 800b268:	4619      	mov	r1, r3
 800b26a:	4610      	mov	r0, r2
 800b26c:	f7fe f8bd 	bl	80093ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b270:	2301      	movs	r3, #1
 800b272:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b274:	697b      	ldr	r3, [r7, #20]
	}
 800b276:	4618      	mov	r0, r3
 800b278:	3718      	adds	r7, #24
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	2000199c 	.word	0x2000199c
 800b284:	20001e78 	.word	0x20001e78
 800b288:	200019a0 	.word	0x200019a0

0800b28c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b088      	sub	sp, #32
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b29a:	2301      	movs	r3, #1
 800b29c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d06a      	beq.n	800b37a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b2a4:	69bb      	ldr	r3, [r7, #24]
 800b2a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d10a      	bne.n	800b2c2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b0:	f383 8811 	msr	BASEPRI, r3
 800b2b4:	f3bf 8f6f 	isb	sy
 800b2b8:	f3bf 8f4f 	dsb	sy
 800b2bc:	60fb      	str	r3, [r7, #12]
}
 800b2be:	bf00      	nop
 800b2c0:	e7fe      	b.n	800b2c0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2c6:	683a      	ldr	r2, [r7, #0]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d902      	bls.n	800b2d2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	61fb      	str	r3, [r7, #28]
 800b2d0:	e002      	b.n	800b2d8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2d6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b2d8:	69bb      	ldr	r3, [r7, #24]
 800b2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2dc:	69fa      	ldr	r2, [r7, #28]
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d04b      	beq.n	800b37a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2e6:	697a      	ldr	r2, [r7, #20]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d146      	bne.n	800b37a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b2ec:	4b25      	ldr	r3, [pc, #148]	; (800b384 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	69ba      	ldr	r2, [r7, #24]
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d10a      	bne.n	800b30c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fa:	f383 8811 	msr	BASEPRI, r3
 800b2fe:	f3bf 8f6f 	isb	sy
 800b302:	f3bf 8f4f 	dsb	sy
 800b306:	60bb      	str	r3, [r7, #8]
}
 800b308:	bf00      	nop
 800b30a:	e7fe      	b.n	800b30a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b310:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b312:	69bb      	ldr	r3, [r7, #24]
 800b314:	69fa      	ldr	r2, [r7, #28]
 800b316:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	699b      	ldr	r3, [r3, #24]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	db04      	blt.n	800b32a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b326:	69bb      	ldr	r3, [r7, #24]
 800b328:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	6959      	ldr	r1, [r3, #20]
 800b32e:	693a      	ldr	r2, [r7, #16]
 800b330:	4613      	mov	r3, r2
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	4413      	add	r3, r2
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	4a13      	ldr	r2, [pc, #76]	; (800b388 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b33a:	4413      	add	r3, r2
 800b33c:	4299      	cmp	r1, r3
 800b33e:	d11c      	bne.n	800b37a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b340:	69bb      	ldr	r3, [r7, #24]
 800b342:	3304      	adds	r3, #4
 800b344:	4618      	mov	r0, r3
 800b346:	f7fe f8ad 	bl	80094a4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b34e:	4b0f      	ldr	r3, [pc, #60]	; (800b38c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	429a      	cmp	r2, r3
 800b354:	d903      	bls.n	800b35e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b35a:	4a0c      	ldr	r2, [pc, #48]	; (800b38c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b35c:	6013      	str	r3, [r2, #0]
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b362:	4613      	mov	r3, r2
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	4413      	add	r3, r2
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	4a07      	ldr	r2, [pc, #28]	; (800b388 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b36c:	441a      	add	r2, r3
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	3304      	adds	r3, #4
 800b372:	4619      	mov	r1, r3
 800b374:	4610      	mov	r0, r2
 800b376:	f7fe f838 	bl	80093ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b37a:	bf00      	nop
 800b37c:	3720      	adds	r7, #32
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	2000199c 	.word	0x2000199c
 800b388:	200019a0 	.word	0x200019a0
 800b38c:	20001e78 	.word	0x20001e78

0800b390 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b390:	b480      	push	{r7}
 800b392:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b394:	4b07      	ldr	r3, [pc, #28]	; (800b3b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d004      	beq.n	800b3a6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b39c:	4b05      	ldr	r3, [pc, #20]	; (800b3b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b3a2:	3201      	adds	r2, #1
 800b3a4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b3a6:	4b03      	ldr	r3, [pc, #12]	; (800b3b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
	}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr
 800b3b4:	2000199c 	.word	0x2000199c

0800b3b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b3c2:	4b21      	ldr	r3, [pc, #132]	; (800b448 <prvAddCurrentTaskToDelayedList+0x90>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3c8:	4b20      	ldr	r3, [pc, #128]	; (800b44c <prvAddCurrentTaskToDelayedList+0x94>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	3304      	adds	r3, #4
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7fe f868 	bl	80094a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3da:	d10a      	bne.n	800b3f2 <prvAddCurrentTaskToDelayedList+0x3a>
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d007      	beq.n	800b3f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3e2:	4b1a      	ldr	r3, [pc, #104]	; (800b44c <prvAddCurrentTaskToDelayedList+0x94>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	3304      	adds	r3, #4
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	4819      	ldr	r0, [pc, #100]	; (800b450 <prvAddCurrentTaskToDelayedList+0x98>)
 800b3ec:	f7fd fffd 	bl	80093ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b3f0:	e026      	b.n	800b440 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b3f2:	68fa      	ldr	r2, [r7, #12]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	4413      	add	r3, r2
 800b3f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b3fa:	4b14      	ldr	r3, [pc, #80]	; (800b44c <prvAddCurrentTaskToDelayedList+0x94>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	68ba      	ldr	r2, [r7, #8]
 800b400:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b402:	68ba      	ldr	r2, [r7, #8]
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	429a      	cmp	r2, r3
 800b408:	d209      	bcs.n	800b41e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b40a:	4b12      	ldr	r3, [pc, #72]	; (800b454 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	4b0f      	ldr	r3, [pc, #60]	; (800b44c <prvAddCurrentTaskToDelayedList+0x94>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	3304      	adds	r3, #4
 800b414:	4619      	mov	r1, r3
 800b416:	4610      	mov	r0, r2
 800b418:	f7fe f80b 	bl	8009432 <vListInsert>
}
 800b41c:	e010      	b.n	800b440 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b41e:	4b0e      	ldr	r3, [pc, #56]	; (800b458 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	4b0a      	ldr	r3, [pc, #40]	; (800b44c <prvAddCurrentTaskToDelayedList+0x94>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	3304      	adds	r3, #4
 800b428:	4619      	mov	r1, r3
 800b42a:	4610      	mov	r0, r2
 800b42c:	f7fe f801 	bl	8009432 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b430:	4b0a      	ldr	r3, [pc, #40]	; (800b45c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	68ba      	ldr	r2, [r7, #8]
 800b436:	429a      	cmp	r2, r3
 800b438:	d202      	bcs.n	800b440 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b43a:	4a08      	ldr	r2, [pc, #32]	; (800b45c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	6013      	str	r3, [r2, #0]
}
 800b440:	bf00      	nop
 800b442:	3710      	adds	r7, #16
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	20001e74 	.word	0x20001e74
 800b44c:	2000199c 	.word	0x2000199c
 800b450:	20001e5c 	.word	0x20001e5c
 800b454:	20001e2c 	.word	0x20001e2c
 800b458:	20001e28 	.word	0x20001e28
 800b45c:	20001e90 	.word	0x20001e90

0800b460 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b08a      	sub	sp, #40	; 0x28
 800b464:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b466:	2300      	movs	r3, #0
 800b468:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b46a:	f000 fb07 	bl	800ba7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b46e:	4b1c      	ldr	r3, [pc, #112]	; (800b4e0 <xTimerCreateTimerTask+0x80>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d021      	beq.n	800b4ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b476:	2300      	movs	r3, #0
 800b478:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b47a:	2300      	movs	r3, #0
 800b47c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b47e:	1d3a      	adds	r2, r7, #4
 800b480:	f107 0108 	add.w	r1, r7, #8
 800b484:	f107 030c 	add.w	r3, r7, #12
 800b488:	4618      	mov	r0, r3
 800b48a:	f7fd ff67 	bl	800935c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b48e:	6879      	ldr	r1, [r7, #4]
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	68fa      	ldr	r2, [r7, #12]
 800b494:	9202      	str	r2, [sp, #8]
 800b496:	9301      	str	r3, [sp, #4]
 800b498:	2302      	movs	r3, #2
 800b49a:	9300      	str	r3, [sp, #0]
 800b49c:	2300      	movs	r3, #0
 800b49e:	460a      	mov	r2, r1
 800b4a0:	4910      	ldr	r1, [pc, #64]	; (800b4e4 <xTimerCreateTimerTask+0x84>)
 800b4a2:	4811      	ldr	r0, [pc, #68]	; (800b4e8 <xTimerCreateTimerTask+0x88>)
 800b4a4:	f7fe ffb6 	bl	800a414 <xTaskCreateStatic>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	4a10      	ldr	r2, [pc, #64]	; (800b4ec <xTimerCreateTimerTask+0x8c>)
 800b4ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b4ae:	4b0f      	ldr	r3, [pc, #60]	; (800b4ec <xTimerCreateTimerTask+0x8c>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d001      	beq.n	800b4ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d10a      	bne.n	800b4d6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c4:	f383 8811 	msr	BASEPRI, r3
 800b4c8:	f3bf 8f6f 	isb	sy
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	613b      	str	r3, [r7, #16]
}
 800b4d2:	bf00      	nop
 800b4d4:	e7fe      	b.n	800b4d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b4d6:	697b      	ldr	r3, [r7, #20]
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3718      	adds	r7, #24
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}
 800b4e0:	20001ecc 	.word	0x20001ecc
 800b4e4:	0800e3cc 	.word	0x0800e3cc
 800b4e8:	0800b625 	.word	0x0800b625
 800b4ec:	20001ed0 	.word	0x20001ed0

0800b4f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b08a      	sub	sp, #40	; 0x28
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	60b9      	str	r1, [r7, #8]
 800b4fa:	607a      	str	r2, [r7, #4]
 800b4fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b4fe:	2300      	movs	r3, #0
 800b500:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d10a      	bne.n	800b51e <xTimerGenericCommand+0x2e>
	__asm volatile
 800b508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b50c:	f383 8811 	msr	BASEPRI, r3
 800b510:	f3bf 8f6f 	isb	sy
 800b514:	f3bf 8f4f 	dsb	sy
 800b518:	623b      	str	r3, [r7, #32]
}
 800b51a:	bf00      	nop
 800b51c:	e7fe      	b.n	800b51c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b51e:	4b1a      	ldr	r3, [pc, #104]	; (800b588 <xTimerGenericCommand+0x98>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d02a      	beq.n	800b57c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	2b05      	cmp	r3, #5
 800b536:	dc18      	bgt.n	800b56a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b538:	f7ff fdb4 	bl	800b0a4 <xTaskGetSchedulerState>
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b02      	cmp	r3, #2
 800b540:	d109      	bne.n	800b556 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b542:	4b11      	ldr	r3, [pc, #68]	; (800b588 <xTimerGenericCommand+0x98>)
 800b544:	6818      	ldr	r0, [r3, #0]
 800b546:	f107 0110 	add.w	r1, r7, #16
 800b54a:	2300      	movs	r3, #0
 800b54c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b54e:	f7fe f97b 	bl	8009848 <xQueueGenericSend>
 800b552:	6278      	str	r0, [r7, #36]	; 0x24
 800b554:	e012      	b.n	800b57c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b556:	4b0c      	ldr	r3, [pc, #48]	; (800b588 <xTimerGenericCommand+0x98>)
 800b558:	6818      	ldr	r0, [r3, #0]
 800b55a:	f107 0110 	add.w	r1, r7, #16
 800b55e:	2300      	movs	r3, #0
 800b560:	2200      	movs	r2, #0
 800b562:	f7fe f971 	bl	8009848 <xQueueGenericSend>
 800b566:	6278      	str	r0, [r7, #36]	; 0x24
 800b568:	e008      	b.n	800b57c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b56a:	4b07      	ldr	r3, [pc, #28]	; (800b588 <xTimerGenericCommand+0x98>)
 800b56c:	6818      	ldr	r0, [r3, #0]
 800b56e:	f107 0110 	add.w	r1, r7, #16
 800b572:	2300      	movs	r3, #0
 800b574:	683a      	ldr	r2, [r7, #0]
 800b576:	f7fe fa65 	bl	8009a44 <xQueueGenericSendFromISR>
 800b57a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3728      	adds	r7, #40	; 0x28
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	20001ecc 	.word	0x20001ecc

0800b58c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b088      	sub	sp, #32
 800b590:	af02      	add	r7, sp, #8
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b596:	4b22      	ldr	r3, [pc, #136]	; (800b620 <prvProcessExpiredTimer+0x94>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	68db      	ldr	r3, [r3, #12]
 800b59c:	68db      	ldr	r3, [r3, #12]
 800b59e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	3304      	adds	r3, #4
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7fd ff7d 	bl	80094a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5b0:	f003 0304 	and.w	r3, r3, #4
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d022      	beq.n	800b5fe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	699a      	ldr	r2, [r3, #24]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	18d1      	adds	r1, r2, r3
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	683a      	ldr	r2, [r7, #0]
 800b5c4:	6978      	ldr	r0, [r7, #20]
 800b5c6:	f000 f8d1 	bl	800b76c <prvInsertTimerInActiveList>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d01f      	beq.n	800b610 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	9300      	str	r3, [sp, #0]
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	2100      	movs	r1, #0
 800b5da:	6978      	ldr	r0, [r7, #20]
 800b5dc:	f7ff ff88 	bl	800b4f0 <xTimerGenericCommand>
 800b5e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d113      	bne.n	800b610 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ec:	f383 8811 	msr	BASEPRI, r3
 800b5f0:	f3bf 8f6f 	isb	sy
 800b5f4:	f3bf 8f4f 	dsb	sy
 800b5f8:	60fb      	str	r3, [r7, #12]
}
 800b5fa:	bf00      	nop
 800b5fc:	e7fe      	b.n	800b5fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b604:	f023 0301 	bic.w	r3, r3, #1
 800b608:	b2da      	uxtb	r2, r3
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	6a1b      	ldr	r3, [r3, #32]
 800b614:	6978      	ldr	r0, [r7, #20]
 800b616:	4798      	blx	r3
}
 800b618:	bf00      	nop
 800b61a:	3718      	adds	r7, #24
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	20001ec4 	.word	0x20001ec4

0800b624 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b62c:	f107 0308 	add.w	r3, r7, #8
 800b630:	4618      	mov	r0, r3
 800b632:	f000 f857 	bl	800b6e4 <prvGetNextExpireTime>
 800b636:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	4619      	mov	r1, r3
 800b63c:	68f8      	ldr	r0, [r7, #12]
 800b63e:	f000 f803 	bl	800b648 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b642:	f000 f8d5 	bl	800b7f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b646:	e7f1      	b.n	800b62c <prvTimerTask+0x8>

0800b648 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b652:	f7ff f93b 	bl	800a8cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b656:	f107 0308 	add.w	r3, r7, #8
 800b65a:	4618      	mov	r0, r3
 800b65c:	f000 f866 	bl	800b72c <prvSampleTimeNow>
 800b660:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d130      	bne.n	800b6ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d10a      	bne.n	800b684 <prvProcessTimerOrBlockTask+0x3c>
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	429a      	cmp	r2, r3
 800b674:	d806      	bhi.n	800b684 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b676:	f7ff f937 	bl	800a8e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b67a:	68f9      	ldr	r1, [r7, #12]
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f7ff ff85 	bl	800b58c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b682:	e024      	b.n	800b6ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d008      	beq.n	800b69c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b68a:	4b13      	ldr	r3, [pc, #76]	; (800b6d8 <prvProcessTimerOrBlockTask+0x90>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d101      	bne.n	800b698 <prvProcessTimerOrBlockTask+0x50>
 800b694:	2301      	movs	r3, #1
 800b696:	e000      	b.n	800b69a <prvProcessTimerOrBlockTask+0x52>
 800b698:	2300      	movs	r3, #0
 800b69a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b69c:	4b0f      	ldr	r3, [pc, #60]	; (800b6dc <prvProcessTimerOrBlockTask+0x94>)
 800b69e:	6818      	ldr	r0, [r3, #0]
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	1ad3      	subs	r3, r2, r3
 800b6a6:	683a      	ldr	r2, [r7, #0]
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	f7fe fe7f 	bl	800a3ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b6ae:	f7ff f91b 	bl	800a8e8 <xTaskResumeAll>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d10a      	bne.n	800b6ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b6b8:	4b09      	ldr	r3, [pc, #36]	; (800b6e0 <prvProcessTimerOrBlockTask+0x98>)
 800b6ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6be:	601a      	str	r2, [r3, #0]
 800b6c0:	f3bf 8f4f 	dsb	sy
 800b6c4:	f3bf 8f6f 	isb	sy
}
 800b6c8:	e001      	b.n	800b6ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b6ca:	f7ff f90d 	bl	800a8e8 <xTaskResumeAll>
}
 800b6ce:	bf00      	nop
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	20001ec8 	.word	0x20001ec8
 800b6dc:	20001ecc 	.word	0x20001ecc
 800b6e0:	e000ed04 	.word	0xe000ed04

0800b6e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b085      	sub	sp, #20
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b6ec:	4b0e      	ldr	r3, [pc, #56]	; (800b728 <prvGetNextExpireTime+0x44>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d101      	bne.n	800b6fa <prvGetNextExpireTime+0x16>
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	e000      	b.n	800b6fc <prvGetNextExpireTime+0x18>
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d105      	bne.n	800b714 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b708:	4b07      	ldr	r3, [pc, #28]	; (800b728 <prvGetNextExpireTime+0x44>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	60fb      	str	r3, [r7, #12]
 800b712:	e001      	b.n	800b718 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b714:	2300      	movs	r3, #0
 800b716:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b718:	68fb      	ldr	r3, [r7, #12]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3714      	adds	r7, #20
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr
 800b726:	bf00      	nop
 800b728:	20001ec4 	.word	0x20001ec4

0800b72c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b734:	f7ff f976 	bl	800aa24 <xTaskGetTickCount>
 800b738:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b73a:	4b0b      	ldr	r3, [pc, #44]	; (800b768 <prvSampleTimeNow+0x3c>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	429a      	cmp	r2, r3
 800b742:	d205      	bcs.n	800b750 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b744:	f000 f936 	bl	800b9b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2201      	movs	r2, #1
 800b74c:	601a      	str	r2, [r3, #0]
 800b74e:	e002      	b.n	800b756 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2200      	movs	r2, #0
 800b754:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b756:	4a04      	ldr	r2, [pc, #16]	; (800b768 <prvSampleTimeNow+0x3c>)
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b75c:	68fb      	ldr	r3, [r7, #12]
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	20001ed4 	.word	0x20001ed4

0800b76c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b086      	sub	sp, #24
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	607a      	str	r2, [r7, #4]
 800b778:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b77a:	2300      	movs	r3, #0
 800b77c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	68ba      	ldr	r2, [r7, #8]
 800b782:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	68fa      	ldr	r2, [r7, #12]
 800b788:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b78a:	68ba      	ldr	r2, [r7, #8]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d812      	bhi.n	800b7b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	1ad2      	subs	r2, r2, r3
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	699b      	ldr	r3, [r3, #24]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d302      	bcc.n	800b7a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	617b      	str	r3, [r7, #20]
 800b7a4:	e01b      	b.n	800b7de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b7a6:	4b10      	ldr	r3, [pc, #64]	; (800b7e8 <prvInsertTimerInActiveList+0x7c>)
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	3304      	adds	r3, #4
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	4610      	mov	r0, r2
 800b7b2:	f7fd fe3e 	bl	8009432 <vListInsert>
 800b7b6:	e012      	b.n	800b7de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d206      	bcs.n	800b7ce <prvInsertTimerInActiveList+0x62>
 800b7c0:	68ba      	ldr	r2, [r7, #8]
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d302      	bcc.n	800b7ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	617b      	str	r3, [r7, #20]
 800b7cc:	e007      	b.n	800b7de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b7ce:	4b07      	ldr	r3, [pc, #28]	; (800b7ec <prvInsertTimerInActiveList+0x80>)
 800b7d0:	681a      	ldr	r2, [r3, #0]
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	3304      	adds	r3, #4
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	4610      	mov	r0, r2
 800b7da:	f7fd fe2a 	bl	8009432 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b7de:	697b      	ldr	r3, [r7, #20]
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3718      	adds	r7, #24
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	20001ec8 	.word	0x20001ec8
 800b7ec:	20001ec4 	.word	0x20001ec4

0800b7f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b08e      	sub	sp, #56	; 0x38
 800b7f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b7f6:	e0ca      	b.n	800b98e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	da18      	bge.n	800b830 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b7fe:	1d3b      	adds	r3, r7, #4
 800b800:	3304      	adds	r3, #4
 800b802:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b806:	2b00      	cmp	r3, #0
 800b808:	d10a      	bne.n	800b820 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80e:	f383 8811 	msr	BASEPRI, r3
 800b812:	f3bf 8f6f 	isb	sy
 800b816:	f3bf 8f4f 	dsb	sy
 800b81a:	61fb      	str	r3, [r7, #28]
}
 800b81c:	bf00      	nop
 800b81e:	e7fe      	b.n	800b81e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b826:	6850      	ldr	r0, [r2, #4]
 800b828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b82a:	6892      	ldr	r2, [r2, #8]
 800b82c:	4611      	mov	r1, r2
 800b82e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2b00      	cmp	r3, #0
 800b834:	f2c0 80aa 	blt.w	800b98c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83e:	695b      	ldr	r3, [r3, #20]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d004      	beq.n	800b84e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b846:	3304      	adds	r3, #4
 800b848:	4618      	mov	r0, r3
 800b84a:	f7fd fe2b 	bl	80094a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b84e:	463b      	mov	r3, r7
 800b850:	4618      	mov	r0, r3
 800b852:	f7ff ff6b 	bl	800b72c <prvSampleTimeNow>
 800b856:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2b09      	cmp	r3, #9
 800b85c:	f200 8097 	bhi.w	800b98e <prvProcessReceivedCommands+0x19e>
 800b860:	a201      	add	r2, pc, #4	; (adr r2, 800b868 <prvProcessReceivedCommands+0x78>)
 800b862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b866:	bf00      	nop
 800b868:	0800b891 	.word	0x0800b891
 800b86c:	0800b891 	.word	0x0800b891
 800b870:	0800b891 	.word	0x0800b891
 800b874:	0800b905 	.word	0x0800b905
 800b878:	0800b919 	.word	0x0800b919
 800b87c:	0800b963 	.word	0x0800b963
 800b880:	0800b891 	.word	0x0800b891
 800b884:	0800b891 	.word	0x0800b891
 800b888:	0800b905 	.word	0x0800b905
 800b88c:	0800b919 	.word	0x0800b919
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b892:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b896:	f043 0301 	orr.w	r3, r3, #1
 800b89a:	b2da      	uxtb	r2, r3
 800b89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b8a2:	68ba      	ldr	r2, [r7, #8]
 800b8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a6:	699b      	ldr	r3, [r3, #24]
 800b8a8:	18d1      	adds	r1, r2, r3
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8b0:	f7ff ff5c 	bl	800b76c <prvInsertTimerInActiveList>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d069      	beq.n	800b98e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8bc:	6a1b      	ldr	r3, [r3, #32]
 800b8be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8c8:	f003 0304 	and.w	r3, r3, #4
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d05e      	beq.n	800b98e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b8d0:	68ba      	ldr	r2, [r7, #8]
 800b8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d4:	699b      	ldr	r3, [r3, #24]
 800b8d6:	441a      	add	r2, r3
 800b8d8:	2300      	movs	r3, #0
 800b8da:	9300      	str	r3, [sp, #0]
 800b8dc:	2300      	movs	r3, #0
 800b8de:	2100      	movs	r1, #0
 800b8e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8e2:	f7ff fe05 	bl	800b4f0 <xTimerGenericCommand>
 800b8e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b8e8:	6a3b      	ldr	r3, [r7, #32]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d14f      	bne.n	800b98e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f2:	f383 8811 	msr	BASEPRI, r3
 800b8f6:	f3bf 8f6f 	isb	sy
 800b8fa:	f3bf 8f4f 	dsb	sy
 800b8fe:	61bb      	str	r3, [r7, #24]
}
 800b900:	bf00      	nop
 800b902:	e7fe      	b.n	800b902 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b906:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b90a:	f023 0301 	bic.w	r3, r3, #1
 800b90e:	b2da      	uxtb	r2, r3
 800b910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b912:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b916:	e03a      	b.n	800b98e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b91e:	f043 0301 	orr.w	r3, r3, #1
 800b922:	b2da      	uxtb	r2, r3
 800b924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b926:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b92a:	68ba      	ldr	r2, [r7, #8]
 800b92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b932:	699b      	ldr	r3, [r3, #24]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d10a      	bne.n	800b94e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93c:	f383 8811 	msr	BASEPRI, r3
 800b940:	f3bf 8f6f 	isb	sy
 800b944:	f3bf 8f4f 	dsb	sy
 800b948:	617b      	str	r3, [r7, #20]
}
 800b94a:	bf00      	nop
 800b94c:	e7fe      	b.n	800b94c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b950:	699a      	ldr	r2, [r3, #24]
 800b952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b954:	18d1      	adds	r1, r2, r3
 800b956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b95a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b95c:	f7ff ff06 	bl	800b76c <prvInsertTimerInActiveList>
					break;
 800b960:	e015      	b.n	800b98e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b964:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b968:	f003 0302 	and.w	r3, r3, #2
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d103      	bne.n	800b978 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b972:	f000 fbdd 	bl	800c130 <vPortFree>
 800b976:	e00a      	b.n	800b98e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b97e:	f023 0301 	bic.w	r3, r3, #1
 800b982:	b2da      	uxtb	r2, r3
 800b984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b986:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b98a:	e000      	b.n	800b98e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b98c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b98e:	4b08      	ldr	r3, [pc, #32]	; (800b9b0 <prvProcessReceivedCommands+0x1c0>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	1d39      	adds	r1, r7, #4
 800b994:	2200      	movs	r2, #0
 800b996:	4618      	mov	r0, r3
 800b998:	f7fe f97c 	bl	8009c94 <xQueueReceive>
 800b99c:	4603      	mov	r3, r0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	f47f af2a 	bne.w	800b7f8 <prvProcessReceivedCommands+0x8>
	}
}
 800b9a4:	bf00      	nop
 800b9a6:	bf00      	nop
 800b9a8:	3730      	adds	r7, #48	; 0x30
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	20001ecc 	.word	0x20001ecc

0800b9b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b088      	sub	sp, #32
 800b9b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b9ba:	e048      	b.n	800ba4e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b9bc:	4b2d      	ldr	r3, [pc, #180]	; (800ba74 <prvSwitchTimerLists+0xc0>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	68db      	ldr	r3, [r3, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9c6:	4b2b      	ldr	r3, [pc, #172]	; (800ba74 <prvSwitchTimerLists+0xc0>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	68db      	ldr	r3, [r3, #12]
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	3304      	adds	r3, #4
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7fd fd65 	bl	80094a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	6a1b      	ldr	r3, [r3, #32]
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9e8:	f003 0304 	and.w	r3, r3, #4
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d02e      	beq.n	800ba4e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	699b      	ldr	r3, [r3, #24]
 800b9f4:	693a      	ldr	r2, [r7, #16]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b9fa:	68ba      	ldr	r2, [r7, #8]
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d90e      	bls.n	800ba20 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	68ba      	ldr	r2, [r7, #8]
 800ba06:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	68fa      	ldr	r2, [r7, #12]
 800ba0c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba0e:	4b19      	ldr	r3, [pc, #100]	; (800ba74 <prvSwitchTimerLists+0xc0>)
 800ba10:	681a      	ldr	r2, [r3, #0]
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	3304      	adds	r3, #4
 800ba16:	4619      	mov	r1, r3
 800ba18:	4610      	mov	r0, r2
 800ba1a:	f7fd fd0a 	bl	8009432 <vListInsert>
 800ba1e:	e016      	b.n	800ba4e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba20:	2300      	movs	r3, #0
 800ba22:	9300      	str	r3, [sp, #0]
 800ba24:	2300      	movs	r3, #0
 800ba26:	693a      	ldr	r2, [r7, #16]
 800ba28:	2100      	movs	r1, #0
 800ba2a:	68f8      	ldr	r0, [r7, #12]
 800ba2c:	f7ff fd60 	bl	800b4f0 <xTimerGenericCommand>
 800ba30:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d10a      	bne.n	800ba4e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ba38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3c:	f383 8811 	msr	BASEPRI, r3
 800ba40:	f3bf 8f6f 	isb	sy
 800ba44:	f3bf 8f4f 	dsb	sy
 800ba48:	603b      	str	r3, [r7, #0]
}
 800ba4a:	bf00      	nop
 800ba4c:	e7fe      	b.n	800ba4c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba4e:	4b09      	ldr	r3, [pc, #36]	; (800ba74 <prvSwitchTimerLists+0xc0>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d1b1      	bne.n	800b9bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ba58:	4b06      	ldr	r3, [pc, #24]	; (800ba74 <prvSwitchTimerLists+0xc0>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ba5e:	4b06      	ldr	r3, [pc, #24]	; (800ba78 <prvSwitchTimerLists+0xc4>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4a04      	ldr	r2, [pc, #16]	; (800ba74 <prvSwitchTimerLists+0xc0>)
 800ba64:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ba66:	4a04      	ldr	r2, [pc, #16]	; (800ba78 <prvSwitchTimerLists+0xc4>)
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	6013      	str	r3, [r2, #0]
}
 800ba6c:	bf00      	nop
 800ba6e:	3718      	adds	r7, #24
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	20001ec4 	.word	0x20001ec4
 800ba78:	20001ec8 	.word	0x20001ec8

0800ba7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ba82:	f000 f967 	bl	800bd54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ba86:	4b15      	ldr	r3, [pc, #84]	; (800badc <prvCheckForValidListAndQueue+0x60>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d120      	bne.n	800bad0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ba8e:	4814      	ldr	r0, [pc, #80]	; (800bae0 <prvCheckForValidListAndQueue+0x64>)
 800ba90:	f7fd fc7e 	bl	8009390 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ba94:	4813      	ldr	r0, [pc, #76]	; (800bae4 <prvCheckForValidListAndQueue+0x68>)
 800ba96:	f7fd fc7b 	bl	8009390 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ba9a:	4b13      	ldr	r3, [pc, #76]	; (800bae8 <prvCheckForValidListAndQueue+0x6c>)
 800ba9c:	4a10      	ldr	r2, [pc, #64]	; (800bae0 <prvCheckForValidListAndQueue+0x64>)
 800ba9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800baa0:	4b12      	ldr	r3, [pc, #72]	; (800baec <prvCheckForValidListAndQueue+0x70>)
 800baa2:	4a10      	ldr	r2, [pc, #64]	; (800bae4 <prvCheckForValidListAndQueue+0x68>)
 800baa4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800baa6:	2300      	movs	r3, #0
 800baa8:	9300      	str	r3, [sp, #0]
 800baaa:	4b11      	ldr	r3, [pc, #68]	; (800baf0 <prvCheckForValidListAndQueue+0x74>)
 800baac:	4a11      	ldr	r2, [pc, #68]	; (800baf4 <prvCheckForValidListAndQueue+0x78>)
 800baae:	2110      	movs	r1, #16
 800bab0:	200a      	movs	r0, #10
 800bab2:	f7fd fd89 	bl	80095c8 <xQueueGenericCreateStatic>
 800bab6:	4603      	mov	r3, r0
 800bab8:	4a08      	ldr	r2, [pc, #32]	; (800badc <prvCheckForValidListAndQueue+0x60>)
 800baba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800babc:	4b07      	ldr	r3, [pc, #28]	; (800badc <prvCheckForValidListAndQueue+0x60>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d005      	beq.n	800bad0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bac4:	4b05      	ldr	r3, [pc, #20]	; (800badc <prvCheckForValidListAndQueue+0x60>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	490b      	ldr	r1, [pc, #44]	; (800baf8 <prvCheckForValidListAndQueue+0x7c>)
 800baca:	4618      	mov	r0, r3
 800bacc:	f7fe fc1a 	bl	800a304 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bad0:	f000 f970 	bl	800bdb4 <vPortExitCritical>
}
 800bad4:	bf00      	nop
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	bf00      	nop
 800badc:	20001ecc 	.word	0x20001ecc
 800bae0:	20001e9c 	.word	0x20001e9c
 800bae4:	20001eb0 	.word	0x20001eb0
 800bae8:	20001ec4 	.word	0x20001ec4
 800baec:	20001ec8 	.word	0x20001ec8
 800baf0:	20001f78 	.word	0x20001f78
 800baf4:	20001ed8 	.word	0x20001ed8
 800baf8:	0800e3d4 	.word	0x0800e3d4

0800bafc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bafc:	b480      	push	{r7}
 800bafe:	b085      	sub	sp, #20
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	60f8      	str	r0, [r7, #12]
 800bb04:	60b9      	str	r1, [r7, #8]
 800bb06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	3b04      	subs	r3, #4
 800bb0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bb14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	3b04      	subs	r3, #4
 800bb1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	f023 0201 	bic.w	r2, r3, #1
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	3b04      	subs	r3, #4
 800bb2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bb2c:	4a0c      	ldr	r2, [pc, #48]	; (800bb60 <pxPortInitialiseStack+0x64>)
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	3b14      	subs	r3, #20
 800bb36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	3b04      	subs	r3, #4
 800bb42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f06f 0202 	mvn.w	r2, #2
 800bb4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	3b20      	subs	r3, #32
 800bb50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bb52:	68fb      	ldr	r3, [r7, #12]
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3714      	adds	r7, #20
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr
 800bb60:	0800bb65 	.word	0x0800bb65

0800bb64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bb64:	b480      	push	{r7}
 800bb66:	b085      	sub	sp, #20
 800bb68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bb6e:	4b12      	ldr	r3, [pc, #72]	; (800bbb8 <prvTaskExitError+0x54>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb76:	d00a      	beq.n	800bb8e <prvTaskExitError+0x2a>
	__asm volatile
 800bb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7c:	f383 8811 	msr	BASEPRI, r3
 800bb80:	f3bf 8f6f 	isb	sy
 800bb84:	f3bf 8f4f 	dsb	sy
 800bb88:	60fb      	str	r3, [r7, #12]
}
 800bb8a:	bf00      	nop
 800bb8c:	e7fe      	b.n	800bb8c <prvTaskExitError+0x28>
	__asm volatile
 800bb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb92:	f383 8811 	msr	BASEPRI, r3
 800bb96:	f3bf 8f6f 	isb	sy
 800bb9a:	f3bf 8f4f 	dsb	sy
 800bb9e:	60bb      	str	r3, [r7, #8]
}
 800bba0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bba2:	bf00      	nop
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d0fc      	beq.n	800bba4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bbaa:	bf00      	nop
 800bbac:	bf00      	nop
 800bbae:	3714      	adds	r7, #20
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr
 800bbb8:	2000000c 	.word	0x2000000c
 800bbbc:	00000000 	.word	0x00000000

0800bbc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bbc0:	4b07      	ldr	r3, [pc, #28]	; (800bbe0 <pxCurrentTCBConst2>)
 800bbc2:	6819      	ldr	r1, [r3, #0]
 800bbc4:	6808      	ldr	r0, [r1, #0]
 800bbc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbca:	f380 8809 	msr	PSP, r0
 800bbce:	f3bf 8f6f 	isb	sy
 800bbd2:	f04f 0000 	mov.w	r0, #0
 800bbd6:	f380 8811 	msr	BASEPRI, r0
 800bbda:	4770      	bx	lr
 800bbdc:	f3af 8000 	nop.w

0800bbe0 <pxCurrentTCBConst2>:
 800bbe0:	2000199c 	.word	0x2000199c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bbe4:	bf00      	nop
 800bbe6:	bf00      	nop

0800bbe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bbe8:	4808      	ldr	r0, [pc, #32]	; (800bc0c <prvPortStartFirstTask+0x24>)
 800bbea:	6800      	ldr	r0, [r0, #0]
 800bbec:	6800      	ldr	r0, [r0, #0]
 800bbee:	f380 8808 	msr	MSP, r0
 800bbf2:	f04f 0000 	mov.w	r0, #0
 800bbf6:	f380 8814 	msr	CONTROL, r0
 800bbfa:	b662      	cpsie	i
 800bbfc:	b661      	cpsie	f
 800bbfe:	f3bf 8f4f 	dsb	sy
 800bc02:	f3bf 8f6f 	isb	sy
 800bc06:	df00      	svc	0
 800bc08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bc0a:	bf00      	nop
 800bc0c:	e000ed08 	.word	0xe000ed08

0800bc10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b086      	sub	sp, #24
 800bc14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bc16:	4b46      	ldr	r3, [pc, #280]	; (800bd30 <xPortStartScheduler+0x120>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a46      	ldr	r2, [pc, #280]	; (800bd34 <xPortStartScheduler+0x124>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d10a      	bne.n	800bc36 <xPortStartScheduler+0x26>
	__asm volatile
 800bc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc24:	f383 8811 	msr	BASEPRI, r3
 800bc28:	f3bf 8f6f 	isb	sy
 800bc2c:	f3bf 8f4f 	dsb	sy
 800bc30:	613b      	str	r3, [r7, #16]
}
 800bc32:	bf00      	nop
 800bc34:	e7fe      	b.n	800bc34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bc36:	4b3e      	ldr	r3, [pc, #248]	; (800bd30 <xPortStartScheduler+0x120>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a3f      	ldr	r2, [pc, #252]	; (800bd38 <xPortStartScheduler+0x128>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d10a      	bne.n	800bc56 <xPortStartScheduler+0x46>
	__asm volatile
 800bc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc44:	f383 8811 	msr	BASEPRI, r3
 800bc48:	f3bf 8f6f 	isb	sy
 800bc4c:	f3bf 8f4f 	dsb	sy
 800bc50:	60fb      	str	r3, [r7, #12]
}
 800bc52:	bf00      	nop
 800bc54:	e7fe      	b.n	800bc54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bc56:	4b39      	ldr	r3, [pc, #228]	; (800bd3c <xPortStartScheduler+0x12c>)
 800bc58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	b2db      	uxtb	r3, r3
 800bc60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	22ff      	movs	r2, #255	; 0xff
 800bc66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bc70:	78fb      	ldrb	r3, [r7, #3]
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bc78:	b2da      	uxtb	r2, r3
 800bc7a:	4b31      	ldr	r3, [pc, #196]	; (800bd40 <xPortStartScheduler+0x130>)
 800bc7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bc7e:	4b31      	ldr	r3, [pc, #196]	; (800bd44 <xPortStartScheduler+0x134>)
 800bc80:	2207      	movs	r2, #7
 800bc82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc84:	e009      	b.n	800bc9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bc86:	4b2f      	ldr	r3, [pc, #188]	; (800bd44 <xPortStartScheduler+0x134>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	4a2d      	ldr	r2, [pc, #180]	; (800bd44 <xPortStartScheduler+0x134>)
 800bc8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bc90:	78fb      	ldrb	r3, [r7, #3]
 800bc92:	b2db      	uxtb	r3, r3
 800bc94:	005b      	lsls	r3, r3, #1
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc9a:	78fb      	ldrb	r3, [r7, #3]
 800bc9c:	b2db      	uxtb	r3, r3
 800bc9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bca2:	2b80      	cmp	r3, #128	; 0x80
 800bca4:	d0ef      	beq.n	800bc86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bca6:	4b27      	ldr	r3, [pc, #156]	; (800bd44 <xPortStartScheduler+0x134>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f1c3 0307 	rsb	r3, r3, #7
 800bcae:	2b04      	cmp	r3, #4
 800bcb0:	d00a      	beq.n	800bcc8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bcb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb6:	f383 8811 	msr	BASEPRI, r3
 800bcba:	f3bf 8f6f 	isb	sy
 800bcbe:	f3bf 8f4f 	dsb	sy
 800bcc2:	60bb      	str	r3, [r7, #8]
}
 800bcc4:	bf00      	nop
 800bcc6:	e7fe      	b.n	800bcc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bcc8:	4b1e      	ldr	r3, [pc, #120]	; (800bd44 <xPortStartScheduler+0x134>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	021b      	lsls	r3, r3, #8
 800bcce:	4a1d      	ldr	r2, [pc, #116]	; (800bd44 <xPortStartScheduler+0x134>)
 800bcd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bcd2:	4b1c      	ldr	r3, [pc, #112]	; (800bd44 <xPortStartScheduler+0x134>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bcda:	4a1a      	ldr	r2, [pc, #104]	; (800bd44 <xPortStartScheduler+0x134>)
 800bcdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	b2da      	uxtb	r2, r3
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bce6:	4b18      	ldr	r3, [pc, #96]	; (800bd48 <xPortStartScheduler+0x138>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a17      	ldr	r2, [pc, #92]	; (800bd48 <xPortStartScheduler+0x138>)
 800bcec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bcf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bcf2:	4b15      	ldr	r3, [pc, #84]	; (800bd48 <xPortStartScheduler+0x138>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a14      	ldr	r2, [pc, #80]	; (800bd48 <xPortStartScheduler+0x138>)
 800bcf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bcfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bcfe:	f000 f8dd 	bl	800bebc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bd02:	4b12      	ldr	r3, [pc, #72]	; (800bd4c <xPortStartScheduler+0x13c>)
 800bd04:	2200      	movs	r2, #0
 800bd06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bd08:	f000 f8fc 	bl	800bf04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bd0c:	4b10      	ldr	r3, [pc, #64]	; (800bd50 <xPortStartScheduler+0x140>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4a0f      	ldr	r2, [pc, #60]	; (800bd50 <xPortStartScheduler+0x140>)
 800bd12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bd16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bd18:	f7ff ff66 	bl	800bbe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bd1c:	f7fe ff4c 	bl	800abb8 <vTaskSwitchContext>
	prvTaskExitError();
 800bd20:	f7ff ff20 	bl	800bb64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bd24:	2300      	movs	r3, #0
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3718      	adds	r7, #24
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	e000ed00 	.word	0xe000ed00
 800bd34:	410fc271 	.word	0x410fc271
 800bd38:	410fc270 	.word	0x410fc270
 800bd3c:	e000e400 	.word	0xe000e400
 800bd40:	20001fc8 	.word	0x20001fc8
 800bd44:	20001fcc 	.word	0x20001fcc
 800bd48:	e000ed20 	.word	0xe000ed20
 800bd4c:	2000000c 	.word	0x2000000c
 800bd50:	e000ef34 	.word	0xe000ef34

0800bd54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
	__asm volatile
 800bd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5e:	f383 8811 	msr	BASEPRI, r3
 800bd62:	f3bf 8f6f 	isb	sy
 800bd66:	f3bf 8f4f 	dsb	sy
 800bd6a:	607b      	str	r3, [r7, #4]
}
 800bd6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bd6e:	4b0f      	ldr	r3, [pc, #60]	; (800bdac <vPortEnterCritical+0x58>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	3301      	adds	r3, #1
 800bd74:	4a0d      	ldr	r2, [pc, #52]	; (800bdac <vPortEnterCritical+0x58>)
 800bd76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bd78:	4b0c      	ldr	r3, [pc, #48]	; (800bdac <vPortEnterCritical+0x58>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d10f      	bne.n	800bda0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bd80:	4b0b      	ldr	r3, [pc, #44]	; (800bdb0 <vPortEnterCritical+0x5c>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	b2db      	uxtb	r3, r3
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d00a      	beq.n	800bda0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8e:	f383 8811 	msr	BASEPRI, r3
 800bd92:	f3bf 8f6f 	isb	sy
 800bd96:	f3bf 8f4f 	dsb	sy
 800bd9a:	603b      	str	r3, [r7, #0]
}
 800bd9c:	bf00      	nop
 800bd9e:	e7fe      	b.n	800bd9e <vPortEnterCritical+0x4a>
	}
}
 800bda0:	bf00      	nop
 800bda2:	370c      	adds	r7, #12
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr
 800bdac:	2000000c 	.word	0x2000000c
 800bdb0:	e000ed04 	.word	0xe000ed04

0800bdb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b083      	sub	sp, #12
 800bdb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bdba:	4b12      	ldr	r3, [pc, #72]	; (800be04 <vPortExitCritical+0x50>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d10a      	bne.n	800bdd8 <vPortExitCritical+0x24>
	__asm volatile
 800bdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc6:	f383 8811 	msr	BASEPRI, r3
 800bdca:	f3bf 8f6f 	isb	sy
 800bdce:	f3bf 8f4f 	dsb	sy
 800bdd2:	607b      	str	r3, [r7, #4]
}
 800bdd4:	bf00      	nop
 800bdd6:	e7fe      	b.n	800bdd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bdd8:	4b0a      	ldr	r3, [pc, #40]	; (800be04 <vPortExitCritical+0x50>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	3b01      	subs	r3, #1
 800bdde:	4a09      	ldr	r2, [pc, #36]	; (800be04 <vPortExitCritical+0x50>)
 800bde0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bde2:	4b08      	ldr	r3, [pc, #32]	; (800be04 <vPortExitCritical+0x50>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d105      	bne.n	800bdf6 <vPortExitCritical+0x42>
 800bdea:	2300      	movs	r3, #0
 800bdec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	f383 8811 	msr	BASEPRI, r3
}
 800bdf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bdf6:	bf00      	nop
 800bdf8:	370c      	adds	r7, #12
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be00:	4770      	bx	lr
 800be02:	bf00      	nop
 800be04:	2000000c 	.word	0x2000000c
	...

0800be10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800be10:	f3ef 8009 	mrs	r0, PSP
 800be14:	f3bf 8f6f 	isb	sy
 800be18:	4b15      	ldr	r3, [pc, #84]	; (800be70 <pxCurrentTCBConst>)
 800be1a:	681a      	ldr	r2, [r3, #0]
 800be1c:	f01e 0f10 	tst.w	lr, #16
 800be20:	bf08      	it	eq
 800be22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800be26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be2a:	6010      	str	r0, [r2, #0]
 800be2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800be30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800be34:	f380 8811 	msr	BASEPRI, r0
 800be38:	f3bf 8f4f 	dsb	sy
 800be3c:	f3bf 8f6f 	isb	sy
 800be40:	f7fe feba 	bl	800abb8 <vTaskSwitchContext>
 800be44:	f04f 0000 	mov.w	r0, #0
 800be48:	f380 8811 	msr	BASEPRI, r0
 800be4c:	bc09      	pop	{r0, r3}
 800be4e:	6819      	ldr	r1, [r3, #0]
 800be50:	6808      	ldr	r0, [r1, #0]
 800be52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be56:	f01e 0f10 	tst.w	lr, #16
 800be5a:	bf08      	it	eq
 800be5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800be60:	f380 8809 	msr	PSP, r0
 800be64:	f3bf 8f6f 	isb	sy
 800be68:	4770      	bx	lr
 800be6a:	bf00      	nop
 800be6c:	f3af 8000 	nop.w

0800be70 <pxCurrentTCBConst>:
 800be70:	2000199c 	.word	0x2000199c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800be74:	bf00      	nop
 800be76:	bf00      	nop

0800be78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
	__asm volatile
 800be7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be82:	f383 8811 	msr	BASEPRI, r3
 800be86:	f3bf 8f6f 	isb	sy
 800be8a:	f3bf 8f4f 	dsb	sy
 800be8e:	607b      	str	r3, [r7, #4]
}
 800be90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800be92:	f7fe fdd7 	bl	800aa44 <xTaskIncrementTick>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d003      	beq.n	800bea4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800be9c:	4b06      	ldr	r3, [pc, #24]	; (800beb8 <xPortSysTickHandler+0x40>)
 800be9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bea2:	601a      	str	r2, [r3, #0]
 800bea4:	2300      	movs	r3, #0
 800bea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	f383 8811 	msr	BASEPRI, r3
}
 800beae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800beb0:	bf00      	nop
 800beb2:	3708      	adds	r7, #8
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}
 800beb8:	e000ed04 	.word	0xe000ed04

0800bebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bebc:	b480      	push	{r7}
 800bebe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bec0:	4b0b      	ldr	r3, [pc, #44]	; (800bef0 <vPortSetupTimerInterrupt+0x34>)
 800bec2:	2200      	movs	r2, #0
 800bec4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bec6:	4b0b      	ldr	r3, [pc, #44]	; (800bef4 <vPortSetupTimerInterrupt+0x38>)
 800bec8:	2200      	movs	r2, #0
 800beca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800becc:	4b0a      	ldr	r3, [pc, #40]	; (800bef8 <vPortSetupTimerInterrupt+0x3c>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	4a0a      	ldr	r2, [pc, #40]	; (800befc <vPortSetupTimerInterrupt+0x40>)
 800bed2:	fba2 2303 	umull	r2, r3, r2, r3
 800bed6:	099b      	lsrs	r3, r3, #6
 800bed8:	4a09      	ldr	r2, [pc, #36]	; (800bf00 <vPortSetupTimerInterrupt+0x44>)
 800beda:	3b01      	subs	r3, #1
 800bedc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bede:	4b04      	ldr	r3, [pc, #16]	; (800bef0 <vPortSetupTimerInterrupt+0x34>)
 800bee0:	2207      	movs	r2, #7
 800bee2:	601a      	str	r2, [r3, #0]
}
 800bee4:	bf00      	nop
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr
 800beee:	bf00      	nop
 800bef0:	e000e010 	.word	0xe000e010
 800bef4:	e000e018 	.word	0xe000e018
 800bef8:	20000000 	.word	0x20000000
 800befc:	10624dd3 	.word	0x10624dd3
 800bf00:	e000e014 	.word	0xe000e014

0800bf04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bf04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bf14 <vPortEnableVFP+0x10>
 800bf08:	6801      	ldr	r1, [r0, #0]
 800bf0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bf0e:	6001      	str	r1, [r0, #0]
 800bf10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bf12:	bf00      	nop
 800bf14:	e000ed88 	.word	0xe000ed88

0800bf18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bf18:	b480      	push	{r7}
 800bf1a:	b085      	sub	sp, #20
 800bf1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bf1e:	f3ef 8305 	mrs	r3, IPSR
 800bf22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2b0f      	cmp	r3, #15
 800bf28:	d914      	bls.n	800bf54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bf2a:	4a17      	ldr	r2, [pc, #92]	; (800bf88 <vPortValidateInterruptPriority+0x70>)
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	4413      	add	r3, r2
 800bf30:	781b      	ldrb	r3, [r3, #0]
 800bf32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bf34:	4b15      	ldr	r3, [pc, #84]	; (800bf8c <vPortValidateInterruptPriority+0x74>)
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	7afa      	ldrb	r2, [r7, #11]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d20a      	bcs.n	800bf54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bf3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf42:	f383 8811 	msr	BASEPRI, r3
 800bf46:	f3bf 8f6f 	isb	sy
 800bf4a:	f3bf 8f4f 	dsb	sy
 800bf4e:	607b      	str	r3, [r7, #4]
}
 800bf50:	bf00      	nop
 800bf52:	e7fe      	b.n	800bf52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bf54:	4b0e      	ldr	r3, [pc, #56]	; (800bf90 <vPortValidateInterruptPriority+0x78>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bf5c:	4b0d      	ldr	r3, [pc, #52]	; (800bf94 <vPortValidateInterruptPriority+0x7c>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d90a      	bls.n	800bf7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf68:	f383 8811 	msr	BASEPRI, r3
 800bf6c:	f3bf 8f6f 	isb	sy
 800bf70:	f3bf 8f4f 	dsb	sy
 800bf74:	603b      	str	r3, [r7, #0]
}
 800bf76:	bf00      	nop
 800bf78:	e7fe      	b.n	800bf78 <vPortValidateInterruptPriority+0x60>
	}
 800bf7a:	bf00      	nop
 800bf7c:	3714      	adds	r7, #20
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf84:	4770      	bx	lr
 800bf86:	bf00      	nop
 800bf88:	e000e3f0 	.word	0xe000e3f0
 800bf8c:	20001fc8 	.word	0x20001fc8
 800bf90:	e000ed0c 	.word	0xe000ed0c
 800bf94:	20001fcc 	.word	0x20001fcc

0800bf98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b08a      	sub	sp, #40	; 0x28
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bfa4:	f7fe fc92 	bl	800a8cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bfa8:	4b5b      	ldr	r3, [pc, #364]	; (800c118 <pvPortMalloc+0x180>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d101      	bne.n	800bfb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bfb0:	f000 f920 	bl	800c1f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bfb4:	4b59      	ldr	r3, [pc, #356]	; (800c11c <pvPortMalloc+0x184>)
 800bfb6:	681a      	ldr	r2, [r3, #0]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	4013      	ands	r3, r2
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	f040 8093 	bne.w	800c0e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d01d      	beq.n	800c004 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bfc8:	2208      	movs	r2, #8
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	4413      	add	r3, r2
 800bfce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f003 0307 	and.w	r3, r3, #7
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d014      	beq.n	800c004 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f023 0307 	bic.w	r3, r3, #7
 800bfe0:	3308      	adds	r3, #8
 800bfe2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f003 0307 	and.w	r3, r3, #7
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d00a      	beq.n	800c004 <pvPortMalloc+0x6c>
	__asm volatile
 800bfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff2:	f383 8811 	msr	BASEPRI, r3
 800bff6:	f3bf 8f6f 	isb	sy
 800bffa:	f3bf 8f4f 	dsb	sy
 800bffe:	617b      	str	r3, [r7, #20]
}
 800c000:	bf00      	nop
 800c002:	e7fe      	b.n	800c002 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d06e      	beq.n	800c0e8 <pvPortMalloc+0x150>
 800c00a:	4b45      	ldr	r3, [pc, #276]	; (800c120 <pvPortMalloc+0x188>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	429a      	cmp	r2, r3
 800c012:	d869      	bhi.n	800c0e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c014:	4b43      	ldr	r3, [pc, #268]	; (800c124 <pvPortMalloc+0x18c>)
 800c016:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c018:	4b42      	ldr	r3, [pc, #264]	; (800c124 <pvPortMalloc+0x18c>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c01e:	e004      	b.n	800c02a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c022:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	429a      	cmp	r2, r3
 800c032:	d903      	bls.n	800c03c <pvPortMalloc+0xa4>
 800c034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d1f1      	bne.n	800c020 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c03c:	4b36      	ldr	r3, [pc, #216]	; (800c118 <pvPortMalloc+0x180>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c042:	429a      	cmp	r2, r3
 800c044:	d050      	beq.n	800c0e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c046:	6a3b      	ldr	r3, [r7, #32]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	2208      	movs	r2, #8
 800c04c:	4413      	add	r3, r2
 800c04e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	6a3b      	ldr	r3, [r7, #32]
 800c056:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05a:	685a      	ldr	r2, [r3, #4]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	1ad2      	subs	r2, r2, r3
 800c060:	2308      	movs	r3, #8
 800c062:	005b      	lsls	r3, r3, #1
 800c064:	429a      	cmp	r2, r3
 800c066:	d91f      	bls.n	800c0a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	4413      	add	r3, r2
 800c06e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c070:	69bb      	ldr	r3, [r7, #24]
 800c072:	f003 0307 	and.w	r3, r3, #7
 800c076:	2b00      	cmp	r3, #0
 800c078:	d00a      	beq.n	800c090 <pvPortMalloc+0xf8>
	__asm volatile
 800c07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07e:	f383 8811 	msr	BASEPRI, r3
 800c082:	f3bf 8f6f 	isb	sy
 800c086:	f3bf 8f4f 	dsb	sy
 800c08a:	613b      	str	r3, [r7, #16]
}
 800c08c:	bf00      	nop
 800c08e:	e7fe      	b.n	800c08e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c092:	685a      	ldr	r2, [r3, #4]
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	1ad2      	subs	r2, r2, r3
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c0a2:	69b8      	ldr	r0, [r7, #24]
 800c0a4:	f000 f908 	bl	800c2b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c0a8:	4b1d      	ldr	r3, [pc, #116]	; (800c120 <pvPortMalloc+0x188>)
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	1ad3      	subs	r3, r2, r3
 800c0b2:	4a1b      	ldr	r2, [pc, #108]	; (800c120 <pvPortMalloc+0x188>)
 800c0b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c0b6:	4b1a      	ldr	r3, [pc, #104]	; (800c120 <pvPortMalloc+0x188>)
 800c0b8:	681a      	ldr	r2, [r3, #0]
 800c0ba:	4b1b      	ldr	r3, [pc, #108]	; (800c128 <pvPortMalloc+0x190>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d203      	bcs.n	800c0ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c0c2:	4b17      	ldr	r3, [pc, #92]	; (800c120 <pvPortMalloc+0x188>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4a18      	ldr	r2, [pc, #96]	; (800c128 <pvPortMalloc+0x190>)
 800c0c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0cc:	685a      	ldr	r2, [r3, #4]
 800c0ce:	4b13      	ldr	r3, [pc, #76]	; (800c11c <pvPortMalloc+0x184>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	431a      	orrs	r2, r3
 800c0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0da:	2200      	movs	r2, #0
 800c0dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c0de:	4b13      	ldr	r3, [pc, #76]	; (800c12c <pvPortMalloc+0x194>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	4a11      	ldr	r2, [pc, #68]	; (800c12c <pvPortMalloc+0x194>)
 800c0e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c0e8:	f7fe fbfe 	bl	800a8e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0ec:	69fb      	ldr	r3, [r7, #28]
 800c0ee:	f003 0307 	and.w	r3, r3, #7
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d00a      	beq.n	800c10c <pvPortMalloc+0x174>
	__asm volatile
 800c0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fa:	f383 8811 	msr	BASEPRI, r3
 800c0fe:	f3bf 8f6f 	isb	sy
 800c102:	f3bf 8f4f 	dsb	sy
 800c106:	60fb      	str	r3, [r7, #12]
}
 800c108:	bf00      	nop
 800c10a:	e7fe      	b.n	800c10a <pvPortMalloc+0x172>
	return pvReturn;
 800c10c:	69fb      	ldr	r3, [r7, #28]
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3728      	adds	r7, #40	; 0x28
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	20002b90 	.word	0x20002b90
 800c11c:	20002ba4 	.word	0x20002ba4
 800c120:	20002b94 	.word	0x20002b94
 800c124:	20002b88 	.word	0x20002b88
 800c128:	20002b98 	.word	0x20002b98
 800c12c:	20002b9c 	.word	0x20002b9c

0800c130 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b086      	sub	sp, #24
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d04d      	beq.n	800c1de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c142:	2308      	movs	r3, #8
 800c144:	425b      	negs	r3, r3
 800c146:	697a      	ldr	r2, [r7, #20]
 800c148:	4413      	add	r3, r2
 800c14a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	685a      	ldr	r2, [r3, #4]
 800c154:	4b24      	ldr	r3, [pc, #144]	; (800c1e8 <vPortFree+0xb8>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4013      	ands	r3, r2
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d10a      	bne.n	800c174 <vPortFree+0x44>
	__asm volatile
 800c15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c162:	f383 8811 	msr	BASEPRI, r3
 800c166:	f3bf 8f6f 	isb	sy
 800c16a:	f3bf 8f4f 	dsb	sy
 800c16e:	60fb      	str	r3, [r7, #12]
}
 800c170:	bf00      	nop
 800c172:	e7fe      	b.n	800c172 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d00a      	beq.n	800c192 <vPortFree+0x62>
	__asm volatile
 800c17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c180:	f383 8811 	msr	BASEPRI, r3
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	60bb      	str	r3, [r7, #8]
}
 800c18e:	bf00      	nop
 800c190:	e7fe      	b.n	800c190 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	685a      	ldr	r2, [r3, #4]
 800c196:	4b14      	ldr	r3, [pc, #80]	; (800c1e8 <vPortFree+0xb8>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4013      	ands	r3, r2
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d01e      	beq.n	800c1de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d11a      	bne.n	800c1de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	685a      	ldr	r2, [r3, #4]
 800c1ac:	4b0e      	ldr	r3, [pc, #56]	; (800c1e8 <vPortFree+0xb8>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	43db      	mvns	r3, r3
 800c1b2:	401a      	ands	r2, r3
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c1b8:	f7fe fb88 	bl	800a8cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	685a      	ldr	r2, [r3, #4]
 800c1c0:	4b0a      	ldr	r3, [pc, #40]	; (800c1ec <vPortFree+0xbc>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	4a09      	ldr	r2, [pc, #36]	; (800c1ec <vPortFree+0xbc>)
 800c1c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c1ca:	6938      	ldr	r0, [r7, #16]
 800c1cc:	f000 f874 	bl	800c2b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c1d0:	4b07      	ldr	r3, [pc, #28]	; (800c1f0 <vPortFree+0xc0>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	4a06      	ldr	r2, [pc, #24]	; (800c1f0 <vPortFree+0xc0>)
 800c1d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c1da:	f7fe fb85 	bl	800a8e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c1de:	bf00      	nop
 800c1e0:	3718      	adds	r7, #24
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	20002ba4 	.word	0x20002ba4
 800c1ec:	20002b94 	.word	0x20002b94
 800c1f0:	20002ba0 	.word	0x20002ba0

0800c1f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b085      	sub	sp, #20
 800c1f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c1fa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800c1fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c200:	4b27      	ldr	r3, [pc, #156]	; (800c2a0 <prvHeapInit+0xac>)
 800c202:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f003 0307 	and.w	r3, r3, #7
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d00c      	beq.n	800c228 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	3307      	adds	r3, #7
 800c212:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f023 0307 	bic.w	r3, r3, #7
 800c21a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c21c:	68ba      	ldr	r2, [r7, #8]
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	1ad3      	subs	r3, r2, r3
 800c222:	4a1f      	ldr	r2, [pc, #124]	; (800c2a0 <prvHeapInit+0xac>)
 800c224:	4413      	add	r3, r2
 800c226:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c22c:	4a1d      	ldr	r2, [pc, #116]	; (800c2a4 <prvHeapInit+0xb0>)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c232:	4b1c      	ldr	r3, [pc, #112]	; (800c2a4 <prvHeapInit+0xb0>)
 800c234:	2200      	movs	r2, #0
 800c236:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	68ba      	ldr	r2, [r7, #8]
 800c23c:	4413      	add	r3, r2
 800c23e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c240:	2208      	movs	r2, #8
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	1a9b      	subs	r3, r3, r2
 800c246:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f023 0307 	bic.w	r3, r3, #7
 800c24e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	4a15      	ldr	r2, [pc, #84]	; (800c2a8 <prvHeapInit+0xb4>)
 800c254:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c256:	4b14      	ldr	r3, [pc, #80]	; (800c2a8 <prvHeapInit+0xb4>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2200      	movs	r2, #0
 800c25c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c25e:	4b12      	ldr	r3, [pc, #72]	; (800c2a8 <prvHeapInit+0xb4>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	2200      	movs	r2, #0
 800c264:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	68fa      	ldr	r2, [r7, #12]
 800c26e:	1ad2      	subs	r2, r2, r3
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c274:	4b0c      	ldr	r3, [pc, #48]	; (800c2a8 <prvHeapInit+0xb4>)
 800c276:	681a      	ldr	r2, [r3, #0]
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	4a0a      	ldr	r2, [pc, #40]	; (800c2ac <prvHeapInit+0xb8>)
 800c282:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	4a09      	ldr	r2, [pc, #36]	; (800c2b0 <prvHeapInit+0xbc>)
 800c28a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c28c:	4b09      	ldr	r3, [pc, #36]	; (800c2b4 <prvHeapInit+0xc0>)
 800c28e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c292:	601a      	str	r2, [r3, #0]
}
 800c294:	bf00      	nop
 800c296:	3714      	adds	r7, #20
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr
 800c2a0:	20001fd0 	.word	0x20001fd0
 800c2a4:	20002b88 	.word	0x20002b88
 800c2a8:	20002b90 	.word	0x20002b90
 800c2ac:	20002b98 	.word	0x20002b98
 800c2b0:	20002b94 	.word	0x20002b94
 800c2b4:	20002ba4 	.word	0x20002ba4

0800c2b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b085      	sub	sp, #20
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c2c0:	4b28      	ldr	r3, [pc, #160]	; (800c364 <prvInsertBlockIntoFreeList+0xac>)
 800c2c2:	60fb      	str	r3, [r7, #12]
 800c2c4:	e002      	b.n	800c2cc <prvInsertBlockIntoFreeList+0x14>
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	60fb      	str	r3, [r7, #12]
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d8f7      	bhi.n	800c2c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	68ba      	ldr	r2, [r7, #8]
 800c2e0:	4413      	add	r3, r2
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d108      	bne.n	800c2fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	685a      	ldr	r2, [r3, #4]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	441a      	add	r2, r3
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	685b      	ldr	r3, [r3, #4]
 800c302:	68ba      	ldr	r2, [r7, #8]
 800c304:	441a      	add	r2, r3
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d118      	bne.n	800c340 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	4b15      	ldr	r3, [pc, #84]	; (800c368 <prvInsertBlockIntoFreeList+0xb0>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	429a      	cmp	r2, r3
 800c318:	d00d      	beq.n	800c336 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	685a      	ldr	r2, [r3, #4]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	441a      	add	r2, r3
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	601a      	str	r2, [r3, #0]
 800c334:	e008      	b.n	800c348 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c336:	4b0c      	ldr	r3, [pc, #48]	; (800c368 <prvInsertBlockIntoFreeList+0xb0>)
 800c338:	681a      	ldr	r2, [r3, #0]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	601a      	str	r2, [r3, #0]
 800c33e:	e003      	b.n	800c348 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c348:	68fa      	ldr	r2, [r7, #12]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d002      	beq.n	800c356 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c356:	bf00      	nop
 800c358:	3714      	adds	r7, #20
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr
 800c362:	bf00      	nop
 800c364:	20002b88 	.word	0x20002b88
 800c368:	20002b90 	.word	0x20002b90

0800c36c <__errno>:
 800c36c:	4b01      	ldr	r3, [pc, #4]	; (800c374 <__errno+0x8>)
 800c36e:	6818      	ldr	r0, [r3, #0]
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop
 800c374:	20000010 	.word	0x20000010

0800c378 <std>:
 800c378:	2300      	movs	r3, #0
 800c37a:	b510      	push	{r4, lr}
 800c37c:	4604      	mov	r4, r0
 800c37e:	e9c0 3300 	strd	r3, r3, [r0]
 800c382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c386:	6083      	str	r3, [r0, #8]
 800c388:	8181      	strh	r1, [r0, #12]
 800c38a:	6643      	str	r3, [r0, #100]	; 0x64
 800c38c:	81c2      	strh	r2, [r0, #14]
 800c38e:	6183      	str	r3, [r0, #24]
 800c390:	4619      	mov	r1, r3
 800c392:	2208      	movs	r2, #8
 800c394:	305c      	adds	r0, #92	; 0x5c
 800c396:	f000 f93b 	bl	800c610 <memset>
 800c39a:	4b05      	ldr	r3, [pc, #20]	; (800c3b0 <std+0x38>)
 800c39c:	6263      	str	r3, [r4, #36]	; 0x24
 800c39e:	4b05      	ldr	r3, [pc, #20]	; (800c3b4 <std+0x3c>)
 800c3a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c3a2:	4b05      	ldr	r3, [pc, #20]	; (800c3b8 <std+0x40>)
 800c3a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c3a6:	4b05      	ldr	r3, [pc, #20]	; (800c3bc <std+0x44>)
 800c3a8:	6224      	str	r4, [r4, #32]
 800c3aa:	6323      	str	r3, [r4, #48]	; 0x30
 800c3ac:	bd10      	pop	{r4, pc}
 800c3ae:	bf00      	nop
 800c3b0:	0800ca99 	.word	0x0800ca99
 800c3b4:	0800cabb 	.word	0x0800cabb
 800c3b8:	0800caf3 	.word	0x0800caf3
 800c3bc:	0800cb17 	.word	0x0800cb17

0800c3c0 <_cleanup_r>:
 800c3c0:	4901      	ldr	r1, [pc, #4]	; (800c3c8 <_cleanup_r+0x8>)
 800c3c2:	f000 b8af 	b.w	800c524 <_fwalk_reent>
 800c3c6:	bf00      	nop
 800c3c8:	0800cf35 	.word	0x0800cf35

0800c3cc <__sfmoreglue>:
 800c3cc:	b570      	push	{r4, r5, r6, lr}
 800c3ce:	2268      	movs	r2, #104	; 0x68
 800c3d0:	1e4d      	subs	r5, r1, #1
 800c3d2:	4355      	muls	r5, r2
 800c3d4:	460e      	mov	r6, r1
 800c3d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c3da:	f000 f98d 	bl	800c6f8 <_malloc_r>
 800c3de:	4604      	mov	r4, r0
 800c3e0:	b140      	cbz	r0, 800c3f4 <__sfmoreglue+0x28>
 800c3e2:	2100      	movs	r1, #0
 800c3e4:	e9c0 1600 	strd	r1, r6, [r0]
 800c3e8:	300c      	adds	r0, #12
 800c3ea:	60a0      	str	r0, [r4, #8]
 800c3ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c3f0:	f000 f90e 	bl	800c610 <memset>
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	bd70      	pop	{r4, r5, r6, pc}

0800c3f8 <__sfp_lock_acquire>:
 800c3f8:	4801      	ldr	r0, [pc, #4]	; (800c400 <__sfp_lock_acquire+0x8>)
 800c3fa:	f000 b8d8 	b.w	800c5ae <__retarget_lock_acquire_recursive>
 800c3fe:	bf00      	nop
 800c400:	20002ba9 	.word	0x20002ba9

0800c404 <__sfp_lock_release>:
 800c404:	4801      	ldr	r0, [pc, #4]	; (800c40c <__sfp_lock_release+0x8>)
 800c406:	f000 b8d3 	b.w	800c5b0 <__retarget_lock_release_recursive>
 800c40a:	bf00      	nop
 800c40c:	20002ba9 	.word	0x20002ba9

0800c410 <__sinit_lock_acquire>:
 800c410:	4801      	ldr	r0, [pc, #4]	; (800c418 <__sinit_lock_acquire+0x8>)
 800c412:	f000 b8cc 	b.w	800c5ae <__retarget_lock_acquire_recursive>
 800c416:	bf00      	nop
 800c418:	20002baa 	.word	0x20002baa

0800c41c <__sinit_lock_release>:
 800c41c:	4801      	ldr	r0, [pc, #4]	; (800c424 <__sinit_lock_release+0x8>)
 800c41e:	f000 b8c7 	b.w	800c5b0 <__retarget_lock_release_recursive>
 800c422:	bf00      	nop
 800c424:	20002baa 	.word	0x20002baa

0800c428 <__sinit>:
 800c428:	b510      	push	{r4, lr}
 800c42a:	4604      	mov	r4, r0
 800c42c:	f7ff fff0 	bl	800c410 <__sinit_lock_acquire>
 800c430:	69a3      	ldr	r3, [r4, #24]
 800c432:	b11b      	cbz	r3, 800c43c <__sinit+0x14>
 800c434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c438:	f7ff bff0 	b.w	800c41c <__sinit_lock_release>
 800c43c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c440:	6523      	str	r3, [r4, #80]	; 0x50
 800c442:	4b13      	ldr	r3, [pc, #76]	; (800c490 <__sinit+0x68>)
 800c444:	4a13      	ldr	r2, [pc, #76]	; (800c494 <__sinit+0x6c>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	62a2      	str	r2, [r4, #40]	; 0x28
 800c44a:	42a3      	cmp	r3, r4
 800c44c:	bf04      	itt	eq
 800c44e:	2301      	moveq	r3, #1
 800c450:	61a3      	streq	r3, [r4, #24]
 800c452:	4620      	mov	r0, r4
 800c454:	f000 f820 	bl	800c498 <__sfp>
 800c458:	6060      	str	r0, [r4, #4]
 800c45a:	4620      	mov	r0, r4
 800c45c:	f000 f81c 	bl	800c498 <__sfp>
 800c460:	60a0      	str	r0, [r4, #8]
 800c462:	4620      	mov	r0, r4
 800c464:	f000 f818 	bl	800c498 <__sfp>
 800c468:	2200      	movs	r2, #0
 800c46a:	60e0      	str	r0, [r4, #12]
 800c46c:	2104      	movs	r1, #4
 800c46e:	6860      	ldr	r0, [r4, #4]
 800c470:	f7ff ff82 	bl	800c378 <std>
 800c474:	68a0      	ldr	r0, [r4, #8]
 800c476:	2201      	movs	r2, #1
 800c478:	2109      	movs	r1, #9
 800c47a:	f7ff ff7d 	bl	800c378 <std>
 800c47e:	68e0      	ldr	r0, [r4, #12]
 800c480:	2202      	movs	r2, #2
 800c482:	2112      	movs	r1, #18
 800c484:	f7ff ff78 	bl	800c378 <std>
 800c488:	2301      	movs	r3, #1
 800c48a:	61a3      	str	r3, [r4, #24]
 800c48c:	e7d2      	b.n	800c434 <__sinit+0xc>
 800c48e:	bf00      	nop
 800c490:	0800e518 	.word	0x0800e518
 800c494:	0800c3c1 	.word	0x0800c3c1

0800c498 <__sfp>:
 800c498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49a:	4607      	mov	r7, r0
 800c49c:	f7ff ffac 	bl	800c3f8 <__sfp_lock_acquire>
 800c4a0:	4b1e      	ldr	r3, [pc, #120]	; (800c51c <__sfp+0x84>)
 800c4a2:	681e      	ldr	r6, [r3, #0]
 800c4a4:	69b3      	ldr	r3, [r6, #24]
 800c4a6:	b913      	cbnz	r3, 800c4ae <__sfp+0x16>
 800c4a8:	4630      	mov	r0, r6
 800c4aa:	f7ff ffbd 	bl	800c428 <__sinit>
 800c4ae:	3648      	adds	r6, #72	; 0x48
 800c4b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c4b4:	3b01      	subs	r3, #1
 800c4b6:	d503      	bpl.n	800c4c0 <__sfp+0x28>
 800c4b8:	6833      	ldr	r3, [r6, #0]
 800c4ba:	b30b      	cbz	r3, 800c500 <__sfp+0x68>
 800c4bc:	6836      	ldr	r6, [r6, #0]
 800c4be:	e7f7      	b.n	800c4b0 <__sfp+0x18>
 800c4c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c4c4:	b9d5      	cbnz	r5, 800c4fc <__sfp+0x64>
 800c4c6:	4b16      	ldr	r3, [pc, #88]	; (800c520 <__sfp+0x88>)
 800c4c8:	60e3      	str	r3, [r4, #12]
 800c4ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c4ce:	6665      	str	r5, [r4, #100]	; 0x64
 800c4d0:	f000 f86c 	bl	800c5ac <__retarget_lock_init_recursive>
 800c4d4:	f7ff ff96 	bl	800c404 <__sfp_lock_release>
 800c4d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c4dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c4e0:	6025      	str	r5, [r4, #0]
 800c4e2:	61a5      	str	r5, [r4, #24]
 800c4e4:	2208      	movs	r2, #8
 800c4e6:	4629      	mov	r1, r5
 800c4e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c4ec:	f000 f890 	bl	800c610 <memset>
 800c4f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c4f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c4f8:	4620      	mov	r0, r4
 800c4fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4fc:	3468      	adds	r4, #104	; 0x68
 800c4fe:	e7d9      	b.n	800c4b4 <__sfp+0x1c>
 800c500:	2104      	movs	r1, #4
 800c502:	4638      	mov	r0, r7
 800c504:	f7ff ff62 	bl	800c3cc <__sfmoreglue>
 800c508:	4604      	mov	r4, r0
 800c50a:	6030      	str	r0, [r6, #0]
 800c50c:	2800      	cmp	r0, #0
 800c50e:	d1d5      	bne.n	800c4bc <__sfp+0x24>
 800c510:	f7ff ff78 	bl	800c404 <__sfp_lock_release>
 800c514:	230c      	movs	r3, #12
 800c516:	603b      	str	r3, [r7, #0]
 800c518:	e7ee      	b.n	800c4f8 <__sfp+0x60>
 800c51a:	bf00      	nop
 800c51c:	0800e518 	.word	0x0800e518
 800c520:	ffff0001 	.word	0xffff0001

0800c524 <_fwalk_reent>:
 800c524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c528:	4606      	mov	r6, r0
 800c52a:	4688      	mov	r8, r1
 800c52c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c530:	2700      	movs	r7, #0
 800c532:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c536:	f1b9 0901 	subs.w	r9, r9, #1
 800c53a:	d505      	bpl.n	800c548 <_fwalk_reent+0x24>
 800c53c:	6824      	ldr	r4, [r4, #0]
 800c53e:	2c00      	cmp	r4, #0
 800c540:	d1f7      	bne.n	800c532 <_fwalk_reent+0xe>
 800c542:	4638      	mov	r0, r7
 800c544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c548:	89ab      	ldrh	r3, [r5, #12]
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	d907      	bls.n	800c55e <_fwalk_reent+0x3a>
 800c54e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c552:	3301      	adds	r3, #1
 800c554:	d003      	beq.n	800c55e <_fwalk_reent+0x3a>
 800c556:	4629      	mov	r1, r5
 800c558:	4630      	mov	r0, r6
 800c55a:	47c0      	blx	r8
 800c55c:	4307      	orrs	r7, r0
 800c55e:	3568      	adds	r5, #104	; 0x68
 800c560:	e7e9      	b.n	800c536 <_fwalk_reent+0x12>
	...

0800c564 <__libc_init_array>:
 800c564:	b570      	push	{r4, r5, r6, lr}
 800c566:	4d0d      	ldr	r5, [pc, #52]	; (800c59c <__libc_init_array+0x38>)
 800c568:	4c0d      	ldr	r4, [pc, #52]	; (800c5a0 <__libc_init_array+0x3c>)
 800c56a:	1b64      	subs	r4, r4, r5
 800c56c:	10a4      	asrs	r4, r4, #2
 800c56e:	2600      	movs	r6, #0
 800c570:	42a6      	cmp	r6, r4
 800c572:	d109      	bne.n	800c588 <__libc_init_array+0x24>
 800c574:	4d0b      	ldr	r5, [pc, #44]	; (800c5a4 <__libc_init_array+0x40>)
 800c576:	4c0c      	ldr	r4, [pc, #48]	; (800c5a8 <__libc_init_array+0x44>)
 800c578:	f001 faca 	bl	800db10 <_init>
 800c57c:	1b64      	subs	r4, r4, r5
 800c57e:	10a4      	asrs	r4, r4, #2
 800c580:	2600      	movs	r6, #0
 800c582:	42a6      	cmp	r6, r4
 800c584:	d105      	bne.n	800c592 <__libc_init_array+0x2e>
 800c586:	bd70      	pop	{r4, r5, r6, pc}
 800c588:	f855 3b04 	ldr.w	r3, [r5], #4
 800c58c:	4798      	blx	r3
 800c58e:	3601      	adds	r6, #1
 800c590:	e7ee      	b.n	800c570 <__libc_init_array+0xc>
 800c592:	f855 3b04 	ldr.w	r3, [r5], #4
 800c596:	4798      	blx	r3
 800c598:	3601      	adds	r6, #1
 800c59a:	e7f2      	b.n	800c582 <__libc_init_array+0x1e>
 800c59c:	0800e608 	.word	0x0800e608
 800c5a0:	0800e608 	.word	0x0800e608
 800c5a4:	0800e608 	.word	0x0800e608
 800c5a8:	0800e60c 	.word	0x0800e60c

0800c5ac <__retarget_lock_init_recursive>:
 800c5ac:	4770      	bx	lr

0800c5ae <__retarget_lock_acquire_recursive>:
 800c5ae:	4770      	bx	lr

0800c5b0 <__retarget_lock_release_recursive>:
 800c5b0:	4770      	bx	lr
	...

0800c5b4 <malloc>:
 800c5b4:	4b02      	ldr	r3, [pc, #8]	; (800c5c0 <malloc+0xc>)
 800c5b6:	4601      	mov	r1, r0
 800c5b8:	6818      	ldr	r0, [r3, #0]
 800c5ba:	f000 b89d 	b.w	800c6f8 <_malloc_r>
 800c5be:	bf00      	nop
 800c5c0:	20000010 	.word	0x20000010

0800c5c4 <free>:
 800c5c4:	4b02      	ldr	r3, [pc, #8]	; (800c5d0 <free+0xc>)
 800c5c6:	4601      	mov	r1, r0
 800c5c8:	6818      	ldr	r0, [r3, #0]
 800c5ca:	f000 b829 	b.w	800c620 <_free_r>
 800c5ce:	bf00      	nop
 800c5d0:	20000010 	.word	0x20000010

0800c5d4 <memcmp>:
 800c5d4:	b510      	push	{r4, lr}
 800c5d6:	3901      	subs	r1, #1
 800c5d8:	4402      	add	r2, r0
 800c5da:	4290      	cmp	r0, r2
 800c5dc:	d101      	bne.n	800c5e2 <memcmp+0xe>
 800c5de:	2000      	movs	r0, #0
 800c5e0:	e005      	b.n	800c5ee <memcmp+0x1a>
 800c5e2:	7803      	ldrb	r3, [r0, #0]
 800c5e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c5e8:	42a3      	cmp	r3, r4
 800c5ea:	d001      	beq.n	800c5f0 <memcmp+0x1c>
 800c5ec:	1b18      	subs	r0, r3, r4
 800c5ee:	bd10      	pop	{r4, pc}
 800c5f0:	3001      	adds	r0, #1
 800c5f2:	e7f2      	b.n	800c5da <memcmp+0x6>

0800c5f4 <memcpy>:
 800c5f4:	440a      	add	r2, r1
 800c5f6:	4291      	cmp	r1, r2
 800c5f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c5fc:	d100      	bne.n	800c600 <memcpy+0xc>
 800c5fe:	4770      	bx	lr
 800c600:	b510      	push	{r4, lr}
 800c602:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c606:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c60a:	4291      	cmp	r1, r2
 800c60c:	d1f9      	bne.n	800c602 <memcpy+0xe>
 800c60e:	bd10      	pop	{r4, pc}

0800c610 <memset>:
 800c610:	4402      	add	r2, r0
 800c612:	4603      	mov	r3, r0
 800c614:	4293      	cmp	r3, r2
 800c616:	d100      	bne.n	800c61a <memset+0xa>
 800c618:	4770      	bx	lr
 800c61a:	f803 1b01 	strb.w	r1, [r3], #1
 800c61e:	e7f9      	b.n	800c614 <memset+0x4>

0800c620 <_free_r>:
 800c620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c622:	2900      	cmp	r1, #0
 800c624:	d044      	beq.n	800c6b0 <_free_r+0x90>
 800c626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c62a:	9001      	str	r0, [sp, #4]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	f1a1 0404 	sub.w	r4, r1, #4
 800c632:	bfb8      	it	lt
 800c634:	18e4      	addlt	r4, r4, r3
 800c636:	f000 fd43 	bl	800d0c0 <__malloc_lock>
 800c63a:	4a1e      	ldr	r2, [pc, #120]	; (800c6b4 <_free_r+0x94>)
 800c63c:	9801      	ldr	r0, [sp, #4]
 800c63e:	6813      	ldr	r3, [r2, #0]
 800c640:	b933      	cbnz	r3, 800c650 <_free_r+0x30>
 800c642:	6063      	str	r3, [r4, #4]
 800c644:	6014      	str	r4, [r2, #0]
 800c646:	b003      	add	sp, #12
 800c648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c64c:	f000 bd3e 	b.w	800d0cc <__malloc_unlock>
 800c650:	42a3      	cmp	r3, r4
 800c652:	d908      	bls.n	800c666 <_free_r+0x46>
 800c654:	6825      	ldr	r5, [r4, #0]
 800c656:	1961      	adds	r1, r4, r5
 800c658:	428b      	cmp	r3, r1
 800c65a:	bf01      	itttt	eq
 800c65c:	6819      	ldreq	r1, [r3, #0]
 800c65e:	685b      	ldreq	r3, [r3, #4]
 800c660:	1949      	addeq	r1, r1, r5
 800c662:	6021      	streq	r1, [r4, #0]
 800c664:	e7ed      	b.n	800c642 <_free_r+0x22>
 800c666:	461a      	mov	r2, r3
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	b10b      	cbz	r3, 800c670 <_free_r+0x50>
 800c66c:	42a3      	cmp	r3, r4
 800c66e:	d9fa      	bls.n	800c666 <_free_r+0x46>
 800c670:	6811      	ldr	r1, [r2, #0]
 800c672:	1855      	adds	r5, r2, r1
 800c674:	42a5      	cmp	r5, r4
 800c676:	d10b      	bne.n	800c690 <_free_r+0x70>
 800c678:	6824      	ldr	r4, [r4, #0]
 800c67a:	4421      	add	r1, r4
 800c67c:	1854      	adds	r4, r2, r1
 800c67e:	42a3      	cmp	r3, r4
 800c680:	6011      	str	r1, [r2, #0]
 800c682:	d1e0      	bne.n	800c646 <_free_r+0x26>
 800c684:	681c      	ldr	r4, [r3, #0]
 800c686:	685b      	ldr	r3, [r3, #4]
 800c688:	6053      	str	r3, [r2, #4]
 800c68a:	4421      	add	r1, r4
 800c68c:	6011      	str	r1, [r2, #0]
 800c68e:	e7da      	b.n	800c646 <_free_r+0x26>
 800c690:	d902      	bls.n	800c698 <_free_r+0x78>
 800c692:	230c      	movs	r3, #12
 800c694:	6003      	str	r3, [r0, #0]
 800c696:	e7d6      	b.n	800c646 <_free_r+0x26>
 800c698:	6825      	ldr	r5, [r4, #0]
 800c69a:	1961      	adds	r1, r4, r5
 800c69c:	428b      	cmp	r3, r1
 800c69e:	bf04      	itt	eq
 800c6a0:	6819      	ldreq	r1, [r3, #0]
 800c6a2:	685b      	ldreq	r3, [r3, #4]
 800c6a4:	6063      	str	r3, [r4, #4]
 800c6a6:	bf04      	itt	eq
 800c6a8:	1949      	addeq	r1, r1, r5
 800c6aa:	6021      	streq	r1, [r4, #0]
 800c6ac:	6054      	str	r4, [r2, #4]
 800c6ae:	e7ca      	b.n	800c646 <_free_r+0x26>
 800c6b0:	b003      	add	sp, #12
 800c6b2:	bd30      	pop	{r4, r5, pc}
 800c6b4:	20002bac 	.word	0x20002bac

0800c6b8 <sbrk_aligned>:
 800c6b8:	b570      	push	{r4, r5, r6, lr}
 800c6ba:	4e0e      	ldr	r6, [pc, #56]	; (800c6f4 <sbrk_aligned+0x3c>)
 800c6bc:	460c      	mov	r4, r1
 800c6be:	6831      	ldr	r1, [r6, #0]
 800c6c0:	4605      	mov	r5, r0
 800c6c2:	b911      	cbnz	r1, 800c6ca <sbrk_aligned+0x12>
 800c6c4:	f000 f984 	bl	800c9d0 <_sbrk_r>
 800c6c8:	6030      	str	r0, [r6, #0]
 800c6ca:	4621      	mov	r1, r4
 800c6cc:	4628      	mov	r0, r5
 800c6ce:	f000 f97f 	bl	800c9d0 <_sbrk_r>
 800c6d2:	1c43      	adds	r3, r0, #1
 800c6d4:	d00a      	beq.n	800c6ec <sbrk_aligned+0x34>
 800c6d6:	1cc4      	adds	r4, r0, #3
 800c6d8:	f024 0403 	bic.w	r4, r4, #3
 800c6dc:	42a0      	cmp	r0, r4
 800c6de:	d007      	beq.n	800c6f0 <sbrk_aligned+0x38>
 800c6e0:	1a21      	subs	r1, r4, r0
 800c6e2:	4628      	mov	r0, r5
 800c6e4:	f000 f974 	bl	800c9d0 <_sbrk_r>
 800c6e8:	3001      	adds	r0, #1
 800c6ea:	d101      	bne.n	800c6f0 <sbrk_aligned+0x38>
 800c6ec:	f04f 34ff 	mov.w	r4, #4294967295
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	bd70      	pop	{r4, r5, r6, pc}
 800c6f4:	20002bb0 	.word	0x20002bb0

0800c6f8 <_malloc_r>:
 800c6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6fc:	1ccd      	adds	r5, r1, #3
 800c6fe:	f025 0503 	bic.w	r5, r5, #3
 800c702:	3508      	adds	r5, #8
 800c704:	2d0c      	cmp	r5, #12
 800c706:	bf38      	it	cc
 800c708:	250c      	movcc	r5, #12
 800c70a:	2d00      	cmp	r5, #0
 800c70c:	4607      	mov	r7, r0
 800c70e:	db01      	blt.n	800c714 <_malloc_r+0x1c>
 800c710:	42a9      	cmp	r1, r5
 800c712:	d905      	bls.n	800c720 <_malloc_r+0x28>
 800c714:	230c      	movs	r3, #12
 800c716:	603b      	str	r3, [r7, #0]
 800c718:	2600      	movs	r6, #0
 800c71a:	4630      	mov	r0, r6
 800c71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c720:	4e2e      	ldr	r6, [pc, #184]	; (800c7dc <_malloc_r+0xe4>)
 800c722:	f000 fccd 	bl	800d0c0 <__malloc_lock>
 800c726:	6833      	ldr	r3, [r6, #0]
 800c728:	461c      	mov	r4, r3
 800c72a:	bb34      	cbnz	r4, 800c77a <_malloc_r+0x82>
 800c72c:	4629      	mov	r1, r5
 800c72e:	4638      	mov	r0, r7
 800c730:	f7ff ffc2 	bl	800c6b8 <sbrk_aligned>
 800c734:	1c43      	adds	r3, r0, #1
 800c736:	4604      	mov	r4, r0
 800c738:	d14d      	bne.n	800c7d6 <_malloc_r+0xde>
 800c73a:	6834      	ldr	r4, [r6, #0]
 800c73c:	4626      	mov	r6, r4
 800c73e:	2e00      	cmp	r6, #0
 800c740:	d140      	bne.n	800c7c4 <_malloc_r+0xcc>
 800c742:	6823      	ldr	r3, [r4, #0]
 800c744:	4631      	mov	r1, r6
 800c746:	4638      	mov	r0, r7
 800c748:	eb04 0803 	add.w	r8, r4, r3
 800c74c:	f000 f940 	bl	800c9d0 <_sbrk_r>
 800c750:	4580      	cmp	r8, r0
 800c752:	d13a      	bne.n	800c7ca <_malloc_r+0xd2>
 800c754:	6821      	ldr	r1, [r4, #0]
 800c756:	3503      	adds	r5, #3
 800c758:	1a6d      	subs	r5, r5, r1
 800c75a:	f025 0503 	bic.w	r5, r5, #3
 800c75e:	3508      	adds	r5, #8
 800c760:	2d0c      	cmp	r5, #12
 800c762:	bf38      	it	cc
 800c764:	250c      	movcc	r5, #12
 800c766:	4629      	mov	r1, r5
 800c768:	4638      	mov	r0, r7
 800c76a:	f7ff ffa5 	bl	800c6b8 <sbrk_aligned>
 800c76e:	3001      	adds	r0, #1
 800c770:	d02b      	beq.n	800c7ca <_malloc_r+0xd2>
 800c772:	6823      	ldr	r3, [r4, #0]
 800c774:	442b      	add	r3, r5
 800c776:	6023      	str	r3, [r4, #0]
 800c778:	e00e      	b.n	800c798 <_malloc_r+0xa0>
 800c77a:	6822      	ldr	r2, [r4, #0]
 800c77c:	1b52      	subs	r2, r2, r5
 800c77e:	d41e      	bmi.n	800c7be <_malloc_r+0xc6>
 800c780:	2a0b      	cmp	r2, #11
 800c782:	d916      	bls.n	800c7b2 <_malloc_r+0xba>
 800c784:	1961      	adds	r1, r4, r5
 800c786:	42a3      	cmp	r3, r4
 800c788:	6025      	str	r5, [r4, #0]
 800c78a:	bf18      	it	ne
 800c78c:	6059      	strne	r1, [r3, #4]
 800c78e:	6863      	ldr	r3, [r4, #4]
 800c790:	bf08      	it	eq
 800c792:	6031      	streq	r1, [r6, #0]
 800c794:	5162      	str	r2, [r4, r5]
 800c796:	604b      	str	r3, [r1, #4]
 800c798:	4638      	mov	r0, r7
 800c79a:	f104 060b 	add.w	r6, r4, #11
 800c79e:	f000 fc95 	bl	800d0cc <__malloc_unlock>
 800c7a2:	f026 0607 	bic.w	r6, r6, #7
 800c7a6:	1d23      	adds	r3, r4, #4
 800c7a8:	1af2      	subs	r2, r6, r3
 800c7aa:	d0b6      	beq.n	800c71a <_malloc_r+0x22>
 800c7ac:	1b9b      	subs	r3, r3, r6
 800c7ae:	50a3      	str	r3, [r4, r2]
 800c7b0:	e7b3      	b.n	800c71a <_malloc_r+0x22>
 800c7b2:	6862      	ldr	r2, [r4, #4]
 800c7b4:	42a3      	cmp	r3, r4
 800c7b6:	bf0c      	ite	eq
 800c7b8:	6032      	streq	r2, [r6, #0]
 800c7ba:	605a      	strne	r2, [r3, #4]
 800c7bc:	e7ec      	b.n	800c798 <_malloc_r+0xa0>
 800c7be:	4623      	mov	r3, r4
 800c7c0:	6864      	ldr	r4, [r4, #4]
 800c7c2:	e7b2      	b.n	800c72a <_malloc_r+0x32>
 800c7c4:	4634      	mov	r4, r6
 800c7c6:	6876      	ldr	r6, [r6, #4]
 800c7c8:	e7b9      	b.n	800c73e <_malloc_r+0x46>
 800c7ca:	230c      	movs	r3, #12
 800c7cc:	603b      	str	r3, [r7, #0]
 800c7ce:	4638      	mov	r0, r7
 800c7d0:	f000 fc7c 	bl	800d0cc <__malloc_unlock>
 800c7d4:	e7a1      	b.n	800c71a <_malloc_r+0x22>
 800c7d6:	6025      	str	r5, [r4, #0]
 800c7d8:	e7de      	b.n	800c798 <_malloc_r+0xa0>
 800c7da:	bf00      	nop
 800c7dc:	20002bac 	.word	0x20002bac

0800c7e0 <iprintf>:
 800c7e0:	b40f      	push	{r0, r1, r2, r3}
 800c7e2:	4b0a      	ldr	r3, [pc, #40]	; (800c80c <iprintf+0x2c>)
 800c7e4:	b513      	push	{r0, r1, r4, lr}
 800c7e6:	681c      	ldr	r4, [r3, #0]
 800c7e8:	b124      	cbz	r4, 800c7f4 <iprintf+0x14>
 800c7ea:	69a3      	ldr	r3, [r4, #24]
 800c7ec:	b913      	cbnz	r3, 800c7f4 <iprintf+0x14>
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	f7ff fe1a 	bl	800c428 <__sinit>
 800c7f4:	ab05      	add	r3, sp, #20
 800c7f6:	9a04      	ldr	r2, [sp, #16]
 800c7f8:	68a1      	ldr	r1, [r4, #8]
 800c7fa:	9301      	str	r3, [sp, #4]
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	f000 fdf1 	bl	800d3e4 <_vfiprintf_r>
 800c802:	b002      	add	sp, #8
 800c804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c808:	b004      	add	sp, #16
 800c80a:	4770      	bx	lr
 800c80c:	20000010 	.word	0x20000010

0800c810 <_puts_r>:
 800c810:	b570      	push	{r4, r5, r6, lr}
 800c812:	460e      	mov	r6, r1
 800c814:	4605      	mov	r5, r0
 800c816:	b118      	cbz	r0, 800c820 <_puts_r+0x10>
 800c818:	6983      	ldr	r3, [r0, #24]
 800c81a:	b90b      	cbnz	r3, 800c820 <_puts_r+0x10>
 800c81c:	f7ff fe04 	bl	800c428 <__sinit>
 800c820:	69ab      	ldr	r3, [r5, #24]
 800c822:	68ac      	ldr	r4, [r5, #8]
 800c824:	b913      	cbnz	r3, 800c82c <_puts_r+0x1c>
 800c826:	4628      	mov	r0, r5
 800c828:	f7ff fdfe 	bl	800c428 <__sinit>
 800c82c:	4b2c      	ldr	r3, [pc, #176]	; (800c8e0 <_puts_r+0xd0>)
 800c82e:	429c      	cmp	r4, r3
 800c830:	d120      	bne.n	800c874 <_puts_r+0x64>
 800c832:	686c      	ldr	r4, [r5, #4]
 800c834:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c836:	07db      	lsls	r3, r3, #31
 800c838:	d405      	bmi.n	800c846 <_puts_r+0x36>
 800c83a:	89a3      	ldrh	r3, [r4, #12]
 800c83c:	0598      	lsls	r0, r3, #22
 800c83e:	d402      	bmi.n	800c846 <_puts_r+0x36>
 800c840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c842:	f7ff feb4 	bl	800c5ae <__retarget_lock_acquire_recursive>
 800c846:	89a3      	ldrh	r3, [r4, #12]
 800c848:	0719      	lsls	r1, r3, #28
 800c84a:	d51d      	bpl.n	800c888 <_puts_r+0x78>
 800c84c:	6923      	ldr	r3, [r4, #16]
 800c84e:	b1db      	cbz	r3, 800c888 <_puts_r+0x78>
 800c850:	3e01      	subs	r6, #1
 800c852:	68a3      	ldr	r3, [r4, #8]
 800c854:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c858:	3b01      	subs	r3, #1
 800c85a:	60a3      	str	r3, [r4, #8]
 800c85c:	bb39      	cbnz	r1, 800c8ae <_puts_r+0x9e>
 800c85e:	2b00      	cmp	r3, #0
 800c860:	da38      	bge.n	800c8d4 <_puts_r+0xc4>
 800c862:	4622      	mov	r2, r4
 800c864:	210a      	movs	r1, #10
 800c866:	4628      	mov	r0, r5
 800c868:	f000 f9de 	bl	800cc28 <__swbuf_r>
 800c86c:	3001      	adds	r0, #1
 800c86e:	d011      	beq.n	800c894 <_puts_r+0x84>
 800c870:	250a      	movs	r5, #10
 800c872:	e011      	b.n	800c898 <_puts_r+0x88>
 800c874:	4b1b      	ldr	r3, [pc, #108]	; (800c8e4 <_puts_r+0xd4>)
 800c876:	429c      	cmp	r4, r3
 800c878:	d101      	bne.n	800c87e <_puts_r+0x6e>
 800c87a:	68ac      	ldr	r4, [r5, #8]
 800c87c:	e7da      	b.n	800c834 <_puts_r+0x24>
 800c87e:	4b1a      	ldr	r3, [pc, #104]	; (800c8e8 <_puts_r+0xd8>)
 800c880:	429c      	cmp	r4, r3
 800c882:	bf08      	it	eq
 800c884:	68ec      	ldreq	r4, [r5, #12]
 800c886:	e7d5      	b.n	800c834 <_puts_r+0x24>
 800c888:	4621      	mov	r1, r4
 800c88a:	4628      	mov	r0, r5
 800c88c:	f000 fa30 	bl	800ccf0 <__swsetup_r>
 800c890:	2800      	cmp	r0, #0
 800c892:	d0dd      	beq.n	800c850 <_puts_r+0x40>
 800c894:	f04f 35ff 	mov.w	r5, #4294967295
 800c898:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c89a:	07da      	lsls	r2, r3, #31
 800c89c:	d405      	bmi.n	800c8aa <_puts_r+0x9a>
 800c89e:	89a3      	ldrh	r3, [r4, #12]
 800c8a0:	059b      	lsls	r3, r3, #22
 800c8a2:	d402      	bmi.n	800c8aa <_puts_r+0x9a>
 800c8a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8a6:	f7ff fe83 	bl	800c5b0 <__retarget_lock_release_recursive>
 800c8aa:	4628      	mov	r0, r5
 800c8ac:	bd70      	pop	{r4, r5, r6, pc}
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	da04      	bge.n	800c8bc <_puts_r+0xac>
 800c8b2:	69a2      	ldr	r2, [r4, #24]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	dc06      	bgt.n	800c8c6 <_puts_r+0xb6>
 800c8b8:	290a      	cmp	r1, #10
 800c8ba:	d004      	beq.n	800c8c6 <_puts_r+0xb6>
 800c8bc:	6823      	ldr	r3, [r4, #0]
 800c8be:	1c5a      	adds	r2, r3, #1
 800c8c0:	6022      	str	r2, [r4, #0]
 800c8c2:	7019      	strb	r1, [r3, #0]
 800c8c4:	e7c5      	b.n	800c852 <_puts_r+0x42>
 800c8c6:	4622      	mov	r2, r4
 800c8c8:	4628      	mov	r0, r5
 800c8ca:	f000 f9ad 	bl	800cc28 <__swbuf_r>
 800c8ce:	3001      	adds	r0, #1
 800c8d0:	d1bf      	bne.n	800c852 <_puts_r+0x42>
 800c8d2:	e7df      	b.n	800c894 <_puts_r+0x84>
 800c8d4:	6823      	ldr	r3, [r4, #0]
 800c8d6:	250a      	movs	r5, #10
 800c8d8:	1c5a      	adds	r2, r3, #1
 800c8da:	6022      	str	r2, [r4, #0]
 800c8dc:	701d      	strb	r5, [r3, #0]
 800c8de:	e7db      	b.n	800c898 <_puts_r+0x88>
 800c8e0:	0800e4d8 	.word	0x0800e4d8
 800c8e4:	0800e4f8 	.word	0x0800e4f8
 800c8e8:	0800e4b8 	.word	0x0800e4b8

0800c8ec <puts>:
 800c8ec:	4b02      	ldr	r3, [pc, #8]	; (800c8f8 <puts+0xc>)
 800c8ee:	4601      	mov	r1, r0
 800c8f0:	6818      	ldr	r0, [r3, #0]
 800c8f2:	f7ff bf8d 	b.w	800c810 <_puts_r>
 800c8f6:	bf00      	nop
 800c8f8:	20000010 	.word	0x20000010

0800c8fc <cleanup_glue>:
 800c8fc:	b538      	push	{r3, r4, r5, lr}
 800c8fe:	460c      	mov	r4, r1
 800c900:	6809      	ldr	r1, [r1, #0]
 800c902:	4605      	mov	r5, r0
 800c904:	b109      	cbz	r1, 800c90a <cleanup_glue+0xe>
 800c906:	f7ff fff9 	bl	800c8fc <cleanup_glue>
 800c90a:	4621      	mov	r1, r4
 800c90c:	4628      	mov	r0, r5
 800c90e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c912:	f7ff be85 	b.w	800c620 <_free_r>
	...

0800c918 <_reclaim_reent>:
 800c918:	4b2c      	ldr	r3, [pc, #176]	; (800c9cc <_reclaim_reent+0xb4>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4283      	cmp	r3, r0
 800c91e:	b570      	push	{r4, r5, r6, lr}
 800c920:	4604      	mov	r4, r0
 800c922:	d051      	beq.n	800c9c8 <_reclaim_reent+0xb0>
 800c924:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c926:	b143      	cbz	r3, 800c93a <_reclaim_reent+0x22>
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d14a      	bne.n	800c9c4 <_reclaim_reent+0xac>
 800c92e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c930:	6819      	ldr	r1, [r3, #0]
 800c932:	b111      	cbz	r1, 800c93a <_reclaim_reent+0x22>
 800c934:	4620      	mov	r0, r4
 800c936:	f7ff fe73 	bl	800c620 <_free_r>
 800c93a:	6961      	ldr	r1, [r4, #20]
 800c93c:	b111      	cbz	r1, 800c944 <_reclaim_reent+0x2c>
 800c93e:	4620      	mov	r0, r4
 800c940:	f7ff fe6e 	bl	800c620 <_free_r>
 800c944:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c946:	b111      	cbz	r1, 800c94e <_reclaim_reent+0x36>
 800c948:	4620      	mov	r0, r4
 800c94a:	f7ff fe69 	bl	800c620 <_free_r>
 800c94e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c950:	b111      	cbz	r1, 800c958 <_reclaim_reent+0x40>
 800c952:	4620      	mov	r0, r4
 800c954:	f7ff fe64 	bl	800c620 <_free_r>
 800c958:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c95a:	b111      	cbz	r1, 800c962 <_reclaim_reent+0x4a>
 800c95c:	4620      	mov	r0, r4
 800c95e:	f7ff fe5f 	bl	800c620 <_free_r>
 800c962:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c964:	b111      	cbz	r1, 800c96c <_reclaim_reent+0x54>
 800c966:	4620      	mov	r0, r4
 800c968:	f7ff fe5a 	bl	800c620 <_free_r>
 800c96c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c96e:	b111      	cbz	r1, 800c976 <_reclaim_reent+0x5e>
 800c970:	4620      	mov	r0, r4
 800c972:	f7ff fe55 	bl	800c620 <_free_r>
 800c976:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c978:	b111      	cbz	r1, 800c980 <_reclaim_reent+0x68>
 800c97a:	4620      	mov	r0, r4
 800c97c:	f7ff fe50 	bl	800c620 <_free_r>
 800c980:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c982:	b111      	cbz	r1, 800c98a <_reclaim_reent+0x72>
 800c984:	4620      	mov	r0, r4
 800c986:	f7ff fe4b 	bl	800c620 <_free_r>
 800c98a:	69a3      	ldr	r3, [r4, #24]
 800c98c:	b1e3      	cbz	r3, 800c9c8 <_reclaim_reent+0xb0>
 800c98e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c990:	4620      	mov	r0, r4
 800c992:	4798      	blx	r3
 800c994:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c996:	b1b9      	cbz	r1, 800c9c8 <_reclaim_reent+0xb0>
 800c998:	4620      	mov	r0, r4
 800c99a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c99e:	f7ff bfad 	b.w	800c8fc <cleanup_glue>
 800c9a2:	5949      	ldr	r1, [r1, r5]
 800c9a4:	b941      	cbnz	r1, 800c9b8 <_reclaim_reent+0xa0>
 800c9a6:	3504      	adds	r5, #4
 800c9a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9aa:	2d80      	cmp	r5, #128	; 0x80
 800c9ac:	68d9      	ldr	r1, [r3, #12]
 800c9ae:	d1f8      	bne.n	800c9a2 <_reclaim_reent+0x8a>
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	f7ff fe35 	bl	800c620 <_free_r>
 800c9b6:	e7ba      	b.n	800c92e <_reclaim_reent+0x16>
 800c9b8:	680e      	ldr	r6, [r1, #0]
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	f7ff fe30 	bl	800c620 <_free_r>
 800c9c0:	4631      	mov	r1, r6
 800c9c2:	e7ef      	b.n	800c9a4 <_reclaim_reent+0x8c>
 800c9c4:	2500      	movs	r5, #0
 800c9c6:	e7ef      	b.n	800c9a8 <_reclaim_reent+0x90>
 800c9c8:	bd70      	pop	{r4, r5, r6, pc}
 800c9ca:	bf00      	nop
 800c9cc:	20000010 	.word	0x20000010

0800c9d0 <_sbrk_r>:
 800c9d0:	b538      	push	{r3, r4, r5, lr}
 800c9d2:	4d06      	ldr	r5, [pc, #24]	; (800c9ec <_sbrk_r+0x1c>)
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	4604      	mov	r4, r0
 800c9d8:	4608      	mov	r0, r1
 800c9da:	602b      	str	r3, [r5, #0]
 800c9dc:	f7f4 ff68 	bl	80018b0 <_sbrk>
 800c9e0:	1c43      	adds	r3, r0, #1
 800c9e2:	d102      	bne.n	800c9ea <_sbrk_r+0x1a>
 800c9e4:	682b      	ldr	r3, [r5, #0]
 800c9e6:	b103      	cbz	r3, 800c9ea <_sbrk_r+0x1a>
 800c9e8:	6023      	str	r3, [r4, #0]
 800c9ea:	bd38      	pop	{r3, r4, r5, pc}
 800c9ec:	20002bb4 	.word	0x20002bb4

0800c9f0 <sniprintf>:
 800c9f0:	b40c      	push	{r2, r3}
 800c9f2:	b530      	push	{r4, r5, lr}
 800c9f4:	4b17      	ldr	r3, [pc, #92]	; (800ca54 <sniprintf+0x64>)
 800c9f6:	1e0c      	subs	r4, r1, #0
 800c9f8:	681d      	ldr	r5, [r3, #0]
 800c9fa:	b09d      	sub	sp, #116	; 0x74
 800c9fc:	da08      	bge.n	800ca10 <sniprintf+0x20>
 800c9fe:	238b      	movs	r3, #139	; 0x8b
 800ca00:	602b      	str	r3, [r5, #0]
 800ca02:	f04f 30ff 	mov.w	r0, #4294967295
 800ca06:	b01d      	add	sp, #116	; 0x74
 800ca08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca0c:	b002      	add	sp, #8
 800ca0e:	4770      	bx	lr
 800ca10:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ca14:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ca18:	bf14      	ite	ne
 800ca1a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ca1e:	4623      	moveq	r3, r4
 800ca20:	9304      	str	r3, [sp, #16]
 800ca22:	9307      	str	r3, [sp, #28]
 800ca24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ca28:	9002      	str	r0, [sp, #8]
 800ca2a:	9006      	str	r0, [sp, #24]
 800ca2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ca30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ca32:	ab21      	add	r3, sp, #132	; 0x84
 800ca34:	a902      	add	r1, sp, #8
 800ca36:	4628      	mov	r0, r5
 800ca38:	9301      	str	r3, [sp, #4]
 800ca3a:	f000 fba9 	bl	800d190 <_svfiprintf_r>
 800ca3e:	1c43      	adds	r3, r0, #1
 800ca40:	bfbc      	itt	lt
 800ca42:	238b      	movlt	r3, #139	; 0x8b
 800ca44:	602b      	strlt	r3, [r5, #0]
 800ca46:	2c00      	cmp	r4, #0
 800ca48:	d0dd      	beq.n	800ca06 <sniprintf+0x16>
 800ca4a:	9b02      	ldr	r3, [sp, #8]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	701a      	strb	r2, [r3, #0]
 800ca50:	e7d9      	b.n	800ca06 <sniprintf+0x16>
 800ca52:	bf00      	nop
 800ca54:	20000010 	.word	0x20000010

0800ca58 <siprintf>:
 800ca58:	b40e      	push	{r1, r2, r3}
 800ca5a:	b500      	push	{lr}
 800ca5c:	b09c      	sub	sp, #112	; 0x70
 800ca5e:	ab1d      	add	r3, sp, #116	; 0x74
 800ca60:	9002      	str	r0, [sp, #8]
 800ca62:	9006      	str	r0, [sp, #24]
 800ca64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ca68:	4809      	ldr	r0, [pc, #36]	; (800ca90 <siprintf+0x38>)
 800ca6a:	9107      	str	r1, [sp, #28]
 800ca6c:	9104      	str	r1, [sp, #16]
 800ca6e:	4909      	ldr	r1, [pc, #36]	; (800ca94 <siprintf+0x3c>)
 800ca70:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca74:	9105      	str	r1, [sp, #20]
 800ca76:	6800      	ldr	r0, [r0, #0]
 800ca78:	9301      	str	r3, [sp, #4]
 800ca7a:	a902      	add	r1, sp, #8
 800ca7c:	f000 fb88 	bl	800d190 <_svfiprintf_r>
 800ca80:	9b02      	ldr	r3, [sp, #8]
 800ca82:	2200      	movs	r2, #0
 800ca84:	701a      	strb	r2, [r3, #0]
 800ca86:	b01c      	add	sp, #112	; 0x70
 800ca88:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca8c:	b003      	add	sp, #12
 800ca8e:	4770      	bx	lr
 800ca90:	20000010 	.word	0x20000010
 800ca94:	ffff0208 	.word	0xffff0208

0800ca98 <__sread>:
 800ca98:	b510      	push	{r4, lr}
 800ca9a:	460c      	mov	r4, r1
 800ca9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caa0:	f000 ff64 	bl	800d96c <_read_r>
 800caa4:	2800      	cmp	r0, #0
 800caa6:	bfab      	itete	ge
 800caa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800caaa:	89a3      	ldrhlt	r3, [r4, #12]
 800caac:	181b      	addge	r3, r3, r0
 800caae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cab2:	bfac      	ite	ge
 800cab4:	6563      	strge	r3, [r4, #84]	; 0x54
 800cab6:	81a3      	strhlt	r3, [r4, #12]
 800cab8:	bd10      	pop	{r4, pc}

0800caba <__swrite>:
 800caba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cabe:	461f      	mov	r7, r3
 800cac0:	898b      	ldrh	r3, [r1, #12]
 800cac2:	05db      	lsls	r3, r3, #23
 800cac4:	4605      	mov	r5, r0
 800cac6:	460c      	mov	r4, r1
 800cac8:	4616      	mov	r6, r2
 800caca:	d505      	bpl.n	800cad8 <__swrite+0x1e>
 800cacc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cad0:	2302      	movs	r3, #2
 800cad2:	2200      	movs	r2, #0
 800cad4:	f000 fa7c 	bl	800cfd0 <_lseek_r>
 800cad8:	89a3      	ldrh	r3, [r4, #12]
 800cada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cade:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cae2:	81a3      	strh	r3, [r4, #12]
 800cae4:	4632      	mov	r2, r6
 800cae6:	463b      	mov	r3, r7
 800cae8:	4628      	mov	r0, r5
 800caea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800caee:	f000 b8ed 	b.w	800cccc <_write_r>

0800caf2 <__sseek>:
 800caf2:	b510      	push	{r4, lr}
 800caf4:	460c      	mov	r4, r1
 800caf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cafa:	f000 fa69 	bl	800cfd0 <_lseek_r>
 800cafe:	1c43      	adds	r3, r0, #1
 800cb00:	89a3      	ldrh	r3, [r4, #12]
 800cb02:	bf15      	itete	ne
 800cb04:	6560      	strne	r0, [r4, #84]	; 0x54
 800cb06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cb0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cb0e:	81a3      	strheq	r3, [r4, #12]
 800cb10:	bf18      	it	ne
 800cb12:	81a3      	strhne	r3, [r4, #12]
 800cb14:	bd10      	pop	{r4, pc}

0800cb16 <__sclose>:
 800cb16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb1a:	f000 b975 	b.w	800ce08 <_close_r>

0800cb1e <strncpy>:
 800cb1e:	b510      	push	{r4, lr}
 800cb20:	3901      	subs	r1, #1
 800cb22:	4603      	mov	r3, r0
 800cb24:	b132      	cbz	r2, 800cb34 <strncpy+0x16>
 800cb26:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cb2a:	f803 4b01 	strb.w	r4, [r3], #1
 800cb2e:	3a01      	subs	r2, #1
 800cb30:	2c00      	cmp	r4, #0
 800cb32:	d1f7      	bne.n	800cb24 <strncpy+0x6>
 800cb34:	441a      	add	r2, r3
 800cb36:	2100      	movs	r1, #0
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d100      	bne.n	800cb3e <strncpy+0x20>
 800cb3c:	bd10      	pop	{r4, pc}
 800cb3e:	f803 1b01 	strb.w	r1, [r3], #1
 800cb42:	e7f9      	b.n	800cb38 <strncpy+0x1a>

0800cb44 <strstr>:
 800cb44:	780a      	ldrb	r2, [r1, #0]
 800cb46:	b570      	push	{r4, r5, r6, lr}
 800cb48:	b96a      	cbnz	r2, 800cb66 <strstr+0x22>
 800cb4a:	bd70      	pop	{r4, r5, r6, pc}
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d109      	bne.n	800cb64 <strstr+0x20>
 800cb50:	460c      	mov	r4, r1
 800cb52:	4605      	mov	r5, r0
 800cb54:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d0f6      	beq.n	800cb4a <strstr+0x6>
 800cb5c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800cb60:	429e      	cmp	r6, r3
 800cb62:	d0f7      	beq.n	800cb54 <strstr+0x10>
 800cb64:	3001      	adds	r0, #1
 800cb66:	7803      	ldrb	r3, [r0, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d1ef      	bne.n	800cb4c <strstr+0x8>
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	e7ec      	b.n	800cb4a <strstr+0x6>

0800cb70 <strtok>:
 800cb70:	4b16      	ldr	r3, [pc, #88]	; (800cbcc <strtok+0x5c>)
 800cb72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb74:	681e      	ldr	r6, [r3, #0]
 800cb76:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800cb78:	4605      	mov	r5, r0
 800cb7a:	b9fc      	cbnz	r4, 800cbbc <strtok+0x4c>
 800cb7c:	2050      	movs	r0, #80	; 0x50
 800cb7e:	9101      	str	r1, [sp, #4]
 800cb80:	f7ff fd18 	bl	800c5b4 <malloc>
 800cb84:	9901      	ldr	r1, [sp, #4]
 800cb86:	65b0      	str	r0, [r6, #88]	; 0x58
 800cb88:	4602      	mov	r2, r0
 800cb8a:	b920      	cbnz	r0, 800cb96 <strtok+0x26>
 800cb8c:	4b10      	ldr	r3, [pc, #64]	; (800cbd0 <strtok+0x60>)
 800cb8e:	4811      	ldr	r0, [pc, #68]	; (800cbd4 <strtok+0x64>)
 800cb90:	2157      	movs	r1, #87	; 0x57
 800cb92:	f000 f91b 	bl	800cdcc <__assert_func>
 800cb96:	e9c0 4400 	strd	r4, r4, [r0]
 800cb9a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800cb9e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800cba2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800cba6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800cbaa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800cbae:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800cbb2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800cbb6:	6184      	str	r4, [r0, #24]
 800cbb8:	7704      	strb	r4, [r0, #28]
 800cbba:	6244      	str	r4, [r0, #36]	; 0x24
 800cbbc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	4628      	mov	r0, r5
 800cbc2:	b002      	add	sp, #8
 800cbc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cbc8:	f000 b806 	b.w	800cbd8 <__strtok_r>
 800cbcc:	20000010 	.word	0x20000010
 800cbd0:	0800e51c 	.word	0x0800e51c
 800cbd4:	0800e533 	.word	0x0800e533

0800cbd8 <__strtok_r>:
 800cbd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbda:	b908      	cbnz	r0, 800cbe0 <__strtok_r+0x8>
 800cbdc:	6810      	ldr	r0, [r2, #0]
 800cbde:	b188      	cbz	r0, 800cc04 <__strtok_r+0x2c>
 800cbe0:	4604      	mov	r4, r0
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800cbe8:	460f      	mov	r7, r1
 800cbea:	f817 6b01 	ldrb.w	r6, [r7], #1
 800cbee:	b91e      	cbnz	r6, 800cbf8 <__strtok_r+0x20>
 800cbf0:	b965      	cbnz	r5, 800cc0c <__strtok_r+0x34>
 800cbf2:	6015      	str	r5, [r2, #0]
 800cbf4:	4628      	mov	r0, r5
 800cbf6:	e005      	b.n	800cc04 <__strtok_r+0x2c>
 800cbf8:	42b5      	cmp	r5, r6
 800cbfa:	d1f6      	bne.n	800cbea <__strtok_r+0x12>
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d1f0      	bne.n	800cbe2 <__strtok_r+0xa>
 800cc00:	6014      	str	r4, [r2, #0]
 800cc02:	7003      	strb	r3, [r0, #0]
 800cc04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc06:	461c      	mov	r4, r3
 800cc08:	e00c      	b.n	800cc24 <__strtok_r+0x4c>
 800cc0a:	b915      	cbnz	r5, 800cc12 <__strtok_r+0x3a>
 800cc0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cc10:	460e      	mov	r6, r1
 800cc12:	f816 5b01 	ldrb.w	r5, [r6], #1
 800cc16:	42ab      	cmp	r3, r5
 800cc18:	d1f7      	bne.n	800cc0a <__strtok_r+0x32>
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d0f3      	beq.n	800cc06 <__strtok_r+0x2e>
 800cc1e:	2300      	movs	r3, #0
 800cc20:	f804 3c01 	strb.w	r3, [r4, #-1]
 800cc24:	6014      	str	r4, [r2, #0]
 800cc26:	e7ed      	b.n	800cc04 <__strtok_r+0x2c>

0800cc28 <__swbuf_r>:
 800cc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc2a:	460e      	mov	r6, r1
 800cc2c:	4614      	mov	r4, r2
 800cc2e:	4605      	mov	r5, r0
 800cc30:	b118      	cbz	r0, 800cc3a <__swbuf_r+0x12>
 800cc32:	6983      	ldr	r3, [r0, #24]
 800cc34:	b90b      	cbnz	r3, 800cc3a <__swbuf_r+0x12>
 800cc36:	f7ff fbf7 	bl	800c428 <__sinit>
 800cc3a:	4b21      	ldr	r3, [pc, #132]	; (800ccc0 <__swbuf_r+0x98>)
 800cc3c:	429c      	cmp	r4, r3
 800cc3e:	d12b      	bne.n	800cc98 <__swbuf_r+0x70>
 800cc40:	686c      	ldr	r4, [r5, #4]
 800cc42:	69a3      	ldr	r3, [r4, #24]
 800cc44:	60a3      	str	r3, [r4, #8]
 800cc46:	89a3      	ldrh	r3, [r4, #12]
 800cc48:	071a      	lsls	r2, r3, #28
 800cc4a:	d52f      	bpl.n	800ccac <__swbuf_r+0x84>
 800cc4c:	6923      	ldr	r3, [r4, #16]
 800cc4e:	b36b      	cbz	r3, 800ccac <__swbuf_r+0x84>
 800cc50:	6923      	ldr	r3, [r4, #16]
 800cc52:	6820      	ldr	r0, [r4, #0]
 800cc54:	1ac0      	subs	r0, r0, r3
 800cc56:	6963      	ldr	r3, [r4, #20]
 800cc58:	b2f6      	uxtb	r6, r6
 800cc5a:	4283      	cmp	r3, r0
 800cc5c:	4637      	mov	r7, r6
 800cc5e:	dc04      	bgt.n	800cc6a <__swbuf_r+0x42>
 800cc60:	4621      	mov	r1, r4
 800cc62:	4628      	mov	r0, r5
 800cc64:	f000 f966 	bl	800cf34 <_fflush_r>
 800cc68:	bb30      	cbnz	r0, 800ccb8 <__swbuf_r+0x90>
 800cc6a:	68a3      	ldr	r3, [r4, #8]
 800cc6c:	3b01      	subs	r3, #1
 800cc6e:	60a3      	str	r3, [r4, #8]
 800cc70:	6823      	ldr	r3, [r4, #0]
 800cc72:	1c5a      	adds	r2, r3, #1
 800cc74:	6022      	str	r2, [r4, #0]
 800cc76:	701e      	strb	r6, [r3, #0]
 800cc78:	6963      	ldr	r3, [r4, #20]
 800cc7a:	3001      	adds	r0, #1
 800cc7c:	4283      	cmp	r3, r0
 800cc7e:	d004      	beq.n	800cc8a <__swbuf_r+0x62>
 800cc80:	89a3      	ldrh	r3, [r4, #12]
 800cc82:	07db      	lsls	r3, r3, #31
 800cc84:	d506      	bpl.n	800cc94 <__swbuf_r+0x6c>
 800cc86:	2e0a      	cmp	r6, #10
 800cc88:	d104      	bne.n	800cc94 <__swbuf_r+0x6c>
 800cc8a:	4621      	mov	r1, r4
 800cc8c:	4628      	mov	r0, r5
 800cc8e:	f000 f951 	bl	800cf34 <_fflush_r>
 800cc92:	b988      	cbnz	r0, 800ccb8 <__swbuf_r+0x90>
 800cc94:	4638      	mov	r0, r7
 800cc96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc98:	4b0a      	ldr	r3, [pc, #40]	; (800ccc4 <__swbuf_r+0x9c>)
 800cc9a:	429c      	cmp	r4, r3
 800cc9c:	d101      	bne.n	800cca2 <__swbuf_r+0x7a>
 800cc9e:	68ac      	ldr	r4, [r5, #8]
 800cca0:	e7cf      	b.n	800cc42 <__swbuf_r+0x1a>
 800cca2:	4b09      	ldr	r3, [pc, #36]	; (800ccc8 <__swbuf_r+0xa0>)
 800cca4:	429c      	cmp	r4, r3
 800cca6:	bf08      	it	eq
 800cca8:	68ec      	ldreq	r4, [r5, #12]
 800ccaa:	e7ca      	b.n	800cc42 <__swbuf_r+0x1a>
 800ccac:	4621      	mov	r1, r4
 800ccae:	4628      	mov	r0, r5
 800ccb0:	f000 f81e 	bl	800ccf0 <__swsetup_r>
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	d0cb      	beq.n	800cc50 <__swbuf_r+0x28>
 800ccb8:	f04f 37ff 	mov.w	r7, #4294967295
 800ccbc:	e7ea      	b.n	800cc94 <__swbuf_r+0x6c>
 800ccbe:	bf00      	nop
 800ccc0:	0800e4d8 	.word	0x0800e4d8
 800ccc4:	0800e4f8 	.word	0x0800e4f8
 800ccc8:	0800e4b8 	.word	0x0800e4b8

0800cccc <_write_r>:
 800cccc:	b538      	push	{r3, r4, r5, lr}
 800ccce:	4d07      	ldr	r5, [pc, #28]	; (800ccec <_write_r+0x20>)
 800ccd0:	4604      	mov	r4, r0
 800ccd2:	4608      	mov	r0, r1
 800ccd4:	4611      	mov	r1, r2
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	602a      	str	r2, [r5, #0]
 800ccda:	461a      	mov	r2, r3
 800ccdc:	f7f4 fd97 	bl	800180e <_write>
 800cce0:	1c43      	adds	r3, r0, #1
 800cce2:	d102      	bne.n	800ccea <_write_r+0x1e>
 800cce4:	682b      	ldr	r3, [r5, #0]
 800cce6:	b103      	cbz	r3, 800ccea <_write_r+0x1e>
 800cce8:	6023      	str	r3, [r4, #0]
 800ccea:	bd38      	pop	{r3, r4, r5, pc}
 800ccec:	20002bb4 	.word	0x20002bb4

0800ccf0 <__swsetup_r>:
 800ccf0:	4b32      	ldr	r3, [pc, #200]	; (800cdbc <__swsetup_r+0xcc>)
 800ccf2:	b570      	push	{r4, r5, r6, lr}
 800ccf4:	681d      	ldr	r5, [r3, #0]
 800ccf6:	4606      	mov	r6, r0
 800ccf8:	460c      	mov	r4, r1
 800ccfa:	b125      	cbz	r5, 800cd06 <__swsetup_r+0x16>
 800ccfc:	69ab      	ldr	r3, [r5, #24]
 800ccfe:	b913      	cbnz	r3, 800cd06 <__swsetup_r+0x16>
 800cd00:	4628      	mov	r0, r5
 800cd02:	f7ff fb91 	bl	800c428 <__sinit>
 800cd06:	4b2e      	ldr	r3, [pc, #184]	; (800cdc0 <__swsetup_r+0xd0>)
 800cd08:	429c      	cmp	r4, r3
 800cd0a:	d10f      	bne.n	800cd2c <__swsetup_r+0x3c>
 800cd0c:	686c      	ldr	r4, [r5, #4]
 800cd0e:	89a3      	ldrh	r3, [r4, #12]
 800cd10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd14:	0719      	lsls	r1, r3, #28
 800cd16:	d42c      	bmi.n	800cd72 <__swsetup_r+0x82>
 800cd18:	06dd      	lsls	r5, r3, #27
 800cd1a:	d411      	bmi.n	800cd40 <__swsetup_r+0x50>
 800cd1c:	2309      	movs	r3, #9
 800cd1e:	6033      	str	r3, [r6, #0]
 800cd20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd24:	81a3      	strh	r3, [r4, #12]
 800cd26:	f04f 30ff 	mov.w	r0, #4294967295
 800cd2a:	e03e      	b.n	800cdaa <__swsetup_r+0xba>
 800cd2c:	4b25      	ldr	r3, [pc, #148]	; (800cdc4 <__swsetup_r+0xd4>)
 800cd2e:	429c      	cmp	r4, r3
 800cd30:	d101      	bne.n	800cd36 <__swsetup_r+0x46>
 800cd32:	68ac      	ldr	r4, [r5, #8]
 800cd34:	e7eb      	b.n	800cd0e <__swsetup_r+0x1e>
 800cd36:	4b24      	ldr	r3, [pc, #144]	; (800cdc8 <__swsetup_r+0xd8>)
 800cd38:	429c      	cmp	r4, r3
 800cd3a:	bf08      	it	eq
 800cd3c:	68ec      	ldreq	r4, [r5, #12]
 800cd3e:	e7e6      	b.n	800cd0e <__swsetup_r+0x1e>
 800cd40:	0758      	lsls	r0, r3, #29
 800cd42:	d512      	bpl.n	800cd6a <__swsetup_r+0x7a>
 800cd44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd46:	b141      	cbz	r1, 800cd5a <__swsetup_r+0x6a>
 800cd48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd4c:	4299      	cmp	r1, r3
 800cd4e:	d002      	beq.n	800cd56 <__swsetup_r+0x66>
 800cd50:	4630      	mov	r0, r6
 800cd52:	f7ff fc65 	bl	800c620 <_free_r>
 800cd56:	2300      	movs	r3, #0
 800cd58:	6363      	str	r3, [r4, #52]	; 0x34
 800cd5a:	89a3      	ldrh	r3, [r4, #12]
 800cd5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd60:	81a3      	strh	r3, [r4, #12]
 800cd62:	2300      	movs	r3, #0
 800cd64:	6063      	str	r3, [r4, #4]
 800cd66:	6923      	ldr	r3, [r4, #16]
 800cd68:	6023      	str	r3, [r4, #0]
 800cd6a:	89a3      	ldrh	r3, [r4, #12]
 800cd6c:	f043 0308 	orr.w	r3, r3, #8
 800cd70:	81a3      	strh	r3, [r4, #12]
 800cd72:	6923      	ldr	r3, [r4, #16]
 800cd74:	b94b      	cbnz	r3, 800cd8a <__swsetup_r+0x9a>
 800cd76:	89a3      	ldrh	r3, [r4, #12]
 800cd78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd80:	d003      	beq.n	800cd8a <__swsetup_r+0x9a>
 800cd82:	4621      	mov	r1, r4
 800cd84:	4630      	mov	r0, r6
 800cd86:	f000 f95b 	bl	800d040 <__smakebuf_r>
 800cd8a:	89a0      	ldrh	r0, [r4, #12]
 800cd8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd90:	f010 0301 	ands.w	r3, r0, #1
 800cd94:	d00a      	beq.n	800cdac <__swsetup_r+0xbc>
 800cd96:	2300      	movs	r3, #0
 800cd98:	60a3      	str	r3, [r4, #8]
 800cd9a:	6963      	ldr	r3, [r4, #20]
 800cd9c:	425b      	negs	r3, r3
 800cd9e:	61a3      	str	r3, [r4, #24]
 800cda0:	6923      	ldr	r3, [r4, #16]
 800cda2:	b943      	cbnz	r3, 800cdb6 <__swsetup_r+0xc6>
 800cda4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cda8:	d1ba      	bne.n	800cd20 <__swsetup_r+0x30>
 800cdaa:	bd70      	pop	{r4, r5, r6, pc}
 800cdac:	0781      	lsls	r1, r0, #30
 800cdae:	bf58      	it	pl
 800cdb0:	6963      	ldrpl	r3, [r4, #20]
 800cdb2:	60a3      	str	r3, [r4, #8]
 800cdb4:	e7f4      	b.n	800cda0 <__swsetup_r+0xb0>
 800cdb6:	2000      	movs	r0, #0
 800cdb8:	e7f7      	b.n	800cdaa <__swsetup_r+0xba>
 800cdba:	bf00      	nop
 800cdbc:	20000010 	.word	0x20000010
 800cdc0:	0800e4d8 	.word	0x0800e4d8
 800cdc4:	0800e4f8 	.word	0x0800e4f8
 800cdc8:	0800e4b8 	.word	0x0800e4b8

0800cdcc <__assert_func>:
 800cdcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cdce:	4614      	mov	r4, r2
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	4b09      	ldr	r3, [pc, #36]	; (800cdf8 <__assert_func+0x2c>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	4605      	mov	r5, r0
 800cdd8:	68d8      	ldr	r0, [r3, #12]
 800cdda:	b14c      	cbz	r4, 800cdf0 <__assert_func+0x24>
 800cddc:	4b07      	ldr	r3, [pc, #28]	; (800cdfc <__assert_func+0x30>)
 800cdde:	9100      	str	r1, [sp, #0]
 800cde0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cde4:	4906      	ldr	r1, [pc, #24]	; (800ce00 <__assert_func+0x34>)
 800cde6:	462b      	mov	r3, r5
 800cde8:	f000 f8e0 	bl	800cfac <fiprintf>
 800cdec:	f000 fdd0 	bl	800d990 <abort>
 800cdf0:	4b04      	ldr	r3, [pc, #16]	; (800ce04 <__assert_func+0x38>)
 800cdf2:	461c      	mov	r4, r3
 800cdf4:	e7f3      	b.n	800cdde <__assert_func+0x12>
 800cdf6:	bf00      	nop
 800cdf8:	20000010 	.word	0x20000010
 800cdfc:	0800e590 	.word	0x0800e590
 800ce00:	0800e59d 	.word	0x0800e59d
 800ce04:	0800e5cb 	.word	0x0800e5cb

0800ce08 <_close_r>:
 800ce08:	b538      	push	{r3, r4, r5, lr}
 800ce0a:	4d06      	ldr	r5, [pc, #24]	; (800ce24 <_close_r+0x1c>)
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	4604      	mov	r4, r0
 800ce10:	4608      	mov	r0, r1
 800ce12:	602b      	str	r3, [r5, #0]
 800ce14:	f7f4 fd17 	bl	8001846 <_close>
 800ce18:	1c43      	adds	r3, r0, #1
 800ce1a:	d102      	bne.n	800ce22 <_close_r+0x1a>
 800ce1c:	682b      	ldr	r3, [r5, #0]
 800ce1e:	b103      	cbz	r3, 800ce22 <_close_r+0x1a>
 800ce20:	6023      	str	r3, [r4, #0]
 800ce22:	bd38      	pop	{r3, r4, r5, pc}
 800ce24:	20002bb4 	.word	0x20002bb4

0800ce28 <__sflush_r>:
 800ce28:	898a      	ldrh	r2, [r1, #12]
 800ce2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce2e:	4605      	mov	r5, r0
 800ce30:	0710      	lsls	r0, r2, #28
 800ce32:	460c      	mov	r4, r1
 800ce34:	d458      	bmi.n	800cee8 <__sflush_r+0xc0>
 800ce36:	684b      	ldr	r3, [r1, #4]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	dc05      	bgt.n	800ce48 <__sflush_r+0x20>
 800ce3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	dc02      	bgt.n	800ce48 <__sflush_r+0x20>
 800ce42:	2000      	movs	r0, #0
 800ce44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce4a:	2e00      	cmp	r6, #0
 800ce4c:	d0f9      	beq.n	800ce42 <__sflush_r+0x1a>
 800ce4e:	2300      	movs	r3, #0
 800ce50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce54:	682f      	ldr	r7, [r5, #0]
 800ce56:	602b      	str	r3, [r5, #0]
 800ce58:	d032      	beq.n	800cec0 <__sflush_r+0x98>
 800ce5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce5c:	89a3      	ldrh	r3, [r4, #12]
 800ce5e:	075a      	lsls	r2, r3, #29
 800ce60:	d505      	bpl.n	800ce6e <__sflush_r+0x46>
 800ce62:	6863      	ldr	r3, [r4, #4]
 800ce64:	1ac0      	subs	r0, r0, r3
 800ce66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce68:	b10b      	cbz	r3, 800ce6e <__sflush_r+0x46>
 800ce6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce6c:	1ac0      	subs	r0, r0, r3
 800ce6e:	2300      	movs	r3, #0
 800ce70:	4602      	mov	r2, r0
 800ce72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce74:	6a21      	ldr	r1, [r4, #32]
 800ce76:	4628      	mov	r0, r5
 800ce78:	47b0      	blx	r6
 800ce7a:	1c43      	adds	r3, r0, #1
 800ce7c:	89a3      	ldrh	r3, [r4, #12]
 800ce7e:	d106      	bne.n	800ce8e <__sflush_r+0x66>
 800ce80:	6829      	ldr	r1, [r5, #0]
 800ce82:	291d      	cmp	r1, #29
 800ce84:	d82c      	bhi.n	800cee0 <__sflush_r+0xb8>
 800ce86:	4a2a      	ldr	r2, [pc, #168]	; (800cf30 <__sflush_r+0x108>)
 800ce88:	40ca      	lsrs	r2, r1
 800ce8a:	07d6      	lsls	r6, r2, #31
 800ce8c:	d528      	bpl.n	800cee0 <__sflush_r+0xb8>
 800ce8e:	2200      	movs	r2, #0
 800ce90:	6062      	str	r2, [r4, #4]
 800ce92:	04d9      	lsls	r1, r3, #19
 800ce94:	6922      	ldr	r2, [r4, #16]
 800ce96:	6022      	str	r2, [r4, #0]
 800ce98:	d504      	bpl.n	800cea4 <__sflush_r+0x7c>
 800ce9a:	1c42      	adds	r2, r0, #1
 800ce9c:	d101      	bne.n	800cea2 <__sflush_r+0x7a>
 800ce9e:	682b      	ldr	r3, [r5, #0]
 800cea0:	b903      	cbnz	r3, 800cea4 <__sflush_r+0x7c>
 800cea2:	6560      	str	r0, [r4, #84]	; 0x54
 800cea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cea6:	602f      	str	r7, [r5, #0]
 800cea8:	2900      	cmp	r1, #0
 800ceaa:	d0ca      	beq.n	800ce42 <__sflush_r+0x1a>
 800ceac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ceb0:	4299      	cmp	r1, r3
 800ceb2:	d002      	beq.n	800ceba <__sflush_r+0x92>
 800ceb4:	4628      	mov	r0, r5
 800ceb6:	f7ff fbb3 	bl	800c620 <_free_r>
 800ceba:	2000      	movs	r0, #0
 800cebc:	6360      	str	r0, [r4, #52]	; 0x34
 800cebe:	e7c1      	b.n	800ce44 <__sflush_r+0x1c>
 800cec0:	6a21      	ldr	r1, [r4, #32]
 800cec2:	2301      	movs	r3, #1
 800cec4:	4628      	mov	r0, r5
 800cec6:	47b0      	blx	r6
 800cec8:	1c41      	adds	r1, r0, #1
 800ceca:	d1c7      	bne.n	800ce5c <__sflush_r+0x34>
 800cecc:	682b      	ldr	r3, [r5, #0]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d0c4      	beq.n	800ce5c <__sflush_r+0x34>
 800ced2:	2b1d      	cmp	r3, #29
 800ced4:	d001      	beq.n	800ceda <__sflush_r+0xb2>
 800ced6:	2b16      	cmp	r3, #22
 800ced8:	d101      	bne.n	800cede <__sflush_r+0xb6>
 800ceda:	602f      	str	r7, [r5, #0]
 800cedc:	e7b1      	b.n	800ce42 <__sflush_r+0x1a>
 800cede:	89a3      	ldrh	r3, [r4, #12]
 800cee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cee4:	81a3      	strh	r3, [r4, #12]
 800cee6:	e7ad      	b.n	800ce44 <__sflush_r+0x1c>
 800cee8:	690f      	ldr	r7, [r1, #16]
 800ceea:	2f00      	cmp	r7, #0
 800ceec:	d0a9      	beq.n	800ce42 <__sflush_r+0x1a>
 800ceee:	0793      	lsls	r3, r2, #30
 800cef0:	680e      	ldr	r6, [r1, #0]
 800cef2:	bf08      	it	eq
 800cef4:	694b      	ldreq	r3, [r1, #20]
 800cef6:	600f      	str	r7, [r1, #0]
 800cef8:	bf18      	it	ne
 800cefa:	2300      	movne	r3, #0
 800cefc:	eba6 0807 	sub.w	r8, r6, r7
 800cf00:	608b      	str	r3, [r1, #8]
 800cf02:	f1b8 0f00 	cmp.w	r8, #0
 800cf06:	dd9c      	ble.n	800ce42 <__sflush_r+0x1a>
 800cf08:	6a21      	ldr	r1, [r4, #32]
 800cf0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cf0c:	4643      	mov	r3, r8
 800cf0e:	463a      	mov	r2, r7
 800cf10:	4628      	mov	r0, r5
 800cf12:	47b0      	blx	r6
 800cf14:	2800      	cmp	r0, #0
 800cf16:	dc06      	bgt.n	800cf26 <__sflush_r+0xfe>
 800cf18:	89a3      	ldrh	r3, [r4, #12]
 800cf1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf1e:	81a3      	strh	r3, [r4, #12]
 800cf20:	f04f 30ff 	mov.w	r0, #4294967295
 800cf24:	e78e      	b.n	800ce44 <__sflush_r+0x1c>
 800cf26:	4407      	add	r7, r0
 800cf28:	eba8 0800 	sub.w	r8, r8, r0
 800cf2c:	e7e9      	b.n	800cf02 <__sflush_r+0xda>
 800cf2e:	bf00      	nop
 800cf30:	20400001 	.word	0x20400001

0800cf34 <_fflush_r>:
 800cf34:	b538      	push	{r3, r4, r5, lr}
 800cf36:	690b      	ldr	r3, [r1, #16]
 800cf38:	4605      	mov	r5, r0
 800cf3a:	460c      	mov	r4, r1
 800cf3c:	b913      	cbnz	r3, 800cf44 <_fflush_r+0x10>
 800cf3e:	2500      	movs	r5, #0
 800cf40:	4628      	mov	r0, r5
 800cf42:	bd38      	pop	{r3, r4, r5, pc}
 800cf44:	b118      	cbz	r0, 800cf4e <_fflush_r+0x1a>
 800cf46:	6983      	ldr	r3, [r0, #24]
 800cf48:	b90b      	cbnz	r3, 800cf4e <_fflush_r+0x1a>
 800cf4a:	f7ff fa6d 	bl	800c428 <__sinit>
 800cf4e:	4b14      	ldr	r3, [pc, #80]	; (800cfa0 <_fflush_r+0x6c>)
 800cf50:	429c      	cmp	r4, r3
 800cf52:	d11b      	bne.n	800cf8c <_fflush_r+0x58>
 800cf54:	686c      	ldr	r4, [r5, #4]
 800cf56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d0ef      	beq.n	800cf3e <_fflush_r+0xa>
 800cf5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf60:	07d0      	lsls	r0, r2, #31
 800cf62:	d404      	bmi.n	800cf6e <_fflush_r+0x3a>
 800cf64:	0599      	lsls	r1, r3, #22
 800cf66:	d402      	bmi.n	800cf6e <_fflush_r+0x3a>
 800cf68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf6a:	f7ff fb20 	bl	800c5ae <__retarget_lock_acquire_recursive>
 800cf6e:	4628      	mov	r0, r5
 800cf70:	4621      	mov	r1, r4
 800cf72:	f7ff ff59 	bl	800ce28 <__sflush_r>
 800cf76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf78:	07da      	lsls	r2, r3, #31
 800cf7a:	4605      	mov	r5, r0
 800cf7c:	d4e0      	bmi.n	800cf40 <_fflush_r+0xc>
 800cf7e:	89a3      	ldrh	r3, [r4, #12]
 800cf80:	059b      	lsls	r3, r3, #22
 800cf82:	d4dd      	bmi.n	800cf40 <_fflush_r+0xc>
 800cf84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf86:	f7ff fb13 	bl	800c5b0 <__retarget_lock_release_recursive>
 800cf8a:	e7d9      	b.n	800cf40 <_fflush_r+0xc>
 800cf8c:	4b05      	ldr	r3, [pc, #20]	; (800cfa4 <_fflush_r+0x70>)
 800cf8e:	429c      	cmp	r4, r3
 800cf90:	d101      	bne.n	800cf96 <_fflush_r+0x62>
 800cf92:	68ac      	ldr	r4, [r5, #8]
 800cf94:	e7df      	b.n	800cf56 <_fflush_r+0x22>
 800cf96:	4b04      	ldr	r3, [pc, #16]	; (800cfa8 <_fflush_r+0x74>)
 800cf98:	429c      	cmp	r4, r3
 800cf9a:	bf08      	it	eq
 800cf9c:	68ec      	ldreq	r4, [r5, #12]
 800cf9e:	e7da      	b.n	800cf56 <_fflush_r+0x22>
 800cfa0:	0800e4d8 	.word	0x0800e4d8
 800cfa4:	0800e4f8 	.word	0x0800e4f8
 800cfa8:	0800e4b8 	.word	0x0800e4b8

0800cfac <fiprintf>:
 800cfac:	b40e      	push	{r1, r2, r3}
 800cfae:	b503      	push	{r0, r1, lr}
 800cfb0:	4601      	mov	r1, r0
 800cfb2:	ab03      	add	r3, sp, #12
 800cfb4:	4805      	ldr	r0, [pc, #20]	; (800cfcc <fiprintf+0x20>)
 800cfb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfba:	6800      	ldr	r0, [r0, #0]
 800cfbc:	9301      	str	r3, [sp, #4]
 800cfbe:	f000 fa11 	bl	800d3e4 <_vfiprintf_r>
 800cfc2:	b002      	add	sp, #8
 800cfc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfc8:	b003      	add	sp, #12
 800cfca:	4770      	bx	lr
 800cfcc:	20000010 	.word	0x20000010

0800cfd0 <_lseek_r>:
 800cfd0:	b538      	push	{r3, r4, r5, lr}
 800cfd2:	4d07      	ldr	r5, [pc, #28]	; (800cff0 <_lseek_r+0x20>)
 800cfd4:	4604      	mov	r4, r0
 800cfd6:	4608      	mov	r0, r1
 800cfd8:	4611      	mov	r1, r2
 800cfda:	2200      	movs	r2, #0
 800cfdc:	602a      	str	r2, [r5, #0]
 800cfde:	461a      	mov	r2, r3
 800cfe0:	f7f4 fc58 	bl	8001894 <_lseek>
 800cfe4:	1c43      	adds	r3, r0, #1
 800cfe6:	d102      	bne.n	800cfee <_lseek_r+0x1e>
 800cfe8:	682b      	ldr	r3, [r5, #0]
 800cfea:	b103      	cbz	r3, 800cfee <_lseek_r+0x1e>
 800cfec:	6023      	str	r3, [r4, #0]
 800cfee:	bd38      	pop	{r3, r4, r5, pc}
 800cff0:	20002bb4 	.word	0x20002bb4

0800cff4 <__swhatbuf_r>:
 800cff4:	b570      	push	{r4, r5, r6, lr}
 800cff6:	460e      	mov	r6, r1
 800cff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cffc:	2900      	cmp	r1, #0
 800cffe:	b096      	sub	sp, #88	; 0x58
 800d000:	4614      	mov	r4, r2
 800d002:	461d      	mov	r5, r3
 800d004:	da08      	bge.n	800d018 <__swhatbuf_r+0x24>
 800d006:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d00a:	2200      	movs	r2, #0
 800d00c:	602a      	str	r2, [r5, #0]
 800d00e:	061a      	lsls	r2, r3, #24
 800d010:	d410      	bmi.n	800d034 <__swhatbuf_r+0x40>
 800d012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d016:	e00e      	b.n	800d036 <__swhatbuf_r+0x42>
 800d018:	466a      	mov	r2, sp
 800d01a:	f000 fcc1 	bl	800d9a0 <_fstat_r>
 800d01e:	2800      	cmp	r0, #0
 800d020:	dbf1      	blt.n	800d006 <__swhatbuf_r+0x12>
 800d022:	9a01      	ldr	r2, [sp, #4]
 800d024:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d028:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d02c:	425a      	negs	r2, r3
 800d02e:	415a      	adcs	r2, r3
 800d030:	602a      	str	r2, [r5, #0]
 800d032:	e7ee      	b.n	800d012 <__swhatbuf_r+0x1e>
 800d034:	2340      	movs	r3, #64	; 0x40
 800d036:	2000      	movs	r0, #0
 800d038:	6023      	str	r3, [r4, #0]
 800d03a:	b016      	add	sp, #88	; 0x58
 800d03c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d040 <__smakebuf_r>:
 800d040:	898b      	ldrh	r3, [r1, #12]
 800d042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d044:	079d      	lsls	r5, r3, #30
 800d046:	4606      	mov	r6, r0
 800d048:	460c      	mov	r4, r1
 800d04a:	d507      	bpl.n	800d05c <__smakebuf_r+0x1c>
 800d04c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d050:	6023      	str	r3, [r4, #0]
 800d052:	6123      	str	r3, [r4, #16]
 800d054:	2301      	movs	r3, #1
 800d056:	6163      	str	r3, [r4, #20]
 800d058:	b002      	add	sp, #8
 800d05a:	bd70      	pop	{r4, r5, r6, pc}
 800d05c:	ab01      	add	r3, sp, #4
 800d05e:	466a      	mov	r2, sp
 800d060:	f7ff ffc8 	bl	800cff4 <__swhatbuf_r>
 800d064:	9900      	ldr	r1, [sp, #0]
 800d066:	4605      	mov	r5, r0
 800d068:	4630      	mov	r0, r6
 800d06a:	f7ff fb45 	bl	800c6f8 <_malloc_r>
 800d06e:	b948      	cbnz	r0, 800d084 <__smakebuf_r+0x44>
 800d070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d074:	059a      	lsls	r2, r3, #22
 800d076:	d4ef      	bmi.n	800d058 <__smakebuf_r+0x18>
 800d078:	f023 0303 	bic.w	r3, r3, #3
 800d07c:	f043 0302 	orr.w	r3, r3, #2
 800d080:	81a3      	strh	r3, [r4, #12]
 800d082:	e7e3      	b.n	800d04c <__smakebuf_r+0xc>
 800d084:	4b0d      	ldr	r3, [pc, #52]	; (800d0bc <__smakebuf_r+0x7c>)
 800d086:	62b3      	str	r3, [r6, #40]	; 0x28
 800d088:	89a3      	ldrh	r3, [r4, #12]
 800d08a:	6020      	str	r0, [r4, #0]
 800d08c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d090:	81a3      	strh	r3, [r4, #12]
 800d092:	9b00      	ldr	r3, [sp, #0]
 800d094:	6163      	str	r3, [r4, #20]
 800d096:	9b01      	ldr	r3, [sp, #4]
 800d098:	6120      	str	r0, [r4, #16]
 800d09a:	b15b      	cbz	r3, 800d0b4 <__smakebuf_r+0x74>
 800d09c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0a0:	4630      	mov	r0, r6
 800d0a2:	f000 fc8f 	bl	800d9c4 <_isatty_r>
 800d0a6:	b128      	cbz	r0, 800d0b4 <__smakebuf_r+0x74>
 800d0a8:	89a3      	ldrh	r3, [r4, #12]
 800d0aa:	f023 0303 	bic.w	r3, r3, #3
 800d0ae:	f043 0301 	orr.w	r3, r3, #1
 800d0b2:	81a3      	strh	r3, [r4, #12]
 800d0b4:	89a0      	ldrh	r0, [r4, #12]
 800d0b6:	4305      	orrs	r5, r0
 800d0b8:	81a5      	strh	r5, [r4, #12]
 800d0ba:	e7cd      	b.n	800d058 <__smakebuf_r+0x18>
 800d0bc:	0800c3c1 	.word	0x0800c3c1

0800d0c0 <__malloc_lock>:
 800d0c0:	4801      	ldr	r0, [pc, #4]	; (800d0c8 <__malloc_lock+0x8>)
 800d0c2:	f7ff ba74 	b.w	800c5ae <__retarget_lock_acquire_recursive>
 800d0c6:	bf00      	nop
 800d0c8:	20002ba8 	.word	0x20002ba8

0800d0cc <__malloc_unlock>:
 800d0cc:	4801      	ldr	r0, [pc, #4]	; (800d0d4 <__malloc_unlock+0x8>)
 800d0ce:	f7ff ba6f 	b.w	800c5b0 <__retarget_lock_release_recursive>
 800d0d2:	bf00      	nop
 800d0d4:	20002ba8 	.word	0x20002ba8

0800d0d8 <__ssputs_r>:
 800d0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0dc:	688e      	ldr	r6, [r1, #8]
 800d0de:	429e      	cmp	r6, r3
 800d0e0:	4682      	mov	sl, r0
 800d0e2:	460c      	mov	r4, r1
 800d0e4:	4690      	mov	r8, r2
 800d0e6:	461f      	mov	r7, r3
 800d0e8:	d838      	bhi.n	800d15c <__ssputs_r+0x84>
 800d0ea:	898a      	ldrh	r2, [r1, #12]
 800d0ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d0f0:	d032      	beq.n	800d158 <__ssputs_r+0x80>
 800d0f2:	6825      	ldr	r5, [r4, #0]
 800d0f4:	6909      	ldr	r1, [r1, #16]
 800d0f6:	eba5 0901 	sub.w	r9, r5, r1
 800d0fa:	6965      	ldr	r5, [r4, #20]
 800d0fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d100:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d104:	3301      	adds	r3, #1
 800d106:	444b      	add	r3, r9
 800d108:	106d      	asrs	r5, r5, #1
 800d10a:	429d      	cmp	r5, r3
 800d10c:	bf38      	it	cc
 800d10e:	461d      	movcc	r5, r3
 800d110:	0553      	lsls	r3, r2, #21
 800d112:	d531      	bpl.n	800d178 <__ssputs_r+0xa0>
 800d114:	4629      	mov	r1, r5
 800d116:	f7ff faef 	bl	800c6f8 <_malloc_r>
 800d11a:	4606      	mov	r6, r0
 800d11c:	b950      	cbnz	r0, 800d134 <__ssputs_r+0x5c>
 800d11e:	230c      	movs	r3, #12
 800d120:	f8ca 3000 	str.w	r3, [sl]
 800d124:	89a3      	ldrh	r3, [r4, #12]
 800d126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d12a:	81a3      	strh	r3, [r4, #12]
 800d12c:	f04f 30ff 	mov.w	r0, #4294967295
 800d130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d134:	6921      	ldr	r1, [r4, #16]
 800d136:	464a      	mov	r2, r9
 800d138:	f7ff fa5c 	bl	800c5f4 <memcpy>
 800d13c:	89a3      	ldrh	r3, [r4, #12]
 800d13e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d146:	81a3      	strh	r3, [r4, #12]
 800d148:	6126      	str	r6, [r4, #16]
 800d14a:	6165      	str	r5, [r4, #20]
 800d14c:	444e      	add	r6, r9
 800d14e:	eba5 0509 	sub.w	r5, r5, r9
 800d152:	6026      	str	r6, [r4, #0]
 800d154:	60a5      	str	r5, [r4, #8]
 800d156:	463e      	mov	r6, r7
 800d158:	42be      	cmp	r6, r7
 800d15a:	d900      	bls.n	800d15e <__ssputs_r+0x86>
 800d15c:	463e      	mov	r6, r7
 800d15e:	6820      	ldr	r0, [r4, #0]
 800d160:	4632      	mov	r2, r6
 800d162:	4641      	mov	r1, r8
 800d164:	f000 fc3e 	bl	800d9e4 <memmove>
 800d168:	68a3      	ldr	r3, [r4, #8]
 800d16a:	1b9b      	subs	r3, r3, r6
 800d16c:	60a3      	str	r3, [r4, #8]
 800d16e:	6823      	ldr	r3, [r4, #0]
 800d170:	4433      	add	r3, r6
 800d172:	6023      	str	r3, [r4, #0]
 800d174:	2000      	movs	r0, #0
 800d176:	e7db      	b.n	800d130 <__ssputs_r+0x58>
 800d178:	462a      	mov	r2, r5
 800d17a:	f000 fc4d 	bl	800da18 <_realloc_r>
 800d17e:	4606      	mov	r6, r0
 800d180:	2800      	cmp	r0, #0
 800d182:	d1e1      	bne.n	800d148 <__ssputs_r+0x70>
 800d184:	6921      	ldr	r1, [r4, #16]
 800d186:	4650      	mov	r0, sl
 800d188:	f7ff fa4a 	bl	800c620 <_free_r>
 800d18c:	e7c7      	b.n	800d11e <__ssputs_r+0x46>
	...

0800d190 <_svfiprintf_r>:
 800d190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d194:	4698      	mov	r8, r3
 800d196:	898b      	ldrh	r3, [r1, #12]
 800d198:	061b      	lsls	r3, r3, #24
 800d19a:	b09d      	sub	sp, #116	; 0x74
 800d19c:	4607      	mov	r7, r0
 800d19e:	460d      	mov	r5, r1
 800d1a0:	4614      	mov	r4, r2
 800d1a2:	d50e      	bpl.n	800d1c2 <_svfiprintf_r+0x32>
 800d1a4:	690b      	ldr	r3, [r1, #16]
 800d1a6:	b963      	cbnz	r3, 800d1c2 <_svfiprintf_r+0x32>
 800d1a8:	2140      	movs	r1, #64	; 0x40
 800d1aa:	f7ff faa5 	bl	800c6f8 <_malloc_r>
 800d1ae:	6028      	str	r0, [r5, #0]
 800d1b0:	6128      	str	r0, [r5, #16]
 800d1b2:	b920      	cbnz	r0, 800d1be <_svfiprintf_r+0x2e>
 800d1b4:	230c      	movs	r3, #12
 800d1b6:	603b      	str	r3, [r7, #0]
 800d1b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d1bc:	e0d1      	b.n	800d362 <_svfiprintf_r+0x1d2>
 800d1be:	2340      	movs	r3, #64	; 0x40
 800d1c0:	616b      	str	r3, [r5, #20]
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d1c6:	2320      	movs	r3, #32
 800d1c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1d0:	2330      	movs	r3, #48	; 0x30
 800d1d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d37c <_svfiprintf_r+0x1ec>
 800d1d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1da:	f04f 0901 	mov.w	r9, #1
 800d1de:	4623      	mov	r3, r4
 800d1e0:	469a      	mov	sl, r3
 800d1e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1e6:	b10a      	cbz	r2, 800d1ec <_svfiprintf_r+0x5c>
 800d1e8:	2a25      	cmp	r2, #37	; 0x25
 800d1ea:	d1f9      	bne.n	800d1e0 <_svfiprintf_r+0x50>
 800d1ec:	ebba 0b04 	subs.w	fp, sl, r4
 800d1f0:	d00b      	beq.n	800d20a <_svfiprintf_r+0x7a>
 800d1f2:	465b      	mov	r3, fp
 800d1f4:	4622      	mov	r2, r4
 800d1f6:	4629      	mov	r1, r5
 800d1f8:	4638      	mov	r0, r7
 800d1fa:	f7ff ff6d 	bl	800d0d8 <__ssputs_r>
 800d1fe:	3001      	adds	r0, #1
 800d200:	f000 80aa 	beq.w	800d358 <_svfiprintf_r+0x1c8>
 800d204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d206:	445a      	add	r2, fp
 800d208:	9209      	str	r2, [sp, #36]	; 0x24
 800d20a:	f89a 3000 	ldrb.w	r3, [sl]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	f000 80a2 	beq.w	800d358 <_svfiprintf_r+0x1c8>
 800d214:	2300      	movs	r3, #0
 800d216:	f04f 32ff 	mov.w	r2, #4294967295
 800d21a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d21e:	f10a 0a01 	add.w	sl, sl, #1
 800d222:	9304      	str	r3, [sp, #16]
 800d224:	9307      	str	r3, [sp, #28]
 800d226:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d22a:	931a      	str	r3, [sp, #104]	; 0x68
 800d22c:	4654      	mov	r4, sl
 800d22e:	2205      	movs	r2, #5
 800d230:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d234:	4851      	ldr	r0, [pc, #324]	; (800d37c <_svfiprintf_r+0x1ec>)
 800d236:	f7f2 ffd3 	bl	80001e0 <memchr>
 800d23a:	9a04      	ldr	r2, [sp, #16]
 800d23c:	b9d8      	cbnz	r0, 800d276 <_svfiprintf_r+0xe6>
 800d23e:	06d0      	lsls	r0, r2, #27
 800d240:	bf44      	itt	mi
 800d242:	2320      	movmi	r3, #32
 800d244:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d248:	0711      	lsls	r1, r2, #28
 800d24a:	bf44      	itt	mi
 800d24c:	232b      	movmi	r3, #43	; 0x2b
 800d24e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d252:	f89a 3000 	ldrb.w	r3, [sl]
 800d256:	2b2a      	cmp	r3, #42	; 0x2a
 800d258:	d015      	beq.n	800d286 <_svfiprintf_r+0xf6>
 800d25a:	9a07      	ldr	r2, [sp, #28]
 800d25c:	4654      	mov	r4, sl
 800d25e:	2000      	movs	r0, #0
 800d260:	f04f 0c0a 	mov.w	ip, #10
 800d264:	4621      	mov	r1, r4
 800d266:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d26a:	3b30      	subs	r3, #48	; 0x30
 800d26c:	2b09      	cmp	r3, #9
 800d26e:	d94e      	bls.n	800d30e <_svfiprintf_r+0x17e>
 800d270:	b1b0      	cbz	r0, 800d2a0 <_svfiprintf_r+0x110>
 800d272:	9207      	str	r2, [sp, #28]
 800d274:	e014      	b.n	800d2a0 <_svfiprintf_r+0x110>
 800d276:	eba0 0308 	sub.w	r3, r0, r8
 800d27a:	fa09 f303 	lsl.w	r3, r9, r3
 800d27e:	4313      	orrs	r3, r2
 800d280:	9304      	str	r3, [sp, #16]
 800d282:	46a2      	mov	sl, r4
 800d284:	e7d2      	b.n	800d22c <_svfiprintf_r+0x9c>
 800d286:	9b03      	ldr	r3, [sp, #12]
 800d288:	1d19      	adds	r1, r3, #4
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	9103      	str	r1, [sp, #12]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	bfbb      	ittet	lt
 800d292:	425b      	neglt	r3, r3
 800d294:	f042 0202 	orrlt.w	r2, r2, #2
 800d298:	9307      	strge	r3, [sp, #28]
 800d29a:	9307      	strlt	r3, [sp, #28]
 800d29c:	bfb8      	it	lt
 800d29e:	9204      	strlt	r2, [sp, #16]
 800d2a0:	7823      	ldrb	r3, [r4, #0]
 800d2a2:	2b2e      	cmp	r3, #46	; 0x2e
 800d2a4:	d10c      	bne.n	800d2c0 <_svfiprintf_r+0x130>
 800d2a6:	7863      	ldrb	r3, [r4, #1]
 800d2a8:	2b2a      	cmp	r3, #42	; 0x2a
 800d2aa:	d135      	bne.n	800d318 <_svfiprintf_r+0x188>
 800d2ac:	9b03      	ldr	r3, [sp, #12]
 800d2ae:	1d1a      	adds	r2, r3, #4
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	9203      	str	r2, [sp, #12]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	bfb8      	it	lt
 800d2b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d2bc:	3402      	adds	r4, #2
 800d2be:	9305      	str	r3, [sp, #20]
 800d2c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d38c <_svfiprintf_r+0x1fc>
 800d2c4:	7821      	ldrb	r1, [r4, #0]
 800d2c6:	2203      	movs	r2, #3
 800d2c8:	4650      	mov	r0, sl
 800d2ca:	f7f2 ff89 	bl	80001e0 <memchr>
 800d2ce:	b140      	cbz	r0, 800d2e2 <_svfiprintf_r+0x152>
 800d2d0:	2340      	movs	r3, #64	; 0x40
 800d2d2:	eba0 000a 	sub.w	r0, r0, sl
 800d2d6:	fa03 f000 	lsl.w	r0, r3, r0
 800d2da:	9b04      	ldr	r3, [sp, #16]
 800d2dc:	4303      	orrs	r3, r0
 800d2de:	3401      	adds	r4, #1
 800d2e0:	9304      	str	r3, [sp, #16]
 800d2e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2e6:	4826      	ldr	r0, [pc, #152]	; (800d380 <_svfiprintf_r+0x1f0>)
 800d2e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2ec:	2206      	movs	r2, #6
 800d2ee:	f7f2 ff77 	bl	80001e0 <memchr>
 800d2f2:	2800      	cmp	r0, #0
 800d2f4:	d038      	beq.n	800d368 <_svfiprintf_r+0x1d8>
 800d2f6:	4b23      	ldr	r3, [pc, #140]	; (800d384 <_svfiprintf_r+0x1f4>)
 800d2f8:	bb1b      	cbnz	r3, 800d342 <_svfiprintf_r+0x1b2>
 800d2fa:	9b03      	ldr	r3, [sp, #12]
 800d2fc:	3307      	adds	r3, #7
 800d2fe:	f023 0307 	bic.w	r3, r3, #7
 800d302:	3308      	adds	r3, #8
 800d304:	9303      	str	r3, [sp, #12]
 800d306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d308:	4433      	add	r3, r6
 800d30a:	9309      	str	r3, [sp, #36]	; 0x24
 800d30c:	e767      	b.n	800d1de <_svfiprintf_r+0x4e>
 800d30e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d312:	460c      	mov	r4, r1
 800d314:	2001      	movs	r0, #1
 800d316:	e7a5      	b.n	800d264 <_svfiprintf_r+0xd4>
 800d318:	2300      	movs	r3, #0
 800d31a:	3401      	adds	r4, #1
 800d31c:	9305      	str	r3, [sp, #20]
 800d31e:	4619      	mov	r1, r3
 800d320:	f04f 0c0a 	mov.w	ip, #10
 800d324:	4620      	mov	r0, r4
 800d326:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d32a:	3a30      	subs	r2, #48	; 0x30
 800d32c:	2a09      	cmp	r2, #9
 800d32e:	d903      	bls.n	800d338 <_svfiprintf_r+0x1a8>
 800d330:	2b00      	cmp	r3, #0
 800d332:	d0c5      	beq.n	800d2c0 <_svfiprintf_r+0x130>
 800d334:	9105      	str	r1, [sp, #20]
 800d336:	e7c3      	b.n	800d2c0 <_svfiprintf_r+0x130>
 800d338:	fb0c 2101 	mla	r1, ip, r1, r2
 800d33c:	4604      	mov	r4, r0
 800d33e:	2301      	movs	r3, #1
 800d340:	e7f0      	b.n	800d324 <_svfiprintf_r+0x194>
 800d342:	ab03      	add	r3, sp, #12
 800d344:	9300      	str	r3, [sp, #0]
 800d346:	462a      	mov	r2, r5
 800d348:	4b0f      	ldr	r3, [pc, #60]	; (800d388 <_svfiprintf_r+0x1f8>)
 800d34a:	a904      	add	r1, sp, #16
 800d34c:	4638      	mov	r0, r7
 800d34e:	f3af 8000 	nop.w
 800d352:	1c42      	adds	r2, r0, #1
 800d354:	4606      	mov	r6, r0
 800d356:	d1d6      	bne.n	800d306 <_svfiprintf_r+0x176>
 800d358:	89ab      	ldrh	r3, [r5, #12]
 800d35a:	065b      	lsls	r3, r3, #25
 800d35c:	f53f af2c 	bmi.w	800d1b8 <_svfiprintf_r+0x28>
 800d360:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d362:	b01d      	add	sp, #116	; 0x74
 800d364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d368:	ab03      	add	r3, sp, #12
 800d36a:	9300      	str	r3, [sp, #0]
 800d36c:	462a      	mov	r2, r5
 800d36e:	4b06      	ldr	r3, [pc, #24]	; (800d388 <_svfiprintf_r+0x1f8>)
 800d370:	a904      	add	r1, sp, #16
 800d372:	4638      	mov	r0, r7
 800d374:	f000 f9d4 	bl	800d720 <_printf_i>
 800d378:	e7eb      	b.n	800d352 <_svfiprintf_r+0x1c2>
 800d37a:	bf00      	nop
 800d37c:	0800e5cc 	.word	0x0800e5cc
 800d380:	0800e5d6 	.word	0x0800e5d6
 800d384:	00000000 	.word	0x00000000
 800d388:	0800d0d9 	.word	0x0800d0d9
 800d38c:	0800e5d2 	.word	0x0800e5d2

0800d390 <__sfputc_r>:
 800d390:	6893      	ldr	r3, [r2, #8]
 800d392:	3b01      	subs	r3, #1
 800d394:	2b00      	cmp	r3, #0
 800d396:	b410      	push	{r4}
 800d398:	6093      	str	r3, [r2, #8]
 800d39a:	da08      	bge.n	800d3ae <__sfputc_r+0x1e>
 800d39c:	6994      	ldr	r4, [r2, #24]
 800d39e:	42a3      	cmp	r3, r4
 800d3a0:	db01      	blt.n	800d3a6 <__sfputc_r+0x16>
 800d3a2:	290a      	cmp	r1, #10
 800d3a4:	d103      	bne.n	800d3ae <__sfputc_r+0x1e>
 800d3a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3aa:	f7ff bc3d 	b.w	800cc28 <__swbuf_r>
 800d3ae:	6813      	ldr	r3, [r2, #0]
 800d3b0:	1c58      	adds	r0, r3, #1
 800d3b2:	6010      	str	r0, [r2, #0]
 800d3b4:	7019      	strb	r1, [r3, #0]
 800d3b6:	4608      	mov	r0, r1
 800d3b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3bc:	4770      	bx	lr

0800d3be <__sfputs_r>:
 800d3be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3c0:	4606      	mov	r6, r0
 800d3c2:	460f      	mov	r7, r1
 800d3c4:	4614      	mov	r4, r2
 800d3c6:	18d5      	adds	r5, r2, r3
 800d3c8:	42ac      	cmp	r4, r5
 800d3ca:	d101      	bne.n	800d3d0 <__sfputs_r+0x12>
 800d3cc:	2000      	movs	r0, #0
 800d3ce:	e007      	b.n	800d3e0 <__sfputs_r+0x22>
 800d3d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3d4:	463a      	mov	r2, r7
 800d3d6:	4630      	mov	r0, r6
 800d3d8:	f7ff ffda 	bl	800d390 <__sfputc_r>
 800d3dc:	1c43      	adds	r3, r0, #1
 800d3de:	d1f3      	bne.n	800d3c8 <__sfputs_r+0xa>
 800d3e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d3e4 <_vfiprintf_r>:
 800d3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3e8:	460d      	mov	r5, r1
 800d3ea:	b09d      	sub	sp, #116	; 0x74
 800d3ec:	4614      	mov	r4, r2
 800d3ee:	4698      	mov	r8, r3
 800d3f0:	4606      	mov	r6, r0
 800d3f2:	b118      	cbz	r0, 800d3fc <_vfiprintf_r+0x18>
 800d3f4:	6983      	ldr	r3, [r0, #24]
 800d3f6:	b90b      	cbnz	r3, 800d3fc <_vfiprintf_r+0x18>
 800d3f8:	f7ff f816 	bl	800c428 <__sinit>
 800d3fc:	4b89      	ldr	r3, [pc, #548]	; (800d624 <_vfiprintf_r+0x240>)
 800d3fe:	429d      	cmp	r5, r3
 800d400:	d11b      	bne.n	800d43a <_vfiprintf_r+0x56>
 800d402:	6875      	ldr	r5, [r6, #4]
 800d404:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d406:	07d9      	lsls	r1, r3, #31
 800d408:	d405      	bmi.n	800d416 <_vfiprintf_r+0x32>
 800d40a:	89ab      	ldrh	r3, [r5, #12]
 800d40c:	059a      	lsls	r2, r3, #22
 800d40e:	d402      	bmi.n	800d416 <_vfiprintf_r+0x32>
 800d410:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d412:	f7ff f8cc 	bl	800c5ae <__retarget_lock_acquire_recursive>
 800d416:	89ab      	ldrh	r3, [r5, #12]
 800d418:	071b      	lsls	r3, r3, #28
 800d41a:	d501      	bpl.n	800d420 <_vfiprintf_r+0x3c>
 800d41c:	692b      	ldr	r3, [r5, #16]
 800d41e:	b9eb      	cbnz	r3, 800d45c <_vfiprintf_r+0x78>
 800d420:	4629      	mov	r1, r5
 800d422:	4630      	mov	r0, r6
 800d424:	f7ff fc64 	bl	800ccf0 <__swsetup_r>
 800d428:	b1c0      	cbz	r0, 800d45c <_vfiprintf_r+0x78>
 800d42a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d42c:	07dc      	lsls	r4, r3, #31
 800d42e:	d50e      	bpl.n	800d44e <_vfiprintf_r+0x6a>
 800d430:	f04f 30ff 	mov.w	r0, #4294967295
 800d434:	b01d      	add	sp, #116	; 0x74
 800d436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d43a:	4b7b      	ldr	r3, [pc, #492]	; (800d628 <_vfiprintf_r+0x244>)
 800d43c:	429d      	cmp	r5, r3
 800d43e:	d101      	bne.n	800d444 <_vfiprintf_r+0x60>
 800d440:	68b5      	ldr	r5, [r6, #8]
 800d442:	e7df      	b.n	800d404 <_vfiprintf_r+0x20>
 800d444:	4b79      	ldr	r3, [pc, #484]	; (800d62c <_vfiprintf_r+0x248>)
 800d446:	429d      	cmp	r5, r3
 800d448:	bf08      	it	eq
 800d44a:	68f5      	ldreq	r5, [r6, #12]
 800d44c:	e7da      	b.n	800d404 <_vfiprintf_r+0x20>
 800d44e:	89ab      	ldrh	r3, [r5, #12]
 800d450:	0598      	lsls	r0, r3, #22
 800d452:	d4ed      	bmi.n	800d430 <_vfiprintf_r+0x4c>
 800d454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d456:	f7ff f8ab 	bl	800c5b0 <__retarget_lock_release_recursive>
 800d45a:	e7e9      	b.n	800d430 <_vfiprintf_r+0x4c>
 800d45c:	2300      	movs	r3, #0
 800d45e:	9309      	str	r3, [sp, #36]	; 0x24
 800d460:	2320      	movs	r3, #32
 800d462:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d466:	f8cd 800c 	str.w	r8, [sp, #12]
 800d46a:	2330      	movs	r3, #48	; 0x30
 800d46c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d630 <_vfiprintf_r+0x24c>
 800d470:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d474:	f04f 0901 	mov.w	r9, #1
 800d478:	4623      	mov	r3, r4
 800d47a:	469a      	mov	sl, r3
 800d47c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d480:	b10a      	cbz	r2, 800d486 <_vfiprintf_r+0xa2>
 800d482:	2a25      	cmp	r2, #37	; 0x25
 800d484:	d1f9      	bne.n	800d47a <_vfiprintf_r+0x96>
 800d486:	ebba 0b04 	subs.w	fp, sl, r4
 800d48a:	d00b      	beq.n	800d4a4 <_vfiprintf_r+0xc0>
 800d48c:	465b      	mov	r3, fp
 800d48e:	4622      	mov	r2, r4
 800d490:	4629      	mov	r1, r5
 800d492:	4630      	mov	r0, r6
 800d494:	f7ff ff93 	bl	800d3be <__sfputs_r>
 800d498:	3001      	adds	r0, #1
 800d49a:	f000 80aa 	beq.w	800d5f2 <_vfiprintf_r+0x20e>
 800d49e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4a0:	445a      	add	r2, fp
 800d4a2:	9209      	str	r2, [sp, #36]	; 0x24
 800d4a4:	f89a 3000 	ldrb.w	r3, [sl]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	f000 80a2 	beq.w	800d5f2 <_vfiprintf_r+0x20e>
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d4b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4b8:	f10a 0a01 	add.w	sl, sl, #1
 800d4bc:	9304      	str	r3, [sp, #16]
 800d4be:	9307      	str	r3, [sp, #28]
 800d4c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4c4:	931a      	str	r3, [sp, #104]	; 0x68
 800d4c6:	4654      	mov	r4, sl
 800d4c8:	2205      	movs	r2, #5
 800d4ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4ce:	4858      	ldr	r0, [pc, #352]	; (800d630 <_vfiprintf_r+0x24c>)
 800d4d0:	f7f2 fe86 	bl	80001e0 <memchr>
 800d4d4:	9a04      	ldr	r2, [sp, #16]
 800d4d6:	b9d8      	cbnz	r0, 800d510 <_vfiprintf_r+0x12c>
 800d4d8:	06d1      	lsls	r1, r2, #27
 800d4da:	bf44      	itt	mi
 800d4dc:	2320      	movmi	r3, #32
 800d4de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4e2:	0713      	lsls	r3, r2, #28
 800d4e4:	bf44      	itt	mi
 800d4e6:	232b      	movmi	r3, #43	; 0x2b
 800d4e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4ec:	f89a 3000 	ldrb.w	r3, [sl]
 800d4f0:	2b2a      	cmp	r3, #42	; 0x2a
 800d4f2:	d015      	beq.n	800d520 <_vfiprintf_r+0x13c>
 800d4f4:	9a07      	ldr	r2, [sp, #28]
 800d4f6:	4654      	mov	r4, sl
 800d4f8:	2000      	movs	r0, #0
 800d4fa:	f04f 0c0a 	mov.w	ip, #10
 800d4fe:	4621      	mov	r1, r4
 800d500:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d504:	3b30      	subs	r3, #48	; 0x30
 800d506:	2b09      	cmp	r3, #9
 800d508:	d94e      	bls.n	800d5a8 <_vfiprintf_r+0x1c4>
 800d50a:	b1b0      	cbz	r0, 800d53a <_vfiprintf_r+0x156>
 800d50c:	9207      	str	r2, [sp, #28]
 800d50e:	e014      	b.n	800d53a <_vfiprintf_r+0x156>
 800d510:	eba0 0308 	sub.w	r3, r0, r8
 800d514:	fa09 f303 	lsl.w	r3, r9, r3
 800d518:	4313      	orrs	r3, r2
 800d51a:	9304      	str	r3, [sp, #16]
 800d51c:	46a2      	mov	sl, r4
 800d51e:	e7d2      	b.n	800d4c6 <_vfiprintf_r+0xe2>
 800d520:	9b03      	ldr	r3, [sp, #12]
 800d522:	1d19      	adds	r1, r3, #4
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	9103      	str	r1, [sp, #12]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	bfbb      	ittet	lt
 800d52c:	425b      	neglt	r3, r3
 800d52e:	f042 0202 	orrlt.w	r2, r2, #2
 800d532:	9307      	strge	r3, [sp, #28]
 800d534:	9307      	strlt	r3, [sp, #28]
 800d536:	bfb8      	it	lt
 800d538:	9204      	strlt	r2, [sp, #16]
 800d53a:	7823      	ldrb	r3, [r4, #0]
 800d53c:	2b2e      	cmp	r3, #46	; 0x2e
 800d53e:	d10c      	bne.n	800d55a <_vfiprintf_r+0x176>
 800d540:	7863      	ldrb	r3, [r4, #1]
 800d542:	2b2a      	cmp	r3, #42	; 0x2a
 800d544:	d135      	bne.n	800d5b2 <_vfiprintf_r+0x1ce>
 800d546:	9b03      	ldr	r3, [sp, #12]
 800d548:	1d1a      	adds	r2, r3, #4
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	9203      	str	r2, [sp, #12]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	bfb8      	it	lt
 800d552:	f04f 33ff 	movlt.w	r3, #4294967295
 800d556:	3402      	adds	r4, #2
 800d558:	9305      	str	r3, [sp, #20]
 800d55a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d640 <_vfiprintf_r+0x25c>
 800d55e:	7821      	ldrb	r1, [r4, #0]
 800d560:	2203      	movs	r2, #3
 800d562:	4650      	mov	r0, sl
 800d564:	f7f2 fe3c 	bl	80001e0 <memchr>
 800d568:	b140      	cbz	r0, 800d57c <_vfiprintf_r+0x198>
 800d56a:	2340      	movs	r3, #64	; 0x40
 800d56c:	eba0 000a 	sub.w	r0, r0, sl
 800d570:	fa03 f000 	lsl.w	r0, r3, r0
 800d574:	9b04      	ldr	r3, [sp, #16]
 800d576:	4303      	orrs	r3, r0
 800d578:	3401      	adds	r4, #1
 800d57a:	9304      	str	r3, [sp, #16]
 800d57c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d580:	482c      	ldr	r0, [pc, #176]	; (800d634 <_vfiprintf_r+0x250>)
 800d582:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d586:	2206      	movs	r2, #6
 800d588:	f7f2 fe2a 	bl	80001e0 <memchr>
 800d58c:	2800      	cmp	r0, #0
 800d58e:	d03f      	beq.n	800d610 <_vfiprintf_r+0x22c>
 800d590:	4b29      	ldr	r3, [pc, #164]	; (800d638 <_vfiprintf_r+0x254>)
 800d592:	bb1b      	cbnz	r3, 800d5dc <_vfiprintf_r+0x1f8>
 800d594:	9b03      	ldr	r3, [sp, #12]
 800d596:	3307      	adds	r3, #7
 800d598:	f023 0307 	bic.w	r3, r3, #7
 800d59c:	3308      	adds	r3, #8
 800d59e:	9303      	str	r3, [sp, #12]
 800d5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5a2:	443b      	add	r3, r7
 800d5a4:	9309      	str	r3, [sp, #36]	; 0x24
 800d5a6:	e767      	b.n	800d478 <_vfiprintf_r+0x94>
 800d5a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5ac:	460c      	mov	r4, r1
 800d5ae:	2001      	movs	r0, #1
 800d5b0:	e7a5      	b.n	800d4fe <_vfiprintf_r+0x11a>
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	3401      	adds	r4, #1
 800d5b6:	9305      	str	r3, [sp, #20]
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	f04f 0c0a 	mov.w	ip, #10
 800d5be:	4620      	mov	r0, r4
 800d5c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5c4:	3a30      	subs	r2, #48	; 0x30
 800d5c6:	2a09      	cmp	r2, #9
 800d5c8:	d903      	bls.n	800d5d2 <_vfiprintf_r+0x1ee>
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d0c5      	beq.n	800d55a <_vfiprintf_r+0x176>
 800d5ce:	9105      	str	r1, [sp, #20]
 800d5d0:	e7c3      	b.n	800d55a <_vfiprintf_r+0x176>
 800d5d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5d6:	4604      	mov	r4, r0
 800d5d8:	2301      	movs	r3, #1
 800d5da:	e7f0      	b.n	800d5be <_vfiprintf_r+0x1da>
 800d5dc:	ab03      	add	r3, sp, #12
 800d5de:	9300      	str	r3, [sp, #0]
 800d5e0:	462a      	mov	r2, r5
 800d5e2:	4b16      	ldr	r3, [pc, #88]	; (800d63c <_vfiprintf_r+0x258>)
 800d5e4:	a904      	add	r1, sp, #16
 800d5e6:	4630      	mov	r0, r6
 800d5e8:	f3af 8000 	nop.w
 800d5ec:	4607      	mov	r7, r0
 800d5ee:	1c78      	adds	r0, r7, #1
 800d5f0:	d1d6      	bne.n	800d5a0 <_vfiprintf_r+0x1bc>
 800d5f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5f4:	07d9      	lsls	r1, r3, #31
 800d5f6:	d405      	bmi.n	800d604 <_vfiprintf_r+0x220>
 800d5f8:	89ab      	ldrh	r3, [r5, #12]
 800d5fa:	059a      	lsls	r2, r3, #22
 800d5fc:	d402      	bmi.n	800d604 <_vfiprintf_r+0x220>
 800d5fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d600:	f7fe ffd6 	bl	800c5b0 <__retarget_lock_release_recursive>
 800d604:	89ab      	ldrh	r3, [r5, #12]
 800d606:	065b      	lsls	r3, r3, #25
 800d608:	f53f af12 	bmi.w	800d430 <_vfiprintf_r+0x4c>
 800d60c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d60e:	e711      	b.n	800d434 <_vfiprintf_r+0x50>
 800d610:	ab03      	add	r3, sp, #12
 800d612:	9300      	str	r3, [sp, #0]
 800d614:	462a      	mov	r2, r5
 800d616:	4b09      	ldr	r3, [pc, #36]	; (800d63c <_vfiprintf_r+0x258>)
 800d618:	a904      	add	r1, sp, #16
 800d61a:	4630      	mov	r0, r6
 800d61c:	f000 f880 	bl	800d720 <_printf_i>
 800d620:	e7e4      	b.n	800d5ec <_vfiprintf_r+0x208>
 800d622:	bf00      	nop
 800d624:	0800e4d8 	.word	0x0800e4d8
 800d628:	0800e4f8 	.word	0x0800e4f8
 800d62c:	0800e4b8 	.word	0x0800e4b8
 800d630:	0800e5cc 	.word	0x0800e5cc
 800d634:	0800e5d6 	.word	0x0800e5d6
 800d638:	00000000 	.word	0x00000000
 800d63c:	0800d3bf 	.word	0x0800d3bf
 800d640:	0800e5d2 	.word	0x0800e5d2

0800d644 <_printf_common>:
 800d644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d648:	4616      	mov	r6, r2
 800d64a:	4699      	mov	r9, r3
 800d64c:	688a      	ldr	r2, [r1, #8]
 800d64e:	690b      	ldr	r3, [r1, #16]
 800d650:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d654:	4293      	cmp	r3, r2
 800d656:	bfb8      	it	lt
 800d658:	4613      	movlt	r3, r2
 800d65a:	6033      	str	r3, [r6, #0]
 800d65c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d660:	4607      	mov	r7, r0
 800d662:	460c      	mov	r4, r1
 800d664:	b10a      	cbz	r2, 800d66a <_printf_common+0x26>
 800d666:	3301      	adds	r3, #1
 800d668:	6033      	str	r3, [r6, #0]
 800d66a:	6823      	ldr	r3, [r4, #0]
 800d66c:	0699      	lsls	r1, r3, #26
 800d66e:	bf42      	ittt	mi
 800d670:	6833      	ldrmi	r3, [r6, #0]
 800d672:	3302      	addmi	r3, #2
 800d674:	6033      	strmi	r3, [r6, #0]
 800d676:	6825      	ldr	r5, [r4, #0]
 800d678:	f015 0506 	ands.w	r5, r5, #6
 800d67c:	d106      	bne.n	800d68c <_printf_common+0x48>
 800d67e:	f104 0a19 	add.w	sl, r4, #25
 800d682:	68e3      	ldr	r3, [r4, #12]
 800d684:	6832      	ldr	r2, [r6, #0]
 800d686:	1a9b      	subs	r3, r3, r2
 800d688:	42ab      	cmp	r3, r5
 800d68a:	dc26      	bgt.n	800d6da <_printf_common+0x96>
 800d68c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d690:	1e13      	subs	r3, r2, #0
 800d692:	6822      	ldr	r2, [r4, #0]
 800d694:	bf18      	it	ne
 800d696:	2301      	movne	r3, #1
 800d698:	0692      	lsls	r2, r2, #26
 800d69a:	d42b      	bmi.n	800d6f4 <_printf_common+0xb0>
 800d69c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d6a0:	4649      	mov	r1, r9
 800d6a2:	4638      	mov	r0, r7
 800d6a4:	47c0      	blx	r8
 800d6a6:	3001      	adds	r0, #1
 800d6a8:	d01e      	beq.n	800d6e8 <_printf_common+0xa4>
 800d6aa:	6823      	ldr	r3, [r4, #0]
 800d6ac:	68e5      	ldr	r5, [r4, #12]
 800d6ae:	6832      	ldr	r2, [r6, #0]
 800d6b0:	f003 0306 	and.w	r3, r3, #6
 800d6b4:	2b04      	cmp	r3, #4
 800d6b6:	bf08      	it	eq
 800d6b8:	1aad      	subeq	r5, r5, r2
 800d6ba:	68a3      	ldr	r3, [r4, #8]
 800d6bc:	6922      	ldr	r2, [r4, #16]
 800d6be:	bf0c      	ite	eq
 800d6c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6c4:	2500      	movne	r5, #0
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	bfc4      	itt	gt
 800d6ca:	1a9b      	subgt	r3, r3, r2
 800d6cc:	18ed      	addgt	r5, r5, r3
 800d6ce:	2600      	movs	r6, #0
 800d6d0:	341a      	adds	r4, #26
 800d6d2:	42b5      	cmp	r5, r6
 800d6d4:	d11a      	bne.n	800d70c <_printf_common+0xc8>
 800d6d6:	2000      	movs	r0, #0
 800d6d8:	e008      	b.n	800d6ec <_printf_common+0xa8>
 800d6da:	2301      	movs	r3, #1
 800d6dc:	4652      	mov	r2, sl
 800d6de:	4649      	mov	r1, r9
 800d6e0:	4638      	mov	r0, r7
 800d6e2:	47c0      	blx	r8
 800d6e4:	3001      	adds	r0, #1
 800d6e6:	d103      	bne.n	800d6f0 <_printf_common+0xac>
 800d6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6f0:	3501      	adds	r5, #1
 800d6f2:	e7c6      	b.n	800d682 <_printf_common+0x3e>
 800d6f4:	18e1      	adds	r1, r4, r3
 800d6f6:	1c5a      	adds	r2, r3, #1
 800d6f8:	2030      	movs	r0, #48	; 0x30
 800d6fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d6fe:	4422      	add	r2, r4
 800d700:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d704:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d708:	3302      	adds	r3, #2
 800d70a:	e7c7      	b.n	800d69c <_printf_common+0x58>
 800d70c:	2301      	movs	r3, #1
 800d70e:	4622      	mov	r2, r4
 800d710:	4649      	mov	r1, r9
 800d712:	4638      	mov	r0, r7
 800d714:	47c0      	blx	r8
 800d716:	3001      	adds	r0, #1
 800d718:	d0e6      	beq.n	800d6e8 <_printf_common+0xa4>
 800d71a:	3601      	adds	r6, #1
 800d71c:	e7d9      	b.n	800d6d2 <_printf_common+0x8e>
	...

0800d720 <_printf_i>:
 800d720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d724:	7e0f      	ldrb	r7, [r1, #24]
 800d726:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d728:	2f78      	cmp	r7, #120	; 0x78
 800d72a:	4691      	mov	r9, r2
 800d72c:	4680      	mov	r8, r0
 800d72e:	460c      	mov	r4, r1
 800d730:	469a      	mov	sl, r3
 800d732:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d736:	d807      	bhi.n	800d748 <_printf_i+0x28>
 800d738:	2f62      	cmp	r7, #98	; 0x62
 800d73a:	d80a      	bhi.n	800d752 <_printf_i+0x32>
 800d73c:	2f00      	cmp	r7, #0
 800d73e:	f000 80d8 	beq.w	800d8f2 <_printf_i+0x1d2>
 800d742:	2f58      	cmp	r7, #88	; 0x58
 800d744:	f000 80a3 	beq.w	800d88e <_printf_i+0x16e>
 800d748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d74c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d750:	e03a      	b.n	800d7c8 <_printf_i+0xa8>
 800d752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d756:	2b15      	cmp	r3, #21
 800d758:	d8f6      	bhi.n	800d748 <_printf_i+0x28>
 800d75a:	a101      	add	r1, pc, #4	; (adr r1, 800d760 <_printf_i+0x40>)
 800d75c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d760:	0800d7b9 	.word	0x0800d7b9
 800d764:	0800d7cd 	.word	0x0800d7cd
 800d768:	0800d749 	.word	0x0800d749
 800d76c:	0800d749 	.word	0x0800d749
 800d770:	0800d749 	.word	0x0800d749
 800d774:	0800d749 	.word	0x0800d749
 800d778:	0800d7cd 	.word	0x0800d7cd
 800d77c:	0800d749 	.word	0x0800d749
 800d780:	0800d749 	.word	0x0800d749
 800d784:	0800d749 	.word	0x0800d749
 800d788:	0800d749 	.word	0x0800d749
 800d78c:	0800d8d9 	.word	0x0800d8d9
 800d790:	0800d7fd 	.word	0x0800d7fd
 800d794:	0800d8bb 	.word	0x0800d8bb
 800d798:	0800d749 	.word	0x0800d749
 800d79c:	0800d749 	.word	0x0800d749
 800d7a0:	0800d8fb 	.word	0x0800d8fb
 800d7a4:	0800d749 	.word	0x0800d749
 800d7a8:	0800d7fd 	.word	0x0800d7fd
 800d7ac:	0800d749 	.word	0x0800d749
 800d7b0:	0800d749 	.word	0x0800d749
 800d7b4:	0800d8c3 	.word	0x0800d8c3
 800d7b8:	682b      	ldr	r3, [r5, #0]
 800d7ba:	1d1a      	adds	r2, r3, #4
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	602a      	str	r2, [r5, #0]
 800d7c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d7c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	e0a3      	b.n	800d914 <_printf_i+0x1f4>
 800d7cc:	6820      	ldr	r0, [r4, #0]
 800d7ce:	6829      	ldr	r1, [r5, #0]
 800d7d0:	0606      	lsls	r6, r0, #24
 800d7d2:	f101 0304 	add.w	r3, r1, #4
 800d7d6:	d50a      	bpl.n	800d7ee <_printf_i+0xce>
 800d7d8:	680e      	ldr	r6, [r1, #0]
 800d7da:	602b      	str	r3, [r5, #0]
 800d7dc:	2e00      	cmp	r6, #0
 800d7de:	da03      	bge.n	800d7e8 <_printf_i+0xc8>
 800d7e0:	232d      	movs	r3, #45	; 0x2d
 800d7e2:	4276      	negs	r6, r6
 800d7e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7e8:	485e      	ldr	r0, [pc, #376]	; (800d964 <_printf_i+0x244>)
 800d7ea:	230a      	movs	r3, #10
 800d7ec:	e019      	b.n	800d822 <_printf_i+0x102>
 800d7ee:	680e      	ldr	r6, [r1, #0]
 800d7f0:	602b      	str	r3, [r5, #0]
 800d7f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d7f6:	bf18      	it	ne
 800d7f8:	b236      	sxthne	r6, r6
 800d7fa:	e7ef      	b.n	800d7dc <_printf_i+0xbc>
 800d7fc:	682b      	ldr	r3, [r5, #0]
 800d7fe:	6820      	ldr	r0, [r4, #0]
 800d800:	1d19      	adds	r1, r3, #4
 800d802:	6029      	str	r1, [r5, #0]
 800d804:	0601      	lsls	r1, r0, #24
 800d806:	d501      	bpl.n	800d80c <_printf_i+0xec>
 800d808:	681e      	ldr	r6, [r3, #0]
 800d80a:	e002      	b.n	800d812 <_printf_i+0xf2>
 800d80c:	0646      	lsls	r6, r0, #25
 800d80e:	d5fb      	bpl.n	800d808 <_printf_i+0xe8>
 800d810:	881e      	ldrh	r6, [r3, #0]
 800d812:	4854      	ldr	r0, [pc, #336]	; (800d964 <_printf_i+0x244>)
 800d814:	2f6f      	cmp	r7, #111	; 0x6f
 800d816:	bf0c      	ite	eq
 800d818:	2308      	moveq	r3, #8
 800d81a:	230a      	movne	r3, #10
 800d81c:	2100      	movs	r1, #0
 800d81e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d822:	6865      	ldr	r5, [r4, #4]
 800d824:	60a5      	str	r5, [r4, #8]
 800d826:	2d00      	cmp	r5, #0
 800d828:	bfa2      	ittt	ge
 800d82a:	6821      	ldrge	r1, [r4, #0]
 800d82c:	f021 0104 	bicge.w	r1, r1, #4
 800d830:	6021      	strge	r1, [r4, #0]
 800d832:	b90e      	cbnz	r6, 800d838 <_printf_i+0x118>
 800d834:	2d00      	cmp	r5, #0
 800d836:	d04d      	beq.n	800d8d4 <_printf_i+0x1b4>
 800d838:	4615      	mov	r5, r2
 800d83a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d83e:	fb03 6711 	mls	r7, r3, r1, r6
 800d842:	5dc7      	ldrb	r7, [r0, r7]
 800d844:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d848:	4637      	mov	r7, r6
 800d84a:	42bb      	cmp	r3, r7
 800d84c:	460e      	mov	r6, r1
 800d84e:	d9f4      	bls.n	800d83a <_printf_i+0x11a>
 800d850:	2b08      	cmp	r3, #8
 800d852:	d10b      	bne.n	800d86c <_printf_i+0x14c>
 800d854:	6823      	ldr	r3, [r4, #0]
 800d856:	07de      	lsls	r6, r3, #31
 800d858:	d508      	bpl.n	800d86c <_printf_i+0x14c>
 800d85a:	6923      	ldr	r3, [r4, #16]
 800d85c:	6861      	ldr	r1, [r4, #4]
 800d85e:	4299      	cmp	r1, r3
 800d860:	bfde      	ittt	le
 800d862:	2330      	movle	r3, #48	; 0x30
 800d864:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d868:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d86c:	1b52      	subs	r2, r2, r5
 800d86e:	6122      	str	r2, [r4, #16]
 800d870:	f8cd a000 	str.w	sl, [sp]
 800d874:	464b      	mov	r3, r9
 800d876:	aa03      	add	r2, sp, #12
 800d878:	4621      	mov	r1, r4
 800d87a:	4640      	mov	r0, r8
 800d87c:	f7ff fee2 	bl	800d644 <_printf_common>
 800d880:	3001      	adds	r0, #1
 800d882:	d14c      	bne.n	800d91e <_printf_i+0x1fe>
 800d884:	f04f 30ff 	mov.w	r0, #4294967295
 800d888:	b004      	add	sp, #16
 800d88a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d88e:	4835      	ldr	r0, [pc, #212]	; (800d964 <_printf_i+0x244>)
 800d890:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d894:	6829      	ldr	r1, [r5, #0]
 800d896:	6823      	ldr	r3, [r4, #0]
 800d898:	f851 6b04 	ldr.w	r6, [r1], #4
 800d89c:	6029      	str	r1, [r5, #0]
 800d89e:	061d      	lsls	r5, r3, #24
 800d8a0:	d514      	bpl.n	800d8cc <_printf_i+0x1ac>
 800d8a2:	07df      	lsls	r7, r3, #31
 800d8a4:	bf44      	itt	mi
 800d8a6:	f043 0320 	orrmi.w	r3, r3, #32
 800d8aa:	6023      	strmi	r3, [r4, #0]
 800d8ac:	b91e      	cbnz	r6, 800d8b6 <_printf_i+0x196>
 800d8ae:	6823      	ldr	r3, [r4, #0]
 800d8b0:	f023 0320 	bic.w	r3, r3, #32
 800d8b4:	6023      	str	r3, [r4, #0]
 800d8b6:	2310      	movs	r3, #16
 800d8b8:	e7b0      	b.n	800d81c <_printf_i+0xfc>
 800d8ba:	6823      	ldr	r3, [r4, #0]
 800d8bc:	f043 0320 	orr.w	r3, r3, #32
 800d8c0:	6023      	str	r3, [r4, #0]
 800d8c2:	2378      	movs	r3, #120	; 0x78
 800d8c4:	4828      	ldr	r0, [pc, #160]	; (800d968 <_printf_i+0x248>)
 800d8c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d8ca:	e7e3      	b.n	800d894 <_printf_i+0x174>
 800d8cc:	0659      	lsls	r1, r3, #25
 800d8ce:	bf48      	it	mi
 800d8d0:	b2b6      	uxthmi	r6, r6
 800d8d2:	e7e6      	b.n	800d8a2 <_printf_i+0x182>
 800d8d4:	4615      	mov	r5, r2
 800d8d6:	e7bb      	b.n	800d850 <_printf_i+0x130>
 800d8d8:	682b      	ldr	r3, [r5, #0]
 800d8da:	6826      	ldr	r6, [r4, #0]
 800d8dc:	6961      	ldr	r1, [r4, #20]
 800d8de:	1d18      	adds	r0, r3, #4
 800d8e0:	6028      	str	r0, [r5, #0]
 800d8e2:	0635      	lsls	r5, r6, #24
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	d501      	bpl.n	800d8ec <_printf_i+0x1cc>
 800d8e8:	6019      	str	r1, [r3, #0]
 800d8ea:	e002      	b.n	800d8f2 <_printf_i+0x1d2>
 800d8ec:	0670      	lsls	r0, r6, #25
 800d8ee:	d5fb      	bpl.n	800d8e8 <_printf_i+0x1c8>
 800d8f0:	8019      	strh	r1, [r3, #0]
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	6123      	str	r3, [r4, #16]
 800d8f6:	4615      	mov	r5, r2
 800d8f8:	e7ba      	b.n	800d870 <_printf_i+0x150>
 800d8fa:	682b      	ldr	r3, [r5, #0]
 800d8fc:	1d1a      	adds	r2, r3, #4
 800d8fe:	602a      	str	r2, [r5, #0]
 800d900:	681d      	ldr	r5, [r3, #0]
 800d902:	6862      	ldr	r2, [r4, #4]
 800d904:	2100      	movs	r1, #0
 800d906:	4628      	mov	r0, r5
 800d908:	f7f2 fc6a 	bl	80001e0 <memchr>
 800d90c:	b108      	cbz	r0, 800d912 <_printf_i+0x1f2>
 800d90e:	1b40      	subs	r0, r0, r5
 800d910:	6060      	str	r0, [r4, #4]
 800d912:	6863      	ldr	r3, [r4, #4]
 800d914:	6123      	str	r3, [r4, #16]
 800d916:	2300      	movs	r3, #0
 800d918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d91c:	e7a8      	b.n	800d870 <_printf_i+0x150>
 800d91e:	6923      	ldr	r3, [r4, #16]
 800d920:	462a      	mov	r2, r5
 800d922:	4649      	mov	r1, r9
 800d924:	4640      	mov	r0, r8
 800d926:	47d0      	blx	sl
 800d928:	3001      	adds	r0, #1
 800d92a:	d0ab      	beq.n	800d884 <_printf_i+0x164>
 800d92c:	6823      	ldr	r3, [r4, #0]
 800d92e:	079b      	lsls	r3, r3, #30
 800d930:	d413      	bmi.n	800d95a <_printf_i+0x23a>
 800d932:	68e0      	ldr	r0, [r4, #12]
 800d934:	9b03      	ldr	r3, [sp, #12]
 800d936:	4298      	cmp	r0, r3
 800d938:	bfb8      	it	lt
 800d93a:	4618      	movlt	r0, r3
 800d93c:	e7a4      	b.n	800d888 <_printf_i+0x168>
 800d93e:	2301      	movs	r3, #1
 800d940:	4632      	mov	r2, r6
 800d942:	4649      	mov	r1, r9
 800d944:	4640      	mov	r0, r8
 800d946:	47d0      	blx	sl
 800d948:	3001      	adds	r0, #1
 800d94a:	d09b      	beq.n	800d884 <_printf_i+0x164>
 800d94c:	3501      	adds	r5, #1
 800d94e:	68e3      	ldr	r3, [r4, #12]
 800d950:	9903      	ldr	r1, [sp, #12]
 800d952:	1a5b      	subs	r3, r3, r1
 800d954:	42ab      	cmp	r3, r5
 800d956:	dcf2      	bgt.n	800d93e <_printf_i+0x21e>
 800d958:	e7eb      	b.n	800d932 <_printf_i+0x212>
 800d95a:	2500      	movs	r5, #0
 800d95c:	f104 0619 	add.w	r6, r4, #25
 800d960:	e7f5      	b.n	800d94e <_printf_i+0x22e>
 800d962:	bf00      	nop
 800d964:	0800e5dd 	.word	0x0800e5dd
 800d968:	0800e5ee 	.word	0x0800e5ee

0800d96c <_read_r>:
 800d96c:	b538      	push	{r3, r4, r5, lr}
 800d96e:	4d07      	ldr	r5, [pc, #28]	; (800d98c <_read_r+0x20>)
 800d970:	4604      	mov	r4, r0
 800d972:	4608      	mov	r0, r1
 800d974:	4611      	mov	r1, r2
 800d976:	2200      	movs	r2, #0
 800d978:	602a      	str	r2, [r5, #0]
 800d97a:	461a      	mov	r2, r3
 800d97c:	f7f3 ff2a 	bl	80017d4 <_read>
 800d980:	1c43      	adds	r3, r0, #1
 800d982:	d102      	bne.n	800d98a <_read_r+0x1e>
 800d984:	682b      	ldr	r3, [r5, #0]
 800d986:	b103      	cbz	r3, 800d98a <_read_r+0x1e>
 800d988:	6023      	str	r3, [r4, #0]
 800d98a:	bd38      	pop	{r3, r4, r5, pc}
 800d98c:	20002bb4 	.word	0x20002bb4

0800d990 <abort>:
 800d990:	b508      	push	{r3, lr}
 800d992:	2006      	movs	r0, #6
 800d994:	f000 f898 	bl	800dac8 <raise>
 800d998:	2001      	movs	r0, #1
 800d99a:	f7f3 ff11 	bl	80017c0 <_exit>
	...

0800d9a0 <_fstat_r>:
 800d9a0:	b538      	push	{r3, r4, r5, lr}
 800d9a2:	4d07      	ldr	r5, [pc, #28]	; (800d9c0 <_fstat_r+0x20>)
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	4604      	mov	r4, r0
 800d9a8:	4608      	mov	r0, r1
 800d9aa:	4611      	mov	r1, r2
 800d9ac:	602b      	str	r3, [r5, #0]
 800d9ae:	f7f3 ff56 	bl	800185e <_fstat>
 800d9b2:	1c43      	adds	r3, r0, #1
 800d9b4:	d102      	bne.n	800d9bc <_fstat_r+0x1c>
 800d9b6:	682b      	ldr	r3, [r5, #0]
 800d9b8:	b103      	cbz	r3, 800d9bc <_fstat_r+0x1c>
 800d9ba:	6023      	str	r3, [r4, #0]
 800d9bc:	bd38      	pop	{r3, r4, r5, pc}
 800d9be:	bf00      	nop
 800d9c0:	20002bb4 	.word	0x20002bb4

0800d9c4 <_isatty_r>:
 800d9c4:	b538      	push	{r3, r4, r5, lr}
 800d9c6:	4d06      	ldr	r5, [pc, #24]	; (800d9e0 <_isatty_r+0x1c>)
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	4604      	mov	r4, r0
 800d9cc:	4608      	mov	r0, r1
 800d9ce:	602b      	str	r3, [r5, #0]
 800d9d0:	f7f3 ff55 	bl	800187e <_isatty>
 800d9d4:	1c43      	adds	r3, r0, #1
 800d9d6:	d102      	bne.n	800d9de <_isatty_r+0x1a>
 800d9d8:	682b      	ldr	r3, [r5, #0]
 800d9da:	b103      	cbz	r3, 800d9de <_isatty_r+0x1a>
 800d9dc:	6023      	str	r3, [r4, #0]
 800d9de:	bd38      	pop	{r3, r4, r5, pc}
 800d9e0:	20002bb4 	.word	0x20002bb4

0800d9e4 <memmove>:
 800d9e4:	4288      	cmp	r0, r1
 800d9e6:	b510      	push	{r4, lr}
 800d9e8:	eb01 0402 	add.w	r4, r1, r2
 800d9ec:	d902      	bls.n	800d9f4 <memmove+0x10>
 800d9ee:	4284      	cmp	r4, r0
 800d9f0:	4623      	mov	r3, r4
 800d9f2:	d807      	bhi.n	800da04 <memmove+0x20>
 800d9f4:	1e43      	subs	r3, r0, #1
 800d9f6:	42a1      	cmp	r1, r4
 800d9f8:	d008      	beq.n	800da0c <memmove+0x28>
 800d9fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da02:	e7f8      	b.n	800d9f6 <memmove+0x12>
 800da04:	4402      	add	r2, r0
 800da06:	4601      	mov	r1, r0
 800da08:	428a      	cmp	r2, r1
 800da0a:	d100      	bne.n	800da0e <memmove+0x2a>
 800da0c:	bd10      	pop	{r4, pc}
 800da0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da16:	e7f7      	b.n	800da08 <memmove+0x24>

0800da18 <_realloc_r>:
 800da18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da1c:	4680      	mov	r8, r0
 800da1e:	4614      	mov	r4, r2
 800da20:	460e      	mov	r6, r1
 800da22:	b921      	cbnz	r1, 800da2e <_realloc_r+0x16>
 800da24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da28:	4611      	mov	r1, r2
 800da2a:	f7fe be65 	b.w	800c6f8 <_malloc_r>
 800da2e:	b92a      	cbnz	r2, 800da3c <_realloc_r+0x24>
 800da30:	f7fe fdf6 	bl	800c620 <_free_r>
 800da34:	4625      	mov	r5, r4
 800da36:	4628      	mov	r0, r5
 800da38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da3c:	f000 f860 	bl	800db00 <_malloc_usable_size_r>
 800da40:	4284      	cmp	r4, r0
 800da42:	4607      	mov	r7, r0
 800da44:	d802      	bhi.n	800da4c <_realloc_r+0x34>
 800da46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800da4a:	d812      	bhi.n	800da72 <_realloc_r+0x5a>
 800da4c:	4621      	mov	r1, r4
 800da4e:	4640      	mov	r0, r8
 800da50:	f7fe fe52 	bl	800c6f8 <_malloc_r>
 800da54:	4605      	mov	r5, r0
 800da56:	2800      	cmp	r0, #0
 800da58:	d0ed      	beq.n	800da36 <_realloc_r+0x1e>
 800da5a:	42bc      	cmp	r4, r7
 800da5c:	4622      	mov	r2, r4
 800da5e:	4631      	mov	r1, r6
 800da60:	bf28      	it	cs
 800da62:	463a      	movcs	r2, r7
 800da64:	f7fe fdc6 	bl	800c5f4 <memcpy>
 800da68:	4631      	mov	r1, r6
 800da6a:	4640      	mov	r0, r8
 800da6c:	f7fe fdd8 	bl	800c620 <_free_r>
 800da70:	e7e1      	b.n	800da36 <_realloc_r+0x1e>
 800da72:	4635      	mov	r5, r6
 800da74:	e7df      	b.n	800da36 <_realloc_r+0x1e>

0800da76 <_raise_r>:
 800da76:	291f      	cmp	r1, #31
 800da78:	b538      	push	{r3, r4, r5, lr}
 800da7a:	4604      	mov	r4, r0
 800da7c:	460d      	mov	r5, r1
 800da7e:	d904      	bls.n	800da8a <_raise_r+0x14>
 800da80:	2316      	movs	r3, #22
 800da82:	6003      	str	r3, [r0, #0]
 800da84:	f04f 30ff 	mov.w	r0, #4294967295
 800da88:	bd38      	pop	{r3, r4, r5, pc}
 800da8a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800da8c:	b112      	cbz	r2, 800da94 <_raise_r+0x1e>
 800da8e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da92:	b94b      	cbnz	r3, 800daa8 <_raise_r+0x32>
 800da94:	4620      	mov	r0, r4
 800da96:	f000 f831 	bl	800dafc <_getpid_r>
 800da9a:	462a      	mov	r2, r5
 800da9c:	4601      	mov	r1, r0
 800da9e:	4620      	mov	r0, r4
 800daa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800daa4:	f000 b818 	b.w	800dad8 <_kill_r>
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d00a      	beq.n	800dac2 <_raise_r+0x4c>
 800daac:	1c59      	adds	r1, r3, #1
 800daae:	d103      	bne.n	800dab8 <_raise_r+0x42>
 800dab0:	2316      	movs	r3, #22
 800dab2:	6003      	str	r3, [r0, #0]
 800dab4:	2001      	movs	r0, #1
 800dab6:	e7e7      	b.n	800da88 <_raise_r+0x12>
 800dab8:	2400      	movs	r4, #0
 800daba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dabe:	4628      	mov	r0, r5
 800dac0:	4798      	blx	r3
 800dac2:	2000      	movs	r0, #0
 800dac4:	e7e0      	b.n	800da88 <_raise_r+0x12>
	...

0800dac8 <raise>:
 800dac8:	4b02      	ldr	r3, [pc, #8]	; (800dad4 <raise+0xc>)
 800daca:	4601      	mov	r1, r0
 800dacc:	6818      	ldr	r0, [r3, #0]
 800dace:	f7ff bfd2 	b.w	800da76 <_raise_r>
 800dad2:	bf00      	nop
 800dad4:	20000010 	.word	0x20000010

0800dad8 <_kill_r>:
 800dad8:	b538      	push	{r3, r4, r5, lr}
 800dada:	4d07      	ldr	r5, [pc, #28]	; (800daf8 <_kill_r+0x20>)
 800dadc:	2300      	movs	r3, #0
 800dade:	4604      	mov	r4, r0
 800dae0:	4608      	mov	r0, r1
 800dae2:	4611      	mov	r1, r2
 800dae4:	602b      	str	r3, [r5, #0]
 800dae6:	f7f3 fe5b 	bl	80017a0 <_kill>
 800daea:	1c43      	adds	r3, r0, #1
 800daec:	d102      	bne.n	800daf4 <_kill_r+0x1c>
 800daee:	682b      	ldr	r3, [r5, #0]
 800daf0:	b103      	cbz	r3, 800daf4 <_kill_r+0x1c>
 800daf2:	6023      	str	r3, [r4, #0]
 800daf4:	bd38      	pop	{r3, r4, r5, pc}
 800daf6:	bf00      	nop
 800daf8:	20002bb4 	.word	0x20002bb4

0800dafc <_getpid_r>:
 800dafc:	f7f3 be48 	b.w	8001790 <_getpid>

0800db00 <_malloc_usable_size_r>:
 800db00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db04:	1f18      	subs	r0, r3, #4
 800db06:	2b00      	cmp	r3, #0
 800db08:	bfbc      	itt	lt
 800db0a:	580b      	ldrlt	r3, [r1, r0]
 800db0c:	18c0      	addlt	r0, r0, r3
 800db0e:	4770      	bx	lr

0800db10 <_init>:
 800db10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db12:	bf00      	nop
 800db14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db16:	bc08      	pop	{r3}
 800db18:	469e      	mov	lr, r3
 800db1a:	4770      	bx	lr

0800db1c <_fini>:
 800db1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db1e:	bf00      	nop
 800db20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db22:	bc08      	pop	{r3}
 800db24:	469e      	mov	lr, r3
 800db26:	4770      	bx	lr
