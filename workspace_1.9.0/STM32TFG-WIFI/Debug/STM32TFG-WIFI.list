
STM32TFG-WIFI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac0  0800e574  0800e574  0001e574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f034  0800f034  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800f034  0800f034  0001f034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f03c  0800f03c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f03c  0800f03c  0001f03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f040  0800f040  0001f040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800f044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a7c  20000074  0800f0b8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002af0  0800f0b8  00022af0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031056  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006182  00000000  00000000  000510fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002940  00000000  00000000  00057280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000026d8  00000000  00000000  00059bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002eb02  00000000  00000000  0005c298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030376  00000000  00000000  0008ad9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d19e  00000000  00000000  000bb110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c82ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bdc4  00000000  00000000  001c8300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e55c 	.word	0x0800e55c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800e55c 	.word	0x0800e55c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <S_PrintOnSerial>:
 *
 * Parámetros:
 * - format: cadena de formato.
 * - ...: argumentos variables para el formato.
 */
void S_PrintOnSerial(const char *format, ...) {
 8000584:	b40f      	push	{r0, r1, r2, r3}
 8000586:	b580      	push	{r7, lr}
 8000588:	b082      	sub	sp, #8
 800058a:	af00      	add	r7, sp, #0
	while (xSemaphoreTake(xSemaphoreSerialHandle, portMAX_DELAY) != pdTRUE)
 800058c:	bf00      	nop
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <S_PrintOnSerial+0x48>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f04f 31ff 	mov.w	r1, #4294967295
 8000596:	4618      	mov	r0, r3
 8000598:	f00a f8ee 	bl	800a778 <xQueueSemaphoreTake>
 800059c:	4603      	mov	r3, r0
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d1f5      	bne.n	800058e <S_PrintOnSerial+0xa>
		;
	va_list args;
	va_start(args, format);
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	607b      	str	r3, [r7, #4]
	printf(format, args);
 80005a8:	6879      	ldr	r1, [r7, #4]
 80005aa:	6938      	ldr	r0, [r7, #16]
 80005ac:	f00c fd4a 	bl	800d044 <iprintf>
	va_end(args);
	// Give the semaphore to indicate that the transmission has finished
	xSemaphoreGiveFromISR(xSemaphoreSerialHandle, pdFALSE);
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <S_PrintOnSerial+0x48>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f009 ff71 	bl	800a49e <xQueueGiveFromISR>
	// Yield to higher priority task if necessary
	portYIELD_FROM_ISR(pdFALSE);
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005c6:	b004      	add	sp, #16
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	200007e0 	.word	0x200007e0

080005d0 <I_JsonToInstructions>:
 *
 * Retorna:
 * - 0 si la conversión fue exitosa, o un código de error si ocurrió algún problema.
 */
uint8_t I_JsonToInstructions(const char *json, uint8_t *iJson, uint8_t *iSize,
		uint8_t *dJson, uint8_t *dSize) {
 80005d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005d4:	b08f      	sub	sp, #60	; 0x3c
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6178      	str	r0, [r7, #20]
 80005da:	6139      	str	r1, [r7, #16]
 80005dc:	60fa      	str	r2, [r7, #12]
 80005de:	60bb      	str	r3, [r7, #8]

	// Obtener los valores de "ins" y "dur" del JSON
	const char *insJson = findJsonValue(json, "\"ins\"");
 80005e0:	495a      	ldr	r1, [pc, #360]	; (800074c <I_JsonToInstructions+0x17c>)
 80005e2:	6978      	ldr	r0, [r7, #20]
 80005e4:	f000 f8b6 	bl	8000754 <findJsonValue>
 80005e8:	6378      	str	r0, [r7, #52]	; 0x34
	const char *durJson = findJsonValue(json, "\"dur\"");
 80005ea:	4959      	ldr	r1, [pc, #356]	; (8000750 <I_JsonToInstructions+0x180>)
 80005ec:	6978      	ldr	r0, [r7, #20]
 80005ee:	f000 f8b1 	bl	8000754 <findJsonValue>
 80005f2:	62b8      	str	r0, [r7, #40]	; 0x28

	// Contar el número de elementos en cada array JSON
	uint8_t insSize = 1; // Inicializar en 1, ya que siempre hay al menos un elemento
 80005f4:	2301      	movs	r3, #1
 80005f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t durSize = 1;
 80005fa:	2301      	movs	r3, #1
 80005fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	// Contar los elementos en el array "ins"
	const char *ptr = insJson;
 8000600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000602:	633b      	str	r3, [r7, #48]	; 0x30
	while (*ptr != ']') {
 8000604:	e00b      	b.n	800061e <I_JsonToInstructions+0x4e>
		if (*ptr == ',') {
 8000606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b2c      	cmp	r3, #44	; 0x2c
 800060c:	d104      	bne.n	8000618 <I_JsonToInstructions+0x48>
			++insSize;
 800060e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000612:	3301      	adds	r3, #1
 8000614:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		}
		++ptr;
 8000618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800061a:	3301      	adds	r3, #1
 800061c:	633b      	str	r3, [r7, #48]	; 0x30
	while (*ptr != ']') {
 800061e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b5d      	cmp	r3, #93	; 0x5d
 8000624:	d1ef      	bne.n	8000606 <I_JsonToInstructions+0x36>
	}

	// Contar los elementos en el array "dur"
	ptr = durJson;
 8000626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000628:	633b      	str	r3, [r7, #48]	; 0x30
	while (*ptr != ']') {
 800062a:	e00b      	b.n	8000644 <I_JsonToInstructions+0x74>
		if (*ptr == ',') {
 800062c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b2c      	cmp	r3, #44	; 0x2c
 8000632:	d104      	bne.n	800063e <I_JsonToInstructions+0x6e>
			++durSize;
 8000634:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000638:	3301      	adds	r3, #1
 800063a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		++ptr;
 800063e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000640:	3301      	adds	r3, #1
 8000642:	633b      	str	r3, [r7, #48]	; 0x30
	while (*ptr != ']') {
 8000644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b5d      	cmp	r3, #93	; 0x5d
 800064a:	d1ef      	bne.n	800062c <I_JsonToInstructions+0x5c>
	}

	uint8_t instructionJson[insSize];
 800064c:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8000650:	466b      	mov	r3, sp
 8000652:	461e      	mov	r6, r3
 8000654:	460b      	mov	r3, r1
 8000656:	3b01      	subs	r3, #1
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
 800065a:	b2cb      	uxtb	r3, r1
 800065c:	2200      	movs	r2, #0
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	607a      	str	r2, [r7, #4]
 8000662:	f04f 0200 	mov.w	r2, #0
 8000666:	f04f 0300 	mov.w	r3, #0
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	00c3      	lsls	r3, r0, #3
 800066e:	6838      	ldr	r0, [r7, #0]
 8000670:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000674:	6838      	ldr	r0, [r7, #0]
 8000676:	00c2      	lsls	r2, r0, #3
 8000678:	b2cb      	uxtb	r3, r1
 800067a:	2200      	movs	r2, #0
 800067c:	469a      	mov	sl, r3
 800067e:	4693      	mov	fp, r2
 8000680:	f04f 0200 	mov.w	r2, #0
 8000684:	f04f 0300 	mov.w	r3, #0
 8000688:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800068c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000690:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000694:	460b      	mov	r3, r1
 8000696:	3307      	adds	r3, #7
 8000698:	08db      	lsrs	r3, r3, #3
 800069a:	00db      	lsls	r3, r3, #3
 800069c:	ebad 0d03 	sub.w	sp, sp, r3
 80006a0:	466b      	mov	r3, sp
 80006a2:	3300      	adds	r3, #0
 80006a4:	623b      	str	r3, [r7, #32]
	uint8_t durationJson[durSize];
 80006a6:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80006aa:	460b      	mov	r3, r1
 80006ac:	3b01      	subs	r3, #1
 80006ae:	61fb      	str	r3, [r7, #28]
 80006b0:	b2cb      	uxtb	r3, r1
 80006b2:	2200      	movs	r2, #0
 80006b4:	4698      	mov	r8, r3
 80006b6:	4691      	mov	r9, r2
 80006b8:	f04f 0200 	mov.w	r2, #0
 80006bc:	f04f 0300 	mov.w	r3, #0
 80006c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80006c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80006c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80006cc:	b2cb      	uxtb	r3, r1
 80006ce:	2200      	movs	r2, #0
 80006d0:	461c      	mov	r4, r3
 80006d2:	4615      	mov	r5, r2
 80006d4:	f04f 0200 	mov.w	r2, #0
 80006d8:	f04f 0300 	mov.w	r3, #0
 80006dc:	00eb      	lsls	r3, r5, #3
 80006de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80006e2:	00e2      	lsls	r2, r4, #3
 80006e4:	460b      	mov	r3, r1
 80006e6:	3307      	adds	r3, #7
 80006e8:	08db      	lsrs	r3, r3, #3
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	ebad 0d03 	sub.w	sp, sp, r3
 80006f0:	466b      	mov	r3, sp
 80006f2:	3300      	adds	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]

	// Convertir los elementos del array "ins" y "dur" a uint8_t
	parseJsonArray(insJson, instructionJson, insSize);
 80006f6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80006fa:	461a      	mov	r2, r3
 80006fc:	6a39      	ldr	r1, [r7, #32]
 80006fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000700:	f000 f844 	bl	800078c <parseJsonArray>
	parseJsonArray(durJson, durationJson, durSize);
 8000704:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000708:	461a      	mov	r2, r3
 800070a:	69b9      	ldr	r1, [r7, #24]
 800070c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800070e:	f000 f83d 	bl	800078c <parseJsonArray>

	// Copiar los arrays resultantes a los arrays de salida
	memcpy(iJson, (uint8_t*) instructionJson, insSize);
 8000712:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000716:	461a      	mov	r2, r3
 8000718:	6a39      	ldr	r1, [r7, #32]
 800071a:	6938      	ldr	r0, [r7, #16]
 800071c:	f00c fb9c 	bl	800ce58 <memcpy>
	memcpy(dJson, (uint8_t*) durationJson, durSize);
 8000720:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000724:	461a      	mov	r2, r3
 8000726:	69b9      	ldr	r1, [r7, #24]
 8000728:	68b8      	ldr	r0, [r7, #8]
 800072a:	f00c fb95 	bl	800ce58 <memcpy>

	// Asignar los tamaños de los arrays de salida
	(*iSize) = insSize;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8000734:	701a      	strb	r2, [r3, #0]
	(*dSize) = durSize;
 8000736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000738:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800073c:	701a      	strb	r2, [r3, #0]

	return 0;
 800073e:	2300      	movs	r3, #0
 8000740:	46b5      	mov	sp, r6
}
 8000742:	4618      	mov	r0, r3
 8000744:	373c      	adds	r7, #60	; 0x3c
 8000746:	46bd      	mov	sp, r7
 8000748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800074c:	0800e57c 	.word	0x0800e57c
 8000750:	0800e584 	.word	0x0800e584

08000754 <findJsonValue>:
// Parámetros:
// - json: cadena JSON en la que se buscará la clave y su valor
// - key: clave que se desea encontrar en el JSON
// Retorna:
// - Puntero al inicio del valor de la clave encontrada, o NULL si no se encuentra la clave
const char* findJsonValue(const char *json, const char *key) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
    const char *start = strstr(json, key);
 800075e:	6839      	ldr	r1, [r7, #0]
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f00c fd4d 	bl	800d200 <strstr>
 8000766:	60f8      	str	r0, [r7, #12]
    if (start == NULL) {
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d101      	bne.n	8000772 <findJsonValue+0x1e>
        return NULL;
 800076e:	2300      	movs	r3, #0
 8000770:	e008      	b.n	8000784 <findJsonValue+0x30>
    }
    start += strlen(key) + 2; // se salta la clave y ": ["
 8000772:	6838      	ldr	r0, [r7, #0]
 8000774:	f7ff fd2c 	bl	80001d0 <strlen>
 8000778:	4603      	mov	r3, r0
 800077a:	3302      	adds	r3, #2
 800077c:	68fa      	ldr	r2, [r7, #12]
 800077e:	4413      	add	r3, r2
 8000780:	60fb      	str	r3, [r7, #12]

    return start;
 8000782:	68fb      	ldr	r3, [r7, #12]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <parseJsonArray>:
// Analiza un array en formato JSON y guarda los valores en un array de enteros
// Parámetros:
// - jsonArray: cadena que representa el array en formato JSON
// - array: array de enteros en el que se guardarán los valores
// - size: tamaño del array de enteros y del array JSON
void parseJsonArray(const char *jsonArray, uint8_t *array, size_t size) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
    const char *ptr = jsonArray;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	617b      	str	r3, [r7, #20]

    ptr++; // Para omitir el primer '['
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	3301      	adds	r3, #1
 80007a0:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < size; i++) {
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	e012      	b.n	80007ce <parseJsonArray+0x42>
        array[i] = (uint8_t) atoi(ptr);
 80007a8:	6978      	ldr	r0, [r7, #20]
 80007aa:	f00c fb07 	bl	800cdbc <atoi>
 80007ae:	4601      	mov	r1, r0
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	4413      	add	r3, r2
 80007b6:	b2ca      	uxtb	r2, r1
 80007b8:	701a      	strb	r2, [r3, #0]
        ptr = strchr(ptr, ',') + 2; // se salta el valor actual y ", "
 80007ba:	212c      	movs	r1, #44	; 0x2c
 80007bc:	6978      	ldr	r0, [r7, #20]
 80007be:	f00c fcff 	bl	800d1c0 <strchr>
 80007c2:	4603      	mov	r3, r0
 80007c4:	3302      	adds	r3, #2
 80007c6:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < size; i++) {
 80007c8:	693b      	ldr	r3, [r7, #16]
 80007ca:	3301      	adds	r3, #1
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	693a      	ldr	r2, [r7, #16]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d3e8      	bcc.n	80007a8 <parseJsonArray+0x1c>
    }
}
 80007d6:	bf00      	nop
 80007d8:	bf00      	nop
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <__io_putchar>:

// Transmite un carácter a través de UART1 y UART4
// Parámetros:
// - ch: carácter a transmitir
// Retorna el carácter transmitido
PUTCHAR_PROTOTYPE {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	// Transmits character ch over UART1 and UART4
	while (HAL_OK != HAL_UART_Transmit_IT(&huart1, (uint8_t*) &ch, 1)) {
 80007e8:	bf00      	nop
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2201      	movs	r2, #1
 80007ee:	4619      	mov	r1, r3
 80007f0:	480a      	ldr	r0, [pc, #40]	; (800081c <__io_putchar+0x3c>)
 80007f2:	f005 fec5 	bl	8006580 <HAL_UART_Transmit_IT>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1f6      	bne.n	80007ea <__io_putchar+0xa>
		// Wait for transmit to finish
		;
	}
	while (HAL_OK != HAL_UART_Transmit_IT(&huart4, (uint8_t*) &ch, 1)) {
 80007fc:	bf00      	nop
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2201      	movs	r2, #1
 8000802:	4619      	mov	r1, r3
 8000804:	4806      	ldr	r0, [pc, #24]	; (8000820 <__io_putchar+0x40>)
 8000806:	f005 febb 	bl	8006580 <HAL_UART_Transmit_IT>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d1f6      	bne.n	80007fe <__io_putchar+0x1e>
		// Wait for transmit to finish
		;
	}
	return ch;
 8000810:	687b      	ldr	r3, [r7, #4]
}
 8000812:	4618      	mov	r0, r3
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000248 	.word	0x20000248
 8000820:	200001c4 	.word	0x200001c4

08000824 <serialRxTask>:

int printTransmision = 0;

// Tarea que se encarga de gestionar las peticiones al servidor usando una cola como elemento sincronizador
void serialRxTask(void *parg) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	uint8_t ins = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	75fb      	strb	r3, [r7, #23]
	uint8_t time = 20;
 8000830:	2314      	movs	r3, #20
 8000832:	75bb      	strb	r3, [r7, #22]

	osMessageQueueReset(instructionQueueHandle);
 8000834:	4b18      	ldr	r3, [pc, #96]	; (8000898 <serialRxTask+0x74>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4618      	mov	r0, r3
 800083a:	f009 f9e5 	bl	8009c08 <osMessageQueueReset>
	while (1) {
		uint32_t messageCount = osMessageQueueGetCount(instructionQueueHandle);
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <serialRxTask+0x74>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4618      	mov	r0, r3
 8000844:	f009 f9c0 	bl	8009bc8 <osMessageQueueGetCount>
 8000848:	6138      	str	r0, [r7, #16]
		vTaskDelay(500);
 800084a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800084e:	f00a fcd1 	bl	800b1f4 <vTaskDelay>
		//S_PrintOnSerial("messagesWaiting %u\r\n", messageCount);
		//Si se ha consumido el mensaje significa que se ha hecho la peticion JSON
		if (messageCount < 1) {
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1f2      	bne.n	800083e <serialRxTask+0x1a>
			//S_PrintOnSerial("-new\r\n");
			// Allocate memory for a MovementInstruction_t struct
			MovementInstruction_t *pMov = malloc(sizeof(MovementInstruction_t));
 8000858:	2002      	movs	r0, #2
 800085a:	f00c fadd 	bl	800ce18 <malloc>
 800085e:	4603      	mov	r3, r0
 8000860:	60fb      	str	r3, [r7, #12]
			// Create the struct to be sent to the queue
			I_CreateInstructionStruct(ins, time, pMov);
 8000862:	7db9      	ldrb	r1, [r7, #22]
 8000864:	7dfb      	ldrb	r3, [r7, #23]
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f8e7 	bl	8000a3c <I_CreateInstructionStruct>
			// Se envia un nuevo mensaje a la cola para que se haga otra peticion
			osStatus_t status = osMessageQueuePut(instructionQueueHandle, pMov,
 800086e:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <serialRxTask+0x74>)
 8000870:	6818      	ldr	r0, [r3, #0]
 8000872:	2300      	movs	r3, #0
 8000874:	2200      	movs	r2, #0
 8000876:	68f9      	ldr	r1, [r7, #12]
 8000878:	f009 f8e8 	bl	8009a4c <osMessageQueuePut>
 800087c:	60b8      	str	r0, [r7, #8]
					0U, 0U);
			if (status == osOK) {
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d1dc      	bne.n	800083e <serialRxTask+0x1a>
				// El mensaje se envió correctamente
				// Update the instruction to be sent
				ins = (ins + 1) % I_NUM_INSTRUCTIONS;
 8000884:	7dfb      	ldrb	r3, [r7, #23]
 8000886:	3301      	adds	r3, #1
 8000888:	2205      	movs	r2, #5
 800088a:	fb93 f1f2 	sdiv	r1, r3, r2
 800088e:	fb01 f202 	mul.w	r2, r1, r2
 8000892:	1a9b      	subs	r3, r3, r2
 8000894:	75fb      	strb	r3, [r7, #23]
	while (1) {
 8000896:	e7d2      	b.n	800083e <serialRxTask+0x1a>
 8000898:	200007dc 	.word	0x200007dc

0800089c <serialTxTask>:
	}
}

// Tarea que se encarga de enviar datos por el puerto serie.
// Genera un JSON con instrucciones y las envía.
void serialTxTask(void *parg) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b0ec      	sub	sp, #432	; 0x1b0
 80008a0:	af02      	add	r7, sp, #8
 80008a2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80008a6:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80008aa:	6018      	str	r0, [r3, #0]
	//Simulacion de un JSON proveniente de la API para no tener que esperar la conexion cada vez
	const char *json =
 80008ac:	4b35      	ldr	r3, [pc, #212]	; (8000984 <serialTxTask+0xe8>)
 80008ae:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
			"{\"ins\": [2, 4, 0, 1, 5, 3, 1, 2, 4, 0, 5, 3, 2, 1, 4, 0, 3, 5, 2, 1, 4, 0, 3, 5, 2, 4, 0, 1, 5, 3],"
					"\"dur\": [80, 40, 70, 30, 90, 50, 10, 20, 60, 80, 40, 70, 30, 90, 50, 10, 20, 60, 80, 40, 60, 30, 90, 50, 10, 20, 60, 80, 40, 70]}";
	uint8_t iJson[MAX_NUM_INSTRUCTIONS];
	uint8_t dJson[MAX_NUM_INSTRUCTIONS];
	uint8_t *iSize = malloc(sizeof(uint8_t));
 80008b2:	2001      	movs	r0, #1
 80008b4:	f00c fab0 	bl	800ce18 <malloc>
 80008b8:	4603      	mov	r3, r0
 80008ba:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	uint8_t *dSize = malloc(sizeof(uint8_t));
 80008be:	2001      	movs	r0, #1
 80008c0:	f00c faaa 	bl	800ce18 <malloc>
 80008c4:	4603      	mov	r3, r0
 80008c6:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198

	//Procesa el JSON a un par de arrays correspondiente a las instrucciones
	I_JsonToInstructions(json, iJson, iSize, dJson, dSize);
 80008ca:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80008ce:	f507 719a 	add.w	r1, r7, #308	; 0x134
 80008d2:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	4613      	mov	r3, r2
 80008da:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80008de:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 80008e2:	f7ff fe75 	bl	80005d0 <I_JsonToInstructions>

	char result[200];
	memset(result, '\0', 200 - 1);
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	22c7      	movs	r2, #199	; 0xc7
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f00c fac0 	bl	800ce74 <memset>

	HAL_UART_Abort(&huart4);
 80008f4:	4824      	ldr	r0, [pc, #144]	; (8000988 <serialTxTask+0xec>)
 80008f6:	f005 feb1 	bl	800665c <HAL_UART_Abort>
	__HAL_UART_CLEAR_IT(&huart4, UART_CLEAR_OREF);
 80008fa:	4b23      	ldr	r3, [pc, #140]	; (8000988 <serialTxTask+0xec>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2208      	movs	r2, #8
 8000900:	621a      	str	r2, [r3, #32]

	for (size_t i = 0; i < (*iSize) && i < 20; i++) {
 8000902:	2300      	movs	r3, #0
 8000904:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000908:	e01e      	b.n	8000948 <serialTxTask+0xac>
		// Concatenar el elemento del primer array
		sprintf(result + strlen(result), "%d %d\n", (int) iJson[i],
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fc5e 	bl	80001d0 <strlen>
 8000914:	4602      	mov	r2, r0
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	1898      	adds	r0, r3, r2
 800091c:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8000920:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000924:	4413      	add	r3, r2
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4619      	mov	r1, r3
				(int) dJson[i]);
 800092a:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800092e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000932:	4413      	add	r3, r2
 8000934:	781b      	ldrb	r3, [r3, #0]
		sprintf(result + strlen(result), "%d %d\n", (int) iJson[i],
 8000936:	460a      	mov	r2, r1
 8000938:	4914      	ldr	r1, [pc, #80]	; (800098c <serialTxTask+0xf0>)
 800093a:	f00c fc21 	bl	800d180 <siprintf>
	for (size_t i = 0; i < (*iSize) && i < 20; i++) {
 800093e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000942:	3301      	adds	r3, #1
 8000944:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000948:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	461a      	mov	r2, r3
 8000950:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000954:	4293      	cmp	r3, r2
 8000956:	d203      	bcs.n	8000960 <serialTxTask+0xc4>
 8000958:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800095c:	2b13      	cmp	r3, #19
 800095e:	d9d4      	bls.n	800090a <serialTxTask+0x6e>
	}

	//sprintf(result+strlen(result), "\r\n");
	//Imprime por puerto serie las instrucciones
	S_PrintOnSerial(result);
 8000960:	f107 0308 	add.w	r3, r7, #8
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fe0d 	bl	8000584 <S_PrintOnSerial>

	//printf("-------- end instructions ------\r\n");

	free(iSize);
 800096a:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 800096e:	f00c fa5b 	bl	800ce28 <free>
	free(dSize);
 8000972:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
 8000976:	f00c fa57 	bl	800ce28 <free>
}
 800097a:	bf00      	nop
 800097c:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	0800e58c 	.word	0x0800e58c
 8000988:	200001c4 	.word	0x200001c4
 800098c:	0800e670 	.word	0x0800e670

08000990 <WebServerTask>:

// Tarea del servidor web
void WebServerTask(void *pArg) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

	//Inicia el proceso de peticiones iteradas y se detiene si hay un error en la comunicacion, conexion o recepcion
	if (RequestJSONProcess() != 0)
 8000998:	f001 f8d2 	bl	8001b40 <RequestJSONProcess>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d002      	beq.n	80009a8 <WebServerTask+0x18>
		S_PrintOnSerial("Se ha detenido el proceso de peticiones");
 80009a2:	4804      	ldr	r0, [pc, #16]	; (80009b4 <WebServerTask+0x24>)
 80009a4:	f7ff fdee 	bl	8000584 <S_PrintOnSerial>

	while (1)
		vTaskDelay(1000);
 80009a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ac:	f00a fc22 	bl	800b1f4 <vTaskDelay>
 80009b0:	e7fa      	b.n	80009a8 <WebServerTask+0x18>
 80009b2:	bf00      	nop
 80009b4:	0800e678 	.word	0x0800e678

080009b8 <CreateSerialObjects>:
}

// Crea los objetos de comunicación serie
void CreateSerialObjects() {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	// Create a queue with 16 elements, each element has a size of 1 byte
	instructionQueueHandle = xQueueCreate(16, 1);
 80009bc:	2200      	movs	r2, #0
 80009be:	2101      	movs	r1, #1
 80009c0:	2010      	movs	r0, #16
 80009c2:	f009 fb0b 	bl	8009fdc <xQueueGenericCreate>
 80009c6:	4603      	mov	r3, r0
 80009c8:	4a01      	ldr	r2, [pc, #4]	; (80009d0 <CreateSerialObjects+0x18>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200007dc 	.word	0x200007dc

080009d4 <CreateSerialTask>:

// Crea las tareas de comunicación serie
void CreateSerialTask() {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af02      	add	r7, sp, #8
	xTaskCreate(WebServerTask, "TareaWebServer", 256, NULL, 1, NULL);
 80009da:	2300      	movs	r3, #0
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	2301      	movs	r3, #1
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2300      	movs	r3, #0
 80009e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009e8:	490e      	ldr	r1, [pc, #56]	; (8000a24 <CreateSerialTask+0x50>)
 80009ea:	480f      	ldr	r0, [pc, #60]	; (8000a28 <CreateSerialTask+0x54>)
 80009ec:	f00a fabd 	bl	800af6a <xTaskCreate>
	xTaskCreate(serialTxTask, "serialTxTask", 256, NULL, 1, NULL);
 80009f0:	2300      	movs	r3, #0
 80009f2:	9301      	str	r3, [sp, #4]
 80009f4:	2301      	movs	r3, #1
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	2300      	movs	r3, #0
 80009fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009fe:	490b      	ldr	r1, [pc, #44]	; (8000a2c <CreateSerialTask+0x58>)
 8000a00:	480b      	ldr	r0, [pc, #44]	; (8000a30 <CreateSerialTask+0x5c>)
 8000a02:	f00a fab2 	bl	800af6a <xTaskCreate>
	xTaskCreate(serialRxTask, "serialRxTask", 256, NULL, 2, NULL);
 8000a06:	2300      	movs	r3, #0
 8000a08:	9301      	str	r3, [sp, #4]
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a14:	4907      	ldr	r1, [pc, #28]	; (8000a34 <CreateSerialTask+0x60>)
 8000a16:	4808      	ldr	r0, [pc, #32]	; (8000a38 <CreateSerialTask+0x64>)
 8000a18:	f00a faa7 	bl	800af6a <xTaskCreate>
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	0800e6a0 	.word	0x0800e6a0
 8000a28:	08000991 	.word	0x08000991
 8000a2c:	0800e6b0 	.word	0x0800e6b0
 8000a30:	0800089d 	.word	0x0800089d
 8000a34:	0800e6c0 	.word	0x0800e6c0
 8000a38:	08000825 	.word	0x08000825

08000a3c <I_CreateInstructionStruct>:
// - pMovOut: puntero a la estructura de instrucción de movimiento de salida
// Devuelve:
// - 1 si los parámetros son válidos y se creó la estructura de instrucción correctamente
// - 0 si los parámetros son inválidos y se asigna la instrucción NOPE por defecto a la estructura de salida
uint8_t I_CreateInstructionStruct(uint8_t instCode, uint8_t time,
		MovementInstruction_t *pMovOut) {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	603a      	str	r2, [r7, #0]
 8000a46:	71fb      	strb	r3, [r7, #7]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	71bb      	strb	r3, [r7, #6]
	// Comprueba que todos los parametros sean correctos
	if (instCode < I_NUM_INSTRUCTIONS) {
 8000a4c:	2205      	movs	r2, #5
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d20e      	bcs.n	8000a72 <I_CreateInstructionStruct+0x36>
		if (time < I_MAX_TIME_EXECUTION) {
 8000a54:	2264      	movs	r2, #100	; 0x64
 8000a56:	79bb      	ldrb	r3, [r7, #6]
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d208      	bcs.n	8000a6e <I_CreateInstructionStruct+0x32>
			if (pMovOut != NULL) {
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d005      	beq.n	8000a6e <I_CreateInstructionStruct+0x32>
				pMovOut->instruction = instCode;
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	79fa      	ldrb	r2, [r7, #7]
 8000a66:	701a      	strb	r2, [r3, #0]
				pMovOut->duration = time;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	79ba      	ldrb	r2, [r7, #6]
 8000a6c:	705a      	strb	r2, [r3, #1]
			}
		}
		return 1;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e006      	b.n	8000a80 <I_CreateInstructionStruct+0x44>
	}
	// Si no devuelve una instruccion NOPE
	else {
		pMovOut->instruction = I_NOPE;
 8000a72:	2200      	movs	r2, #0
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	701a      	strb	r2, [r3, #0]
		pMovOut->duration = I_MAX_TIME_EXECUTION;
 8000a78:	2264      	movs	r2, #100	; 0x64
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	705a      	strb	r2, [r3, #1]
		return 0;
 8000a7e:	2300      	movs	r3, #0
	}
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a90:	f001 fabd 	bl	800200e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a94:	f000 f840 	bl	8000b18 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a98:	f000 fa0a 	bl	8000eb0 <MX_GPIO_Init>
	MX_DFSDM1_Init();
 8000a9c:	f000 f89e 	bl	8000bdc <MX_DFSDM1_Init>
	MX_I2C2_Init();
 8000aa0:	f000 f8d4 	bl	8000c4c <MX_I2C2_Init>
	MX_QUADSPI_Init();
 8000aa4:	f000 f912 	bl	8000ccc <MX_QUADSPI_Init>
	MX_SPI3_Init();
 8000aa8:	f000 f936 	bl	8000d18 <MX_SPI3_Init>
	MX_USART1_UART_Init();
 8000aac:	f000 f9a2 	bl	8000df4 <MX_USART1_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000ab0:	f000 f9d0 	bl	8000e54 <MX_USB_OTG_FS_PCD_Init>
	MX_UART4_Init();
 8000ab4:	f000 f96e 	bl	8000d94 <MX_UART4_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000ab8:	f008 fdf0 	bl	800969c <osKernelInitialize>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of xSemaphoreSerial */
	xSemaphoreSerialHandle = osSemaphoreNew(1, 1, &xSemaphoreSerial_attributes);
 8000abc:	4a0f      	ldr	r2, [pc, #60]	; (8000afc <main+0x70>)
 8000abe:	2101      	movs	r1, #1
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f008 fec7 	bl	8009854 <osSemaphoreNew>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <main+0x74>)
 8000aca:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_SEMAPHORES */
	/* add semaphores, ... */
	CreateSerialObjects();
 8000acc:	f7ff ff74 	bl	80009b8 <CreateSerialObjects>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of instructionQueue */
	instructionQueueHandle = osMessageQueueNew(100,
 8000ad0:	4a0c      	ldr	r2, [pc, #48]	; (8000b04 <main+0x78>)
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	2064      	movs	r0, #100	; 0x64
 8000ad6:	f008 ff46 	bl	8009966 <osMessageQueueNew>
 8000ada:	4603      	mov	r3, r0
 8000adc:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <main+0x7c>)
 8000ade:	6013      	str	r3, [r2, #0]

	/* Create the thread(s) */
	/* creation of RxTask */
	//RxTaskHandle = osThreadNew(serialRxTask, NULL, &RxTask_attributes);
	/* creation of TxTask */
	TxTaskHandle = osThreadNew(serialTxTask, NULL, &TxTask_attributes);
 8000ae0:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <main+0x80>)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	480a      	ldr	r0, [pc, #40]	; (8000b10 <main+0x84>)
 8000ae6:	f008 fe23 	bl	8009730 <osThreadNew>
 8000aea:	4603      	mov	r3, r0
 8000aec:	4a09      	ldr	r2, [pc, #36]	; (8000b14 <main+0x88>)
 8000aee:	6013      	str	r3, [r2, #0]
	/* creation of WebServerTask */
	//WebServerTaskHandle = osThreadNew(WebServerTask, NULL,&WebServerTask_attributes);
	/* USER CODE BEGIN RTOS_THREADS */
	CreateSerialTask();
 8000af0:	f7ff ff70 	bl	80009d4 <CreateSerialTask>
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000af4:	f008 fdf6 	bl	80096e4 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000af8:	e7fe      	b.n	8000af8 <main+0x6c>
 8000afa:	bf00      	nop
 8000afc:	0800ed90 	.word	0x0800ed90
 8000b00:	200007e0 	.word	0x200007e0
 8000b04:	0800ed78 	.word	0x0800ed78
 8000b08:	200007dc 	.word	0x200007dc
 8000b0c:	0800ed54 	.word	0x0800ed54
 8000b10:	0800089d 	.word	0x0800089d
 8000b14:	200007d8 	.word	0x200007d8

08000b18 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b096      	sub	sp, #88	; 0x58
 8000b1c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	2244      	movs	r2, #68	; 0x44
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f00c f9a4 	bl	800ce74 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b3a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b3e:	f002 faaf 	bl	80030a0 <HAL_PWREx_ControlVoltageScaling>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000b48:	f000 fb66 	bl	8001218 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000b4c:	f002 fa8a 	bl	8003064 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b50:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <SystemClock_Config+0xc0>)
 8000b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b56:	4a20      	ldr	r2, [pc, #128]	; (8000bd8 <SystemClock_Config+0xc0>)
 8000b58:	f023 0318 	bic.w	r3, r3, #24
 8000b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8000b60:	2314      	movs	r3, #20
 8000b62:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b70:	2360      	movs	r3, #96	; 0x60
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b74:	2302      	movs	r3, #2
 8000b76:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 8000b80:	2328      	movs	r3, #40	; 0x28
 8000b82:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b84:	2307      	movs	r3, #7
 8000b86:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4618      	mov	r0, r3
 8000b96:	f002 fba5 	bl	80032e4 <HAL_RCC_OscConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <SystemClock_Config+0x8c>
		Error_Handler();
 8000ba0:	f000 fb3a 	bl	8001218 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000bb8:	463b      	mov	r3, r7
 8000bba:	2104      	movs	r1, #4
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f002 ff6d 	bl	8003a9c <HAL_RCC_ClockConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0xb4>
		Error_Handler();
 8000bc8:	f000 fb26 	bl	8001218 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8000bcc:	f003 fca6 	bl	800451c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000bd0:	bf00      	nop
 8000bd2:	3758      	adds	r7, #88	; 0x58
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40021000 	.word	0x40021000

08000bdc <MX_DFSDM1_Init>:
/**
 * @brief DFSDM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DFSDM1_Init(void) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	/* USER CODE END DFSDM1_Init 0 */

	/* USER CODE BEGIN DFSDM1_Init 1 */

	/* USER CODE END DFSDM1_Init 1 */
	hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <MX_DFSDM1_Init+0x68>)
 8000be2:	4a19      	ldr	r2, [pc, #100]	; (8000c48 <MX_DFSDM1_Init+0x6c>)
 8000be4:	601a      	str	r2, [r3, #0]
	hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <MX_DFSDM1_Init+0x68>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	711a      	strb	r2, [r3, #4]
	hdfsdm1_channel1.Init.OutputClock.Selection =
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <MX_DFSDM1_Init+0x68>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
	DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
	hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_DFSDM1_Init+0x68>)
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	60da      	str	r2, [r3, #12]
	hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <MX_DFSDM1_Init+0x68>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
	hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_DFSDM1_Init+0x68>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	615a      	str	r2, [r3, #20]
	hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_DFSDM1_Init+0x68>)
 8000c06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c0a:	619a      	str	r2, [r3, #24]
	hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <MX_DFSDM1_Init+0x68>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
	hdfsdm1_channel1.Init.SerialInterface.SpiClock =
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_DFSDM1_Init+0x68>)
 8000c14:	2204      	movs	r2, #4
 8000c16:	621a      	str	r2, [r3, #32]
	DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
	hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000c18:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <MX_DFSDM1_Init+0x68>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	625a      	str	r2, [r3, #36]	; 0x24
	hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_DFSDM1_Init+0x68>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	629a      	str	r2, [r3, #40]	; 0x28
	hdfsdm1_channel1.Init.Offset = 0;
 8000c24:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <MX_DFSDM1_Init+0x68>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	62da      	str	r2, [r3, #44]	; 0x2c
	hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_DFSDM1_Init+0x68>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK) {
 8000c30:	4804      	ldr	r0, [pc, #16]	; (8000c44 <MX_DFSDM1_Init+0x68>)
 8000c32:	f001 fb2b 	bl	800228c <HAL_DFSDM_ChannelInit>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_DFSDM1_Init+0x64>
		Error_Handler();
 8000c3c:	f000 faec 	bl	8001218 <Error_Handler>
	}
	/* USER CODE BEGIN DFSDM1_Init 2 */

	/* USER CODE END DFSDM1_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000090 	.word	0x20000090
 8000c48:	40016020 	.word	0x40016020

08000c4c <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <MX_I2C2_Init+0x74>)
 8000c52:	4a1c      	ldr	r2, [pc, #112]	; (8000cc4 <MX_I2C2_Init+0x78>)
 8000c54:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x10909CEC;
 8000c56:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <MX_I2C2_Init+0x74>)
 8000c58:	4a1b      	ldr	r2, [pc, #108]	; (8000cc8 <MX_I2C2_Init+0x7c>)
 8000c5a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8000c5c:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <MX_I2C2_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c62:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <MX_I2C2_Init+0x74>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <MX_I2C2_Init+0x74>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8000c6e:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <MX_I2C2_Init+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <MX_I2C2_Init+0x74>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_I2C2_Init+0x74>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_I2C2_Init+0x74>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8000c86:	480e      	ldr	r0, [pc, #56]	; (8000cc0 <MX_I2C2_Init+0x74>)
 8000c88:	f001 ff7e 	bl	8002b88 <HAL_I2C_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_I2C2_Init+0x4a>
		Error_Handler();
 8000c92:	f000 fac1 	bl	8001218 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8000c96:	2100      	movs	r1, #0
 8000c98:	4809      	ldr	r0, [pc, #36]	; (8000cc0 <MX_I2C2_Init+0x74>)
 8000c9a:	f002 f804 	bl	8002ca6 <HAL_I2CEx_ConfigAnalogFilter>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000ca4:	f000 fab8 	bl	8001218 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_I2C2_Init+0x74>)
 8000cac:	f002 f846 	bl	8002d3c <HAL_I2CEx_ConfigDigitalFilter>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_I2C2_Init+0x6e>
		Error_Handler();
 8000cb6:	f000 faaf 	bl	8001218 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200000c8 	.word	0x200000c8
 8000cc4:	40005800 	.word	0x40005800
 8000cc8:	10909cec 	.word	0x10909cec

08000ccc <MX_QUADSPI_Init>:
/**
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN QUADSPI_Init 1 */

	/* USER CODE END QUADSPI_Init 1 */
	/* QUADSPI parameter configuration*/
	hqspi.Instance = QUADSPI;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_QUADSPI_Init+0x44>)
 8000cd2:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <MX_QUADSPI_Init+0x48>)
 8000cd4:	601a      	str	r2, [r3, #0]
	hqspi.Init.ClockPrescaler = 2;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <MX_QUADSPI_Init+0x44>)
 8000cd8:	2202      	movs	r2, #2
 8000cda:	605a      	str	r2, [r3, #4]
	hqspi.Init.FifoThreshold = 4;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <MX_QUADSPI_Init+0x44>)
 8000cde:	2204      	movs	r2, #4
 8000ce0:	609a      	str	r2, [r3, #8]
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <MX_QUADSPI_Init+0x44>)
 8000ce4:	2210      	movs	r2, #16
 8000ce6:	60da      	str	r2, [r3, #12]
	hqspi.Init.FlashSize = 23;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <MX_QUADSPI_Init+0x44>)
 8000cea:	2217      	movs	r2, #23
 8000cec:	611a      	str	r2, [r3, #16]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <MX_QUADSPI_Init+0x44>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	615a      	str	r2, [r3, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <MX_QUADSPI_Init+0x44>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK) {
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_QUADSPI_Init+0x44>)
 8000cfc:	f002 fa36 	bl	800316c <HAL_QSPI_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_QUADSPI_Init+0x3e>
		Error_Handler();
 8000d06:	f000 fa87 	bl	8001218 <Error_Handler>
	}
	/* USER CODE BEGIN QUADSPI_Init 2 */

	/* USER CODE END QUADSPI_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000011c 	.word	0x2000011c
 8000d14:	a0001000 	.word	0xa0001000

08000d18 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <MX_SPI3_Init+0x74>)
 8000d1e:	4a1c      	ldr	r2, [pc, #112]	; (8000d90 <MX_SPI3_Init+0x78>)
 8000d20:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d22:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <MX_SPI3_Init+0x74>)
 8000d24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d28:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <MX_SPI3_Init+0x74>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d30:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <MX_SPI3_Init+0x74>)
 8000d32:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d36:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_SPI3_Init+0x74>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <MX_SPI3_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_SPI3_Init+0x74>)
 8000d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d4a:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <MX_SPI3_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_SPI3_Init+0x74>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <MX_SPI3_Init+0x74>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <MX_SPI3_Init+0x74>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 7;
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <MX_SPI3_Init+0x74>)
 8000d66:	2207      	movs	r2, #7
 8000d68:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <MX_SPI3_Init+0x74>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	631a      	str	r2, [r3, #48]	; 0x30
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <MX_SPI3_Init+0x74>)
 8000d72:	2208      	movs	r2, #8
 8000d74:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <MX_SPI3_Init+0x74>)
 8000d78:	f003 fdb2 	bl	80048e0 <HAL_SPI_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_SPI3_Init+0x6e>
		Error_Handler();
 8000d82:	f000 fa49 	bl	8001218 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000160 	.word	0x20000160
 8000d90:	40003c00 	.word	0x40003c00

08000d94 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_UART4_Init+0x58>)
 8000d9a:	4a15      	ldr	r2, [pc, #84]	; (8000df0 <MX_UART4_Init+0x5c>)
 8000d9c:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 9600;
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <MX_UART4_Init+0x58>)
 8000da0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000da4:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_UART4_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_UART4_Init+0x58>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_UART4_Init+0x58>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_UART4_Init+0x58>)
 8000dba:	220c      	movs	r2, #12
 8000dbc:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <MX_UART4_Init+0x58>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_UART4_Init+0x58>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <MX_UART4_Init+0x58>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_UART4_Init+0x58>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_UART4_Init+0x58>)
 8000dd8:	f005 fb84 	bl	80064e4 <HAL_UART_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_UART4_Init+0x52>
		Error_Handler();
 8000de2:	f000 fa19 	bl	8001218 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200001c4 	.word	0x200001c4
 8000df0:	40004c00 	.word	0x40004c00

08000df4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <MX_USART1_UART_Init+0x58>)
 8000dfa:	4a15      	ldr	r2, [pc, #84]	; (8000e50 <MX_USART1_UART_Init+0x5c>)
 8000dfc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <MX_USART1_UART_Init+0x58>)
 8000e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e04:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <MX_USART1_UART_Init+0x58>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <MX_USART1_UART_Init+0x58>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <MX_USART1_UART_Init+0x58>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <MX_USART1_UART_Init+0x58>)
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <MX_USART1_UART_Init+0x58>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MX_USART1_UART_Init+0x58>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <MX_USART1_UART_Init+0x58>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <MX_USART1_UART_Init+0x58>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_USART1_UART_Init+0x58>)
 8000e38:	f005 fb54 	bl	80064e4 <HAL_UART_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000e42:	f000 f9e9 	bl	8001218 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000248 	.word	0x20000248
 8000e50:	40013800 	.word	0x40013800

08000e54 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e5e:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e62:	2206      	movs	r2, #6
 8000e64:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e68:	2202      	movs	r2, #2
 8000e6a:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e6e:	2202      	movs	r2, #2
 8000e70:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	629a      	str	r2, [r3, #40]	; 0x28
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	631a      	str	r2, [r3, #48]	; 0x30
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e98:	f001 ff9c 	bl	8002dd4 <HAL_PCD_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 8000ea2:	f000 f9b9 	bl	8001218 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200002cc 	.word	0x200002cc

08000eb0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000ec6:	4bbc      	ldr	r3, [pc, #752]	; (80011b8 <MX_GPIO_Init+0x308>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	4abb      	ldr	r2, [pc, #748]	; (80011b8 <MX_GPIO_Init+0x308>)
 8000ecc:	f043 0310 	orr.w	r3, r3, #16
 8000ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed2:	4bb9      	ldr	r3, [pc, #740]	; (80011b8 <MX_GPIO_Init+0x308>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	f003 0310 	and.w	r3, r3, #16
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ede:	4bb6      	ldr	r3, [pc, #728]	; (80011b8 <MX_GPIO_Init+0x308>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	4ab5      	ldr	r2, [pc, #724]	; (80011b8 <MX_GPIO_Init+0x308>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eea:	4bb3      	ldr	r3, [pc, #716]	; (80011b8 <MX_GPIO_Init+0x308>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	4bb0      	ldr	r3, [pc, #704]	; (80011b8 <MX_GPIO_Init+0x308>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	4aaf      	ldr	r2, [pc, #700]	; (80011b8 <MX_GPIO_Init+0x308>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f02:	4bad      	ldr	r3, [pc, #692]	; (80011b8 <MX_GPIO_Init+0x308>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	4baa      	ldr	r3, [pc, #680]	; (80011b8 <MX_GPIO_Init+0x308>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	4aa9      	ldr	r2, [pc, #676]	; (80011b8 <MX_GPIO_Init+0x308>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1a:	4ba7      	ldr	r3, [pc, #668]	; (80011b8 <MX_GPIO_Init+0x308>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f26:	4ba4      	ldr	r3, [pc, #656]	; (80011b8 <MX_GPIO_Init+0x308>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	4aa3      	ldr	r2, [pc, #652]	; (80011b8 <MX_GPIO_Init+0x308>)
 8000f2c:	f043 0308 	orr.w	r3, r3, #8
 8000f30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f32:	4ba1      	ldr	r3, [pc, #644]	; (80011b8 <MX_GPIO_Init+0x308>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	f003 0308 	and.w	r3, r3, #8
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000f44:	489d      	ldr	r0, [pc, #628]	; (80011bc <MX_GPIO_Init+0x30c>)
 8000f46:	f001 fdef 	bl	8002b28 <HAL_GPIO_WritePin>
	M24SR64_Y_RF_DISABLE_Pin | M24SR64_Y_GPO_Pin | ISM43362_RST_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin | SPBTLE_RF_RST_Pin | ARD_D9_Pin,
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f248 1104 	movw	r1, #33028	; 0x8104
 8000f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f54:	f001 fde8 	bl	8002b28 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000f5e:	4898      	ldr	r0, [pc, #608]	; (80011c0 <MX_GPIO_Init+0x310>)
 8000f60:	f001 fde2 	bl	8002b28 <HAL_GPIO_WritePin>
			ARD_D8_Pin | ISM43362_BOOT0_Pin | ISM43362_WAKEUP_Pin | LED2_Pin
					| SPSGRF_915_SDN_Pin | ARD_D5_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000f64:	2200      	movs	r2, #0
 8000f66:	f241 0181 	movw	r1, #4225	; 0x1081
 8000f6a:	4896      	ldr	r0, [pc, #600]	; (80011c4 <MX_GPIO_Init+0x314>)
 8000f6c:	f001 fddc 	bl	8002b28 <HAL_GPIO_WritePin>
	USB_OTG_FS_PWR_EN_Pin | PMOD_RESET_Pin | STSAFE_A100_RESET_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin,
 8000f70:	2201      	movs	r2, #1
 8000f72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f76:	4893      	ldr	r0, [pc, #588]	; (80011c4 <MX_GPIO_Init+0x314>)
 8000f78:	f001 fdd6 	bl	8002b28 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin | LED3_WIFI__LED4_BLE_Pin,
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000f82:	4891      	ldr	r0, [pc, #580]	; (80011c8 <MX_GPIO_Init+0x318>)
 8000f84:	f001 fdd0 	bl	8002b28 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin,
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2120      	movs	r1, #32
 8000f8c:	488c      	ldr	r0, [pc, #560]	; (80011c0 <MX_GPIO_Init+0x310>)
 8000f8e:	f001 fdcb 	bl	8002b28 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin,
 8000f92:	2201      	movs	r2, #1
 8000f94:	2101      	movs	r1, #1
 8000f96:	4889      	ldr	r0, [pc, #548]	; (80011bc <MX_GPIO_Init+0x30c>)
 8000f98:	f001 fdc6 	bl	8002b28 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
	GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin | M24SR64_Y_GPO_Pin
 8000f9c:	f240 1315 	movw	r3, #277	; 0x115
 8000fa0:	617b      	str	r3, [r7, #20]
			| ISM43362_RST_Pin | ISM43362_SPI3_CSN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4881      	ldr	r0, [pc, #516]	; (80011bc <MX_GPIO_Init+0x30c>)
 8000fb6:	f001 fb01 	bl	80025bc <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin
 8000fba:	236a      	movs	r3, #106	; 0x6a
 8000fbc:	617b      	str	r3, [r7, #20]
			| SPSGRF_915_GPIO3_EXTI5_Pin | SPBTLE_RF_IRQ_EXTI6_Pin
			| ISM43362_DRDY_EXTI1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fbe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fc2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	487b      	ldr	r0, [pc, #492]	; (80011bc <MX_GPIO_Init+0x30c>)
 8000fd0:	f001 faf4 	bl	80025bc <HAL_GPIO_Init>

	/*Configure GPIO pin : BUTTON_EXTI13_Pin */
	GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000fd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fda:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fde:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4877      	ldr	r0, [pc, #476]	; (80011c8 <MX_GPIO_Init+0x318>)
 8000fec:	f001 fae6 	bl	80025bc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
	 ARD_A1_Pin ARD_A0_Pin */
	GPIO_InitStruct.Pin = ARD_A5_Pin | ARD_A4_Pin | ARD_A3_Pin | ARD_A2_Pin
 8000ff0:	233f      	movs	r3, #63	; 0x3f
 8000ff2:	617b      	str	r3, [r7, #20]
			| ARD_A1_Pin | ARD_A0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ff4:	230b      	movs	r3, #11
 8000ff6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	4871      	ldr	r0, [pc, #452]	; (80011c8 <MX_GPIO_Init+0x318>)
 8001004:	f001 fada 	bl	80025bc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
	GPIO_InitStruct.Pin = ARD_D10_Pin | SPBTLE_RF_RST_Pin | ARD_D9_Pin;
 8001008:	f248 1304 	movw	r3, #33028	; 0x8104
 800100c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100e:	2301      	movs	r3, #1
 8001010:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4619      	mov	r1, r3
 8001020:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001024:	f001 faca 	bl	80025bc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D4_Pin */
	GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001028:	2308      	movs	r3, #8
 800102a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001038:	2301      	movs	r3, #1
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001046:	f001 fab9 	bl	80025bc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
	GPIO_InitStruct.Pin = ARD_D13_Pin | ARD_D12_Pin | ARD_D11_Pin;
 800104a:	23e0      	movs	r3, #224	; 0xe0
 800104c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	2303      	movs	r3, #3
 8001058:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800105a:	2305      	movs	r3, #5
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001068:	f001 faa8 	bl	80025bc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D3_Pin */
	GPIO_InitStruct.Pin = ARD_D3_Pin;
 800106c:	2301      	movs	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001070:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001074:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4619      	mov	r1, r3
 8001080:	484f      	ldr	r0, [pc, #316]	; (80011c0 <MX_GPIO_Init+0x310>)
 8001082:	f001 fa9b 	bl	80025bc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D6_Pin */
	GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001086:	2302      	movs	r3, #2
 8001088:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800108a:	230b      	movs	r3, #11
 800108c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	4849      	ldr	r0, [pc, #292]	; (80011c0 <MX_GPIO_Init+0x310>)
 800109a:	f001 fa8f 	bl	80025bc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
	 SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
	GPIO_InitStruct.Pin = ARD_D8_Pin | ISM43362_BOOT0_Pin | ISM43362_WAKEUP_Pin
 800109e:	f24f 0334 	movw	r3, #61492	; 0xf034
 80010a2:	617b      	str	r3, [r7, #20]
			| LED2_Pin | SPSGRF_915_SDN_Pin | ARD_D5_Pin
			| SPSGRF_915_SPI3_CSN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	4842      	ldr	r0, [pc, #264]	; (80011c0 <MX_GPIO_Init+0x310>)
 80010b8:	f001 fa80 	bl	80025bc <HAL_GPIO_Init>

	/*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
	GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin | INTERNAL_UART3_RX_Pin;
 80010bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010c0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010ce:	2307      	movs	r3, #7
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	483a      	ldr	r0, [pc, #232]	; (80011c4 <MX_GPIO_Init+0x314>)
 80010da:	f001 fa6f 	bl	80025bc <HAL_GPIO_Init>

	/*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
	 PMOD_IRQ_EXTI12_Pin */
	GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin | LSM6DSL_INT1_EXTI11_Pin
 80010de:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80010e2:	617b      	str	r3, [r7, #20]
			| ARD_D2_Pin | HTS221_DRDY_EXTI15_Pin | PMOD_IRQ_EXTI12_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010e8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	4833      	ldr	r0, [pc, #204]	; (80011c4 <MX_GPIO_Init+0x314>)
 80010f6:	f001 fa61 	bl	80025bc <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin | SPBTLE_RF_SPI3_CSN_Pin
 80010fa:	f243 0381 	movw	r3, #12417	; 0x3081
 80010fe:	617b      	str	r3, [r7, #20]
			| PMOD_RESET_Pin | STSAFE_A100_RESET_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001100:	2301      	movs	r3, #1
 8001102:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4619      	mov	r1, r3
 8001112:	482c      	ldr	r0, [pc, #176]	; (80011c4 <MX_GPIO_Init+0x314>)
 8001114:	f001 fa52 	bl	80025bc <HAL_GPIO_Init>

	/*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
	GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin | LED3_WIFI__LED4_BLE_Pin;
 8001118:	f44f 7310 	mov.w	r3, #576	; 0x240
 800111c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	4825      	ldr	r0, [pc, #148]	; (80011c8 <MX_GPIO_Init+0x318>)
 8001132:	f001 fa43 	bl	80025bc <HAL_GPIO_Init>

	/*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
	GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin | LSM3MDL_DRDY_EXTI8_Pin;
 8001136:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800113a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800113c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001140:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	481e      	ldr	r0, [pc, #120]	; (80011c8 <MX_GPIO_Init+0x318>)
 800114e:	f001 fa35 	bl	80025bc <HAL_GPIO_Init>

	/*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
	GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001152:	2302      	movs	r3, #2
 8001154:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001162:	2305      	movs	r3, #5
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	4815      	ldr	r0, [pc, #84]	; (80011c4 <MX_GPIO_Init+0x314>)
 800116e:	f001 fa25 	bl	80025bc <HAL_GPIO_Init>

	/*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PD5 PMOD_UART2_RX_Pin */
	GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin | PMOD_UART2_RTS_Pin | GPIO_PIN_5
 8001172:	2378      	movs	r3, #120	; 0x78
 8001174:	617b      	str	r3, [r7, #20]
			| PMOD_UART2_RX_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001182:	2307      	movs	r3, #7
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	480d      	ldr	r0, [pc, #52]	; (80011c4 <MX_GPIO_Init+0x314>)
 800118e:	f001 fa15 	bl	80025bc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
	GPIO_InitStruct.Pin = ARD_D15_Pin | ARD_D14_Pin;
 8001192:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001196:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001198:	2312      	movs	r3, #18
 800119a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011a4:	2304      	movs	r3, #4
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	4804      	ldr	r0, [pc, #16]	; (80011c0 <MX_GPIO_Init+0x310>)
 80011b0:	f001 fa04 	bl	80025bc <HAL_GPIO_Init>
 80011b4:	e00a      	b.n	80011cc <MX_GPIO_Init+0x31c>
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000
 80011bc:	48001000 	.word	0x48001000
 80011c0:	48000400 	.word	0x48000400
 80011c4:	48000c00 	.word	0x48000c00
 80011c8:	48000800 	.word	0x48000800

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2105      	movs	r1, #5
 80011d0:	2017      	movs	r0, #23
 80011d2:	f001 f831 	bl	8002238 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011d6:	2017      	movs	r0, #23
 80011d8:	f001 f84a 	bl	8002270 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2105      	movs	r1, #5
 80011e0:	2028      	movs	r0, #40	; 0x28
 80011e2:	f001 f829 	bl	8002238 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011e6:	2028      	movs	r0, #40	; 0x28
 80011e8:	f001 f842 	bl	8002270 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80011ec:	bf00      	nop
 80011ee:	3728      	adds	r7, #40	; 0x28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a04      	ldr	r2, [pc, #16]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d101      	bne.n	800120a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001206:	f000 ff1b 	bl	8002040 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40000800 	.word	0x40000800

08001218 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800121c:	b672      	cpsid	i
}
 800121e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001220:	e7fe      	b.n	8001220 <Error_Handler+0x8>
	...

08001224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <HAL_MspInit+0x4c>)
 800122c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800122e:	4a10      	ldr	r2, [pc, #64]	; (8001270 <HAL_MspInit+0x4c>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6613      	str	r3, [r2, #96]	; 0x60
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <HAL_MspInit+0x4c>)
 8001238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <HAL_MspInit+0x4c>)
 8001244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <HAL_MspInit+0x4c>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124c:	6593      	str	r3, [r2, #88]	; 0x58
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <HAL_MspInit+0x4c>)
 8001250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	210f      	movs	r1, #15
 800125e:	f06f 0001 	mvn.w	r0, #1
 8001262:	f000 ffe9 	bl	8002238 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000

08001274 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b0ac      	sub	sp, #176	; 0xb0
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2288      	movs	r2, #136	; 0x88
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f00b fded 	bl	800ce74 <memset>
  if(DFSDM1_Init == 0)
 800129a:	4b25      	ldr	r3, [pc, #148]	; (8001330 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d142      	bne.n	8001328 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80012a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012a6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4618      	mov	r0, r3
 80012b4:	f002 fe48 	bl	8003f48 <HAL_RCCEx_PeriphCLKConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80012be:	f7ff ffab 	bl	8001218 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80012c2:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c6:	4a1b      	ldr	r2, [pc, #108]	; (8001334 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012cc:	6613      	str	r3, [r2, #96]	; 0x60
 80012ce:	4b19      	ldr	r3, [pc, #100]	; (8001334 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012da:	4b16      	ldr	r3, [pc, #88]	; (8001334 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012de:	4a15      	ldr	r2, [pc, #84]	; (8001334 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012e0:	f043 0310 	orr.w	r3, r3, #16
 80012e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e6:	4b13      	ldr	r3, [pc, #76]	; (8001334 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	f003 0310 	and.w	r3, r3, #16
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80012f2:	f44f 7320 	mov.w	r3, #640	; 0x280
 80012f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800130c:	2306      	movs	r3, #6
 800130e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001312:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001316:	4619      	mov	r1, r3
 8001318:	4807      	ldr	r0, [pc, #28]	; (8001338 <HAL_DFSDM_ChannelMspInit+0xc4>)
 800131a:	f001 f94f 	bl	80025bc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	4a02      	ldr	r2, [pc, #8]	; (8001330 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001326:	6013      	str	r3, [r2, #0]
  }

}
 8001328:	bf00      	nop
 800132a:	37b0      	adds	r7, #176	; 0xb0
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	200007e4 	.word	0x200007e4
 8001334:	40021000 	.word	0x40021000
 8001338:	48001000 	.word	0x48001000

0800133c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b0ac      	sub	sp, #176	; 0xb0
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2288      	movs	r2, #136	; 0x88
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f00b fd89 	bl	800ce74 <memset>
  if(hi2c->Instance==I2C2)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a21      	ldr	r2, [pc, #132]	; (80013ec <HAL_I2C_MspInit+0xb0>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d13b      	bne.n	80013e4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001370:	2300      	movs	r3, #0
 8001372:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4618      	mov	r0, r3
 800137a:	f002 fde5 	bl	8003f48 <HAL_RCCEx_PeriphCLKConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001384:	f7ff ff48 	bl	8001218 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001388:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <HAL_I2C_MspInit+0xb4>)
 800138a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138c:	4a18      	ldr	r2, [pc, #96]	; (80013f0 <HAL_I2C_MspInit+0xb4>)
 800138e:	f043 0302 	orr.w	r3, r3, #2
 8001392:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <HAL_I2C_MspInit+0xb4>)
 8001396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80013a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a8:	2312      	movs	r3, #18
 80013aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013ba:	2304      	movs	r3, #4
 80013bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013c4:	4619      	mov	r1, r3
 80013c6:	480b      	ldr	r0, [pc, #44]	; (80013f4 <HAL_I2C_MspInit+0xb8>)
 80013c8:	f001 f8f8 	bl	80025bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <HAL_I2C_MspInit+0xb4>)
 80013ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d0:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <HAL_I2C_MspInit+0xb4>)
 80013d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013d6:	6593      	str	r3, [r2, #88]	; 0x58
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <HAL_I2C_MspInit+0xb4>)
 80013da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013e4:	bf00      	nop
 80013e6:	37b0      	adds	r7, #176	; 0xb0
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40005800 	.word	0x40005800
 80013f0:	40021000 	.word	0x40021000
 80013f4:	48000400 	.word	0x48000400

080013f8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a17      	ldr	r2, [pc, #92]	; (8001474 <HAL_QSPI_MspInit+0x7c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d128      	bne.n	800146c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <HAL_QSPI_MspInit+0x80>)
 800141c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800141e:	4a16      	ldr	r2, [pc, #88]	; (8001478 <HAL_QSPI_MspInit+0x80>)
 8001420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001424:	6513      	str	r3, [r2, #80]	; 0x50
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <HAL_QSPI_MspInit+0x80>)
 8001428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800142a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_QSPI_MspInit+0x80>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <HAL_QSPI_MspInit+0x80>)
 8001438:	f043 0310 	orr.w	r3, r3, #16
 800143c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_QSPI_MspInit+0x80>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800144a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800144e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001458:	2303      	movs	r3, #3
 800145a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800145c:	230a      	movs	r3, #10
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <HAL_QSPI_MspInit+0x84>)
 8001468:	f001 f8a8 	bl	80025bc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800146c:	bf00      	nop
 800146e:	3728      	adds	r7, #40	; 0x28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	a0001000 	.word	0xa0001000
 8001478:	40021000 	.word	0x40021000
 800147c:	48001000 	.word	0x48001000

08001480 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a17      	ldr	r2, [pc, #92]	; (80014fc <HAL_SPI_MspInit+0x7c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d128      	bne.n	80014f4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014a2:	4b17      	ldr	r3, [pc, #92]	; (8001500 <HAL_SPI_MspInit+0x80>)
 80014a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a6:	4a16      	ldr	r2, [pc, #88]	; (8001500 <HAL_SPI_MspInit+0x80>)
 80014a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014ac:	6593      	str	r3, [r2, #88]	; 0x58
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <HAL_SPI_MspInit+0x80>)
 80014b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <HAL_SPI_MspInit+0x80>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	4a10      	ldr	r2, [pc, #64]	; (8001500 <HAL_SPI_MspInit+0x80>)
 80014c0:	f043 0304 	orr.w	r3, r3, #4
 80014c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <HAL_SPI_MspInit+0x80>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80014d2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80014d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014e4:	2306      	movs	r3, #6
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <HAL_SPI_MspInit+0x84>)
 80014f0:	f001 f864 	bl	80025bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80014f4:	bf00      	nop
 80014f6:	3728      	adds	r7, #40	; 0x28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40003c00 	.word	0x40003c00
 8001500:	40021000 	.word	0x40021000
 8001504:	48000800 	.word	0x48000800

08001508 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a08      	ldr	r2, [pc, #32]	; (8001538 <HAL_SPI_MspDeInit+0x30>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d10a      	bne.n	8001530 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <HAL_SPI_MspDeInit+0x34>)
 800151c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151e:	4a07      	ldr	r2, [pc, #28]	; (800153c <HAL_SPI_MspDeInit+0x34>)
 8001520:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001524:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8001526:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <HAL_SPI_MspDeInit+0x38>)
 800152c:	f001 f9f0 	bl	8002910 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40003c00 	.word	0x40003c00
 800153c:	40021000 	.word	0x40021000
 8001540:	48000800 	.word	0x48000800

08001544 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b0ae      	sub	sp, #184	; 0xb8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800155c:	f107 031c 	add.w	r3, r7, #28
 8001560:	2288      	movs	r2, #136	; 0x88
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f00b fc85 	bl	800ce74 <memset>
  if(huart->Instance==UART4)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a4a      	ldr	r2, [pc, #296]	; (8001698 <HAL_UART_MspInit+0x154>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d144      	bne.n	80015fe <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001574:	2308      	movs	r3, #8
 8001576:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001578:	2300      	movs	r3, #0
 800157a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4618      	mov	r0, r3
 8001582:	f002 fce1 	bl	8003f48 <HAL_RCCEx_PeriphCLKConfig>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800158c:	f7ff fe44 	bl	8001218 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001590:	4b42      	ldr	r3, [pc, #264]	; (800169c <HAL_UART_MspInit+0x158>)
 8001592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001594:	4a41      	ldr	r2, [pc, #260]	; (800169c <HAL_UART_MspInit+0x158>)
 8001596:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800159a:	6593      	str	r3, [r2, #88]	; 0x58
 800159c:	4b3f      	ldr	r3, [pc, #252]	; (800169c <HAL_UART_MspInit+0x158>)
 800159e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a8:	4b3c      	ldr	r3, [pc, #240]	; (800169c <HAL_UART_MspInit+0x158>)
 80015aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ac:	4a3b      	ldr	r2, [pc, #236]	; (800169c <HAL_UART_MspInit+0x158>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b4:	4b39      	ldr	r3, [pc, #228]	; (800169c <HAL_UART_MspInit+0x158>)
 80015b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80015c0:	2303      	movs	r3, #3
 80015c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d2:	2303      	movs	r3, #3
 80015d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015d8:	2308      	movs	r3, #8
 80015da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015e2:	4619      	mov	r1, r3
 80015e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e8:	f000 ffe8 	bl	80025bc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2105      	movs	r1, #5
 80015f0:	2034      	movs	r0, #52	; 0x34
 80015f2:	f000 fe21 	bl	8002238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80015f6:	2034      	movs	r0, #52	; 0x34
 80015f8:	f000 fe3a 	bl	8002270 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015fc:	e047      	b.n	800168e <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART1)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a27      	ldr	r2, [pc, #156]	; (80016a0 <HAL_UART_MspInit+0x15c>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d142      	bne.n	800168e <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001608:	2301      	movs	r3, #1
 800160a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800160c:	2300      	movs	r3, #0
 800160e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4618      	mov	r0, r3
 8001616:	f002 fc97 	bl	8003f48 <HAL_RCCEx_PeriphCLKConfig>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001620:	f7ff fdfa 	bl	8001218 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001624:	4b1d      	ldr	r3, [pc, #116]	; (800169c <HAL_UART_MspInit+0x158>)
 8001626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001628:	4a1c      	ldr	r2, [pc, #112]	; (800169c <HAL_UART_MspInit+0x158>)
 800162a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162e:	6613      	str	r3, [r2, #96]	; 0x60
 8001630:	4b1a      	ldr	r3, [pc, #104]	; (800169c <HAL_UART_MspInit+0x158>)
 8001632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163c:	4b17      	ldr	r3, [pc, #92]	; (800169c <HAL_UART_MspInit+0x158>)
 800163e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001640:	4a16      	ldr	r2, [pc, #88]	; (800169c <HAL_UART_MspInit+0x158>)
 8001642:	f043 0302 	orr.w	r3, r3, #2
 8001646:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_UART_MspInit+0x158>)
 800164a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001654:	23c0      	movs	r3, #192	; 0xc0
 8001656:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800166c:	2307      	movs	r3, #7
 800166e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001672:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001676:	4619      	mov	r1, r3
 8001678:	480a      	ldr	r0, [pc, #40]	; (80016a4 <HAL_UART_MspInit+0x160>)
 800167a:	f000 ff9f 	bl	80025bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2105      	movs	r1, #5
 8001682:	2025      	movs	r0, #37	; 0x25
 8001684:	f000 fdd8 	bl	8002238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001688:	2025      	movs	r0, #37	; 0x25
 800168a:	f000 fdf1 	bl	8002270 <HAL_NVIC_EnableIRQ>
}
 800168e:	bf00      	nop
 8001690:	37b8      	adds	r7, #184	; 0xb8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40004c00 	.word	0x40004c00
 800169c:	40021000 	.word	0x40021000
 80016a0:	40013800 	.word	0x40013800
 80016a4:	48000400 	.word	0x48000400

080016a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b0ac      	sub	sp, #176	; 0xb0
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2288      	movs	r2, #136	; 0x88
 80016c6:	2100      	movs	r1, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f00b fbd3 	bl	800ce74 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016d6:	d17c      	bne.n	80017d2 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80016d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016dc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80016de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80016e6:	2301      	movs	r3, #1
 80016e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80016ea:	2301      	movs	r3, #1
 80016ec:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80016ee:	2318      	movs	r3, #24
 80016f0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80016f2:	2307      	movs	r3, #7
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80016f6:	2302      	movs	r3, #2
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016fa:	2302      	movs	r3, #2
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80016fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001702:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4618      	mov	r0, r3
 800170a:	f002 fc1d 	bl	8003f48 <HAL_RCCEx_PeriphCLKConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001714:	f7ff fd80 	bl	8001218 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001718:	4b30      	ldr	r3, [pc, #192]	; (80017dc <HAL_PCD_MspInit+0x134>)
 800171a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171c:	4a2f      	ldr	r2, [pc, #188]	; (80017dc <HAL_PCD_MspInit+0x134>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001724:	4b2d      	ldr	r3, [pc, #180]	; (80017dc <HAL_PCD_MspInit+0x134>)
 8001726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001730:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001734:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001738:	2300      	movs	r3, #0
 800173a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001744:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001748:	4619      	mov	r1, r3
 800174a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174e:	f000 ff35 	bl	80025bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001752:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001756:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800176c:	230a      	movs	r3, #10
 800176e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001776:	4619      	mov	r1, r3
 8001778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177c:	f000 ff1e 	bl	80025bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001780:	4b16      	ldr	r3, [pc, #88]	; (80017dc <HAL_PCD_MspInit+0x134>)
 8001782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001784:	4a15      	ldr	r2, [pc, #84]	; (80017dc <HAL_PCD_MspInit+0x134>)
 8001786:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800178a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178c:	4b13      	ldr	r3, [pc, #76]	; (80017dc <HAL_PCD_MspInit+0x134>)
 800178e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001790:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001798:	4b10      	ldr	r3, [pc, #64]	; (80017dc <HAL_PCD_MspInit+0x134>)
 800179a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d114      	bne.n	80017ce <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a4:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <HAL_PCD_MspInit+0x134>)
 80017a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a8:	4a0c      	ldr	r2, [pc, #48]	; (80017dc <HAL_PCD_MspInit+0x134>)
 80017aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ae:	6593      	str	r3, [r2, #88]	; 0x58
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <HAL_PCD_MspInit+0x134>)
 80017b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80017bc:	f001 fcc6 	bl	800314c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_PCD_MspInit+0x134>)
 80017c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c4:	4a05      	ldr	r2, [pc, #20]	; (80017dc <HAL_PCD_MspInit+0x134>)
 80017c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ca:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80017cc:	e001      	b.n	80017d2 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80017ce:	f001 fcbd 	bl	800314c <HAL_PWREx_EnableVddUSB>
}
 80017d2:	bf00      	nop
 80017d4:	37b0      	adds	r7, #176	; 0xb0
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000

080017e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08e      	sub	sp, #56	; 0x38
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80017ee:	4b34      	ldr	r3, [pc, #208]	; (80018c0 <HAL_InitTick+0xe0>)
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	4a33      	ldr	r2, [pc, #204]	; (80018c0 <HAL_InitTick+0xe0>)
 80017f4:	f043 0304 	orr.w	r3, r3, #4
 80017f8:	6593      	str	r3, [r2, #88]	; 0x58
 80017fa:	4b31      	ldr	r3, [pc, #196]	; (80018c0 <HAL_InitTick+0xe0>)
 80017fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001806:	f107 0210 	add.w	r2, r7, #16
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f002 fb07 	bl	8003e24 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800181a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181c:	2b00      	cmp	r3, #0
 800181e:	d103      	bne.n	8001828 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001820:	f002 fad4 	bl	8003dcc <HAL_RCC_GetPCLK1Freq>
 8001824:	6378      	str	r0, [r7, #52]	; 0x34
 8001826:	e004      	b.n	8001832 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001828:	f002 fad0 	bl	8003dcc <HAL_RCC_GetPCLK1Freq>
 800182c:	4603      	mov	r3, r0
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001834:	4a23      	ldr	r2, [pc, #140]	; (80018c4 <HAL_InitTick+0xe4>)
 8001836:	fba2 2303 	umull	r2, r3, r2, r3
 800183a:	0c9b      	lsrs	r3, r3, #18
 800183c:	3b01      	subs	r3, #1
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001840:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <HAL_InitTick+0xe8>)
 8001842:	4a22      	ldr	r2, [pc, #136]	; (80018cc <HAL_InitTick+0xec>)
 8001844:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <HAL_InitTick+0xe8>)
 8001848:	f240 32e7 	movw	r2, #999	; 0x3e7
 800184c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800184e:	4a1e      	ldr	r2, [pc, #120]	; (80018c8 <HAL_InitTick+0xe8>)
 8001850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001852:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001854:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <HAL_InitTick+0xe8>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185a:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_InitTick+0xe8>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001860:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <HAL_InitTick+0xe8>)
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001866:	4818      	ldr	r0, [pc, #96]	; (80018c8 <HAL_InitTick+0xe8>)
 8001868:	f004 fb6b 	bl	8005f42 <HAL_TIM_Base_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001872:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001876:	2b00      	cmp	r3, #0
 8001878:	d11b      	bne.n	80018b2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800187a:	4813      	ldr	r0, [pc, #76]	; (80018c8 <HAL_InitTick+0xe8>)
 800187c:	f004 fbc2 	bl	8006004 <HAL_TIM_Base_Start_IT>
 8001880:	4603      	mov	r3, r0
 8001882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001886:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800188a:	2b00      	cmp	r3, #0
 800188c:	d111      	bne.n	80018b2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800188e:	201e      	movs	r0, #30
 8001890:	f000 fcee 	bl	8002270 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b0f      	cmp	r3, #15
 8001898:	d808      	bhi.n	80018ac <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800189a:	2200      	movs	r2, #0
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	201e      	movs	r0, #30
 80018a0:	f000 fcca 	bl	8002238 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018a4:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <HAL_InitTick+0xf0>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e002      	b.n	80018b2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80018b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3738      	adds	r7, #56	; 0x38
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40021000 	.word	0x40021000
 80018c4:	431bde83 	.word	0x431bde83
 80018c8:	200007e8 	.word	0x200007e8
 80018cc:	40000800 	.word	0x40000800
 80018d0:	20000004 	.word	0x20000004

080018d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <NMI_Handler+0x4>

080018da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <HardFault_Handler+0x4>

080018e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <MemManage_Handler+0x4>

080018e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ea:	e7fe      	b.n	80018ea <BusFault_Handler+0x4>

080018ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <UsageFault_Handler+0x4>

080018f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001904:	2020      	movs	r0, #32
 8001906:	f001 f927 	bl	8002b58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800190a:	2040      	movs	r0, #64	; 0x40
 800190c:	f001 f924 	bl	8002b58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001910:	2080      	movs	r0, #128	; 0x80
 8001912:	f001 f921 	bl	8002b58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001916:	f44f 7080 	mov.w	r0, #256	; 0x100
 800191a:	f001 f91d 	bl	8002b58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001928:	4802      	ldr	r0, [pc, #8]	; (8001934 <TIM4_IRQHandler+0x10>)
 800192a:	f004 fbdb 	bl	80060e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200007e8 	.word	0x200007e8

08001938 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <USART1_IRQHandler+0x10>)
 800193e:	f004 ff87 	bl	8006850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000248 	.word	0x20000248

0800194c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001950:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001954:	f001 f900 	bl	8002b58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001958:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800195c:	f001 f8fc 	bl	8002b58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001960:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001964:	f001 f8f8 	bl	8002b58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001968:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800196c:	f001 f8f4 	bl	8002b58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001970:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001974:	f001 f8f0 	bl	8002b58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}

0800197c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <UART4_IRQHandler+0x10>)
 8001982:	f004 ff65 	bl	8006850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200001c4 	.word	0x200001c4

08001990 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
	return 1;
 8001994:	2301      	movs	r3, #1
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <_kill>:

int _kill(int pid, int sig)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019aa:	f00b fa0b 	bl	800cdc4 <__errno>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2216      	movs	r2, #22
 80019b2:	601a      	str	r2, [r3, #0]
	return -1;
 80019b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <_exit>:

void _exit (int status)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019c8:	f04f 31ff 	mov.w	r1, #4294967295
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ffe7 	bl	80019a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019d2:	e7fe      	b.n	80019d2 <_exit+0x12>

080019d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	e00a      	b.n	80019fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019e6:	f3af 8000 	nop.w
 80019ea:	4601      	mov	r1, r0
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	1c5a      	adds	r2, r3, #1
 80019f0:	60ba      	str	r2, [r7, #8]
 80019f2:	b2ca      	uxtb	r2, r1
 80019f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	3301      	adds	r3, #1
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dbf0      	blt.n	80019e6 <_read+0x12>
	}

return len;
 8001a04:	687b      	ldr	r3, [r7, #4]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b086      	sub	sp, #24
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	e009      	b.n	8001a34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	60ba      	str	r2, [r7, #8]
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fed9 	bl	80007e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3301      	adds	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	dbf1      	blt.n	8001a20 <_write+0x12>
	}
	return len;
 8001a3c:	687b      	ldr	r3, [r7, #4]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <_close>:

int _close(int file)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
	return -1;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a6e:	605a      	str	r2, [r3, #4]
	return 0;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <_isatty>:

int _isatty(int file)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
	return 1;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
	return 0;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab8:	4a14      	ldr	r2, [pc, #80]	; (8001b0c <_sbrk+0x5c>)
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <_sbrk+0x60>)
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac4:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d102      	bne.n	8001ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <_sbrk+0x64>)
 8001ace:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <_sbrk+0x68>)
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad2:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <_sbrk+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d207      	bcs.n	8001af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae0:	f00b f970 	bl	800cdc4 <__errno>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	e009      	b.n	8001b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af0:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	4a05      	ldr	r2, [pc, #20]	; (8001b14 <_sbrk+0x64>)
 8001b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20018000 	.word	0x20018000
 8001b10:	00000400 	.word	0x00000400
 8001b14:	20000834 	.word	0x20000834
 8001b18:	20002af0 	.word	0x20002af0

08001b1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <SystemInit+0x20>)
 8001b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b26:	4a05      	ldr	r2, [pc, #20]	; (8001b3c <SystemInit+0x20>)
 8001b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <RequestJSONProcess>:
//static int wifi_connect(void);
//static bool WebServerProcess(void);
bool RequestJSON(uint8_t *jsonbody, char *request);
int RequestJSONProcess();

int RequestJSONProcess() {
 8001b40:	b5b0      	push	{r4, r5, r7, lr}
 8001b42:	b0da      	sub	sp, #360	; 0x168
 8001b44:	af02      	add	r7, sp, #8
	bool StopServer = false;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
	uint16_t serverPort = 5000;
 8001b4c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b50:	f8a7 3152 	strh.w	r3, [r7, #338]	; 0x152

	WIFI_Ecn_t ecn = WIFI_ECN_WPA2_PSK; // Adjust the network encryption type as per your network configuration
 8001b54:	2303      	movs	r3, #3
 8001b56:	f887 3151 	strb.w	r3, [r7, #337]	; 0x151
	char ssid[] = "ONSICOM_CRESPO"; // Replace with your WiFi SSID
 8001b5a:	4b76      	ldr	r3, [pc, #472]	; (8001d34 <RequestJSONProcess+0x1f4>)
 8001b5c:	f507 7492 	add.w	r4, r7, #292	; 0x124
 8001b60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b62:	c407      	stmia	r4!, {r0, r1, r2}
 8001b64:	8023      	strh	r3, [r4, #0]
 8001b66:	3402      	adds	r4, #2
 8001b68:	0c1b      	lsrs	r3, r3, #16
 8001b6a:	7023      	strb	r3, [r4, #0]
	char password[] = "1971J1998JC2002J2009A"; // Replace with your WiFi password
 8001b6c:	4b72      	ldr	r3, [pc, #456]	; (8001d38 <RequestJSONProcess+0x1f8>)
 8001b6e:	f507 7486 	add.w	r4, r7, #268	; 0x10c
 8001b72:	461d      	mov	r5, r3
 8001b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b78:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b7c:	6020      	str	r0, [r4, #0]
 8001b7e:	3404      	adds	r4, #4
 8001b80:	8021      	strh	r1, [r4, #0]

	if (WIFI_Init() != WIFI_STATUS_OK)
 8001b82:	f007 fc4b 	bl	800941c <WIFI_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <RequestJSONProcess+0x50>
		return 1;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0cb      	b.n	8001d28 <RequestJSONProcess+0x1e8>
	printf("-init\r\n");
 8001b90:	486a      	ldr	r0, [pc, #424]	; (8001d3c <RequestJSONProcess+0x1fc>)
 8001b92:	f00b fadd 	bl	800d150 <puts>

	if (WIFI_Connect(ssid, password, ecn) == WIFI_STATUS_OK) {
 8001b96:	f897 2151 	ldrb.w	r2, [r7, #337]	; 0x151
 8001b9a:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8001b9e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f007 fc66 	bl	8009474 <WIFI_Connect>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f040 80b7 	bne.w	8001d1e <RequestJSONProcess+0x1de>
		S_PrintOnSerial("-connected\r\n");
 8001bb0:	4863      	ldr	r0, [pc, #396]	; (8001d40 <RequestJSONProcess+0x200>)
 8001bb2:	f7fe fce7 	bl	8000584 <S_PrintOnSerial>

		uint8_t serverIPAddr[4] = { 192, 168, 18, 3 };
 8001bb6:	4b63      	ldr	r3, [pc, #396]	; (8001d44 <RequestJSONProcess+0x204>)
 8001bb8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		uint32_t clientSocket = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

		while (!StopServer) {
 8001bc2:	e09e      	b.n	8001d02 <RequestJSONProcess+0x1c2>
			// Allocate memory for a MovementInstruction_t struct
			MovementInstruction_t *pMov;
			//Espera a un mensaje proveniente de la tarea serialRxTask para hacer una peticion
			osStatus_t status = osMessageQueueGet(instructionQueueHandle, &pMov,
 8001bc4:	4b60      	ldr	r3, [pc, #384]	; (8001d48 <RequestJSONProcess+0x208>)
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f007 ff9b 	bl	8009b0c <osMessageQueueGet>
 8001bd6:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			NULL,
			osWaitForever);
			// Receive the instruction from the queue
			if (status == osOK && pMov != NULL) {
 8001bda:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f040 808f 	bne.w	8001d02 <RequestJSONProcess+0x1c2>
 8001be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 808a 	beq.w	8001d02 <RequestJSONProcess+0x1c2>
				if (WIFI_OpenClientConnection(clientSocket, WIFI_TCP_PROTOCOL,
 8001bee:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	9301      	str	r3, [sp, #4]
 8001bf6:	f8b7 3152 	ldrh.w	r3, [r7, #338]	; 0x152
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	4a53      	ldr	r2, [pc, #332]	; (8001d4c <RequestJSONProcess+0x20c>)
 8001c00:	2100      	movs	r1, #0
 8001c02:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8001c06:	f007 fc6b 	bl	80094e0 <WIFI_OpenClientConnection>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d170      	bne.n	8001cf2 <RequestJSONProcess+0x1b2>
						"", serverIPAddr, serverPort, 0) == WIFI_STATUS_OK) {
					S_PrintOnSerial("-client\r\n");
 8001c10:	484f      	ldr	r0, [pc, #316]	; (8001d50 <RequestJSONProcess+0x210>)
 8001c12:	f7fe fcb7 	bl	8000584 <S_PrintOnSerial>
					uint8_t response[MAX_CHUNK_SIZE];
					//Request
					char *request1 =
 8001c16:	4b4f      	ldr	r3, [pc, #316]	; (8001d54 <RequestJSONProcess+0x214>)
 8001c18:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
							"GET /mi-api HTTP/1.1\r\nHost: 192.168.18.3\r\n\r\n";
					StopServer = RequestJSON(response, request1);
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 f8a2 	bl	8001d6c <RequestJSON>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f

					//Transformar el JSON en instrucciones
					uint8_t *instructionJson = malloc(
 8001c2e:	2064      	movs	r0, #100	; 0x64
 8001c30:	f00b f8f2 	bl	800ce18 <malloc>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
							sizeof(uint8_t) * MAX_NUM_INSTRUCTIONS);
					uint8_t *durationJson = malloc(
 8001c3a:	2064      	movs	r0, #100	; 0x64
 8001c3c:	f00b f8ec 	bl	800ce18 <malloc>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
							sizeof(uint8_t) * MAX_NUM_INSTRUCTIONS);
					uint8_t *iSize = malloc(sizeof(uint8_t));
 8001c46:	2001      	movs	r0, #1
 8001c48:	f00b f8e6 	bl	800ce18 <malloc>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
					uint8_t *dSize = malloc(sizeof(uint8_t));
 8001c52:	2001      	movs	r0, #1
 8001c54:	f00b f8e0 	bl	800ce18 <malloc>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

					I_JsonToInstructions((const char*) response,
 8001c5e:	1d38      	adds	r0, r7, #4
 8001c60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c6a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001c6e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c72:	f7fe fcad 	bl	80005d0 <I_JsonToInstructions>
							instructionJson, iSize, durationJson, dSize);

					char *serialJson = malloc(sizeof(char) * 200);
 8001c76:	20c8      	movs	r0, #200	; 0xc8
 8001c78:	f00b f8ce 	bl	800ce18 <malloc>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

					for (size_t i = 0; i < (*iSize); ++i) {
 8001c82:	2300      	movs	r3, #0
 8001c84:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c88:	e021      	b.n	8001cce <RequestJSONProcess+0x18e>
						sprintf(serialJson, "%d %d\n", instructionJson[i],
 8001c8a:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8001c8e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001c92:	4413      	add	r3, r2
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	4619      	mov	r1, r3
								durationJson[i]);
 8001c98:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001c9c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001ca0:	4413      	add	r3, r2
 8001ca2:	781b      	ldrb	r3, [r3, #0]
						sprintf(serialJson, "%d %d\n", instructionJson[i],
 8001ca4:	460a      	mov	r2, r1
 8001ca6:	492c      	ldr	r1, [pc, #176]	; (8001d58 <RequestJSONProcess+0x218>)
 8001ca8:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8001cac:	f00b fa68 	bl	800d180 <siprintf>
						serialJson += strlen(serialJson); // Mueve el puntero al final de la cadena agregada
 8001cb0:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8001cb4:	f7fe fa8c 	bl	80001d0 <strlen>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
					for (size_t i = 0; i < (*iSize); ++i) {
 8001cc4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001cc8:	3301      	adds	r3, #1
 8001cca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001cce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d3d5      	bcc.n	8001c8a <RequestJSONProcess+0x14a>
					}

					//formarCadena(instructionJson, durationJson, iSize, serialJson);

					printf("%s", serialJson);
 8001cde:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8001ce2:	481e      	ldr	r0, [pc, #120]	; (8001d5c <RequestJSONProcess+0x21c>)
 8001ce4:	f00b f9ae 	bl	800d044 <iprintf>

					//Disconnect from server
					WIFI_CloseClientConnection(clientSocket);
 8001ce8:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8001cec:	f007 fc32 	bl	8009554 <WIFI_CloseClientConnection>
 8001cf0:	e002      	b.n	8001cf8 <RequestJSONProcess+0x1b8>
				} else {
					S_PrintOnSerial("-fail client\r\n");
 8001cf2:	481b      	ldr	r0, [pc, #108]	; (8001d60 <RequestJSONProcess+0x220>)
 8001cf4:	f7fe fc46 	bl	8000584 <S_PrintOnSerial>

				}
				free(pMov);
 8001cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f00b f893 	bl	800ce28 <free>
		while (!StopServer) {
 8001d02:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001d06:	f083 0301 	eor.w	r3, r3, #1
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f47f af59 	bne.w	8001bc4 <RequestJSONProcess+0x84>
			}

			//S_PrintOnSerial("-clossing client");
		}
		// Disconnect from WiFi
		WIFI_Disconnect();
 8001d12:	f007 fbd1 	bl	80094b8 <WIFI_Disconnect>
		S_PrintOnSerial("-clossing wifi");
 8001d16:	4813      	ldr	r0, [pc, #76]	; (8001d64 <RequestJSONProcess+0x224>)
 8001d18:	f7fe fc34 	bl	8000584 <S_PrintOnSerial>
 8001d1c:	e002      	b.n	8001d24 <RequestJSONProcess+0x1e4>
	} else {
		S_PrintOnSerial("-fail host\r\n");
 8001d1e:	4812      	ldr	r0, [pc, #72]	; (8001d68 <RequestJSONProcess+0x228>)
 8001d20:	f7fe fc30 	bl	8000584 <S_PrintOnSerial>
	}

	return (int) StopServer;
 8001d24:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bdb0      	pop	{r4, r5, r7, pc}
 8001d32:	bf00      	nop
 8001d34:	0800e7ac 	.word	0x0800e7ac
 8001d38:	0800e7bc 	.word	0x0800e7bc
 8001d3c:	0800e718 	.word	0x0800e718
 8001d40:	0800e720 	.word	0x0800e720
 8001d44:	0312a8c0 	.word	0x0312a8c0
 8001d48:	200007dc 	.word	0x200007dc
 8001d4c:	0800e730 	.word	0x0800e730
 8001d50:	0800e734 	.word	0x0800e734
 8001d54:	0800e740 	.word	0x0800e740
 8001d58:	0800e770 	.word	0x0800e770
 8001d5c:	0800e778 	.word	0x0800e778
 8001d60:	0800e77c 	.word	0x0800e77c
 8001d64:	0800e78c 	.word	0x0800e78c
 8001d68:	0800e79c 	.word	0x0800e79c

08001d6c <RequestJSON>:
// Parámetros:
// - jsonbody: puntero al array de bytes donde se almacenará el JSON recibido
// - request: cadena que representa la solicitud HTTP GET
// Retorna:
// - true si la solicitud se completó con éxito, false si ocurrió un error
bool RequestJSON(uint8_t *jsonbody, char *request) {
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	f5ad 7d4f 	sub.w	sp, sp, #828	; 0x33c
 8001d72:	af02      	add	r7, sp, #8
 8001d74:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001d78:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001d7c:	6018      	str	r0, [r3, #0]
 8001d7e:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001d82:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8001d86:	6019      	str	r1, [r3, #0]
	uint32_t clientSocket = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
	//Send an HTTP GET request
	//const char *getRequest = "GET /mi-api HTTP/1.1\r\nHost: 192.168.18.3\r\n\r\n";
	uint8_t response[512]; // Adjust the response buffer size as per your requirements
	uint16_t getRequestLength = strlen(request);
 8001d8e:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001d92:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8001d96:	6818      	ldr	r0, [r3, #0]
 8001d98:	f7fe fa1a 	bl	80001d0 <strlen>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f8a7 3326 	strh.w	r3, [r7, #806]	; 0x326

	// Send data in smaller chunks
	uint16_t sentDataLength = 0;
 8001da2:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001da6:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8001daa:	2200      	movs	r2, #0
 8001dac:	801a      	strh	r2, [r3, #0]
	uint16_t remainingDataLength = getRequestLength;
 8001dae:	f8b7 3326 	ldrh.w	r3, [r7, #806]	; 0x326
 8001db2:	f8a7 332e 	strh.w	r3, [r7, #814]	; 0x32e
	while (remainingDataLength > 0) {
 8001db6:	e032      	b.n	8001e1e <RequestJSON+0xb2>
		uint16_t chunkSize =
 8001db8:	f8b7 332e 	ldrh.w	r3, [r7, #814]	; 0x32e
 8001dbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dc0:	bf28      	it	cs
 8001dc2:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8001dc6:	f8a7 3324 	strh.w	r3, [r7, #804]	; 0x324
				(remainingDataLength > MAX_CHUNK_SIZE) ?
				MAX_CHUNK_SIZE :
															remainingDataLength;
		if (WIFI_SendData(clientSocket, (uint8_t*) (request + sentDataLength),
 8001dca:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8001dce:	b2d8      	uxtb	r0, r3
 8001dd0:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001dd4:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001de0:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	1899      	adds	r1, r3, r2
 8001de8:	f507 7387 	add.w	r3, r7, #270	; 0x10e
 8001dec:	f8b7 2324 	ldrh.w	r2, [r7, #804]	; 0x324
 8001df0:	f242 7410 	movw	r4, #10000	; 0x2710
 8001df4:	9400      	str	r4, [sp, #0]
 8001df6:	f007 fbc9 	bl	800958c <WIFI_SendData>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10a      	bne.n	8001e16 <RequestJSON+0xaa>
				chunkSize, &sentDataLength, WIFI_WRITE_TIMEOUT)
				== WIFI_STATUS_OK) {
			remainingDataLength -= sentDataLength;
 8001e00:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001e04:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	f8b7 232e 	ldrh.w	r2, [r7, #814]	; 0x32e
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	f8a7 332e 	strh.w	r3, [r7, #814]	; 0x32e
 8001e14:	e003      	b.n	8001e1e <RequestJSON+0xb2>
		} else {
			printf("Failed to send the request.\n");
 8001e16:	4852      	ldr	r0, [pc, #328]	; (8001f60 <RequestJSON+0x1f4>)
 8001e18:	f00b f99a 	bl	800d150 <puts>
			break;
 8001e1c:	e003      	b.n	8001e26 <RequestJSON+0xba>
	while (remainingDataLength > 0) {
 8001e1e:	f8b7 332e 	ldrh.w	r3, [r7, #814]	; 0x32e
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1c8      	bne.n	8001db8 <RequestJSON+0x4c>
		}
	}

	// Receive the response
	uint16_t receivedDataLength = 0;
 8001e26:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001e2a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8001e2e:	2200      	movs	r2, #0
 8001e30:	801a      	strh	r2, [r3, #0]
	uint32_t receiveTimeout = 10000; // Adjust the receive timeout value as per your requirements
 8001e32:	f242 7310 	movw	r3, #10000	; 0x2710
 8001e36:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320

	// Receive the HTTP response headers
	if (WIFI_ReceiveData(clientSocket, response, sizeof(response) - 1,
 8001e3a:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8001e3e:	b2d8      	uxtb	r0, r3
 8001e40:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001e44:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001e48:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001e54:	f007 fbbc 	bl	80095d0 <WIFI_ReceiveData>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d176      	bne.n	8001f4c <RequestJSON+0x1e0>
			&receivedDataLength, receiveTimeout) == WIFI_STATUS_OK) {
		response[receivedDataLength] = '\0'; // Null-terminate the response
 8001e5e:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001e62:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001e6e:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8001e72:	2100      	movs	r1, #0
 8001e74:	5499      	strb	r1, [r3, r2]

		// Find the end of headers marker "\r\n\r\n"
		char *endOfHeaders = strstr((char*) response, "\r\n\r\n");
 8001e76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e7a:	493a      	ldr	r1, [pc, #232]	; (8001f64 <RequestJSON+0x1f8>)
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f00b f9bf 	bl	800d200 <strstr>
 8001e82:	f8c7 031c 	str.w	r0, [r7, #796]	; 0x31c
		if (endOfHeaders) {
 8001e86:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d05a      	beq.n	8001f44 <RequestJSON+0x1d8>
			//printf("%s", endOfHeaders + 4);

			// Receive and print the remaining JSON body
			while (1) {
				uint8_t chunk[MAX_CHUNK_SIZE]; // Adjust the chunk size as per your requirements
				uint16_t receivedChunkLength = 0;
 8001e8e:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001e92:	f2a3 2326 	subw	r3, r3, #550	; 0x226
 8001e96:	2200      	movs	r2, #0
 8001e98:	801a      	strh	r2, [r3, #0]
				uint32_t receiveTimeout = 1000; // Adjust the receive timeout value as per your requirements
 8001e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e9e:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318

				// Receive a chunk of data
				if (WIFI_ReceiveData(clientSocket, chunk, MAX_CHUNK_SIZE - 1,
 8001ea2:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8001ea6:	b2d8      	uxtb	r0, r3
 8001ea8:	f507 7285 	add.w	r2, r7, #266	; 0x10a
 8001eac:	f107 0108 	add.w	r1, r7, #8
 8001eb0:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	22ff      	movs	r2, #255	; 0xff
 8001eba:	f007 fb89 	bl	80095d0 <WIFI_ReceiveData>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d13b      	bne.n	8001f3c <RequestJSON+0x1d0>
						&receivedChunkLength, receiveTimeout)
						== WIFI_STATUS_OK) {
					chunk[receivedChunkLength] = '\0'; // Null-terminate the chunk
 8001ec4:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001ec8:	f2a3 2326 	subw	r3, r3, #550	; 0x226
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001ed4:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001ed8:	2100      	movs	r1, #0
 8001eda:	5499      	strb	r1, [r3, r2]

					// Buscar la posición de la cadena "\r\n\OK\r\n\>"
					char *endMarker = strstr((char*) chunk, "\r\nOK\r\n>");
 8001edc:	f107 0308 	add.w	r3, r7, #8
 8001ee0:	4921      	ldr	r1, [pc, #132]	; (8001f68 <RequestJSON+0x1fc>)
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f00b f98c 	bl	800d200 <strstr>
 8001ee8:	f8c7 0314 	str.w	r0, [r7, #788]	; 0x314

					if (endMarker != NULL) {
 8001eec:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d01b      	beq.n	8001f2c <RequestJSON+0x1c0>
						// Calcular la longitud del JSON
						size_t jsonLength = endMarker - (char*) chunk;
 8001ef4:	f107 0308 	add.w	r3, r7, #8
 8001ef8:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310

						// Copiar el JSON a una nueva ubicación en la memoria
						memmove(chunk, chunk, jsonLength);

						// Agregar el carácter de fin de línea '\0' al final del JSON
						chunk[jsonLength] = '\0';
 8001f02:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001f06:	f5a3 724a 	sub.w	r2, r3, #808	; 0x328
 8001f0a:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8001f0e:	4413      	add	r3, r2
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]

						//Devolver el contenido del json
						memcpy(jsonbody, chunk, jsonLength + 1);
 8001f14:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8001f18:	1c5a      	adds	r2, r3, #1
 8001f1a:	f107 0108 	add.w	r1, r7, #8
 8001f1e:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001f22:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	f00a ff96 	bl	800ce58 <memcpy>
					}

					// Check if the chunk is the end of the response
					if (receivedChunkLength < sizeof(chunk) - 1) {
 8001f2c:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001f30:	f2a3 2326 	subw	r3, r3, #550	; 0x226
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	2bfe      	cmp	r3, #254	; 0xfe
 8001f38:	d8a9      	bhi.n	8001e8e <RequestJSON+0x122>
						break;
 8001f3a:	e00a      	b.n	8001f52 <RequestJSON+0x1e6>
					}
				} else {
					printf("Failed to receive the JSON body.\n");
 8001f3c:	480b      	ldr	r0, [pc, #44]	; (8001f6c <RequestJSON+0x200>)
 8001f3e:	f00b f907 	bl	800d150 <puts>
					break;
 8001f42:	e006      	b.n	8001f52 <RequestJSON+0x1e6>
				}
			}
		} else {
			printf("Failed to find the end of headers marker.\n");
 8001f44:	480a      	ldr	r0, [pc, #40]	; (8001f70 <RequestJSON+0x204>)
 8001f46:	f00b f903 	bl	800d150 <puts>
 8001f4a:	e002      	b.n	8001f52 <RequestJSON+0x1e6>
		}
	} else {
		printf("Failed to receive the response headers.\n");
 8001f4c:	4809      	ldr	r0, [pc, #36]	; (8001f74 <RequestJSON+0x208>)
 8001f4e:	f00b f8ff 	bl	800d150 <puts>
	}

	return 0;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	f507 774d 	add.w	r7, r7, #820	; 0x334
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd90      	pop	{r4, r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	0800e7d4 	.word	0x0800e7d4
 8001f64:	0800e7f0 	.word	0x0800e7f0
 8001f68:	0800e7f8 	.word	0x0800e7f8
 8001f6c:	0800e800 	.word	0x0800e800
 8001f70:	0800e824 	.word	0x0800e824
 8001f74:	0800e850 	.word	0x0800e850

08001f78 <EXTI1_IRQHandler>:
/**
 * @brief  This function handles external lines 1interrupt request.
 * @param  None
 * @retval None
 */
void EXTI1_IRQHandler(void) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001f7c:	2002      	movs	r0, #2
 8001f7e:	f000 fdeb 	bl	8002b58 <HAL_GPIO_EXTI_IRQHandler>
	portYIELD_FROM_ISR(pdFALSE);
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief  EXTI line detection callback.
 * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8001f90:	88fb      	ldrh	r3, [r7, #6]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d102      	bne.n	8001f9c <HAL_GPIO_EXTI_Callback+0x16>
	case (GPIO_PIN_1): {
		SPI_WIFI_ISR();
 8001f96:	f007 fa31 	bl	80093fc <SPI_WIFI_ISR>
		break;
 8001f9a:	e000      	b.n	8001f9e <HAL_GPIO_EXTI_Callback+0x18>
	}
	default: {
		break;
 8001f9c:	bf00      	nop
	}
	}
	portYIELD_FROM_ISR(pdFALSE);
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <SPI3_IRQHandler>:
 * @brief  SPI3 line detection callback.
 * @param  None
 * @retval None
 */
extern SPI_HandleTypeDef hspi;
void SPI3_IRQHandler(void) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
	HAL_SPI_IRQHandler(&hspi);
 8001fac:	4802      	ldr	r0, [pc, #8]	; (8001fb8 <SPI3_IRQHandler+0x10>)
 8001fae:	f003 fa93 	bl	80054d8 <HAL_SPI_IRQHandler>
	portYIELD_FROM_ISR(pdFALSE);
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000864 	.word	0x20000864

08001fbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ff4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fc0:	f7ff fdac 	bl	8001b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fc4:	480c      	ldr	r0, [pc, #48]	; (8001ff8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fc6:	490d      	ldr	r1, [pc, #52]	; (8001ffc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fc8:	4a0d      	ldr	r2, [pc, #52]	; (8002000 <LoopForever+0xe>)
  movs r3, #0
 8001fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fcc:	e002      	b.n	8001fd4 <LoopCopyDataInit>

08001fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fd2:	3304      	adds	r3, #4

08001fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd8:	d3f9      	bcc.n	8001fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fda:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fdc:	4c0a      	ldr	r4, [pc, #40]	; (8002008 <LoopForever+0x16>)
  movs r3, #0
 8001fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe0:	e001      	b.n	8001fe6 <LoopFillZerobss>

08001fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe4:	3204      	adds	r2, #4

08001fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe8:	d3fb      	bcc.n	8001fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fea:	f00a fef1 	bl	800cdd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fee:	f7fe fd4d 	bl	8000a8c <main>

08001ff2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ff2:	e7fe      	b.n	8001ff2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ff4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ffc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002000:	0800f044 	.word	0x0800f044
  ldr r2, =_sbss
 8002004:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002008:	20002af0 	.word	0x20002af0

0800200c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800200c:	e7fe      	b.n	800200c <ADC1_2_IRQHandler>

0800200e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002014:	2300      	movs	r3, #0
 8002016:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002018:	2003      	movs	r0, #3
 800201a:	f000 f902 	bl	8002222 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800201e:	200f      	movs	r0, #15
 8002020:	f7ff fbde 	bl	80017e0 <HAL_InitTick>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d002      	beq.n	8002030 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	71fb      	strb	r3, [r7, #7]
 800202e:	e001      	b.n	8002034 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002030:	f7ff f8f8 	bl	8001224 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002034:	79fb      	ldrb	r3, [r7, #7]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_IncTick+0x20>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_IncTick+0x24>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4413      	add	r3, r2
 8002050:	4a04      	ldr	r2, [pc, #16]	; (8002064 <HAL_IncTick+0x24>)
 8002052:	6013      	str	r3, [r2, #0]
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000008 	.word	0x20000008
 8002064:	20000838 	.word	0x20000838

08002068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return uwTick;
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <HAL_GetTick+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000838 	.word	0x20000838

08002080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002088:	f7ff ffee 	bl	8002068 <HAL_GetTick>
 800208c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002098:	d005      	beq.n	80020a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_Delay+0x44>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4413      	add	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020a6:	bf00      	nop
 80020a8:	f7ff ffde 	bl	8002068 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d8f7      	bhi.n	80020a8 <HAL_Delay+0x28>
  {
  }
}
 80020b8:	bf00      	nop
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000008 	.word	0x20000008

080020c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <__NVIC_SetPriorityGrouping+0x44>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020e4:	4013      	ands	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020fa:	4a04      	ldr	r2, [pc, #16]	; (800210c <__NVIC_SetPriorityGrouping+0x44>)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	60d3      	str	r3, [r2, #12]
}
 8002100:	bf00      	nop
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <__NVIC_GetPriorityGrouping+0x18>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	0a1b      	lsrs	r3, r3, #8
 800211a:	f003 0307 	and.w	r3, r3, #7
}
 800211e:	4618      	mov	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	2b00      	cmp	r3, #0
 800213c:	db0b      	blt.n	8002156 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	f003 021f 	and.w	r2, r3, #31
 8002144:	4907      	ldr	r1, [pc, #28]	; (8002164 <__NVIC_EnableIRQ+0x38>)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	2001      	movs	r0, #1
 800214e:	fa00 f202 	lsl.w	r2, r0, r2
 8002152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	e000e100 	.word	0xe000e100

08002168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	6039      	str	r1, [r7, #0]
 8002172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002178:	2b00      	cmp	r3, #0
 800217a:	db0a      	blt.n	8002192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	b2da      	uxtb	r2, r3
 8002180:	490c      	ldr	r1, [pc, #48]	; (80021b4 <__NVIC_SetPriority+0x4c>)
 8002182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002186:	0112      	lsls	r2, r2, #4
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	440b      	add	r3, r1
 800218c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002190:	e00a      	b.n	80021a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	b2da      	uxtb	r2, r3
 8002196:	4908      	ldr	r1, [pc, #32]	; (80021b8 <__NVIC_SetPriority+0x50>)
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	3b04      	subs	r3, #4
 80021a0:	0112      	lsls	r2, r2, #4
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	440b      	add	r3, r1
 80021a6:	761a      	strb	r2, [r3, #24]
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000e100 	.word	0xe000e100
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021bc:	b480      	push	{r7}
 80021be:	b089      	sub	sp, #36	; 0x24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f1c3 0307 	rsb	r3, r3, #7
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	bf28      	it	cs
 80021da:	2304      	movcs	r3, #4
 80021dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3304      	adds	r3, #4
 80021e2:	2b06      	cmp	r3, #6
 80021e4:	d902      	bls.n	80021ec <NVIC_EncodePriority+0x30>
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3b03      	subs	r3, #3
 80021ea:	e000      	b.n	80021ee <NVIC_EncodePriority+0x32>
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f0:	f04f 32ff 	mov.w	r2, #4294967295
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43da      	mvns	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	401a      	ands	r2, r3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002204:	f04f 31ff 	mov.w	r1, #4294967295
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	fa01 f303 	lsl.w	r3, r1, r3
 800220e:	43d9      	mvns	r1, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002214:	4313      	orrs	r3, r2
         );
}
 8002216:	4618      	mov	r0, r3
 8002218:	3724      	adds	r7, #36	; 0x24
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff ff4c 	bl	80020c8 <__NVIC_SetPriorityGrouping>
}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
 8002244:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800224a:	f7ff ff61 	bl	8002110 <__NVIC_GetPriorityGrouping>
 800224e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	68b9      	ldr	r1, [r7, #8]
 8002254:	6978      	ldr	r0, [r7, #20]
 8002256:	f7ff ffb1 	bl	80021bc <NVIC_EncodePriority>
 800225a:	4602      	mov	r2, r0
 800225c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002260:	4611      	mov	r1, r2
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff ff80 	bl	8002168 <__NVIC_SetPriority>
}
 8002268:	bf00      	nop
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff ff54 	bl	800212c <__NVIC_EnableIRQ>
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e0ac      	b.n	80023f8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f8b2 	bl	800240c <DFSDM_GetChannelFromInstance>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4a55      	ldr	r2, [pc, #340]	; (8002400 <HAL_DFSDM_ChannelInit+0x174>)
 80022ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e09f      	b.n	80023f8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7fe ffdb 	bl	8001274 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80022be:	4b51      	ldr	r3, [pc, #324]	; (8002404 <HAL_DFSDM_ChannelInit+0x178>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	3301      	adds	r3, #1
 80022c4:	4a4f      	ldr	r2, [pc, #316]	; (8002404 <HAL_DFSDM_ChannelInit+0x178>)
 80022c6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80022c8:	4b4e      	ldr	r3, [pc, #312]	; (8002404 <HAL_DFSDM_ChannelInit+0x178>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d125      	bne.n	800231c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80022d0:	4b4d      	ldr	r3, [pc, #308]	; (8002408 <HAL_DFSDM_ChannelInit+0x17c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a4c      	ldr	r2, [pc, #304]	; (8002408 <HAL_DFSDM_ChannelInit+0x17c>)
 80022d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022da:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80022dc:	4b4a      	ldr	r3, [pc, #296]	; (8002408 <HAL_DFSDM_ChannelInit+0x17c>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4948      	ldr	r1, [pc, #288]	; (8002408 <HAL_DFSDM_ChannelInit+0x17c>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80022ea:	4b47      	ldr	r3, [pc, #284]	; (8002408 <HAL_DFSDM_ChannelInit+0x17c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a46      	ldr	r2, [pc, #280]	; (8002408 <HAL_DFSDM_ChannelInit+0x17c>)
 80022f0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80022f4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	791b      	ldrb	r3, [r3, #4]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d108      	bne.n	8002310 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80022fe:	4b42      	ldr	r3, [pc, #264]	; (8002408 <HAL_DFSDM_ChannelInit+0x17c>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	3b01      	subs	r3, #1
 8002308:	041b      	lsls	r3, r3, #16
 800230a:	493f      	ldr	r1, [pc, #252]	; (8002408 <HAL_DFSDM_ChannelInit+0x17c>)
 800230c:	4313      	orrs	r3, r2
 800230e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002310:	4b3d      	ldr	r3, [pc, #244]	; (8002408 <HAL_DFSDM_ChannelInit+0x17c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a3c      	ldr	r2, [pc, #240]	; (8002408 <HAL_DFSDM_ChannelInit+0x17c>)
 8002316:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800231a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800232a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6819      	ldr	r1, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800233a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002340:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 020f 	bic.w	r2, r2, #15
 8002358:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6819      	ldr	r1, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002380:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6899      	ldr	r1, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	3b01      	subs	r3, #1
 8002392:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f002 0207 	and.w	r2, r2, #7
 80023ac:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6859      	ldr	r1, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023d8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f810 	bl	800240c <DFSDM_GetChannelFromInstance>
 80023ec:	4602      	mov	r2, r0
 80023ee:	4904      	ldr	r1, [pc, #16]	; (8002400 <HAL_DFSDM_ChannelInit+0x174>)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000840 	.word	0x20000840
 8002404:	2000083c 	.word	0x2000083c
 8002408:	40016000 	.word	0x40016000

0800240c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a1c      	ldr	r2, [pc, #112]	; (8002488 <DFSDM_GetChannelFromInstance+0x7c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d102      	bne.n	8002422 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	e02b      	b.n	800247a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a19      	ldr	r2, [pc, #100]	; (800248c <DFSDM_GetChannelFromInstance+0x80>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d102      	bne.n	8002430 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800242a:	2301      	movs	r3, #1
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	e024      	b.n	800247a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a17      	ldr	r2, [pc, #92]	; (8002490 <DFSDM_GetChannelFromInstance+0x84>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d102      	bne.n	800243e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002438:	2302      	movs	r3, #2
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	e01d      	b.n	800247a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a14      	ldr	r2, [pc, #80]	; (8002494 <DFSDM_GetChannelFromInstance+0x88>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d102      	bne.n	800244c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002446:	2304      	movs	r3, #4
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	e016      	b.n	800247a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a12      	ldr	r2, [pc, #72]	; (8002498 <DFSDM_GetChannelFromInstance+0x8c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d102      	bne.n	800245a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002454:	2305      	movs	r3, #5
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	e00f      	b.n	800247a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a0f      	ldr	r2, [pc, #60]	; (800249c <DFSDM_GetChannelFromInstance+0x90>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d102      	bne.n	8002468 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002462:	2306      	movs	r3, #6
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	e008      	b.n	800247a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a0d      	ldr	r2, [pc, #52]	; (80024a0 <DFSDM_GetChannelFromInstance+0x94>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d102      	bne.n	8002476 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002470:	2307      	movs	r3, #7
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	e001      	b.n	800247a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002476:	2303      	movs	r3, #3
 8002478:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800247a:	68fb      	ldr	r3, [r7, #12]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	40016000 	.word	0x40016000
 800248c:	40016020 	.word	0x40016020
 8002490:	40016040 	.word	0x40016040
 8002494:	40016080 	.word	0x40016080
 8002498:	400160a0 	.word	0x400160a0
 800249c:	400160c0 	.word	0x400160c0
 80024a0:	400160e0 	.word	0x400160e0

080024a4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d008      	beq.n	80024ce <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2204      	movs	r2, #4
 80024c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e022      	b.n	8002514 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 020e 	bic.w	r2, r2, #14
 80024dc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0201 	bic.w	r2, r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	f003 021c 	and.w	r2, r3, #28
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	2101      	movs	r1, #1
 80024fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002500:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002512:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d005      	beq.n	8002544 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2204      	movs	r2, #4
 800253c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
 8002542:	e029      	b.n	8002598 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 020e 	bic.w	r2, r2, #14
 8002552:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002568:	f003 021c 	and.w	r2, r3, #28
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	2101      	movs	r1, #1
 8002572:	fa01 f202 	lsl.w	r2, r1, r2
 8002576:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	4798      	blx	r3
    }
  }
  return status;
 8002598:	7bfb      	ldrb	r3, [r7, #15]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ca:	e17f      	b.n	80028cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	2101      	movs	r1, #1
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	fa01 f303 	lsl.w	r3, r1, r3
 80025d8:	4013      	ands	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 8171 	beq.w	80028c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d005      	beq.n	80025fc <HAL_GPIO_Init+0x40>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d130      	bne.n	800265e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	2203      	movs	r2, #3
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4313      	orrs	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002632:	2201      	movs	r2, #1
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	4013      	ands	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	091b      	lsrs	r3, r3, #4
 8002648:	f003 0201 	and.w	r2, r3, #1
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	2b03      	cmp	r3, #3
 8002668:	d118      	bne.n	800269c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002670:	2201      	movs	r2, #1
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4013      	ands	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	08db      	lsrs	r3, r3, #3
 8002686:	f003 0201 	and.w	r2, r3, #1
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d017      	beq.n	80026d8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	2203      	movs	r2, #3
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d123      	bne.n	800272c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	08da      	lsrs	r2, r3, #3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3208      	adds	r2, #8
 80026ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	220f      	movs	r2, #15
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4013      	ands	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	4313      	orrs	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	08da      	lsrs	r2, r3, #3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3208      	adds	r2, #8
 8002726:	6939      	ldr	r1, [r7, #16]
 8002728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	2203      	movs	r2, #3
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4013      	ands	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0203 	and.w	r2, r3, #3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80ac 	beq.w	80028c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276e:	4b5f      	ldr	r3, [pc, #380]	; (80028ec <HAL_GPIO_Init+0x330>)
 8002770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002772:	4a5e      	ldr	r2, [pc, #376]	; (80028ec <HAL_GPIO_Init+0x330>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6613      	str	r3, [r2, #96]	; 0x60
 800277a:	4b5c      	ldr	r3, [pc, #368]	; (80028ec <HAL_GPIO_Init+0x330>)
 800277c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002786:	4a5a      	ldr	r2, [pc, #360]	; (80028f0 <HAL_GPIO_Init+0x334>)
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	089b      	lsrs	r3, r3, #2
 800278c:	3302      	adds	r3, #2
 800278e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002792:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	220f      	movs	r2, #15
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4013      	ands	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027b0:	d025      	beq.n	80027fe <HAL_GPIO_Init+0x242>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a4f      	ldr	r2, [pc, #316]	; (80028f4 <HAL_GPIO_Init+0x338>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d01f      	beq.n	80027fa <HAL_GPIO_Init+0x23e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a4e      	ldr	r2, [pc, #312]	; (80028f8 <HAL_GPIO_Init+0x33c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d019      	beq.n	80027f6 <HAL_GPIO_Init+0x23a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a4d      	ldr	r2, [pc, #308]	; (80028fc <HAL_GPIO_Init+0x340>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d013      	beq.n	80027f2 <HAL_GPIO_Init+0x236>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a4c      	ldr	r2, [pc, #304]	; (8002900 <HAL_GPIO_Init+0x344>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00d      	beq.n	80027ee <HAL_GPIO_Init+0x232>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a4b      	ldr	r2, [pc, #300]	; (8002904 <HAL_GPIO_Init+0x348>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d007      	beq.n	80027ea <HAL_GPIO_Init+0x22e>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a4a      	ldr	r2, [pc, #296]	; (8002908 <HAL_GPIO_Init+0x34c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d101      	bne.n	80027e6 <HAL_GPIO_Init+0x22a>
 80027e2:	2306      	movs	r3, #6
 80027e4:	e00c      	b.n	8002800 <HAL_GPIO_Init+0x244>
 80027e6:	2307      	movs	r3, #7
 80027e8:	e00a      	b.n	8002800 <HAL_GPIO_Init+0x244>
 80027ea:	2305      	movs	r3, #5
 80027ec:	e008      	b.n	8002800 <HAL_GPIO_Init+0x244>
 80027ee:	2304      	movs	r3, #4
 80027f0:	e006      	b.n	8002800 <HAL_GPIO_Init+0x244>
 80027f2:	2303      	movs	r3, #3
 80027f4:	e004      	b.n	8002800 <HAL_GPIO_Init+0x244>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e002      	b.n	8002800 <HAL_GPIO_Init+0x244>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <HAL_GPIO_Init+0x244>
 80027fe:	2300      	movs	r3, #0
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	f002 0203 	and.w	r2, r2, #3
 8002806:	0092      	lsls	r2, r2, #2
 8002808:	4093      	lsls	r3, r2
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002810:	4937      	ldr	r1, [pc, #220]	; (80028f0 <HAL_GPIO_Init+0x334>)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	089b      	lsrs	r3, r3, #2
 8002816:	3302      	adds	r3, #2
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800281e:	4b3b      	ldr	r3, [pc, #236]	; (800290c <HAL_GPIO_Init+0x350>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	43db      	mvns	r3, r3
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4013      	ands	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002842:	4a32      	ldr	r2, [pc, #200]	; (800290c <HAL_GPIO_Init+0x350>)
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002848:	4b30      	ldr	r3, [pc, #192]	; (800290c <HAL_GPIO_Init+0x350>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	43db      	mvns	r3, r3
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4013      	ands	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800286c:	4a27      	ldr	r2, [pc, #156]	; (800290c <HAL_GPIO_Init+0x350>)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002872:	4b26      	ldr	r3, [pc, #152]	; (800290c <HAL_GPIO_Init+0x350>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	43db      	mvns	r3, r3
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4013      	ands	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002896:	4a1d      	ldr	r2, [pc, #116]	; (800290c <HAL_GPIO_Init+0x350>)
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800289c:	4b1b      	ldr	r3, [pc, #108]	; (800290c <HAL_GPIO_Init+0x350>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4013      	ands	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028c0:	4a12      	ldr	r2, [pc, #72]	; (800290c <HAL_GPIO_Init+0x350>)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	3301      	adds	r3, #1
 80028ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	fa22 f303 	lsr.w	r3, r2, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f47f ae78 	bne.w	80025cc <HAL_GPIO_Init+0x10>
  }
}
 80028dc:	bf00      	nop
 80028de:	bf00      	nop
 80028e0:	371c      	adds	r7, #28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40010000 	.word	0x40010000
 80028f4:	48000400 	.word	0x48000400
 80028f8:	48000800 	.word	0x48000800
 80028fc:	48000c00 	.word	0x48000c00
 8002900:	48001000 	.word	0x48001000
 8002904:	48001400 	.word	0x48001400
 8002908:	48001800 	.word	0x48001800
 800290c:	40010400 	.word	0x40010400

08002910 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800291e:	e0cd      	b.n	8002abc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002920:	2201      	movs	r2, #1
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	4013      	ands	r3, r2
 800292c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 80c0 	beq.w	8002ab6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002936:	4a68      	ldr	r2, [pc, #416]	; (8002ad8 <HAL_GPIO_DeInit+0x1c8>)
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	089b      	lsrs	r3, r3, #2
 800293c:	3302      	adds	r3, #2
 800293e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002942:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	220f      	movs	r2, #15
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4013      	ands	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800295e:	d025      	beq.n	80029ac <HAL_GPIO_DeInit+0x9c>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a5e      	ldr	r2, [pc, #376]	; (8002adc <HAL_GPIO_DeInit+0x1cc>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d01f      	beq.n	80029a8 <HAL_GPIO_DeInit+0x98>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a5d      	ldr	r2, [pc, #372]	; (8002ae0 <HAL_GPIO_DeInit+0x1d0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d019      	beq.n	80029a4 <HAL_GPIO_DeInit+0x94>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a5c      	ldr	r2, [pc, #368]	; (8002ae4 <HAL_GPIO_DeInit+0x1d4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d013      	beq.n	80029a0 <HAL_GPIO_DeInit+0x90>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a5b      	ldr	r2, [pc, #364]	; (8002ae8 <HAL_GPIO_DeInit+0x1d8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d00d      	beq.n	800299c <HAL_GPIO_DeInit+0x8c>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a5a      	ldr	r2, [pc, #360]	; (8002aec <HAL_GPIO_DeInit+0x1dc>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d007      	beq.n	8002998 <HAL_GPIO_DeInit+0x88>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a59      	ldr	r2, [pc, #356]	; (8002af0 <HAL_GPIO_DeInit+0x1e0>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d101      	bne.n	8002994 <HAL_GPIO_DeInit+0x84>
 8002990:	2306      	movs	r3, #6
 8002992:	e00c      	b.n	80029ae <HAL_GPIO_DeInit+0x9e>
 8002994:	2307      	movs	r3, #7
 8002996:	e00a      	b.n	80029ae <HAL_GPIO_DeInit+0x9e>
 8002998:	2305      	movs	r3, #5
 800299a:	e008      	b.n	80029ae <HAL_GPIO_DeInit+0x9e>
 800299c:	2304      	movs	r3, #4
 800299e:	e006      	b.n	80029ae <HAL_GPIO_DeInit+0x9e>
 80029a0:	2303      	movs	r3, #3
 80029a2:	e004      	b.n	80029ae <HAL_GPIO_DeInit+0x9e>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e002      	b.n	80029ae <HAL_GPIO_DeInit+0x9e>
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <HAL_GPIO_DeInit+0x9e>
 80029ac:	2300      	movs	r3, #0
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	f002 0203 	and.w	r2, r2, #3
 80029b4:	0092      	lsls	r2, r2, #2
 80029b6:	4093      	lsls	r3, r2
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d132      	bne.n	8002a24 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80029be:	4b4d      	ldr	r3, [pc, #308]	; (8002af4 <HAL_GPIO_DeInit+0x1e4>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	494b      	ldr	r1, [pc, #300]	; (8002af4 <HAL_GPIO_DeInit+0x1e4>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80029cc:	4b49      	ldr	r3, [pc, #292]	; (8002af4 <HAL_GPIO_DeInit+0x1e4>)
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	4947      	ldr	r1, [pc, #284]	; (8002af4 <HAL_GPIO_DeInit+0x1e4>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80029da:	4b46      	ldr	r3, [pc, #280]	; (8002af4 <HAL_GPIO_DeInit+0x1e4>)
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	43db      	mvns	r3, r3
 80029e2:	4944      	ldr	r1, [pc, #272]	; (8002af4 <HAL_GPIO_DeInit+0x1e4>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80029e8:	4b42      	ldr	r3, [pc, #264]	; (8002af4 <HAL_GPIO_DeInit+0x1e4>)
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	43db      	mvns	r3, r3
 80029f0:	4940      	ldr	r1, [pc, #256]	; (8002af4 <HAL_GPIO_DeInit+0x1e4>)
 80029f2:	4013      	ands	r3, r2
 80029f4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	220f      	movs	r2, #15
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002a06:	4a34      	ldr	r2, [pc, #208]	; (8002ad8 <HAL_GPIO_DeInit+0x1c8>)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	089b      	lsrs	r3, r3, #2
 8002a0c:	3302      	adds	r3, #2
 8002a0e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	43da      	mvns	r2, r3
 8002a16:	4830      	ldr	r0, [pc, #192]	; (8002ad8 <HAL_GPIO_DeInit+0x1c8>)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	089b      	lsrs	r3, r3, #2
 8002a1c:	400a      	ands	r2, r1
 8002a1e:	3302      	adds	r3, #2
 8002a20:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	2103      	movs	r1, #3
 8002a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	08da      	lsrs	r2, r3, #3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3208      	adds	r2, #8
 8002a40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	220f      	movs	r2, #15
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	08d2      	lsrs	r2, r2, #3
 8002a58:	4019      	ands	r1, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3208      	adds	r2, #8
 8002a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	2103      	movs	r1, #3
 8002a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	401a      	ands	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	fa01 f303 	lsl.w	r3, r1, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	401a      	ands	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	2103      	movs	r1, #3
 8002a96:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	401a      	ands	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	401a      	ands	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f47f af2b 	bne.w	8002920 <HAL_GPIO_DeInit+0x10>
  }
}
 8002aca:	bf00      	nop
 8002acc:	bf00      	nop
 8002ace:	371c      	adds	r7, #28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	40010000 	.word	0x40010000
 8002adc:	48000400 	.word	0x48000400
 8002ae0:	48000800 	.word	0x48000800
 8002ae4:	48000c00 	.word	0x48000c00
 8002ae8:	48001000 	.word	0x48001000
 8002aec:	48001400 	.word	0x48001400
 8002af0:	48001800 	.word	0x48001800
 8002af4:	40010400 	.word	0x40010400

08002af8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	887b      	ldrh	r3, [r7, #2]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
 8002b14:	e001      	b.n	8002b1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b16:	2300      	movs	r3, #0
 8002b18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	807b      	strh	r3, [r7, #2]
 8002b34:	4613      	mov	r3, r2
 8002b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b38:	787b      	ldrb	r3, [r7, #1]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b3e:	887a      	ldrh	r2, [r7, #2]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b44:	e002      	b.n	8002b4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b46:	887a      	ldrh	r2, [r7, #2]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b62:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d006      	beq.n	8002b7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b6e:	4a05      	ldr	r2, [pc, #20]	; (8002b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b70:	88fb      	ldrh	r3, [r7, #6]
 8002b72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fa05 	bl	8001f86 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40010400 	.word	0x40010400

08002b88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e081      	b.n	8002c9e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fe fbc4 	bl	800133c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2224      	movs	r2, #36	; 0x24
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0201 	bic.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bd8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002be8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d107      	bne.n	8002c02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	e006      	b.n	8002c10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d104      	bne.n	8002c22 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6812      	ldr	r2, [r2, #0]
 8002c2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691a      	ldr	r2, [r3, #16]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69d9      	ldr	r1, [r3, #28]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1a      	ldr	r2, [r3, #32]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b20      	cmp	r3, #32
 8002cba:	d138      	bne.n	8002d2e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e032      	b.n	8002d30 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2224      	movs	r2, #36	; 0x24
 8002cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0201 	bic.w	r2, r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cf8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6819      	ldr	r1, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 0201 	orr.w	r2, r2, #1
 8002d18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	e000      	b.n	8002d30 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d2e:	2302      	movs	r3, #2
  }
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b20      	cmp	r3, #32
 8002d50:	d139      	bne.n	8002dc6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e033      	b.n	8002dc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2224      	movs	r2, #36	; 0x24
 8002d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0201 	bic.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d8e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	021b      	lsls	r3, r3, #8
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0201 	orr.w	r2, r2, #1
 8002db0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	e000      	b.n	8002dc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002dc6:	2302      	movs	r3, #2
  }
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd6:	b08f      	sub	sp, #60	; 0x3c
 8002dd8:	af0a      	add	r7, sp, #40	; 0x28
 8002dda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e116      	b.n	8003014 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d106      	bne.n	8002e06 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7fe fc51 	bl	80016a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2203      	movs	r2, #3
 8002e0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d102      	bne.n	8002e20 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f004 fe11 	bl	8007a4c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	687e      	ldr	r6, [r7, #4]
 8002e32:	466d      	mov	r5, sp
 8002e34:	f106 0410 	add.w	r4, r6, #16
 8002e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e44:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e48:	1d33      	adds	r3, r6, #4
 8002e4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e4c:	6838      	ldr	r0, [r7, #0]
 8002e4e:	f004 fdd1 	bl	80079f4 <USB_CoreInit>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0d7      	b.n	8003014 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2100      	movs	r1, #0
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f004 fdff 	bl	8007a6e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e70:	2300      	movs	r3, #0
 8002e72:	73fb      	strb	r3, [r7, #15]
 8002e74:	e04a      	b.n	8002f0c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e76:	7bfa      	ldrb	r2, [r7, #15]
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4413      	add	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	333d      	adds	r3, #61	; 0x3d
 8002e86:	2201      	movs	r2, #1
 8002e88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e8a:	7bfa      	ldrb	r2, [r7, #15]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	333c      	adds	r3, #60	; 0x3c
 8002e9a:	7bfa      	ldrb	r2, [r7, #15]
 8002e9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	b298      	uxth	r0, r3
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	3344      	adds	r3, #68	; 0x44
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002eb6:	7bfa      	ldrb	r2, [r7, #15]
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	3340      	adds	r3, #64	; 0x40
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002eca:	7bfa      	ldrb	r2, [r7, #15]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	3348      	adds	r3, #72	; 0x48
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ede:	7bfa      	ldrb	r2, [r7, #15]
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	334c      	adds	r3, #76	; 0x4c
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ef2:	7bfa      	ldrb	r2, [r7, #15]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	4413      	add	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	3354      	adds	r3, #84	; 0x54
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d3af      	bcc.n	8002e76 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f16:	2300      	movs	r3, #0
 8002f18:	73fb      	strb	r3, [r7, #15]
 8002f1a:	e044      	b.n	8002fa6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f1c:	7bfa      	ldrb	r2, [r7, #15]
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002f2e:	2200      	movs	r2, #0
 8002f30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f32:	7bfa      	ldrb	r2, [r7, #15]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f44:	7bfa      	ldrb	r2, [r7, #15]
 8002f46:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f48:	7bfa      	ldrb	r2, [r7, #15]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f5e:	7bfa      	ldrb	r2, [r7, #15]
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f74:	7bfa      	ldrb	r2, [r7, #15]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f8a:	7bfa      	ldrb	r2, [r7, #15]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	73fb      	strb	r3, [r7, #15]
 8002fa6:	7bfa      	ldrb	r2, [r7, #15]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d3b5      	bcc.n	8002f1c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	603b      	str	r3, [r7, #0]
 8002fb6:	687e      	ldr	r6, [r7, #4]
 8002fb8:	466d      	mov	r5, sp
 8002fba:	f106 0410 	add.w	r4, r6, #16
 8002fbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fca:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fce:	1d33      	adds	r3, r6, #4
 8002fd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fd2:	6838      	ldr	r0, [r7, #0]
 8002fd4:	f004 fd98 	bl	8007b08 <USB_DevInit>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d005      	beq.n	8002fea <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e014      	b.n	8003014 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d102      	bne.n	8003008 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f80a 	bl	800301c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f004 ff44 	bl	8007e9a <USB_DevDisconnect>

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800301c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800304e:	f043 0303 	orr.w	r3, r3, #3
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a04      	ldr	r2, [pc, #16]	; (8003080 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800306e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003072:	6013      	str	r3, [r2, #0]
}
 8003074:	bf00      	nop
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40007000 	.word	0x40007000

08003084 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003088:	4b04      	ldr	r3, [pc, #16]	; (800309c <HAL_PWREx_GetVoltageRange+0x18>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003090:	4618      	mov	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40007000 	.word	0x40007000

080030a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ae:	d130      	bne.n	8003112 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80030b0:	4b23      	ldr	r3, [pc, #140]	; (8003140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030bc:	d038      	beq.n	8003130 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030be:	4b20      	ldr	r3, [pc, #128]	; (8003140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030c6:	4a1e      	ldr	r2, [pc, #120]	; (8003140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030ce:	4b1d      	ldr	r3, [pc, #116]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2232      	movs	r2, #50	; 0x32
 80030d4:	fb02 f303 	mul.w	r3, r2, r3
 80030d8:	4a1b      	ldr	r2, [pc, #108]	; (8003148 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030da:	fba2 2303 	umull	r2, r3, r2, r3
 80030de:	0c9b      	lsrs	r3, r3, #18
 80030e0:	3301      	adds	r3, #1
 80030e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030e4:	e002      	b.n	80030ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030ec:	4b14      	ldr	r3, [pc, #80]	; (8003140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f8:	d102      	bne.n	8003100 <HAL_PWREx_ControlVoltageScaling+0x60>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1f2      	bne.n	80030e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003100:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800310c:	d110      	bne.n	8003130 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e00f      	b.n	8003132 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003112:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800311a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800311e:	d007      	beq.n	8003130 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003120:	4b07      	ldr	r3, [pc, #28]	; (8003140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003128:	4a05      	ldr	r2, [pc, #20]	; (8003140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800312a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800312e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40007000 	.word	0x40007000
 8003144:	20000000 	.word	0x20000000
 8003148:	431bde83 	.word	0x431bde83

0800314c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003150:	4b05      	ldr	r3, [pc, #20]	; (8003168 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	4a04      	ldr	r2, [pc, #16]	; (8003168 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003156:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800315a:	6053      	str	r3, [r2, #4]
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40007000 	.word	0x40007000

0800316c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af02      	add	r7, sp, #8
 8003172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003174:	f7fe ff78 	bl	8002068 <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e063      	b.n	800324c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10b      	bne.n	80031a8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7fe f92d 	bl	80013f8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800319e:	f241 3188 	movw	r1, #5000	; 0x1388
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f858 	bl	8003258 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	021a      	lsls	r2, r3, #8
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	2120      	movs	r1, #32
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f850 	bl	8003274 <QSPI_WaitFlagStateUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80031d8:	7afb      	ldrb	r3, [r7, #11]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d131      	bne.n	8003242 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80031e8:	f023 0310 	bic.w	r3, r3, #16
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6852      	ldr	r2, [r2, #4]
 80031f0:	0611      	lsls	r1, r2, #24
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	68d2      	ldr	r2, [r2, #12]
 80031f6:	4311      	orrs	r1, r2
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	430b      	orrs	r3, r1
 80031fe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	4b13      	ldr	r3, [pc, #76]	; (8003254 <HAL_QSPI_Init+0xe8>)
 8003208:	4013      	ands	r3, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6912      	ldr	r2, [r2, #16]
 800320e:	0411      	lsls	r1, r2, #16
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6952      	ldr	r2, [r2, #20]
 8003214:	4311      	orrs	r1, r2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6992      	ldr	r2, [r2, #24]
 800321a:	4311      	orrs	r1, r2
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6812      	ldr	r2, [r2, #0]
 8003220:	430b      	orrs	r3, r1
 8003222:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0201 	orr.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800324a:	7afb      	ldrb	r3, [r7, #11]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	ffe0f8fe 	.word	0xffe0f8fe

08003258 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	4613      	mov	r3, r2
 8003282:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003284:	e01a      	b.n	80032bc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328c:	d016      	beq.n	80032bc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800328e:	f7fe feeb 	bl	8002068 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	429a      	cmp	r2, r3
 800329c:	d302      	bcc.n	80032a4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10b      	bne.n	80032bc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2204      	movs	r2, #4
 80032a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b0:	f043 0201 	orr.w	r2, r3, #1
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e00e      	b.n	80032da <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	4013      	ands	r3, r2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	bf14      	ite	ne
 80032ca:	2301      	movne	r3, #1
 80032cc:	2300      	moveq	r3, #0
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	461a      	mov	r2, r3
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d1d6      	bne.n	8003286 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b088      	sub	sp, #32
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e3ca      	b.n	8003a8c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032f6:	4b97      	ldr	r3, [pc, #604]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003300:	4b94      	ldr	r3, [pc, #592]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0310 	and.w	r3, r3, #16
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 80e4 	beq.w	80034e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d007      	beq.n	800332e <HAL_RCC_OscConfig+0x4a>
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	2b0c      	cmp	r3, #12
 8003322:	f040 808b 	bne.w	800343c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b01      	cmp	r3, #1
 800332a:	f040 8087 	bne.w	800343c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800332e:	4b89      	ldr	r3, [pc, #548]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d005      	beq.n	8003346 <HAL_RCC_OscConfig+0x62>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e3a2      	b.n	8003a8c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1a      	ldr	r2, [r3, #32]
 800334a:	4b82      	ldr	r3, [pc, #520]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d004      	beq.n	8003360 <HAL_RCC_OscConfig+0x7c>
 8003356:	4b7f      	ldr	r3, [pc, #508]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800335e:	e005      	b.n	800336c <HAL_RCC_OscConfig+0x88>
 8003360:	4b7c      	ldr	r3, [pc, #496]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 8003362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003366:	091b      	lsrs	r3, r3, #4
 8003368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800336c:	4293      	cmp	r3, r2
 800336e:	d223      	bcs.n	80033b8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fd87 	bl	8003e88 <RCC_SetFlashLatencyFromMSIRange>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e383      	b.n	8003a8c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003384:	4b73      	ldr	r3, [pc, #460]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a72      	ldr	r2, [pc, #456]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 800338a:	f043 0308 	orr.w	r3, r3, #8
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	4b70      	ldr	r3, [pc, #448]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	496d      	ldr	r1, [pc, #436]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033a2:	4b6c      	ldr	r3, [pc, #432]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	021b      	lsls	r3, r3, #8
 80033b0:	4968      	ldr	r1, [pc, #416]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	604b      	str	r3, [r1, #4]
 80033b6:	e025      	b.n	8003404 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033b8:	4b66      	ldr	r3, [pc, #408]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a65      	ldr	r2, [pc, #404]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 80033be:	f043 0308 	orr.w	r3, r3, #8
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	4b63      	ldr	r3, [pc, #396]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	4960      	ldr	r1, [pc, #384]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033d6:	4b5f      	ldr	r3, [pc, #380]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	495b      	ldr	r1, [pc, #364]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d109      	bne.n	8003404 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 fd47 	bl	8003e88 <RCC_SetFlashLatencyFromMSIRange>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e343      	b.n	8003a8c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003404:	f000 fc4a 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 8003408:	4602      	mov	r2, r0
 800340a:	4b52      	ldr	r3, [pc, #328]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	091b      	lsrs	r3, r3, #4
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	4950      	ldr	r1, [pc, #320]	; (8003558 <HAL_RCC_OscConfig+0x274>)
 8003416:	5ccb      	ldrb	r3, [r1, r3]
 8003418:	f003 031f 	and.w	r3, r3, #31
 800341c:	fa22 f303 	lsr.w	r3, r2, r3
 8003420:	4a4e      	ldr	r2, [pc, #312]	; (800355c <HAL_RCC_OscConfig+0x278>)
 8003422:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003424:	4b4e      	ldr	r3, [pc, #312]	; (8003560 <HAL_RCC_OscConfig+0x27c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7fe f9d9 	bl	80017e0 <HAL_InitTick>
 800342e:	4603      	mov	r3, r0
 8003430:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003432:	7bfb      	ldrb	r3, [r7, #15]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d052      	beq.n	80034de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	e327      	b.n	8003a8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d032      	beq.n	80034aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003444:	4b43      	ldr	r3, [pc, #268]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a42      	ldr	r2, [pc, #264]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003450:	f7fe fe0a 	bl	8002068 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003458:	f7fe fe06 	bl	8002068 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e310      	b.n	8003a8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800346a:	4b3a      	ldr	r3, [pc, #232]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003476:	4b37      	ldr	r3, [pc, #220]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a36      	ldr	r2, [pc, #216]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 800347c:	f043 0308 	orr.w	r3, r3, #8
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	4b34      	ldr	r3, [pc, #208]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	4931      	ldr	r1, [pc, #196]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 8003490:	4313      	orrs	r3, r2
 8003492:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003494:	4b2f      	ldr	r3, [pc, #188]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	021b      	lsls	r3, r3, #8
 80034a2:	492c      	ldr	r1, [pc, #176]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	604b      	str	r3, [r1, #4]
 80034a8:	e01a      	b.n	80034e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034aa:	4b2a      	ldr	r3, [pc, #168]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a29      	ldr	r2, [pc, #164]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 80034b0:	f023 0301 	bic.w	r3, r3, #1
 80034b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034b6:	f7fe fdd7 	bl	8002068 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034be:	f7fe fdd3 	bl	8002068 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e2dd      	b.n	8003a8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034d0:	4b20      	ldr	r3, [pc, #128]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1f0      	bne.n	80034be <HAL_RCC_OscConfig+0x1da>
 80034dc:	e000      	b.n	80034e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d074      	beq.n	80035d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d005      	beq.n	80034fe <HAL_RCC_OscConfig+0x21a>
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	2b0c      	cmp	r3, #12
 80034f6:	d10e      	bne.n	8003516 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d10b      	bne.n	8003516 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034fe:	4b15      	ldr	r3, [pc, #84]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d064      	beq.n	80035d4 <HAL_RCC_OscConfig+0x2f0>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d160      	bne.n	80035d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e2ba      	b.n	8003a8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351e:	d106      	bne.n	800352e <HAL_RCC_OscConfig+0x24a>
 8003520:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a0b      	ldr	r2, [pc, #44]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 8003526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800352a:	6013      	str	r3, [r2, #0]
 800352c:	e026      	b.n	800357c <HAL_RCC_OscConfig+0x298>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003536:	d115      	bne.n	8003564 <HAL_RCC_OscConfig+0x280>
 8003538:	4b06      	ldr	r3, [pc, #24]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a05      	ldr	r2, [pc, #20]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 800353e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	4b03      	ldr	r3, [pc, #12]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a02      	ldr	r2, [pc, #8]	; (8003554 <HAL_RCC_OscConfig+0x270>)
 800354a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	e014      	b.n	800357c <HAL_RCC_OscConfig+0x298>
 8003552:	bf00      	nop
 8003554:	40021000 	.word	0x40021000
 8003558:	0800eda0 	.word	0x0800eda0
 800355c:	20000000 	.word	0x20000000
 8003560:	20000004 	.word	0x20000004
 8003564:	4ba0      	ldr	r3, [pc, #640]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a9f      	ldr	r2, [pc, #636]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 800356a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	4b9d      	ldr	r3, [pc, #628]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a9c      	ldr	r2, [pc, #624]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 8003576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800357a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d013      	beq.n	80035ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003584:	f7fe fd70 	bl	8002068 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800358c:	f7fe fd6c 	bl	8002068 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b64      	cmp	r3, #100	; 0x64
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e276      	b.n	8003a8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800359e:	4b92      	ldr	r3, [pc, #584]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f0      	beq.n	800358c <HAL_RCC_OscConfig+0x2a8>
 80035aa:	e014      	b.n	80035d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ac:	f7fe fd5c 	bl	8002068 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b4:	f7fe fd58 	bl	8002068 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b64      	cmp	r3, #100	; 0x64
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e262      	b.n	8003a8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035c6:	4b88      	ldr	r3, [pc, #544]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x2d0>
 80035d2:	e000      	b.n	80035d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d060      	beq.n	80036a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d005      	beq.n	80035f4 <HAL_RCC_OscConfig+0x310>
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	2b0c      	cmp	r3, #12
 80035ec:	d119      	bne.n	8003622 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d116      	bne.n	8003622 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035f4:	4b7c      	ldr	r3, [pc, #496]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_RCC_OscConfig+0x328>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e23f      	b.n	8003a8c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800360c:	4b76      	ldr	r3, [pc, #472]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	061b      	lsls	r3, r3, #24
 800361a:	4973      	ldr	r1, [pc, #460]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 800361c:	4313      	orrs	r3, r2
 800361e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003620:	e040      	b.n	80036a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d023      	beq.n	8003672 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800362a:	4b6f      	ldr	r3, [pc, #444]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a6e      	ldr	r2, [pc, #440]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 8003630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003636:	f7fe fd17 	bl	8002068 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800363e:	f7fe fd13 	bl	8002068 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e21d      	b.n	8003a8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003650:	4b65      	ldr	r3, [pc, #404]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0f0      	beq.n	800363e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365c:	4b62      	ldr	r3, [pc, #392]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	061b      	lsls	r3, r3, #24
 800366a:	495f      	ldr	r1, [pc, #380]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 800366c:	4313      	orrs	r3, r2
 800366e:	604b      	str	r3, [r1, #4]
 8003670:	e018      	b.n	80036a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003672:	4b5d      	ldr	r3, [pc, #372]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a5c      	ldr	r2, [pc, #368]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 8003678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800367c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367e:	f7fe fcf3 	bl	8002068 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003686:	f7fe fcef 	bl	8002068 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e1f9      	b.n	8003a8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003698:	4b53      	ldr	r3, [pc, #332]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1f0      	bne.n	8003686 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d03c      	beq.n	800372a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d01c      	beq.n	80036f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036b8:	4b4b      	ldr	r3, [pc, #300]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 80036ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036be:	4a4a      	ldr	r2, [pc, #296]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c8:	f7fe fcce 	bl	8002068 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d0:	f7fe fcca 	bl	8002068 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e1d4      	b.n	8003a8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036e2:	4b41      	ldr	r3, [pc, #260]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 80036e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0ef      	beq.n	80036d0 <HAL_RCC_OscConfig+0x3ec>
 80036f0:	e01b      	b.n	800372a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036f2:	4b3d      	ldr	r3, [pc, #244]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 80036f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036f8:	4a3b      	ldr	r2, [pc, #236]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 80036fa:	f023 0301 	bic.w	r3, r3, #1
 80036fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003702:	f7fe fcb1 	bl	8002068 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800370a:	f7fe fcad 	bl	8002068 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e1b7      	b.n	8003a8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800371c:	4b32      	ldr	r3, [pc, #200]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 800371e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1ef      	bne.n	800370a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0304 	and.w	r3, r3, #4
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 80a6 	beq.w	8003884 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003738:	2300      	movs	r3, #0
 800373a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800373c:	4b2a      	ldr	r3, [pc, #168]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 800373e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10d      	bne.n	8003764 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003748:	4b27      	ldr	r3, [pc, #156]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 800374a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374c:	4a26      	ldr	r2, [pc, #152]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 800374e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003752:	6593      	str	r3, [r2, #88]	; 0x58
 8003754:	4b24      	ldr	r3, [pc, #144]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 8003756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003760:	2301      	movs	r3, #1
 8003762:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003764:	4b21      	ldr	r3, [pc, #132]	; (80037ec <HAL_RCC_OscConfig+0x508>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376c:	2b00      	cmp	r3, #0
 800376e:	d118      	bne.n	80037a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003770:	4b1e      	ldr	r3, [pc, #120]	; (80037ec <HAL_RCC_OscConfig+0x508>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a1d      	ldr	r2, [pc, #116]	; (80037ec <HAL_RCC_OscConfig+0x508>)
 8003776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800377a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800377c:	f7fe fc74 	bl	8002068 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003784:	f7fe fc70 	bl	8002068 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e17a      	b.n	8003a8c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003796:	4b15      	ldr	r3, [pc, #84]	; (80037ec <HAL_RCC_OscConfig+0x508>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d108      	bne.n	80037bc <HAL_RCC_OscConfig+0x4d8>
 80037aa:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 80037ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b0:	4a0d      	ldr	r2, [pc, #52]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037ba:	e029      	b.n	8003810 <HAL_RCC_OscConfig+0x52c>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b05      	cmp	r3, #5
 80037c2:	d115      	bne.n	80037f0 <HAL_RCC_OscConfig+0x50c>
 80037c4:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 80037c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ca:	4a07      	ldr	r2, [pc, #28]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 80037cc:	f043 0304 	orr.w	r3, r3, #4
 80037d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037d4:	4b04      	ldr	r3, [pc, #16]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037da:	4a03      	ldr	r2, [pc, #12]	; (80037e8 <HAL_RCC_OscConfig+0x504>)
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037e4:	e014      	b.n	8003810 <HAL_RCC_OscConfig+0x52c>
 80037e6:	bf00      	nop
 80037e8:	40021000 	.word	0x40021000
 80037ec:	40007000 	.word	0x40007000
 80037f0:	4b9c      	ldr	r3, [pc, #624]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f6:	4a9b      	ldr	r2, [pc, #620]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 80037f8:	f023 0301 	bic.w	r3, r3, #1
 80037fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003800:	4b98      	ldr	r3, [pc, #608]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003806:	4a97      	ldr	r2, [pc, #604]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 8003808:	f023 0304 	bic.w	r3, r3, #4
 800380c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d016      	beq.n	8003846 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003818:	f7fe fc26 	bl	8002068 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800381e:	e00a      	b.n	8003836 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003820:	f7fe fc22 	bl	8002068 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	f241 3288 	movw	r2, #5000	; 0x1388
 800382e:	4293      	cmp	r3, r2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e12a      	b.n	8003a8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003836:	4b8b      	ldr	r3, [pc, #556]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 8003838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0ed      	beq.n	8003820 <HAL_RCC_OscConfig+0x53c>
 8003844:	e015      	b.n	8003872 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003846:	f7fe fc0f 	bl	8002068 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800384c:	e00a      	b.n	8003864 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384e:	f7fe fc0b 	bl	8002068 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	f241 3288 	movw	r2, #5000	; 0x1388
 800385c:	4293      	cmp	r3, r2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e113      	b.n	8003a8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003864:	4b7f      	ldr	r3, [pc, #508]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1ed      	bne.n	800384e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003872:	7ffb      	ldrb	r3, [r7, #31]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d105      	bne.n	8003884 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003878:	4b7a      	ldr	r3, [pc, #488]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 800387a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387c:	4a79      	ldr	r2, [pc, #484]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 800387e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003882:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 80fe 	beq.w	8003a8a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003892:	2b02      	cmp	r3, #2
 8003894:	f040 80d0 	bne.w	8003a38 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003898:	4b72      	ldr	r3, [pc, #456]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f003 0203 	and.w	r2, r3, #3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d130      	bne.n	800390e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	3b01      	subs	r3, #1
 80038b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d127      	bne.n	800390e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d11f      	bne.n	800390e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038d8:	2a07      	cmp	r2, #7
 80038da:	bf14      	ite	ne
 80038dc:	2201      	movne	r2, #1
 80038de:	2200      	moveq	r2, #0
 80038e0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d113      	bne.n	800390e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f0:	085b      	lsrs	r3, r3, #1
 80038f2:	3b01      	subs	r3, #1
 80038f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d109      	bne.n	800390e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	085b      	lsrs	r3, r3, #1
 8003906:	3b01      	subs	r3, #1
 8003908:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800390a:	429a      	cmp	r2, r3
 800390c:	d06e      	beq.n	80039ec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	2b0c      	cmp	r3, #12
 8003912:	d069      	beq.n	80039e8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003914:	4b53      	ldr	r3, [pc, #332]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d105      	bne.n	800392c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003920:	4b50      	ldr	r3, [pc, #320]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0ad      	b.n	8003a8c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003930:	4b4c      	ldr	r3, [pc, #304]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a4b      	ldr	r2, [pc, #300]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 8003936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800393a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800393c:	f7fe fb94 	bl	8002068 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003944:	f7fe fb90 	bl	8002068 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e09a      	b.n	8003a8c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003956:	4b43      	ldr	r3, [pc, #268]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003962:	4b40      	ldr	r3, [pc, #256]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	4b40      	ldr	r3, [pc, #256]	; (8003a68 <HAL_RCC_OscConfig+0x784>)
 8003968:	4013      	ands	r3, r2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003972:	3a01      	subs	r2, #1
 8003974:	0112      	lsls	r2, r2, #4
 8003976:	4311      	orrs	r1, r2
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800397c:	0212      	lsls	r2, r2, #8
 800397e:	4311      	orrs	r1, r2
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003984:	0852      	lsrs	r2, r2, #1
 8003986:	3a01      	subs	r2, #1
 8003988:	0552      	lsls	r2, r2, #21
 800398a:	4311      	orrs	r1, r2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003990:	0852      	lsrs	r2, r2, #1
 8003992:	3a01      	subs	r2, #1
 8003994:	0652      	lsls	r2, r2, #25
 8003996:	4311      	orrs	r1, r2
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800399c:	0912      	lsrs	r2, r2, #4
 800399e:	0452      	lsls	r2, r2, #17
 80039a0:	430a      	orrs	r2, r1
 80039a2:	4930      	ldr	r1, [pc, #192]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039a8:	4b2e      	ldr	r3, [pc, #184]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a2d      	ldr	r2, [pc, #180]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 80039ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039b4:	4b2b      	ldr	r3, [pc, #172]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	4a2a      	ldr	r2, [pc, #168]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 80039ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039c0:	f7fe fb52 	bl	8002068 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c8:	f7fe fb4e 	bl	8002068 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e058      	b.n	8003a8c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039da:	4b22      	ldr	r3, [pc, #136]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039e6:	e050      	b.n	8003a8a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e04f      	b.n	8003a8c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ec:	4b1d      	ldr	r3, [pc, #116]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d148      	bne.n	8003a8a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039f8:	4b1a      	ldr	r3, [pc, #104]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a19      	ldr	r2, [pc, #100]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 80039fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a04:	4b17      	ldr	r3, [pc, #92]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4a16      	ldr	r2, [pc, #88]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 8003a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a10:	f7fe fb2a 	bl	8002068 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a18:	f7fe fb26 	bl	8002068 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e030      	b.n	8003a8c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a2a:	4b0e      	ldr	r3, [pc, #56]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCC_OscConfig+0x734>
 8003a36:	e028      	b.n	8003a8a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b0c      	cmp	r3, #12
 8003a3c:	d023      	beq.n	8003a86 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a3e:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a08      	ldr	r2, [pc, #32]	; (8003a64 <HAL_RCC_OscConfig+0x780>)
 8003a44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4a:	f7fe fb0d 	bl	8002068 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a50:	e00c      	b.n	8003a6c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a52:	f7fe fb09 	bl	8002068 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d905      	bls.n	8003a6c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e013      	b.n	8003a8c <HAL_RCC_OscConfig+0x7a8>
 8003a64:	40021000 	.word	0x40021000
 8003a68:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a6c:	4b09      	ldr	r3, [pc, #36]	; (8003a94 <HAL_RCC_OscConfig+0x7b0>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1ec      	bne.n	8003a52 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a78:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <HAL_RCC_OscConfig+0x7b0>)
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	4905      	ldr	r1, [pc, #20]	; (8003a94 <HAL_RCC_OscConfig+0x7b0>)
 8003a7e:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <HAL_RCC_OscConfig+0x7b4>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	60cb      	str	r3, [r1, #12]
 8003a84:	e001      	b.n	8003a8a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3720      	adds	r7, #32
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40021000 	.word	0x40021000
 8003a98:	feeefffc 	.word	0xfeeefffc

08003a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e0e7      	b.n	8003c80 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ab0:	4b75      	ldr	r3, [pc, #468]	; (8003c88 <HAL_RCC_ClockConfig+0x1ec>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d910      	bls.n	8003ae0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003abe:	4b72      	ldr	r3, [pc, #456]	; (8003c88 <HAL_RCC_ClockConfig+0x1ec>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f023 0207 	bic.w	r2, r3, #7
 8003ac6:	4970      	ldr	r1, [pc, #448]	; (8003c88 <HAL_RCC_ClockConfig+0x1ec>)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ace:	4b6e      	ldr	r3, [pc, #440]	; (8003c88 <HAL_RCC_ClockConfig+0x1ec>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d001      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e0cf      	b.n	8003c80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d010      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	4b66      	ldr	r3, [pc, #408]	; (8003c8c <HAL_RCC_ClockConfig+0x1f0>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d908      	bls.n	8003b0e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003afc:	4b63      	ldr	r3, [pc, #396]	; (8003c8c <HAL_RCC_ClockConfig+0x1f0>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	4960      	ldr	r1, [pc, #384]	; (8003c8c <HAL_RCC_ClockConfig+0x1f0>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d04c      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d107      	bne.n	8003b32 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b22:	4b5a      	ldr	r3, [pc, #360]	; (8003c8c <HAL_RCC_ClockConfig+0x1f0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d121      	bne.n	8003b72 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e0a6      	b.n	8003c80 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d107      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b3a:	4b54      	ldr	r3, [pc, #336]	; (8003c8c <HAL_RCC_ClockConfig+0x1f0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d115      	bne.n	8003b72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e09a      	b.n	8003c80 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d107      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b52:	4b4e      	ldr	r3, [pc, #312]	; (8003c8c <HAL_RCC_ClockConfig+0x1f0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d109      	bne.n	8003b72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e08e      	b.n	8003c80 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b62:	4b4a      	ldr	r3, [pc, #296]	; (8003c8c <HAL_RCC_ClockConfig+0x1f0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e086      	b.n	8003c80 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b72:	4b46      	ldr	r3, [pc, #280]	; (8003c8c <HAL_RCC_ClockConfig+0x1f0>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f023 0203 	bic.w	r2, r3, #3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	4943      	ldr	r1, [pc, #268]	; (8003c8c <HAL_RCC_ClockConfig+0x1f0>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b84:	f7fe fa70 	bl	8002068 <HAL_GetTick>
 8003b88:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8a:	e00a      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b8c:	f7fe fa6c 	bl	8002068 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e06e      	b.n	8003c80 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba2:	4b3a      	ldr	r3, [pc, #232]	; (8003c8c <HAL_RCC_ClockConfig+0x1f0>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 020c 	and.w	r2, r3, #12
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d1eb      	bne.n	8003b8c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d010      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	4b31      	ldr	r3, [pc, #196]	; (8003c8c <HAL_RCC_ClockConfig+0x1f0>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d208      	bcs.n	8003be2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd0:	4b2e      	ldr	r3, [pc, #184]	; (8003c8c <HAL_RCC_ClockConfig+0x1f0>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	492b      	ldr	r1, [pc, #172]	; (8003c8c <HAL_RCC_ClockConfig+0x1f0>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003be2:	4b29      	ldr	r3, [pc, #164]	; (8003c88 <HAL_RCC_ClockConfig+0x1ec>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d210      	bcs.n	8003c12 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf0:	4b25      	ldr	r3, [pc, #148]	; (8003c88 <HAL_RCC_ClockConfig+0x1ec>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f023 0207 	bic.w	r2, r3, #7
 8003bf8:	4923      	ldr	r1, [pc, #140]	; (8003c88 <HAL_RCC_ClockConfig+0x1ec>)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c00:	4b21      	ldr	r3, [pc, #132]	; (8003c88 <HAL_RCC_ClockConfig+0x1ec>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d001      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e036      	b.n	8003c80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d008      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c1e:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <HAL_RCC_ClockConfig+0x1f0>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	4918      	ldr	r1, [pc, #96]	; (8003c8c <HAL_RCC_ClockConfig+0x1f0>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d009      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c3c:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <HAL_RCC_ClockConfig+0x1f0>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	4910      	ldr	r1, [pc, #64]	; (8003c8c <HAL_RCC_ClockConfig+0x1f0>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c50:	f000 f824 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 8003c54:	4602      	mov	r2, r0
 8003c56:	4b0d      	ldr	r3, [pc, #52]	; (8003c8c <HAL_RCC_ClockConfig+0x1f0>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	091b      	lsrs	r3, r3, #4
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	490b      	ldr	r1, [pc, #44]	; (8003c90 <HAL_RCC_ClockConfig+0x1f4>)
 8003c62:	5ccb      	ldrb	r3, [r1, r3]
 8003c64:	f003 031f 	and.w	r3, r3, #31
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6c:	4a09      	ldr	r2, [pc, #36]	; (8003c94 <HAL_RCC_ClockConfig+0x1f8>)
 8003c6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c70:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <HAL_RCC_ClockConfig+0x1fc>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fd fdb3 	bl	80017e0 <HAL_InitTick>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c7e:	7afb      	ldrb	r3, [r7, #11]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40022000 	.word	0x40022000
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	0800eda0 	.word	0x0800eda0
 8003c94:	20000000 	.word	0x20000000
 8003c98:	20000004 	.word	0x20000004

08003c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b089      	sub	sp, #36	; 0x24
 8003ca0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003caa:	4b3e      	ldr	r3, [pc, #248]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 030c 	and.w	r3, r3, #12
 8003cb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cb4:	4b3b      	ldr	r3, [pc, #236]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f003 0303 	and.w	r3, r3, #3
 8003cbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x34>
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	2b0c      	cmp	r3, #12
 8003cc8:	d121      	bne.n	8003d0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d11e      	bne.n	8003d0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cd0:	4b34      	ldr	r3, [pc, #208]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d107      	bne.n	8003cec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cdc:	4b31      	ldr	r3, [pc, #196]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ce2:	0a1b      	lsrs	r3, r3, #8
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	e005      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cec:	4b2d      	ldr	r3, [pc, #180]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	091b      	lsrs	r3, r3, #4
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003cf8:	4a2b      	ldr	r2, [pc, #172]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10d      	bne.n	8003d24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d0c:	e00a      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d102      	bne.n	8003d1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d14:	4b25      	ldr	r3, [pc, #148]	; (8003dac <HAL_RCC_GetSysClockFreq+0x110>)
 8003d16:	61bb      	str	r3, [r7, #24]
 8003d18:	e004      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d101      	bne.n	8003d24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d20:	4b23      	ldr	r3, [pc, #140]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	2b0c      	cmp	r3, #12
 8003d28:	d134      	bne.n	8003d94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d2a:	4b1e      	ldr	r3, [pc, #120]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d003      	beq.n	8003d42 <HAL_RCC_GetSysClockFreq+0xa6>
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d003      	beq.n	8003d48 <HAL_RCC_GetSysClockFreq+0xac>
 8003d40:	e005      	b.n	8003d4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d42:	4b1a      	ldr	r3, [pc, #104]	; (8003dac <HAL_RCC_GetSysClockFreq+0x110>)
 8003d44:	617b      	str	r3, [r7, #20]
      break;
 8003d46:	e005      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d48:	4b19      	ldr	r3, [pc, #100]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d4a:	617b      	str	r3, [r7, #20]
      break;
 8003d4c:	e002      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	617b      	str	r3, [r7, #20]
      break;
 8003d52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d54:	4b13      	ldr	r3, [pc, #76]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	3301      	adds	r3, #1
 8003d60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d62:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	0a1b      	lsrs	r3, r3, #8
 8003d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	fb03 f202 	mul.w	r2, r3, r2
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d7a:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	0e5b      	lsrs	r3, r3, #25
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	3301      	adds	r3, #1
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d94:	69bb      	ldr	r3, [r7, #24]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3724      	adds	r7, #36	; 0x24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40021000 	.word	0x40021000
 8003da8:	0800edb8 	.word	0x0800edb8
 8003dac:	00f42400 	.word	0x00f42400
 8003db0:	007a1200 	.word	0x007a1200

08003db4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db8:	4b03      	ldr	r3, [pc, #12]	; (8003dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dba:	681b      	ldr	r3, [r3, #0]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	20000000 	.word	0x20000000

08003dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003dd0:	f7ff fff0 	bl	8003db4 <HAL_RCC_GetHCLKFreq>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	0a1b      	lsrs	r3, r3, #8
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	4904      	ldr	r1, [pc, #16]	; (8003df4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003de2:	5ccb      	ldrb	r3, [r1, r3]
 8003de4:	f003 031f 	and.w	r3, r3, #31
 8003de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40021000 	.word	0x40021000
 8003df4:	0800edb0 	.word	0x0800edb0

08003df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003dfc:	f7ff ffda 	bl	8003db4 <HAL_RCC_GetHCLKFreq>
 8003e00:	4602      	mov	r2, r0
 8003e02:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	0adb      	lsrs	r3, r3, #11
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	4904      	ldr	r1, [pc, #16]	; (8003e20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e0e:	5ccb      	ldrb	r3, [r1, r3]
 8003e10:	f003 031f 	and.w	r3, r3, #31
 8003e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	0800edb0 	.word	0x0800edb0

08003e24 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	220f      	movs	r2, #15
 8003e32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003e34:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <HAL_RCC_GetClockConfig+0x5c>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 0203 	and.w	r2, r3, #3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003e40:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <HAL_RCC_GetClockConfig+0x5c>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003e4c:	4b0c      	ldr	r3, [pc, #48]	; (8003e80 <HAL_RCC_GetClockConfig+0x5c>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003e58:	4b09      	ldr	r3, [pc, #36]	; (8003e80 <HAL_RCC_GetClockConfig+0x5c>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	08db      	lsrs	r3, r3, #3
 8003e5e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003e66:	4b07      	ldr	r3, [pc, #28]	; (8003e84 <HAL_RCC_GetClockConfig+0x60>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0207 	and.w	r2, r3, #7
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	601a      	str	r2, [r3, #0]
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40021000 	.word	0x40021000
 8003e84:	40022000 	.word	0x40022000

08003e88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e90:	2300      	movs	r3, #0
 8003e92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e94:	4b2a      	ldr	r3, [pc, #168]	; (8003f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ea0:	f7ff f8f0 	bl	8003084 <HAL_PWREx_GetVoltageRange>
 8003ea4:	6178      	str	r0, [r7, #20]
 8003ea6:	e014      	b.n	8003ed2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ea8:	4b25      	ldr	r3, [pc, #148]	; (8003f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eac:	4a24      	ldr	r2, [pc, #144]	; (8003f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	6593      	str	r3, [r2, #88]	; 0x58
 8003eb4:	4b22      	ldr	r3, [pc, #136]	; (8003f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ec0:	f7ff f8e0 	bl	8003084 <HAL_PWREx_GetVoltageRange>
 8003ec4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ec6:	4b1e      	ldr	r3, [pc, #120]	; (8003f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eca:	4a1d      	ldr	r2, [pc, #116]	; (8003f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed8:	d10b      	bne.n	8003ef2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b80      	cmp	r3, #128	; 0x80
 8003ede:	d919      	bls.n	8003f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2ba0      	cmp	r3, #160	; 0xa0
 8003ee4:	d902      	bls.n	8003eec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	613b      	str	r3, [r7, #16]
 8003eea:	e013      	b.n	8003f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003eec:	2301      	movs	r3, #1
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	e010      	b.n	8003f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b80      	cmp	r3, #128	; 0x80
 8003ef6:	d902      	bls.n	8003efe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ef8:	2303      	movs	r3, #3
 8003efa:	613b      	str	r3, [r7, #16]
 8003efc:	e00a      	b.n	8003f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b80      	cmp	r3, #128	; 0x80
 8003f02:	d102      	bne.n	8003f0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f04:	2302      	movs	r3, #2
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	e004      	b.n	8003f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b70      	cmp	r3, #112	; 0x70
 8003f0e:	d101      	bne.n	8003f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f10:	2301      	movs	r3, #1
 8003f12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f14:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f023 0207 	bic.w	r2, r3, #7
 8003f1c:	4909      	ldr	r1, [pc, #36]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f24:	4b07      	ldr	r3, [pc, #28]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d001      	beq.n	8003f36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40021000 	.word	0x40021000
 8003f44:	40022000 	.word	0x40022000

08003f48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f50:	2300      	movs	r3, #0
 8003f52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f54:	2300      	movs	r3, #0
 8003f56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d041      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f6c:	d02a      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f6e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f72:	d824      	bhi.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f78:	d008      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f7e:	d81e      	bhi.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f88:	d010      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f8a:	e018      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f8c:	4b86      	ldr	r3, [pc, #536]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	4a85      	ldr	r2, [pc, #532]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f96:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f98:	e015      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 facb 	bl	800453c <RCCEx_PLLSAI1_Config>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003faa:	e00c      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3320      	adds	r3, #32
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fbb6 	bl	8004724 <RCCEx_PLLSAI2_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fbc:	e003      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	74fb      	strb	r3, [r7, #19]
      break;
 8003fc2:	e000      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fc6:	7cfb      	ldrb	r3, [r7, #19]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10b      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fcc:	4b76      	ldr	r3, [pc, #472]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fda:	4973      	ldr	r1, [pc, #460]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fe2:	e001      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe4:	7cfb      	ldrb	r3, [r7, #19]
 8003fe6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d041      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ff8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ffc:	d02a      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003ffe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004002:	d824      	bhi.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004004:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004008:	d008      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800400a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800400e:	d81e      	bhi.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004018:	d010      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800401a:	e018      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800401c:	4b62      	ldr	r3, [pc, #392]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	4a61      	ldr	r2, [pc, #388]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004026:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004028:	e015      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3304      	adds	r3, #4
 800402e:	2100      	movs	r1, #0
 8004030:	4618      	mov	r0, r3
 8004032:	f000 fa83 	bl	800453c <RCCEx_PLLSAI1_Config>
 8004036:	4603      	mov	r3, r0
 8004038:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800403a:	e00c      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3320      	adds	r3, #32
 8004040:	2100      	movs	r1, #0
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fb6e 	bl	8004724 <RCCEx_PLLSAI2_Config>
 8004048:	4603      	mov	r3, r0
 800404a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800404c:	e003      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	74fb      	strb	r3, [r7, #19]
      break;
 8004052:	e000      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004054:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004056:	7cfb      	ldrb	r3, [r7, #19]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10b      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800405c:	4b52      	ldr	r3, [pc, #328]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004062:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800406a:	494f      	ldr	r1, [pc, #316]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004072:	e001      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004074:	7cfb      	ldrb	r3, [r7, #19]
 8004076:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 80a0 	beq.w	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004086:	2300      	movs	r3, #0
 8004088:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800408a:	4b47      	ldr	r3, [pc, #284]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800408c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800409a:	2300      	movs	r3, #0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00d      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040a0:	4b41      	ldr	r3, [pc, #260]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a4:	4a40      	ldr	r2, [pc, #256]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040aa:	6593      	str	r3, [r2, #88]	; 0x58
 80040ac:	4b3e      	ldr	r3, [pc, #248]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b4:	60bb      	str	r3, [r7, #8]
 80040b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040b8:	2301      	movs	r3, #1
 80040ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040bc:	4b3b      	ldr	r3, [pc, #236]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a3a      	ldr	r2, [pc, #232]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040c8:	f7fd ffce 	bl	8002068 <HAL_GetTick>
 80040cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040ce:	e009      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d0:	f7fd ffca 	bl	8002068 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d902      	bls.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	74fb      	strb	r3, [r7, #19]
        break;
 80040e2:	e005      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040e4:	4b31      	ldr	r3, [pc, #196]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0ef      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80040f0:	7cfb      	ldrb	r3, [r7, #19]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d15c      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040f6:	4b2c      	ldr	r3, [pc, #176]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004100:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d01f      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	429a      	cmp	r2, r3
 8004112:	d019      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004114:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800411e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004120:	4b21      	ldr	r3, [pc, #132]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004126:	4a20      	ldr	r2, [pc, #128]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800412c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004130:	4b1d      	ldr	r3, [pc, #116]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004136:	4a1c      	ldr	r2, [pc, #112]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800413c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004140:	4a19      	ldr	r2, [pc, #100]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d016      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004152:	f7fd ff89 	bl	8002068 <HAL_GetTick>
 8004156:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004158:	e00b      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415a:	f7fd ff85 	bl	8002068 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	f241 3288 	movw	r2, #5000	; 0x1388
 8004168:	4293      	cmp	r3, r2
 800416a:	d902      	bls.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	74fb      	strb	r3, [r7, #19]
            break;
 8004170:	e006      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004172:	4b0d      	ldr	r3, [pc, #52]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0ec      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004180:	7cfb      	ldrb	r3, [r7, #19]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10c      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004186:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004196:	4904      	ldr	r1, [pc, #16]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800419e:	e009      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	74bb      	strb	r3, [r7, #18]
 80041a4:	e006      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80041a6:	bf00      	nop
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b0:	7cfb      	ldrb	r3, [r7, #19]
 80041b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041b4:	7c7b      	ldrb	r3, [r7, #17]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d105      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ba:	4b9e      	ldr	r3, [pc, #632]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041be:	4a9d      	ldr	r2, [pc, #628]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041d2:	4b98      	ldr	r3, [pc, #608]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d8:	f023 0203 	bic.w	r2, r3, #3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	4994      	ldr	r1, [pc, #592]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041f4:	4b8f      	ldr	r3, [pc, #572]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	f023 020c 	bic.w	r2, r3, #12
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004202:	498c      	ldr	r1, [pc, #560]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004216:	4b87      	ldr	r3, [pc, #540]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	4983      	ldr	r1, [pc, #524]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0308 	and.w	r3, r3, #8
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004238:	4b7e      	ldr	r3, [pc, #504]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004246:	497b      	ldr	r1, [pc, #492]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0310 	and.w	r3, r3, #16
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800425a:	4b76      	ldr	r3, [pc, #472]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004260:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004268:	4972      	ldr	r1, [pc, #456]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0320 	and.w	r3, r3, #32
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800427c:	4b6d      	ldr	r3, [pc, #436]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004282:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428a:	496a      	ldr	r1, [pc, #424]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800429e:	4b65      	ldr	r3, [pc, #404]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ac:	4961      	ldr	r1, [pc, #388]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042c0:	4b5c      	ldr	r3, [pc, #368]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ce:	4959      	ldr	r1, [pc, #356]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042e2:	4b54      	ldr	r3, [pc, #336]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f0:	4950      	ldr	r1, [pc, #320]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00a      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004304:	4b4b      	ldr	r3, [pc, #300]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004312:	4948      	ldr	r1, [pc, #288]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004314:	4313      	orrs	r3, r2
 8004316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004326:	4b43      	ldr	r3, [pc, #268]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004334:	493f      	ldr	r1, [pc, #252]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d028      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004348:	4b3a      	ldr	r3, [pc, #232]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004356:	4937      	ldr	r1, [pc, #220]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004362:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004366:	d106      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004368:	4b32      	ldr	r3, [pc, #200]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	4a31      	ldr	r2, [pc, #196]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800436e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004372:	60d3      	str	r3, [r2, #12]
 8004374:	e011      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800437a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800437e:	d10c      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3304      	adds	r3, #4
 8004384:	2101      	movs	r1, #1
 8004386:	4618      	mov	r0, r3
 8004388:	f000 f8d8 	bl	800453c <RCCEx_PLLSAI1_Config>
 800438c:	4603      	mov	r3, r0
 800438e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004390:	7cfb      	ldrb	r3, [r7, #19]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004396:	7cfb      	ldrb	r3, [r7, #19]
 8004398:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d028      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043a6:	4b23      	ldr	r3, [pc, #140]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b4:	491f      	ldr	r1, [pc, #124]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043c4:	d106      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043c6:	4b1b      	ldr	r3, [pc, #108]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	4a1a      	ldr	r2, [pc, #104]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043d0:	60d3      	str	r3, [r2, #12]
 80043d2:	e011      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043dc:	d10c      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3304      	adds	r3, #4
 80043e2:	2101      	movs	r1, #1
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 f8a9 	bl	800453c <RCCEx_PLLSAI1_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ee:	7cfb      	ldrb	r3, [r7, #19]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80043f4:	7cfb      	ldrb	r3, [r7, #19]
 80043f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d02b      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004404:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004412:	4908      	ldr	r1, [pc, #32]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800441e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004422:	d109      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004424:	4b03      	ldr	r3, [pc, #12]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	4a02      	ldr	r2, [pc, #8]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800442a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800442e:	60d3      	str	r3, [r2, #12]
 8004430:	e014      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004432:	bf00      	nop
 8004434:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800443c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004440:	d10c      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3304      	adds	r3, #4
 8004446:	2101      	movs	r1, #1
 8004448:	4618      	mov	r0, r3
 800444a:	f000 f877 	bl	800453c <RCCEx_PLLSAI1_Config>
 800444e:	4603      	mov	r3, r0
 8004450:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004452:	7cfb      	ldrb	r3, [r7, #19]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004458:	7cfb      	ldrb	r3, [r7, #19]
 800445a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d02f      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004468:	4b2b      	ldr	r3, [pc, #172]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004476:	4928      	ldr	r1, [pc, #160]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004482:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004486:	d10d      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3304      	adds	r3, #4
 800448c:	2102      	movs	r1, #2
 800448e:	4618      	mov	r0, r3
 8004490:	f000 f854 	bl	800453c <RCCEx_PLLSAI1_Config>
 8004494:	4603      	mov	r3, r0
 8004496:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004498:	7cfb      	ldrb	r3, [r7, #19]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d014      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800449e:	7cfb      	ldrb	r3, [r7, #19]
 80044a0:	74bb      	strb	r3, [r7, #18]
 80044a2:	e011      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044ac:	d10c      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	3320      	adds	r3, #32
 80044b2:	2102      	movs	r1, #2
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 f935 	bl	8004724 <RCCEx_PLLSAI2_Config>
 80044ba:	4603      	mov	r3, r0
 80044bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044be:	7cfb      	ldrb	r3, [r7, #19]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80044c4:	7cfb      	ldrb	r3, [r7, #19]
 80044c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00a      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044d4:	4b10      	ldr	r3, [pc, #64]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044e2:	490d      	ldr	r1, [pc, #52]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00b      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044f6:	4b08      	ldr	r3, [pc, #32]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004506:	4904      	ldr	r1, [pc, #16]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004508:	4313      	orrs	r3, r2
 800450a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800450e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40021000 	.word	0x40021000

0800451c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004520:	4b05      	ldr	r3, [pc, #20]	; (8004538 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a04      	ldr	r2, [pc, #16]	; (8004538 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004526:	f043 0304 	orr.w	r3, r3, #4
 800452a:	6013      	str	r3, [r2, #0]
}
 800452c:	bf00      	nop
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	40021000 	.word	0x40021000

0800453c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800454a:	4b75      	ldr	r3, [pc, #468]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d018      	beq.n	8004588 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004556:	4b72      	ldr	r3, [pc, #456]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f003 0203 	and.w	r2, r3, #3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	429a      	cmp	r2, r3
 8004564:	d10d      	bne.n	8004582 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
       ||
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800456e:	4b6c      	ldr	r3, [pc, #432]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	091b      	lsrs	r3, r3, #4
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
       ||
 800457e:	429a      	cmp	r2, r3
 8004580:	d047      	beq.n	8004612 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	73fb      	strb	r3, [r7, #15]
 8004586:	e044      	b.n	8004612 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b03      	cmp	r3, #3
 800458e:	d018      	beq.n	80045c2 <RCCEx_PLLSAI1_Config+0x86>
 8004590:	2b03      	cmp	r3, #3
 8004592:	d825      	bhi.n	80045e0 <RCCEx_PLLSAI1_Config+0xa4>
 8004594:	2b01      	cmp	r3, #1
 8004596:	d002      	beq.n	800459e <RCCEx_PLLSAI1_Config+0x62>
 8004598:	2b02      	cmp	r3, #2
 800459a:	d009      	beq.n	80045b0 <RCCEx_PLLSAI1_Config+0x74>
 800459c:	e020      	b.n	80045e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800459e:	4b60      	ldr	r3, [pc, #384]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d11d      	bne.n	80045e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045ae:	e01a      	b.n	80045e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045b0:	4b5b      	ldr	r3, [pc, #364]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d116      	bne.n	80045ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c0:	e013      	b.n	80045ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045c2:	4b57      	ldr	r3, [pc, #348]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10f      	bne.n	80045ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045ce:	4b54      	ldr	r3, [pc, #336]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d109      	bne.n	80045ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045de:	e006      	b.n	80045ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	73fb      	strb	r3, [r7, #15]
      break;
 80045e4:	e004      	b.n	80045f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045e6:	bf00      	nop
 80045e8:	e002      	b.n	80045f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045ea:	bf00      	nop
 80045ec:	e000      	b.n	80045f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10d      	bne.n	8004612 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045f6:	4b4a      	ldr	r3, [pc, #296]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6819      	ldr	r1, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	3b01      	subs	r3, #1
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	430b      	orrs	r3, r1
 800460c:	4944      	ldr	r1, [pc, #272]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800460e:	4313      	orrs	r3, r2
 8004610:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d17d      	bne.n	8004714 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004618:	4b41      	ldr	r3, [pc, #260]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a40      	ldr	r2, [pc, #256]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800461e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004622:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004624:	f7fd fd20 	bl	8002068 <HAL_GetTick>
 8004628:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800462a:	e009      	b.n	8004640 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800462c:	f7fd fd1c 	bl	8002068 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d902      	bls.n	8004640 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	73fb      	strb	r3, [r7, #15]
        break;
 800463e:	e005      	b.n	800464c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004640:	4b37      	ldr	r3, [pc, #220]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1ef      	bne.n	800462c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800464c:	7bfb      	ldrb	r3, [r7, #15]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d160      	bne.n	8004714 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d111      	bne.n	800467c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004658:	4b31      	ldr	r3, [pc, #196]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6892      	ldr	r2, [r2, #8]
 8004668:	0211      	lsls	r1, r2, #8
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	68d2      	ldr	r2, [r2, #12]
 800466e:	0912      	lsrs	r2, r2, #4
 8004670:	0452      	lsls	r2, r2, #17
 8004672:	430a      	orrs	r2, r1
 8004674:	492a      	ldr	r1, [pc, #168]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004676:	4313      	orrs	r3, r2
 8004678:	610b      	str	r3, [r1, #16]
 800467a:	e027      	b.n	80046cc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d112      	bne.n	80046a8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004682:	4b27      	ldr	r3, [pc, #156]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800468a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6892      	ldr	r2, [r2, #8]
 8004692:	0211      	lsls	r1, r2, #8
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6912      	ldr	r2, [r2, #16]
 8004698:	0852      	lsrs	r2, r2, #1
 800469a:	3a01      	subs	r2, #1
 800469c:	0552      	lsls	r2, r2, #21
 800469e:	430a      	orrs	r2, r1
 80046a0:	491f      	ldr	r1, [pc, #124]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	610b      	str	r3, [r1, #16]
 80046a6:	e011      	b.n	80046cc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046a8:	4b1d      	ldr	r3, [pc, #116]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80046b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6892      	ldr	r2, [r2, #8]
 80046b8:	0211      	lsls	r1, r2, #8
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6952      	ldr	r2, [r2, #20]
 80046be:	0852      	lsrs	r2, r2, #1
 80046c0:	3a01      	subs	r2, #1
 80046c2:	0652      	lsls	r2, r2, #25
 80046c4:	430a      	orrs	r2, r1
 80046c6:	4916      	ldr	r1, [pc, #88]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80046cc:	4b14      	ldr	r3, [pc, #80]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a13      	ldr	r2, [pc, #76]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d8:	f7fd fcc6 	bl	8002068 <HAL_GetTick>
 80046dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046de:	e009      	b.n	80046f4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046e0:	f7fd fcc2 	bl	8002068 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d902      	bls.n	80046f4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	73fb      	strb	r3, [r7, #15]
          break;
 80046f2:	e005      	b.n	8004700 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046f4:	4b0a      	ldr	r3, [pc, #40]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0ef      	beq.n	80046e0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004700:	7bfb      	ldrb	r3, [r7, #15]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004706:	4b06      	ldr	r3, [pc, #24]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004708:	691a      	ldr	r2, [r3, #16]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	4904      	ldr	r1, [pc, #16]	; (8004720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004710:	4313      	orrs	r3, r2
 8004712:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004714:	7bfb      	ldrb	r3, [r7, #15]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40021000 	.word	0x40021000

08004724 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004732:	4b6a      	ldr	r3, [pc, #424]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d018      	beq.n	8004770 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800473e:	4b67      	ldr	r3, [pc, #412]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f003 0203 	and.w	r2, r3, #3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d10d      	bne.n	800476a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
       ||
 8004752:	2b00      	cmp	r3, #0
 8004754:	d009      	beq.n	800476a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004756:	4b61      	ldr	r3, [pc, #388]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	091b      	lsrs	r3, r3, #4
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
       ||
 8004766:	429a      	cmp	r2, r3
 8004768:	d047      	beq.n	80047fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	73fb      	strb	r3, [r7, #15]
 800476e:	e044      	b.n	80047fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b03      	cmp	r3, #3
 8004776:	d018      	beq.n	80047aa <RCCEx_PLLSAI2_Config+0x86>
 8004778:	2b03      	cmp	r3, #3
 800477a:	d825      	bhi.n	80047c8 <RCCEx_PLLSAI2_Config+0xa4>
 800477c:	2b01      	cmp	r3, #1
 800477e:	d002      	beq.n	8004786 <RCCEx_PLLSAI2_Config+0x62>
 8004780:	2b02      	cmp	r3, #2
 8004782:	d009      	beq.n	8004798 <RCCEx_PLLSAI2_Config+0x74>
 8004784:	e020      	b.n	80047c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004786:	4b55      	ldr	r3, [pc, #340]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d11d      	bne.n	80047ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004796:	e01a      	b.n	80047ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004798:	4b50      	ldr	r3, [pc, #320]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d116      	bne.n	80047d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047a8:	e013      	b.n	80047d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047aa:	4b4c      	ldr	r3, [pc, #304]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10f      	bne.n	80047d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047b6:	4b49      	ldr	r3, [pc, #292]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d109      	bne.n	80047d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047c6:	e006      	b.n	80047d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	73fb      	strb	r3, [r7, #15]
      break;
 80047cc:	e004      	b.n	80047d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047ce:	bf00      	nop
 80047d0:	e002      	b.n	80047d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047d2:	bf00      	nop
 80047d4:	e000      	b.n	80047d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10d      	bne.n	80047fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047de:	4b3f      	ldr	r3, [pc, #252]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6819      	ldr	r1, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	430b      	orrs	r3, r1
 80047f4:	4939      	ldr	r1, [pc, #228]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d167      	bne.n	80048d0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004800:	4b36      	ldr	r3, [pc, #216]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a35      	ldr	r2, [pc, #212]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004806:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800480a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800480c:	f7fd fc2c 	bl	8002068 <HAL_GetTick>
 8004810:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004812:	e009      	b.n	8004828 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004814:	f7fd fc28 	bl	8002068 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d902      	bls.n	8004828 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	73fb      	strb	r3, [r7, #15]
        break;
 8004826:	e005      	b.n	8004834 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004828:	4b2c      	ldr	r3, [pc, #176]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1ef      	bne.n	8004814 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004834:	7bfb      	ldrb	r3, [r7, #15]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d14a      	bne.n	80048d0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d111      	bne.n	8004864 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004840:	4b26      	ldr	r3, [pc, #152]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6892      	ldr	r2, [r2, #8]
 8004850:	0211      	lsls	r1, r2, #8
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	68d2      	ldr	r2, [r2, #12]
 8004856:	0912      	lsrs	r2, r2, #4
 8004858:	0452      	lsls	r2, r2, #17
 800485a:	430a      	orrs	r2, r1
 800485c:	491f      	ldr	r1, [pc, #124]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800485e:	4313      	orrs	r3, r2
 8004860:	614b      	str	r3, [r1, #20]
 8004862:	e011      	b.n	8004888 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004864:	4b1d      	ldr	r3, [pc, #116]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800486c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6892      	ldr	r2, [r2, #8]
 8004874:	0211      	lsls	r1, r2, #8
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6912      	ldr	r2, [r2, #16]
 800487a:	0852      	lsrs	r2, r2, #1
 800487c:	3a01      	subs	r2, #1
 800487e:	0652      	lsls	r2, r2, #25
 8004880:	430a      	orrs	r2, r1
 8004882:	4916      	ldr	r1, [pc, #88]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004884:	4313      	orrs	r3, r2
 8004886:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004888:	4b14      	ldr	r3, [pc, #80]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a13      	ldr	r2, [pc, #76]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800488e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004892:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004894:	f7fd fbe8 	bl	8002068 <HAL_GetTick>
 8004898:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800489a:	e009      	b.n	80048b0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800489c:	f7fd fbe4 	bl	8002068 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d902      	bls.n	80048b0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	73fb      	strb	r3, [r7, #15]
          break;
 80048ae:	e005      	b.n	80048bc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048b0:	4b0a      	ldr	r3, [pc, #40]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0ef      	beq.n	800489c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80048c2:	4b06      	ldr	r3, [pc, #24]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c4:	695a      	ldr	r2, [r3, #20]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	4904      	ldr	r1, [pc, #16]	; (80048dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40021000 	.word	0x40021000

080048e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e095      	b.n	8004a1e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d108      	bne.n	800490c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004902:	d009      	beq.n	8004918 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	61da      	str	r2, [r3, #28]
 800490a:	e005      	b.n	8004918 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d106      	bne.n	8004938 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7fc fda4 	bl	8001480 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800494e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004958:	d902      	bls.n	8004960 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800495a:	2300      	movs	r3, #0
 800495c:	60fb      	str	r3, [r7, #12]
 800495e:	e002      	b.n	8004966 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004964:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800496e:	d007      	beq.n	8004980 <HAL_SPI_Init+0xa0>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004978:	d002      	beq.n	8004980 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004990:	431a      	orrs	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c2:	ea42 0103 	orr.w	r1, r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	0c1b      	lsrs	r3, r3, #16
 80049dc:	f003 0204 	and.w	r2, r3, #4
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	f003 0310 	and.w	r3, r3, #16
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80049fc:	ea42 0103 	orr.w	r1, r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b082      	sub	sp, #8
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e01a      	b.n	8004a6e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a4e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7fc fd59 	bl	8001508 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b088      	sub	sp, #32
 8004a7a:	af02      	add	r7, sp, #8
 8004a7c:	60f8      	str	r0, [r7, #12]
 8004a7e:	60b9      	str	r1, [r7, #8]
 8004a80:	603b      	str	r3, [r7, #0]
 8004a82:	4613      	mov	r3, r2
 8004a84:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a92:	d112      	bne.n	8004aba <HAL_SPI_Receive+0x44>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10e      	bne.n	8004aba <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2204      	movs	r2, #4
 8004aa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004aa4:	88fa      	ldrh	r2, [r7, #6]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	68b9      	ldr	r1, [r7, #8]
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 f910 	bl	8004cd6 <HAL_SPI_TransmitReceive>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	e109      	b.n	8004cce <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_SPI_Receive+0x52>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e102      	b.n	8004cce <HAL_SPI_Receive+0x258>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ad0:	f7fd faca 	bl	8002068 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d002      	beq.n	8004ae8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ae6:	e0e9      	b.n	8004cbc <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <HAL_SPI_Receive+0x7e>
 8004aee:	88fb      	ldrh	r3, [r7, #6]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d102      	bne.n	8004afa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004af8:	e0e0      	b.n	8004cbc <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2204      	movs	r2, #4
 8004afe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	88fa      	ldrh	r2, [r7, #6]
 8004b12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	88fa      	ldrh	r2, [r7, #6]
 8004b1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b44:	d908      	bls.n	8004b58 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b54:	605a      	str	r2, [r3, #4]
 8004b56:	e007      	b.n	8004b68 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b66:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b70:	d10f      	bne.n	8004b92 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b90:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9c:	2b40      	cmp	r3, #64	; 0x40
 8004b9e:	d007      	beq.n	8004bb0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bb8:	d867      	bhi.n	8004c8a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004bba:	e030      	b.n	8004c1e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d117      	bne.n	8004bfa <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f103 020c 	add.w	r2, r3, #12
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	7812      	ldrb	r2, [r2, #0]
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004bf8:	e011      	b.n	8004c1e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bfa:	f7fd fa35 	bl	8002068 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d803      	bhi.n	8004c12 <HAL_SPI_Receive+0x19c>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c10:	d102      	bne.n	8004c18 <HAL_SPI_Receive+0x1a2>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d102      	bne.n	8004c1e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c1c:	e04e      	b.n	8004cbc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1c8      	bne.n	8004bbc <HAL_SPI_Receive+0x146>
 8004c2a:	e034      	b.n	8004c96 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d115      	bne.n	8004c66 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68da      	ldr	r2, [r3, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	b292      	uxth	r2, r2
 8004c46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	1c9a      	adds	r2, r3, #2
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004c64:	e011      	b.n	8004c8a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c66:	f7fd f9ff 	bl	8002068 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d803      	bhi.n	8004c7e <HAL_SPI_Receive+0x208>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7c:	d102      	bne.n	8004c84 <HAL_SPI_Receive+0x20e>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d102      	bne.n	8004c8a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c88:	e018      	b.n	8004cbc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1ca      	bne.n	8004c2c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	6839      	ldr	r1, [r7, #0]
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f001 f802 	bl	8005ca4 <SPI_EndRxTransaction>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	75fb      	strb	r3, [r7, #23]
 8004cb8:	e000      	b.n	8004cbc <HAL_SPI_Receive+0x246>
  }

error :
 8004cba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b08a      	sub	sp, #40	; 0x28
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	607a      	str	r2, [r7, #4]
 8004ce2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d101      	bne.n	8004cfc <HAL_SPI_TransmitReceive+0x26>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e1fb      	b.n	80050f4 <HAL_SPI_TransmitReceive+0x41e>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d04:	f7fd f9b0 	bl	8002068 <HAL_GetTick>
 8004d08:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d10:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004d18:	887b      	ldrh	r3, [r7, #2]
 8004d1a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004d1c:	887b      	ldrh	r3, [r7, #2]
 8004d1e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d20:	7efb      	ldrb	r3, [r7, #27]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d00e      	beq.n	8004d44 <HAL_SPI_TransmitReceive+0x6e>
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d2c:	d106      	bne.n	8004d3c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d102      	bne.n	8004d3c <HAL_SPI_TransmitReceive+0x66>
 8004d36:	7efb      	ldrb	r3, [r7, #27]
 8004d38:	2b04      	cmp	r3, #4
 8004d3a:	d003      	beq.n	8004d44 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004d42:	e1cd      	b.n	80050e0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <HAL_SPI_TransmitReceive+0x80>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d002      	beq.n	8004d56 <HAL_SPI_TransmitReceive+0x80>
 8004d50:	887b      	ldrh	r3, [r7, #2]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d103      	bne.n	8004d5e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004d5c:	e1c0      	b.n	80050e0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d003      	beq.n	8004d72 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2205      	movs	r2, #5
 8004d6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	887a      	ldrh	r2, [r7, #2]
 8004d82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	887a      	ldrh	r2, [r7, #2]
 8004d8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	887a      	ldrh	r2, [r7, #2]
 8004d98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	887a      	ldrh	r2, [r7, #2]
 8004d9e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004db4:	d802      	bhi.n	8004dbc <HAL_SPI_TransmitReceive+0xe6>
 8004db6:	8a3b      	ldrh	r3, [r7, #16]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d908      	bls.n	8004dce <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004dca:	605a      	str	r2, [r3, #4]
 8004dcc:	e007      	b.n	8004dde <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ddc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de8:	2b40      	cmp	r3, #64	; 0x40
 8004dea:	d007      	beq.n	8004dfc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e04:	d97c      	bls.n	8004f00 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d002      	beq.n	8004e14 <HAL_SPI_TransmitReceive+0x13e>
 8004e0e:	8a7b      	ldrh	r3, [r7, #18]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d169      	bne.n	8004ee8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	881a      	ldrh	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e24:	1c9a      	adds	r2, r3, #2
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e38:	e056      	b.n	8004ee8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d11b      	bne.n	8004e80 <HAL_SPI_TransmitReceive+0x1aa>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d016      	beq.n	8004e80 <HAL_SPI_TransmitReceive+0x1aa>
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d113      	bne.n	8004e80 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5c:	881a      	ldrh	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e68:	1c9a      	adds	r2, r3, #2
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d11c      	bne.n	8004ec8 <HAL_SPI_TransmitReceive+0x1f2>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d016      	beq.n	8004ec8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	b292      	uxth	r2, r2
 8004ea6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	1c9a      	adds	r2, r3, #2
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ec8:	f7fd f8ce 	bl	8002068 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d807      	bhi.n	8004ee8 <HAL_SPI_TransmitReceive+0x212>
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ede:	d003      	beq.n	8004ee8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004ee6:	e0fb      	b.n	80050e0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1a3      	bne.n	8004e3a <HAL_SPI_TransmitReceive+0x164>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d19d      	bne.n	8004e3a <HAL_SPI_TransmitReceive+0x164>
 8004efe:	e0df      	b.n	80050c0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <HAL_SPI_TransmitReceive+0x23a>
 8004f08:	8a7b      	ldrh	r3, [r7, #18]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	f040 80cb 	bne.w	80050a6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d912      	bls.n	8004f40 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1e:	881a      	ldrh	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2a:	1c9a      	adds	r2, r3, #2
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b02      	subs	r3, #2
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f3e:	e0b2      	b.n	80050a6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	330c      	adds	r3, #12
 8004f4a:	7812      	ldrb	r2, [r2, #0]
 8004f4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f66:	e09e      	b.n	80050a6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d134      	bne.n	8004fe0 <HAL_SPI_TransmitReceive+0x30a>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d02f      	beq.n	8004fe0 <HAL_SPI_TransmitReceive+0x30a>
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d12c      	bne.n	8004fe0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d912      	bls.n	8004fb6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f94:	881a      	ldrh	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	1c9a      	adds	r2, r3, #2
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3b02      	subs	r3, #2
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fb4:	e012      	b.n	8004fdc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	330c      	adds	r3, #12
 8004fc0:	7812      	ldrb	r2, [r2, #0]
 8004fc2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d148      	bne.n	8005080 <HAL_SPI_TransmitReceive+0x3aa>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d042      	beq.n	8005080 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005000:	b29b      	uxth	r3, r3
 8005002:	2b01      	cmp	r3, #1
 8005004:	d923      	bls.n	800504e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68da      	ldr	r2, [r3, #12]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	b292      	uxth	r2, r2
 8005012:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005018:	1c9a      	adds	r2, r3, #2
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005024:	b29b      	uxth	r3, r3
 8005026:	3b02      	subs	r3, #2
 8005028:	b29a      	uxth	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005036:	b29b      	uxth	r3, r3
 8005038:	2b01      	cmp	r3, #1
 800503a:	d81f      	bhi.n	800507c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800504a:	605a      	str	r2, [r3, #4]
 800504c:	e016      	b.n	800507c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f103 020c 	add.w	r2, r3, #12
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	7812      	ldrb	r2, [r2, #0]
 800505c:	b2d2      	uxtb	r2, r2
 800505e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005064:	1c5a      	adds	r2, r3, #1
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005070:	b29b      	uxth	r3, r3
 8005072:	3b01      	subs	r3, #1
 8005074:	b29a      	uxth	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800507c:	2301      	movs	r3, #1
 800507e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005080:	f7fc fff2 	bl	8002068 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800508c:	429a      	cmp	r2, r3
 800508e:	d803      	bhi.n	8005098 <HAL_SPI_TransmitReceive+0x3c2>
 8005090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005096:	d102      	bne.n	800509e <HAL_SPI_TransmitReceive+0x3c8>
 8005098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509a:	2b00      	cmp	r3, #0
 800509c:	d103      	bne.n	80050a6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80050a4:	e01c      	b.n	80050e0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f47f af5b 	bne.w	8004f68 <HAL_SPI_TransmitReceive+0x292>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f47f af54 	bne.w	8004f68 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050c0:	69fa      	ldr	r2, [r7, #28]
 80050c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 fe45 	bl	8005d54 <SPI_EndRxTxTransaction>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d006      	beq.n	80050de <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2220      	movs	r2, #32
 80050da:	661a      	str	r2, [r3, #96]	; 0x60
 80050dc:	e000      	b.n	80050e0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80050de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80050f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3728      	adds	r7, #40	; 0x28
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	4613      	mov	r3, r2
 8005108:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <HAL_SPI_Transmit_IT+0x20>
 8005118:	2302      	movs	r3, #2
 800511a:	e072      	b.n	8005202 <HAL_SPI_Transmit_IT+0x106>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <HAL_SPI_Transmit_IT+0x34>
 800512a:	88fb      	ldrh	r3, [r7, #6]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d102      	bne.n	8005136 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005134:	e060      	b.n	80051f8 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b01      	cmp	r3, #1
 8005140:	d002      	beq.n	8005148 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8005142:	2302      	movs	r3, #2
 8005144:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005146:	e057      	b.n	80051f8 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2203      	movs	r2, #3
 800514c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	88fa      	ldrh	r2, [r7, #6]
 8005160:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	88fa      	ldrh	r2, [r7, #6]
 8005166:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800518c:	d903      	bls.n	8005196 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4a1f      	ldr	r2, [pc, #124]	; (8005210 <HAL_SPI_Transmit_IT+0x114>)
 8005192:	651a      	str	r2, [r3, #80]	; 0x50
 8005194:	e002      	b.n	800519c <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4a1e      	ldr	r2, [pc, #120]	; (8005214 <HAL_SPI_Transmit_IT+0x118>)
 800519a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a4:	d10f      	bne.n	80051c6 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80051d4:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e0:	2b40      	cmp	r3, #64	; 0x40
 80051e2:	d008      	beq.n	80051f6 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	e000      	b.n	80051f8 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 80051f6:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005200:	7dfb      	ldrb	r3, [r7, #23]
}
 8005202:	4618      	mov	r0, r3
 8005204:	371c      	adds	r7, #28
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	08005a23 	.word	0x08005a23
 8005214:	080059dd 	.word	0x080059dd

08005218 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	4613      	mov	r3, r2
 8005224:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d110      	bne.n	8005254 <HAL_SPI_Receive_IT+0x3c>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800523a:	d10b      	bne.n	8005254 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2204      	movs	r2, #4
 8005240:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8005244:	88fb      	ldrh	r3, [r7, #6]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 f894 	bl	8005378 <HAL_SPI_TransmitReceive_IT>
 8005250:	4603      	mov	r3, r0
 8005252:	e089      	b.n	8005368 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800525a:	2b01      	cmp	r3, #1
 800525c:	d101      	bne.n	8005262 <HAL_SPI_Receive_IT+0x4a>
 800525e:	2302      	movs	r3, #2
 8005260:	e082      	b.n	8005368 <HAL_SPI_Receive_IT+0x150>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b01      	cmp	r3, #1
 8005274:	d002      	beq.n	800527c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8005276:	2302      	movs	r3, #2
 8005278:	75fb      	strb	r3, [r7, #23]
    goto error;
 800527a:	e070      	b.n	800535e <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <HAL_SPI_Receive_IT+0x70>
 8005282:	88fb      	ldrh	r3, [r7, #6]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d102      	bne.n	800528e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800528c:	e067      	b.n	800535e <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2204      	movs	r2, #4
 8005292:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	88fa      	ldrh	r2, [r7, #6]
 80052a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	88fa      	ldrh	r2, [r7, #6]
 80052ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052d2:	d90b      	bls.n	80052ec <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052e2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4a22      	ldr	r2, [pc, #136]	; (8005370 <HAL_SPI_Receive_IT+0x158>)
 80052e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80052ea:	e00a      	b.n	8005302 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052fa:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4a1d      	ldr	r2, [pc, #116]	; (8005374 <HAL_SPI_Receive_IT+0x15c>)
 8005300:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800530a:	d10f      	bne.n	800532c <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800531a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800532a:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800533a:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005346:	2b40      	cmp	r3, #64	; 0x40
 8005348:	d008      	beq.n	800535c <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	e000      	b.n	800535e <HAL_SPI_Receive_IT+0x146>
  }

error :
 800535c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005366:	7dfb      	ldrb	r3, [r7, #23]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3718      	adds	r7, #24
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	08005991 	.word	0x08005991
 8005374:	08005941 	.word	0x08005941

08005378 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
 8005384:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005390:	2b01      	cmp	r3, #1
 8005392:	d101      	bne.n	8005398 <HAL_SPI_TransmitReceive_IT+0x20>
 8005394:	2302      	movs	r3, #2
 8005396:	e091      	b.n	80054bc <HAL_SPI_TransmitReceive_IT+0x144>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053a6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80053ae:	7dbb      	ldrb	r3, [r7, #22]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d00d      	beq.n	80053d0 <HAL_SPI_TransmitReceive_IT+0x58>
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053ba:	d106      	bne.n	80053ca <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d102      	bne.n	80053ca <HAL_SPI_TransmitReceive_IT+0x52>
 80053c4:	7dbb      	ldrb	r3, [r7, #22]
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d002      	beq.n	80053d0 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80053ca:	2302      	movs	r3, #2
 80053cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80053ce:	e070      	b.n	80054b2 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d005      	beq.n	80053e2 <HAL_SPI_TransmitReceive_IT+0x6a>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d002      	beq.n	80053e2 <HAL_SPI_TransmitReceive_IT+0x6a>
 80053dc:	887b      	ldrh	r3, [r7, #2]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d102      	bne.n	80053e8 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80053e6:	e064      	b.n	80054b2 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	d003      	beq.n	80053fc <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2205      	movs	r2, #5
 80053f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	887a      	ldrh	r2, [r7, #2]
 800540c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	887a      	ldrh	r2, [r7, #2]
 8005412:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	887a      	ldrh	r2, [r7, #2]
 800541e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	887a      	ldrh	r2, [r7, #2]
 8005426:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005432:	d906      	bls.n	8005442 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4a24      	ldr	r2, [pc, #144]	; (80054c8 <HAL_SPI_TransmitReceive_IT+0x150>)
 8005438:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4a23      	ldr	r2, [pc, #140]	; (80054cc <HAL_SPI_TransmitReceive_IT+0x154>)
 800543e:	651a      	str	r2, [r3, #80]	; 0x50
 8005440:	e005      	b.n	800544e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4a22      	ldr	r2, [pc, #136]	; (80054d0 <HAL_SPI_TransmitReceive_IT+0x158>)
 8005446:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4a22      	ldr	r2, [pc, #136]	; (80054d4 <HAL_SPI_TransmitReceive_IT+0x15c>)
 800544c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005456:	d802      	bhi.n	800545e <HAL_SPI_TransmitReceive_IT+0xe6>
 8005458:	887b      	ldrh	r3, [r7, #2]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d908      	bls.n	8005470 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800546c:	605a      	str	r2, [r3, #4]
 800546e:	e007      	b.n	8005480 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800547e:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800548e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549a:	2b40      	cmp	r3, #64	; 0x40
 800549c:	d008      	beq.n	80054b0 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	e000      	b.n	80054b2 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 80054b0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80054ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	371c      	adds	r7, #28
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	0800587b 	.word	0x0800587b
 80054cc:	080058e1 	.word	0x080058e1
 80054d0:	0800572b 	.word	0x0800572b
 80054d4:	080057e9 	.word	0x080057e9

080054d8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	099b      	lsrs	r3, r3, #6
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10f      	bne.n	800551c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	099b      	lsrs	r3, r3, #6
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d004      	beq.n	800551c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	4798      	blx	r3
    return;
 800551a:	e0d7      	b.n	80056cc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	085b      	lsrs	r3, r3, #1
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <HAL_SPI_IRQHandler+0x66>
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	09db      	lsrs	r3, r3, #7
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b00      	cmp	r3, #0
 8005532:	d004      	beq.n	800553e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	4798      	blx	r3
    return;
 800553c:	e0c6      	b.n	80056cc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	095b      	lsrs	r3, r3, #5
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10c      	bne.n	8005564 <HAL_SPI_IRQHandler+0x8c>
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	099b      	lsrs	r3, r3, #6
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d106      	bne.n	8005564 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	0a1b      	lsrs	r3, r3, #8
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 80b4 	beq.w	80056cc <HAL_SPI_IRQHandler+0x1f4>
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	095b      	lsrs	r3, r3, #5
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 80ad 	beq.w	80056cc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	099b      	lsrs	r3, r3, #6
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d023      	beq.n	80055c6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b03      	cmp	r3, #3
 8005588:	d011      	beq.n	80055ae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800558e:	f043 0204 	orr.w	r2, r3, #4
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005596:	2300      	movs	r3, #0
 8005598:	617b      	str	r3, [r7, #20]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	617b      	str	r3, [r7, #20]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	617b      	str	r3, [r7, #20]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	e00b      	b.n	80055c6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055ae:	2300      	movs	r3, #0
 80055b0:	613b      	str	r3, [r7, #16]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	613b      	str	r3, [r7, #16]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	613b      	str	r3, [r7, #16]
 80055c2:	693b      	ldr	r3, [r7, #16]
        return;
 80055c4:	e082      	b.n	80056cc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	095b      	lsrs	r3, r3, #5
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d014      	beq.n	80055fc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d6:	f043 0201 	orr.w	r2, r3, #1
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80055de:	2300      	movs	r3, #0
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	0a1b      	lsrs	r3, r3, #8
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00c      	beq.n	8005622 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800560c:	f043 0208 	orr.w	r2, r3, #8
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005614:	2300      	movs	r3, #0
 8005616:	60bb      	str	r3, [r7, #8]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	60bb      	str	r3, [r7, #8]
 8005620:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005626:	2b00      	cmp	r3, #0
 8005628:	d04f      	beq.n	80056ca <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005638:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d104      	bne.n	8005656 <HAL_SPI_IRQHandler+0x17e>
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d034      	beq.n	80056c0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 0203 	bic.w	r2, r2, #3
 8005664:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566a:	2b00      	cmp	r3, #0
 800566c:	d011      	beq.n	8005692 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005672:	4a18      	ldr	r2, [pc, #96]	; (80056d4 <HAL_SPI_IRQHandler+0x1fc>)
 8005674:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567a:	4618      	mov	r0, r3
 800567c:	f7fc ff50 	bl	8002520 <HAL_DMA_Abort_IT>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d005      	beq.n	8005692 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800568a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005696:	2b00      	cmp	r3, #0
 8005698:	d016      	beq.n	80056c8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569e:	4a0d      	ldr	r2, [pc, #52]	; (80056d4 <HAL_SPI_IRQHandler+0x1fc>)
 80056a0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fc ff3a 	bl	8002520 <HAL_DMA_Abort_IT>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00a      	beq.n	80056c8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80056be:	e003      	b.n	80056c8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f813 	bl	80056ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80056c6:	e000      	b.n	80056ca <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80056c8:	bf00      	nop
    return;
 80056ca:	bf00      	nop
  }
}
 80056cc:	3720      	adds	r7, #32
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	08005701 	.word	0x08005701

080056d8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f7ff ffe5 	bl	80056ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005722:	bf00      	nop
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b082      	sub	sp, #8
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005738:	b29b      	uxth	r3, r3
 800573a:	2b01      	cmp	r3, #1
 800573c:	d923      	bls.n	8005786 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68da      	ldr	r2, [r3, #12]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	b292      	uxth	r2, r2
 800574a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005750:	1c9a      	adds	r2, r3, #2
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800575c:	b29b      	uxth	r3, r3
 800575e:	3b02      	subs	r3, #2
 8005760:	b29a      	uxth	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800576e:	b29b      	uxth	r3, r3
 8005770:	2b01      	cmp	r3, #1
 8005772:	d11f      	bne.n	80057b4 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005782:	605a      	str	r2, [r3, #4]
 8005784:	e016      	b.n	80057b4 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f103 020c 	add.w	r2, r3, #12
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	7812      	ldrb	r2, [r2, #0]
 8005794:	b2d2      	uxtb	r2, r2
 8005796:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	3b01      	subs	r3, #1
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10f      	bne.n	80057e0 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80057ce:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d102      	bne.n	80057e0 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fb00 	bl	8005de0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80057e0:	bf00      	nop
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d912      	bls.n	8005820 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fe:	881a      	ldrh	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	1c9a      	adds	r2, r3, #2
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005814:	b29b      	uxth	r3, r3
 8005816:	3b02      	subs	r3, #2
 8005818:	b29a      	uxth	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800581e:	e012      	b.n	8005846 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	330c      	adds	r3, #12
 800582a:	7812      	ldrb	r2, [r2, #0]
 800582c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800583c:	b29b      	uxth	r3, r3
 800583e:	3b01      	subs	r3, #1
 8005840:	b29a      	uxth	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800584a:	b29b      	uxth	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d110      	bne.n	8005872 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800585e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005866:	b29b      	uxth	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d102      	bne.n	8005872 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fab7 	bl	8005de0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005872:	bf00      	nop
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b082      	sub	sp, #8
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68da      	ldr	r2, [r3, #12]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588c:	b292      	uxth	r2, r2
 800588e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005894:	1c9a      	adds	r2, r3, #2
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	3b01      	subs	r3, #1
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10f      	bne.n	80058d8 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d102      	bne.n	80058d8 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fa84 	bl	8005de0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80058d8:	bf00      	nop
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ec:	881a      	ldrh	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f8:	1c9a      	adds	r2, r3, #2
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005902:	b29b      	uxth	r3, r3
 8005904:	3b01      	subs	r3, #1
 8005906:	b29a      	uxth	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005910:	b29b      	uxth	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d110      	bne.n	8005938 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005924:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800592c:	b29b      	uxth	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d102      	bne.n	8005938 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 fa54 	bl	8005de0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005938:	bf00      	nop
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f103 020c 	add.w	r2, r3, #12
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005954:	7812      	ldrb	r2, [r2, #0]
 8005956:	b2d2      	uxtb	r2, r2
 8005958:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	1c5a      	adds	r2, r3, #1
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800596a:	b29b      	uxth	r3, r3
 800596c:	3b01      	subs	r3, #1
 800596e:	b29a      	uxth	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800597c:	b29b      	uxth	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d102      	bne.n	8005988 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fa6e 	bl	8005e64 <SPI_CloseRx_ISR>
  }
}
 8005988:	bf00      	nop
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	b292      	uxth	r2, r2
 80059a4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	1c9a      	adds	r2, r3, #2
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d102      	bne.n	80059d4 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fa48 	bl	8005e64 <SPI_CloseRx_ISR>
  }
}
 80059d4:	bf00      	nop
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	330c      	adds	r3, #12
 80059ee:	7812      	ldrb	r2, [r2, #0]
 80059f0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d102      	bne.n	8005a1a <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fa55 	bl	8005ec4 <SPI_CloseTx_ISR>
  }
}
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b082      	sub	sp, #8
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2e:	881a      	ldrh	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3a:	1c9a      	adds	r2, r3, #2
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d102      	bne.n	8005a5e <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fa33 	bl	8005ec4 <SPI_CloseTx_ISR>
  }
}
 8005a5e:	bf00      	nop
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
	...

08005a68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b088      	sub	sp, #32
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	603b      	str	r3, [r7, #0]
 8005a74:	4613      	mov	r3, r2
 8005a76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a78:	f7fc faf6 	bl	8002068 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a80:	1a9b      	subs	r3, r3, r2
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	4413      	add	r3, r2
 8005a86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a88:	f7fc faee 	bl	8002068 <HAL_GetTick>
 8005a8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a8e:	4b39      	ldr	r3, [pc, #228]	; (8005b74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	015b      	lsls	r3, r3, #5
 8005a94:	0d1b      	lsrs	r3, r3, #20
 8005a96:	69fa      	ldr	r2, [r7, #28]
 8005a98:	fb02 f303 	mul.w	r3, r2, r3
 8005a9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a9e:	e054      	b.n	8005b4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa6:	d050      	beq.n	8005b4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005aa8:	f7fc fade 	bl	8002068 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	69fa      	ldr	r2, [r7, #28]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d902      	bls.n	8005abe <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d13d      	bne.n	8005b3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005acc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ad6:	d111      	bne.n	8005afc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ae0:	d004      	beq.n	8005aec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aea:	d107      	bne.n	8005afc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005afa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b04:	d10f      	bne.n	8005b26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e017      	b.n	8005b6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	3b01      	subs	r3, #1
 8005b48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	4013      	ands	r3, r2
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	bf0c      	ite	eq
 8005b5a:	2301      	moveq	r3, #1
 8005b5c:	2300      	movne	r3, #0
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	461a      	mov	r2, r3
 8005b62:	79fb      	ldrb	r3, [r7, #7]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d19b      	bne.n	8005aa0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3720      	adds	r7, #32
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20000000 	.word	0x20000000

08005b78 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08a      	sub	sp, #40	; 0x28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
 8005b84:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005b86:	2300      	movs	r3, #0
 8005b88:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005b8a:	f7fc fa6d 	bl	8002068 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	1a9b      	subs	r3, r3, r2
 8005b94:	683a      	ldr	r2, [r7, #0]
 8005b96:	4413      	add	r3, r2
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005b9a:	f7fc fa65 	bl	8002068 <HAL_GetTick>
 8005b9e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	330c      	adds	r3, #12
 8005ba6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005ba8:	4b3d      	ldr	r3, [pc, #244]	; (8005ca0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	4613      	mov	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	00da      	lsls	r2, r3, #3
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	0d1b      	lsrs	r3, r3, #20
 8005bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bba:	fb02 f303 	mul.w	r3, r2, r3
 8005bbe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005bc0:	e060      	b.n	8005c84 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005bc8:	d107      	bne.n	8005bda <SPI_WaitFifoStateUntilTimeout+0x62>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d104      	bne.n	8005bda <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005bd8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be0:	d050      	beq.n	8005c84 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005be2:	f7fc fa41 	bl	8002068 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d902      	bls.n	8005bf8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d13d      	bne.n	8005c74 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c10:	d111      	bne.n	8005c36 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c1a:	d004      	beq.n	8005c26 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c24:	d107      	bne.n	8005c36 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c3e:	d10f      	bne.n	8005c60 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c4e:	601a      	str	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e010      	b.n	8005c96 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	3b01      	subs	r3, #1
 8005c82:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d196      	bne.n	8005bc2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3728      	adds	r7, #40	; 0x28
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	20000000 	.word	0x20000000

08005ca4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cb8:	d111      	bne.n	8005cde <SPI_EndRxTransaction+0x3a>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cc2:	d004      	beq.n	8005cce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ccc:	d107      	bne.n	8005cde <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cdc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	2180      	movs	r1, #128	; 0x80
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f7ff febd 	bl	8005a68 <SPI_WaitFlagStateUntilTimeout>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d007      	beq.n	8005d04 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf8:	f043 0220 	orr.w	r2, r3, #32
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e023      	b.n	8005d4c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d0c:	d11d      	bne.n	8005d4a <SPI_EndRxTransaction+0xa6>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d16:	d004      	beq.n	8005d22 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d20:	d113      	bne.n	8005d4a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f7ff ff22 	bl	8005b78 <SPI_WaitFifoStateUntilTimeout>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d007      	beq.n	8005d4a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d3e:	f043 0220 	orr.w	r2, r3, #32
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e000      	b.n	8005d4c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af02      	add	r7, sp, #8
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f7ff ff03 	bl	8005b78 <SPI_WaitFifoStateUntilTimeout>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d007      	beq.n	8005d88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d7c:	f043 0220 	orr.w	r2, r3, #32
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e027      	b.n	8005dd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	9300      	str	r3, [sp, #0]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	2180      	movs	r1, #128	; 0x80
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f7ff fe68 	bl	8005a68 <SPI_WaitFlagStateUntilTimeout>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d007      	beq.n	8005dae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da2:	f043 0220 	orr.w	r2, r3, #32
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e014      	b.n	8005dd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f7ff fedc 	bl	8005b78 <SPI_WaitFifoStateUntilTimeout>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d007      	beq.n	8005dd6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dca:	f043 0220 	orr.w	r2, r3, #32
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e000      	b.n	8005dd8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005de8:	f7fc f93e 	bl	8002068 <HAL_GetTick>
 8005dec:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0220 	bic.w	r2, r2, #32
 8005dfc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	2164      	movs	r1, #100	; 0x64
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7ff ffa6 	bl	8005d54 <SPI_EndRxTxTransaction>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d005      	beq.n	8005e1a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e12:	f043 0220 	orr.w	r2, r3, #32
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d115      	bne.n	8005e4e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	d107      	bne.n	8005e3e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f003 fab8 	bl	80093ac <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005e3c:	e00e      	b.n	8005e5c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7ff fc46 	bl	80056d8 <HAL_SPI_TxRxCpltCallback>
}
 8005e4c:	e006      	b.n	8005e5c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7ff fc48 	bl	80056ec <HAL_SPI_ErrorCallback>
}
 8005e5c:	bf00      	nop
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e7a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8005e7c:	f7fc f8f4 	bl	8002068 <HAL_GetTick>
 8005e80:	4603      	mov	r3, r0
 8005e82:	461a      	mov	r2, r3
 8005e84:	2164      	movs	r1, #100	; 0x64
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7ff ff0c 	bl	8005ca4 <SPI_EndRxTransaction>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d005      	beq.n	8005e9e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e96:	f043 0220 	orr.w	r2, r3, #32
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d103      	bne.n	8005eb6 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f003 fa7c 	bl	80093ac <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005eb4:	e002      	b.n	8005ebc <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7ff fc18 	bl	80056ec <HAL_SPI_ErrorCallback>
}
 8005ebc:	bf00      	nop
 8005ebe:	3708      	adds	r7, #8
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ecc:	f7fc f8cc 	bl	8002068 <HAL_GetTick>
 8005ed0:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ee0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	2164      	movs	r1, #100	; 0x64
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff ff34 	bl	8005d54 <SPI_EndRxTxTransaction>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d005      	beq.n	8005efe <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ef6:	f043 0220 	orr.w	r2, r3, #32
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10a      	bne.n	8005f1c <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f06:	2300      	movs	r3, #0
 8005f08:	60bb      	str	r3, [r7, #8]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	60bb      	str	r3, [r7, #8]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	60bb      	str	r3, [r7, #8]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff fbdd 	bl	80056ec <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005f32:	e002      	b.n	8005f3a <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f003 fa4d 	bl	80093d4 <HAL_SPI_TxCpltCallback>
}
 8005f3a:	bf00      	nop
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b082      	sub	sp, #8
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e049      	b.n	8005fe8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d106      	bne.n	8005f6e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f841 	bl	8005ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2202      	movs	r2, #2
 8005f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4610      	mov	r0, r2
 8005f82:	f000 f9f7 	bl	8006374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b01      	cmp	r3, #1
 8006016:	d001      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e04f      	b.n	80060bc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68da      	ldr	r2, [r3, #12]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0201 	orr.w	r2, r2, #1
 8006032:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a23      	ldr	r2, [pc, #140]	; (80060c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d01d      	beq.n	800607a <HAL_TIM_Base_Start_IT+0x76>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006046:	d018      	beq.n	800607a <HAL_TIM_Base_Start_IT+0x76>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a1f      	ldr	r2, [pc, #124]	; (80060cc <HAL_TIM_Base_Start_IT+0xc8>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d013      	beq.n	800607a <HAL_TIM_Base_Start_IT+0x76>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a1e      	ldr	r2, [pc, #120]	; (80060d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d00e      	beq.n	800607a <HAL_TIM_Base_Start_IT+0x76>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a1c      	ldr	r2, [pc, #112]	; (80060d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d009      	beq.n	800607a <HAL_TIM_Base_Start_IT+0x76>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a1b      	ldr	r2, [pc, #108]	; (80060d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d004      	beq.n	800607a <HAL_TIM_Base_Start_IT+0x76>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a19      	ldr	r2, [pc, #100]	; (80060dc <HAL_TIM_Base_Start_IT+0xd8>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d115      	bne.n	80060a6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	4b17      	ldr	r3, [pc, #92]	; (80060e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006082:	4013      	ands	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2b06      	cmp	r3, #6
 800608a:	d015      	beq.n	80060b8 <HAL_TIM_Base_Start_IT+0xb4>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006092:	d011      	beq.n	80060b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0201 	orr.w	r2, r2, #1
 80060a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a4:	e008      	b.n	80060b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f042 0201 	orr.w	r2, r2, #1
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	e000      	b.n	80060ba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr
 80060c8:	40012c00 	.word	0x40012c00
 80060cc:	40000400 	.word	0x40000400
 80060d0:	40000800 	.word	0x40000800
 80060d4:	40000c00 	.word	0x40000c00
 80060d8:	40013400 	.word	0x40013400
 80060dc:	40014000 	.word	0x40014000
 80060e0:	00010007 	.word	0x00010007

080060e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d122      	bne.n	8006140 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b02      	cmp	r3, #2
 8006106:	d11b      	bne.n	8006140 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f06f 0202 	mvn.w	r2, #2
 8006110:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	f003 0303 	and.w	r3, r3, #3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f905 	bl	8006336 <HAL_TIM_IC_CaptureCallback>
 800612c:	e005      	b.n	800613a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f8f7 	bl	8006322 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f908 	bl	800634a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	f003 0304 	and.w	r3, r3, #4
 800614a:	2b04      	cmp	r3, #4
 800614c:	d122      	bne.n	8006194 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b04      	cmp	r3, #4
 800615a:	d11b      	bne.n	8006194 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f06f 0204 	mvn.w	r2, #4
 8006164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2202      	movs	r2, #2
 800616a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f8db 	bl	8006336 <HAL_TIM_IC_CaptureCallback>
 8006180:	e005      	b.n	800618e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f8cd 	bl	8006322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f8de 	bl	800634a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f003 0308 	and.w	r3, r3, #8
 800619e:	2b08      	cmp	r3, #8
 80061a0:	d122      	bne.n	80061e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f003 0308 	and.w	r3, r3, #8
 80061ac:	2b08      	cmp	r3, #8
 80061ae:	d11b      	bne.n	80061e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f06f 0208 	mvn.w	r2, #8
 80061b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2204      	movs	r2, #4
 80061be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	f003 0303 	and.w	r3, r3, #3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f8b1 	bl	8006336 <HAL_TIM_IC_CaptureCallback>
 80061d4:	e005      	b.n	80061e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f8a3 	bl	8006322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f8b4 	bl	800634a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	f003 0310 	and.w	r3, r3, #16
 80061f2:	2b10      	cmp	r3, #16
 80061f4:	d122      	bne.n	800623c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	f003 0310 	and.w	r3, r3, #16
 8006200:	2b10      	cmp	r3, #16
 8006202:	d11b      	bne.n	800623c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f06f 0210 	mvn.w	r2, #16
 800620c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2208      	movs	r2, #8
 8006212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f887 	bl	8006336 <HAL_TIM_IC_CaptureCallback>
 8006228:	e005      	b.n	8006236 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f879 	bl	8006322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f88a 	bl	800634a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b01      	cmp	r3, #1
 8006248:	d10e      	bne.n	8006268 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f003 0301 	and.w	r3, r3, #1
 8006254:	2b01      	cmp	r3, #1
 8006256:	d107      	bne.n	8006268 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f06f 0201 	mvn.w	r2, #1
 8006260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7fa ffc6 	bl	80011f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006272:	2b80      	cmp	r3, #128	; 0x80
 8006274:	d10e      	bne.n	8006294 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006280:	2b80      	cmp	r3, #128	; 0x80
 8006282:	d107      	bne.n	8006294 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800628c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f914 	bl	80064bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800629e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062a2:	d10e      	bne.n	80062c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ae:	2b80      	cmp	r3, #128	; 0x80
 80062b0:	d107      	bne.n	80062c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f907 	bl	80064d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062cc:	2b40      	cmp	r3, #64	; 0x40
 80062ce:	d10e      	bne.n	80062ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062da:	2b40      	cmp	r3, #64	; 0x40
 80062dc:	d107      	bne.n	80062ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 f838 	bl	800635e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	f003 0320 	and.w	r3, r3, #32
 80062f8:	2b20      	cmp	r3, #32
 80062fa:	d10e      	bne.n	800631a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	f003 0320 	and.w	r3, r3, #32
 8006306:	2b20      	cmp	r3, #32
 8006308:	d107      	bne.n	800631a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f06f 0220 	mvn.w	r2, #32
 8006312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f8c7 	bl	80064a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800631a:	bf00      	nop
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006322:	b480      	push	{r7}
 8006324:	b083      	sub	sp, #12
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006336:	b480      	push	{r7}
 8006338:	b083      	sub	sp, #12
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800633e:	bf00      	nop
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800634a:	b480      	push	{r7}
 800634c:	b083      	sub	sp, #12
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006352:	bf00      	nop
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800635e:	b480      	push	{r7}
 8006360:	b083      	sub	sp, #12
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006366:	bf00      	nop
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
	...

08006374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a40      	ldr	r2, [pc, #256]	; (8006488 <TIM_Base_SetConfig+0x114>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d013      	beq.n	80063b4 <TIM_Base_SetConfig+0x40>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006392:	d00f      	beq.n	80063b4 <TIM_Base_SetConfig+0x40>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a3d      	ldr	r2, [pc, #244]	; (800648c <TIM_Base_SetConfig+0x118>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d00b      	beq.n	80063b4 <TIM_Base_SetConfig+0x40>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a3c      	ldr	r2, [pc, #240]	; (8006490 <TIM_Base_SetConfig+0x11c>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d007      	beq.n	80063b4 <TIM_Base_SetConfig+0x40>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a3b      	ldr	r2, [pc, #236]	; (8006494 <TIM_Base_SetConfig+0x120>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d003      	beq.n	80063b4 <TIM_Base_SetConfig+0x40>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a3a      	ldr	r2, [pc, #232]	; (8006498 <TIM_Base_SetConfig+0x124>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d108      	bne.n	80063c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a2f      	ldr	r2, [pc, #188]	; (8006488 <TIM_Base_SetConfig+0x114>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d01f      	beq.n	800640e <TIM_Base_SetConfig+0x9a>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d4:	d01b      	beq.n	800640e <TIM_Base_SetConfig+0x9a>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a2c      	ldr	r2, [pc, #176]	; (800648c <TIM_Base_SetConfig+0x118>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d017      	beq.n	800640e <TIM_Base_SetConfig+0x9a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a2b      	ldr	r2, [pc, #172]	; (8006490 <TIM_Base_SetConfig+0x11c>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d013      	beq.n	800640e <TIM_Base_SetConfig+0x9a>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a2a      	ldr	r2, [pc, #168]	; (8006494 <TIM_Base_SetConfig+0x120>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d00f      	beq.n	800640e <TIM_Base_SetConfig+0x9a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a29      	ldr	r2, [pc, #164]	; (8006498 <TIM_Base_SetConfig+0x124>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d00b      	beq.n	800640e <TIM_Base_SetConfig+0x9a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a28      	ldr	r2, [pc, #160]	; (800649c <TIM_Base_SetConfig+0x128>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d007      	beq.n	800640e <TIM_Base_SetConfig+0x9a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a27      	ldr	r2, [pc, #156]	; (80064a0 <TIM_Base_SetConfig+0x12c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d003      	beq.n	800640e <TIM_Base_SetConfig+0x9a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a26      	ldr	r2, [pc, #152]	; (80064a4 <TIM_Base_SetConfig+0x130>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d108      	bne.n	8006420 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	4313      	orrs	r3, r2
 800641e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a10      	ldr	r2, [pc, #64]	; (8006488 <TIM_Base_SetConfig+0x114>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d00f      	beq.n	800646c <TIM_Base_SetConfig+0xf8>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a12      	ldr	r2, [pc, #72]	; (8006498 <TIM_Base_SetConfig+0x124>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d00b      	beq.n	800646c <TIM_Base_SetConfig+0xf8>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a11      	ldr	r2, [pc, #68]	; (800649c <TIM_Base_SetConfig+0x128>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d007      	beq.n	800646c <TIM_Base_SetConfig+0xf8>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a10      	ldr	r2, [pc, #64]	; (80064a0 <TIM_Base_SetConfig+0x12c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d003      	beq.n	800646c <TIM_Base_SetConfig+0xf8>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a0f      	ldr	r2, [pc, #60]	; (80064a4 <TIM_Base_SetConfig+0x130>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d103      	bne.n	8006474 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	691a      	ldr	r2, [r3, #16]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	615a      	str	r2, [r3, #20]
}
 800647a:	bf00      	nop
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	40012c00 	.word	0x40012c00
 800648c:	40000400 	.word	0x40000400
 8006490:	40000800 	.word	0x40000800
 8006494:	40000c00 	.word	0x40000c00
 8006498:	40013400 	.word	0x40013400
 800649c:	40014000 	.word	0x40014000
 80064a0:	40014400 	.word	0x40014400
 80064a4:	40014800 	.word	0x40014800

080064a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e040      	b.n	8006578 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d106      	bne.n	800650c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7fb f81c 	bl	8001544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2224      	movs	r2, #36	; 0x24
 8006510:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 0201 	bic.w	r2, r2, #1
 8006520:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fc96 	bl	8006e54 <UART_SetConfig>
 8006528:	4603      	mov	r3, r0
 800652a:	2b01      	cmp	r3, #1
 800652c:	d101      	bne.n	8006532 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e022      	b.n	8006578 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006536:	2b00      	cmp	r3, #0
 8006538:	d002      	beq.n	8006540 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 ff42 	bl	80073c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800654e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800655e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f042 0201 	orr.w	r2, r2, #1
 800656e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 ffc9 	bl	8007508 <UART_CheckIdleState>
 8006576:	4603      	mov	r3, r0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006580:	b480      	push	{r7}
 8006582:	b08b      	sub	sp, #44	; 0x2c
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	4613      	mov	r3, r2
 800658c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006592:	2b20      	cmp	r3, #32
 8006594:	d156      	bne.n	8006644 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d002      	beq.n	80065a2 <HAL_UART_Transmit_IT+0x22>
 800659c:	88fb      	ldrh	r3, [r7, #6]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e04f      	b.n	8006646 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d101      	bne.n	80065b4 <HAL_UART_Transmit_IT+0x34>
 80065b0:	2302      	movs	r3, #2
 80065b2:	e048      	b.n	8006646 <HAL_UART_Transmit_IT+0xc6>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	88fa      	ldrh	r2, [r7, #6]
 80065c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	88fa      	ldrh	r2, [r7, #6]
 80065ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2221      	movs	r2, #33	; 0x21
 80065e4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ee:	d107      	bne.n	8006600 <HAL_UART_Transmit_IT+0x80>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d103      	bne.n	8006600 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4a16      	ldr	r2, [pc, #88]	; (8006654 <HAL_UART_Transmit_IT+0xd4>)
 80065fc:	669a      	str	r2, [r3, #104]	; 0x68
 80065fe:	e002      	b.n	8006606 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4a15      	ldr	r2, [pc, #84]	; (8006658 <HAL_UART_Transmit_IT+0xd8>)
 8006604:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	e853 3f00 	ldrex	r3, [r3]
 800661a:	613b      	str	r3, [r7, #16]
   return(result);
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006622:	627b      	str	r3, [r7, #36]	; 0x24
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	461a      	mov	r2, r3
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	623b      	str	r3, [r7, #32]
 800662e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006630:	69f9      	ldr	r1, [r7, #28]
 8006632:	6a3a      	ldr	r2, [r7, #32]
 8006634:	e841 2300 	strex	r3, r2, [r1]
 8006638:	61bb      	str	r3, [r7, #24]
   return(result);
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1e6      	bne.n	800660e <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006640:	2300      	movs	r3, #0
 8006642:	e000      	b.n	8006646 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006644:	2302      	movs	r3, #2
  }
}
 8006646:	4618      	mov	r0, r3
 8006648:	372c      	adds	r7, #44	; 0x2c
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	080078cd 	.word	0x080078cd
 8006658:	08007815 	.word	0x08007815

0800665c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b0a0      	sub	sp, #128	; 0x80
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800666c:	e853 3f00 	ldrex	r3, [r3]
 8006670:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006672:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006674:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8006678:	67fb      	str	r3, [r7, #124]	; 0x7c
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006682:	66bb      	str	r3, [r7, #104]	; 0x68
 8006684:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006686:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006688:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800668a:	e841 2300 	strex	r3, r2, [r1]
 800668e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006690:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1e6      	bne.n	8006664 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3308      	adds	r3, #8
 800669c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066a0:	e853 3f00 	ldrex	r3, [r3]
 80066a4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80066a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066a8:	f023 0301 	bic.w	r3, r3, #1
 80066ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3308      	adds	r3, #8
 80066b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80066b6:	657a      	str	r2, [r7, #84]	; 0x54
 80066b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80066bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80066c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1e5      	bne.n	8006696 <HAL_UART_Abort+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d118      	bne.n	8006704 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066da:	e853 3f00 	ldrex	r3, [r3]
 80066de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e2:	f023 0310 	bic.w	r3, r3, #16
 80066e6:	677b      	str	r3, [r7, #116]	; 0x74
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	461a      	mov	r2, r3
 80066ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066f0:	643b      	str	r3, [r7, #64]	; 0x40
 80066f2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066f8:	e841 2300 	strex	r3, r2, [r1]
 80066fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1e6      	bne.n	80066d2 <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800670e:	2b80      	cmp	r3, #128	; 0x80
 8006710:	d137      	bne.n	8006782 <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3308      	adds	r3, #8
 8006718:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	61fb      	str	r3, [r7, #28]
   return(result);
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006728:	673b      	str	r3, [r7, #112]	; 0x70
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	3308      	adds	r3, #8
 8006730:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006732:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006734:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006736:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800673a:	e841 2300 	strex	r3, r2, [r1]
 800673e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1e5      	bne.n	8006712 <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800674a:	2b00      	cmp	r3, #0
 800674c:	d019      	beq.n	8006782 <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006752:	2200      	movs	r2, #0
 8006754:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800675a:	4618      	mov	r0, r3
 800675c:	f7fb fea2 	bl	80024a4 <HAL_DMA_Abort>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00d      	beq.n	8006782 <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800676a:	4618      	mov	r0, r3
 800676c:	f7fb ff19 	bl	80025a2 <HAL_DMA_GetError>
 8006770:	4603      	mov	r3, r0
 8006772:	2b20      	cmp	r3, #32
 8006774:	d105      	bne.n	8006782 <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2210      	movs	r2, #16
 800677a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e062      	b.n	8006848 <HAL_UART_Abort+0x1ec>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678c:	2b40      	cmp	r3, #64	; 0x40
 800678e:	d137      	bne.n	8006800 <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3308      	adds	r3, #8
 8006796:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	e853 3f00 	ldrex	r3, [r3]
 800679e:	60bb      	str	r3, [r7, #8]
   return(result);
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	3308      	adds	r3, #8
 80067ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80067b0:	61ba      	str	r2, [r7, #24]
 80067b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b4:	6979      	ldr	r1, [r7, #20]
 80067b6:	69ba      	ldr	r2, [r7, #24]
 80067b8:	e841 2300 	strex	r3, r2, [r1]
 80067bc:	613b      	str	r3, [r7, #16]
   return(result);
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1e5      	bne.n	8006790 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d019      	beq.n	8006800 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d0:	2200      	movs	r2, #0
 80067d2:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d8:	4618      	mov	r0, r3
 80067da:	f7fb fe63 	bl	80024a4 <HAL_DMA_Abort>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00d      	beq.n	8006800 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7fb feda 	bl	80025a2 <HAL_DMA_GetError>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b20      	cmp	r3, #32
 80067f2:	d105      	bne.n	8006800 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2210      	movs	r2, #16
 80067f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e023      	b.n	8006848 <HAL_UART_Abort+0x1ec>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	220f      	movs	r2, #15
 8006816:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	8b1b      	ldrh	r3, [r3, #24]
 800681e:	b29a      	uxth	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f042 0208 	orr.w	r2, r2, #8
 8006828:	b292      	uxth	r2, r2
 800682a:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2220      	movs	r2, #32
 8006830:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2220      	movs	r2, #32
 8006836:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3780      	adds	r7, #128	; 0x80
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b0ba      	sub	sp, #232	; 0xe8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006876:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800687a:	f640 030f 	movw	r3, #2063	; 0x80f
 800687e:	4013      	ands	r3, r2
 8006880:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006884:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006888:	2b00      	cmp	r3, #0
 800688a:	d115      	bne.n	80068b8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800688c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006890:	f003 0320 	and.w	r3, r3, #32
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00f      	beq.n	80068b8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800689c:	f003 0320 	and.w	r3, r3, #32
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d009      	beq.n	80068b8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 82a6 	beq.w	8006dfa <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	4798      	blx	r3
      }
      return;
 80068b6:	e2a0      	b.n	8006dfa <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80068b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 8117 	beq.w	8006af0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80068c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d106      	bne.n	80068dc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80068ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80068d2:	4b85      	ldr	r3, [pc, #532]	; (8006ae8 <HAL_UART_IRQHandler+0x298>)
 80068d4:	4013      	ands	r3, r2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 810a 	beq.w	8006af0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80068dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068e0:	f003 0301 	and.w	r3, r3, #1
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d011      	beq.n	800690c <HAL_UART_IRQHandler+0xbc>
 80068e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00b      	beq.n	800690c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2201      	movs	r2, #1
 80068fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006902:	f043 0201 	orr.w	r2, r3, #1
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800690c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b00      	cmp	r3, #0
 8006916:	d011      	beq.n	800693c <HAL_UART_IRQHandler+0xec>
 8006918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00b      	beq.n	800693c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2202      	movs	r2, #2
 800692a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006932:	f043 0204 	orr.w	r2, r3, #4
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800693c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006940:	f003 0304 	and.w	r3, r3, #4
 8006944:	2b00      	cmp	r3, #0
 8006946:	d011      	beq.n	800696c <HAL_UART_IRQHandler+0x11c>
 8006948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00b      	beq.n	800696c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2204      	movs	r2, #4
 800695a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006962:	f043 0202 	orr.w	r2, r3, #2
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800696c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006970:	f003 0308 	and.w	r3, r3, #8
 8006974:	2b00      	cmp	r3, #0
 8006976:	d017      	beq.n	80069a8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800697c:	f003 0320 	and.w	r3, r3, #32
 8006980:	2b00      	cmp	r3, #0
 8006982:	d105      	bne.n	8006990 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006988:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00b      	beq.n	80069a8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2208      	movs	r2, #8
 8006996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800699e:	f043 0208 	orr.w	r2, r3, #8
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80069a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d012      	beq.n	80069da <HAL_UART_IRQHandler+0x18a>
 80069b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00c      	beq.n	80069da <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069d0:	f043 0220 	orr.w	r2, r3, #32
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 820c 	beq.w	8006dfe <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80069e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ea:	f003 0320 	and.w	r3, r3, #32
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00d      	beq.n	8006a0e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80069f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069f6:	f003 0320 	and.w	r3, r3, #32
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d007      	beq.n	8006a0e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a22:	2b40      	cmp	r3, #64	; 0x40
 8006a24:	d005      	beq.n	8006a32 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d04f      	beq.n	8006ad2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fe75 	bl	8007722 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a42:	2b40      	cmp	r3, #64	; 0x40
 8006a44:	d141      	bne.n	8006aca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3308      	adds	r3, #8
 8006a4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a54:	e853 3f00 	ldrex	r3, [r3]
 8006a58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3308      	adds	r3, #8
 8006a6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1d9      	bne.n	8006a46 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d013      	beq.n	8006ac2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a9e:	4a13      	ldr	r2, [pc, #76]	; (8006aec <HAL_UART_IRQHandler+0x29c>)
 8006aa0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fb fd3a 	bl	8002520 <HAL_DMA_Abort_IT>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d017      	beq.n	8006ae2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006abc:	4610      	mov	r0, r2
 8006abe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac0:	e00f      	b.n	8006ae2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f9b0 	bl	8006e28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac8:	e00b      	b.n	8006ae2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f9ac 	bl	8006e28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad0:	e007      	b.n	8006ae2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f9a8 	bl	8006e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006ae0:	e18d      	b.n	8006dfe <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae2:	bf00      	nop
    return;
 8006ae4:	e18b      	b.n	8006dfe <HAL_UART_IRQHandler+0x5ae>
 8006ae6:	bf00      	nop
 8006ae8:	04000120 	.word	0x04000120
 8006aec:	080077e9 	.word	0x080077e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	f040 8146 	bne.w	8006d86 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006afe:	f003 0310 	and.w	r3, r3, #16
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 813f 	beq.w	8006d86 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b0c:	f003 0310 	and.w	r3, r3, #16
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 8138 	beq.w	8006d86 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2210      	movs	r2, #16
 8006b1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b28:	2b40      	cmp	r3, #64	; 0x40
 8006b2a:	f040 80b4 	bne.w	8006c96 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b3a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f000 815f 	beq.w	8006e02 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	f080 8157 	bcs.w	8006e02 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f040 8085 	bne.w	8006c7a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	461a      	mov	r2, r3
 8006b96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006b9e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ba6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1da      	bne.n	8006b70 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3308      	adds	r3, #8
 8006bc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006bca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bcc:	f023 0301 	bic.w	r3, r3, #1
 8006bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3308      	adds	r3, #8
 8006bda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006bde:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006be2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006be6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006bea:	e841 2300 	strex	r3, r2, [r1]
 8006bee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006bf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1e1      	bne.n	8006bba <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3308      	adds	r3, #8
 8006bfc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c00:	e853 3f00 	ldrex	r3, [r3]
 8006c04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3308      	adds	r3, #8
 8006c16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c22:	e841 2300 	strex	r3, r2, [r1]
 8006c26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1e3      	bne.n	8006bf6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2220      	movs	r2, #32
 8006c32:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c42:	e853 3f00 	ldrex	r3, [r3]
 8006c46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c4a:	f023 0310 	bic.w	r3, r3, #16
 8006c4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	461a      	mov	r2, r3
 8006c58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c5e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c64:	e841 2300 	strex	r3, r2, [r1]
 8006c68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1e4      	bne.n	8006c3a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fb fc15 	bl	80024a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f8d4 	bl	8006e3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c94:	e0b5      	b.n	8006e02 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f000 80a7 	beq.w	8006e06 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006cb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 80a2 	beq.w	8006e06 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cca:	e853 3f00 	ldrex	r3, [r3]
 8006cce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ce4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ce6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cec:	e841 2300 	strex	r3, r2, [r1]
 8006cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e4      	bne.n	8006cc2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3308      	adds	r3, #8
 8006cfe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	e853 3f00 	ldrex	r3, [r3]
 8006d06:	623b      	str	r3, [r7, #32]
   return(result);
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	f023 0301 	bic.w	r3, r3, #1
 8006d0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3308      	adds	r3, #8
 8006d18:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d1c:	633a      	str	r2, [r7, #48]	; 0x30
 8006d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d24:	e841 2300 	strex	r3, r2, [r1]
 8006d28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1e3      	bne.n	8006cf8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2220      	movs	r2, #32
 8006d34:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	e853 3f00 	ldrex	r3, [r3]
 8006d4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f023 0310 	bic.w	r3, r3, #16
 8006d56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006d64:	61fb      	str	r3, [r7, #28]
 8006d66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d68:	69b9      	ldr	r1, [r7, #24]
 8006d6a:	69fa      	ldr	r2, [r7, #28]
 8006d6c:	e841 2300 	strex	r3, r2, [r1]
 8006d70:	617b      	str	r3, [r7, #20]
   return(result);
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1e4      	bne.n	8006d42 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f85c 	bl	8006e3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d84:	e03f      	b.n	8006e06 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00e      	beq.n	8006db0 <HAL_UART_IRQHandler+0x560>
 8006d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d008      	beq.n	8006db0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006da6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 fe19 	bl	80079e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006dae:	e02d      	b.n	8006e0c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00e      	beq.n	8006dda <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d008      	beq.n	8006dda <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d01c      	beq.n	8006e0a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	4798      	blx	r3
    }
    return;
 8006dd8:	e017      	b.n	8006e0a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d012      	beq.n	8006e0c <HAL_UART_IRQHandler+0x5bc>
 8006de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00c      	beq.n	8006e0c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fdca 	bl	800798c <UART_EndTransmit_IT>
    return;
 8006df8:	e008      	b.n	8006e0c <HAL_UART_IRQHandler+0x5bc>
      return;
 8006dfa:	bf00      	nop
 8006dfc:	e006      	b.n	8006e0c <HAL_UART_IRQHandler+0x5bc>
    return;
 8006dfe:	bf00      	nop
 8006e00:	e004      	b.n	8006e0c <HAL_UART_IRQHandler+0x5bc>
      return;
 8006e02:	bf00      	nop
 8006e04:	e002      	b.n	8006e0c <HAL_UART_IRQHandler+0x5bc>
      return;
 8006e06:	bf00      	nop
 8006e08:	e000      	b.n	8006e0c <HAL_UART_IRQHandler+0x5bc>
    return;
 8006e0a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006e0c:	37e8      	adds	r7, #232	; 0xe8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop

08006e14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	460b      	mov	r3, r1
 8006e46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e58:	b08a      	sub	sp, #40	; 0x28
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	689a      	ldr	r2, [r3, #8]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	431a      	orrs	r2, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	695b      	ldr	r3, [r3, #20]
 8006e72:	431a      	orrs	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	4ba4      	ldr	r3, [pc, #656]	; (8007114 <UART_SetConfig+0x2c0>)
 8006e84:	4013      	ands	r3, r2
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	6812      	ldr	r2, [r2, #0]
 8006e8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e8c:	430b      	orrs	r3, r1
 8006e8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	68da      	ldr	r2, [r3, #12]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a99      	ldr	r2, [pc, #612]	; (8007118 <UART_SetConfig+0x2c4>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d004      	beq.n	8006ec0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a90      	ldr	r2, [pc, #576]	; (800711c <UART_SetConfig+0x2c8>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d126      	bne.n	8006f2c <UART_SetConfig+0xd8>
 8006ede:	4b90      	ldr	r3, [pc, #576]	; (8007120 <UART_SetConfig+0x2cc>)
 8006ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ee4:	f003 0303 	and.w	r3, r3, #3
 8006ee8:	2b03      	cmp	r3, #3
 8006eea:	d81b      	bhi.n	8006f24 <UART_SetConfig+0xd0>
 8006eec:	a201      	add	r2, pc, #4	; (adr r2, 8006ef4 <UART_SetConfig+0xa0>)
 8006eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef2:	bf00      	nop
 8006ef4:	08006f05 	.word	0x08006f05
 8006ef8:	08006f15 	.word	0x08006f15
 8006efc:	08006f0d 	.word	0x08006f0d
 8006f00:	08006f1d 	.word	0x08006f1d
 8006f04:	2301      	movs	r3, #1
 8006f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f0a:	e116      	b.n	800713a <UART_SetConfig+0x2e6>
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f12:	e112      	b.n	800713a <UART_SetConfig+0x2e6>
 8006f14:	2304      	movs	r3, #4
 8006f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f1a:	e10e      	b.n	800713a <UART_SetConfig+0x2e6>
 8006f1c:	2308      	movs	r3, #8
 8006f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f22:	e10a      	b.n	800713a <UART_SetConfig+0x2e6>
 8006f24:	2310      	movs	r3, #16
 8006f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f2a:	e106      	b.n	800713a <UART_SetConfig+0x2e6>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a7c      	ldr	r2, [pc, #496]	; (8007124 <UART_SetConfig+0x2d0>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d138      	bne.n	8006fa8 <UART_SetConfig+0x154>
 8006f36:	4b7a      	ldr	r3, [pc, #488]	; (8007120 <UART_SetConfig+0x2cc>)
 8006f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f3c:	f003 030c 	and.w	r3, r3, #12
 8006f40:	2b0c      	cmp	r3, #12
 8006f42:	d82d      	bhi.n	8006fa0 <UART_SetConfig+0x14c>
 8006f44:	a201      	add	r2, pc, #4	; (adr r2, 8006f4c <UART_SetConfig+0xf8>)
 8006f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4a:	bf00      	nop
 8006f4c:	08006f81 	.word	0x08006f81
 8006f50:	08006fa1 	.word	0x08006fa1
 8006f54:	08006fa1 	.word	0x08006fa1
 8006f58:	08006fa1 	.word	0x08006fa1
 8006f5c:	08006f91 	.word	0x08006f91
 8006f60:	08006fa1 	.word	0x08006fa1
 8006f64:	08006fa1 	.word	0x08006fa1
 8006f68:	08006fa1 	.word	0x08006fa1
 8006f6c:	08006f89 	.word	0x08006f89
 8006f70:	08006fa1 	.word	0x08006fa1
 8006f74:	08006fa1 	.word	0x08006fa1
 8006f78:	08006fa1 	.word	0x08006fa1
 8006f7c:	08006f99 	.word	0x08006f99
 8006f80:	2300      	movs	r3, #0
 8006f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f86:	e0d8      	b.n	800713a <UART_SetConfig+0x2e6>
 8006f88:	2302      	movs	r3, #2
 8006f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f8e:	e0d4      	b.n	800713a <UART_SetConfig+0x2e6>
 8006f90:	2304      	movs	r3, #4
 8006f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f96:	e0d0      	b.n	800713a <UART_SetConfig+0x2e6>
 8006f98:	2308      	movs	r3, #8
 8006f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f9e:	e0cc      	b.n	800713a <UART_SetConfig+0x2e6>
 8006fa0:	2310      	movs	r3, #16
 8006fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fa6:	e0c8      	b.n	800713a <UART_SetConfig+0x2e6>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a5e      	ldr	r2, [pc, #376]	; (8007128 <UART_SetConfig+0x2d4>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d125      	bne.n	8006ffe <UART_SetConfig+0x1aa>
 8006fb2:	4b5b      	ldr	r3, [pc, #364]	; (8007120 <UART_SetConfig+0x2cc>)
 8006fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006fbc:	2b30      	cmp	r3, #48	; 0x30
 8006fbe:	d016      	beq.n	8006fee <UART_SetConfig+0x19a>
 8006fc0:	2b30      	cmp	r3, #48	; 0x30
 8006fc2:	d818      	bhi.n	8006ff6 <UART_SetConfig+0x1a2>
 8006fc4:	2b20      	cmp	r3, #32
 8006fc6:	d00a      	beq.n	8006fde <UART_SetConfig+0x18a>
 8006fc8:	2b20      	cmp	r3, #32
 8006fca:	d814      	bhi.n	8006ff6 <UART_SetConfig+0x1a2>
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <UART_SetConfig+0x182>
 8006fd0:	2b10      	cmp	r3, #16
 8006fd2:	d008      	beq.n	8006fe6 <UART_SetConfig+0x192>
 8006fd4:	e00f      	b.n	8006ff6 <UART_SetConfig+0x1a2>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fdc:	e0ad      	b.n	800713a <UART_SetConfig+0x2e6>
 8006fde:	2302      	movs	r3, #2
 8006fe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fe4:	e0a9      	b.n	800713a <UART_SetConfig+0x2e6>
 8006fe6:	2304      	movs	r3, #4
 8006fe8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fec:	e0a5      	b.n	800713a <UART_SetConfig+0x2e6>
 8006fee:	2308      	movs	r3, #8
 8006ff0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ff4:	e0a1      	b.n	800713a <UART_SetConfig+0x2e6>
 8006ff6:	2310      	movs	r3, #16
 8006ff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ffc:	e09d      	b.n	800713a <UART_SetConfig+0x2e6>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a4a      	ldr	r2, [pc, #296]	; (800712c <UART_SetConfig+0x2d8>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d125      	bne.n	8007054 <UART_SetConfig+0x200>
 8007008:	4b45      	ldr	r3, [pc, #276]	; (8007120 <UART_SetConfig+0x2cc>)
 800700a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800700e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007012:	2bc0      	cmp	r3, #192	; 0xc0
 8007014:	d016      	beq.n	8007044 <UART_SetConfig+0x1f0>
 8007016:	2bc0      	cmp	r3, #192	; 0xc0
 8007018:	d818      	bhi.n	800704c <UART_SetConfig+0x1f8>
 800701a:	2b80      	cmp	r3, #128	; 0x80
 800701c:	d00a      	beq.n	8007034 <UART_SetConfig+0x1e0>
 800701e:	2b80      	cmp	r3, #128	; 0x80
 8007020:	d814      	bhi.n	800704c <UART_SetConfig+0x1f8>
 8007022:	2b00      	cmp	r3, #0
 8007024:	d002      	beq.n	800702c <UART_SetConfig+0x1d8>
 8007026:	2b40      	cmp	r3, #64	; 0x40
 8007028:	d008      	beq.n	800703c <UART_SetConfig+0x1e8>
 800702a:	e00f      	b.n	800704c <UART_SetConfig+0x1f8>
 800702c:	2300      	movs	r3, #0
 800702e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007032:	e082      	b.n	800713a <UART_SetConfig+0x2e6>
 8007034:	2302      	movs	r3, #2
 8007036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800703a:	e07e      	b.n	800713a <UART_SetConfig+0x2e6>
 800703c:	2304      	movs	r3, #4
 800703e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007042:	e07a      	b.n	800713a <UART_SetConfig+0x2e6>
 8007044:	2308      	movs	r3, #8
 8007046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800704a:	e076      	b.n	800713a <UART_SetConfig+0x2e6>
 800704c:	2310      	movs	r3, #16
 800704e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007052:	e072      	b.n	800713a <UART_SetConfig+0x2e6>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a35      	ldr	r2, [pc, #212]	; (8007130 <UART_SetConfig+0x2dc>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d12a      	bne.n	80070b4 <UART_SetConfig+0x260>
 800705e:	4b30      	ldr	r3, [pc, #192]	; (8007120 <UART_SetConfig+0x2cc>)
 8007060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007064:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007068:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800706c:	d01a      	beq.n	80070a4 <UART_SetConfig+0x250>
 800706e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007072:	d81b      	bhi.n	80070ac <UART_SetConfig+0x258>
 8007074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007078:	d00c      	beq.n	8007094 <UART_SetConfig+0x240>
 800707a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800707e:	d815      	bhi.n	80070ac <UART_SetConfig+0x258>
 8007080:	2b00      	cmp	r3, #0
 8007082:	d003      	beq.n	800708c <UART_SetConfig+0x238>
 8007084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007088:	d008      	beq.n	800709c <UART_SetConfig+0x248>
 800708a:	e00f      	b.n	80070ac <UART_SetConfig+0x258>
 800708c:	2300      	movs	r3, #0
 800708e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007092:	e052      	b.n	800713a <UART_SetConfig+0x2e6>
 8007094:	2302      	movs	r3, #2
 8007096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800709a:	e04e      	b.n	800713a <UART_SetConfig+0x2e6>
 800709c:	2304      	movs	r3, #4
 800709e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070a2:	e04a      	b.n	800713a <UART_SetConfig+0x2e6>
 80070a4:	2308      	movs	r3, #8
 80070a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070aa:	e046      	b.n	800713a <UART_SetConfig+0x2e6>
 80070ac:	2310      	movs	r3, #16
 80070ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070b2:	e042      	b.n	800713a <UART_SetConfig+0x2e6>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a17      	ldr	r2, [pc, #92]	; (8007118 <UART_SetConfig+0x2c4>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d13a      	bne.n	8007134 <UART_SetConfig+0x2e0>
 80070be:	4b18      	ldr	r3, [pc, #96]	; (8007120 <UART_SetConfig+0x2cc>)
 80070c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80070c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070cc:	d01a      	beq.n	8007104 <UART_SetConfig+0x2b0>
 80070ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070d2:	d81b      	bhi.n	800710c <UART_SetConfig+0x2b8>
 80070d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070d8:	d00c      	beq.n	80070f4 <UART_SetConfig+0x2a0>
 80070da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070de:	d815      	bhi.n	800710c <UART_SetConfig+0x2b8>
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d003      	beq.n	80070ec <UART_SetConfig+0x298>
 80070e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070e8:	d008      	beq.n	80070fc <UART_SetConfig+0x2a8>
 80070ea:	e00f      	b.n	800710c <UART_SetConfig+0x2b8>
 80070ec:	2300      	movs	r3, #0
 80070ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070f2:	e022      	b.n	800713a <UART_SetConfig+0x2e6>
 80070f4:	2302      	movs	r3, #2
 80070f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070fa:	e01e      	b.n	800713a <UART_SetConfig+0x2e6>
 80070fc:	2304      	movs	r3, #4
 80070fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007102:	e01a      	b.n	800713a <UART_SetConfig+0x2e6>
 8007104:	2308      	movs	r3, #8
 8007106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800710a:	e016      	b.n	800713a <UART_SetConfig+0x2e6>
 800710c:	2310      	movs	r3, #16
 800710e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007112:	e012      	b.n	800713a <UART_SetConfig+0x2e6>
 8007114:	efff69f3 	.word	0xefff69f3
 8007118:	40008000 	.word	0x40008000
 800711c:	40013800 	.word	0x40013800
 8007120:	40021000 	.word	0x40021000
 8007124:	40004400 	.word	0x40004400
 8007128:	40004800 	.word	0x40004800
 800712c:	40004c00 	.word	0x40004c00
 8007130:	40005000 	.word	0x40005000
 8007134:	2310      	movs	r3, #16
 8007136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a9f      	ldr	r2, [pc, #636]	; (80073bc <UART_SetConfig+0x568>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d17a      	bne.n	800723a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007144:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007148:	2b08      	cmp	r3, #8
 800714a:	d824      	bhi.n	8007196 <UART_SetConfig+0x342>
 800714c:	a201      	add	r2, pc, #4	; (adr r2, 8007154 <UART_SetConfig+0x300>)
 800714e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007152:	bf00      	nop
 8007154:	08007179 	.word	0x08007179
 8007158:	08007197 	.word	0x08007197
 800715c:	08007181 	.word	0x08007181
 8007160:	08007197 	.word	0x08007197
 8007164:	08007187 	.word	0x08007187
 8007168:	08007197 	.word	0x08007197
 800716c:	08007197 	.word	0x08007197
 8007170:	08007197 	.word	0x08007197
 8007174:	0800718f 	.word	0x0800718f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007178:	f7fc fe28 	bl	8003dcc <HAL_RCC_GetPCLK1Freq>
 800717c:	61f8      	str	r0, [r7, #28]
        break;
 800717e:	e010      	b.n	80071a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007180:	4b8f      	ldr	r3, [pc, #572]	; (80073c0 <UART_SetConfig+0x56c>)
 8007182:	61fb      	str	r3, [r7, #28]
        break;
 8007184:	e00d      	b.n	80071a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007186:	f7fc fd89 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 800718a:	61f8      	str	r0, [r7, #28]
        break;
 800718c:	e009      	b.n	80071a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800718e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007192:	61fb      	str	r3, [r7, #28]
        break;
 8007194:	e005      	b.n	80071a2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007196:	2300      	movs	r3, #0
 8007198:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80071a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 80fb 	beq.w	80073a0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	685a      	ldr	r2, [r3, #4]
 80071ae:	4613      	mov	r3, r2
 80071b0:	005b      	lsls	r3, r3, #1
 80071b2:	4413      	add	r3, r2
 80071b4:	69fa      	ldr	r2, [r7, #28]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d305      	bcc.n	80071c6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80071c0:	69fa      	ldr	r2, [r7, #28]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d903      	bls.n	80071ce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80071cc:	e0e8      	b.n	80073a0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	2200      	movs	r2, #0
 80071d2:	461c      	mov	r4, r3
 80071d4:	4615      	mov	r5, r2
 80071d6:	f04f 0200 	mov.w	r2, #0
 80071da:	f04f 0300 	mov.w	r3, #0
 80071de:	022b      	lsls	r3, r5, #8
 80071e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80071e4:	0222      	lsls	r2, r4, #8
 80071e6:	68f9      	ldr	r1, [r7, #12]
 80071e8:	6849      	ldr	r1, [r1, #4]
 80071ea:	0849      	lsrs	r1, r1, #1
 80071ec:	2000      	movs	r0, #0
 80071ee:	4688      	mov	r8, r1
 80071f0:	4681      	mov	r9, r0
 80071f2:	eb12 0a08 	adds.w	sl, r2, r8
 80071f6:	eb43 0b09 	adc.w	fp, r3, r9
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	603b      	str	r3, [r7, #0]
 8007202:	607a      	str	r2, [r7, #4]
 8007204:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007208:	4650      	mov	r0, sl
 800720a:	4659      	mov	r1, fp
 800720c:	f7f9 f838 	bl	8000280 <__aeabi_uldivmod>
 8007210:	4602      	mov	r2, r0
 8007212:	460b      	mov	r3, r1
 8007214:	4613      	mov	r3, r2
 8007216:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800721e:	d308      	bcc.n	8007232 <UART_SetConfig+0x3de>
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007226:	d204      	bcs.n	8007232 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	60da      	str	r2, [r3, #12]
 8007230:	e0b6      	b.n	80073a0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007238:	e0b2      	b.n	80073a0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007242:	d15e      	bne.n	8007302 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007244:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007248:	2b08      	cmp	r3, #8
 800724a:	d828      	bhi.n	800729e <UART_SetConfig+0x44a>
 800724c:	a201      	add	r2, pc, #4	; (adr r2, 8007254 <UART_SetConfig+0x400>)
 800724e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007252:	bf00      	nop
 8007254:	08007279 	.word	0x08007279
 8007258:	08007281 	.word	0x08007281
 800725c:	08007289 	.word	0x08007289
 8007260:	0800729f 	.word	0x0800729f
 8007264:	0800728f 	.word	0x0800728f
 8007268:	0800729f 	.word	0x0800729f
 800726c:	0800729f 	.word	0x0800729f
 8007270:	0800729f 	.word	0x0800729f
 8007274:	08007297 	.word	0x08007297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007278:	f7fc fda8 	bl	8003dcc <HAL_RCC_GetPCLK1Freq>
 800727c:	61f8      	str	r0, [r7, #28]
        break;
 800727e:	e014      	b.n	80072aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007280:	f7fc fdba 	bl	8003df8 <HAL_RCC_GetPCLK2Freq>
 8007284:	61f8      	str	r0, [r7, #28]
        break;
 8007286:	e010      	b.n	80072aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007288:	4b4d      	ldr	r3, [pc, #308]	; (80073c0 <UART_SetConfig+0x56c>)
 800728a:	61fb      	str	r3, [r7, #28]
        break;
 800728c:	e00d      	b.n	80072aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800728e:	f7fc fd05 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 8007292:	61f8      	str	r0, [r7, #28]
        break;
 8007294:	e009      	b.n	80072aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800729a:	61fb      	str	r3, [r7, #28]
        break;
 800729c:	e005      	b.n	80072aa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800729e:	2300      	movs	r3, #0
 80072a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80072a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d077      	beq.n	80073a0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	005a      	lsls	r2, r3, #1
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	085b      	lsrs	r3, r3, #1
 80072ba:	441a      	add	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	2b0f      	cmp	r3, #15
 80072ca:	d916      	bls.n	80072fa <UART_SetConfig+0x4a6>
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072d2:	d212      	bcs.n	80072fa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	f023 030f 	bic.w	r3, r3, #15
 80072dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	085b      	lsrs	r3, r3, #1
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	f003 0307 	and.w	r3, r3, #7
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	8afb      	ldrh	r3, [r7, #22]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	8afa      	ldrh	r2, [r7, #22]
 80072f6:	60da      	str	r2, [r3, #12]
 80072f8:	e052      	b.n	80073a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007300:	e04e      	b.n	80073a0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007302:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007306:	2b08      	cmp	r3, #8
 8007308:	d827      	bhi.n	800735a <UART_SetConfig+0x506>
 800730a:	a201      	add	r2, pc, #4	; (adr r2, 8007310 <UART_SetConfig+0x4bc>)
 800730c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007310:	08007335 	.word	0x08007335
 8007314:	0800733d 	.word	0x0800733d
 8007318:	08007345 	.word	0x08007345
 800731c:	0800735b 	.word	0x0800735b
 8007320:	0800734b 	.word	0x0800734b
 8007324:	0800735b 	.word	0x0800735b
 8007328:	0800735b 	.word	0x0800735b
 800732c:	0800735b 	.word	0x0800735b
 8007330:	08007353 	.word	0x08007353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007334:	f7fc fd4a 	bl	8003dcc <HAL_RCC_GetPCLK1Freq>
 8007338:	61f8      	str	r0, [r7, #28]
        break;
 800733a:	e014      	b.n	8007366 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800733c:	f7fc fd5c 	bl	8003df8 <HAL_RCC_GetPCLK2Freq>
 8007340:	61f8      	str	r0, [r7, #28]
        break;
 8007342:	e010      	b.n	8007366 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007344:	4b1e      	ldr	r3, [pc, #120]	; (80073c0 <UART_SetConfig+0x56c>)
 8007346:	61fb      	str	r3, [r7, #28]
        break;
 8007348:	e00d      	b.n	8007366 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800734a:	f7fc fca7 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 800734e:	61f8      	str	r0, [r7, #28]
        break;
 8007350:	e009      	b.n	8007366 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007356:	61fb      	str	r3, [r7, #28]
        break;
 8007358:	e005      	b.n	8007366 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800735a:	2300      	movs	r3, #0
 800735c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007364:	bf00      	nop
    }

    if (pclk != 0U)
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d019      	beq.n	80073a0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	085a      	lsrs	r2, r3, #1
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	441a      	add	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	fbb2 f3f3 	udiv	r3, r2, r3
 800737e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	2b0f      	cmp	r3, #15
 8007384:	d909      	bls.n	800739a <UART_SetConfig+0x546>
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800738c:	d205      	bcs.n	800739a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	b29a      	uxth	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	60da      	str	r2, [r3, #12]
 8007398:	e002      	b.n	80073a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80073ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3728      	adds	r7, #40	; 0x28
 80073b4:	46bd      	mov	sp, r7
 80073b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073ba:	bf00      	nop
 80073bc:	40008000 	.word	0x40008000
 80073c0:	00f42400 	.word	0x00f42400

080073c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d0:	f003 0301 	and.w	r3, r3, #1
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00a      	beq.n	80073ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	430a      	orrs	r2, r1
 80073ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f2:	f003 0302 	and.w	r3, r3, #2
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00a      	beq.n	8007410 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	430a      	orrs	r2, r1
 800740e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007414:	f003 0304 	and.w	r3, r3, #4
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00a      	beq.n	8007432 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	430a      	orrs	r2, r1
 8007430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007436:	f003 0308 	and.w	r3, r3, #8
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00a      	beq.n	8007454 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	430a      	orrs	r2, r1
 8007452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007458:	f003 0310 	and.w	r3, r3, #16
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00a      	beq.n	8007476 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	430a      	orrs	r2, r1
 8007474:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747a:	f003 0320 	and.w	r3, r3, #32
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00a      	beq.n	8007498 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	430a      	orrs	r2, r1
 8007496:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d01a      	beq.n	80074da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	430a      	orrs	r2, r1
 80074b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074c2:	d10a      	bne.n	80074da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	430a      	orrs	r2, r1
 80074d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00a      	beq.n	80074fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	430a      	orrs	r2, r1
 80074fa:	605a      	str	r2, [r3, #4]
  }
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af02      	add	r7, sp, #8
 800750e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007518:	f7fa fda6 	bl	8002068 <HAL_GetTick>
 800751c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0308 	and.w	r3, r3, #8
 8007528:	2b08      	cmp	r3, #8
 800752a:	d10e      	bne.n	800754a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800752c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f82d 	bl	800759a <UART_WaitOnFlagUntilTimeout>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e023      	b.n	8007592 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0304 	and.w	r3, r3, #4
 8007554:	2b04      	cmp	r3, #4
 8007556:	d10e      	bne.n	8007576 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007558:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f817 	bl	800759a <UART_WaitOnFlagUntilTimeout>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e00d      	b.n	8007592 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2220      	movs	r2, #32
 800757a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2220      	movs	r2, #32
 8007580:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b09c      	sub	sp, #112	; 0x70
 800759e:	af00      	add	r7, sp, #0
 80075a0:	60f8      	str	r0, [r7, #12]
 80075a2:	60b9      	str	r1, [r7, #8]
 80075a4:	603b      	str	r3, [r7, #0]
 80075a6:	4613      	mov	r3, r2
 80075a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075aa:	e0a5      	b.n	80076f8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b2:	f000 80a1 	beq.w	80076f8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075b6:	f7fa fd57 	bl	8002068 <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d302      	bcc.n	80075cc <UART_WaitOnFlagUntilTimeout+0x32>
 80075c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d13e      	bne.n	800764a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075d4:	e853 3f00 	ldrex	r3, [r3]
 80075d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80075da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075e0:	667b      	str	r3, [r7, #100]	; 0x64
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	461a      	mov	r2, r3
 80075e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075ec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80075f2:	e841 2300 	strex	r3, r2, [r1]
 80075f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80075f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1e6      	bne.n	80075cc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3308      	adds	r3, #8
 8007604:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007608:	e853 3f00 	ldrex	r3, [r3]
 800760c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800760e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007610:	f023 0301 	bic.w	r3, r3, #1
 8007614:	663b      	str	r3, [r7, #96]	; 0x60
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3308      	adds	r3, #8
 800761c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800761e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007620:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007622:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007624:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007626:	e841 2300 	strex	r3, r2, [r1]
 800762a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800762c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1e5      	bne.n	80075fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2220      	movs	r2, #32
 8007636:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2220      	movs	r2, #32
 800763c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e067      	b.n	800771a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0304 	and.w	r3, r3, #4
 8007654:	2b00      	cmp	r3, #0
 8007656:	d04f      	beq.n	80076f8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007666:	d147      	bne.n	80076f8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007670:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767a:	e853 3f00 	ldrex	r3, [r3]
 800767e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007686:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	461a      	mov	r2, r3
 800768e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007690:	637b      	str	r3, [r7, #52]	; 0x34
 8007692:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007694:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007698:	e841 2300 	strex	r3, r2, [r1]
 800769c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800769e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1e6      	bne.n	8007672 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3308      	adds	r3, #8
 80076aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	e853 3f00 	ldrex	r3, [r3]
 80076b2:	613b      	str	r3, [r7, #16]
   return(result);
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	f023 0301 	bic.w	r3, r3, #1
 80076ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3308      	adds	r3, #8
 80076c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80076c4:	623a      	str	r2, [r7, #32]
 80076c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c8:	69f9      	ldr	r1, [r7, #28]
 80076ca:	6a3a      	ldr	r2, [r7, #32]
 80076cc:	e841 2300 	strex	r3, r2, [r1]
 80076d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d1e5      	bne.n	80076a4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2220      	movs	r2, #32
 80076dc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2220      	movs	r2, #32
 80076e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2220      	movs	r2, #32
 80076e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e010      	b.n	800771a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	69da      	ldr	r2, [r3, #28]
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	4013      	ands	r3, r2
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	429a      	cmp	r2, r3
 8007706:	bf0c      	ite	eq
 8007708:	2301      	moveq	r3, #1
 800770a:	2300      	movne	r3, #0
 800770c:	b2db      	uxtb	r3, r3
 800770e:	461a      	mov	r2, r3
 8007710:	79fb      	ldrb	r3, [r7, #7]
 8007712:	429a      	cmp	r2, r3
 8007714:	f43f af4a 	beq.w	80075ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3770      	adds	r7, #112	; 0x70
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007722:	b480      	push	{r7}
 8007724:	b095      	sub	sp, #84	; 0x54
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007732:	e853 3f00 	ldrex	r3, [r3]
 8007736:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800773e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	461a      	mov	r2, r3
 8007746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007748:	643b      	str	r3, [r7, #64]	; 0x40
 800774a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800774e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007750:	e841 2300 	strex	r3, r2, [r1]
 8007754:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1e6      	bne.n	800772a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	3308      	adds	r3, #8
 8007762:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	e853 3f00 	ldrex	r3, [r3]
 800776a:	61fb      	str	r3, [r7, #28]
   return(result);
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	f023 0301 	bic.w	r3, r3, #1
 8007772:	64bb      	str	r3, [r7, #72]	; 0x48
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	3308      	adds	r3, #8
 800777a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800777c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800777e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007784:	e841 2300 	strex	r3, r2, [r1]
 8007788:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1e5      	bne.n	800775c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007794:	2b01      	cmp	r3, #1
 8007796:	d118      	bne.n	80077ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	e853 3f00 	ldrex	r3, [r3]
 80077a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f023 0310 	bic.w	r3, r3, #16
 80077ac:	647b      	str	r3, [r7, #68]	; 0x44
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	461a      	mov	r2, r3
 80077b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077b6:	61bb      	str	r3, [r7, #24]
 80077b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ba:	6979      	ldr	r1, [r7, #20]
 80077bc:	69ba      	ldr	r2, [r7, #24]
 80077be:	e841 2300 	strex	r3, r2, [r1]
 80077c2:	613b      	str	r3, [r7, #16]
   return(result);
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1e6      	bne.n	8007798 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2220      	movs	r2, #32
 80077ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	665a      	str	r2, [r3, #100]	; 0x64
}
 80077dc:	bf00      	nop
 80077de:	3754      	adds	r7, #84	; 0x54
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f7ff fb0e 	bl	8006e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800780c:	bf00      	nop
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007814:	b480      	push	{r7}
 8007816:	b08f      	sub	sp, #60	; 0x3c
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007820:	2b21      	cmp	r3, #33	; 0x21
 8007822:	d14d      	bne.n	80078c0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800782a:	b29b      	uxth	r3, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	d132      	bne.n	8007896 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	e853 3f00 	ldrex	r3, [r3]
 800783c:	61fb      	str	r3, [r7, #28]
   return(result);
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007844:	637b      	str	r3, [r7, #52]	; 0x34
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	461a      	mov	r2, r3
 800784c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800784e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007850:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007852:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007856:	e841 2300 	strex	r3, r2, [r1]
 800785a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1e6      	bne.n	8007830 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	e853 3f00 	ldrex	r3, [r3]
 800786e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007876:	633b      	str	r3, [r7, #48]	; 0x30
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	461a      	mov	r2, r3
 800787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007880:	61bb      	str	r3, [r7, #24]
 8007882:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007884:	6979      	ldr	r1, [r7, #20]
 8007886:	69ba      	ldr	r2, [r7, #24]
 8007888:	e841 2300 	strex	r3, r2, [r1]
 800788c:	613b      	str	r3, [r7, #16]
   return(result);
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1e6      	bne.n	8007862 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007894:	e014      	b.n	80078c0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800789a:	781a      	ldrb	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	b292      	uxth	r2, r2
 80078a2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a8:	1c5a      	adds	r2, r3, #1
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	3b01      	subs	r3, #1
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80078c0:	bf00      	nop
 80078c2:	373c      	adds	r7, #60	; 0x3c
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b091      	sub	sp, #68	; 0x44
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078d8:	2b21      	cmp	r3, #33	; 0x21
 80078da:	d151      	bne.n	8007980 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d132      	bne.n	800794e <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f0:	e853 3f00 	ldrex	r3, [r3]
 80078f4:	623b      	str	r3, [r7, #32]
   return(result);
 80078f6:	6a3b      	ldr	r3, [r7, #32]
 80078f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	461a      	mov	r2, r3
 8007904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007906:	633b      	str	r3, [r7, #48]	; 0x30
 8007908:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800790c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800790e:	e841 2300 	strex	r3, r2, [r1]
 8007912:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1e6      	bne.n	80078e8 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	e853 3f00 	ldrex	r3, [r3]
 8007926:	60fb      	str	r3, [r7, #12]
   return(result);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800792e:	637b      	str	r3, [r7, #52]	; 0x34
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	461a      	mov	r2, r3
 8007936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007938:	61fb      	str	r3, [r7, #28]
 800793a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793c:	69b9      	ldr	r1, [r7, #24]
 800793e:	69fa      	ldr	r2, [r7, #28]
 8007940:	e841 2300 	strex	r3, r2, [r1]
 8007944:	617b      	str	r3, [r7, #20]
   return(result);
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1e6      	bne.n	800791a <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800794c:	e018      	b.n	8007980 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007952:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007956:	881a      	ldrh	r2, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007960:	b292      	uxth	r2, r2
 8007962:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007968:	1c9a      	adds	r2, r3, #2
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007974:	b29b      	uxth	r3, r3
 8007976:	3b01      	subs	r3, #1
 8007978:	b29a      	uxth	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007980:	bf00      	nop
 8007982:	3744      	adds	r7, #68	; 0x44
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b088      	sub	sp, #32
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	e853 3f00 	ldrex	r3, [r3]
 80079a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079a8:	61fb      	str	r3, [r7, #28]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	461a      	mov	r2, r3
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	61bb      	str	r3, [r7, #24]
 80079b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b6:	6979      	ldr	r1, [r7, #20]
 80079b8:	69ba      	ldr	r2, [r7, #24]
 80079ba:	e841 2300 	strex	r3, r2, [r1]
 80079be:	613b      	str	r3, [r7, #16]
   return(result);
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1e6      	bne.n	8007994 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2220      	movs	r2, #32
 80079ca:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f7ff fa1e 	bl	8006e14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079d8:	bf00      	nop
 80079da:	3720      	adds	r7, #32
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079f4:	b084      	sub	sp, #16
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b084      	sub	sp, #16
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
 80079fe:	f107 001c 	add.w	r0, r7, #28
 8007a02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fa70 	bl	8007ef8 <USB_CoreReset>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d106      	bne.n	8007a30 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	639a      	str	r2, [r3, #56]	; 0x38
 8007a2e:	e005      	b.n	8007a3c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a48:	b004      	add	sp, #16
 8007a4a:	4770      	bx	lr

08007a4c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f023 0201 	bic.w	r2, r3, #1
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	370c      	adds	r7, #12
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b084      	sub	sp, #16
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	460b      	mov	r3, r1
 8007a78:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a8a:	78fb      	ldrb	r3, [r7, #3]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d115      	bne.n	8007abc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a9c:	2001      	movs	r0, #1
 8007a9e:	f7fa faef 	bl	8002080 <HAL_Delay>
      ms++;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fa17 	bl	8007edc <USB_GetMode>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d01e      	beq.n	8007af2 <USB_SetCurrentMode+0x84>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2b31      	cmp	r3, #49	; 0x31
 8007ab8:	d9f0      	bls.n	8007a9c <USB_SetCurrentMode+0x2e>
 8007aba:	e01a      	b.n	8007af2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007abc:	78fb      	ldrb	r3, [r7, #3]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d115      	bne.n	8007aee <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007ace:	2001      	movs	r0, #1
 8007ad0:	f7fa fad6 	bl	8002080 <HAL_Delay>
      ms++;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f9fe 	bl	8007edc <USB_GetMode>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d005      	beq.n	8007af2 <USB_SetCurrentMode+0x84>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2b31      	cmp	r3, #49	; 0x31
 8007aea:	d9f0      	bls.n	8007ace <USB_SetCurrentMode+0x60>
 8007aec:	e001      	b.n	8007af2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e005      	b.n	8007afe <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2b32      	cmp	r3, #50	; 0x32
 8007af6:	d101      	bne.n	8007afc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e000      	b.n	8007afe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
	...

08007b08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b08:	b084      	sub	sp, #16
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b086      	sub	sp, #24
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007b16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007b22:	2300      	movs	r3, #0
 8007b24:	613b      	str	r3, [r7, #16]
 8007b26:	e009      	b.n	8007b3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	3340      	adds	r3, #64	; 0x40
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	2200      	movs	r2, #0
 8007b34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	613b      	str	r3, [r7, #16]
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	2b0e      	cmp	r3, #14
 8007b40:	d9f2      	bls.n	8007b28 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d11c      	bne.n	8007b82 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b56:	f043 0302 	orr.w	r3, r3, #2
 8007b5a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b60:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	601a      	str	r2, [r3, #0]
 8007b80:	e005      	b.n	8007b8e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b94:	461a      	mov	r2, r3
 8007b96:	2300      	movs	r3, #0
 8007b98:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ba8:	461a      	mov	r2, r3
 8007baa:	680b      	ldr	r3, [r1, #0]
 8007bac:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007bae:	2103      	movs	r1, #3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f959 	bl	8007e68 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007bb6:	2110      	movs	r1, #16
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f8f1 	bl	8007da0 <USB_FlushTxFifo>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f91d 	bl	8007e08 <USB_FlushRxFifo>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d001      	beq.n	8007bd8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bde:	461a      	mov	r2, r3
 8007be0:	2300      	movs	r3, #0
 8007be2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bea:	461a      	mov	r2, r3
 8007bec:	2300      	movs	r3, #0
 8007bee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	613b      	str	r3, [r7, #16]
 8007c00:	e043      	b.n	8007c8a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c18:	d118      	bne.n	8007c4c <USB_DevInit+0x144>
    {
      if (i == 0U)
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10a      	bne.n	8007c36 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c32:	6013      	str	r3, [r2, #0]
 8007c34:	e013      	b.n	8007c5e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	015a      	lsls	r2, r3, #5
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c42:	461a      	mov	r2, r3
 8007c44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c48:	6013      	str	r3, [r2, #0]
 8007c4a:	e008      	b.n	8007c5e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	015a      	lsls	r2, r3, #5
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	4413      	add	r3, r2
 8007c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c58:	461a      	mov	r2, r3
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	015a      	lsls	r2, r3, #5
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	4413      	add	r3, r2
 8007c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	015a      	lsls	r2, r3, #5
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	4413      	add	r3, r2
 8007c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	3301      	adds	r3, #1
 8007c88:	613b      	str	r3, [r7, #16]
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d3b7      	bcc.n	8007c02 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c92:	2300      	movs	r3, #0
 8007c94:	613b      	str	r3, [r7, #16]
 8007c96:	e043      	b.n	8007d20 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	015a      	lsls	r2, r3, #5
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007caa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cae:	d118      	bne.n	8007ce2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10a      	bne.n	8007ccc <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	015a      	lsls	r2, r3, #5
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007cc8:	6013      	str	r3, [r2, #0]
 8007cca:	e013      	b.n	8007cf4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	015a      	lsls	r2, r3, #5
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd8:	461a      	mov	r2, r3
 8007cda:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007cde:	6013      	str	r3, [r2, #0]
 8007ce0:	e008      	b.n	8007cf4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	015a      	lsls	r2, r3, #5
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	4413      	add	r3, r2
 8007cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cee:	461a      	mov	r2, r3
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	015a      	lsls	r2, r3, #5
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d00:	461a      	mov	r2, r3
 8007d02:	2300      	movs	r3, #0
 8007d04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	015a      	lsls	r2, r3, #5
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d12:	461a      	mov	r2, r3
 8007d14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	613b      	str	r3, [r7, #16]
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d3b7      	bcc.n	8007c98 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d3a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007d48:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	699b      	ldr	r3, [r3, #24]
 8007d4e:	f043 0210 	orr.w	r2, r3, #16
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	699a      	ldr	r2, [r3, #24]
 8007d5a:	4b10      	ldr	r3, [pc, #64]	; (8007d9c <USB_DevInit+0x294>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d005      	beq.n	8007d74 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	f043 0208 	orr.w	r2, r3, #8
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d107      	bne.n	8007d8a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d82:	f043 0304 	orr.w	r3, r3, #4
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3718      	adds	r7, #24
 8007d90:	46bd      	mov	sp, r7
 8007d92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d96:	b004      	add	sp, #16
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	803c3800 	.word	0x803c3800

08007da0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007daa:	2300      	movs	r3, #0
 8007dac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3301      	adds	r3, #1
 8007db2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	4a13      	ldr	r2, [pc, #76]	; (8007e04 <USB_FlushTxFifo+0x64>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d901      	bls.n	8007dc0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e01b      	b.n	8007df8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	daf2      	bge.n	8007dae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	019b      	lsls	r3, r3, #6
 8007dd0:	f043 0220 	orr.w	r2, r3, #32
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	4a08      	ldr	r2, [pc, #32]	; (8007e04 <USB_FlushTxFifo+0x64>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d901      	bls.n	8007dea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e006      	b.n	8007df8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	f003 0320 	and.w	r3, r3, #32
 8007df2:	2b20      	cmp	r3, #32
 8007df4:	d0f0      	beq.n	8007dd8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3714      	adds	r7, #20
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr
 8007e04:	00030d40 	.word	0x00030d40

08007e08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e10:	2300      	movs	r3, #0
 8007e12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	3301      	adds	r3, #1
 8007e18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	4a11      	ldr	r2, [pc, #68]	; (8007e64 <USB_FlushRxFifo+0x5c>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d901      	bls.n	8007e26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e018      	b.n	8007e58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	daf2      	bge.n	8007e14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2210      	movs	r2, #16
 8007e36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	4a08      	ldr	r2, [pc, #32]	; (8007e64 <USB_FlushRxFifo+0x5c>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d901      	bls.n	8007e4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e006      	b.n	8007e58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	f003 0310 	and.w	r3, r3, #16
 8007e52:	2b10      	cmp	r3, #16
 8007e54:	d0f0      	beq.n	8007e38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	00030d40 	.word	0x00030d40

08007e68 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	460b      	mov	r3, r1
 8007e72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	78fb      	ldrb	r3, [r7, #3]
 8007e82:	68f9      	ldr	r1, [r7, #12]
 8007e84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3714      	adds	r7, #20
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b085      	sub	sp, #20
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007eb4:	f023 0303 	bic.w	r3, r3, #3
 8007eb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ec8:	f043 0302 	orr.w	r3, r3, #2
 8007ecc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3714      	adds	r7, #20
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	695b      	ldr	r3, [r3, #20]
 8007ee8:	f003 0301 	and.w	r3, r3, #1
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f00:	2300      	movs	r3, #0
 8007f02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	3301      	adds	r3, #1
 8007f08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	4a13      	ldr	r2, [pc, #76]	; (8007f5c <USB_CoreReset+0x64>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d901      	bls.n	8007f16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e01b      	b.n	8007f4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	daf2      	bge.n	8007f04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	f043 0201 	orr.w	r2, r3, #1
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	3301      	adds	r3, #1
 8007f32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4a09      	ldr	r2, [pc, #36]	; (8007f5c <USB_CoreReset+0x64>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d901      	bls.n	8007f40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e006      	b.n	8007f4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	f003 0301 	and.w	r3, r3, #1
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d0f0      	beq.n	8007f2e <USB_CoreReset+0x36>

  return HAL_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3714      	adds	r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	00030d40 	.word	0x00030d40

08007f60 <ParseNumber>:
 * @brief  Parses and returns number from string.
 * @param  ptr: pointer to string
 * @param  cnt: pointer to the number of parsed digit
 * @retval integer value.
 */
static int32_t ParseNumber(char *ptr, uint8_t *cnt) {
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
	uint8_t minus = 0, i = 0;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	73fb      	strb	r3, [r7, #15]
 8007f6e:	2300      	movs	r3, #0
 8007f70:	73bb      	strb	r3, [r7, #14]
	int32_t sum = 0;
 8007f72:	2300      	movs	r3, #0
 8007f74:	60bb      	str	r3, [r7, #8]

	if (*ptr == '-') { /* Check for minus character */
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	2b2d      	cmp	r3, #45	; 0x2d
 8007f7c:	d119      	bne.n	8007fb2 <ParseNumber+0x52>
		minus = 1;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	73fb      	strb	r3, [r7, #15]
		ptr++;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	3301      	adds	r3, #1
 8007f86:	607b      	str	r3, [r7, #4]
		i++;
 8007f88:	7bbb      	ldrb	r3, [r7, #14]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	73bb      	strb	r3, [r7, #14]
	}
	while (CHARISNUM(*ptr)) { /* Parse number */
 8007f8e:	e010      	b.n	8007fb2 <ParseNumber+0x52>
		sum = 10 * sum + CHAR2NUM(*ptr);
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	4613      	mov	r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	005b      	lsls	r3, r3, #1
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	3b30      	subs	r3, #48	; 0x30
 8007fa2:	4413      	add	r3, r2
 8007fa4:	60bb      	str	r3, [r7, #8]
		ptr++;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	607b      	str	r3, [r7, #4]
		i++;
 8007fac:	7bbb      	ldrb	r3, [r7, #14]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	73bb      	strb	r3, [r7, #14]
	while (CHARISNUM(*ptr)) { /* Parse number */
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	2b2f      	cmp	r3, #47	; 0x2f
 8007fb8:	d903      	bls.n	8007fc2 <ParseNumber+0x62>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	2b39      	cmp	r3, #57	; 0x39
 8007fc0:	d9e6      	bls.n	8007f90 <ParseNumber+0x30>
	}
	if (cnt != NULL) { /* Save number of characters used for number */
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d002      	beq.n	8007fce <ParseNumber+0x6e>
		*cnt = i;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	7bba      	ldrb	r2, [r7, #14]
 8007fcc:	701a      	strb	r2, [r3, #0]
	}
	if (minus) { /* Minus detected */
 8007fce:	7bfb      	ldrb	r3, [r7, #15]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d002      	beq.n	8007fda <ParseNumber+0x7a>
		return 0 - sum;
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	425b      	negs	r3, r3
 8007fd8:	e000      	b.n	8007fdc <ParseNumber+0x7c>
	}
	return sum; /* Return number */
 8007fda:	68bb      	ldr	r3, [r7, #8]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3714      	adds	r7, #20
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <ParseIP>:
 * @brief  Parses and returns IP address.
 * @param  ptr: pointer to string
 * @param  arr: pointer to IP array
 * @retval None.
 */
static void ParseIP(char *ptr, uint8_t *arr) {
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
	uint8_t hexnum = 0, hexcnt;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	73fb      	strb	r3, [r7, #15]

	while (*ptr) {
 8007ff6:	e019      	b.n	800802c <ParseIP+0x44>
		hexcnt = 1;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	73bb      	strb	r3, [r7, #14]
		if (*ptr != '.') {
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	2b2e      	cmp	r3, #46	; 0x2e
 8008002:	d00e      	beq.n	8008022 <ParseIP+0x3a>
			arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8008004:	f107 030e 	add.w	r3, r7, #14
 8008008:	4619      	mov	r1, r3
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7ff ffa8 	bl	8007f60 <ParseNumber>
 8008010:	4601      	mov	r1, r0
 8008012:	7bfb      	ldrb	r3, [r7, #15]
 8008014:	1c5a      	adds	r2, r3, #1
 8008016:	73fa      	strb	r2, [r7, #15]
 8008018:	461a      	mov	r2, r3
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	4413      	add	r3, r2
 800801e:	b2ca      	uxtb	r2, r1
 8008020:	701a      	strb	r2, [r3, #0]
		}
		ptr = ptr + hexcnt;
 8008022:	7bbb      	ldrb	r3, [r7, #14]
 8008024:	461a      	mov	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4413      	add	r3, r2
 800802a:	607b      	str	r3, [r7, #4]
	while (*ptr) {
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1e1      	bne.n	8007ff8 <ParseIP+0x10>
	}
}
 8008034:	bf00      	nop
 8008036:	bf00      	nop
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
	...

08008040 <AT_ParseInfo>:
 * @brief  Parses ES module informations and save them in the handle.
 * @param  Obj: pointer to module handle
 * @param  ptr: pointer to string
 * @retval None.
 */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata) {
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
	char *ptr;
	uint8_t num = 0;
 800804a:	2300      	movs	r3, #0
 800804c:	72fb      	strb	r3, [r7, #11]

	ptr = strtok((char*) pdata + 2, ",");
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	3302      	adds	r3, #2
 8008052:	4934      	ldr	r1, [pc, #208]	; (8008124 <AT_ParseInfo+0xe4>)
 8008054:	4618      	mov	r0, r3
 8008056:	f005 f8e9 	bl	800d22c <strtok>
 800805a:	60f8      	str	r0, [r7, #12]

	while (ptr != NULL) {
 800805c:	e05a      	b.n	8008114 <AT_ParseInfo+0xd4>
		switch (num++) {
 800805e:	7afb      	ldrb	r3, [r7, #11]
 8008060:	1c5a      	adds	r2, r3, #1
 8008062:	72fa      	strb	r2, [r7, #11]
 8008064:	2b06      	cmp	r3, #6
 8008066:	d84f      	bhi.n	8008108 <AT_ParseInfo+0xc8>
 8008068:	a201      	add	r2, pc, #4	; (adr r2, 8008070 <AT_ParseInfo+0x30>)
 800806a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800806e:	bf00      	nop
 8008070:	0800808d 	.word	0x0800808d
 8008074:	0800809b 	.word	0x0800809b
 8008078:	080080ab 	.word	0x080080ab
 800807c:	080080bb 	.word	0x080080bb
 8008080:	080080cb 	.word	0x080080cb
 8008084:	080080db 	.word	0x080080db
 8008088:	080080ef 	.word	0x080080ef
		case 0:
			strncpy((char*) Obj->Product_ID, ptr, ES_WIFI_PRODUCT_ID_SIZE);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2220      	movs	r2, #32
 8008090:	68f9      	ldr	r1, [r7, #12]
 8008092:	4618      	mov	r0, r3
 8008094:	f005 f8a1 	bl	800d1da <strncpy>
			break;
 8008098:	e037      	b.n	800810a <AT_ParseInfo+0xca>

		case 1:
			strncpy((char*) Obj->FW_Rev, ptr, ES_WIFI_FW_REV_SIZE);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	3320      	adds	r3, #32
 800809e:	2218      	movs	r2, #24
 80080a0:	68f9      	ldr	r1, [r7, #12]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f005 f899 	bl	800d1da <strncpy>
			break;
 80080a8:	e02f      	b.n	800810a <AT_ParseInfo+0xca>

		case 2:
			strncpy((char*) Obj->API_Rev, ptr, ES_WIFI_API_REV_SIZE);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	3338      	adds	r3, #56	; 0x38
 80080ae:	2210      	movs	r2, #16
 80080b0:	68f9      	ldr	r1, [r7, #12]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f005 f891 	bl	800d1da <strncpy>
			break;
 80080b8:	e027      	b.n	800810a <AT_ParseInfo+0xca>

		case 3:
			strncpy((char*) Obj->Stack_Rev, ptr, ES_WIFI_STACK_REV_SIZE);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	3348      	adds	r3, #72	; 0x48
 80080be:	2210      	movs	r2, #16
 80080c0:	68f9      	ldr	r1, [r7, #12]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f005 f889 	bl	800d1da <strncpy>
			break;
 80080c8:	e01f      	b.n	800810a <AT_ParseInfo+0xca>

		case 4:
			strncpy((char*) Obj->RTOS_Rev, ptr, ES_WIFI_RTOS_REV_SIZE);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	3358      	adds	r3, #88	; 0x58
 80080ce:	2210      	movs	r2, #16
 80080d0:	68f9      	ldr	r1, [r7, #12]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f005 f881 	bl	800d1da <strncpy>
			break;
 80080d8:	e017      	b.n	800810a <AT_ParseInfo+0xca>

		case 5:
			Obj->CPU_Clock = ParseNumber(ptr, NULL);
 80080da:	2100      	movs	r1, #0
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f7ff ff3f 	bl	8007f60 <ParseNumber>
 80080e2:	4603      	mov	r3, r0
 80080e4:	461a      	mov	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 80080ec:	e00d      	b.n	800810a <AT_ParseInfo+0xca>

		case 6:
			ptr = strtok(ptr, "\r");
 80080ee:	490e      	ldr	r1, [pc, #56]	; (8008128 <AT_ParseInfo+0xe8>)
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f005 f89b 	bl	800d22c <strtok>
 80080f6:	60f8      	str	r0, [r7, #12]
			strncpy((char*) Obj->Product_Name, ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	3368      	adds	r3, #104	; 0x68
 80080fc:	2220      	movs	r2, #32
 80080fe:	68f9      	ldr	r1, [r7, #12]
 8008100:	4618      	mov	r0, r3
 8008102:	f005 f86a 	bl	800d1da <strncpy>
			break;
 8008106:	e000      	b.n	800810a <AT_ParseInfo+0xca>

		default:
			break;
 8008108:	bf00      	nop
		}
		ptr = strtok(NULL, ",");
 800810a:	4906      	ldr	r1, [pc, #24]	; (8008124 <AT_ParseInfo+0xe4>)
 800810c:	2000      	movs	r0, #0
 800810e:	f005 f88d 	bl	800d22c <strtok>
 8008112:	60f8      	str	r0, [r7, #12]
	while (ptr != NULL) {
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1a1      	bne.n	800805e <AT_ParseInfo+0x1e>
	}
}
 800811a:	bf00      	nop
 800811c:	bf00      	nop
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	0800e8a8 	.word	0x0800e8a8
 8008128:	0800e8ac 	.word	0x0800e8ac

0800812c <AT_ParseConnSettings>:
 * @brief  Parses WIFI connection settings.
 * @param  NetSettings: settings
 * @param  pdata: pointer to data
 * @retval None.
 */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings) {
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
	uint8_t num = 0;
 8008136:	2300      	movs	r3, #0
 8008138:	73fb      	strb	r3, [r7, #15]
	char *ptr;

	ptr = strtok(pdata + 2, ",");
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	3302      	adds	r3, #2
 800813e:	4952      	ldr	r1, [pc, #328]	; (8008288 <AT_ParseConnSettings+0x15c>)
 8008140:	4618      	mov	r0, r3
 8008142:	f005 f873 	bl	800d22c <strtok>
 8008146:	60b8      	str	r0, [r7, #8]

	while (ptr != NULL) {
 8008148:	e095      	b.n	8008276 <AT_ParseConnSettings+0x14a>
		switch (num++) {
 800814a:	7bfb      	ldrb	r3, [r7, #15]
 800814c:	1c5a      	adds	r2, r3, #1
 800814e:	73fa      	strb	r2, [r7, #15]
 8008150:	2b0b      	cmp	r3, #11
 8008152:	d87f      	bhi.n	8008254 <AT_ParseConnSettings+0x128>
 8008154:	a201      	add	r2, pc, #4	; (adr r2, 800815c <AT_ParseConnSettings+0x30>)
 8008156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815a:	bf00      	nop
 800815c:	0800818d 	.word	0x0800818d
 8008160:	0800819b 	.word	0x0800819b
 8008164:	080081ab 	.word	0x080081ab
 8008168:	080081bf 	.word	0x080081bf
 800816c:	080081d3 	.word	0x080081d3
 8008170:	080081e7 	.word	0x080081e7
 8008174:	080081f5 	.word	0x080081f5
 8008178:	08008203 	.word	0x08008203
 800817c:	08008211 	.word	0x08008211
 8008180:	0800821f 	.word	0x0800821f
 8008184:	0800822d 	.word	0x0800822d
 8008188:	08008241 	.word	0x08008241
		case 0:
			strncpy((char*) NetSettings->SSID, ptr,
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	2221      	movs	r2, #33	; 0x21
 8008190:	68b9      	ldr	r1, [r7, #8]
 8008192:	4618      	mov	r0, r3
 8008194:	f005 f821 	bl	800d1da <strncpy>
			ES_WIFI_MAX_SSID_NAME_SIZE + 1);
			break;
 8008198:	e05d      	b.n	8008256 <AT_ParseConnSettings+0x12a>

		case 1:
			strncpy((char*) NetSettings->pswd, ptr,
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	3321      	adds	r3, #33	; 0x21
 800819e:	2221      	movs	r2, #33	; 0x21
 80081a0:	68b9      	ldr	r1, [r7, #8]
 80081a2:	4618      	mov	r0, r3
 80081a4:	f005 f819 	bl	800d1da <strncpy>
			ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
			break;
 80081a8:	e055      	b.n	8008256 <AT_ParseConnSettings+0x12a>

		case 2:
			NetSettings->Security = (ES_WIFI_SecurityType_t) ParseNumber(ptr,
 80081aa:	2100      	movs	r1, #0
 80081ac:	68b8      	ldr	r0, [r7, #8]
 80081ae:	f7ff fed7 	bl	8007f60 <ParseNumber>
 80081b2:	4603      	mov	r3, r0
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			NULL);
			break;
 80081bc:	e04b      	b.n	8008256 <AT_ParseConnSettings+0x12a>

		case 3:
			NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 80081be:	2100      	movs	r1, #0
 80081c0:	68b8      	ldr	r0, [r7, #8]
 80081c2:	f7ff fecd 	bl	8007f60 <ParseNumber>
 80081c6:	4603      	mov	r3, r0
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
			break;
 80081d0:	e041      	b.n	8008256 <AT_ParseConnSettings+0x12a>

		case 4:
			NetSettings->IP_Ver = (ES_WIFI_IPVer_t) ParseNumber(ptr, NULL);
 80081d2:	2100      	movs	r1, #0
 80081d4:	68b8      	ldr	r0, [r7, #8]
 80081d6:	f7ff fec3 	bl	8007f60 <ParseNumber>
 80081da:	4603      	mov	r3, r0
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			break;
 80081e4:	e037      	b.n	8008256 <AT_ParseConnSettings+0x12a>

		case 5:
			ParseIP(ptr, NetSettings->IP_Addr);
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	3348      	adds	r3, #72	; 0x48
 80081ea:	4619      	mov	r1, r3
 80081ec:	68b8      	ldr	r0, [r7, #8]
 80081ee:	f7ff fefb 	bl	8007fe8 <ParseIP>
			break;
 80081f2:	e030      	b.n	8008256 <AT_ParseConnSettings+0x12a>

		case 6:
			ParseIP(ptr, NetSettings->IP_Mask);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	334c      	adds	r3, #76	; 0x4c
 80081f8:	4619      	mov	r1, r3
 80081fa:	68b8      	ldr	r0, [r7, #8]
 80081fc:	f7ff fef4 	bl	8007fe8 <ParseIP>
			break;
 8008200:	e029      	b.n	8008256 <AT_ParseConnSettings+0x12a>

		case 7:
			ParseIP(ptr, NetSettings->Gateway_Addr);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	3350      	adds	r3, #80	; 0x50
 8008206:	4619      	mov	r1, r3
 8008208:	68b8      	ldr	r0, [r7, #8]
 800820a:	f7ff feed 	bl	8007fe8 <ParseIP>
			break;
 800820e:	e022      	b.n	8008256 <AT_ParseConnSettings+0x12a>

		case 8:
			ParseIP(ptr, NetSettings->DNS1);
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	3354      	adds	r3, #84	; 0x54
 8008214:	4619      	mov	r1, r3
 8008216:	68b8      	ldr	r0, [r7, #8]
 8008218:	f7ff fee6 	bl	8007fe8 <ParseIP>
			break;
 800821c:	e01b      	b.n	8008256 <AT_ParseConnSettings+0x12a>

		case 9:
			ParseIP(ptr, NetSettings->DNS2);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	3358      	adds	r3, #88	; 0x58
 8008222:	4619      	mov	r1, r3
 8008224:	68b8      	ldr	r0, [r7, #8]
 8008226:	f7ff fedf 	bl	8007fe8 <ParseIP>
			break;
 800822a:	e014      	b.n	8008256 <AT_ParseConnSettings+0x12a>

		case 10:
			NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 800822c:	2100      	movs	r1, #0
 800822e:	68b8      	ldr	r0, [r7, #8]
 8008230:	f7ff fe96 	bl	8007f60 <ParseNumber>
 8008234:	4603      	mov	r3, r0
 8008236:	b2da      	uxtb	r2, r3
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			break;
 800823e:	e00a      	b.n	8008256 <AT_ParseConnSettings+0x12a>

		case 11:
			NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8008240:	2100      	movs	r1, #0
 8008242:	68b8      	ldr	r0, [r7, #8]
 8008244:	f7ff fe8c 	bl	8007f60 <ParseNumber>
 8008248:	4603      	mov	r3, r0
 800824a:	b2da      	uxtb	r2, r3
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			break;
 8008252:	e000      	b.n	8008256 <AT_ParseConnSettings+0x12a>

		default:
			break;
 8008254:	bf00      	nop
		}
		ptr = strtok(NULL, ",");
 8008256:	490c      	ldr	r1, [pc, #48]	; (8008288 <AT_ParseConnSettings+0x15c>)
 8008258:	2000      	movs	r0, #0
 800825a:	f004 ffe7 	bl	800d22c <strtok>
 800825e:	60b8      	str	r0, [r7, #8]
		if ((ptr != NULL) && (ptr[-1] == ',')) { /* Ignore empty fields */
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d007      	beq.n	8008276 <AT_ParseConnSettings+0x14a>
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	3b01      	subs	r3, #1
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	2b2c      	cmp	r3, #44	; 0x2c
 800826e:	d102      	bne.n	8008276 <AT_ParseConnSettings+0x14a>
			num++;
 8008270:	7bfb      	ldrb	r3, [r7, #15]
 8008272:	3301      	adds	r3, #1
 8008274:	73fb      	strb	r3, [r7, #15]
	while (ptr != NULL) {
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	f47f af66 	bne.w	800814a <AT_ParseConnSettings+0x1e>
		}
	}
}
 800827e:	bf00      	nop
 8008280:	bf00      	nop
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	0800e8a8 	.word	0x0800e8a8

0800828c <AT_ExecuteCommand>:
 * @param  cmd: pointer to command string
 * @param  pdata: pointer to returned data
 * @retval Operation Status.
 */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t *cmd,
		uint8_t *pdata) {
 800828c:	b590      	push	{r4, r7, lr}
 800828e:	b087      	sub	sp, #28
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
	int ret = 0;
 8008298:	2300      	movs	r3, #0
 800829a:	613b      	str	r3, [r7, #16]
	int16_t recv_len = 0;
 800829c:	2300      	movs	r3, #0
 800829e:	82fb      	strh	r3, [r7, #22]
	LOCK_WIFI();

	ret = Obj->fops.IO_Send(cmd, strlen((char*) cmd), Obj->Timeout);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 80082a6:	68b8      	ldr	r0, [r7, #8]
 80082a8:	f7f7 ff92 	bl	80001d0 <strlen>
 80082ac:	4603      	mov	r3, r0
 80082ae:	b299      	uxth	r1, r3
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80082b6:	461a      	mov	r2, r3
 80082b8:	68b8      	ldr	r0, [r7, #8]
 80082ba:	47a0      	blx	r4
 80082bc:	4603      	mov	r3, r0
 80082be:	613b      	str	r3, [r7, #16]

	if (ret > 0) {
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	dd3e      	ble.n	8008344 <AT_ExecuteCommand+0xb8>
		recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 80082d2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	4798      	blx	r3
 80082da:	4603      	mov	r3, r0
 80082dc:	82fb      	strh	r3, [r7, #22]
		if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE)) {
 80082de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	dd27      	ble.n	8008336 <AT_ExecuteCommand+0xaa>
 80082e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80082ea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80082ee:	dc22      	bgt.n	8008336 <AT_ExecuteCommand+0xaa>
			if (recv_len == ES_WIFI_DATA_SIZE) {
 80082f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80082f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80082f8:	d105      	bne.n	8008306 <AT_ExecuteCommand+0x7a>
				// ES_WIFI_DATA_SIZE maybe too small !!
				recv_len--;
 80082fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	3b01      	subs	r3, #1
 8008302:	b29b      	uxth	r3, r3
 8008304:	82fb      	strh	r3, [r7, #22]
			}
			*(pdata + recv_len) = 0;
 8008306:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	4413      	add	r3, r2
 800830e:	2200      	movs	r2, #0
 8008310:	701a      	strb	r2, [r3, #0]
			if (strstr((char*) pdata, AT_OK_STRING)) {
 8008312:	490f      	ldr	r1, [pc, #60]	; (8008350 <AT_ExecuteCommand+0xc4>)
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f004 ff73 	bl	800d200 <strstr>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <AT_ExecuteCommand+0x98>
				UNLOCK_WIFI();
				return ES_WIFI_STATUS_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	e010      	b.n	8008346 <AT_ExecuteCommand+0xba>
			} else if (strstr((char*) pdata, AT_ERROR_STRING)) {
 8008324:	490b      	ldr	r1, [pc, #44]	; (8008354 <AT_ExecuteCommand+0xc8>)
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f004 ff6a 	bl	800d200 <strstr>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <AT_ExecuteCommand+0xaa>
				UNLOCK_WIFI();
				return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8008332:	2305      	movs	r3, #5
 8008334:	e007      	b.n	8008346 <AT_ExecuteCommand+0xba>
			}
		}
		if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER) {
 8008336:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800833a:	f113 0f04 	cmn.w	r3, #4
 800833e:	d101      	bne.n	8008344 <AT_ExecuteCommand+0xb8>
			UNLOCK_WIFI();
			return ES_WIFI_STATUS_MODULE_CRASH;
 8008340:	2306      	movs	r3, #6
 8008342:	e000      	b.n	8008346 <AT_ExecuteCommand+0xba>
		}
	}UNLOCK_WIFI();
	return ES_WIFI_STATUS_IO_ERROR;
 8008344:	2304      	movs	r3, #4
}
 8008346:	4618      	mov	r0, r3
 8008348:	371c      	adds	r7, #28
 800834a:	46bd      	mov	sp, r7
 800834c:	bd90      	pop	{r4, r7, pc}
 800834e:	bf00      	nop
 8008350:	0800e8bc 	.word	0x0800e8bc
 8008354:	0800e8c8 	.word	0x0800e8c8

08008358 <AT_RequestSendData>:
 * @param  pdata: pointer to returned data
 * @retval Operation Status.
 */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t *cmd,
		uint8_t *pcmd_data, uint16_t len, uint8_t *pdata) {
 8008358:	b580      	push	{r7, lr}
 800835a:	b086      	sub	sp, #24
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
 8008364:	807b      	strh	r3, [r7, #2]
	int16_t send_len = 0;
 8008366:	2300      	movs	r3, #0
 8008368:	82fb      	strh	r3, [r7, #22]
	int16_t recv_len = 0;
 800836a:	2300      	movs	r3, #0
 800836c:	82bb      	strh	r3, [r7, #20]
	uint16_t cmd_len = 0;
 800836e:	2300      	movs	r3, #0
 8008370:	827b      	strh	r3, [r7, #18]
	uint16_t n;

	LOCK_WIFI();
	cmd_len = strlen((char*) cmd);
 8008372:	68b8      	ldr	r0, [r7, #8]
 8008374:	f7f7 ff2c 	bl	80001d0 <strlen>
 8008378:	4603      	mov	r3, r0
 800837a:	827b      	strh	r3, [r7, #18]

	/* can send only even number of byte on first send */
	if (cmd_len & 1)
 800837c:	8a7b      	ldrh	r3, [r7, #18]
 800837e:	f003 0301 	and.w	r3, r3, #1
 8008382:	2b00      	cmp	r3, #0
 8008384:	d001      	beq.n	800838a <AT_RequestSendData+0x32>
		return ES_WIFI_STATUS_ERROR;
 8008386:	2302      	movs	r3, #2
 8008388:	e053      	b.n	8008432 <AT_RequestSendData+0xda>
	n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8008396:	8a79      	ldrh	r1, [r7, #18]
 8008398:	68b8      	ldr	r0, [r7, #8]
 800839a:	4798      	blx	r3
 800839c:	4603      	mov	r3, r0
 800839e:	823b      	strh	r3, [r7, #16]
	if (n == cmd_len) {
 80083a0:	8a3a      	ldrh	r2, [r7, #16]
 80083a2:	8a7b      	ldrh	r3, [r7, #18]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d143      	bne.n	8008430 <AT_RequestSendData+0xd8>
		send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 80083b4:	8879      	ldrh	r1, [r7, #2]
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	4798      	blx	r3
 80083ba:	4603      	mov	r3, r0
 80083bc:	82fb      	strh	r3, [r7, #22]
		if (send_len == len) {
 80083be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80083c2:	887b      	ldrh	r3, [r7, #2]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d131      	bne.n	800842c <AT_RequestSendData+0xd4>
			recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 80083d4:	2100      	movs	r1, #0
 80083d6:	6a38      	ldr	r0, [r7, #32]
 80083d8:	4798      	blx	r3
 80083da:	4603      	mov	r3, r0
 80083dc:	82bb      	strh	r3, [r7, #20]
			if (recv_len > 0) {
 80083de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	dd19      	ble.n	800841a <AT_RequestSendData+0xc2>
				*(pdata + recv_len) = 0;
 80083e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80083ea:	6a3a      	ldr	r2, [r7, #32]
 80083ec:	4413      	add	r3, r2
 80083ee:	2200      	movs	r2, #0
 80083f0:	701a      	strb	r2, [r3, #0]
				if (strstr((char*) pdata, AT_OK_STRING)) {
 80083f2:	4912      	ldr	r1, [pc, #72]	; (800843c <AT_RequestSendData+0xe4>)
 80083f4:	6a38      	ldr	r0, [r7, #32]
 80083f6:	f004 ff03 	bl	800d200 <strstr>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d001      	beq.n	8008404 <AT_RequestSendData+0xac>
					UNLOCK_WIFI();
					return ES_WIFI_STATUS_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	e016      	b.n	8008432 <AT_RequestSendData+0xda>
				} else if (strstr((char*) pdata, AT_ERROR_STRING)) {
 8008404:	490e      	ldr	r1, [pc, #56]	; (8008440 <AT_RequestSendData+0xe8>)
 8008406:	6a38      	ldr	r0, [r7, #32]
 8008408:	f004 fefa 	bl	800d200 <strstr>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d001      	beq.n	8008416 <AT_RequestSendData+0xbe>
					UNLOCK_WIFI();
					return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8008412:	2305      	movs	r3, #5
 8008414:	e00d      	b.n	8008432 <AT_RequestSendData+0xda>
				} else {
					UNLOCK_WIFI();
					return ES_WIFI_STATUS_ERROR;
 8008416:	2302      	movs	r3, #2
 8008418:	e00b      	b.n	8008432 <AT_RequestSendData+0xda>
				}
			}UNLOCK_WIFI();
			if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER) {
 800841a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800841e:	f113 0f04 	cmn.w	r3, #4
 8008422:	d101      	bne.n	8008428 <AT_RequestSendData+0xd0>
				return ES_WIFI_STATUS_MODULE_CRASH;
 8008424:	2306      	movs	r3, #6
 8008426:	e004      	b.n	8008432 <AT_RequestSendData+0xda>
			}
			return ES_WIFI_STATUS_ERROR;
 8008428:	2302      	movs	r3, #2
 800842a:	e002      	b.n	8008432 <AT_RequestSendData+0xda>
		} else {
			return ES_WIFI_STATUS_ERROR;
 800842c:	2302      	movs	r3, #2
 800842e:	e000      	b.n	8008432 <AT_RequestSendData+0xda>
		}
	}
	return ES_WIFI_STATUS_IO_ERROR;
 8008430:	2304      	movs	r3, #4
}
 8008432:	4618      	mov	r0, r3
 8008434:	3718      	adds	r7, #24
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	0800e8bc 	.word	0x0800e8bc
 8008440:	0800e8c8 	.word	0x0800e8c8

08008444 <AT_RequestReceiveData>:
 * @param  Reqlen : requested Data length.
 * @param  ReadData : pointer to received data length.
 * @retval Operation Status.
 */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj,
		uint8_t *cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData) {
 8008444:	b590      	push	{r4, r7, lr}
 8008446:	b087      	sub	sp, #28
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
 8008450:	807b      	strh	r3, [r7, #2]
	int len;
	uint8_t *p = Obj->CmdData;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008458:	613b      	str	r3, [r7, #16]

	LOCK_WIFI();
	if (Obj->fops.IO_Send(cmd, strlen((char*) cmd), Obj->Timeout) > 0) {
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8008460:	68b8      	ldr	r0, [r7, #8]
 8008462:	f7f7 feb5 	bl	80001d0 <strlen>
 8008466:	4603      	mov	r3, r0
 8008468:	b299      	uxth	r1, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8008470:	461a      	mov	r2, r3
 8008472:	68b8      	ldr	r0, [r7, #8]
 8008474:	47a0      	blx	r4
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	dd6f      	ble.n	800855c <AT_RequestReceiveData+0x118>
		len = Obj->fops.IO_Receive(p, 0, Obj->Timeout);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8008488:	2100      	movs	r1, #0
 800848a:	6938      	ldr	r0, [r7, #16]
 800848c:	4798      	blx	r3
 800848e:	4603      	mov	r3, r0
 8008490:	617b      	str	r3, [r7, #20]
		if ((p[0] != '\r') || (p[1] != '\n')) {
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	2b0d      	cmp	r3, #13
 8008498:	d104      	bne.n	80084a4 <AT_RequestReceiveData+0x60>
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	3301      	adds	r3, #1
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	2b0a      	cmp	r3, #10
 80084a2:	d001      	beq.n	80084a8 <AT_RequestReceiveData+0x64>
			return ES_WIFI_STATUS_IO_ERROR;
 80084a4:	2304      	movs	r3, #4
 80084a6:	e05a      	b.n	800855e <AT_RequestReceiveData+0x11a>
		}
		len -= 2;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	3b02      	subs	r3, #2
 80084ac:	617b      	str	r3, [r7, #20]
		p += 2;
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	3302      	adds	r3, #2
 80084b2:	613b      	str	r3, [r7, #16]
		if (len >= AT_OK_STRING_LEN) {
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	2b07      	cmp	r3, #7
 80084b8:	d94a      	bls.n	8008550 <AT_RequestReceiveData+0x10c>
			while (len && (p[len - 1] == 0x15))
 80084ba:	e002      	b.n	80084c2 <AT_RequestReceiveData+0x7e>
				len--;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	3b01      	subs	r3, #1
 80084c0:	617b      	str	r3, [r7, #20]
			while (len && (p[len - 1] == 0x15))
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d006      	beq.n	80084d6 <AT_RequestReceiveData+0x92>
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	693a      	ldr	r2, [r7, #16]
 80084ce:	4413      	add	r3, r2
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	2b15      	cmp	r3, #21
 80084d4:	d0f2      	beq.n	80084bc <AT_RequestReceiveData+0x78>
			p[len] = '\0';
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	4413      	add	r3, r2
 80084dc:	2200      	movs	r2, #0
 80084de:	701a      	strb	r2, [r3, #0]
			if (strstr((char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING)) {
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	3b08      	subs	r3, #8
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	4413      	add	r3, r2
 80084e8:	491f      	ldr	r1, [pc, #124]	; (8008568 <AT_RequestReceiveData+0x124>)
 80084ea:	4618      	mov	r0, r3
 80084ec:	f004 fe88 	bl	800d200 <strstr>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d016      	beq.n	8008524 <AT_RequestReceiveData+0xe0>
				*ReadData = len - AT_OK_STRING_LEN;
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	3b08      	subs	r3, #8
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008500:	801a      	strh	r2, [r3, #0]
				if (*ReadData > Reqlen) {
 8008502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008504:	881b      	ldrh	r3, [r3, #0]
 8008506:	887a      	ldrh	r2, [r7, #2]
 8008508:	429a      	cmp	r2, r3
 800850a:	d202      	bcs.n	8008512 <AT_RequestReceiveData+0xce>
					*ReadData = Reqlen;
 800850c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850e:	887a      	ldrh	r2, [r7, #2]
 8008510:	801a      	strh	r2, [r3, #0]
				}
				memcpy(pdata, p, *ReadData);
 8008512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008514:	881b      	ldrh	r3, [r3, #0]
 8008516:	461a      	mov	r2, r3
 8008518:	6939      	ldr	r1, [r7, #16]
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f004 fc9c 	bl	800ce58 <memcpy>
				UNLOCK_WIFI();
				return ES_WIFI_STATUS_OK;
 8008520:	2300      	movs	r3, #0
 8008522:	e01c      	b.n	800855e <AT_RequestReceiveData+0x11a>
			} else if (memcmp((char*) p + len - AT_DELIMETER_LEN,
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	3b04      	subs	r3, #4
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	4413      	add	r3, r2
 800852c:	2204      	movs	r2, #4
 800852e:	490f      	ldr	r1, [pc, #60]	; (800856c <AT_RequestReceiveData+0x128>)
 8008530:	4618      	mov	r0, r3
 8008532:	f004 fc81 	bl	800ce38 <memcmp>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d104      	bne.n	8008546 <AT_RequestReceiveData+0x102>
			AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0) {
				*ReadData = 0;
 800853c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853e:	2200      	movs	r2, #0
 8008540:	801a      	strh	r2, [r3, #0]
				UNLOCK_WIFI();
				return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8008542:	2305      	movs	r3, #5
 8008544:	e00b      	b.n	800855e <AT_RequestReceiveData+0x11a>
			}

			UNLOCK_WIFI();
			*ReadData = 0;
 8008546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008548:	2200      	movs	r2, #0
 800854a:	801a      	strh	r2, [r3, #0]
			return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800854c:	2305      	movs	r3, #5
 800854e:	e006      	b.n	800855e <AT_RequestReceiveData+0x11a>
		}
		if (len == ES_WIFI_ERROR_STUFFING_FOREVER) {
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	f113 0f04 	cmn.w	r3, #4
 8008556:	d101      	bne.n	800855c <AT_RequestReceiveData+0x118>
			UNLOCK_WIFI();
			return ES_WIFI_STATUS_MODULE_CRASH;
 8008558:	2306      	movs	r3, #6
 800855a:	e000      	b.n	800855e <AT_RequestReceiveData+0x11a>
		}
	}UNLOCK_WIFI();
	return ES_WIFI_STATUS_IO_ERROR;
 800855c:	2304      	movs	r3, #4
}
 800855e:	4618      	mov	r0, r3
 8008560:	371c      	adds	r7, #28
 8008562:	46bd      	mov	sp, r7
 8008564:	bd90      	pop	{r4, r7, pc}
 8008566:	bf00      	nop
 8008568:	0800e8bc 	.word	0x0800e8bc
 800856c:	0800e8d0 	.word	0x0800e8d0

08008570 <ES_WIFI_Init>:
/**
 * @brief  Initialize WIFI module.
 * @param  Obj: pointer to module handle
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj) {
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
	ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8008578:	2302      	movs	r3, #2
 800857a:	73fb      	strb	r3, [r7, #15]

	LOCK_WIFI();

	Obj->Timeout = ES_WIFI_TIMEOUT;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f247 5230 	movw	r2, #30000	; 0x7530
 8008582:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

	if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0) {
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800858c:	2000      	movs	r0, #0
 800858e:	4798      	blx	r3
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d113      	bne.n	80085be <ES_WIFI_Init+0x4e>
		ret = AT_ExecuteCommand(Obj, (uint8_t*) "I?\r\n", Obj->CmdData);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800859c:	461a      	mov	r2, r3
 800859e:	490a      	ldr	r1, [pc, #40]	; (80085c8 <ES_WIFI_Init+0x58>)
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f7ff fe73 	bl	800828c <AT_ExecuteCommand>
 80085a6:	4603      	mov	r3, r0
 80085a8:	73fb      	strb	r3, [r7, #15]

		if (ret == ES_WIFI_STATUS_OK) {
 80085aa:	7bfb      	ldrb	r3, [r7, #15]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d106      	bne.n	80085be <ES_WIFI_Init+0x4e>
			AT_ParseInfo(Obj, Obj->CmdData);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80085b6:	4619      	mov	r1, r3
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f7ff fd41 	bl	8008040 <AT_ParseInfo>
		}
	}UNLOCK_WIFI();
	return ret;
 80085be:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	0800e8d8 	.word	0x0800e8d8

080085cc <ES_WIFI_RegisterBusIO>:
 * @param  Obj: pointer to module handle
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj,
		IO_Init_Func IO_Init, IO_DeInit_Func IO_DeInit, IO_Delay_Func IO_Delay,
		IO_Send_Func IO_Send, IO_Receive_Func IO_Receive) {
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
 80085d8:	603b      	str	r3, [r7, #0]
	if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive) {
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00b      	beq.n	80085f8 <ES_WIFI_RegisterBusIO+0x2c>
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d008      	beq.n	80085f8 <ES_WIFI_RegisterBusIO+0x2c>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d005      	beq.n	80085f8 <ES_WIFI_RegisterBusIO+0x2c>
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d002      	beq.n	80085f8 <ES_WIFI_RegisterBusIO+0x2c>
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d101      	bne.n	80085fc <ES_WIFI_RegisterBusIO+0x30>
		return ES_WIFI_STATUS_ERROR;
 80085f8:	2302      	movs	r3, #2
 80085fa:	e014      	b.n	8008626 <ES_WIFI_RegisterBusIO+0x5a>
	}

	Obj->fops.IO_Init = IO_Init;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	68ba      	ldr	r2, [r7, #8]
 8008600:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	Obj->fops.IO_DeInit = IO_DeInit;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	Obj->fops.IO_Send = IO_Send;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	69ba      	ldr	r2, [r7, #24]
 8008610:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	Obj->fops.IO_Receive = IO_Receive;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	69fa      	ldr	r2, [r7, #28]
 8008618:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	Obj->fops.IO_Delay = IO_Delay;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	683a      	ldr	r2, [r7, #0]
 8008620:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	return ES_WIFI_STATUS_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3714      	adds	r7, #20
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
	...

08008634 <ES_WIFI_Connect>:
 * @param  Password: the Access point password.
 * @param  SecType: Security type.
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
		const char *Password, ES_WIFI_SecurityType_t SecType) {
 8008634:	b580      	push	{r7, lr}
 8008636:	b086      	sub	sp, #24
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
 8008640:	70fb      	strb	r3, [r7, #3]
	ES_WIFI_Status_t ret;
	LOCK_WIFI();

	sprintf((char*) Obj->CmdData, "C1=%s\r", SSID);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008648:	68ba      	ldr	r2, [r7, #8]
 800864a:	4932      	ldr	r1, [pc, #200]	; (8008714 <ES_WIFI_Connect+0xe0>)
 800864c:	4618      	mov	r0, r3
 800864e:	f004 fd97 	bl	800d180 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800865e:	461a      	mov	r2, r3
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f7ff fe13 	bl	800828c <AT_ExecuteCommand>
 8008666:	4603      	mov	r3, r0
 8008668:	75fb      	strb	r3, [r7, #23]
	if (ret == ES_WIFI_STATUS_OK) {
 800866a:	7dfb      	ldrb	r3, [r7, #23]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d14b      	bne.n	8008708 <ES_WIFI_Connect+0xd4>
		sprintf((char*) Obj->CmdData, "C2=%s\r", Password);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	4927      	ldr	r1, [pc, #156]	; (8008718 <ES_WIFI_Connect+0xe4>)
 800867a:	4618      	mov	r0, r3
 800867c:	f004 fd80 	bl	800d180 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800868c:	461a      	mov	r2, r3
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f7ff fdfc 	bl	800828c <AT_ExecuteCommand>
 8008694:	4603      	mov	r3, r0
 8008696:	75fb      	strb	r3, [r7, #23]

		if (ret == ES_WIFI_STATUS_OK) {
 8008698:	7dfb      	ldrb	r3, [r7, #23]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d134      	bne.n	8008708 <ES_WIFI_Connect+0xd4>
			Obj->Security = SecType;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	78fa      	ldrb	r2, [r7, #3]
 80086a2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
			sprintf((char*) Obj->CmdData, "C3=%d\r", (uint8_t) SecType);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80086ac:	78fa      	ldrb	r2, [r7, #3]
 80086ae:	491b      	ldr	r1, [pc, #108]	; (800871c <ES_WIFI_Connect+0xe8>)
 80086b0:	4618      	mov	r0, r3
 80086b2:	f004 fd65 	bl	800d180 <siprintf>
			ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80086c2:	461a      	mov	r2, r3
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f7ff fde1 	bl	800828c <AT_ExecuteCommand>
 80086ca:	4603      	mov	r3, r0
 80086cc:	75fb      	strb	r3, [r7, #23]

			if (ret == ES_WIFI_STATUS_OK) {
 80086ce:	7dfb      	ldrb	r3, [r7, #23]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d119      	bne.n	8008708 <ES_WIFI_Connect+0xd4>
				sprintf((char*) Obj->CmdData, "C0\r");
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80086da:	4911      	ldr	r1, [pc, #68]	; (8008720 <ES_WIFI_Connect+0xec>)
 80086dc:	4618      	mov	r0, r3
 80086de:	f004 fd4f 	bl	800d180 <siprintf>
				ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80086ee:	461a      	mov	r2, r3
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f7ff fdcb 	bl	800828c <AT_ExecuteCommand>
 80086f6:	4603      	mov	r3, r0
 80086f8:	75fb      	strb	r3, [r7, #23]
				if (ret == ES_WIFI_STATUS_OK) {
 80086fa:	7dfb      	ldrb	r3, [r7, #23]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d103      	bne.n	8008708 <ES_WIFI_Connect+0xd4>
					Obj->NetSettings.IsConnected = 1;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
				}
			}
		}
	}UNLOCK_WIFI();
	return ret;
 8008708:	7dfb      	ldrb	r3, [r7, #23]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3718      	adds	r7, #24
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	0800e8f0 	.word	0x0800e8f0
 8008718:	0800e8f8 	.word	0x0800e8f8
 800871c:	0800e900 	.word	0x0800e900
 8008720:	0800e908 	.word	0x0800e908

08008724 <ES_WIFI_Disconnect>:
/**
 * @brief  Disconnect from a network.
 * @param  Obj: pointer to module handle
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_Disconnect(ES_WIFIObject_t *Obj) {
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
	ES_WIFI_Status_t ret;
	LOCK_WIFI();
	sprintf((char*) Obj->CmdData, "CD\r");
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008732:	490a      	ldr	r1, [pc, #40]	; (800875c <ES_WIFI_Disconnect+0x38>)
 8008734:	4618      	mov	r0, r3
 8008736:	f004 fd23 	bl	800d180 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008746:	461a      	mov	r2, r3
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7ff fd9f 	bl	800828c <AT_ExecuteCommand>
 800874e:	4603      	mov	r3, r0
 8008750:	73fb      	strb	r3, [r7, #15]
	UNLOCK_WIFI();
	return ret;
 8008752:	7bfb      	ldrb	r3, [r7, #15]
}
 8008754:	4618      	mov	r0, r3
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	0800e910 	.word	0x0800e910

08008760 <ES_WIFI_GetNetworkSettings>:
 * @brief  Return network settings.
 * @param  Obj: pointer to module handle
 * @param  Pointer to network setting structure.
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj) {
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
	ES_WIFI_Status_t ret;
	LOCK_WIFI();

	sprintf((char*) Obj->CmdData, "C?\r");
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800876e:	4910      	ldr	r1, [pc, #64]	; (80087b0 <ES_WIFI_GetNetworkSettings+0x50>)
 8008770:	4618      	mov	r0, r3
 8008772:	f004 fd05 	bl	800d180 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008782:	461a      	mov	r2, r3
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f7ff fd81 	bl	800828c <AT_ExecuteCommand>
 800878a:	4603      	mov	r3, r0
 800878c:	73fb      	strb	r3, [r7, #15]

	if (ret == ES_WIFI_STATUS_OK) {
 800878e:	7bfb      	ldrb	r3, [r7, #15]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d108      	bne.n	80087a6 <ES_WIFI_GetNetworkSettings+0x46>
		AT_ParseConnSettings((char*) Obj->CmdData, &Obj->NetSettings);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	338d      	adds	r3, #141	; 0x8d
 800879e:	4619      	mov	r1, r3
 80087a0:	4610      	mov	r0, r2
 80087a2:	f7ff fcc3 	bl	800812c <AT_ParseConnSettings>
	}

	UNLOCK_WIFI();
	return ret;
 80087a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	0800e914 	.word	0x0800e914

080087b4 <ES_WIFI_StartClientConnection>:
 * @param  Obj: pointer to module handle
 * @param  conn: pointer to the connection structure
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj,
		ES_WIFI_Conn_t *conn) {
 80087b4:	b590      	push	{r4, r7, lr}
 80087b6:	b087      	sub	sp, #28
 80087b8:	af02      	add	r7, sp, #8
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
	ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 80087be:	2300      	movs	r3, #0
 80087c0:	73fb      	strb	r3, [r7, #15]

	if (((conn->Type == ES_WIFI_TCP_CONNECTION)
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d003      	beq.n	80087d2 <ES_WIFI_StartClientConnection+0x1e>
			|| (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	2b03      	cmp	r3, #3
 80087d0:	d105      	bne.n	80087de <ES_WIFI_StartClientConnection+0x2a>
			&& (conn->RemotePort == 0))
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	885b      	ldrh	r3, [r3, #2]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d101      	bne.n	80087de <ES_WIFI_StartClientConnection+0x2a>
		return ES_WIFI_STATUS_ERROR;
 80087da:	2302      	movs	r3, #2
 80087dc:	e0c1      	b.n	8008962 <ES_WIFI_StartClientConnection+0x1ae>

	LOCK_WIFI();

	sprintf((char*) Obj->CmdData, "P0=%d\r", conn->Number);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	785b      	ldrb	r3, [r3, #1]
 80087e8:	461a      	mov	r2, r3
 80087ea:	4960      	ldr	r1, [pc, #384]	; (800896c <ES_WIFI_StartClientConnection+0x1b8>)
 80087ec:	f004 fcc8 	bl	800d180 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80087fc:	461a      	mov	r2, r3
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f7ff fd44 	bl	800828c <AT_ExecuteCommand>
 8008804:	4603      	mov	r3, r0
 8008806:	73fb      	strb	r3, [r7, #15]

	if (ret == ES_WIFI_STATUS_OK) {
 8008808:	7bfb      	ldrb	r3, [r7, #15]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d114      	bne.n	8008838 <ES_WIFI_StartClientConnection+0x84>
		sprintf((char*) Obj->CmdData, "P1=%d\r", conn->Type);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	461a      	mov	r2, r3
 800881a:	4955      	ldr	r1, [pc, #340]	; (8008970 <ES_WIFI_StartClientConnection+0x1bc>)
 800881c:	f004 fcb0 	bl	800d180 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800882c:	461a      	mov	r2, r3
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f7ff fd2c 	bl	800828c <AT_ExecuteCommand>
 8008834:	4603      	mov	r3, r0
 8008836:	73fb      	strb	r3, [r7, #15]
	}

	if (ret == ES_WIFI_STATUS_OK) {
 8008838:	7bfb      	ldrb	r3, [r7, #15]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d114      	bne.n	8008868 <ES_WIFI_StartClientConnection+0xb4>
		sprintf((char*) Obj->CmdData, "P2=%d\r", conn->LocalPort);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	889b      	ldrh	r3, [r3, #4]
 8008848:	461a      	mov	r2, r3
 800884a:	494a      	ldr	r1, [pc, #296]	; (8008974 <ES_WIFI_StartClientConnection+0x1c0>)
 800884c:	f004 fc98 	bl	800d180 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800885c:	461a      	mov	r2, r3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7ff fd14 	bl	800828c <AT_ExecuteCommand>
 8008864:	4603      	mov	r3, r0
 8008866:	73fb      	strb	r3, [r7, #15]
	}

	if ((ret == ES_WIFI_STATUS_OK)
 8008868:	7bfb      	ldrb	r3, [r7, #15]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d11c      	bne.n	80088a8 <ES_WIFI_StartClientConnection+0xf4>
			&& ((conn->Type == ES_WIFI_TCP_CONNECTION)
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d003      	beq.n	800887e <ES_WIFI_StartClientConnection+0xca>
					|| (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))) {
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	2b03      	cmp	r3, #3
 800887c:	d114      	bne.n	80088a8 <ES_WIFI_StartClientConnection+0xf4>
		sprintf((char*) Obj->CmdData, "P4=%d\r", conn->RemotePort);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	885b      	ldrh	r3, [r3, #2]
 8008888:	461a      	mov	r2, r3
 800888a:	493b      	ldr	r1, [pc, #236]	; (8008978 <ES_WIFI_StartClientConnection+0x1c4>)
 800888c:	f004 fc78 	bl	800d180 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800889c:	461a      	mov	r2, r3
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7ff fcf4 	bl	800828c <AT_ExecuteCommand>
 80088a4:	4603      	mov	r3, r0
 80088a6:	73fb      	strb	r3, [r7, #15]
	}

	if ((ret == ES_WIFI_STATUS_OK)
 80088a8:	7bfb      	ldrb	r3, [r7, #15]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d128      	bne.n	8008900 <ES_WIFI_StartClientConnection+0x14c>
			&& ((conn->Type == ES_WIFI_TCP_CONNECTION)
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d003      	beq.n	80088be <ES_WIFI_StartClientConnection+0x10a>
					|| (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))) {
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	2b03      	cmp	r3, #3
 80088bc:	d120      	bne.n	8008900 <ES_WIFI_StartClientConnection+0x14c>
		sprintf((char*) Obj->CmdData, "P3=%d.%d.%d.%d\r", conn->RemoteIP[0],
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	799b      	ldrb	r3, [r3, #6]
 80088c8:	4619      	mov	r1, r3
				conn->RemoteIP[1], conn->RemoteIP[2], conn->RemoteIP[3]);
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	79db      	ldrb	r3, [r3, #7]
		sprintf((char*) Obj->CmdData, "P3=%d.%d.%d.%d\r", conn->RemoteIP[0],
 80088ce:	461c      	mov	r4, r3
				conn->RemoteIP[1], conn->RemoteIP[2], conn->RemoteIP[3]);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	7a1b      	ldrb	r3, [r3, #8]
		sprintf((char*) Obj->CmdData, "P3=%d.%d.%d.%d\r", conn->RemoteIP[0],
 80088d4:	461a      	mov	r2, r3
				conn->RemoteIP[1], conn->RemoteIP[2], conn->RemoteIP[3]);
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	7a5b      	ldrb	r3, [r3, #9]
		sprintf((char*) Obj->CmdData, "P3=%d.%d.%d.%d\r", conn->RemoteIP[0],
 80088da:	9301      	str	r3, [sp, #4]
 80088dc:	9200      	str	r2, [sp, #0]
 80088de:	4623      	mov	r3, r4
 80088e0:	460a      	mov	r2, r1
 80088e2:	4926      	ldr	r1, [pc, #152]	; (800897c <ES_WIFI_StartClientConnection+0x1c8>)
 80088e4:	f004 fc4c 	bl	800d180 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80088f4:	461a      	mov	r2, r3
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f7ff fcc8 	bl	800828c <AT_ExecuteCommand>
 80088fc:	4603      	mov	r3, r0
 80088fe:	73fb      	strb	r3, [r7, #15]
	}

	if ((ret == ES_WIFI_STATUS_OK)
 8008900:	7bfb      	ldrb	r3, [r7, #15]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d116      	bne.n	8008934 <ES_WIFI_StartClientConnection+0x180>
			&& (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) {
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	2b03      	cmp	r3, #3
 800890c:	d112      	bne.n	8008934 <ES_WIFI_StartClientConnection+0x180>
		sprintf((char*) Obj->CmdData, "P9=2\r");
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008914:	491a      	ldr	r1, [pc, #104]	; (8008980 <ES_WIFI_StartClientConnection+0x1cc>)
 8008916:	4618      	mov	r0, r3
 8008918:	f004 fc32 	bl	800d180 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008928:	461a      	mov	r2, r3
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f7ff fcae 	bl	800828c <AT_ExecuteCommand>
 8008930:	4603      	mov	r3, r0
 8008932:	73fb      	strb	r3, [r7, #15]
	}

	if (ret == ES_WIFI_STATUS_OK) {
 8008934:	7bfb      	ldrb	r3, [r7, #15]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d112      	bne.n	8008960 <ES_WIFI_StartClientConnection+0x1ac>
		sprintf((char*) Obj->CmdData, "P6=1\r");
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008940:	4910      	ldr	r1, [pc, #64]	; (8008984 <ES_WIFI_StartClientConnection+0x1d0>)
 8008942:	4618      	mov	r0, r3
 8008944:	f004 fc1c 	bl	800d180 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008954:	461a      	mov	r2, r3
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f7ff fc98 	bl	800828c <AT_ExecuteCommand>
 800895c:	4603      	mov	r3, r0
 800895e:	73fb      	strb	r3, [r7, #15]
	}

	UNLOCK_WIFI();
	return ret;
 8008960:	7bfb      	ldrb	r3, [r7, #15]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	bd90      	pop	{r4, r7, pc}
 800896a:	bf00      	nop
 800896c:	0800e9d8 	.word	0x0800e9d8
 8008970:	0800e9e0 	.word	0x0800e9e0
 8008974:	0800e9e8 	.word	0x0800e9e8
 8008978:	0800e9f0 	.word	0x0800e9f0
 800897c:	0800e9f8 	.word	0x0800e9f8
 8008980:	0800ea08 	.word	0x0800ea08
 8008984:	0800ea10 	.word	0x0800ea10

08008988 <ES_WIFI_StopClientConnection>:
 * @brief  Stop Client connection.
 * @param  Obj: pointer to module handle
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj,
		ES_WIFI_Conn_t *conn) {
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
	ES_WIFI_Status_t ret;
	LOCK_WIFI();

	sprintf((char*) Obj->CmdData, "P0=%d\r", conn->Number);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	785b      	ldrb	r3, [r3, #1]
 800899c:	461a      	mov	r2, r3
 800899e:	4915      	ldr	r1, [pc, #84]	; (80089f4 <ES_WIFI_StopClientConnection+0x6c>)
 80089a0:	f004 fbee 	bl	800d180 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80089b0:	461a      	mov	r2, r3
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f7ff fc6a 	bl	800828c <AT_ExecuteCommand>
 80089b8:	4603      	mov	r3, r0
 80089ba:	73fb      	strb	r3, [r7, #15]

	if (ret == ES_WIFI_STATUS_OK) {
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d112      	bne.n	80089e8 <ES_WIFI_StopClientConnection+0x60>
		sprintf((char*) Obj->CmdData, "P6=0\r");
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80089c8:	490b      	ldr	r1, [pc, #44]	; (80089f8 <ES_WIFI_StopClientConnection+0x70>)
 80089ca:	4618      	mov	r0, r3
 80089cc:	f004 fbd8 	bl	800d180 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80089dc:	461a      	mov	r2, r3
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f7ff fc54 	bl	800828c <AT_ExecuteCommand>
 80089e4:	4603      	mov	r3, r0
 80089e6:	73fb      	strb	r3, [r7, #15]
	}UNLOCK_WIFI();
	return ret;
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	0800e9d8 	.word	0x0800e9d8
 80089f8:	0800ea18 	.word	0x0800ea18

080089fc <ES_WIFI_SendData>:
 * @param  pdata: pointer to data
 * @param  len : length of the data to be sent
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
		uint8_t *pdata, uint16_t Reqlen, uint16_t *SentLen, uint32_t Timeout) {
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b088      	sub	sp, #32
 8008a00:	af02      	add	r7, sp, #8
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	607a      	str	r2, [r7, #4]
 8008a06:	461a      	mov	r2, r3
 8008a08:	460b      	mov	r3, r1
 8008a0a:	72fb      	strb	r3, [r7, #11]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	813b      	strh	r3, [r7, #8]
	uint32_t wkgTimeOut;

	ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8008a10:	2302      	movs	r3, #2
 8008a12:	74fb      	strb	r3, [r7, #19]

	if (Timeout == 0) {
 8008a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d102      	bne.n	8008a20 <ES_WIFI_SendData+0x24>
		wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	617b      	str	r3, [r7, #20]
 8008a1e:	e001      	b.n	8008a24 <ES_WIFI_SendData+0x28>
	} else {
		wkgTimeOut = Timeout;
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a22:	617b      	str	r3, [r7, #20]
	}

	LOCK_WIFI();
	if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 8008a24:	893b      	ldrh	r3, [r7, #8]
 8008a26:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8008a2a:	d302      	bcc.n	8008a32 <ES_WIFI_SendData+0x36>
		Reqlen = ES_WIFI_PAYLOAD_SIZE;
 8008a2c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008a30:	813b      	strh	r3, [r7, #8]

	*SentLen = Reqlen;
 8008a32:	6a3b      	ldr	r3, [r7, #32]
 8008a34:	893a      	ldrh	r2, [r7, #8]
 8008a36:	801a      	strh	r2, [r3, #0]
	sprintf((char*) Obj->CmdData, "P0=%d\r", Socket);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008a3e:	7afa      	ldrb	r2, [r7, #11]
 8008a40:	4942      	ldr	r1, [pc, #264]	; (8008b4c <ES_WIFI_SendData+0x150>)
 8008a42:	4618      	mov	r0, r3
 8008a44:	f004 fb9c 	bl	800d180 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008a54:	461a      	mov	r2, r3
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f7ff fc18 	bl	800828c <AT_ExecuteCommand>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	74fb      	strb	r3, [r7, #19]
	if (ret == ES_WIFI_STATUS_OK) {
 8008a60:	7cfb      	ldrb	r3, [r7, #19]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d15e      	bne.n	8008b24 <ES_WIFI_SendData+0x128>
		sprintf((char*) Obj->CmdData, "S2=%lu\r", wkgTimeOut);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	4938      	ldr	r1, [pc, #224]	; (8008b50 <ES_WIFI_SendData+0x154>)
 8008a70:	4618      	mov	r0, r3
 8008a72:	f004 fb85 	bl	800d180 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008a82:	461a      	mov	r2, r3
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	f7ff fc01 	bl	800828c <AT_ExecuteCommand>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	74fb      	strb	r3, [r7, #19]

		if (ret == ES_WIFI_STATUS_OK) {
 8008a8e:	7cfb      	ldrb	r3, [r7, #19]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d13d      	bne.n	8008b10 <ES_WIFI_SendData+0x114>
			sprintf((char*) Obj->CmdData, "S3=%04d\r", Reqlen);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008a9a:	893a      	ldrh	r2, [r7, #8]
 8008a9c:	492d      	ldr	r1, [pc, #180]	; (8008b54 <ES_WIFI_SendData+0x158>)
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f004 fb6e 	bl	800d180 <siprintf>
			ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen,
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f503 7194 	add.w	r1, r3, #296	; 0x128
					Obj->CmdData);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f503 7394 	add.w	r3, r3, #296	; 0x128
			ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen,
 8008ab0:	893a      	ldrh	r2, [r7, #8]
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f7ff fc4d 	bl	8008358 <AT_RequestSendData>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	74fb      	strb	r3, [r7, #19]

			if (ret == ES_WIFI_STATUS_OK) {
 8008ac2:	7cfb      	ldrb	r3, [r7, #19]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d119      	bne.n	8008afc <ES_WIFI_SendData+0x100>
				if (strstr((char*) Obj->CmdData, "-1\r\n")) {
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008ace:	4922      	ldr	r1, [pc, #136]	; (8008b58 <ES_WIFI_SendData+0x15c>)
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f004 fb95 	bl	800d200 <strstr>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d02c      	beq.n	8008b36 <ES_WIFI_SendData+0x13a>
					DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData)
 8008adc:	f240 72c7 	movw	r2, #1991	; 0x7c7
 8008ae0:	491e      	ldr	r1, [pc, #120]	; (8008b5c <ES_WIFI_SendData+0x160>)
 8008ae2:	481f      	ldr	r0, [pc, #124]	; (8008b60 <ES_WIFI_SendData+0x164>)
 8008ae4:	f004 faae 	bl	800d044 <iprintf>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008aee:	4619      	mov	r1, r3
 8008af0:	481c      	ldr	r0, [pc, #112]	; (8008b64 <ES_WIFI_SendData+0x168>)
 8008af2:	f004 faa7 	bl	800d044 <iprintf>
					;
					ret = ES_WIFI_STATUS_ERROR;
 8008af6:	2302      	movs	r3, #2
 8008af8:	74fb      	strb	r3, [r7, #19]
 8008afa:	e01c      	b.n	8008b36 <ES_WIFI_SendData+0x13a>
				}
			} else {
				DEBUG("Send Data command failed\n")
 8008afc:	f240 72cc 	movw	r2, #1996	; 0x7cc
 8008b00:	4916      	ldr	r1, [pc, #88]	; (8008b5c <ES_WIFI_SendData+0x160>)
 8008b02:	4817      	ldr	r0, [pc, #92]	; (8008b60 <ES_WIFI_SendData+0x164>)
 8008b04:	f004 fa9e 	bl	800d044 <iprintf>
 8008b08:	4817      	ldr	r0, [pc, #92]	; (8008b68 <ES_WIFI_SendData+0x16c>)
 8008b0a:	f004 fb21 	bl	800d150 <puts>
 8008b0e:	e012      	b.n	8008b36 <ES_WIFI_SendData+0x13a>
				;
			}
		} else {
			DEBUG("S2 command failed\n")
 8008b10:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008b14:	4911      	ldr	r1, [pc, #68]	; (8008b5c <ES_WIFI_SendData+0x160>)
 8008b16:	4812      	ldr	r0, [pc, #72]	; (8008b60 <ES_WIFI_SendData+0x164>)
 8008b18:	f004 fa94 	bl	800d044 <iprintf>
 8008b1c:	4813      	ldr	r0, [pc, #76]	; (8008b6c <ES_WIFI_SendData+0x170>)
 8008b1e:	f004 fb17 	bl	800d150 <puts>
 8008b22:	e008      	b.n	8008b36 <ES_WIFI_SendData+0x13a>
			;
		}
	} else {
		DEBUG("P0 command failed\n")
 8008b24:	f240 72d4 	movw	r2, #2004	; 0x7d4
 8008b28:	490c      	ldr	r1, [pc, #48]	; (8008b5c <ES_WIFI_SendData+0x160>)
 8008b2a:	480d      	ldr	r0, [pc, #52]	; (8008b60 <ES_WIFI_SendData+0x164>)
 8008b2c:	f004 fa8a 	bl	800d044 <iprintf>
 8008b30:	480f      	ldr	r0, [pc, #60]	; (8008b70 <ES_WIFI_SendData+0x174>)
 8008b32:	f004 fb0d 	bl	800d150 <puts>
		;
	}

	if (ret == ES_WIFI_STATUS_ERROR) {
 8008b36:	7cfb      	ldrb	r3, [r7, #19]
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d102      	bne.n	8008b42 <ES_WIFI_SendData+0x146>
		*SentLen = 0;
 8008b3c:	6a3b      	ldr	r3, [r7, #32]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	801a      	strh	r2, [r3, #0]
	}UNLOCK_WIFI();
	return ret;
 8008b42:	7cfb      	ldrb	r3, [r7, #19]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3718      	adds	r7, #24
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	0800e9d8 	.word	0x0800e9d8
 8008b50:	0800eb90 	.word	0x0800eb90
 8008b54:	0800eb98 	.word	0x0800eb98
 8008b58:	0800eba4 	.word	0x0800eba4
 8008b5c:	0800ea68 	.word	0x0800ea68
 8008b60:	0800ea84 	.word	0x0800ea84
 8008b64:	0800ebac 	.word	0x0800ebac
 8008b68:	0800ebc8 	.word	0x0800ebc8
 8008b6c:	0800ebe4 	.word	0x0800ebe4
 8008b70:	0800ebf8 	.word	0x0800ebf8

08008b74 <ES_WIFI_ReceiveData>:
 * @param  len : pointer to the length of the data to be received
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket,
		uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen,
		uint32_t Timeout) {
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b088      	sub	sp, #32
 8008b78:	af02      	add	r7, sp, #8
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	607a      	str	r2, [r7, #4]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	460b      	mov	r3, r1
 8008b82:	72fb      	strb	r3, [r7, #11]
 8008b84:	4613      	mov	r3, r2
 8008b86:	813b      	strh	r3, [r7, #8]
	uint32_t wkgTimeOut;

	ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8008b88:	2302      	movs	r3, #2
 8008b8a:	74fb      	strb	r3, [r7, #19]

	if (Timeout == 0) {
 8008b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d102      	bne.n	8008b98 <ES_WIFI_ReceiveData+0x24>
		wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8008b92:	2301      	movs	r3, #1
 8008b94:	617b      	str	r3, [r7, #20]
 8008b96:	e001      	b.n	8008b9c <ES_WIFI_ReceiveData+0x28>
	} else {
		wkgTimeOut = Timeout;
 8008b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9a:	617b      	str	r3, [r7, #20]
	}

	LOCK_WIFI();

	if (Reqlen <= ES_WIFI_PAYLOAD_SIZE) {
 8008b9c:	893b      	ldrh	r3, [r7, #8]
 8008b9e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8008ba2:	f200 808b 	bhi.w	8008cbc <ES_WIFI_ReceiveData+0x148>
		sprintf((char*) Obj->CmdData, "P0=%d\r", Socket);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008bac:	7afa      	ldrb	r2, [r7, #11]
 8008bae:	4946      	ldr	r1, [pc, #280]	; (8008cc8 <ES_WIFI_ReceiveData+0x154>)
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f004 fae5 	bl	800d180 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f7ff fb61 	bl	800828c <AT_ExecuteCommand>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	74fb      	strb	r3, [r7, #19]

		if (ret == ES_WIFI_STATUS_OK) {
 8008bce:	7cfb      	ldrb	r3, [r7, #19]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d165      	bne.n	8008ca0 <ES_WIFI_ReceiveData+0x12c>
			sprintf((char*) Obj->CmdData, "R1=%d\r", Reqlen);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008bda:	893a      	ldrh	r2, [r7, #8]
 8008bdc:	493b      	ldr	r1, [pc, #236]	; (8008ccc <ES_WIFI_ReceiveData+0x158>)
 8008bde:	4618      	mov	r0, r3
 8008be0:	f004 face 	bl	800d180 <siprintf>
			ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f7ff fb4a 	bl	800828c <AT_ExecuteCommand>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	74fb      	strb	r3, [r7, #19]
			if (ret == ES_WIFI_STATUS_OK) {
 8008bfc:	7cfb      	ldrb	r3, [r7, #19]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d141      	bne.n	8008c86 <ES_WIFI_ReceiveData+0x112>
				sprintf((char*) Obj->CmdData, "R2=%lu\r", wkgTimeOut);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008c08:	697a      	ldr	r2, [r7, #20]
 8008c0a:	4931      	ldr	r1, [pc, #196]	; (8008cd0 <ES_WIFI_ReceiveData+0x15c>)
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f004 fab7 	bl	800d180 <siprintf>
				ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008c1e:	461a      	mov	r2, r3
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f7ff fb33 	bl	800828c <AT_ExecuteCommand>
 8008c26:	4603      	mov	r3, r0
 8008c28:	74fb      	strb	r3, [r7, #19]
				if (ret == ES_WIFI_STATUS_OK) {
 8008c2a:	7cfb      	ldrb	r3, [r7, #19]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d120      	bne.n	8008c72 <ES_WIFI_ReceiveData+0xfe>
					sprintf((char*) Obj->CmdData, "R0\r");
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008c36:	4927      	ldr	r1, [pc, #156]	; (8008cd4 <ES_WIFI_ReceiveData+0x160>)
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f004 faa1 	bl	800d180 <siprintf>
					ret = AT_RequestReceiveData(Obj, Obj->CmdData,
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008c44:	893a      	ldrh	r2, [r7, #8]
 8008c46:	6a3b      	ldr	r3, [r7, #32]
 8008c48:	9300      	str	r3, [sp, #0]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f7ff fbf8 	bl	8008444 <AT_RequestReceiveData>
 8008c54:	4603      	mov	r3, r0
 8008c56:	74fb      	strb	r3, [r7, #19]
							(char*) pdata, Reqlen, Receivedlen);
					if (ret != ES_WIFI_STATUS_OK) {
 8008c58:	7cfb      	ldrb	r3, [r7, #19]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d02e      	beq.n	8008cbc <ES_WIFI_ReceiveData+0x148>
						DEBUG("AT_RequestReceiveData  failed\n")
 8008c5e:	f44f 6205 	mov.w	r2, #2128	; 0x850
 8008c62:	491d      	ldr	r1, [pc, #116]	; (8008cd8 <ES_WIFI_ReceiveData+0x164>)
 8008c64:	481d      	ldr	r0, [pc, #116]	; (8008cdc <ES_WIFI_ReceiveData+0x168>)
 8008c66:	f004 f9ed 	bl	800d044 <iprintf>
 8008c6a:	481d      	ldr	r0, [pc, #116]	; (8008ce0 <ES_WIFI_ReceiveData+0x16c>)
 8008c6c:	f004 fa70 	bl	800d150 <puts>
 8008c70:	e024      	b.n	8008cbc <ES_WIFI_ReceiveData+0x148>
						;
					}
				} else {
					DEBUG("setting timeout failed\n")
 8008c72:	f640 0254 	movw	r2, #2132	; 0x854
 8008c76:	4918      	ldr	r1, [pc, #96]	; (8008cd8 <ES_WIFI_ReceiveData+0x164>)
 8008c78:	4818      	ldr	r0, [pc, #96]	; (8008cdc <ES_WIFI_ReceiveData+0x168>)
 8008c7a:	f004 f9e3 	bl	800d044 <iprintf>
 8008c7e:	4819      	ldr	r0, [pc, #100]	; (8008ce4 <ES_WIFI_ReceiveData+0x170>)
 8008c80:	f004 fa66 	bl	800d150 <puts>
 8008c84:	e01a      	b.n	8008cbc <ES_WIFI_ReceiveData+0x148>
					;
				}
			} else {
				DEBUG("setting requested len failed\n")
 8008c86:	f640 0258 	movw	r2, #2136	; 0x858
 8008c8a:	4913      	ldr	r1, [pc, #76]	; (8008cd8 <ES_WIFI_ReceiveData+0x164>)
 8008c8c:	4813      	ldr	r0, [pc, #76]	; (8008cdc <ES_WIFI_ReceiveData+0x168>)
 8008c8e:	f004 f9d9 	bl	800d044 <iprintf>
 8008c92:	4815      	ldr	r0, [pc, #84]	; (8008ce8 <ES_WIFI_ReceiveData+0x174>)
 8008c94:	f004 fa5c 	bl	800d150 <puts>
				;
				*Receivedlen = 0;
 8008c98:	6a3b      	ldr	r3, [r7, #32]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	801a      	strh	r2, [r3, #0]
 8008c9e:	e00d      	b.n	8008cbc <ES_WIFI_ReceiveData+0x148>
			}
		} else {
			DEBUG("setting socket for read failed\n")
 8008ca0:	f640 025d 	movw	r2, #2141	; 0x85d
 8008ca4:	490c      	ldr	r1, [pc, #48]	; (8008cd8 <ES_WIFI_ReceiveData+0x164>)
 8008ca6:	480d      	ldr	r0, [pc, #52]	; (8008cdc <ES_WIFI_ReceiveData+0x168>)
 8008ca8:	f004 f9cc 	bl	800d044 <iprintf>
 8008cac:	480f      	ldr	r0, [pc, #60]	; (8008cec <ES_WIFI_ReceiveData+0x178>)
 8008cae:	f004 fa4f 	bl	800d150 <puts>
			;
			issue15++;
 8008cb2:	4b0f      	ldr	r3, [pc, #60]	; (8008cf0 <ES_WIFI_ReceiveData+0x17c>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	4a0d      	ldr	r2, [pc, #52]	; (8008cf0 <ES_WIFI_ReceiveData+0x17c>)
 8008cba:	6013      	str	r3, [r2, #0]
		}
	}UNLOCK_WIFI();
	return ret;
 8008cbc:	7cfb      	ldrb	r3, [r7, #19]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3718      	adds	r7, #24
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	0800e9d8 	.word	0x0800e9d8
 8008ccc:	0800ec1c 	.word	0x0800ec1c
 8008cd0:	0800ec24 	.word	0x0800ec24
 8008cd4:	0800ec2c 	.word	0x0800ec2c
 8008cd8:	0800ea68 	.word	0x0800ea68
 8008cdc:	0800ea84 	.word	0x0800ea84
 8008ce0:	0800ec30 	.word	0x0800ec30
 8008ce4:	0800ec50 	.word	0x0800ec50
 8008ce8:	0800ec68 	.word	0x0800ec68
 8008cec:	0800ec88 	.word	0x0800ec88
 8008cf0:	20000860 	.word	0x20000860

08008cf4 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b08c      	sub	sp, #48	; 0x30
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8008cfc:	4b57      	ldr	r3, [pc, #348]	; (8008e5c <SPI_WIFI_MspInit+0x168>)
 8008cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d00:	4a56      	ldr	r2, [pc, #344]	; (8008e5c <SPI_WIFI_MspInit+0x168>)
 8008d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d06:	6593      	str	r3, [r2, #88]	; 0x58
 8008d08:	4b54      	ldr	r3, [pc, #336]	; (8008e5c <SPI_WIFI_MspInit+0x168>)
 8008d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d10:	61bb      	str	r3, [r7, #24]
 8008d12:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d14:	4b51      	ldr	r3, [pc, #324]	; (8008e5c <SPI_WIFI_MspInit+0x168>)
 8008d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d18:	4a50      	ldr	r2, [pc, #320]	; (8008e5c <SPI_WIFI_MspInit+0x168>)
 8008d1a:	f043 0302 	orr.w	r3, r3, #2
 8008d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d20:	4b4e      	ldr	r3, [pc, #312]	; (8008e5c <SPI_WIFI_MspInit+0x168>)
 8008d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d24:	f003 0302 	and.w	r3, r3, #2
 8008d28:	617b      	str	r3, [r7, #20]
 8008d2a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008d2c:	4b4b      	ldr	r3, [pc, #300]	; (8008e5c <SPI_WIFI_MspInit+0x168>)
 8008d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d30:	4a4a      	ldr	r2, [pc, #296]	; (8008e5c <SPI_WIFI_MspInit+0x168>)
 8008d32:	f043 0304 	orr.w	r3, r3, #4
 8008d36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d38:	4b48      	ldr	r3, [pc, #288]	; (8008e5c <SPI_WIFI_MspInit+0x168>)
 8008d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d3c:	f003 0304 	and.w	r3, r3, #4
 8008d40:	613b      	str	r3, [r7, #16]
 8008d42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008d44:	4b45      	ldr	r3, [pc, #276]	; (8008e5c <SPI_WIFI_MspInit+0x168>)
 8008d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d48:	4a44      	ldr	r2, [pc, #272]	; (8008e5c <SPI_WIFI_MspInit+0x168>)
 8008d4a:	f043 0310 	orr.w	r3, r3, #16
 8008d4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d50:	4b42      	ldr	r3, [pc, #264]	; (8008e5c <SPI_WIFI_MspInit+0x168>)
 8008d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d54:	f003 0310 	and.w	r3, r3, #16
 8008d58:	60fb      	str	r3, [r7, #12]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008d62:	483f      	ldr	r0, [pc, #252]	; (8008e60 <SPI_WIFI_MspInit+0x16c>)
 8008d64:	f7f9 fee0 	bl	8002b28 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8008d68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d6c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008d72:	2300      	movs	r3, #0
 8008d74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8008d76:	2300      	movs	r3, #0
 8008d78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8008d7a:	f107 031c 	add.w	r3, r7, #28
 8008d7e:	4619      	mov	r1, r3
 8008d80:	4837      	ldr	r0, [pc, #220]	; (8008e60 <SPI_WIFI_MspInit+0x16c>)
 8008d82:	f7f9 fc1b 	bl	80025bc <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8008d86:	2302      	movs	r3, #2
 8008d88:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8008d8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8008d8e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008d90:	2300      	movs	r3, #0
 8008d92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8008d94:	2300      	movs	r3, #0
 8008d96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8008d98:	f107 031c 	add.w	r3, r7, #28
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	4831      	ldr	r0, [pc, #196]	; (8008e64 <SPI_WIFI_MspInit+0x170>)
 8008da0:	f7f9 fc0c 	bl	80025bc <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8008da4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008da8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8008daa:	2301      	movs	r3, #1
 8008dac:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008dae:	2300      	movs	r3, #0
 8008db0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8008db2:	2300      	movs	r3, #0
 8008db4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8008dba:	f107 031c 	add.w	r3, r7, #28
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	4828      	ldr	r0, [pc, #160]	; (8008e64 <SPI_WIFI_MspInit+0x170>)
 8008dc2:	f7f9 fbfb 	bl	80025bc <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	2101      	movs	r1, #1
 8008dca:	4826      	ldr	r0, [pc, #152]	; (8008e64 <SPI_WIFI_MspInit+0x170>)
 8008dcc:	f7f9 feac 	bl	8002b28 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8008de0:	f107 031c 	add.w	r3, r7, #28
 8008de4:	4619      	mov	r1, r3
 8008de6:	481f      	ldr	r0, [pc, #124]	; (8008e64 <SPI_WIFI_MspInit+0x170>)
 8008de8:	f7f9 fbe8 	bl	80025bc <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8008dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008df0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8008df2:	2302      	movs	r3, #2
 8008df4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008df6:	2300      	movs	r3, #0
 8008df8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8008dfe:	2306      	movs	r3, #6
 8008e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8008e02:	f107 031c 	add.w	r3, r7, #28
 8008e06:	4619      	mov	r1, r3
 8008e08:	4817      	ldr	r0, [pc, #92]	; (8008e68 <SPI_WIFI_MspInit+0x174>)
 8008e0a:	f7f9 fbd7 	bl	80025bc <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8008e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e12:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8008e14:	2302      	movs	r3, #2
 8008e16:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8008e20:	2306      	movs	r3, #6
 8008e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8008e24:	f107 031c 	add.w	r3, r7, #28
 8008e28:	4619      	mov	r1, r3
 8008e2a:	480f      	ldr	r0, [pc, #60]	; (8008e68 <SPI_WIFI_MspInit+0x174>)
 8008e2c:	f7f9 fbc6 	bl	80025bc <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8008e30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e34:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8008e36:	2302      	movs	r3, #2
 8008e38:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8008e42:	2306      	movs	r3, #6
 8008e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8008e46:	f107 031c 	add.w	r3, r7, #28
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	4806      	ldr	r0, [pc, #24]	; (8008e68 <SPI_WIFI_MspInit+0x174>)
 8008e4e:	f7f9 fbb5 	bl	80025bc <HAL_GPIO_Init>
}
 8008e52:	bf00      	nop
 8008e54:	3730      	adds	r7, #48	; 0x30
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	40021000 	.word	0x40021000
 8008e60:	48000400 	.word	0x48000400
 8008e64:	48001000 	.word	0x48001000
 8008e68:	48000800 	.word	0x48000800

08008e6c <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	4603      	mov	r3, r0
 8008e74:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8008e76:	2300      	movs	r3, #0
 8008e78:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 8008e7a:	88fb      	ldrh	r3, [r7, #6]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d145      	bne.n	8008f0c <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8008e80:	4b27      	ldr	r3, [pc, #156]	; (8008f20 <SPI_WIFI_Init+0xb4>)
 8008e82:	4a28      	ldr	r2, [pc, #160]	; (8008f24 <SPI_WIFI_Init+0xb8>)
 8008e84:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8008e86:	4826      	ldr	r0, [pc, #152]	; (8008f20 <SPI_WIFI_Init+0xb4>)
 8008e88:	f7ff ff34 	bl	8008cf4 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8008e8c:	4b24      	ldr	r3, [pc, #144]	; (8008f20 <SPI_WIFI_Init+0xb4>)
 8008e8e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008e92:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8008e94:	4b22      	ldr	r3, [pc, #136]	; (8008f20 <SPI_WIFI_Init+0xb4>)
 8008e96:	2200      	movs	r2, #0
 8008e98:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8008e9a:	4b21      	ldr	r3, [pc, #132]	; (8008f20 <SPI_WIFI_Init+0xb4>)
 8008e9c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8008ea0:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8008ea2:	4b1f      	ldr	r3, [pc, #124]	; (8008f20 <SPI_WIFI_Init+0xb4>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8008ea8:	4b1d      	ldr	r3, [pc, #116]	; (8008f20 <SPI_WIFI_Init+0xb4>)
 8008eaa:	2200      	movs	r2, #0
 8008eac:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8008eae:	4b1c      	ldr	r3, [pc, #112]	; (8008f20 <SPI_WIFI_Init+0xb4>)
 8008eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008eb4:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8008eb6:	4b1a      	ldr	r3, [pc, #104]	; (8008f20 <SPI_WIFI_Init+0xb4>)
 8008eb8:	2210      	movs	r2, #16
 8008eba:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8008ebc:	4b18      	ldr	r3, [pc, #96]	; (8008f20 <SPI_WIFI_Init+0xb4>)
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8008ec2:	4b17      	ldr	r3, [pc, #92]	; (8008f20 <SPI_WIFI_Init+0xb4>)
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8008ec8:	4b15      	ldr	r3, [pc, #84]	; (8008f20 <SPI_WIFI_Init+0xb4>)
 8008eca:	2200      	movs	r2, #0
 8008ecc:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8008ece:	4b14      	ldr	r3, [pc, #80]	; (8008f20 <SPI_WIFI_Init+0xb4>)
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8008ed4:	4812      	ldr	r0, [pc, #72]	; (8008f20 <SPI_WIFI_Init+0xb4>)
 8008ed6:	f7fb fd03 	bl	80048e0 <HAL_SPI_Init>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d002      	beq.n	8008ee6 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8008ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ee4:	e018      	b.n	8008f18 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	2100      	movs	r1, #0
 8008eea:	2007      	movs	r0, #7
 8008eec:	f7f9 f9a4 	bl	8002238 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8008ef0:	2007      	movs	r0, #7
 8008ef2:	f7f9 f9bd 	bl	8002270 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	2100      	movs	r1, #0
 8008efa:	2033      	movs	r0, #51	; 0x33
 8008efc:	f7f9 f99c 	bl	8002238 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8008f00:	2033      	movs	r0, #51	; 0x33
 8008f02:	f7f9 f9b5 	bl	8002270 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8008f06:	200a      	movs	r0, #10
 8008f08:	f000 f9fe 	bl	8009308 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 8008f0c:	f000 f80c 	bl	8008f28 <SPI_WIFI_ResetModule>
 8008f10:	4603      	mov	r3, r0
 8008f12:	73fb      	strb	r3, [r7, #15]

  return rc;
 8008f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	20000864 	.word	0x20000864
 8008f24:	40003c00 	.word	0x40003c00

08008f28 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8008f2e:	f7f9 f89b 	bl	8002068 <HAL_GetTick>
 8008f32:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8008f34:	2300      	movs	r3, #0
 8008f36:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008f3e:	4830      	ldr	r0, [pc, #192]	; (8009000 <SPI_WIFI_ResetModule+0xd8>)
 8008f40:	f7f9 fdf2 	bl	8002b28 <HAL_GPIO_WritePin>
 8008f44:	200a      	movs	r0, #10
 8008f46:	f7f9 f89b 	bl	8002080 <HAL_Delay>
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008f50:	482b      	ldr	r0, [pc, #172]	; (8009000 <SPI_WIFI_ResetModule+0xd8>)
 8008f52:	f7f9 fde9 	bl	8002b28 <HAL_GPIO_WritePin>
 8008f56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008f5a:	f7f9 f891 	bl	8002080 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8008f5e:	2200      	movs	r2, #0
 8008f60:	2101      	movs	r1, #1
 8008f62:	4827      	ldr	r0, [pc, #156]	; (8009000 <SPI_WIFI_ResetModule+0xd8>)
 8008f64:	f7f9 fde0 	bl	8002b28 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8008f68:	200f      	movs	r0, #15
 8008f6a:	f000 f9cd 	bl	8009308 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 8008f6e:	e020      	b.n	8008fb2 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
 8008f72:	463a      	mov	r2, r7
 8008f74:	18d1      	adds	r1, r2, r3
 8008f76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	4821      	ldr	r0, [pc, #132]	; (8009004 <SPI_WIFI_ResetModule+0xdc>)
 8008f7e:	f7fb fd7a 	bl	8004a76 <HAL_SPI_Receive>
 8008f82:	4603      	mov	r3, r0
 8008f84:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8008f86:	7bfb      	ldrb	r3, [r7, #15]
 8008f88:	3302      	adds	r3, #2
 8008f8a:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8008f8c:	f7f9 f86c 	bl	8002068 <HAL_GetTick>
 8008f90:	4602      	mov	r2, r0
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	1ad3      	subs	r3, r2, r3
 8008f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f9a:	d202      	bcs.n	8008fa2 <SPI_WIFI_ResetModule+0x7a>
 8008f9c:	79fb      	ldrb	r3, [r7, #7]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d007      	beq.n	8008fb2 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	2101      	movs	r1, #1
 8008fa6:	4816      	ldr	r0, [pc, #88]	; (8009000 <SPI_WIFI_ResetModule+0xd8>)
 8008fa8:	f7f9 fdbe 	bl	8002b28 <HAL_GPIO_WritePin>
      return -1;
 8008fac:	f04f 33ff 	mov.w	r3, #4294967295
 8008fb0:	e021      	b.n	8008ff6 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8008fb2:	2102      	movs	r1, #2
 8008fb4:	4812      	ldr	r0, [pc, #72]	; (8009000 <SPI_WIFI_ResetModule+0xd8>)
 8008fb6:	f7f9 fd9f 	bl	8002af8 <HAL_GPIO_ReadPin>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d0d7      	beq.n	8008f70 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	2101      	movs	r1, #1
 8008fc4:	480e      	ldr	r0, [pc, #56]	; (8009000 <SPI_WIFI_ResetModule+0xd8>)
 8008fc6:	f7f9 fdaf 	bl	8002b28 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8008fca:	783b      	ldrb	r3, [r7, #0]
 8008fcc:	2b15      	cmp	r3, #21
 8008fce:	d10e      	bne.n	8008fee <SPI_WIFI_ResetModule+0xc6>
 8008fd0:	787b      	ldrb	r3, [r7, #1]
 8008fd2:	2b15      	cmp	r3, #21
 8008fd4:	d10b      	bne.n	8008fee <SPI_WIFI_ResetModule+0xc6>
 8008fd6:	78bb      	ldrb	r3, [r7, #2]
 8008fd8:	2b0d      	cmp	r3, #13
 8008fda:	d108      	bne.n	8008fee <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8008fdc:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8008fde:	2b0a      	cmp	r3, #10
 8008fe0:	d105      	bne.n	8008fee <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8008fe2:	793b      	ldrb	r3, [r7, #4]
 8008fe4:	2b3e      	cmp	r3, #62	; 0x3e
 8008fe6:	d102      	bne.n	8008fee <SPI_WIFI_ResetModule+0xc6>
 8008fe8:	797b      	ldrb	r3, [r7, #5]
 8008fea:	2b20      	cmp	r3, #32
 8008fec:	d002      	beq.n	8008ff4 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8008fee:	f04f 33ff 	mov.w	r3, #4294967295
 8008ff2:	e000      	b.n	8008ff6 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	48001000 	.word	0x48001000
 8009004:	20000864 	.word	0x20000864

08009008 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 800900c:	4802      	ldr	r0, [pc, #8]	; (8009018 <SPI_WIFI_DeInit+0x10>)
 800900e:	f7fb fd0a 	bl	8004a26 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	bd80      	pop	{r7, pc}
 8009018:	20000864 	.word	0x20000864

0800901c <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8009024:	f7f9 f820 	bl	8002068 <HAL_GetTick>
 8009028:	4603      	mov	r3, r0
 800902a:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 800902c:	e00a      	b.n	8009044 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800902e:	f7f9 f81b 	bl	8002068 <HAL_GetTick>
 8009032:	4602      	mov	r2, r0
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	1ad2      	subs	r2, r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	429a      	cmp	r2, r3
 800903c:	d902      	bls.n	8009044 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800903e:	f04f 33ff 	mov.w	r3, #4294967295
 8009042:	e007      	b.n	8009054 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8009044:	2102      	movs	r1, #2
 8009046:	4805      	ldr	r0, [pc, #20]	; (800905c <wait_cmddata_rdy_high+0x40>)
 8009048:	f7f9 fd56 	bl	8002af8 <HAL_GPIO_ReadPin>
 800904c:	4603      	mov	r3, r0
 800904e:	2b01      	cmp	r3, #1
 8009050:	d1ed      	bne.n	800902e <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8009052:	2300      	movs	r3, #0
}
 8009054:	4618      	mov	r0, r3
 8009056:	3710      	adds	r7, #16
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	48001000 	.word	0x48001000

08009060 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8009068:	f7f8 fffe 	bl	8002068 <HAL_GetTick>
 800906c:	4603      	mov	r3, r0
 800906e:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8009070:	e00a      	b.n	8009088 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8009072:	f7f8 fff9 	bl	8002068 <HAL_GetTick>
 8009076:	4602      	mov	r2, r0
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	1ad2      	subs	r2, r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	429a      	cmp	r2, r3
 8009080:	d902      	bls.n	8009088 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8009082:	f04f 33ff 	mov.w	r3, #4294967295
 8009086:	e004      	b.n	8009092 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8009088:	4b04      	ldr	r3, [pc, #16]	; (800909c <wait_cmddata_rdy_rising_event+0x3c>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d0f0      	beq.n	8009072 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8009090:	2300      	movs	r3, #0
#endif
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	200008d0 	.word	0x200008d0

080090a0 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80090a8:	f7f8 ffde 	bl	8002068 <HAL_GetTick>
 80090ac:	4603      	mov	r3, r0
 80090ae:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 80090b0:	e00a      	b.n	80090c8 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80090b2:	f7f8 ffd9 	bl	8002068 <HAL_GetTick>
 80090b6:	4602      	mov	r2, r0
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	1ad2      	subs	r2, r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d902      	bls.n	80090c8 <wait_spi_rx_event+0x28>
    {
      return -1;
 80090c2:	f04f 33ff 	mov.w	r3, #4294967295
 80090c6:	e004      	b.n	80090d2 <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 80090c8:	4b04      	ldr	r3, [pc, #16]	; (80090dc <wait_spi_rx_event+0x3c>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d0f0      	beq.n	80090b2 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 80090d0:	2300      	movs	r3, #0
#endif
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	200008c8 	.word	0x200008c8

080090e0 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80090e8:	f7f8 ffbe 	bl	8002068 <HAL_GetTick>
 80090ec:	4603      	mov	r3, r0
 80090ee:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 80090f0:	e00a      	b.n	8009108 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80090f2:	f7f8 ffb9 	bl	8002068 <HAL_GetTick>
 80090f6:	4602      	mov	r2, r0
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	1ad2      	subs	r2, r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d902      	bls.n	8009108 <wait_spi_tx_event+0x28>
    {
      return -1;
 8009102:	f04f 33ff 	mov.w	r3, #4294967295
 8009106:	e004      	b.n	8009112 <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 8009108:	4b04      	ldr	r3, [pc, #16]	; (800911c <wait_spi_tx_event+0x3c>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d0f0      	beq.n	80090f2 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8009110:	2300      	movs	r3, #0
#endif
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	200008cc 	.word	0x200008cc

08009120 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b086      	sub	sp, #24
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	460b      	mov	r3, r1
 800912a:	607a      	str	r2, [r7, #4]
 800912c:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800912e:	2300      	movs	r3, #0
 8009130:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 8009132:	2201      	movs	r2, #1
 8009134:	2101      	movs	r1, #1
 8009136:	4834      	ldr	r0, [pc, #208]	; (8009208 <SPI_WIFI_ReceiveData+0xe8>)
 8009138:	f7f9 fcf6 	bl	8002b28 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 800913c:	2003      	movs	r0, #3
 800913e:	f000 f8e3 	bl	8009308 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4618      	mov	r0, r3
 8009146:	f7ff ff8b 	bl	8009060 <wait_cmddata_rdy_rising_event>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	da02      	bge.n	8009156 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8009150:	f06f 0302 	mvn.w	r3, #2
 8009154:	e054      	b.n	8009200 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8009156:	2200      	movs	r2, #0
 8009158:	2101      	movs	r1, #1
 800915a:	482b      	ldr	r0, [pc, #172]	; (8009208 <SPI_WIFI_ReceiveData+0xe8>)
 800915c:	f7f9 fce4 	bl	8002b28 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8009160:	200f      	movs	r0, #15
 8009162:	f000 f8d1 	bl	8009308 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8009166:	e03d      	b.n	80091e4 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8009168:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800916c:	897b      	ldrh	r3, [r7, #10]
 800916e:	429a      	cmp	r2, r3
 8009170:	db02      	blt.n	8009178 <SPI_WIFI_ReceiveData+0x58>
 8009172:	897b      	ldrh	r3, [r7, #10]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d13c      	bne.n	80091f2 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8009178:	4b24      	ldr	r3, [pc, #144]	; (800920c <SPI_WIFI_ReceiveData+0xec>)
 800917a:	2201      	movs	r2, #1
 800917c:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800917e:	f107 0314 	add.w	r3, r7, #20
 8009182:	2201      	movs	r2, #1
 8009184:	4619      	mov	r1, r3
 8009186:	4822      	ldr	r0, [pc, #136]	; (8009210 <SPI_WIFI_ReceiveData+0xf0>)
 8009188:	f7fc f846 	bl	8005218 <HAL_SPI_Receive_IT>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d007      	beq.n	80091a2 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8009192:	2201      	movs	r2, #1
 8009194:	2101      	movs	r1, #1
 8009196:	481c      	ldr	r0, [pc, #112]	; (8009208 <SPI_WIFI_ReceiveData+0xe8>)
 8009198:	f7f9 fcc6 	bl	8002b28 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 800919c:	f04f 33ff 	mov.w	r3, #4294967295
 80091a0:	e02e      	b.n	8009200 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7ff ff7b 	bl	80090a0 <wait_spi_rx_event>

      pData[0] = tmp[0];
 80091aa:	7d3a      	ldrb	r2, [r7, #20]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	3301      	adds	r3, #1
 80091b4:	7d7a      	ldrb	r2, [r7, #21]
 80091b6:	701a      	strb	r2, [r3, #0]
      length += 2;
 80091b8:	8afb      	ldrh	r3, [r7, #22]
 80091ba:	3302      	adds	r3, #2
 80091bc:	b29b      	uxth	r3, r3
 80091be:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	3302      	adds	r3, #2
 80091c4:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 80091c6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80091ca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80091ce:	db09      	blt.n	80091e4 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 80091d0:	2201      	movs	r2, #1
 80091d2:	2101      	movs	r1, #1
 80091d4:	480c      	ldr	r0, [pc, #48]	; (8009208 <SPI_WIFI_ReceiveData+0xe8>)
 80091d6:	f7f9 fca7 	bl	8002b28 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 80091da:	f7ff fea5 	bl	8008f28 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 80091de:	f06f 0303 	mvn.w	r3, #3
 80091e2:	e00d      	b.n	8009200 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 80091e4:	2102      	movs	r1, #2
 80091e6:	4808      	ldr	r0, [pc, #32]	; (8009208 <SPI_WIFI_ReceiveData+0xe8>)
 80091e8:	f7f9 fc86 	bl	8002af8 <HAL_GPIO_ReadPin>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d0ba      	beq.n	8009168 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 80091f2:	2201      	movs	r2, #1
 80091f4:	2101      	movs	r1, #1
 80091f6:	4804      	ldr	r0, [pc, #16]	; (8009208 <SPI_WIFI_ReceiveData+0xe8>)
 80091f8:	f7f9 fc96 	bl	8002b28 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 80091fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8009200:	4618      	mov	r0, r3
 8009202:	3718      	adds	r7, #24
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	48001000 	.word	0x48001000
 800920c:	200008c8 	.word	0x200008c8
 8009210:	20000864 	.word	0x20000864

08009214 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	460b      	mov	r3, r1
 800921e:	607a      	str	r2, [r7, #4]
 8009220:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4618      	mov	r0, r3
 8009226:	f7ff fef9 	bl	800901c <wait_cmddata_rdy_high>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	da02      	bge.n	8009236 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8009230:	f04f 33ff 	mov.w	r3, #4294967295
 8009234:	e04f      	b.n	80092d6 <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 8009236:	4b2a      	ldr	r3, [pc, #168]	; (80092e0 <SPI_WIFI_SendData+0xcc>)
 8009238:	2201      	movs	r2, #1
 800923a:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800923c:	2200      	movs	r2, #0
 800923e:	2101      	movs	r1, #1
 8009240:	4828      	ldr	r0, [pc, #160]	; (80092e4 <SPI_WIFI_SendData+0xd0>)
 8009242:	f7f9 fc71 	bl	8002b28 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8009246:	200f      	movs	r0, #15
 8009248:	f000 f85e 	bl	8009308 <SPI_WIFI_DelayUs>
  if (len > 1)
 800924c:	897b      	ldrh	r3, [r7, #10]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d919      	bls.n	8009286 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 8009252:	4b25      	ldr	r3, [pc, #148]	; (80092e8 <SPI_WIFI_SendData+0xd4>)
 8009254:	2201      	movs	r2, #1
 8009256:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8009258:	897b      	ldrh	r3, [r7, #10]
 800925a:	085b      	lsrs	r3, r3, #1
 800925c:	b29b      	uxth	r3, r3
 800925e:	461a      	mov	r2, r3
 8009260:	68f9      	ldr	r1, [r7, #12]
 8009262:	4822      	ldr	r0, [pc, #136]	; (80092ec <SPI_WIFI_SendData+0xd8>)
 8009264:	f7fb ff4a 	bl	80050fc <HAL_SPI_Transmit_IT>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d007      	beq.n	800927e <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800926e:	2201      	movs	r2, #1
 8009270:	2101      	movs	r1, #1
 8009272:	481c      	ldr	r0, [pc, #112]	; (80092e4 <SPI_WIFI_SendData+0xd0>)
 8009274:	f7f9 fc58 	bl	8002b28 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8009278:	f04f 33ff 	mov.w	r3, #4294967295
 800927c:	e02b      	b.n	80092d6 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4618      	mov	r0, r3
 8009282:	f7ff ff2d 	bl	80090e0 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 8009286:	897b      	ldrh	r3, [r7, #10]
 8009288:	f003 0301 	and.w	r3, r3, #1
 800928c:	2b00      	cmp	r3, #0
 800928e:	d020      	beq.n	80092d2 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 8009290:	897b      	ldrh	r3, [r7, #10]
 8009292:	3b01      	subs	r3, #1
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	4413      	add	r3, r2
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 800929c:	230a      	movs	r3, #10
 800929e:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 80092a0:	4b11      	ldr	r3, [pc, #68]	; (80092e8 <SPI_WIFI_SendData+0xd4>)
 80092a2:	2201      	movs	r2, #1
 80092a4:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 80092a6:	f107 0314 	add.w	r3, r7, #20
 80092aa:	2201      	movs	r2, #1
 80092ac:	4619      	mov	r1, r3
 80092ae:	480f      	ldr	r0, [pc, #60]	; (80092ec <SPI_WIFI_SendData+0xd8>)
 80092b0:	f7fb ff24 	bl	80050fc <HAL_SPI_Transmit_IT>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d007      	beq.n	80092ca <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 80092ba:	2201      	movs	r2, #1
 80092bc:	2101      	movs	r1, #1
 80092be:	4809      	ldr	r0, [pc, #36]	; (80092e4 <SPI_WIFI_SendData+0xd0>)
 80092c0:	f7f9 fc32 	bl	8002b28 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80092c4:	f04f 33ff 	mov.w	r3, #4294967295
 80092c8:	e005      	b.n	80092d6 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7ff ff07 	bl	80090e0 <wait_spi_tx_event>
    
  }
  return len;
 80092d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3718      	adds	r7, #24
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	200008d0 	.word	0x200008d0
 80092e4:	48001000 	.word	0x48001000
 80092e8:	200008cc 	.word	0x200008cc
 80092ec:	20000864 	.word	0x20000864

080092f0 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f7f8 fec1 	bl	8002080 <HAL_Delay>
}
 80092fe:	bf00      	nop
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
	...

08009308 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8009310:	2300      	movs	r3, #0
 8009312:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8009314:	2300      	movs	r3, #0
 8009316:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8009318:	4b20      	ldr	r3, [pc, #128]	; (800939c <SPI_WIFI_DelayUs+0x94>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d122      	bne.n	8009366 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8009320:	4b1f      	ldr	r3, [pc, #124]	; (80093a0 <SPI_WIFI_DelayUs+0x98>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a1f      	ldr	r2, [pc, #124]	; (80093a4 <SPI_WIFI_DelayUs+0x9c>)
 8009326:	fba2 2303 	umull	r2, r3, r2, r3
 800932a:	099b      	lsrs	r3, r3, #6
 800932c:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 800932e:	2300      	movs	r3, #0
 8009330:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8009336:	f7f8 fe97 	bl	8002068 <HAL_GetTick>
 800933a:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 800933c:	e002      	b.n	8009344 <SPI_WIFI_DelayUs+0x3c>
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	3b01      	subs	r3, #1
 8009342:	60bb      	str	r3, [r7, #8]
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1f9      	bne.n	800933e <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 800934a:	f7f8 fe8d 	bl	8002068 <HAL_GetTick>
 800934e:	4602      	mov	r2, r0
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	1ad3      	subs	r3, r2, r3
 8009354:	4a11      	ldr	r2, [pc, #68]	; (800939c <SPI_WIFI_DelayUs+0x94>)
 8009356:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8009358:	4b10      	ldr	r3, [pc, #64]	; (800939c <SPI_WIFI_DelayUs+0x94>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d102      	bne.n	8009366 <SPI_WIFI_DelayUs+0x5e>
 8009360:	4b0e      	ldr	r3, [pc, #56]	; (800939c <SPI_WIFI_DelayUs+0x94>)
 8009362:	2201      	movs	r2, #1
 8009364:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8009366:	4b0e      	ldr	r3, [pc, #56]	; (80093a0 <SPI_WIFI_DelayUs+0x98>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a0f      	ldr	r2, [pc, #60]	; (80093a8 <SPI_WIFI_DelayUs+0xa0>)
 800936c:	fba2 2303 	umull	r2, r3, r2, r3
 8009370:	0c9a      	lsrs	r2, r3, #18
 8009372:	4b0a      	ldr	r3, [pc, #40]	; (800939c <SPI_WIFI_DelayUs+0x94>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	fbb2 f3f3 	udiv	r3, r2, r3
 800937a:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	697a      	ldr	r2, [r7, #20]
 8009380:	fb02 f303 	mul.w	r3, r2, r3
 8009384:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8009386:	e002      	b.n	800938e <SPI_WIFI_DelayUs+0x86>
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	3b01      	subs	r3, #1
 800938c:	60bb      	str	r3, [r7, #8]
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1f9      	bne.n	8009388 <SPI_WIFI_DelayUs+0x80>
  return;
 8009394:	bf00      	nop
}
 8009396:	3718      	adds	r7, #24
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	200008d4 	.word	0x200008d4
 80093a0:	20000000 	.word	0x20000000
 80093a4:	10624dd3 	.word	0x10624dd3
 80093a8:	431bde83 	.word	0x431bde83

080093ac <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 80093b4:	4b06      	ldr	r3, [pc, #24]	; (80093d0 <HAL_SPI_RxCpltCallback+0x24>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d002      	beq.n	80093c2 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 80093bc:	4b04      	ldr	r3, [pc, #16]	; (80093d0 <HAL_SPI_RxCpltCallback+0x24>)
 80093be:	2200      	movs	r2, #0
 80093c0:	601a      	str	r2, [r3, #0]
  }
}
 80093c2:	bf00      	nop
 80093c4:	370c      	adds	r7, #12
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr
 80093ce:	bf00      	nop
 80093d0:	200008c8 	.word	0x200008c8

080093d4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 80093dc:	4b06      	ldr	r3, [pc, #24]	; (80093f8 <HAL_SPI_TxCpltCallback+0x24>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d002      	beq.n	80093ea <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 80093e4:	4b04      	ldr	r3, [pc, #16]	; (80093f8 <HAL_SPI_TxCpltCallback+0x24>)
 80093e6:	2200      	movs	r2, #0
 80093e8:	601a      	str	r2, [r3, #0]
  }
}
 80093ea:	bf00      	nop
 80093ec:	370c      	adds	r7, #12
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop
 80093f8:	200008cc 	.word	0x200008cc

080093fc <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 80093fc:	b480      	push	{r7}
 80093fe:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8009400:	4b05      	ldr	r3, [pc, #20]	; (8009418 <SPI_WIFI_ISR+0x1c>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d102      	bne.n	800940e <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8009408:	4b03      	ldr	r3, [pc, #12]	; (8009418 <SPI_WIFI_ISR+0x1c>)
 800940a:	2200      	movs	r2, #0
 800940c:	601a      	str	r2, [r3, #0]
   }
}
 800940e:	bf00      	nop
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr
 8009418:	200008d0 	.word	0x200008d0

0800941c <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8009426:	4b0d      	ldr	r3, [pc, #52]	; (800945c <WIFI_Init+0x40>)
 8009428:	9301      	str	r3, [sp, #4]
 800942a:	4b0d      	ldr	r3, [pc, #52]	; (8009460 <WIFI_Init+0x44>)
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	4b0d      	ldr	r3, [pc, #52]	; (8009464 <WIFI_Init+0x48>)
 8009430:	4a0d      	ldr	r2, [pc, #52]	; (8009468 <WIFI_Init+0x4c>)
 8009432:	490e      	ldr	r1, [pc, #56]	; (800946c <WIFI_Init+0x50>)
 8009434:	480e      	ldr	r0, [pc, #56]	; (8009470 <WIFI_Init+0x54>)
 8009436:	f7ff f8c9 	bl	80085cc <ES_WIFI_RegisterBusIO>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d107      	bne.n	8009450 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8009440:	480b      	ldr	r0, [pc, #44]	; (8009470 <WIFI_Init+0x54>)
 8009442:	f7ff f895 	bl	8008570 <ES_WIFI_Init>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d101      	bne.n	8009450 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 800944c:	2300      	movs	r3, #0
 800944e:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8009450:	79fb      	ldrb	r3, [r7, #7]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3708      	adds	r7, #8
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	08009121 	.word	0x08009121
 8009460:	08009215 	.word	0x08009215
 8009464:	080092f1 	.word	0x080092f1
 8009468:	08009009 	.word	0x08009009
 800946c:	08008e6d 	.word	0x08008e6d
 8009470:	200008d8 	.word	0x200008d8

08009474 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	4613      	mov	r3, r2
 8009480:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8009486:	79fb      	ldrb	r3, [r7, #7]
 8009488:	68ba      	ldr	r2, [r7, #8]
 800948a:	68f9      	ldr	r1, [r7, #12]
 800948c:	4809      	ldr	r0, [pc, #36]	; (80094b4 <WIFI_Connect+0x40>)
 800948e:	f7ff f8d1 	bl	8008634 <ES_WIFI_Connect>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d107      	bne.n	80094a8 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8009498:	4806      	ldr	r0, [pc, #24]	; (80094b4 <WIFI_Connect+0x40>)
 800949a:	f7ff f961 	bl	8008760 <ES_WIFI_GetNetworkSettings>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d101      	bne.n	80094a8 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 80094a4:	2300      	movs	r3, #0
 80094a6:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 80094a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3718      	adds	r7, #24
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	200008d8 	.word	0x200008d8

080094b8 <WIFI_Disconnect>:
  * @brief  Disconnect from a network
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Disconnect(void)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	71fb      	strb	r3, [r7, #7]
  if( ES_WIFI_Disconnect(&EsWifiObj)== ES_WIFI_STATUS_OK)
 80094c2:	4806      	ldr	r0, [pc, #24]	; (80094dc <WIFI_Disconnect+0x24>)
 80094c4:	f7ff f92e 	bl	8008724 <ES_WIFI_Disconnect>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d101      	bne.n	80094d2 <WIFI_Disconnect+0x1a>
  {
    ret = WIFI_STATUS_OK;
 80094ce:	2300      	movs	r3, #0
 80094d0:	71fb      	strb	r3, [r7, #7]
  }
  
  return ret;
 80094d2:	79fb      	ldrb	r3, [r7, #7]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3708      	adds	r7, #8
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	200008d8 	.word	0x200008d8

080094e0 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b08a      	sub	sp, #40	; 0x28
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	607a      	str	r2, [r7, #4]
 80094ea:	603b      	str	r3, [r7, #0]
 80094ec:	460b      	mov	r3, r1
 80094ee:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 80094fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80094fe:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 8009500:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009502:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8009504:	7afb      	ldrb	r3, [r7, #11]
 8009506:	2b00      	cmp	r3, #0
 8009508:	bf14      	ite	ne
 800950a:	2301      	movne	r3, #1
 800950c:	2300      	moveq	r3, #0
 800950e:	b2db      	uxtb	r3, r3
 8009510:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	785b      	ldrb	r3, [r3, #1]
 800951c:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	789b      	ldrb	r3, [r3, #2]
 8009522:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	78db      	ldrb	r3, [r3, #3]
 8009528:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800952a:	f107 0310 	add.w	r3, r7, #16
 800952e:	4619      	mov	r1, r3
 8009530:	4807      	ldr	r0, [pc, #28]	; (8009550 <WIFI_OpenClientConnection+0x70>)
 8009532:	f7ff f93f 	bl	80087b4 <ES_WIFI_StartClientConnection>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d102      	bne.n	8009542 <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 800953c:	2300      	movs	r3, #0
 800953e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8009542:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009546:	4618      	mov	r0, r3
 8009548:	3728      	adds	r7, #40	; 0x28
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	200008d8 	.word	0x200008d8

08009554 <WIFI_CloseClientConnection>:
/**
  * @brief  Close client connection
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseClientConnection(uint32_t socket)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b088      	sub	sp, #32
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	77fb      	strb	r3, [r7, #31]
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	b2db      	uxtb	r3, r3
 8009564:	727b      	strb	r3, [r7, #9]
  
  if(ES_WIFI_StopClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8009566:	f107 0308 	add.w	r3, r7, #8
 800956a:	4619      	mov	r1, r3
 800956c:	4806      	ldr	r0, [pc, #24]	; (8009588 <WIFI_CloseClientConnection+0x34>)
 800956e:	f7ff fa0b 	bl	8008988 <ES_WIFI_StopClientConnection>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d101      	bne.n	800957c <WIFI_CloseClientConnection+0x28>
  {
    ret = WIFI_STATUS_OK;
 8009578:	2300      	movs	r3, #0
 800957a:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800957c:	7ffb      	ldrb	r3, [r7, #31]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3720      	adds	r7, #32
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	200008d8 	.word	0x200008d8

0800958c <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b088      	sub	sp, #32
 8009590:	af02      	add	r7, sp, #8
 8009592:	60b9      	str	r1, [r7, #8]
 8009594:	607b      	str	r3, [r7, #4]
 8009596:	4603      	mov	r3, r0
 8009598:	73fb      	strb	r3, [r7, #15]
 800959a:	4613      	mov	r3, r2
 800959c:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80095a2:	89ba      	ldrh	r2, [r7, #12]
 80095a4:	7bf9      	ldrb	r1, [r7, #15]
 80095a6:	6a3b      	ldr	r3, [r7, #32]
 80095a8:	9301      	str	r3, [sp, #4]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	4613      	mov	r3, r2
 80095b0:	68ba      	ldr	r2, [r7, #8]
 80095b2:	4806      	ldr	r0, [pc, #24]	; (80095cc <WIFI_SendData+0x40>)
 80095b4:	f7ff fa22 	bl	80089fc <ES_WIFI_SendData>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d101      	bne.n	80095c2 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 80095be:	2300      	movs	r3, #0
 80095c0:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 80095c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3718      	adds	r7, #24
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	200008d8 	.word	0x200008d8

080095d0 <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b088      	sub	sp, #32
 80095d4:	af02      	add	r7, sp, #8
 80095d6:	60b9      	str	r1, [r7, #8]
 80095d8:	607b      	str	r3, [r7, #4]
 80095da:	4603      	mov	r3, r0
 80095dc:	73fb      	strb	r3, [r7, #15]
 80095de:	4613      	mov	r3, r2
 80095e0:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80095e6:	89ba      	ldrh	r2, [r7, #12]
 80095e8:	7bf9      	ldrb	r1, [r7, #15]
 80095ea:	6a3b      	ldr	r3, [r7, #32]
 80095ec:	9301      	str	r3, [sp, #4]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	4613      	mov	r3, r2
 80095f4:	68ba      	ldr	r2, [r7, #8]
 80095f6:	4806      	ldr	r0, [pc, #24]	; (8009610 <WIFI_ReceiveData+0x40>)
 80095f8:	f7ff fabc 	bl	8008b74 <ES_WIFI_ReceiveData>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d101      	bne.n	8009606 <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8009606:	7dfb      	ldrb	r3, [r7, #23]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3718      	adds	r7, #24
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	200008d8 	.word	0x200008d8

08009614 <__NVIC_SetPriority>:
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	4603      	mov	r3, r0
 800961c:	6039      	str	r1, [r7, #0]
 800961e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009624:	2b00      	cmp	r3, #0
 8009626:	db0a      	blt.n	800963e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	b2da      	uxtb	r2, r3
 800962c:	490c      	ldr	r1, [pc, #48]	; (8009660 <__NVIC_SetPriority+0x4c>)
 800962e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009632:	0112      	lsls	r2, r2, #4
 8009634:	b2d2      	uxtb	r2, r2
 8009636:	440b      	add	r3, r1
 8009638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800963c:	e00a      	b.n	8009654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	b2da      	uxtb	r2, r3
 8009642:	4908      	ldr	r1, [pc, #32]	; (8009664 <__NVIC_SetPriority+0x50>)
 8009644:	79fb      	ldrb	r3, [r7, #7]
 8009646:	f003 030f 	and.w	r3, r3, #15
 800964a:	3b04      	subs	r3, #4
 800964c:	0112      	lsls	r2, r2, #4
 800964e:	b2d2      	uxtb	r2, r2
 8009650:	440b      	add	r3, r1
 8009652:	761a      	strb	r2, [r3, #24]
}
 8009654:	bf00      	nop
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr
 8009660:	e000e100 	.word	0xe000e100
 8009664:	e000ed00 	.word	0xe000ed00

08009668 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009668:	b580      	push	{r7, lr}
 800966a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800966c:	4b05      	ldr	r3, [pc, #20]	; (8009684 <SysTick_Handler+0x1c>)
 800966e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009670:	f002 fa3c 	bl	800baec <xTaskGetSchedulerState>
 8009674:	4603      	mov	r3, r0
 8009676:	2b01      	cmp	r3, #1
 8009678:	d001      	beq.n	800967e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800967a:	f003 f925 	bl	800c8c8 <xPortSysTickHandler>
  }
}
 800967e:	bf00      	nop
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	e000e010 	.word	0xe000e010

08009688 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009688:	b580      	push	{r7, lr}
 800968a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800968c:	2100      	movs	r1, #0
 800968e:	f06f 0004 	mvn.w	r0, #4
 8009692:	f7ff ffbf 	bl	8009614 <__NVIC_SetPriority>
#endif
}
 8009696:	bf00      	nop
 8009698:	bd80      	pop	{r7, pc}
	...

0800969c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096a2:	f3ef 8305 	mrs	r3, IPSR
 80096a6:	603b      	str	r3, [r7, #0]
  return(result);
 80096a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d003      	beq.n	80096b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80096ae:	f06f 0305 	mvn.w	r3, #5
 80096b2:	607b      	str	r3, [r7, #4]
 80096b4:	e00c      	b.n	80096d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80096b6:	4b0a      	ldr	r3, [pc, #40]	; (80096e0 <osKernelInitialize+0x44>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d105      	bne.n	80096ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80096be:	4b08      	ldr	r3, [pc, #32]	; (80096e0 <osKernelInitialize+0x44>)
 80096c0:	2201      	movs	r2, #1
 80096c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80096c4:	2300      	movs	r3, #0
 80096c6:	607b      	str	r3, [r7, #4]
 80096c8:	e002      	b.n	80096d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80096ca:	f04f 33ff 	mov.w	r3, #4294967295
 80096ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80096d0:	687b      	ldr	r3, [r7, #4]
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	370c      	adds	r7, #12
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	200011d8 	.word	0x200011d8

080096e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096ea:	f3ef 8305 	mrs	r3, IPSR
 80096ee:	603b      	str	r3, [r7, #0]
  return(result);
 80096f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d003      	beq.n	80096fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80096f6:	f06f 0305 	mvn.w	r3, #5
 80096fa:	607b      	str	r3, [r7, #4]
 80096fc:	e010      	b.n	8009720 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80096fe:	4b0b      	ldr	r3, [pc, #44]	; (800972c <osKernelStart+0x48>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d109      	bne.n	800971a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009706:	f7ff ffbf 	bl	8009688 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800970a:	4b08      	ldr	r3, [pc, #32]	; (800972c <osKernelStart+0x48>)
 800970c:	2202      	movs	r2, #2
 800970e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009710:	f001 fda4 	bl	800b25c <vTaskStartScheduler>
      stat = osOK;
 8009714:	2300      	movs	r3, #0
 8009716:	607b      	str	r3, [r7, #4]
 8009718:	e002      	b.n	8009720 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800971a:	f04f 33ff 	mov.w	r3, #4294967295
 800971e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009720:	687b      	ldr	r3, [r7, #4]
}
 8009722:	4618      	mov	r0, r3
 8009724:	3708      	adds	r7, #8
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	200011d8 	.word	0x200011d8

08009730 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009730:	b580      	push	{r7, lr}
 8009732:	b08e      	sub	sp, #56	; 0x38
 8009734:	af04      	add	r7, sp, #16
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800973c:	2300      	movs	r3, #0
 800973e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009740:	f3ef 8305 	mrs	r3, IPSR
 8009744:	617b      	str	r3, [r7, #20]
  return(result);
 8009746:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009748:	2b00      	cmp	r3, #0
 800974a:	d17e      	bne.n	800984a <osThreadNew+0x11a>
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d07b      	beq.n	800984a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009752:	2380      	movs	r3, #128	; 0x80
 8009754:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009756:	2318      	movs	r3, #24
 8009758:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800975a:	2300      	movs	r3, #0
 800975c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800975e:	f04f 33ff 	mov.w	r3, #4294967295
 8009762:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d045      	beq.n	80097f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d002      	beq.n	8009778 <osThreadNew+0x48>
        name = attr->name;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	699b      	ldr	r3, [r3, #24]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d002      	beq.n	8009786 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	699b      	ldr	r3, [r3, #24]
 8009784:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d008      	beq.n	800979e <osThreadNew+0x6e>
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	2b38      	cmp	r3, #56	; 0x38
 8009790:	d805      	bhi.n	800979e <osThreadNew+0x6e>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	f003 0301 	and.w	r3, r3, #1
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <osThreadNew+0x72>
        return (NULL);
 800979e:	2300      	movs	r3, #0
 80097a0:	e054      	b.n	800984c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	695b      	ldr	r3, [r3, #20]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d003      	beq.n	80097b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	089b      	lsrs	r3, r3, #2
 80097b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00e      	beq.n	80097d8 <osThreadNew+0xa8>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	2b5b      	cmp	r3, #91	; 0x5b
 80097c0:	d90a      	bls.n	80097d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d006      	beq.n	80097d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	695b      	ldr	r3, [r3, #20]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d002      	beq.n	80097d8 <osThreadNew+0xa8>
        mem = 1;
 80097d2:	2301      	movs	r3, #1
 80097d4:	61bb      	str	r3, [r7, #24]
 80097d6:	e010      	b.n	80097fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d10c      	bne.n	80097fa <osThreadNew+0xca>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d108      	bne.n	80097fa <osThreadNew+0xca>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	691b      	ldr	r3, [r3, #16]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d104      	bne.n	80097fa <osThreadNew+0xca>
          mem = 0;
 80097f0:	2300      	movs	r3, #0
 80097f2:	61bb      	str	r3, [r7, #24]
 80097f4:	e001      	b.n	80097fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80097f6:	2300      	movs	r3, #0
 80097f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d110      	bne.n	8009822 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009808:	9202      	str	r2, [sp, #8]
 800980a:	9301      	str	r3, [sp, #4]
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	6a3a      	ldr	r2, [r7, #32]
 8009814:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f001 fb4a 	bl	800aeb0 <xTaskCreateStatic>
 800981c:	4603      	mov	r3, r0
 800981e:	613b      	str	r3, [r7, #16]
 8009820:	e013      	b.n	800984a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d110      	bne.n	800984a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009828:	6a3b      	ldr	r3, [r7, #32]
 800982a:	b29a      	uxth	r2, r3
 800982c:	f107 0310 	add.w	r3, r7, #16
 8009830:	9301      	str	r3, [sp, #4]
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	9300      	str	r3, [sp, #0]
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800983a:	68f8      	ldr	r0, [r7, #12]
 800983c:	f001 fb95 	bl	800af6a <xTaskCreate>
 8009840:	4603      	mov	r3, r0
 8009842:	2b01      	cmp	r3, #1
 8009844:	d001      	beq.n	800984a <osThreadNew+0x11a>
            hTask = NULL;
 8009846:	2300      	movs	r3, #0
 8009848:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800984a:	693b      	ldr	r3, [r7, #16]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3728      	adds	r7, #40	; 0x28
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009854:	b580      	push	{r7, lr}
 8009856:	b08a      	sub	sp, #40	; 0x28
 8009858:	af02      	add	r7, sp, #8
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	60b9      	str	r1, [r7, #8]
 800985e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009860:	2300      	movs	r3, #0
 8009862:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009864:	f3ef 8305 	mrs	r3, IPSR
 8009868:	613b      	str	r3, [r7, #16]
  return(result);
 800986a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800986c:	2b00      	cmp	r3, #0
 800986e:	d175      	bne.n	800995c <osSemaphoreNew+0x108>
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d072      	beq.n	800995c <osSemaphoreNew+0x108>
 8009876:	68ba      	ldr	r2, [r7, #8]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	429a      	cmp	r2, r3
 800987c:	d86e      	bhi.n	800995c <osSemaphoreNew+0x108>
    mem = -1;
 800987e:	f04f 33ff 	mov.w	r3, #4294967295
 8009882:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d015      	beq.n	80098b6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d006      	beq.n	80098a0 <osSemaphoreNew+0x4c>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	2b4f      	cmp	r3, #79	; 0x4f
 8009898:	d902      	bls.n	80098a0 <osSemaphoreNew+0x4c>
        mem = 1;
 800989a:	2301      	movs	r3, #1
 800989c:	61bb      	str	r3, [r7, #24]
 800989e:	e00c      	b.n	80098ba <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d108      	bne.n	80098ba <osSemaphoreNew+0x66>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d104      	bne.n	80098ba <osSemaphoreNew+0x66>
          mem = 0;
 80098b0:	2300      	movs	r3, #0
 80098b2:	61bb      	str	r3, [r7, #24]
 80098b4:	e001      	b.n	80098ba <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80098b6:	2300      	movs	r3, #0
 80098b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098c0:	d04c      	beq.n	800995c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d128      	bne.n	800991a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d10a      	bne.n	80098e4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	2203      	movs	r2, #3
 80098d4:	9200      	str	r2, [sp, #0]
 80098d6:	2200      	movs	r2, #0
 80098d8:	2100      	movs	r1, #0
 80098da:	2001      	movs	r0, #1
 80098dc:	f000 fb06 	bl	8009eec <xQueueGenericCreateStatic>
 80098e0:	61f8      	str	r0, [r7, #28]
 80098e2:	e005      	b.n	80098f0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80098e4:	2203      	movs	r2, #3
 80098e6:	2100      	movs	r1, #0
 80098e8:	2001      	movs	r0, #1
 80098ea:	f000 fb77 	bl	8009fdc <xQueueGenericCreate>
 80098ee:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d022      	beq.n	800993c <osSemaphoreNew+0xe8>
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d01f      	beq.n	800993c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80098fc:	2300      	movs	r3, #0
 80098fe:	2200      	movs	r2, #0
 8009900:	2100      	movs	r1, #0
 8009902:	69f8      	ldr	r0, [r7, #28]
 8009904:	f000 fc32 	bl	800a16c <xQueueGenericSend>
 8009908:	4603      	mov	r3, r0
 800990a:	2b01      	cmp	r3, #1
 800990c:	d016      	beq.n	800993c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800990e:	69f8      	ldr	r0, [r7, #28]
 8009910:	f001 f8fa 	bl	800ab08 <vQueueDelete>
            hSemaphore = NULL;
 8009914:	2300      	movs	r3, #0
 8009916:	61fb      	str	r3, [r7, #28]
 8009918:	e010      	b.n	800993c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d108      	bne.n	8009932 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	461a      	mov	r2, r3
 8009926:	68b9      	ldr	r1, [r7, #8]
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	f000 fbb4 	bl	800a096 <xQueueCreateCountingSemaphoreStatic>
 800992e:	61f8      	str	r0, [r7, #28]
 8009930:	e004      	b.n	800993c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009932:	68b9      	ldr	r1, [r7, #8]
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f000 fbe5 	bl	800a104 <xQueueCreateCountingSemaphore>
 800993a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00c      	beq.n	800995c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d003      	beq.n	8009950 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	617b      	str	r3, [r7, #20]
 800994e:	e001      	b.n	8009954 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009950:	2300      	movs	r3, #0
 8009952:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009954:	6979      	ldr	r1, [r7, #20]
 8009956:	69f8      	ldr	r0, [r7, #28]
 8009958:	f001 fa22 	bl	800ada0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800995c:	69fb      	ldr	r3, [r7, #28]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3720      	adds	r7, #32
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009966:	b580      	push	{r7, lr}
 8009968:	b08a      	sub	sp, #40	; 0x28
 800996a:	af02      	add	r7, sp, #8
 800996c:	60f8      	str	r0, [r7, #12]
 800996e:	60b9      	str	r1, [r7, #8]
 8009970:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009972:	2300      	movs	r3, #0
 8009974:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009976:	f3ef 8305 	mrs	r3, IPSR
 800997a:	613b      	str	r3, [r7, #16]
  return(result);
 800997c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800997e:	2b00      	cmp	r3, #0
 8009980:	d15f      	bne.n	8009a42 <osMessageQueueNew+0xdc>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d05c      	beq.n	8009a42 <osMessageQueueNew+0xdc>
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d059      	beq.n	8009a42 <osMessageQueueNew+0xdc>
    mem = -1;
 800998e:	f04f 33ff 	mov.w	r3, #4294967295
 8009992:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d029      	beq.n	80099ee <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d012      	beq.n	80099c8 <osMessageQueueNew+0x62>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	2b4f      	cmp	r3, #79	; 0x4f
 80099a8:	d90e      	bls.n	80099c8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00a      	beq.n	80099c8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	695a      	ldr	r2, [r3, #20]
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	68b9      	ldr	r1, [r7, #8]
 80099ba:	fb01 f303 	mul.w	r3, r1, r3
 80099be:	429a      	cmp	r2, r3
 80099c0:	d302      	bcc.n	80099c8 <osMessageQueueNew+0x62>
        mem = 1;
 80099c2:	2301      	movs	r3, #1
 80099c4:	61bb      	str	r3, [r7, #24]
 80099c6:	e014      	b.n	80099f2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d110      	bne.n	80099f2 <osMessageQueueNew+0x8c>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d10c      	bne.n	80099f2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d108      	bne.n	80099f2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	695b      	ldr	r3, [r3, #20]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d104      	bne.n	80099f2 <osMessageQueueNew+0x8c>
          mem = 0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	61bb      	str	r3, [r7, #24]
 80099ec:	e001      	b.n	80099f2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80099ee:	2300      	movs	r3, #0
 80099f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d10b      	bne.n	8009a10 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	691a      	ldr	r2, [r3, #16]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	2100      	movs	r1, #0
 8009a02:	9100      	str	r1, [sp, #0]
 8009a04:	68b9      	ldr	r1, [r7, #8]
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f000 fa70 	bl	8009eec <xQueueGenericCreateStatic>
 8009a0c:	61f8      	str	r0, [r7, #28]
 8009a0e:	e008      	b.n	8009a22 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d105      	bne.n	8009a22 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009a16:	2200      	movs	r2, #0
 8009a18:	68b9      	ldr	r1, [r7, #8]
 8009a1a:	68f8      	ldr	r0, [r7, #12]
 8009a1c:	f000 fade 	bl	8009fdc <xQueueGenericCreate>
 8009a20:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00c      	beq.n	8009a42 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d003      	beq.n	8009a36 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	617b      	str	r3, [r7, #20]
 8009a34:	e001      	b.n	8009a3a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009a36:	2300      	movs	r3, #0
 8009a38:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009a3a:	6979      	ldr	r1, [r7, #20]
 8009a3c:	69f8      	ldr	r0, [r7, #28]
 8009a3e:	f001 f9af 	bl	800ada0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009a42:	69fb      	ldr	r3, [r7, #28]
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3720      	adds	r7, #32
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b088      	sub	sp, #32
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	603b      	str	r3, [r7, #0]
 8009a58:	4613      	mov	r3, r2
 8009a5a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009a60:	2300      	movs	r3, #0
 8009a62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a64:	f3ef 8305 	mrs	r3, IPSR
 8009a68:	617b      	str	r3, [r7, #20]
  return(result);
 8009a6a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d028      	beq.n	8009ac2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d005      	beq.n	8009a82 <osMessageQueuePut+0x36>
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d002      	beq.n	8009a82 <osMessageQueuePut+0x36>
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d003      	beq.n	8009a8a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009a82:	f06f 0303 	mvn.w	r3, #3
 8009a86:	61fb      	str	r3, [r7, #28]
 8009a88:	e038      	b.n	8009afc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009a8e:	f107 0210 	add.w	r2, r7, #16
 8009a92:	2300      	movs	r3, #0
 8009a94:	68b9      	ldr	r1, [r7, #8]
 8009a96:	69b8      	ldr	r0, [r7, #24]
 8009a98:	f000 fc66 	bl	800a368 <xQueueGenericSendFromISR>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d003      	beq.n	8009aaa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009aa2:	f06f 0302 	mvn.w	r3, #2
 8009aa6:	61fb      	str	r3, [r7, #28]
 8009aa8:	e028      	b.n	8009afc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d025      	beq.n	8009afc <osMessageQueuePut+0xb0>
 8009ab0:	4b15      	ldr	r3, [pc, #84]	; (8009b08 <osMessageQueuePut+0xbc>)
 8009ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ab6:	601a      	str	r2, [r3, #0]
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	f3bf 8f6f 	isb	sy
 8009ac0:	e01c      	b.n	8009afc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009ac2:	69bb      	ldr	r3, [r7, #24]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d002      	beq.n	8009ace <osMessageQueuePut+0x82>
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d103      	bne.n	8009ad6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009ace:	f06f 0303 	mvn.w	r3, #3
 8009ad2:	61fb      	str	r3, [r7, #28]
 8009ad4:	e012      	b.n	8009afc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	683a      	ldr	r2, [r7, #0]
 8009ada:	68b9      	ldr	r1, [r7, #8]
 8009adc:	69b8      	ldr	r0, [r7, #24]
 8009ade:	f000 fb45 	bl	800a16c <xQueueGenericSend>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d009      	beq.n	8009afc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d003      	beq.n	8009af6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009aee:	f06f 0301 	mvn.w	r3, #1
 8009af2:	61fb      	str	r3, [r7, #28]
 8009af4:	e002      	b.n	8009afc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009af6:	f06f 0302 	mvn.w	r3, #2
 8009afa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009afc:	69fb      	ldr	r3, [r7, #28]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3720      	adds	r7, #32
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	e000ed04 	.word	0xe000ed04

08009b0c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b088      	sub	sp, #32
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	607a      	str	r2, [r7, #4]
 8009b18:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b22:	f3ef 8305 	mrs	r3, IPSR
 8009b26:	617b      	str	r3, [r7, #20]
  return(result);
 8009b28:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d028      	beq.n	8009b80 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d005      	beq.n	8009b40 <osMessageQueueGet+0x34>
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d002      	beq.n	8009b40 <osMessageQueueGet+0x34>
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d003      	beq.n	8009b48 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009b40:	f06f 0303 	mvn.w	r3, #3
 8009b44:	61fb      	str	r3, [r7, #28]
 8009b46:	e037      	b.n	8009bb8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009b4c:	f107 0310 	add.w	r3, r7, #16
 8009b50:	461a      	mov	r2, r3
 8009b52:	68b9      	ldr	r1, [r7, #8]
 8009b54:	69b8      	ldr	r0, [r7, #24]
 8009b56:	f000 ff1b 	bl	800a990 <xQueueReceiveFromISR>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d003      	beq.n	8009b68 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009b60:	f06f 0302 	mvn.w	r3, #2
 8009b64:	61fb      	str	r3, [r7, #28]
 8009b66:	e027      	b.n	8009bb8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d024      	beq.n	8009bb8 <osMessageQueueGet+0xac>
 8009b6e:	4b15      	ldr	r3, [pc, #84]	; (8009bc4 <osMessageQueueGet+0xb8>)
 8009b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b74:	601a      	str	r2, [r3, #0]
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	f3bf 8f6f 	isb	sy
 8009b7e:	e01b      	b.n	8009bb8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d002      	beq.n	8009b8c <osMessageQueueGet+0x80>
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d103      	bne.n	8009b94 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009b8c:	f06f 0303 	mvn.w	r3, #3
 8009b90:	61fb      	str	r3, [r7, #28]
 8009b92:	e011      	b.n	8009bb8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009b94:	683a      	ldr	r2, [r7, #0]
 8009b96:	68b9      	ldr	r1, [r7, #8]
 8009b98:	69b8      	ldr	r0, [r7, #24]
 8009b9a:	f000 fd0d 	bl	800a5b8 <xQueueReceive>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d009      	beq.n	8009bb8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d003      	beq.n	8009bb2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009baa:	f06f 0301 	mvn.w	r3, #1
 8009bae:	61fb      	str	r3, [r7, #28]
 8009bb0:	e002      	b.n	8009bb8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009bb2:	f06f 0302 	mvn.w	r3, #2
 8009bb6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009bb8:	69fb      	ldr	r3, [r7, #28]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3720      	adds	r7, #32
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	e000ed04 	.word	0xe000ed04

08009bc8 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b086      	sub	sp, #24
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d102      	bne.n	8009be0 <osMessageQueueGetCount+0x18>
    count = 0U;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	617b      	str	r3, [r7, #20]
 8009bde:	e00e      	b.n	8009bfe <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009be0:	f3ef 8305 	mrs	r3, IPSR
 8009be4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009be6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d004      	beq.n	8009bf6 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8009bec:	6938      	ldr	r0, [r7, #16]
 8009bee:	f000 ff6d 	bl	800aacc <uxQueueMessagesWaitingFromISR>
 8009bf2:	6178      	str	r0, [r7, #20]
 8009bf4:	e003      	b.n	8009bfe <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8009bf6:	6938      	ldr	r0, [r7, #16]
 8009bf8:	f000 ff4a 	bl	800aa90 <uxQueueMessagesWaiting>
 8009bfc:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8009bfe:	697b      	ldr	r3, [r7, #20]
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3718      	adds	r7, #24
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b086      	sub	sp, #24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c14:	f3ef 8305 	mrs	r3, IPSR
 8009c18:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d003      	beq.n	8009c28 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 8009c20:	f06f 0305 	mvn.w	r3, #5
 8009c24:	617b      	str	r3, [r7, #20]
 8009c26:	e00c      	b.n	8009c42 <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d103      	bne.n	8009c36 <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 8009c2e:	f06f 0303 	mvn.w	r3, #3
 8009c32:	617b      	str	r3, [r7, #20]
 8009c34:	e005      	b.n	8009c42 <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 8009c36:	2300      	movs	r3, #0
 8009c38:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	6938      	ldr	r0, [r7, #16]
 8009c3e:	f000 f8ed 	bl	8009e1c <xQueueGenericReset>
  }

  return (stat);
 8009c42:	697b      	ldr	r3, [r7, #20]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3718      	adds	r7, #24
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	4a07      	ldr	r2, [pc, #28]	; (8009c78 <vApplicationGetIdleTaskMemory+0x2c>)
 8009c5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	4a06      	ldr	r2, [pc, #24]	; (8009c7c <vApplicationGetIdleTaskMemory+0x30>)
 8009c62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2280      	movs	r2, #128	; 0x80
 8009c68:	601a      	str	r2, [r3, #0]
}
 8009c6a:	bf00      	nop
 8009c6c:	3714      	adds	r7, #20
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr
 8009c76:	bf00      	nop
 8009c78:	200011dc 	.word	0x200011dc
 8009c7c:	20001238 	.word	0x20001238

08009c80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009c80:	b480      	push	{r7}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	4a07      	ldr	r2, [pc, #28]	; (8009cac <vApplicationGetTimerTaskMemory+0x2c>)
 8009c90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	4a06      	ldr	r2, [pc, #24]	; (8009cb0 <vApplicationGetTimerTaskMemory+0x30>)
 8009c96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c9e:	601a      	str	r2, [r3, #0]
}
 8009ca0:	bf00      	nop
 8009ca2:	3714      	adds	r7, #20
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	20001438 	.word	0x20001438
 8009cb0:	20001494 	.word	0x20001494

08009cb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f103 0208 	add.w	r2, r3, #8
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8009ccc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f103 0208 	add.w	r2, r3, #8
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f103 0208 	add.w	r2, r3, #8
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009ce8:	bf00      	nop
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009d02:	bf00      	nop
 8009d04:	370c      	adds	r7, #12
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr

08009d0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d0e:	b480      	push	{r7}
 8009d10:	b085      	sub	sp, #20
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
 8009d16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	68fa      	ldr	r2, [r7, #12]
 8009d22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	689a      	ldr	r2, [r3, #8]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	683a      	ldr	r2, [r7, #0]
 8009d32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	683a      	ldr	r2, [r7, #0]
 8009d38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	1c5a      	adds	r2, r3, #1
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	601a      	str	r2, [r3, #0]
}
 8009d4a:	bf00      	nop
 8009d4c:	3714      	adds	r7, #20
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr

08009d56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d56:	b480      	push	{r7}
 8009d58:	b085      	sub	sp, #20
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
 8009d5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d6c:	d103      	bne.n	8009d76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	60fb      	str	r3, [r7, #12]
 8009d74:	e00c      	b.n	8009d90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	3308      	adds	r3, #8
 8009d7a:	60fb      	str	r3, [r7, #12]
 8009d7c:	e002      	b.n	8009d84 <vListInsert+0x2e>
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	60fb      	str	r3, [r7, #12]
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d2f6      	bcs.n	8009d7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	685a      	ldr	r2, [r3, #4]
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	683a      	ldr	r2, [r7, #0]
 8009d9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	683a      	ldr	r2, [r7, #0]
 8009daa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	1c5a      	adds	r2, r3, #1
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	601a      	str	r2, [r3, #0]
}
 8009dbc:	bf00      	nop
 8009dbe:	3714      	adds	r7, #20
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	6892      	ldr	r2, [r2, #8]
 8009dde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	6852      	ldr	r2, [r2, #4]
 8009de8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d103      	bne.n	8009dfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	689a      	ldr	r2, [r3, #8]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	1e5a      	subs	r2, r3, #1
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d10a      	bne.n	8009e46 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e34:	f383 8811 	msr	BASEPRI, r3
 8009e38:	f3bf 8f6f 	isb	sy
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009e42:	bf00      	nop
 8009e44:	e7fe      	b.n	8009e44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009e46:	f002 fcad 	bl	800c7a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e52:	68f9      	ldr	r1, [r7, #12]
 8009e54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e56:	fb01 f303 	mul.w	r3, r1, r3
 8009e5a:	441a      	add	r2, r3
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2200      	movs	r2, #0
 8009e64:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e76:	3b01      	subs	r3, #1
 8009e78:	68f9      	ldr	r1, [r7, #12]
 8009e7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e7c:	fb01 f303 	mul.w	r3, r1, r3
 8009e80:	441a      	add	r2, r3
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	22ff      	movs	r2, #255	; 0xff
 8009e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	22ff      	movs	r2, #255	; 0xff
 8009e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d114      	bne.n	8009ec6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d01a      	beq.n	8009eda <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	3310      	adds	r3, #16
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f001 fc61 	bl	800b770 <xTaskRemoveFromEventList>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d012      	beq.n	8009eda <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009eb4:	4b0c      	ldr	r3, [pc, #48]	; (8009ee8 <xQueueGenericReset+0xcc>)
 8009eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eba:	601a      	str	r2, [r3, #0]
 8009ebc:	f3bf 8f4f 	dsb	sy
 8009ec0:	f3bf 8f6f 	isb	sy
 8009ec4:	e009      	b.n	8009eda <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	3310      	adds	r3, #16
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7ff fef2 	bl	8009cb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	3324      	adds	r3, #36	; 0x24
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7ff feed 	bl	8009cb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009eda:	f002 fc93 	bl	800c804 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009ede:	2301      	movs	r3, #1
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	e000ed04 	.word	0xe000ed04

08009eec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b08e      	sub	sp, #56	; 0x38
 8009ef0:	af02      	add	r7, sp, #8
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	607a      	str	r2, [r7, #4]
 8009ef8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10a      	bne.n	8009f16 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f04:	f383 8811 	msr	BASEPRI, r3
 8009f08:	f3bf 8f6f 	isb	sy
 8009f0c:	f3bf 8f4f 	dsb	sy
 8009f10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f12:	bf00      	nop
 8009f14:	e7fe      	b.n	8009f14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d10a      	bne.n	8009f32 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f20:	f383 8811 	msr	BASEPRI, r3
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f2e:	bf00      	nop
 8009f30:	e7fe      	b.n	8009f30 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d002      	beq.n	8009f3e <xQueueGenericCreateStatic+0x52>
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <xQueueGenericCreateStatic+0x56>
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e000      	b.n	8009f44 <xQueueGenericCreateStatic+0x58>
 8009f42:	2300      	movs	r3, #0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d10a      	bne.n	8009f5e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4c:	f383 8811 	msr	BASEPRI, r3
 8009f50:	f3bf 8f6f 	isb	sy
 8009f54:	f3bf 8f4f 	dsb	sy
 8009f58:	623b      	str	r3, [r7, #32]
}
 8009f5a:	bf00      	nop
 8009f5c:	e7fe      	b.n	8009f5c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d102      	bne.n	8009f6a <xQueueGenericCreateStatic+0x7e>
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d101      	bne.n	8009f6e <xQueueGenericCreateStatic+0x82>
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e000      	b.n	8009f70 <xQueueGenericCreateStatic+0x84>
 8009f6e:	2300      	movs	r3, #0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10a      	bne.n	8009f8a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f78:	f383 8811 	msr	BASEPRI, r3
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	61fb      	str	r3, [r7, #28]
}
 8009f86:	bf00      	nop
 8009f88:	e7fe      	b.n	8009f88 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009f8a:	2350      	movs	r3, #80	; 0x50
 8009f8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	2b50      	cmp	r3, #80	; 0x50
 8009f92:	d00a      	beq.n	8009faa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f98:	f383 8811 	msr	BASEPRI, r3
 8009f9c:	f3bf 8f6f 	isb	sy
 8009fa0:	f3bf 8f4f 	dsb	sy
 8009fa4:	61bb      	str	r3, [r7, #24]
}
 8009fa6:	bf00      	nop
 8009fa8:	e7fe      	b.n	8009fa8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009faa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d00d      	beq.n	8009fd2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb8:	2201      	movs	r2, #1
 8009fba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009fbe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc4:	9300      	str	r3, [sp, #0]
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	68b9      	ldr	r1, [r7, #8]
 8009fcc:	68f8      	ldr	r0, [r7, #12]
 8009fce:	f000 f83f 	bl	800a050 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3730      	adds	r7, #48	; 0x30
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b08a      	sub	sp, #40	; 0x28
 8009fe0:	af02      	add	r7, sp, #8
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	4613      	mov	r3, r2
 8009fe8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d10a      	bne.n	800a006 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff4:	f383 8811 	msr	BASEPRI, r3
 8009ff8:	f3bf 8f6f 	isb	sy
 8009ffc:	f3bf 8f4f 	dsb	sy
 800a000:	613b      	str	r3, [r7, #16]
}
 800a002:	bf00      	nop
 800a004:	e7fe      	b.n	800a004 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	68ba      	ldr	r2, [r7, #8]
 800a00a:	fb02 f303 	mul.w	r3, r2, r3
 800a00e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	3350      	adds	r3, #80	; 0x50
 800a014:	4618      	mov	r0, r3
 800a016:	f002 fce7 	bl	800c9e8 <pvPortMalloc>
 800a01a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a01c:	69bb      	ldr	r3, [r7, #24]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d011      	beq.n	800a046 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	3350      	adds	r3, #80	; 0x50
 800a02a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a02c:	69bb      	ldr	r3, [r7, #24]
 800a02e:	2200      	movs	r2, #0
 800a030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a034:	79fa      	ldrb	r2, [r7, #7]
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	9300      	str	r3, [sp, #0]
 800a03a:	4613      	mov	r3, r2
 800a03c:	697a      	ldr	r2, [r7, #20]
 800a03e:	68b9      	ldr	r1, [r7, #8]
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f000 f805 	bl	800a050 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a046:	69bb      	ldr	r3, [r7, #24]
	}
 800a048:	4618      	mov	r0, r3
 800a04a:	3720      	adds	r7, #32
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
 800a05c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d103      	bne.n	800a06c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	69ba      	ldr	r2, [r7, #24]
 800a068:	601a      	str	r2, [r3, #0]
 800a06a:	e002      	b.n	800a072 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a078:	69bb      	ldr	r3, [r7, #24]
 800a07a:	68ba      	ldr	r2, [r7, #8]
 800a07c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a07e:	2101      	movs	r1, #1
 800a080:	69b8      	ldr	r0, [r7, #24]
 800a082:	f7ff fecb 	bl	8009e1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	78fa      	ldrb	r2, [r7, #3]
 800a08a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a08e:	bf00      	nop
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a096:	b580      	push	{r7, lr}
 800a098:	b08a      	sub	sp, #40	; 0x28
 800a09a:	af02      	add	r7, sp, #8
 800a09c:	60f8      	str	r0, [r7, #12]
 800a09e:	60b9      	str	r1, [r7, #8]
 800a0a0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d10a      	bne.n	800a0be <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ac:	f383 8811 	msr	BASEPRI, r3
 800a0b0:	f3bf 8f6f 	isb	sy
 800a0b4:	f3bf 8f4f 	dsb	sy
 800a0b8:	61bb      	str	r3, [r7, #24]
}
 800a0ba:	bf00      	nop
 800a0bc:	e7fe      	b.n	800a0bc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d90a      	bls.n	800a0dc <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ca:	f383 8811 	msr	BASEPRI, r3
 800a0ce:	f3bf 8f6f 	isb	sy
 800a0d2:	f3bf 8f4f 	dsb	sy
 800a0d6:	617b      	str	r3, [r7, #20]
}
 800a0d8:	bf00      	nop
 800a0da:	e7fe      	b.n	800a0da <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a0dc:	2302      	movs	r3, #2
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f7ff ff00 	bl	8009eec <xQueueGenericCreateStatic>
 800a0ec:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d002      	beq.n	800a0fa <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	68ba      	ldr	r2, [r7, #8]
 800a0f8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a0fa:	69fb      	ldr	r3, [r7, #28]
	}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3720      	adds	r7, #32
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a104:	b580      	push	{r7, lr}
 800a106:	b086      	sub	sp, #24
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d10a      	bne.n	800a12a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a118:	f383 8811 	msr	BASEPRI, r3
 800a11c:	f3bf 8f6f 	isb	sy
 800a120:	f3bf 8f4f 	dsb	sy
 800a124:	613b      	str	r3, [r7, #16]
}
 800a126:	bf00      	nop
 800a128:	e7fe      	b.n	800a128 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a12a:	683a      	ldr	r2, [r7, #0]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d90a      	bls.n	800a148 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a136:	f383 8811 	msr	BASEPRI, r3
 800a13a:	f3bf 8f6f 	isb	sy
 800a13e:	f3bf 8f4f 	dsb	sy
 800a142:	60fb      	str	r3, [r7, #12]
}
 800a144:	bf00      	nop
 800a146:	e7fe      	b.n	800a146 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a148:	2202      	movs	r2, #2
 800a14a:	2100      	movs	r1, #0
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f7ff ff45 	bl	8009fdc <xQueueGenericCreate>
 800a152:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d002      	beq.n	800a160 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	683a      	ldr	r2, [r7, #0]
 800a15e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a160:	697b      	ldr	r3, [r7, #20]
	}
 800a162:	4618      	mov	r0, r3
 800a164:	3718      	adds	r7, #24
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
	...

0800a16c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b08e      	sub	sp, #56	; 0x38
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
 800a178:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a17a:	2300      	movs	r3, #0
 800a17c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10a      	bne.n	800a19e <xQueueGenericSend+0x32>
	__asm volatile
 800a188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18c:	f383 8811 	msr	BASEPRI, r3
 800a190:	f3bf 8f6f 	isb	sy
 800a194:	f3bf 8f4f 	dsb	sy
 800a198:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a19a:	bf00      	nop
 800a19c:	e7fe      	b.n	800a19c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d103      	bne.n	800a1ac <xQueueGenericSend+0x40>
 800a1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d101      	bne.n	800a1b0 <xQueueGenericSend+0x44>
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e000      	b.n	800a1b2 <xQueueGenericSend+0x46>
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d10a      	bne.n	800a1cc <xQueueGenericSend+0x60>
	__asm volatile
 800a1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ba:	f383 8811 	msr	BASEPRI, r3
 800a1be:	f3bf 8f6f 	isb	sy
 800a1c2:	f3bf 8f4f 	dsb	sy
 800a1c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a1c8:	bf00      	nop
 800a1ca:	e7fe      	b.n	800a1ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d103      	bne.n	800a1da <xQueueGenericSend+0x6e>
 800a1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d101      	bne.n	800a1de <xQueueGenericSend+0x72>
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e000      	b.n	800a1e0 <xQueueGenericSend+0x74>
 800a1de:	2300      	movs	r3, #0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d10a      	bne.n	800a1fa <xQueueGenericSend+0x8e>
	__asm volatile
 800a1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e8:	f383 8811 	msr	BASEPRI, r3
 800a1ec:	f3bf 8f6f 	isb	sy
 800a1f0:	f3bf 8f4f 	dsb	sy
 800a1f4:	623b      	str	r3, [r7, #32]
}
 800a1f6:	bf00      	nop
 800a1f8:	e7fe      	b.n	800a1f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1fa:	f001 fc77 	bl	800baec <xTaskGetSchedulerState>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d102      	bne.n	800a20a <xQueueGenericSend+0x9e>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d101      	bne.n	800a20e <xQueueGenericSend+0xa2>
 800a20a:	2301      	movs	r3, #1
 800a20c:	e000      	b.n	800a210 <xQueueGenericSend+0xa4>
 800a20e:	2300      	movs	r3, #0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10a      	bne.n	800a22a <xQueueGenericSend+0xbe>
	__asm volatile
 800a214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a218:	f383 8811 	msr	BASEPRI, r3
 800a21c:	f3bf 8f6f 	isb	sy
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	61fb      	str	r3, [r7, #28]
}
 800a226:	bf00      	nop
 800a228:	e7fe      	b.n	800a228 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a22a:	f002 fabb 	bl	800c7a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a236:	429a      	cmp	r2, r3
 800a238:	d302      	bcc.n	800a240 <xQueueGenericSend+0xd4>
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	2b02      	cmp	r3, #2
 800a23e:	d129      	bne.n	800a294 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a240:	683a      	ldr	r2, [r7, #0]
 800a242:	68b9      	ldr	r1, [r7, #8]
 800a244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a246:	f000 fc9a 	bl	800ab7e <prvCopyDataToQueue>
 800a24a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a250:	2b00      	cmp	r3, #0
 800a252:	d010      	beq.n	800a276 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a256:	3324      	adds	r3, #36	; 0x24
 800a258:	4618      	mov	r0, r3
 800a25a:	f001 fa89 	bl	800b770 <xTaskRemoveFromEventList>
 800a25e:	4603      	mov	r3, r0
 800a260:	2b00      	cmp	r3, #0
 800a262:	d013      	beq.n	800a28c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a264:	4b3f      	ldr	r3, [pc, #252]	; (800a364 <xQueueGenericSend+0x1f8>)
 800a266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a26a:	601a      	str	r2, [r3, #0]
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	f3bf 8f6f 	isb	sy
 800a274:	e00a      	b.n	800a28c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d007      	beq.n	800a28c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a27c:	4b39      	ldr	r3, [pc, #228]	; (800a364 <xQueueGenericSend+0x1f8>)
 800a27e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a282:	601a      	str	r2, [r3, #0]
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a28c:	f002 faba 	bl	800c804 <vPortExitCritical>
				return pdPASS;
 800a290:	2301      	movs	r3, #1
 800a292:	e063      	b.n	800a35c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d103      	bne.n	800a2a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a29a:	f002 fab3 	bl	800c804 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	e05c      	b.n	800a35c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d106      	bne.n	800a2b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2a8:	f107 0314 	add.w	r3, r7, #20
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f001 fac3 	bl	800b838 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a2b6:	f002 faa5 	bl	800c804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a2ba:	f001 f835 	bl	800b328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2be:	f002 fa71 	bl	800c7a4 <vPortEnterCritical>
 800a2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2c8:	b25b      	sxtb	r3, r3
 800a2ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ce:	d103      	bne.n	800a2d8 <xQueueGenericSend+0x16c>
 800a2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2de:	b25b      	sxtb	r3, r3
 800a2e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e4:	d103      	bne.n	800a2ee <xQueueGenericSend+0x182>
 800a2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2ee:	f002 fa89 	bl	800c804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2f2:	1d3a      	adds	r2, r7, #4
 800a2f4:	f107 0314 	add.w	r3, r7, #20
 800a2f8:	4611      	mov	r1, r2
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f001 fab2 	bl	800b864 <xTaskCheckForTimeOut>
 800a300:	4603      	mov	r3, r0
 800a302:	2b00      	cmp	r3, #0
 800a304:	d124      	bne.n	800a350 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a306:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a308:	f000 fd31 	bl	800ad6e <prvIsQueueFull>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d018      	beq.n	800a344 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a314:	3310      	adds	r3, #16
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	4611      	mov	r1, r2
 800a31a:	4618      	mov	r0, r3
 800a31c:	f001 f9d8 	bl	800b6d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a320:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a322:	f000 fcbc 	bl	800ac9e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a326:	f001 f80d 	bl	800b344 <xTaskResumeAll>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	f47f af7c 	bne.w	800a22a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a332:	4b0c      	ldr	r3, [pc, #48]	; (800a364 <xQueueGenericSend+0x1f8>)
 800a334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a338:	601a      	str	r2, [r3, #0]
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	f3bf 8f6f 	isb	sy
 800a342:	e772      	b.n	800a22a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a346:	f000 fcaa 	bl	800ac9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a34a:	f000 fffb 	bl	800b344 <xTaskResumeAll>
 800a34e:	e76c      	b.n	800a22a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a352:	f000 fca4 	bl	800ac9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a356:	f000 fff5 	bl	800b344 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a35a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3738      	adds	r7, #56	; 0x38
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}
 800a364:	e000ed04 	.word	0xe000ed04

0800a368 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b090      	sub	sp, #64	; 0x40
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	607a      	str	r2, [r7, #4]
 800a374:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d10a      	bne.n	800a396 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a384:	f383 8811 	msr	BASEPRI, r3
 800a388:	f3bf 8f6f 	isb	sy
 800a38c:	f3bf 8f4f 	dsb	sy
 800a390:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a392:	bf00      	nop
 800a394:	e7fe      	b.n	800a394 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d103      	bne.n	800a3a4 <xQueueGenericSendFromISR+0x3c>
 800a39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a39e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d101      	bne.n	800a3a8 <xQueueGenericSendFromISR+0x40>
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e000      	b.n	800a3aa <xQueueGenericSendFromISR+0x42>
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d10a      	bne.n	800a3c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b2:	f383 8811 	msr	BASEPRI, r3
 800a3b6:	f3bf 8f6f 	isb	sy
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a3c0:	bf00      	nop
 800a3c2:	e7fe      	b.n	800a3c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	2b02      	cmp	r3, #2
 800a3c8:	d103      	bne.n	800a3d2 <xQueueGenericSendFromISR+0x6a>
 800a3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d101      	bne.n	800a3d6 <xQueueGenericSendFromISR+0x6e>
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e000      	b.n	800a3d8 <xQueueGenericSendFromISR+0x70>
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d10a      	bne.n	800a3f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e0:	f383 8811 	msr	BASEPRI, r3
 800a3e4:	f3bf 8f6f 	isb	sy
 800a3e8:	f3bf 8f4f 	dsb	sy
 800a3ec:	623b      	str	r3, [r7, #32]
}
 800a3ee:	bf00      	nop
 800a3f0:	e7fe      	b.n	800a3f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3f2:	f002 fab9 	bl	800c968 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a3f6:	f3ef 8211 	mrs	r2, BASEPRI
 800a3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fe:	f383 8811 	msr	BASEPRI, r3
 800a402:	f3bf 8f6f 	isb	sy
 800a406:	f3bf 8f4f 	dsb	sy
 800a40a:	61fa      	str	r2, [r7, #28]
 800a40c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a40e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a410:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d302      	bcc.n	800a424 <xQueueGenericSendFromISR+0xbc>
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	2b02      	cmp	r3, #2
 800a422:	d12f      	bne.n	800a484 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a426:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a42a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a432:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a434:	683a      	ldr	r2, [r7, #0]
 800a436:	68b9      	ldr	r1, [r7, #8]
 800a438:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a43a:	f000 fba0 	bl	800ab7e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a43e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a446:	d112      	bne.n	800a46e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d016      	beq.n	800a47e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a452:	3324      	adds	r3, #36	; 0x24
 800a454:	4618      	mov	r0, r3
 800a456:	f001 f98b 	bl	800b770 <xTaskRemoveFromEventList>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00e      	beq.n	800a47e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00b      	beq.n	800a47e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2201      	movs	r2, #1
 800a46a:	601a      	str	r2, [r3, #0]
 800a46c:	e007      	b.n	800a47e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a46e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a472:	3301      	adds	r3, #1
 800a474:	b2db      	uxtb	r3, r3
 800a476:	b25a      	sxtb	r2, r3
 800a478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a47e:	2301      	movs	r3, #1
 800a480:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a482:	e001      	b.n	800a488 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a484:	2300      	movs	r3, #0
 800a486:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a48a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a492:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a496:	4618      	mov	r0, r3
 800a498:	3740      	adds	r7, #64	; 0x40
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b08e      	sub	sp, #56	; 0x38
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
 800a4a6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d10a      	bne.n	800a4c8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b6:	f383 8811 	msr	BASEPRI, r3
 800a4ba:	f3bf 8f6f 	isb	sy
 800a4be:	f3bf 8f4f 	dsb	sy
 800a4c2:	623b      	str	r3, [r7, #32]
}
 800a4c4:	bf00      	nop
 800a4c6:	e7fe      	b.n	800a4c6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00a      	beq.n	800a4e6 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d4:	f383 8811 	msr	BASEPRI, r3
 800a4d8:	f3bf 8f6f 	isb	sy
 800a4dc:	f3bf 8f4f 	dsb	sy
 800a4e0:	61fb      	str	r3, [r7, #28]
}
 800a4e2:	bf00      	nop
 800a4e4:	e7fe      	b.n	800a4e4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d103      	bne.n	800a4f6 <xQueueGiveFromISR+0x58>
 800a4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d101      	bne.n	800a4fa <xQueueGiveFromISR+0x5c>
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e000      	b.n	800a4fc <xQueueGiveFromISR+0x5e>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d10a      	bne.n	800a516 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a504:	f383 8811 	msr	BASEPRI, r3
 800a508:	f3bf 8f6f 	isb	sy
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	61bb      	str	r3, [r7, #24]
}
 800a512:	bf00      	nop
 800a514:	e7fe      	b.n	800a514 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a516:	f002 fa27 	bl	800c968 <vPortValidateInterruptPriority>
	__asm volatile
 800a51a:	f3ef 8211 	mrs	r2, BASEPRI
 800a51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	617a      	str	r2, [r7, #20]
 800a530:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a532:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a534:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a53a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a542:	429a      	cmp	r2, r3
 800a544:	d22b      	bcs.n	800a59e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a548:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a54c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a552:	1c5a      	adds	r2, r3, #1
 800a554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a556:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a558:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a560:	d112      	bne.n	800a588 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a566:	2b00      	cmp	r3, #0
 800a568:	d016      	beq.n	800a598 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56c:	3324      	adds	r3, #36	; 0x24
 800a56e:	4618      	mov	r0, r3
 800a570:	f001 f8fe 	bl	800b770 <xTaskRemoveFromEventList>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00e      	beq.n	800a598 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d00b      	beq.n	800a598 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	2201      	movs	r2, #1
 800a584:	601a      	str	r2, [r3, #0]
 800a586:	e007      	b.n	800a598 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a58c:	3301      	adds	r3, #1
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	b25a      	sxtb	r2, r3
 800a592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a598:	2301      	movs	r3, #1
 800a59a:	637b      	str	r3, [r7, #52]	; 0x34
 800a59c:	e001      	b.n	800a5a2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	637b      	str	r3, [r7, #52]	; 0x34
 800a5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f383 8811 	msr	BASEPRI, r3
}
 800a5ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a5ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3738      	adds	r7, #56	; 0x38
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b08c      	sub	sp, #48	; 0x30
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d10a      	bne.n	800a5e8 <xQueueReceive+0x30>
	__asm volatile
 800a5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d6:	f383 8811 	msr	BASEPRI, r3
 800a5da:	f3bf 8f6f 	isb	sy
 800a5de:	f3bf 8f4f 	dsb	sy
 800a5e2:	623b      	str	r3, [r7, #32]
}
 800a5e4:	bf00      	nop
 800a5e6:	e7fe      	b.n	800a5e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d103      	bne.n	800a5f6 <xQueueReceive+0x3e>
 800a5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d101      	bne.n	800a5fa <xQueueReceive+0x42>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	e000      	b.n	800a5fc <xQueueReceive+0x44>
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d10a      	bne.n	800a616 <xQueueReceive+0x5e>
	__asm volatile
 800a600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a604:	f383 8811 	msr	BASEPRI, r3
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	61fb      	str	r3, [r7, #28]
}
 800a612:	bf00      	nop
 800a614:	e7fe      	b.n	800a614 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a616:	f001 fa69 	bl	800baec <xTaskGetSchedulerState>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d102      	bne.n	800a626 <xQueueReceive+0x6e>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d101      	bne.n	800a62a <xQueueReceive+0x72>
 800a626:	2301      	movs	r3, #1
 800a628:	e000      	b.n	800a62c <xQueueReceive+0x74>
 800a62a:	2300      	movs	r3, #0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d10a      	bne.n	800a646 <xQueueReceive+0x8e>
	__asm volatile
 800a630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a634:	f383 8811 	msr	BASEPRI, r3
 800a638:	f3bf 8f6f 	isb	sy
 800a63c:	f3bf 8f4f 	dsb	sy
 800a640:	61bb      	str	r3, [r7, #24]
}
 800a642:	bf00      	nop
 800a644:	e7fe      	b.n	800a644 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a646:	f002 f8ad 	bl	800c7a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a64e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a652:	2b00      	cmp	r3, #0
 800a654:	d01f      	beq.n	800a696 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a656:	68b9      	ldr	r1, [r7, #8]
 800a658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a65a:	f000 fafa 	bl	800ac52 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a660:	1e5a      	subs	r2, r3, #1
 800a662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a664:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00f      	beq.n	800a68e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a670:	3310      	adds	r3, #16
 800a672:	4618      	mov	r0, r3
 800a674:	f001 f87c 	bl	800b770 <xTaskRemoveFromEventList>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d007      	beq.n	800a68e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a67e:	4b3d      	ldr	r3, [pc, #244]	; (800a774 <xQueueReceive+0x1bc>)
 800a680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a684:	601a      	str	r2, [r3, #0]
 800a686:	f3bf 8f4f 	dsb	sy
 800a68a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a68e:	f002 f8b9 	bl	800c804 <vPortExitCritical>
				return pdPASS;
 800a692:	2301      	movs	r3, #1
 800a694:	e069      	b.n	800a76a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d103      	bne.n	800a6a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a69c:	f002 f8b2 	bl	800c804 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	e062      	b.n	800a76a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d106      	bne.n	800a6b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6aa:	f107 0310 	add.w	r3, r7, #16
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f001 f8c2 	bl	800b838 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6b8:	f002 f8a4 	bl	800c804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6bc:	f000 fe34 	bl	800b328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6c0:	f002 f870 	bl	800c7a4 <vPortEnterCritical>
 800a6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6ca:	b25b      	sxtb	r3, r3
 800a6cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d0:	d103      	bne.n	800a6da <xQueueReceive+0x122>
 800a6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6e0:	b25b      	sxtb	r3, r3
 800a6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e6:	d103      	bne.n	800a6f0 <xQueueReceive+0x138>
 800a6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6f0:	f002 f888 	bl	800c804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6f4:	1d3a      	adds	r2, r7, #4
 800a6f6:	f107 0310 	add.w	r3, r7, #16
 800a6fa:	4611      	mov	r1, r2
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f001 f8b1 	bl	800b864 <xTaskCheckForTimeOut>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d123      	bne.n	800a750 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a70a:	f000 fb1a 	bl	800ad42 <prvIsQueueEmpty>
 800a70e:	4603      	mov	r3, r0
 800a710:	2b00      	cmp	r3, #0
 800a712:	d017      	beq.n	800a744 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a716:	3324      	adds	r3, #36	; 0x24
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	4611      	mov	r1, r2
 800a71c:	4618      	mov	r0, r3
 800a71e:	f000 ffd7 	bl	800b6d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a724:	f000 fabb 	bl	800ac9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a728:	f000 fe0c 	bl	800b344 <xTaskResumeAll>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d189      	bne.n	800a646 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a732:	4b10      	ldr	r3, [pc, #64]	; (800a774 <xQueueReceive+0x1bc>)
 800a734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a738:	601a      	str	r2, [r3, #0]
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	f3bf 8f6f 	isb	sy
 800a742:	e780      	b.n	800a646 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a746:	f000 faaa 	bl	800ac9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a74a:	f000 fdfb 	bl	800b344 <xTaskResumeAll>
 800a74e:	e77a      	b.n	800a646 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a752:	f000 faa4 	bl	800ac9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a756:	f000 fdf5 	bl	800b344 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a75a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a75c:	f000 faf1 	bl	800ad42 <prvIsQueueEmpty>
 800a760:	4603      	mov	r3, r0
 800a762:	2b00      	cmp	r3, #0
 800a764:	f43f af6f 	beq.w	800a646 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a768:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3730      	adds	r7, #48	; 0x30
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	e000ed04 	.word	0xe000ed04

0800a778 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b08e      	sub	sp, #56	; 0x38
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a782:	2300      	movs	r3, #0
 800a784:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a78a:	2300      	movs	r3, #0
 800a78c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a790:	2b00      	cmp	r3, #0
 800a792:	d10a      	bne.n	800a7aa <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a798:	f383 8811 	msr	BASEPRI, r3
 800a79c:	f3bf 8f6f 	isb	sy
 800a7a0:	f3bf 8f4f 	dsb	sy
 800a7a4:	623b      	str	r3, [r7, #32]
}
 800a7a6:	bf00      	nop
 800a7a8:	e7fe      	b.n	800a7a8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00a      	beq.n	800a7c8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b6:	f383 8811 	msr	BASEPRI, r3
 800a7ba:	f3bf 8f6f 	isb	sy
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	61fb      	str	r3, [r7, #28]
}
 800a7c4:	bf00      	nop
 800a7c6:	e7fe      	b.n	800a7c6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7c8:	f001 f990 	bl	800baec <xTaskGetSchedulerState>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d102      	bne.n	800a7d8 <xQueueSemaphoreTake+0x60>
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d101      	bne.n	800a7dc <xQueueSemaphoreTake+0x64>
 800a7d8:	2301      	movs	r3, #1
 800a7da:	e000      	b.n	800a7de <xQueueSemaphoreTake+0x66>
 800a7dc:	2300      	movs	r3, #0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d10a      	bne.n	800a7f8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e6:	f383 8811 	msr	BASEPRI, r3
 800a7ea:	f3bf 8f6f 	isb	sy
 800a7ee:	f3bf 8f4f 	dsb	sy
 800a7f2:	61bb      	str	r3, [r7, #24]
}
 800a7f4:	bf00      	nop
 800a7f6:	e7fe      	b.n	800a7f6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7f8:	f001 ffd4 	bl	800c7a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a800:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a804:	2b00      	cmp	r3, #0
 800a806:	d024      	beq.n	800a852 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80a:	1e5a      	subs	r2, r3, #1
 800a80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d104      	bne.n	800a822 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a818:	f001 fade 	bl	800bdd8 <pvTaskIncrementMutexHeldCount>
 800a81c:	4602      	mov	r2, r0
 800a81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a820:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a824:	691b      	ldr	r3, [r3, #16]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d00f      	beq.n	800a84a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82c:	3310      	adds	r3, #16
 800a82e:	4618      	mov	r0, r3
 800a830:	f000 ff9e 	bl	800b770 <xTaskRemoveFromEventList>
 800a834:	4603      	mov	r3, r0
 800a836:	2b00      	cmp	r3, #0
 800a838:	d007      	beq.n	800a84a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a83a:	4b54      	ldr	r3, [pc, #336]	; (800a98c <xQueueSemaphoreTake+0x214>)
 800a83c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a840:	601a      	str	r2, [r3, #0]
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a84a:	f001 ffdb 	bl	800c804 <vPortExitCritical>
				return pdPASS;
 800a84e:	2301      	movs	r3, #1
 800a850:	e097      	b.n	800a982 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d111      	bne.n	800a87c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00a      	beq.n	800a874 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a862:	f383 8811 	msr	BASEPRI, r3
 800a866:	f3bf 8f6f 	isb	sy
 800a86a:	f3bf 8f4f 	dsb	sy
 800a86e:	617b      	str	r3, [r7, #20]
}
 800a870:	bf00      	nop
 800a872:	e7fe      	b.n	800a872 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a874:	f001 ffc6 	bl	800c804 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a878:	2300      	movs	r3, #0
 800a87a:	e082      	b.n	800a982 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a87c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d106      	bne.n	800a890 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a882:	f107 030c 	add.w	r3, r7, #12
 800a886:	4618      	mov	r0, r3
 800a888:	f000 ffd6 	bl	800b838 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a88c:	2301      	movs	r3, #1
 800a88e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a890:	f001 ffb8 	bl	800c804 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a894:	f000 fd48 	bl	800b328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a898:	f001 ff84 	bl	800c7a4 <vPortEnterCritical>
 800a89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a89e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8a2:	b25b      	sxtb	r3, r3
 800a8a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a8:	d103      	bne.n	800a8b2 <xQueueSemaphoreTake+0x13a>
 800a8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8b8:	b25b      	sxtb	r3, r3
 800a8ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8be:	d103      	bne.n	800a8c8 <xQueueSemaphoreTake+0x150>
 800a8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8c8:	f001 ff9c 	bl	800c804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8cc:	463a      	mov	r2, r7
 800a8ce:	f107 030c 	add.w	r3, r7, #12
 800a8d2:	4611      	mov	r1, r2
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f000 ffc5 	bl	800b864 <xTaskCheckForTimeOut>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d132      	bne.n	800a946 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8e2:	f000 fa2e 	bl	800ad42 <prvIsQueueEmpty>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d026      	beq.n	800a93a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d109      	bne.n	800a908 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a8f4:	f001 ff56 	bl	800c7a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f001 f913 	bl	800bb28 <xTaskPriorityInherit>
 800a902:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a904:	f001 ff7e 	bl	800c804 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a90a:	3324      	adds	r3, #36	; 0x24
 800a90c:	683a      	ldr	r2, [r7, #0]
 800a90e:	4611      	mov	r1, r2
 800a910:	4618      	mov	r0, r3
 800a912:	f000 fedd 	bl	800b6d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a916:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a918:	f000 f9c1 	bl	800ac9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a91c:	f000 fd12 	bl	800b344 <xTaskResumeAll>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	f47f af68 	bne.w	800a7f8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a928:	4b18      	ldr	r3, [pc, #96]	; (800a98c <xQueueSemaphoreTake+0x214>)
 800a92a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a92e:	601a      	str	r2, [r3, #0]
 800a930:	f3bf 8f4f 	dsb	sy
 800a934:	f3bf 8f6f 	isb	sy
 800a938:	e75e      	b.n	800a7f8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a93a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a93c:	f000 f9af 	bl	800ac9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a940:	f000 fd00 	bl	800b344 <xTaskResumeAll>
 800a944:	e758      	b.n	800a7f8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a946:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a948:	f000 f9a9 	bl	800ac9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a94c:	f000 fcfa 	bl	800b344 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a950:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a952:	f000 f9f6 	bl	800ad42 <prvIsQueueEmpty>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f43f af4d 	beq.w	800a7f8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a960:	2b00      	cmp	r3, #0
 800a962:	d00d      	beq.n	800a980 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a964:	f001 ff1e 	bl	800c7a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a968:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a96a:	f000 f8f0 	bl	800ab4e <prvGetDisinheritPriorityAfterTimeout>
 800a96e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a976:	4618      	mov	r0, r3
 800a978:	f001 f9ac 	bl	800bcd4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a97c:	f001 ff42 	bl	800c804 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a980:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a982:	4618      	mov	r0, r3
 800a984:	3738      	adds	r7, #56	; 0x38
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	e000ed04 	.word	0xe000ed04

0800a990 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b08e      	sub	sp, #56	; 0x38
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10a      	bne.n	800a9bc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9aa:	f383 8811 	msr	BASEPRI, r3
 800a9ae:	f3bf 8f6f 	isb	sy
 800a9b2:	f3bf 8f4f 	dsb	sy
 800a9b6:	623b      	str	r3, [r7, #32]
}
 800a9b8:	bf00      	nop
 800a9ba:	e7fe      	b.n	800a9ba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d103      	bne.n	800a9ca <xQueueReceiveFromISR+0x3a>
 800a9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d101      	bne.n	800a9ce <xQueueReceiveFromISR+0x3e>
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e000      	b.n	800a9d0 <xQueueReceiveFromISR+0x40>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d10a      	bne.n	800a9ea <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d8:	f383 8811 	msr	BASEPRI, r3
 800a9dc:	f3bf 8f6f 	isb	sy
 800a9e0:	f3bf 8f4f 	dsb	sy
 800a9e4:	61fb      	str	r3, [r7, #28]
}
 800a9e6:	bf00      	nop
 800a9e8:	e7fe      	b.n	800a9e8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9ea:	f001 ffbd 	bl	800c968 <vPortValidateInterruptPriority>
	__asm volatile
 800a9ee:	f3ef 8211 	mrs	r2, BASEPRI
 800a9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f6:	f383 8811 	msr	BASEPRI, r3
 800a9fa:	f3bf 8f6f 	isb	sy
 800a9fe:	f3bf 8f4f 	dsb	sy
 800aa02:	61ba      	str	r2, [r7, #24]
 800aa04:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800aa06:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa08:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa0e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d02f      	beq.n	800aa76 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aa16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa20:	68b9      	ldr	r1, [r7, #8]
 800aa22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa24:	f000 f915 	bl	800ac52 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2a:	1e5a      	subs	r2, r3, #1
 800aa2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800aa30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa38:	d112      	bne.n	800aa60 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d016      	beq.n	800aa70 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa44:	3310      	adds	r3, #16
 800aa46:	4618      	mov	r0, r3
 800aa48:	f000 fe92 	bl	800b770 <xTaskRemoveFromEventList>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d00e      	beq.n	800aa70 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00b      	beq.n	800aa70 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	601a      	str	r2, [r3, #0]
 800aa5e:	e007      	b.n	800aa70 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aa60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa64:	3301      	adds	r3, #1
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	b25a      	sxtb	r2, r3
 800aa6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800aa70:	2301      	movs	r3, #1
 800aa72:	637b      	str	r3, [r7, #52]	; 0x34
 800aa74:	e001      	b.n	800aa7a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800aa76:	2300      	movs	r3, #0
 800aa78:	637b      	str	r3, [r7, #52]	; 0x34
 800aa7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	f383 8811 	msr	BASEPRI, r3
}
 800aa84:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3738      	adds	r7, #56	; 0x38
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d10a      	bne.n	800aab4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800aa9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa2:	f383 8811 	msr	BASEPRI, r3
 800aaa6:	f3bf 8f6f 	isb	sy
 800aaaa:	f3bf 8f4f 	dsb	sy
 800aaae:	60bb      	str	r3, [r7, #8]
}
 800aab0:	bf00      	nop
 800aab2:	e7fe      	b.n	800aab2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800aab4:	f001 fe76 	bl	800c7a4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aabc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800aabe:	f001 fea1 	bl	800c804 <vPortExitCritical>

	return uxReturn;
 800aac2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800aac4:	4618      	mov	r0, r3
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800aacc:	b480      	push	{r7}
 800aace:	b087      	sub	sp, #28
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d10a      	bne.n	800aaf4 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800aade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	60fb      	str	r3, [r7, #12]
}
 800aaf0:	bf00      	nop
 800aaf2:	e7fe      	b.n	800aaf2 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800aafa:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800aafc:	4618      	mov	r0, r3
 800aafe:	371c      	adds	r7, #28
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d10a      	bne.n	800ab30 <vQueueDelete+0x28>
	__asm volatile
 800ab1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1e:	f383 8811 	msr	BASEPRI, r3
 800ab22:	f3bf 8f6f 	isb	sy
 800ab26:	f3bf 8f4f 	dsb	sy
 800ab2a:	60bb      	str	r3, [r7, #8]
}
 800ab2c:	bf00      	nop
 800ab2e:	e7fe      	b.n	800ab2e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	f000 f95f 	bl	800adf4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d102      	bne.n	800ab46 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ab40:	68f8      	ldr	r0, [r7, #12]
 800ab42:	f002 f81d 	bl	800cb80 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ab46:	bf00      	nop
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}

0800ab4e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ab4e:	b480      	push	{r7}
 800ab50:	b085      	sub	sp, #20
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d006      	beq.n	800ab6c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ab68:	60fb      	str	r3, [r7, #12]
 800ab6a:	e001      	b.n	800ab70 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ab70:	68fb      	ldr	r3, [r7, #12]
	}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3714      	adds	r7, #20
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr

0800ab7e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b086      	sub	sp, #24
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	60f8      	str	r0, [r7, #12]
 800ab86:	60b9      	str	r1, [r7, #8]
 800ab88:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab92:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10d      	bne.n	800abb8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d14d      	bne.n	800ac40 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	4618      	mov	r0, r3
 800abaa:	f001 f825 	bl	800bbf8 <xTaskPriorityDisinherit>
 800abae:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2200      	movs	r2, #0
 800abb4:	609a      	str	r2, [r3, #8]
 800abb6:	e043      	b.n	800ac40 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d119      	bne.n	800abf2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	6858      	ldr	r0, [r3, #4]
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc6:	461a      	mov	r2, r3
 800abc8:	68b9      	ldr	r1, [r7, #8]
 800abca:	f002 f945 	bl	800ce58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	685a      	ldr	r2, [r3, #4]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd6:	441a      	add	r2, r3
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	685a      	ldr	r2, [r3, #4]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	689b      	ldr	r3, [r3, #8]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d32b      	bcc.n	800ac40 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	605a      	str	r2, [r3, #4]
 800abf0:	e026      	b.n	800ac40 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	68d8      	ldr	r0, [r3, #12]
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abfa:	461a      	mov	r2, r3
 800abfc:	68b9      	ldr	r1, [r7, #8]
 800abfe:	f002 f92b 	bl	800ce58 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	68da      	ldr	r2, [r3, #12]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac0a:	425b      	negs	r3, r3
 800ac0c:	441a      	add	r2, r3
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	68da      	ldr	r2, [r3, #12]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d207      	bcs.n	800ac2e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	689a      	ldr	r2, [r3, #8]
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac26:	425b      	negs	r3, r3
 800ac28:	441a      	add	r2, r3
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2b02      	cmp	r3, #2
 800ac32:	d105      	bne.n	800ac40 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d002      	beq.n	800ac40 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	1c5a      	adds	r2, r3, #1
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ac48:	697b      	ldr	r3, [r7, #20]
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3718      	adds	r7, #24
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b082      	sub	sp, #8
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
 800ac5a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d018      	beq.n	800ac96 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	68da      	ldr	r2, [r3, #12]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac6c:	441a      	add	r2, r3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	68da      	ldr	r2, [r3, #12]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d303      	bcc.n	800ac86 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	68d9      	ldr	r1, [r3, #12]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac8e:	461a      	mov	r2, r3
 800ac90:	6838      	ldr	r0, [r7, #0]
 800ac92:	f002 f8e1 	bl	800ce58 <memcpy>
	}
}
 800ac96:	bf00      	nop
 800ac98:	3708      	adds	r7, #8
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b084      	sub	sp, #16
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aca6:	f001 fd7d 	bl	800c7a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acb0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800acb2:	e011      	b.n	800acd8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d012      	beq.n	800ace2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	3324      	adds	r3, #36	; 0x24
 800acc0:	4618      	mov	r0, r3
 800acc2:	f000 fd55 	bl	800b770 <xTaskRemoveFromEventList>
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d001      	beq.n	800acd0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800accc:	f000 fe2c 	bl	800b928 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800acd0:	7bfb      	ldrb	r3, [r7, #15]
 800acd2:	3b01      	subs	r3, #1
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800acd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	dce9      	bgt.n	800acb4 <prvUnlockQueue+0x16>
 800ace0:	e000      	b.n	800ace4 <prvUnlockQueue+0x46>
					break;
 800ace2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	22ff      	movs	r2, #255	; 0xff
 800ace8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800acec:	f001 fd8a 	bl	800c804 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800acf0:	f001 fd58 	bl	800c7a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acfa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acfc:	e011      	b.n	800ad22 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	691b      	ldr	r3, [r3, #16]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d012      	beq.n	800ad2c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	3310      	adds	r3, #16
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f000 fd30 	bl	800b770 <xTaskRemoveFromEventList>
 800ad10:	4603      	mov	r3, r0
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d001      	beq.n	800ad1a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ad16:	f000 fe07 	bl	800b928 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ad1a:	7bbb      	ldrb	r3, [r7, #14]
 800ad1c:	3b01      	subs	r3, #1
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	dce9      	bgt.n	800acfe <prvUnlockQueue+0x60>
 800ad2a:	e000      	b.n	800ad2e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ad2c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	22ff      	movs	r2, #255	; 0xff
 800ad32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ad36:	f001 fd65 	bl	800c804 <vPortExitCritical>
}
 800ad3a:	bf00      	nop
 800ad3c:	3710      	adds	r7, #16
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}

0800ad42 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b084      	sub	sp, #16
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad4a:	f001 fd2b 	bl	800c7a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d102      	bne.n	800ad5c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ad56:	2301      	movs	r3, #1
 800ad58:	60fb      	str	r3, [r7, #12]
 800ad5a:	e001      	b.n	800ad60 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad60:	f001 fd50 	bl	800c804 <vPortExitCritical>

	return xReturn;
 800ad64:	68fb      	ldr	r3, [r7, #12]
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b084      	sub	sp, #16
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad76:	f001 fd15 	bl	800c7a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d102      	bne.n	800ad8c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ad86:	2301      	movs	r3, #1
 800ad88:	60fb      	str	r3, [r7, #12]
 800ad8a:	e001      	b.n	800ad90 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad90:	f001 fd38 	bl	800c804 <vPortExitCritical>

	return xReturn;
 800ad94:	68fb      	ldr	r3, [r7, #12]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3710      	adds	r7, #16
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
	...

0800ada0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ada0:	b480      	push	{r7}
 800ada2:	b085      	sub	sp, #20
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800adaa:	2300      	movs	r3, #0
 800adac:	60fb      	str	r3, [r7, #12]
 800adae:	e014      	b.n	800adda <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800adb0:	4a0f      	ldr	r2, [pc, #60]	; (800adf0 <vQueueAddToRegistry+0x50>)
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d10b      	bne.n	800add4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800adbc:	490c      	ldr	r1, [pc, #48]	; (800adf0 <vQueueAddToRegistry+0x50>)
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	683a      	ldr	r2, [r7, #0]
 800adc2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800adc6:	4a0a      	ldr	r2, [pc, #40]	; (800adf0 <vQueueAddToRegistry+0x50>)
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	00db      	lsls	r3, r3, #3
 800adcc:	4413      	add	r3, r2
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800add2:	e006      	b.n	800ade2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	3301      	adds	r3, #1
 800add8:	60fb      	str	r3, [r7, #12]
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2b07      	cmp	r3, #7
 800adde:	d9e7      	bls.n	800adb0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ade0:	bf00      	nop
 800ade2:	bf00      	nop
 800ade4:	3714      	adds	r7, #20
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr
 800adee:	bf00      	nop
 800adf0:	20001894 	.word	0x20001894

0800adf4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800adf4:	b480      	push	{r7}
 800adf6:	b085      	sub	sp, #20
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800adfc:	2300      	movs	r3, #0
 800adfe:	60fb      	str	r3, [r7, #12]
 800ae00:	e016      	b.n	800ae30 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ae02:	4a10      	ldr	r2, [pc, #64]	; (800ae44 <vQueueUnregisterQueue+0x50>)
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	00db      	lsls	r3, r3, #3
 800ae08:	4413      	add	r3, r2
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d10b      	bne.n	800ae2a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ae12:	4a0c      	ldr	r2, [pc, #48]	; (800ae44 <vQueueUnregisterQueue+0x50>)
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2100      	movs	r1, #0
 800ae18:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ae1c:	4a09      	ldr	r2, [pc, #36]	; (800ae44 <vQueueUnregisterQueue+0x50>)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	00db      	lsls	r3, r3, #3
 800ae22:	4413      	add	r3, r2
 800ae24:	2200      	movs	r2, #0
 800ae26:	605a      	str	r2, [r3, #4]
				break;
 800ae28:	e006      	b.n	800ae38 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	60fb      	str	r3, [r7, #12]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2b07      	cmp	r3, #7
 800ae34:	d9e5      	bls.n	800ae02 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ae36:	bf00      	nop
 800ae38:	bf00      	nop
 800ae3a:	3714      	adds	r7, #20
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr
 800ae44:	20001894 	.word	0x20001894

0800ae48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b086      	sub	sp, #24
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ae58:	f001 fca4 	bl	800c7a4 <vPortEnterCritical>
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae62:	b25b      	sxtb	r3, r3
 800ae64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae68:	d103      	bne.n	800ae72 <vQueueWaitForMessageRestricted+0x2a>
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae78:	b25b      	sxtb	r3, r3
 800ae7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae7e:	d103      	bne.n	800ae88 <vQueueWaitForMessageRestricted+0x40>
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae88:	f001 fcbc 	bl	800c804 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d106      	bne.n	800aea2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	3324      	adds	r3, #36	; 0x24
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	68b9      	ldr	r1, [r7, #8]
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f000 fc3b 	bl	800b718 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aea2:	6978      	ldr	r0, [r7, #20]
 800aea4:	f7ff fefb 	bl	800ac9e <prvUnlockQueue>
	}
 800aea8:	bf00      	nop
 800aeaa:	3718      	adds	r7, #24
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b08e      	sub	sp, #56	; 0x38
 800aeb4:	af04      	add	r7, sp, #16
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]
 800aebc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d10a      	bne.n	800aeda <xTaskCreateStatic+0x2a>
	__asm volatile
 800aec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec8:	f383 8811 	msr	BASEPRI, r3
 800aecc:	f3bf 8f6f 	isb	sy
 800aed0:	f3bf 8f4f 	dsb	sy
 800aed4:	623b      	str	r3, [r7, #32]
}
 800aed6:	bf00      	nop
 800aed8:	e7fe      	b.n	800aed8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aeda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d10a      	bne.n	800aef6 <xTaskCreateStatic+0x46>
	__asm volatile
 800aee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee4:	f383 8811 	msr	BASEPRI, r3
 800aee8:	f3bf 8f6f 	isb	sy
 800aeec:	f3bf 8f4f 	dsb	sy
 800aef0:	61fb      	str	r3, [r7, #28]
}
 800aef2:	bf00      	nop
 800aef4:	e7fe      	b.n	800aef4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aef6:	235c      	movs	r3, #92	; 0x5c
 800aef8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	2b5c      	cmp	r3, #92	; 0x5c
 800aefe:	d00a      	beq.n	800af16 <xTaskCreateStatic+0x66>
	__asm volatile
 800af00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af04:	f383 8811 	msr	BASEPRI, r3
 800af08:	f3bf 8f6f 	isb	sy
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	61bb      	str	r3, [r7, #24]
}
 800af12:	bf00      	nop
 800af14:	e7fe      	b.n	800af14 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800af16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800af18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d01e      	beq.n	800af5c <xTaskCreateStatic+0xac>
 800af1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af20:	2b00      	cmp	r3, #0
 800af22:	d01b      	beq.n	800af5c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800af24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800af28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800af2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af30:	2202      	movs	r2, #2
 800af32:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800af36:	2300      	movs	r3, #0
 800af38:	9303      	str	r3, [sp, #12]
 800af3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3c:	9302      	str	r3, [sp, #8]
 800af3e:	f107 0314 	add.w	r3, r7, #20
 800af42:	9301      	str	r3, [sp, #4]
 800af44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af46:	9300      	str	r3, [sp, #0]
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	68b9      	ldr	r1, [r7, #8]
 800af4e:	68f8      	ldr	r0, [r7, #12]
 800af50:	f000 f850 	bl	800aff4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af56:	f000 f8dd 	bl	800b114 <prvAddNewTaskToReadyList>
 800af5a:	e001      	b.n	800af60 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800af5c:	2300      	movs	r3, #0
 800af5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800af60:	697b      	ldr	r3, [r7, #20]
	}
 800af62:	4618      	mov	r0, r3
 800af64:	3728      	adds	r7, #40	; 0x28
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}

0800af6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b08c      	sub	sp, #48	; 0x30
 800af6e:	af04      	add	r7, sp, #16
 800af70:	60f8      	str	r0, [r7, #12]
 800af72:	60b9      	str	r1, [r7, #8]
 800af74:	603b      	str	r3, [r7, #0]
 800af76:	4613      	mov	r3, r2
 800af78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800af7a:	88fb      	ldrh	r3, [r7, #6]
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	4618      	mov	r0, r3
 800af80:	f001 fd32 	bl	800c9e8 <pvPortMalloc>
 800af84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d00e      	beq.n	800afaa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800af8c:	205c      	movs	r0, #92	; 0x5c
 800af8e:	f001 fd2b 	bl	800c9e8 <pvPortMalloc>
 800af92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d003      	beq.n	800afa2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800af9a:	69fb      	ldr	r3, [r7, #28]
 800af9c:	697a      	ldr	r2, [r7, #20]
 800af9e:	631a      	str	r2, [r3, #48]	; 0x30
 800afa0:	e005      	b.n	800afae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800afa2:	6978      	ldr	r0, [r7, #20]
 800afa4:	f001 fdec 	bl	800cb80 <vPortFree>
 800afa8:	e001      	b.n	800afae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800afaa:	2300      	movs	r3, #0
 800afac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800afae:	69fb      	ldr	r3, [r7, #28]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d017      	beq.n	800afe4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800afbc:	88fa      	ldrh	r2, [r7, #6]
 800afbe:	2300      	movs	r3, #0
 800afc0:	9303      	str	r3, [sp, #12]
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	9302      	str	r3, [sp, #8]
 800afc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afc8:	9301      	str	r3, [sp, #4]
 800afca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	68b9      	ldr	r1, [r7, #8]
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	f000 f80e 	bl	800aff4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800afd8:	69f8      	ldr	r0, [r7, #28]
 800afda:	f000 f89b 	bl	800b114 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800afde:	2301      	movs	r3, #1
 800afe0:	61bb      	str	r3, [r7, #24]
 800afe2:	e002      	b.n	800afea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800afe4:	f04f 33ff 	mov.w	r3, #4294967295
 800afe8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800afea:	69bb      	ldr	r3, [r7, #24]
	}
 800afec:	4618      	mov	r0, r3
 800afee:	3720      	adds	r7, #32
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b088      	sub	sp, #32
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	607a      	str	r2, [r7, #4]
 800b000:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b004:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	461a      	mov	r2, r3
 800b00c:	21a5      	movs	r1, #165	; 0xa5
 800b00e:	f001 ff31 	bl	800ce74 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b01c:	3b01      	subs	r3, #1
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	4413      	add	r3, r2
 800b022:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	f023 0307 	bic.w	r3, r3, #7
 800b02a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b02c:	69bb      	ldr	r3, [r7, #24]
 800b02e:	f003 0307 	and.w	r3, r3, #7
 800b032:	2b00      	cmp	r3, #0
 800b034:	d00a      	beq.n	800b04c <prvInitialiseNewTask+0x58>
	__asm volatile
 800b036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b03a:	f383 8811 	msr	BASEPRI, r3
 800b03e:	f3bf 8f6f 	isb	sy
 800b042:	f3bf 8f4f 	dsb	sy
 800b046:	617b      	str	r3, [r7, #20]
}
 800b048:	bf00      	nop
 800b04a:	e7fe      	b.n	800b04a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d01f      	beq.n	800b092 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b052:	2300      	movs	r3, #0
 800b054:	61fb      	str	r3, [r7, #28]
 800b056:	e012      	b.n	800b07e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b058:	68ba      	ldr	r2, [r7, #8]
 800b05a:	69fb      	ldr	r3, [r7, #28]
 800b05c:	4413      	add	r3, r2
 800b05e:	7819      	ldrb	r1, [r3, #0]
 800b060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b062:	69fb      	ldr	r3, [r7, #28]
 800b064:	4413      	add	r3, r2
 800b066:	3334      	adds	r3, #52	; 0x34
 800b068:	460a      	mov	r2, r1
 800b06a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b06c:	68ba      	ldr	r2, [r7, #8]
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	4413      	add	r3, r2
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d006      	beq.n	800b086 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	3301      	adds	r3, #1
 800b07c:	61fb      	str	r3, [r7, #28]
 800b07e:	69fb      	ldr	r3, [r7, #28]
 800b080:	2b0f      	cmp	r3, #15
 800b082:	d9e9      	bls.n	800b058 <prvInitialiseNewTask+0x64>
 800b084:	e000      	b.n	800b088 <prvInitialiseNewTask+0x94>
			{
				break;
 800b086:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08a:	2200      	movs	r2, #0
 800b08c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b090:	e003      	b.n	800b09a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b094:	2200      	movs	r2, #0
 800b096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b09c:	2b37      	cmp	r3, #55	; 0x37
 800b09e:	d901      	bls.n	800b0a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b0a0:	2337      	movs	r3, #55	; 0x37
 800b0a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b8:	3304      	adds	r3, #4
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7fe fe1a 	bl	8009cf4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c2:	3318      	adds	r3, #24
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7fe fe15 	bl	8009cf4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b0ee:	683a      	ldr	r2, [r7, #0]
 800b0f0:	68f9      	ldr	r1, [r7, #12]
 800b0f2:	69b8      	ldr	r0, [r7, #24]
 800b0f4:	f001 fa26 	bl	800c544 <pxPortInitialiseStack>
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b100:	2b00      	cmp	r3, #0
 800b102:	d002      	beq.n	800b10a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b108:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b10a:	bf00      	nop
 800b10c:	3720      	adds	r7, #32
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
	...

0800b114 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b11c:	f001 fb42 	bl	800c7a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b120:	4b2d      	ldr	r3, [pc, #180]	; (800b1d8 <prvAddNewTaskToReadyList+0xc4>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	3301      	adds	r3, #1
 800b126:	4a2c      	ldr	r2, [pc, #176]	; (800b1d8 <prvAddNewTaskToReadyList+0xc4>)
 800b128:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b12a:	4b2c      	ldr	r3, [pc, #176]	; (800b1dc <prvAddNewTaskToReadyList+0xc8>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d109      	bne.n	800b146 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b132:	4a2a      	ldr	r2, [pc, #168]	; (800b1dc <prvAddNewTaskToReadyList+0xc8>)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b138:	4b27      	ldr	r3, [pc, #156]	; (800b1d8 <prvAddNewTaskToReadyList+0xc4>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d110      	bne.n	800b162 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b140:	f000 fc16 	bl	800b970 <prvInitialiseTaskLists>
 800b144:	e00d      	b.n	800b162 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b146:	4b26      	ldr	r3, [pc, #152]	; (800b1e0 <prvAddNewTaskToReadyList+0xcc>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d109      	bne.n	800b162 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b14e:	4b23      	ldr	r3, [pc, #140]	; (800b1dc <prvAddNewTaskToReadyList+0xc8>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b158:	429a      	cmp	r2, r3
 800b15a:	d802      	bhi.n	800b162 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b15c:	4a1f      	ldr	r2, [pc, #124]	; (800b1dc <prvAddNewTaskToReadyList+0xc8>)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b162:	4b20      	ldr	r3, [pc, #128]	; (800b1e4 <prvAddNewTaskToReadyList+0xd0>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	3301      	adds	r3, #1
 800b168:	4a1e      	ldr	r2, [pc, #120]	; (800b1e4 <prvAddNewTaskToReadyList+0xd0>)
 800b16a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b16c:	4b1d      	ldr	r3, [pc, #116]	; (800b1e4 <prvAddNewTaskToReadyList+0xd0>)
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b178:	4b1b      	ldr	r3, [pc, #108]	; (800b1e8 <prvAddNewTaskToReadyList+0xd4>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d903      	bls.n	800b188 <prvAddNewTaskToReadyList+0x74>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b184:	4a18      	ldr	r2, [pc, #96]	; (800b1e8 <prvAddNewTaskToReadyList+0xd4>)
 800b186:	6013      	str	r3, [r2, #0]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b18c:	4613      	mov	r3, r2
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	4413      	add	r3, r2
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	4a15      	ldr	r2, [pc, #84]	; (800b1ec <prvAddNewTaskToReadyList+0xd8>)
 800b196:	441a      	add	r2, r3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	3304      	adds	r3, #4
 800b19c:	4619      	mov	r1, r3
 800b19e:	4610      	mov	r0, r2
 800b1a0:	f7fe fdb5 	bl	8009d0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b1a4:	f001 fb2e 	bl	800c804 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b1a8:	4b0d      	ldr	r3, [pc, #52]	; (800b1e0 <prvAddNewTaskToReadyList+0xcc>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d00e      	beq.n	800b1ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b1b0:	4b0a      	ldr	r3, [pc, #40]	; (800b1dc <prvAddNewTaskToReadyList+0xc8>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d207      	bcs.n	800b1ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b1be:	4b0c      	ldr	r3, [pc, #48]	; (800b1f0 <prvAddNewTaskToReadyList+0xdc>)
 800b1c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1c4:	601a      	str	r2, [r3, #0]
 800b1c6:	f3bf 8f4f 	dsb	sy
 800b1ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1ce:	bf00      	nop
 800b1d0:	3708      	adds	r7, #8
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
 800b1d6:	bf00      	nop
 800b1d8:	20001da8 	.word	0x20001da8
 800b1dc:	200018d4 	.word	0x200018d4
 800b1e0:	20001db4 	.word	0x20001db4
 800b1e4:	20001dc4 	.word	0x20001dc4
 800b1e8:	20001db0 	.word	0x20001db0
 800b1ec:	200018d8 	.word	0x200018d8
 800b1f0:	e000ed04 	.word	0xe000ed04

0800b1f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d017      	beq.n	800b236 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b206:	4b13      	ldr	r3, [pc, #76]	; (800b254 <vTaskDelay+0x60>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d00a      	beq.n	800b224 <vTaskDelay+0x30>
	__asm volatile
 800b20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b212:	f383 8811 	msr	BASEPRI, r3
 800b216:	f3bf 8f6f 	isb	sy
 800b21a:	f3bf 8f4f 	dsb	sy
 800b21e:	60bb      	str	r3, [r7, #8]
}
 800b220:	bf00      	nop
 800b222:	e7fe      	b.n	800b222 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b224:	f000 f880 	bl	800b328 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b228:	2100      	movs	r1, #0
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 fde8 	bl	800be00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b230:	f000 f888 	bl	800b344 <xTaskResumeAll>
 800b234:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d107      	bne.n	800b24c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b23c:	4b06      	ldr	r3, [pc, #24]	; (800b258 <vTaskDelay+0x64>)
 800b23e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b242:	601a      	str	r2, [r3, #0]
 800b244:	f3bf 8f4f 	dsb	sy
 800b248:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b24c:	bf00      	nop
 800b24e:	3710      	adds	r7, #16
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	20001dd0 	.word	0x20001dd0
 800b258:	e000ed04 	.word	0xe000ed04

0800b25c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b08a      	sub	sp, #40	; 0x28
 800b260:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b262:	2300      	movs	r3, #0
 800b264:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b266:	2300      	movs	r3, #0
 800b268:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b26a:	463a      	mov	r2, r7
 800b26c:	1d39      	adds	r1, r7, #4
 800b26e:	f107 0308 	add.w	r3, r7, #8
 800b272:	4618      	mov	r0, r3
 800b274:	f7fe fcea 	bl	8009c4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b278:	6839      	ldr	r1, [r7, #0]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	68ba      	ldr	r2, [r7, #8]
 800b27e:	9202      	str	r2, [sp, #8]
 800b280:	9301      	str	r3, [sp, #4]
 800b282:	2300      	movs	r3, #0
 800b284:	9300      	str	r3, [sp, #0]
 800b286:	2300      	movs	r3, #0
 800b288:	460a      	mov	r2, r1
 800b28a:	4921      	ldr	r1, [pc, #132]	; (800b310 <vTaskStartScheduler+0xb4>)
 800b28c:	4821      	ldr	r0, [pc, #132]	; (800b314 <vTaskStartScheduler+0xb8>)
 800b28e:	f7ff fe0f 	bl	800aeb0 <xTaskCreateStatic>
 800b292:	4603      	mov	r3, r0
 800b294:	4a20      	ldr	r2, [pc, #128]	; (800b318 <vTaskStartScheduler+0xbc>)
 800b296:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b298:	4b1f      	ldr	r3, [pc, #124]	; (800b318 <vTaskStartScheduler+0xbc>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d002      	beq.n	800b2a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	617b      	str	r3, [r7, #20]
 800b2a4:	e001      	b.n	800b2aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d102      	bne.n	800b2b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b2b0:	f000 fdfa 	bl	800bea8 <xTimerCreateTimerTask>
 800b2b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d116      	bne.n	800b2ea <vTaskStartScheduler+0x8e>
	__asm volatile
 800b2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c0:	f383 8811 	msr	BASEPRI, r3
 800b2c4:	f3bf 8f6f 	isb	sy
 800b2c8:	f3bf 8f4f 	dsb	sy
 800b2cc:	613b      	str	r3, [r7, #16]
}
 800b2ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b2d0:	4b12      	ldr	r3, [pc, #72]	; (800b31c <vTaskStartScheduler+0xc0>)
 800b2d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b2d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b2d8:	4b11      	ldr	r3, [pc, #68]	; (800b320 <vTaskStartScheduler+0xc4>)
 800b2da:	2201      	movs	r2, #1
 800b2dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b2de:	4b11      	ldr	r3, [pc, #68]	; (800b324 <vTaskStartScheduler+0xc8>)
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b2e4:	f001 f9bc 	bl	800c660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b2e8:	e00e      	b.n	800b308 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2f0:	d10a      	bne.n	800b308 <vTaskStartScheduler+0xac>
	__asm volatile
 800b2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f6:	f383 8811 	msr	BASEPRI, r3
 800b2fa:	f3bf 8f6f 	isb	sy
 800b2fe:	f3bf 8f4f 	dsb	sy
 800b302:	60fb      	str	r3, [r7, #12]
}
 800b304:	bf00      	nop
 800b306:	e7fe      	b.n	800b306 <vTaskStartScheduler+0xaa>
}
 800b308:	bf00      	nop
 800b30a:	3718      	adds	r7, #24
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}
 800b310:	0800ed3c 	.word	0x0800ed3c
 800b314:	0800b941 	.word	0x0800b941
 800b318:	20001dcc 	.word	0x20001dcc
 800b31c:	20001dc8 	.word	0x20001dc8
 800b320:	20001db4 	.word	0x20001db4
 800b324:	20001dac 	.word	0x20001dac

0800b328 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b328:	b480      	push	{r7}
 800b32a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b32c:	4b04      	ldr	r3, [pc, #16]	; (800b340 <vTaskSuspendAll+0x18>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	3301      	adds	r3, #1
 800b332:	4a03      	ldr	r2, [pc, #12]	; (800b340 <vTaskSuspendAll+0x18>)
 800b334:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b336:	bf00      	nop
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr
 800b340:	20001dd0 	.word	0x20001dd0

0800b344 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b34a:	2300      	movs	r3, #0
 800b34c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b34e:	2300      	movs	r3, #0
 800b350:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b352:	4b42      	ldr	r3, [pc, #264]	; (800b45c <xTaskResumeAll+0x118>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d10a      	bne.n	800b370 <xTaskResumeAll+0x2c>
	__asm volatile
 800b35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35e:	f383 8811 	msr	BASEPRI, r3
 800b362:	f3bf 8f6f 	isb	sy
 800b366:	f3bf 8f4f 	dsb	sy
 800b36a:	603b      	str	r3, [r7, #0]
}
 800b36c:	bf00      	nop
 800b36e:	e7fe      	b.n	800b36e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b370:	f001 fa18 	bl	800c7a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b374:	4b39      	ldr	r3, [pc, #228]	; (800b45c <xTaskResumeAll+0x118>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	3b01      	subs	r3, #1
 800b37a:	4a38      	ldr	r2, [pc, #224]	; (800b45c <xTaskResumeAll+0x118>)
 800b37c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b37e:	4b37      	ldr	r3, [pc, #220]	; (800b45c <xTaskResumeAll+0x118>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d162      	bne.n	800b44c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b386:	4b36      	ldr	r3, [pc, #216]	; (800b460 <xTaskResumeAll+0x11c>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d05e      	beq.n	800b44c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b38e:	e02f      	b.n	800b3f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b390:	4b34      	ldr	r3, [pc, #208]	; (800b464 <xTaskResumeAll+0x120>)
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	3318      	adds	r3, #24
 800b39c:	4618      	mov	r0, r3
 800b39e:	f7fe fd13 	bl	8009dc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	3304      	adds	r3, #4
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7fe fd0e 	bl	8009dc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3b0:	4b2d      	ldr	r3, [pc, #180]	; (800b468 <xTaskResumeAll+0x124>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d903      	bls.n	800b3c0 <xTaskResumeAll+0x7c>
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3bc:	4a2a      	ldr	r2, [pc, #168]	; (800b468 <xTaskResumeAll+0x124>)
 800b3be:	6013      	str	r3, [r2, #0]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3c4:	4613      	mov	r3, r2
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	4413      	add	r3, r2
 800b3ca:	009b      	lsls	r3, r3, #2
 800b3cc:	4a27      	ldr	r2, [pc, #156]	; (800b46c <xTaskResumeAll+0x128>)
 800b3ce:	441a      	add	r2, r3
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	3304      	adds	r3, #4
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	4610      	mov	r0, r2
 800b3d8:	f7fe fc99 	bl	8009d0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3e0:	4b23      	ldr	r3, [pc, #140]	; (800b470 <xTaskResumeAll+0x12c>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d302      	bcc.n	800b3f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b3ea:	4b22      	ldr	r3, [pc, #136]	; (800b474 <xTaskResumeAll+0x130>)
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3f0:	4b1c      	ldr	r3, [pc, #112]	; (800b464 <xTaskResumeAll+0x120>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d1cb      	bne.n	800b390 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d001      	beq.n	800b402 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b3fe:	f000 fb55 	bl	800baac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b402:	4b1d      	ldr	r3, [pc, #116]	; (800b478 <xTaskResumeAll+0x134>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d010      	beq.n	800b430 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b40e:	f000 f847 	bl	800b4a0 <xTaskIncrementTick>
 800b412:	4603      	mov	r3, r0
 800b414:	2b00      	cmp	r3, #0
 800b416:	d002      	beq.n	800b41e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b418:	4b16      	ldr	r3, [pc, #88]	; (800b474 <xTaskResumeAll+0x130>)
 800b41a:	2201      	movs	r2, #1
 800b41c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	3b01      	subs	r3, #1
 800b422:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d1f1      	bne.n	800b40e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b42a:	4b13      	ldr	r3, [pc, #76]	; (800b478 <xTaskResumeAll+0x134>)
 800b42c:	2200      	movs	r2, #0
 800b42e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b430:	4b10      	ldr	r3, [pc, #64]	; (800b474 <xTaskResumeAll+0x130>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d009      	beq.n	800b44c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b438:	2301      	movs	r3, #1
 800b43a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b43c:	4b0f      	ldr	r3, [pc, #60]	; (800b47c <xTaskResumeAll+0x138>)
 800b43e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b442:	601a      	str	r2, [r3, #0]
 800b444:	f3bf 8f4f 	dsb	sy
 800b448:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b44c:	f001 f9da 	bl	800c804 <vPortExitCritical>

	return xAlreadyYielded;
 800b450:	68bb      	ldr	r3, [r7, #8]
}
 800b452:	4618      	mov	r0, r3
 800b454:	3710      	adds	r7, #16
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	20001dd0 	.word	0x20001dd0
 800b460:	20001da8 	.word	0x20001da8
 800b464:	20001d68 	.word	0x20001d68
 800b468:	20001db0 	.word	0x20001db0
 800b46c:	200018d8 	.word	0x200018d8
 800b470:	200018d4 	.word	0x200018d4
 800b474:	20001dbc 	.word	0x20001dbc
 800b478:	20001db8 	.word	0x20001db8
 800b47c:	e000ed04 	.word	0xe000ed04

0800b480 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b480:	b480      	push	{r7}
 800b482:	b083      	sub	sp, #12
 800b484:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b486:	4b05      	ldr	r3, [pc, #20]	; (800b49c <xTaskGetTickCount+0x1c>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b48c:	687b      	ldr	r3, [r7, #4]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	370c      	adds	r7, #12
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr
 800b49a:	bf00      	nop
 800b49c:	20001dac 	.word	0x20001dac

0800b4a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b086      	sub	sp, #24
 800b4a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4aa:	4b4f      	ldr	r3, [pc, #316]	; (800b5e8 <xTaskIncrementTick+0x148>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	f040 808f 	bne.w	800b5d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b4b4:	4b4d      	ldr	r3, [pc, #308]	; (800b5ec <xTaskIncrementTick+0x14c>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b4bc:	4a4b      	ldr	r2, [pc, #300]	; (800b5ec <xTaskIncrementTick+0x14c>)
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d120      	bne.n	800b50a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b4c8:	4b49      	ldr	r3, [pc, #292]	; (800b5f0 <xTaskIncrementTick+0x150>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d00a      	beq.n	800b4e8 <xTaskIncrementTick+0x48>
	__asm volatile
 800b4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d6:	f383 8811 	msr	BASEPRI, r3
 800b4da:	f3bf 8f6f 	isb	sy
 800b4de:	f3bf 8f4f 	dsb	sy
 800b4e2:	603b      	str	r3, [r7, #0]
}
 800b4e4:	bf00      	nop
 800b4e6:	e7fe      	b.n	800b4e6 <xTaskIncrementTick+0x46>
 800b4e8:	4b41      	ldr	r3, [pc, #260]	; (800b5f0 <xTaskIncrementTick+0x150>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	60fb      	str	r3, [r7, #12]
 800b4ee:	4b41      	ldr	r3, [pc, #260]	; (800b5f4 <xTaskIncrementTick+0x154>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a3f      	ldr	r2, [pc, #252]	; (800b5f0 <xTaskIncrementTick+0x150>)
 800b4f4:	6013      	str	r3, [r2, #0]
 800b4f6:	4a3f      	ldr	r2, [pc, #252]	; (800b5f4 <xTaskIncrementTick+0x154>)
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	6013      	str	r3, [r2, #0]
 800b4fc:	4b3e      	ldr	r3, [pc, #248]	; (800b5f8 <xTaskIncrementTick+0x158>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	3301      	adds	r3, #1
 800b502:	4a3d      	ldr	r2, [pc, #244]	; (800b5f8 <xTaskIncrementTick+0x158>)
 800b504:	6013      	str	r3, [r2, #0]
 800b506:	f000 fad1 	bl	800baac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b50a:	4b3c      	ldr	r3, [pc, #240]	; (800b5fc <xTaskIncrementTick+0x15c>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	693a      	ldr	r2, [r7, #16]
 800b510:	429a      	cmp	r2, r3
 800b512:	d349      	bcc.n	800b5a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b514:	4b36      	ldr	r3, [pc, #216]	; (800b5f0 <xTaskIncrementTick+0x150>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d104      	bne.n	800b528 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b51e:	4b37      	ldr	r3, [pc, #220]	; (800b5fc <xTaskIncrementTick+0x15c>)
 800b520:	f04f 32ff 	mov.w	r2, #4294967295
 800b524:	601a      	str	r2, [r3, #0]
					break;
 800b526:	e03f      	b.n	800b5a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b528:	4b31      	ldr	r3, [pc, #196]	; (800b5f0 <xTaskIncrementTick+0x150>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	68db      	ldr	r3, [r3, #12]
 800b52e:	68db      	ldr	r3, [r3, #12]
 800b530:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b538:	693a      	ldr	r2, [r7, #16]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d203      	bcs.n	800b548 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b540:	4a2e      	ldr	r2, [pc, #184]	; (800b5fc <xTaskIncrementTick+0x15c>)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b546:	e02f      	b.n	800b5a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	3304      	adds	r3, #4
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7fe fc3b 	bl	8009dc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b556:	2b00      	cmp	r3, #0
 800b558:	d004      	beq.n	800b564 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	3318      	adds	r3, #24
 800b55e:	4618      	mov	r0, r3
 800b560:	f7fe fc32 	bl	8009dc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b568:	4b25      	ldr	r3, [pc, #148]	; (800b600 <xTaskIncrementTick+0x160>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d903      	bls.n	800b578 <xTaskIncrementTick+0xd8>
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b574:	4a22      	ldr	r2, [pc, #136]	; (800b600 <xTaskIncrementTick+0x160>)
 800b576:	6013      	str	r3, [r2, #0]
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b57c:	4613      	mov	r3, r2
 800b57e:	009b      	lsls	r3, r3, #2
 800b580:	4413      	add	r3, r2
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	4a1f      	ldr	r2, [pc, #124]	; (800b604 <xTaskIncrementTick+0x164>)
 800b586:	441a      	add	r2, r3
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	3304      	adds	r3, #4
 800b58c:	4619      	mov	r1, r3
 800b58e:	4610      	mov	r0, r2
 800b590:	f7fe fbbd 	bl	8009d0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b598:	4b1b      	ldr	r3, [pc, #108]	; (800b608 <xTaskIncrementTick+0x168>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d3b8      	bcc.n	800b514 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5a6:	e7b5      	b.n	800b514 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b5a8:	4b17      	ldr	r3, [pc, #92]	; (800b608 <xTaskIncrementTick+0x168>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ae:	4915      	ldr	r1, [pc, #84]	; (800b604 <xTaskIncrementTick+0x164>)
 800b5b0:	4613      	mov	r3, r2
 800b5b2:	009b      	lsls	r3, r3, #2
 800b5b4:	4413      	add	r3, r2
 800b5b6:	009b      	lsls	r3, r3, #2
 800b5b8:	440b      	add	r3, r1
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d901      	bls.n	800b5c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b5c4:	4b11      	ldr	r3, [pc, #68]	; (800b60c <xTaskIncrementTick+0x16c>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d007      	beq.n	800b5dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	617b      	str	r3, [r7, #20]
 800b5d0:	e004      	b.n	800b5dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b5d2:	4b0f      	ldr	r3, [pc, #60]	; (800b610 <xTaskIncrementTick+0x170>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	4a0d      	ldr	r2, [pc, #52]	; (800b610 <xTaskIncrementTick+0x170>)
 800b5da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b5dc:	697b      	ldr	r3, [r7, #20]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3718      	adds	r7, #24
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	20001dd0 	.word	0x20001dd0
 800b5ec:	20001dac 	.word	0x20001dac
 800b5f0:	20001d60 	.word	0x20001d60
 800b5f4:	20001d64 	.word	0x20001d64
 800b5f8:	20001dc0 	.word	0x20001dc0
 800b5fc:	20001dc8 	.word	0x20001dc8
 800b600:	20001db0 	.word	0x20001db0
 800b604:	200018d8 	.word	0x200018d8
 800b608:	200018d4 	.word	0x200018d4
 800b60c:	20001dbc 	.word	0x20001dbc
 800b610:	20001db8 	.word	0x20001db8

0800b614 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b614:	b480      	push	{r7}
 800b616:	b085      	sub	sp, #20
 800b618:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b61a:	4b28      	ldr	r3, [pc, #160]	; (800b6bc <vTaskSwitchContext+0xa8>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d003      	beq.n	800b62a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b622:	4b27      	ldr	r3, [pc, #156]	; (800b6c0 <vTaskSwitchContext+0xac>)
 800b624:	2201      	movs	r2, #1
 800b626:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b628:	e041      	b.n	800b6ae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b62a:	4b25      	ldr	r3, [pc, #148]	; (800b6c0 <vTaskSwitchContext+0xac>)
 800b62c:	2200      	movs	r2, #0
 800b62e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b630:	4b24      	ldr	r3, [pc, #144]	; (800b6c4 <vTaskSwitchContext+0xb0>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	60fb      	str	r3, [r7, #12]
 800b636:	e010      	b.n	800b65a <vTaskSwitchContext+0x46>
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d10a      	bne.n	800b654 <vTaskSwitchContext+0x40>
	__asm volatile
 800b63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b642:	f383 8811 	msr	BASEPRI, r3
 800b646:	f3bf 8f6f 	isb	sy
 800b64a:	f3bf 8f4f 	dsb	sy
 800b64e:	607b      	str	r3, [r7, #4]
}
 800b650:	bf00      	nop
 800b652:	e7fe      	b.n	800b652 <vTaskSwitchContext+0x3e>
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	3b01      	subs	r3, #1
 800b658:	60fb      	str	r3, [r7, #12]
 800b65a:	491b      	ldr	r1, [pc, #108]	; (800b6c8 <vTaskSwitchContext+0xb4>)
 800b65c:	68fa      	ldr	r2, [r7, #12]
 800b65e:	4613      	mov	r3, r2
 800b660:	009b      	lsls	r3, r3, #2
 800b662:	4413      	add	r3, r2
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	440b      	add	r3, r1
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d0e4      	beq.n	800b638 <vTaskSwitchContext+0x24>
 800b66e:	68fa      	ldr	r2, [r7, #12]
 800b670:	4613      	mov	r3, r2
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	4413      	add	r3, r2
 800b676:	009b      	lsls	r3, r3, #2
 800b678:	4a13      	ldr	r2, [pc, #76]	; (800b6c8 <vTaskSwitchContext+0xb4>)
 800b67a:	4413      	add	r3, r2
 800b67c:	60bb      	str	r3, [r7, #8]
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	685a      	ldr	r2, [r3, #4]
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	605a      	str	r2, [r3, #4]
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	685a      	ldr	r2, [r3, #4]
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	3308      	adds	r3, #8
 800b690:	429a      	cmp	r2, r3
 800b692:	d104      	bne.n	800b69e <vTaskSwitchContext+0x8a>
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	685b      	ldr	r3, [r3, #4]
 800b698:	685a      	ldr	r2, [r3, #4]
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	605a      	str	r2, [r3, #4]
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	4a09      	ldr	r2, [pc, #36]	; (800b6cc <vTaskSwitchContext+0xb8>)
 800b6a6:	6013      	str	r3, [r2, #0]
 800b6a8:	4a06      	ldr	r2, [pc, #24]	; (800b6c4 <vTaskSwitchContext+0xb0>)
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6013      	str	r3, [r2, #0]
}
 800b6ae:	bf00      	nop
 800b6b0:	3714      	adds	r7, #20
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr
 800b6ba:	bf00      	nop
 800b6bc:	20001dd0 	.word	0x20001dd0
 800b6c0:	20001dbc 	.word	0x20001dbc
 800b6c4:	20001db0 	.word	0x20001db0
 800b6c8:	200018d8 	.word	0x200018d8
 800b6cc:	200018d4 	.word	0x200018d4

0800b6d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d10a      	bne.n	800b6f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e4:	f383 8811 	msr	BASEPRI, r3
 800b6e8:	f3bf 8f6f 	isb	sy
 800b6ec:	f3bf 8f4f 	dsb	sy
 800b6f0:	60fb      	str	r3, [r7, #12]
}
 800b6f2:	bf00      	nop
 800b6f4:	e7fe      	b.n	800b6f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b6f6:	4b07      	ldr	r3, [pc, #28]	; (800b714 <vTaskPlaceOnEventList+0x44>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	3318      	adds	r3, #24
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f7fe fb29 	bl	8009d56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b704:	2101      	movs	r1, #1
 800b706:	6838      	ldr	r0, [r7, #0]
 800b708:	f000 fb7a 	bl	800be00 <prvAddCurrentTaskToDelayedList>
}
 800b70c:	bf00      	nop
 800b70e:	3710      	adds	r7, #16
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}
 800b714:	200018d4 	.word	0x200018d4

0800b718 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b086      	sub	sp, #24
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d10a      	bne.n	800b740 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b72e:	f383 8811 	msr	BASEPRI, r3
 800b732:	f3bf 8f6f 	isb	sy
 800b736:	f3bf 8f4f 	dsb	sy
 800b73a:	617b      	str	r3, [r7, #20]
}
 800b73c:	bf00      	nop
 800b73e:	e7fe      	b.n	800b73e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b740:	4b0a      	ldr	r3, [pc, #40]	; (800b76c <vTaskPlaceOnEventListRestricted+0x54>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	3318      	adds	r3, #24
 800b746:	4619      	mov	r1, r3
 800b748:	68f8      	ldr	r0, [r7, #12]
 800b74a:	f7fe fae0 	bl	8009d0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d002      	beq.n	800b75a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b754:	f04f 33ff 	mov.w	r3, #4294967295
 800b758:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b75a:	6879      	ldr	r1, [r7, #4]
 800b75c:	68b8      	ldr	r0, [r7, #8]
 800b75e:	f000 fb4f 	bl	800be00 <prvAddCurrentTaskToDelayedList>
	}
 800b762:	bf00      	nop
 800b764:	3718      	adds	r7, #24
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	bf00      	nop
 800b76c:	200018d4 	.word	0x200018d4

0800b770 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b086      	sub	sp, #24
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d10a      	bne.n	800b79c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78a:	f383 8811 	msr	BASEPRI, r3
 800b78e:	f3bf 8f6f 	isb	sy
 800b792:	f3bf 8f4f 	dsb	sy
 800b796:	60fb      	str	r3, [r7, #12]
}
 800b798:	bf00      	nop
 800b79a:	e7fe      	b.n	800b79a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	3318      	adds	r3, #24
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7fe fb11 	bl	8009dc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7a6:	4b1e      	ldr	r3, [pc, #120]	; (800b820 <xTaskRemoveFromEventList+0xb0>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d11d      	bne.n	800b7ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	3304      	adds	r3, #4
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7fe fb08 	bl	8009dc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7bc:	4b19      	ldr	r3, [pc, #100]	; (800b824 <xTaskRemoveFromEventList+0xb4>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d903      	bls.n	800b7cc <xTaskRemoveFromEventList+0x5c>
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c8:	4a16      	ldr	r2, [pc, #88]	; (800b824 <xTaskRemoveFromEventList+0xb4>)
 800b7ca:	6013      	str	r3, [r2, #0]
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7d0:	4613      	mov	r3, r2
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	4413      	add	r3, r2
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	4a13      	ldr	r2, [pc, #76]	; (800b828 <xTaskRemoveFromEventList+0xb8>)
 800b7da:	441a      	add	r2, r3
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	3304      	adds	r3, #4
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	4610      	mov	r0, r2
 800b7e4:	f7fe fa93 	bl	8009d0e <vListInsertEnd>
 800b7e8:	e005      	b.n	800b7f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	3318      	adds	r3, #24
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	480e      	ldr	r0, [pc, #56]	; (800b82c <xTaskRemoveFromEventList+0xbc>)
 800b7f2:	f7fe fa8c 	bl	8009d0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7fa:	4b0d      	ldr	r3, [pc, #52]	; (800b830 <xTaskRemoveFromEventList+0xc0>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b800:	429a      	cmp	r2, r3
 800b802:	d905      	bls.n	800b810 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b804:	2301      	movs	r3, #1
 800b806:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b808:	4b0a      	ldr	r3, [pc, #40]	; (800b834 <xTaskRemoveFromEventList+0xc4>)
 800b80a:	2201      	movs	r2, #1
 800b80c:	601a      	str	r2, [r3, #0]
 800b80e:	e001      	b.n	800b814 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b810:	2300      	movs	r3, #0
 800b812:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b814:	697b      	ldr	r3, [r7, #20]
}
 800b816:	4618      	mov	r0, r3
 800b818:	3718      	adds	r7, #24
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	20001dd0 	.word	0x20001dd0
 800b824:	20001db0 	.word	0x20001db0
 800b828:	200018d8 	.word	0x200018d8
 800b82c:	20001d68 	.word	0x20001d68
 800b830:	200018d4 	.word	0x200018d4
 800b834:	20001dbc 	.word	0x20001dbc

0800b838 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b840:	4b06      	ldr	r3, [pc, #24]	; (800b85c <vTaskInternalSetTimeOutState+0x24>)
 800b842:	681a      	ldr	r2, [r3, #0]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b848:	4b05      	ldr	r3, [pc, #20]	; (800b860 <vTaskInternalSetTimeOutState+0x28>)
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	605a      	str	r2, [r3, #4]
}
 800b850:	bf00      	nop
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr
 800b85c:	20001dc0 	.word	0x20001dc0
 800b860:	20001dac 	.word	0x20001dac

0800b864 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b088      	sub	sp, #32
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d10a      	bne.n	800b88a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b878:	f383 8811 	msr	BASEPRI, r3
 800b87c:	f3bf 8f6f 	isb	sy
 800b880:	f3bf 8f4f 	dsb	sy
 800b884:	613b      	str	r3, [r7, #16]
}
 800b886:	bf00      	nop
 800b888:	e7fe      	b.n	800b888 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d10a      	bne.n	800b8a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b894:	f383 8811 	msr	BASEPRI, r3
 800b898:	f3bf 8f6f 	isb	sy
 800b89c:	f3bf 8f4f 	dsb	sy
 800b8a0:	60fb      	str	r3, [r7, #12]
}
 800b8a2:	bf00      	nop
 800b8a4:	e7fe      	b.n	800b8a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b8a6:	f000 ff7d 	bl	800c7a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b8aa:	4b1d      	ldr	r3, [pc, #116]	; (800b920 <xTaskCheckForTimeOut+0xbc>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	69ba      	ldr	r2, [r7, #24]
 800b8b6:	1ad3      	subs	r3, r2, r3
 800b8b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8c2:	d102      	bne.n	800b8ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	61fb      	str	r3, [r7, #28]
 800b8c8:	e023      	b.n	800b912 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681a      	ldr	r2, [r3, #0]
 800b8ce:	4b15      	ldr	r3, [pc, #84]	; (800b924 <xTaskCheckForTimeOut+0xc0>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d007      	beq.n	800b8e6 <xTaskCheckForTimeOut+0x82>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	69ba      	ldr	r2, [r7, #24]
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d302      	bcc.n	800b8e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	61fb      	str	r3, [r7, #28]
 800b8e4:	e015      	b.n	800b912 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	697a      	ldr	r2, [r7, #20]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d20b      	bcs.n	800b908 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	681a      	ldr	r2, [r3, #0]
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	1ad2      	subs	r2, r2, r3
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f7ff ff9b 	bl	800b838 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b902:	2300      	movs	r3, #0
 800b904:	61fb      	str	r3, [r7, #28]
 800b906:	e004      	b.n	800b912 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	2200      	movs	r2, #0
 800b90c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b90e:	2301      	movs	r3, #1
 800b910:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b912:	f000 ff77 	bl	800c804 <vPortExitCritical>

	return xReturn;
 800b916:	69fb      	ldr	r3, [r7, #28]
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3720      	adds	r7, #32
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	20001dac 	.word	0x20001dac
 800b924:	20001dc0 	.word	0x20001dc0

0800b928 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b928:	b480      	push	{r7}
 800b92a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b92c:	4b03      	ldr	r3, [pc, #12]	; (800b93c <vTaskMissedYield+0x14>)
 800b92e:	2201      	movs	r2, #1
 800b930:	601a      	str	r2, [r3, #0]
}
 800b932:	bf00      	nop
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr
 800b93c:	20001dbc 	.word	0x20001dbc

0800b940 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b082      	sub	sp, #8
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b948:	f000 f852 	bl	800b9f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b94c:	4b06      	ldr	r3, [pc, #24]	; (800b968 <prvIdleTask+0x28>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	2b01      	cmp	r3, #1
 800b952:	d9f9      	bls.n	800b948 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b954:	4b05      	ldr	r3, [pc, #20]	; (800b96c <prvIdleTask+0x2c>)
 800b956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b95a:	601a      	str	r2, [r3, #0]
 800b95c:	f3bf 8f4f 	dsb	sy
 800b960:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b964:	e7f0      	b.n	800b948 <prvIdleTask+0x8>
 800b966:	bf00      	nop
 800b968:	200018d8 	.word	0x200018d8
 800b96c:	e000ed04 	.word	0xe000ed04

0800b970 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b976:	2300      	movs	r3, #0
 800b978:	607b      	str	r3, [r7, #4]
 800b97a:	e00c      	b.n	800b996 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	4613      	mov	r3, r2
 800b980:	009b      	lsls	r3, r3, #2
 800b982:	4413      	add	r3, r2
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	4a12      	ldr	r2, [pc, #72]	; (800b9d0 <prvInitialiseTaskLists+0x60>)
 800b988:	4413      	add	r3, r2
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7fe f992 	bl	8009cb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	3301      	adds	r3, #1
 800b994:	607b      	str	r3, [r7, #4]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2b37      	cmp	r3, #55	; 0x37
 800b99a:	d9ef      	bls.n	800b97c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b99c:	480d      	ldr	r0, [pc, #52]	; (800b9d4 <prvInitialiseTaskLists+0x64>)
 800b99e:	f7fe f989 	bl	8009cb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b9a2:	480d      	ldr	r0, [pc, #52]	; (800b9d8 <prvInitialiseTaskLists+0x68>)
 800b9a4:	f7fe f986 	bl	8009cb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b9a8:	480c      	ldr	r0, [pc, #48]	; (800b9dc <prvInitialiseTaskLists+0x6c>)
 800b9aa:	f7fe f983 	bl	8009cb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b9ae:	480c      	ldr	r0, [pc, #48]	; (800b9e0 <prvInitialiseTaskLists+0x70>)
 800b9b0:	f7fe f980 	bl	8009cb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b9b4:	480b      	ldr	r0, [pc, #44]	; (800b9e4 <prvInitialiseTaskLists+0x74>)
 800b9b6:	f7fe f97d 	bl	8009cb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b9ba:	4b0b      	ldr	r3, [pc, #44]	; (800b9e8 <prvInitialiseTaskLists+0x78>)
 800b9bc:	4a05      	ldr	r2, [pc, #20]	; (800b9d4 <prvInitialiseTaskLists+0x64>)
 800b9be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b9c0:	4b0a      	ldr	r3, [pc, #40]	; (800b9ec <prvInitialiseTaskLists+0x7c>)
 800b9c2:	4a05      	ldr	r2, [pc, #20]	; (800b9d8 <prvInitialiseTaskLists+0x68>)
 800b9c4:	601a      	str	r2, [r3, #0]
}
 800b9c6:	bf00      	nop
 800b9c8:	3708      	adds	r7, #8
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	200018d8 	.word	0x200018d8
 800b9d4:	20001d38 	.word	0x20001d38
 800b9d8:	20001d4c 	.word	0x20001d4c
 800b9dc:	20001d68 	.word	0x20001d68
 800b9e0:	20001d7c 	.word	0x20001d7c
 800b9e4:	20001d94 	.word	0x20001d94
 800b9e8:	20001d60 	.word	0x20001d60
 800b9ec:	20001d64 	.word	0x20001d64

0800b9f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b9f6:	e019      	b.n	800ba2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b9f8:	f000 fed4 	bl	800c7a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9fc:	4b10      	ldr	r3, [pc, #64]	; (800ba40 <prvCheckTasksWaitingTermination+0x50>)
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	68db      	ldr	r3, [r3, #12]
 800ba02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	3304      	adds	r3, #4
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7fe f9dd 	bl	8009dc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ba0e:	4b0d      	ldr	r3, [pc, #52]	; (800ba44 <prvCheckTasksWaitingTermination+0x54>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	3b01      	subs	r3, #1
 800ba14:	4a0b      	ldr	r2, [pc, #44]	; (800ba44 <prvCheckTasksWaitingTermination+0x54>)
 800ba16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ba18:	4b0b      	ldr	r3, [pc, #44]	; (800ba48 <prvCheckTasksWaitingTermination+0x58>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	3b01      	subs	r3, #1
 800ba1e:	4a0a      	ldr	r2, [pc, #40]	; (800ba48 <prvCheckTasksWaitingTermination+0x58>)
 800ba20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ba22:	f000 feef 	bl	800c804 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 f810 	bl	800ba4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba2c:	4b06      	ldr	r3, [pc, #24]	; (800ba48 <prvCheckTasksWaitingTermination+0x58>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d1e1      	bne.n	800b9f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ba34:	bf00      	nop
 800ba36:	bf00      	nop
 800ba38:	3708      	adds	r7, #8
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	20001d7c 	.word	0x20001d7c
 800ba44:	20001da8 	.word	0x20001da8
 800ba48:	20001d90 	.word	0x20001d90

0800ba4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d108      	bne.n	800ba70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba62:	4618      	mov	r0, r3
 800ba64:	f001 f88c 	bl	800cb80 <vPortFree>
				vPortFree( pxTCB );
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f001 f889 	bl	800cb80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ba6e:	e018      	b.n	800baa2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d103      	bne.n	800ba82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f001 f880 	bl	800cb80 <vPortFree>
	}
 800ba80:	e00f      	b.n	800baa2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba88:	2b02      	cmp	r3, #2
 800ba8a:	d00a      	beq.n	800baa2 <prvDeleteTCB+0x56>
	__asm volatile
 800ba8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba90:	f383 8811 	msr	BASEPRI, r3
 800ba94:	f3bf 8f6f 	isb	sy
 800ba98:	f3bf 8f4f 	dsb	sy
 800ba9c:	60fb      	str	r3, [r7, #12]
}
 800ba9e:	bf00      	nop
 800baa0:	e7fe      	b.n	800baa0 <prvDeleteTCB+0x54>
	}
 800baa2:	bf00      	nop
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
	...

0800baac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800baac:	b480      	push	{r7}
 800baae:	b083      	sub	sp, #12
 800bab0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bab2:	4b0c      	ldr	r3, [pc, #48]	; (800bae4 <prvResetNextTaskUnblockTime+0x38>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d104      	bne.n	800bac6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800babc:	4b0a      	ldr	r3, [pc, #40]	; (800bae8 <prvResetNextTaskUnblockTime+0x3c>)
 800babe:	f04f 32ff 	mov.w	r2, #4294967295
 800bac2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bac4:	e008      	b.n	800bad8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bac6:	4b07      	ldr	r3, [pc, #28]	; (800bae4 <prvResetNextTaskUnblockTime+0x38>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	68db      	ldr	r3, [r3, #12]
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	4a04      	ldr	r2, [pc, #16]	; (800bae8 <prvResetNextTaskUnblockTime+0x3c>)
 800bad6:	6013      	str	r3, [r2, #0]
}
 800bad8:	bf00      	nop
 800bada:	370c      	adds	r7, #12
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr
 800bae4:	20001d60 	.word	0x20001d60
 800bae8:	20001dc8 	.word	0x20001dc8

0800baec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800baec:	b480      	push	{r7}
 800baee:	b083      	sub	sp, #12
 800baf0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800baf2:	4b0b      	ldr	r3, [pc, #44]	; (800bb20 <xTaskGetSchedulerState+0x34>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d102      	bne.n	800bb00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bafa:	2301      	movs	r3, #1
 800bafc:	607b      	str	r3, [r7, #4]
 800bafe:	e008      	b.n	800bb12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb00:	4b08      	ldr	r3, [pc, #32]	; (800bb24 <xTaskGetSchedulerState+0x38>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d102      	bne.n	800bb0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bb08:	2302      	movs	r3, #2
 800bb0a:	607b      	str	r3, [r7, #4]
 800bb0c:	e001      	b.n	800bb12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bb12:	687b      	ldr	r3, [r7, #4]
	}
 800bb14:	4618      	mov	r0, r3
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr
 800bb20:	20001db4 	.word	0x20001db4
 800bb24:	20001dd0 	.word	0x20001dd0

0800bb28 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bb34:	2300      	movs	r3, #0
 800bb36:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d051      	beq.n	800bbe2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb42:	4b2a      	ldr	r3, [pc, #168]	; (800bbec <xTaskPriorityInherit+0xc4>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d241      	bcs.n	800bbd0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	699b      	ldr	r3, [r3, #24]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	db06      	blt.n	800bb62 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb54:	4b25      	ldr	r3, [pc, #148]	; (800bbec <xTaskPriorityInherit+0xc4>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	6959      	ldr	r1, [r3, #20]
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	4413      	add	r3, r2
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	4a1f      	ldr	r2, [pc, #124]	; (800bbf0 <xTaskPriorityInherit+0xc8>)
 800bb74:	4413      	add	r3, r2
 800bb76:	4299      	cmp	r1, r3
 800bb78:	d122      	bne.n	800bbc0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	3304      	adds	r3, #4
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7fe f922 	bl	8009dc8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bb84:	4b19      	ldr	r3, [pc, #100]	; (800bbec <xTaskPriorityInherit+0xc4>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb92:	4b18      	ldr	r3, [pc, #96]	; (800bbf4 <xTaskPriorityInherit+0xcc>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d903      	bls.n	800bba2 <xTaskPriorityInherit+0x7a>
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb9e:	4a15      	ldr	r2, [pc, #84]	; (800bbf4 <xTaskPriorityInherit+0xcc>)
 800bba0:	6013      	str	r3, [r2, #0]
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bba6:	4613      	mov	r3, r2
 800bba8:	009b      	lsls	r3, r3, #2
 800bbaa:	4413      	add	r3, r2
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	4a10      	ldr	r2, [pc, #64]	; (800bbf0 <xTaskPriorityInherit+0xc8>)
 800bbb0:	441a      	add	r2, r3
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	3304      	adds	r3, #4
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	4610      	mov	r0, r2
 800bbba:	f7fe f8a8 	bl	8009d0e <vListInsertEnd>
 800bbbe:	e004      	b.n	800bbca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bbc0:	4b0a      	ldr	r3, [pc, #40]	; (800bbec <xTaskPriorityInherit+0xc4>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	60fb      	str	r3, [r7, #12]
 800bbce:	e008      	b.n	800bbe2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbd4:	4b05      	ldr	r3, [pc, #20]	; (800bbec <xTaskPriorityInherit+0xc4>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d201      	bcs.n	800bbe2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
	}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3710      	adds	r7, #16
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}
 800bbec:	200018d4 	.word	0x200018d4
 800bbf0:	200018d8 	.word	0x200018d8
 800bbf4:	20001db0 	.word	0x20001db0

0800bbf8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bc04:	2300      	movs	r3, #0
 800bc06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d056      	beq.n	800bcbc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bc0e:	4b2e      	ldr	r3, [pc, #184]	; (800bcc8 <xTaskPriorityDisinherit+0xd0>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	693a      	ldr	r2, [r7, #16]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d00a      	beq.n	800bc2e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc1c:	f383 8811 	msr	BASEPRI, r3
 800bc20:	f3bf 8f6f 	isb	sy
 800bc24:	f3bf 8f4f 	dsb	sy
 800bc28:	60fb      	str	r3, [r7, #12]
}
 800bc2a:	bf00      	nop
 800bc2c:	e7fe      	b.n	800bc2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d10a      	bne.n	800bc4c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bc36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc3a:	f383 8811 	msr	BASEPRI, r3
 800bc3e:	f3bf 8f6f 	isb	sy
 800bc42:	f3bf 8f4f 	dsb	sy
 800bc46:	60bb      	str	r3, [r7, #8]
}
 800bc48:	bf00      	nop
 800bc4a:	e7fe      	b.n	800bc4a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc50:	1e5a      	subs	r2, r3, #1
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d02c      	beq.n	800bcbc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d128      	bne.n	800bcbc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	3304      	adds	r3, #4
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7fe f8aa 	bl	8009dc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc80:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc8c:	4b0f      	ldr	r3, [pc, #60]	; (800bccc <xTaskPriorityDisinherit+0xd4>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d903      	bls.n	800bc9c <xTaskPriorityDisinherit+0xa4>
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc98:	4a0c      	ldr	r2, [pc, #48]	; (800bccc <xTaskPriorityDisinherit+0xd4>)
 800bc9a:	6013      	str	r3, [r2, #0]
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bca0:	4613      	mov	r3, r2
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	4413      	add	r3, r2
 800bca6:	009b      	lsls	r3, r3, #2
 800bca8:	4a09      	ldr	r2, [pc, #36]	; (800bcd0 <xTaskPriorityDisinherit+0xd8>)
 800bcaa:	441a      	add	r2, r3
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	3304      	adds	r3, #4
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	4610      	mov	r0, r2
 800bcb4:	f7fe f82b 	bl	8009d0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bcbc:	697b      	ldr	r3, [r7, #20]
	}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3718      	adds	r7, #24
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
 800bcc6:	bf00      	nop
 800bcc8:	200018d4 	.word	0x200018d4
 800bccc:	20001db0 	.word	0x20001db0
 800bcd0:	200018d8 	.word	0x200018d8

0800bcd4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b088      	sub	sp, #32
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bce2:	2301      	movs	r3, #1
 800bce4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d06a      	beq.n	800bdc2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bcec:	69bb      	ldr	r3, [r7, #24]
 800bcee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d10a      	bne.n	800bd0a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bcf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf8:	f383 8811 	msr	BASEPRI, r3
 800bcfc:	f3bf 8f6f 	isb	sy
 800bd00:	f3bf 8f4f 	dsb	sy
 800bd04:	60fb      	str	r3, [r7, #12]
}
 800bd06:	bf00      	nop
 800bd08:	e7fe      	b.n	800bd08 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd0e:	683a      	ldr	r2, [r7, #0]
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d902      	bls.n	800bd1a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	61fb      	str	r3, [r7, #28]
 800bd18:	e002      	b.n	800bd20 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bd1a:	69bb      	ldr	r3, [r7, #24]
 800bd1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd1e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bd20:	69bb      	ldr	r3, [r7, #24]
 800bd22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd24:	69fa      	ldr	r2, [r7, #28]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d04b      	beq.n	800bdc2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bd2a:	69bb      	ldr	r3, [r7, #24]
 800bd2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd2e:	697a      	ldr	r2, [r7, #20]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d146      	bne.n	800bdc2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bd34:	4b25      	ldr	r3, [pc, #148]	; (800bdcc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	69ba      	ldr	r2, [r7, #24]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d10a      	bne.n	800bd54 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd42:	f383 8811 	msr	BASEPRI, r3
 800bd46:	f3bf 8f6f 	isb	sy
 800bd4a:	f3bf 8f4f 	dsb	sy
 800bd4e:	60bb      	str	r3, [r7, #8]
}
 800bd50:	bf00      	nop
 800bd52:	e7fe      	b.n	800bd52 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bd54:	69bb      	ldr	r3, [r7, #24]
 800bd56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd58:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bd5a:	69bb      	ldr	r3, [r7, #24]
 800bd5c:	69fa      	ldr	r2, [r7, #28]
 800bd5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bd60:	69bb      	ldr	r3, [r7, #24]
 800bd62:	699b      	ldr	r3, [r3, #24]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	db04      	blt.n	800bd72 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd6e:	69bb      	ldr	r3, [r7, #24]
 800bd70:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bd72:	69bb      	ldr	r3, [r7, #24]
 800bd74:	6959      	ldr	r1, [r3, #20]
 800bd76:	693a      	ldr	r2, [r7, #16]
 800bd78:	4613      	mov	r3, r2
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	4413      	add	r3, r2
 800bd7e:	009b      	lsls	r3, r3, #2
 800bd80:	4a13      	ldr	r2, [pc, #76]	; (800bdd0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bd82:	4413      	add	r3, r2
 800bd84:	4299      	cmp	r1, r3
 800bd86:	d11c      	bne.n	800bdc2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	3304      	adds	r3, #4
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7fe f81b 	bl	8009dc8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bd92:	69bb      	ldr	r3, [r7, #24]
 800bd94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd96:	4b0f      	ldr	r3, [pc, #60]	; (800bdd4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d903      	bls.n	800bda6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800bd9e:	69bb      	ldr	r3, [r7, #24]
 800bda0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda2:	4a0c      	ldr	r2, [pc, #48]	; (800bdd4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bda4:	6013      	str	r3, [r2, #0]
 800bda6:	69bb      	ldr	r3, [r7, #24]
 800bda8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdaa:	4613      	mov	r3, r2
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	4413      	add	r3, r2
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	4a07      	ldr	r2, [pc, #28]	; (800bdd0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bdb4:	441a      	add	r2, r3
 800bdb6:	69bb      	ldr	r3, [r7, #24]
 800bdb8:	3304      	adds	r3, #4
 800bdba:	4619      	mov	r1, r3
 800bdbc:	4610      	mov	r0, r2
 800bdbe:	f7fd ffa6 	bl	8009d0e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bdc2:	bf00      	nop
 800bdc4:	3720      	adds	r7, #32
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	200018d4 	.word	0x200018d4
 800bdd0:	200018d8 	.word	0x200018d8
 800bdd4:	20001db0 	.word	0x20001db0

0800bdd8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bdd8:	b480      	push	{r7}
 800bdda:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bddc:	4b07      	ldr	r3, [pc, #28]	; (800bdfc <pvTaskIncrementMutexHeldCount+0x24>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d004      	beq.n	800bdee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bde4:	4b05      	ldr	r3, [pc, #20]	; (800bdfc <pvTaskIncrementMutexHeldCount+0x24>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bdea:	3201      	adds	r2, #1
 800bdec:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bdee:	4b03      	ldr	r3, [pc, #12]	; (800bdfc <pvTaskIncrementMutexHeldCount+0x24>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
	}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr
 800bdfc:	200018d4 	.word	0x200018d4

0800be00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800be0a:	4b21      	ldr	r3, [pc, #132]	; (800be90 <prvAddCurrentTaskToDelayedList+0x90>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be10:	4b20      	ldr	r3, [pc, #128]	; (800be94 <prvAddCurrentTaskToDelayedList+0x94>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	3304      	adds	r3, #4
 800be16:	4618      	mov	r0, r3
 800be18:	f7fd ffd6 	bl	8009dc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be22:	d10a      	bne.n	800be3a <prvAddCurrentTaskToDelayedList+0x3a>
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d007      	beq.n	800be3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be2a:	4b1a      	ldr	r3, [pc, #104]	; (800be94 <prvAddCurrentTaskToDelayedList+0x94>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	3304      	adds	r3, #4
 800be30:	4619      	mov	r1, r3
 800be32:	4819      	ldr	r0, [pc, #100]	; (800be98 <prvAddCurrentTaskToDelayedList+0x98>)
 800be34:	f7fd ff6b 	bl	8009d0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800be38:	e026      	b.n	800be88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800be3a:	68fa      	ldr	r2, [r7, #12]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	4413      	add	r3, r2
 800be40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800be42:	4b14      	ldr	r3, [pc, #80]	; (800be94 <prvAddCurrentTaskToDelayedList+0x94>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	68ba      	ldr	r2, [r7, #8]
 800be48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800be4a:	68ba      	ldr	r2, [r7, #8]
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	429a      	cmp	r2, r3
 800be50:	d209      	bcs.n	800be66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be52:	4b12      	ldr	r3, [pc, #72]	; (800be9c <prvAddCurrentTaskToDelayedList+0x9c>)
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	4b0f      	ldr	r3, [pc, #60]	; (800be94 <prvAddCurrentTaskToDelayedList+0x94>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	3304      	adds	r3, #4
 800be5c:	4619      	mov	r1, r3
 800be5e:	4610      	mov	r0, r2
 800be60:	f7fd ff79 	bl	8009d56 <vListInsert>
}
 800be64:	e010      	b.n	800be88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be66:	4b0e      	ldr	r3, [pc, #56]	; (800bea0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	4b0a      	ldr	r3, [pc, #40]	; (800be94 <prvAddCurrentTaskToDelayedList+0x94>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	3304      	adds	r3, #4
 800be70:	4619      	mov	r1, r3
 800be72:	4610      	mov	r0, r2
 800be74:	f7fd ff6f 	bl	8009d56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be78:	4b0a      	ldr	r3, [pc, #40]	; (800bea4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	68ba      	ldr	r2, [r7, #8]
 800be7e:	429a      	cmp	r2, r3
 800be80:	d202      	bcs.n	800be88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800be82:	4a08      	ldr	r2, [pc, #32]	; (800bea4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	6013      	str	r3, [r2, #0]
}
 800be88:	bf00      	nop
 800be8a:	3710      	adds	r7, #16
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	20001dac 	.word	0x20001dac
 800be94:	200018d4 	.word	0x200018d4
 800be98:	20001d94 	.word	0x20001d94
 800be9c:	20001d64 	.word	0x20001d64
 800bea0:	20001d60 	.word	0x20001d60
 800bea4:	20001dc8 	.word	0x20001dc8

0800bea8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b08a      	sub	sp, #40	; 0x28
 800beac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800beae:	2300      	movs	r3, #0
 800beb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800beb2:	f000 fb07 	bl	800c4c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800beb6:	4b1c      	ldr	r3, [pc, #112]	; (800bf28 <xTimerCreateTimerTask+0x80>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d021      	beq.n	800bf02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bebe:	2300      	movs	r3, #0
 800bec0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bec2:	2300      	movs	r3, #0
 800bec4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bec6:	1d3a      	adds	r2, r7, #4
 800bec8:	f107 0108 	add.w	r1, r7, #8
 800becc:	f107 030c 	add.w	r3, r7, #12
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7fd fed5 	bl	8009c80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bed6:	6879      	ldr	r1, [r7, #4]
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	68fa      	ldr	r2, [r7, #12]
 800bedc:	9202      	str	r2, [sp, #8]
 800bede:	9301      	str	r3, [sp, #4]
 800bee0:	2302      	movs	r3, #2
 800bee2:	9300      	str	r3, [sp, #0]
 800bee4:	2300      	movs	r3, #0
 800bee6:	460a      	mov	r2, r1
 800bee8:	4910      	ldr	r1, [pc, #64]	; (800bf2c <xTimerCreateTimerTask+0x84>)
 800beea:	4811      	ldr	r0, [pc, #68]	; (800bf30 <xTimerCreateTimerTask+0x88>)
 800beec:	f7fe ffe0 	bl	800aeb0 <xTaskCreateStatic>
 800bef0:	4603      	mov	r3, r0
 800bef2:	4a10      	ldr	r2, [pc, #64]	; (800bf34 <xTimerCreateTimerTask+0x8c>)
 800bef4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bef6:	4b0f      	ldr	r3, [pc, #60]	; (800bf34 <xTimerCreateTimerTask+0x8c>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d001      	beq.n	800bf02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800befe:	2301      	movs	r3, #1
 800bf00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d10a      	bne.n	800bf1e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bf08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0c:	f383 8811 	msr	BASEPRI, r3
 800bf10:	f3bf 8f6f 	isb	sy
 800bf14:	f3bf 8f4f 	dsb	sy
 800bf18:	613b      	str	r3, [r7, #16]
}
 800bf1a:	bf00      	nop
 800bf1c:	e7fe      	b.n	800bf1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bf1e:	697b      	ldr	r3, [r7, #20]
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3718      	adds	r7, #24
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}
 800bf28:	20001e04 	.word	0x20001e04
 800bf2c:	0800ed44 	.word	0x0800ed44
 800bf30:	0800c06d 	.word	0x0800c06d
 800bf34:	20001e08 	.word	0x20001e08

0800bf38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b08a      	sub	sp, #40	; 0x28
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	60b9      	str	r1, [r7, #8]
 800bf42:	607a      	str	r2, [r7, #4]
 800bf44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bf46:	2300      	movs	r3, #0
 800bf48:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d10a      	bne.n	800bf66 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bf50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf54:	f383 8811 	msr	BASEPRI, r3
 800bf58:	f3bf 8f6f 	isb	sy
 800bf5c:	f3bf 8f4f 	dsb	sy
 800bf60:	623b      	str	r3, [r7, #32]
}
 800bf62:	bf00      	nop
 800bf64:	e7fe      	b.n	800bf64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bf66:	4b1a      	ldr	r3, [pc, #104]	; (800bfd0 <xTimerGenericCommand+0x98>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d02a      	beq.n	800bfc4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	2b05      	cmp	r3, #5
 800bf7e:	dc18      	bgt.n	800bfb2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bf80:	f7ff fdb4 	bl	800baec <xTaskGetSchedulerState>
 800bf84:	4603      	mov	r3, r0
 800bf86:	2b02      	cmp	r3, #2
 800bf88:	d109      	bne.n	800bf9e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bf8a:	4b11      	ldr	r3, [pc, #68]	; (800bfd0 <xTimerGenericCommand+0x98>)
 800bf8c:	6818      	ldr	r0, [r3, #0]
 800bf8e:	f107 0110 	add.w	r1, r7, #16
 800bf92:	2300      	movs	r3, #0
 800bf94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf96:	f7fe f8e9 	bl	800a16c <xQueueGenericSend>
 800bf9a:	6278      	str	r0, [r7, #36]	; 0x24
 800bf9c:	e012      	b.n	800bfc4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bf9e:	4b0c      	ldr	r3, [pc, #48]	; (800bfd0 <xTimerGenericCommand+0x98>)
 800bfa0:	6818      	ldr	r0, [r3, #0]
 800bfa2:	f107 0110 	add.w	r1, r7, #16
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	f7fe f8df 	bl	800a16c <xQueueGenericSend>
 800bfae:	6278      	str	r0, [r7, #36]	; 0x24
 800bfb0:	e008      	b.n	800bfc4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bfb2:	4b07      	ldr	r3, [pc, #28]	; (800bfd0 <xTimerGenericCommand+0x98>)
 800bfb4:	6818      	ldr	r0, [r3, #0]
 800bfb6:	f107 0110 	add.w	r1, r7, #16
 800bfba:	2300      	movs	r3, #0
 800bfbc:	683a      	ldr	r2, [r7, #0]
 800bfbe:	f7fe f9d3 	bl	800a368 <xQueueGenericSendFromISR>
 800bfc2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3728      	adds	r7, #40	; 0x28
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	20001e04 	.word	0x20001e04

0800bfd4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b088      	sub	sp, #32
 800bfd8:	af02      	add	r7, sp, #8
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfde:	4b22      	ldr	r3, [pc, #136]	; (800c068 <prvProcessExpiredTimer+0x94>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	68db      	ldr	r3, [r3, #12]
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	3304      	adds	r3, #4
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7fd feeb 	bl	8009dc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bff8:	f003 0304 	and.w	r3, r3, #4
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d022      	beq.n	800c046 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	699a      	ldr	r2, [r3, #24]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	18d1      	adds	r1, r2, r3
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	683a      	ldr	r2, [r7, #0]
 800c00c:	6978      	ldr	r0, [r7, #20]
 800c00e:	f000 f8d1 	bl	800c1b4 <prvInsertTimerInActiveList>
 800c012:	4603      	mov	r3, r0
 800c014:	2b00      	cmp	r3, #0
 800c016:	d01f      	beq.n	800c058 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c018:	2300      	movs	r3, #0
 800c01a:	9300      	str	r3, [sp, #0]
 800c01c:	2300      	movs	r3, #0
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	2100      	movs	r1, #0
 800c022:	6978      	ldr	r0, [r7, #20]
 800c024:	f7ff ff88 	bl	800bf38 <xTimerGenericCommand>
 800c028:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d113      	bne.n	800c058 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c034:	f383 8811 	msr	BASEPRI, r3
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	60fb      	str	r3, [r7, #12]
}
 800c042:	bf00      	nop
 800c044:	e7fe      	b.n	800c044 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c04c:	f023 0301 	bic.w	r3, r3, #1
 800c050:	b2da      	uxtb	r2, r3
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	6a1b      	ldr	r3, [r3, #32]
 800c05c:	6978      	ldr	r0, [r7, #20]
 800c05e:	4798      	blx	r3
}
 800c060:	bf00      	nop
 800c062:	3718      	adds	r7, #24
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}
 800c068:	20001dfc 	.word	0x20001dfc

0800c06c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b084      	sub	sp, #16
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c074:	f107 0308 	add.w	r3, r7, #8
 800c078:	4618      	mov	r0, r3
 800c07a:	f000 f857 	bl	800c12c <prvGetNextExpireTime>
 800c07e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	4619      	mov	r1, r3
 800c084:	68f8      	ldr	r0, [r7, #12]
 800c086:	f000 f803 	bl	800c090 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c08a:	f000 f8d5 	bl	800c238 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c08e:	e7f1      	b.n	800c074 <prvTimerTask+0x8>

0800c090 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b084      	sub	sp, #16
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c09a:	f7ff f945 	bl	800b328 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c09e:	f107 0308 	add.w	r3, r7, #8
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f000 f866 	bl	800c174 <prvSampleTimeNow>
 800c0a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d130      	bne.n	800c112 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d10a      	bne.n	800c0cc <prvProcessTimerOrBlockTask+0x3c>
 800c0b6:	687a      	ldr	r2, [r7, #4]
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d806      	bhi.n	800c0cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c0be:	f7ff f941 	bl	800b344 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c0c2:	68f9      	ldr	r1, [r7, #12]
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f7ff ff85 	bl	800bfd4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c0ca:	e024      	b.n	800c116 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d008      	beq.n	800c0e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c0d2:	4b13      	ldr	r3, [pc, #76]	; (800c120 <prvProcessTimerOrBlockTask+0x90>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d101      	bne.n	800c0e0 <prvProcessTimerOrBlockTask+0x50>
 800c0dc:	2301      	movs	r3, #1
 800c0de:	e000      	b.n	800c0e2 <prvProcessTimerOrBlockTask+0x52>
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c0e4:	4b0f      	ldr	r3, [pc, #60]	; (800c124 <prvProcessTimerOrBlockTask+0x94>)
 800c0e6:	6818      	ldr	r0, [r3, #0]
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	1ad3      	subs	r3, r2, r3
 800c0ee:	683a      	ldr	r2, [r7, #0]
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	f7fe fea9 	bl	800ae48 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c0f6:	f7ff f925 	bl	800b344 <xTaskResumeAll>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d10a      	bne.n	800c116 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c100:	4b09      	ldr	r3, [pc, #36]	; (800c128 <prvProcessTimerOrBlockTask+0x98>)
 800c102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c106:	601a      	str	r2, [r3, #0]
 800c108:	f3bf 8f4f 	dsb	sy
 800c10c:	f3bf 8f6f 	isb	sy
}
 800c110:	e001      	b.n	800c116 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c112:	f7ff f917 	bl	800b344 <xTaskResumeAll>
}
 800c116:	bf00      	nop
 800c118:	3710      	adds	r7, #16
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	20001e00 	.word	0x20001e00
 800c124:	20001e04 	.word	0x20001e04
 800c128:	e000ed04 	.word	0xe000ed04

0800c12c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c12c:	b480      	push	{r7}
 800c12e:	b085      	sub	sp, #20
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c134:	4b0e      	ldr	r3, [pc, #56]	; (800c170 <prvGetNextExpireTime+0x44>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d101      	bne.n	800c142 <prvGetNextExpireTime+0x16>
 800c13e:	2201      	movs	r2, #1
 800c140:	e000      	b.n	800c144 <prvGetNextExpireTime+0x18>
 800c142:	2200      	movs	r2, #0
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d105      	bne.n	800c15c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c150:	4b07      	ldr	r3, [pc, #28]	; (800c170 <prvGetNextExpireTime+0x44>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	60fb      	str	r3, [r7, #12]
 800c15a:	e001      	b.n	800c160 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c15c:	2300      	movs	r3, #0
 800c15e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c160:	68fb      	ldr	r3, [r7, #12]
}
 800c162:	4618      	mov	r0, r3
 800c164:	3714      	adds	r7, #20
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr
 800c16e:	bf00      	nop
 800c170:	20001dfc 	.word	0x20001dfc

0800c174 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c17c:	f7ff f980 	bl	800b480 <xTaskGetTickCount>
 800c180:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c182:	4b0b      	ldr	r3, [pc, #44]	; (800c1b0 <prvSampleTimeNow+0x3c>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	68fa      	ldr	r2, [r7, #12]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d205      	bcs.n	800c198 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c18c:	f000 f936 	bl	800c3fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2201      	movs	r2, #1
 800c194:	601a      	str	r2, [r3, #0]
 800c196:	e002      	b.n	800c19e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2200      	movs	r2, #0
 800c19c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c19e:	4a04      	ldr	r2, [pc, #16]	; (800c1b0 <prvSampleTimeNow+0x3c>)
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3710      	adds	r7, #16
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	20001e0c 	.word	0x20001e0c

0800c1b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b086      	sub	sp, #24
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	607a      	str	r2, [r7, #4]
 800c1c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	68ba      	ldr	r2, [r7, #8]
 800c1ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	68fa      	ldr	r2, [r7, #12]
 800c1d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c1d2:	68ba      	ldr	r2, [r7, #8]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d812      	bhi.n	800c200 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	1ad2      	subs	r2, r2, r3
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	699b      	ldr	r3, [r3, #24]
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d302      	bcc.n	800c1ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	617b      	str	r3, [r7, #20]
 800c1ec:	e01b      	b.n	800c226 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c1ee:	4b10      	ldr	r3, [pc, #64]	; (800c230 <prvInsertTimerInActiveList+0x7c>)
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	3304      	adds	r3, #4
 800c1f6:	4619      	mov	r1, r3
 800c1f8:	4610      	mov	r0, r2
 800c1fa:	f7fd fdac 	bl	8009d56 <vListInsert>
 800c1fe:	e012      	b.n	800c226 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	429a      	cmp	r2, r3
 800c206:	d206      	bcs.n	800c216 <prvInsertTimerInActiveList+0x62>
 800c208:	68ba      	ldr	r2, [r7, #8]
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d302      	bcc.n	800c216 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c210:	2301      	movs	r3, #1
 800c212:	617b      	str	r3, [r7, #20]
 800c214:	e007      	b.n	800c226 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c216:	4b07      	ldr	r3, [pc, #28]	; (800c234 <prvInsertTimerInActiveList+0x80>)
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	3304      	adds	r3, #4
 800c21e:	4619      	mov	r1, r3
 800c220:	4610      	mov	r0, r2
 800c222:	f7fd fd98 	bl	8009d56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c226:	697b      	ldr	r3, [r7, #20]
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3718      	adds	r7, #24
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}
 800c230:	20001e00 	.word	0x20001e00
 800c234:	20001dfc 	.word	0x20001dfc

0800c238 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b08e      	sub	sp, #56	; 0x38
 800c23c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c23e:	e0ca      	b.n	800c3d6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2b00      	cmp	r3, #0
 800c244:	da18      	bge.n	800c278 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c246:	1d3b      	adds	r3, r7, #4
 800c248:	3304      	adds	r3, #4
 800c24a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d10a      	bne.n	800c268 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c256:	f383 8811 	msr	BASEPRI, r3
 800c25a:	f3bf 8f6f 	isb	sy
 800c25e:	f3bf 8f4f 	dsb	sy
 800c262:	61fb      	str	r3, [r7, #28]
}
 800c264:	bf00      	nop
 800c266:	e7fe      	b.n	800c266 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c26e:	6850      	ldr	r0, [r2, #4]
 800c270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c272:	6892      	ldr	r2, [r2, #8]
 800c274:	4611      	mov	r1, r2
 800c276:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	f2c0 80aa 	blt.w	800c3d4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c286:	695b      	ldr	r3, [r3, #20]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d004      	beq.n	800c296 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28e:	3304      	adds	r3, #4
 800c290:	4618      	mov	r0, r3
 800c292:	f7fd fd99 	bl	8009dc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c296:	463b      	mov	r3, r7
 800c298:	4618      	mov	r0, r3
 800c29a:	f7ff ff6b 	bl	800c174 <prvSampleTimeNow>
 800c29e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2b09      	cmp	r3, #9
 800c2a4:	f200 8097 	bhi.w	800c3d6 <prvProcessReceivedCommands+0x19e>
 800c2a8:	a201      	add	r2, pc, #4	; (adr r2, 800c2b0 <prvProcessReceivedCommands+0x78>)
 800c2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ae:	bf00      	nop
 800c2b0:	0800c2d9 	.word	0x0800c2d9
 800c2b4:	0800c2d9 	.word	0x0800c2d9
 800c2b8:	0800c2d9 	.word	0x0800c2d9
 800c2bc:	0800c34d 	.word	0x0800c34d
 800c2c0:	0800c361 	.word	0x0800c361
 800c2c4:	0800c3ab 	.word	0x0800c3ab
 800c2c8:	0800c2d9 	.word	0x0800c2d9
 800c2cc:	0800c2d9 	.word	0x0800c2d9
 800c2d0:	0800c34d 	.word	0x0800c34d
 800c2d4:	0800c361 	.word	0x0800c361
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2de:	f043 0301 	orr.w	r3, r3, #1
 800c2e2:	b2da      	uxtb	r2, r3
 800c2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c2ea:	68ba      	ldr	r2, [r7, #8]
 800c2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ee:	699b      	ldr	r3, [r3, #24]
 800c2f0:	18d1      	adds	r1, r2, r3
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2f8:	f7ff ff5c 	bl	800c1b4 <prvInsertTimerInActiveList>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d069      	beq.n	800c3d6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c304:	6a1b      	ldr	r3, [r3, #32]
 800c306:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c308:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c310:	f003 0304 	and.w	r3, r3, #4
 800c314:	2b00      	cmp	r3, #0
 800c316:	d05e      	beq.n	800c3d6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c318:	68ba      	ldr	r2, [r7, #8]
 800c31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31c:	699b      	ldr	r3, [r3, #24]
 800c31e:	441a      	add	r2, r3
 800c320:	2300      	movs	r3, #0
 800c322:	9300      	str	r3, [sp, #0]
 800c324:	2300      	movs	r3, #0
 800c326:	2100      	movs	r1, #0
 800c328:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c32a:	f7ff fe05 	bl	800bf38 <xTimerGenericCommand>
 800c32e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c330:	6a3b      	ldr	r3, [r7, #32]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d14f      	bne.n	800c3d6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c33a:	f383 8811 	msr	BASEPRI, r3
 800c33e:	f3bf 8f6f 	isb	sy
 800c342:	f3bf 8f4f 	dsb	sy
 800c346:	61bb      	str	r3, [r7, #24]
}
 800c348:	bf00      	nop
 800c34a:	e7fe      	b.n	800c34a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c352:	f023 0301 	bic.w	r3, r3, #1
 800c356:	b2da      	uxtb	r2, r3
 800c358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c35a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c35e:	e03a      	b.n	800c3d6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c362:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c366:	f043 0301 	orr.w	r3, r3, #1
 800c36a:	b2da      	uxtb	r2, r3
 800c36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c372:	68ba      	ldr	r2, [r7, #8]
 800c374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c376:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37a:	699b      	ldr	r3, [r3, #24]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d10a      	bne.n	800c396 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c384:	f383 8811 	msr	BASEPRI, r3
 800c388:	f3bf 8f6f 	isb	sy
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	617b      	str	r3, [r7, #20]
}
 800c392:	bf00      	nop
 800c394:	e7fe      	b.n	800c394 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c398:	699a      	ldr	r2, [r3, #24]
 800c39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c39c:	18d1      	adds	r1, r2, r3
 800c39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3a4:	f7ff ff06 	bl	800c1b4 <prvInsertTimerInActiveList>
					break;
 800c3a8:	e015      	b.n	800c3d6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3b0:	f003 0302 	and.w	r3, r3, #2
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d103      	bne.n	800c3c0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c3b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3ba:	f000 fbe1 	bl	800cb80 <vPortFree>
 800c3be:	e00a      	b.n	800c3d6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3c6:	f023 0301 	bic.w	r3, r3, #1
 800c3ca:	b2da      	uxtb	r2, r3
 800c3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c3d2:	e000      	b.n	800c3d6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c3d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c3d6:	4b08      	ldr	r3, [pc, #32]	; (800c3f8 <prvProcessReceivedCommands+0x1c0>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	1d39      	adds	r1, r7, #4
 800c3dc:	2200      	movs	r2, #0
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7fe f8ea 	bl	800a5b8 <xQueueReceive>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	f47f af2a 	bne.w	800c240 <prvProcessReceivedCommands+0x8>
	}
}
 800c3ec:	bf00      	nop
 800c3ee:	bf00      	nop
 800c3f0:	3730      	adds	r7, #48	; 0x30
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}
 800c3f6:	bf00      	nop
 800c3f8:	20001e04 	.word	0x20001e04

0800c3fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b088      	sub	sp, #32
 800c400:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c402:	e048      	b.n	800c496 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c404:	4b2d      	ldr	r3, [pc, #180]	; (800c4bc <prvSwitchTimerLists+0xc0>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	68db      	ldr	r3, [r3, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c40e:	4b2b      	ldr	r3, [pc, #172]	; (800c4bc <prvSwitchTimerLists+0xc0>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	68db      	ldr	r3, [r3, #12]
 800c414:	68db      	ldr	r3, [r3, #12]
 800c416:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	3304      	adds	r3, #4
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7fd fcd3 	bl	8009dc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	6a1b      	ldr	r3, [r3, #32]
 800c426:	68f8      	ldr	r0, [r7, #12]
 800c428:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c430:	f003 0304 	and.w	r3, r3, #4
 800c434:	2b00      	cmp	r3, #0
 800c436:	d02e      	beq.n	800c496 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	699b      	ldr	r3, [r3, #24]
 800c43c:	693a      	ldr	r2, [r7, #16]
 800c43e:	4413      	add	r3, r2
 800c440:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c442:	68ba      	ldr	r2, [r7, #8]
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	429a      	cmp	r2, r3
 800c448:	d90e      	bls.n	800c468 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	68ba      	ldr	r2, [r7, #8]
 800c44e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	68fa      	ldr	r2, [r7, #12]
 800c454:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c456:	4b19      	ldr	r3, [pc, #100]	; (800c4bc <prvSwitchTimerLists+0xc0>)
 800c458:	681a      	ldr	r2, [r3, #0]
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	3304      	adds	r3, #4
 800c45e:	4619      	mov	r1, r3
 800c460:	4610      	mov	r0, r2
 800c462:	f7fd fc78 	bl	8009d56 <vListInsert>
 800c466:	e016      	b.n	800c496 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c468:	2300      	movs	r3, #0
 800c46a:	9300      	str	r3, [sp, #0]
 800c46c:	2300      	movs	r3, #0
 800c46e:	693a      	ldr	r2, [r7, #16]
 800c470:	2100      	movs	r1, #0
 800c472:	68f8      	ldr	r0, [r7, #12]
 800c474:	f7ff fd60 	bl	800bf38 <xTimerGenericCommand>
 800c478:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d10a      	bne.n	800c496 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c484:	f383 8811 	msr	BASEPRI, r3
 800c488:	f3bf 8f6f 	isb	sy
 800c48c:	f3bf 8f4f 	dsb	sy
 800c490:	603b      	str	r3, [r7, #0]
}
 800c492:	bf00      	nop
 800c494:	e7fe      	b.n	800c494 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c496:	4b09      	ldr	r3, [pc, #36]	; (800c4bc <prvSwitchTimerLists+0xc0>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d1b1      	bne.n	800c404 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c4a0:	4b06      	ldr	r3, [pc, #24]	; (800c4bc <prvSwitchTimerLists+0xc0>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c4a6:	4b06      	ldr	r3, [pc, #24]	; (800c4c0 <prvSwitchTimerLists+0xc4>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4a04      	ldr	r2, [pc, #16]	; (800c4bc <prvSwitchTimerLists+0xc0>)
 800c4ac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c4ae:	4a04      	ldr	r2, [pc, #16]	; (800c4c0 <prvSwitchTimerLists+0xc4>)
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	6013      	str	r3, [r2, #0]
}
 800c4b4:	bf00      	nop
 800c4b6:	3718      	adds	r7, #24
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}
 800c4bc:	20001dfc 	.word	0x20001dfc
 800c4c0:	20001e00 	.word	0x20001e00

0800c4c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c4ca:	f000 f96b 	bl	800c7a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c4ce:	4b15      	ldr	r3, [pc, #84]	; (800c524 <prvCheckForValidListAndQueue+0x60>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d120      	bne.n	800c518 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c4d6:	4814      	ldr	r0, [pc, #80]	; (800c528 <prvCheckForValidListAndQueue+0x64>)
 800c4d8:	f7fd fbec 	bl	8009cb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c4dc:	4813      	ldr	r0, [pc, #76]	; (800c52c <prvCheckForValidListAndQueue+0x68>)
 800c4de:	f7fd fbe9 	bl	8009cb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c4e2:	4b13      	ldr	r3, [pc, #76]	; (800c530 <prvCheckForValidListAndQueue+0x6c>)
 800c4e4:	4a10      	ldr	r2, [pc, #64]	; (800c528 <prvCheckForValidListAndQueue+0x64>)
 800c4e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c4e8:	4b12      	ldr	r3, [pc, #72]	; (800c534 <prvCheckForValidListAndQueue+0x70>)
 800c4ea:	4a10      	ldr	r2, [pc, #64]	; (800c52c <prvCheckForValidListAndQueue+0x68>)
 800c4ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	9300      	str	r3, [sp, #0]
 800c4f2:	4b11      	ldr	r3, [pc, #68]	; (800c538 <prvCheckForValidListAndQueue+0x74>)
 800c4f4:	4a11      	ldr	r2, [pc, #68]	; (800c53c <prvCheckForValidListAndQueue+0x78>)
 800c4f6:	2110      	movs	r1, #16
 800c4f8:	200a      	movs	r0, #10
 800c4fa:	f7fd fcf7 	bl	8009eec <xQueueGenericCreateStatic>
 800c4fe:	4603      	mov	r3, r0
 800c500:	4a08      	ldr	r2, [pc, #32]	; (800c524 <prvCheckForValidListAndQueue+0x60>)
 800c502:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c504:	4b07      	ldr	r3, [pc, #28]	; (800c524 <prvCheckForValidListAndQueue+0x60>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d005      	beq.n	800c518 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c50c:	4b05      	ldr	r3, [pc, #20]	; (800c524 <prvCheckForValidListAndQueue+0x60>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	490b      	ldr	r1, [pc, #44]	; (800c540 <prvCheckForValidListAndQueue+0x7c>)
 800c512:	4618      	mov	r0, r3
 800c514:	f7fe fc44 	bl	800ada0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c518:	f000 f974 	bl	800c804 <vPortExitCritical>
}
 800c51c:	bf00      	nop
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	20001e04 	.word	0x20001e04
 800c528:	20001dd4 	.word	0x20001dd4
 800c52c:	20001de8 	.word	0x20001de8
 800c530:	20001dfc 	.word	0x20001dfc
 800c534:	20001e00 	.word	0x20001e00
 800c538:	20001eb0 	.word	0x20001eb0
 800c53c:	20001e10 	.word	0x20001e10
 800c540:	0800ed4c 	.word	0x0800ed4c

0800c544 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c544:	b480      	push	{r7}
 800c546:	b085      	sub	sp, #20
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	3b04      	subs	r3, #4
 800c554:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c55c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	3b04      	subs	r3, #4
 800c562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	f023 0201 	bic.w	r2, r3, #1
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	3b04      	subs	r3, #4
 800c572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c574:	4a0c      	ldr	r2, [pc, #48]	; (800c5a8 <pxPortInitialiseStack+0x64>)
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	3b14      	subs	r3, #20
 800c57e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c580:	687a      	ldr	r2, [r7, #4]
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	3b04      	subs	r3, #4
 800c58a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f06f 0202 	mvn.w	r2, #2
 800c592:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	3b20      	subs	r3, #32
 800c598:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c59a:	68fb      	ldr	r3, [r7, #12]
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3714      	adds	r7, #20
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr
 800c5a8:	0800c5ad 	.word	0x0800c5ad

0800c5ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b085      	sub	sp, #20
 800c5b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c5b6:	4b12      	ldr	r3, [pc, #72]	; (800c600 <prvTaskExitError+0x54>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5be:	d00a      	beq.n	800c5d6 <prvTaskExitError+0x2a>
	__asm volatile
 800c5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c4:	f383 8811 	msr	BASEPRI, r3
 800c5c8:	f3bf 8f6f 	isb	sy
 800c5cc:	f3bf 8f4f 	dsb	sy
 800c5d0:	60fb      	str	r3, [r7, #12]
}
 800c5d2:	bf00      	nop
 800c5d4:	e7fe      	b.n	800c5d4 <prvTaskExitError+0x28>
	__asm volatile
 800c5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5da:	f383 8811 	msr	BASEPRI, r3
 800c5de:	f3bf 8f6f 	isb	sy
 800c5e2:	f3bf 8f4f 	dsb	sy
 800c5e6:	60bb      	str	r3, [r7, #8]
}
 800c5e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c5ea:	bf00      	nop
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d0fc      	beq.n	800c5ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c5f2:	bf00      	nop
 800c5f4:	bf00      	nop
 800c5f6:	3714      	adds	r7, #20
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr
 800c600:	2000000c 	.word	0x2000000c
	...

0800c610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c610:	4b07      	ldr	r3, [pc, #28]	; (800c630 <pxCurrentTCBConst2>)
 800c612:	6819      	ldr	r1, [r3, #0]
 800c614:	6808      	ldr	r0, [r1, #0]
 800c616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61a:	f380 8809 	msr	PSP, r0
 800c61e:	f3bf 8f6f 	isb	sy
 800c622:	f04f 0000 	mov.w	r0, #0
 800c626:	f380 8811 	msr	BASEPRI, r0
 800c62a:	4770      	bx	lr
 800c62c:	f3af 8000 	nop.w

0800c630 <pxCurrentTCBConst2>:
 800c630:	200018d4 	.word	0x200018d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c634:	bf00      	nop
 800c636:	bf00      	nop

0800c638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c638:	4808      	ldr	r0, [pc, #32]	; (800c65c <prvPortStartFirstTask+0x24>)
 800c63a:	6800      	ldr	r0, [r0, #0]
 800c63c:	6800      	ldr	r0, [r0, #0]
 800c63e:	f380 8808 	msr	MSP, r0
 800c642:	f04f 0000 	mov.w	r0, #0
 800c646:	f380 8814 	msr	CONTROL, r0
 800c64a:	b662      	cpsie	i
 800c64c:	b661      	cpsie	f
 800c64e:	f3bf 8f4f 	dsb	sy
 800c652:	f3bf 8f6f 	isb	sy
 800c656:	df00      	svc	0
 800c658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c65a:	bf00      	nop
 800c65c:	e000ed08 	.word	0xe000ed08

0800c660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b086      	sub	sp, #24
 800c664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c666:	4b46      	ldr	r3, [pc, #280]	; (800c780 <xPortStartScheduler+0x120>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4a46      	ldr	r2, [pc, #280]	; (800c784 <xPortStartScheduler+0x124>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d10a      	bne.n	800c686 <xPortStartScheduler+0x26>
	__asm volatile
 800c670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c674:	f383 8811 	msr	BASEPRI, r3
 800c678:	f3bf 8f6f 	isb	sy
 800c67c:	f3bf 8f4f 	dsb	sy
 800c680:	613b      	str	r3, [r7, #16]
}
 800c682:	bf00      	nop
 800c684:	e7fe      	b.n	800c684 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c686:	4b3e      	ldr	r3, [pc, #248]	; (800c780 <xPortStartScheduler+0x120>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a3f      	ldr	r2, [pc, #252]	; (800c788 <xPortStartScheduler+0x128>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d10a      	bne.n	800c6a6 <xPortStartScheduler+0x46>
	__asm volatile
 800c690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c694:	f383 8811 	msr	BASEPRI, r3
 800c698:	f3bf 8f6f 	isb	sy
 800c69c:	f3bf 8f4f 	dsb	sy
 800c6a0:	60fb      	str	r3, [r7, #12]
}
 800c6a2:	bf00      	nop
 800c6a4:	e7fe      	b.n	800c6a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c6a6:	4b39      	ldr	r3, [pc, #228]	; (800c78c <xPortStartScheduler+0x12c>)
 800c6a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	b2db      	uxtb	r3, r3
 800c6b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	22ff      	movs	r2, #255	; 0xff
 800c6b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	b2db      	uxtb	r3, r3
 800c6be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c6c0:	78fb      	ldrb	r3, [r7, #3]
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c6c8:	b2da      	uxtb	r2, r3
 800c6ca:	4b31      	ldr	r3, [pc, #196]	; (800c790 <xPortStartScheduler+0x130>)
 800c6cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c6ce:	4b31      	ldr	r3, [pc, #196]	; (800c794 <xPortStartScheduler+0x134>)
 800c6d0:	2207      	movs	r2, #7
 800c6d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c6d4:	e009      	b.n	800c6ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c6d6:	4b2f      	ldr	r3, [pc, #188]	; (800c794 <xPortStartScheduler+0x134>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	3b01      	subs	r3, #1
 800c6dc:	4a2d      	ldr	r2, [pc, #180]	; (800c794 <xPortStartScheduler+0x134>)
 800c6de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c6e0:	78fb      	ldrb	r3, [r7, #3]
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	005b      	lsls	r3, r3, #1
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c6ea:	78fb      	ldrb	r3, [r7, #3]
 800c6ec:	b2db      	uxtb	r3, r3
 800c6ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6f2:	2b80      	cmp	r3, #128	; 0x80
 800c6f4:	d0ef      	beq.n	800c6d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c6f6:	4b27      	ldr	r3, [pc, #156]	; (800c794 <xPortStartScheduler+0x134>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f1c3 0307 	rsb	r3, r3, #7
 800c6fe:	2b04      	cmp	r3, #4
 800c700:	d00a      	beq.n	800c718 <xPortStartScheduler+0xb8>
	__asm volatile
 800c702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c706:	f383 8811 	msr	BASEPRI, r3
 800c70a:	f3bf 8f6f 	isb	sy
 800c70e:	f3bf 8f4f 	dsb	sy
 800c712:	60bb      	str	r3, [r7, #8]
}
 800c714:	bf00      	nop
 800c716:	e7fe      	b.n	800c716 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c718:	4b1e      	ldr	r3, [pc, #120]	; (800c794 <xPortStartScheduler+0x134>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	021b      	lsls	r3, r3, #8
 800c71e:	4a1d      	ldr	r2, [pc, #116]	; (800c794 <xPortStartScheduler+0x134>)
 800c720:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c722:	4b1c      	ldr	r3, [pc, #112]	; (800c794 <xPortStartScheduler+0x134>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c72a:	4a1a      	ldr	r2, [pc, #104]	; (800c794 <xPortStartScheduler+0x134>)
 800c72c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	b2da      	uxtb	r2, r3
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c736:	4b18      	ldr	r3, [pc, #96]	; (800c798 <xPortStartScheduler+0x138>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a17      	ldr	r2, [pc, #92]	; (800c798 <xPortStartScheduler+0x138>)
 800c73c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c740:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c742:	4b15      	ldr	r3, [pc, #84]	; (800c798 <xPortStartScheduler+0x138>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	4a14      	ldr	r2, [pc, #80]	; (800c798 <xPortStartScheduler+0x138>)
 800c748:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c74c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c74e:	f000 f8dd 	bl	800c90c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c752:	4b12      	ldr	r3, [pc, #72]	; (800c79c <xPortStartScheduler+0x13c>)
 800c754:	2200      	movs	r2, #0
 800c756:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c758:	f000 f8fc 	bl	800c954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c75c:	4b10      	ldr	r3, [pc, #64]	; (800c7a0 <xPortStartScheduler+0x140>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a0f      	ldr	r2, [pc, #60]	; (800c7a0 <xPortStartScheduler+0x140>)
 800c762:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c766:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c768:	f7ff ff66 	bl	800c638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c76c:	f7fe ff52 	bl	800b614 <vTaskSwitchContext>
	prvTaskExitError();
 800c770:	f7ff ff1c 	bl	800c5ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c774:	2300      	movs	r3, #0
}
 800c776:	4618      	mov	r0, r3
 800c778:	3718      	adds	r7, #24
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
 800c77e:	bf00      	nop
 800c780:	e000ed00 	.word	0xe000ed00
 800c784:	410fc271 	.word	0x410fc271
 800c788:	410fc270 	.word	0x410fc270
 800c78c:	e000e400 	.word	0xe000e400
 800c790:	20001f00 	.word	0x20001f00
 800c794:	20001f04 	.word	0x20001f04
 800c798:	e000ed20 	.word	0xe000ed20
 800c79c:	2000000c 	.word	0x2000000c
 800c7a0:	e000ef34 	.word	0xe000ef34

0800c7a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b083      	sub	sp, #12
 800c7a8:	af00      	add	r7, sp, #0
	__asm volatile
 800c7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ae:	f383 8811 	msr	BASEPRI, r3
 800c7b2:	f3bf 8f6f 	isb	sy
 800c7b6:	f3bf 8f4f 	dsb	sy
 800c7ba:	607b      	str	r3, [r7, #4]
}
 800c7bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c7be:	4b0f      	ldr	r3, [pc, #60]	; (800c7fc <vPortEnterCritical+0x58>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	4a0d      	ldr	r2, [pc, #52]	; (800c7fc <vPortEnterCritical+0x58>)
 800c7c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c7c8:	4b0c      	ldr	r3, [pc, #48]	; (800c7fc <vPortEnterCritical+0x58>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d10f      	bne.n	800c7f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c7d0:	4b0b      	ldr	r3, [pc, #44]	; (800c800 <vPortEnterCritical+0x5c>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d00a      	beq.n	800c7f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7de:	f383 8811 	msr	BASEPRI, r3
 800c7e2:	f3bf 8f6f 	isb	sy
 800c7e6:	f3bf 8f4f 	dsb	sy
 800c7ea:	603b      	str	r3, [r7, #0]
}
 800c7ec:	bf00      	nop
 800c7ee:	e7fe      	b.n	800c7ee <vPortEnterCritical+0x4a>
	}
}
 800c7f0:	bf00      	nop
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr
 800c7fc:	2000000c 	.word	0x2000000c
 800c800:	e000ed04 	.word	0xe000ed04

0800c804 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c80a:	4b12      	ldr	r3, [pc, #72]	; (800c854 <vPortExitCritical+0x50>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d10a      	bne.n	800c828 <vPortExitCritical+0x24>
	__asm volatile
 800c812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c816:	f383 8811 	msr	BASEPRI, r3
 800c81a:	f3bf 8f6f 	isb	sy
 800c81e:	f3bf 8f4f 	dsb	sy
 800c822:	607b      	str	r3, [r7, #4]
}
 800c824:	bf00      	nop
 800c826:	e7fe      	b.n	800c826 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c828:	4b0a      	ldr	r3, [pc, #40]	; (800c854 <vPortExitCritical+0x50>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	3b01      	subs	r3, #1
 800c82e:	4a09      	ldr	r2, [pc, #36]	; (800c854 <vPortExitCritical+0x50>)
 800c830:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c832:	4b08      	ldr	r3, [pc, #32]	; (800c854 <vPortExitCritical+0x50>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d105      	bne.n	800c846 <vPortExitCritical+0x42>
 800c83a:	2300      	movs	r3, #0
 800c83c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	f383 8811 	msr	BASEPRI, r3
}
 800c844:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c846:	bf00      	nop
 800c848:	370c      	adds	r7, #12
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop
 800c854:	2000000c 	.word	0x2000000c
	...

0800c860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c860:	f3ef 8009 	mrs	r0, PSP
 800c864:	f3bf 8f6f 	isb	sy
 800c868:	4b15      	ldr	r3, [pc, #84]	; (800c8c0 <pxCurrentTCBConst>)
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	f01e 0f10 	tst.w	lr, #16
 800c870:	bf08      	it	eq
 800c872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c87a:	6010      	str	r0, [r2, #0]
 800c87c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c880:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c884:	f380 8811 	msr	BASEPRI, r0
 800c888:	f3bf 8f4f 	dsb	sy
 800c88c:	f3bf 8f6f 	isb	sy
 800c890:	f7fe fec0 	bl	800b614 <vTaskSwitchContext>
 800c894:	f04f 0000 	mov.w	r0, #0
 800c898:	f380 8811 	msr	BASEPRI, r0
 800c89c:	bc09      	pop	{r0, r3}
 800c89e:	6819      	ldr	r1, [r3, #0]
 800c8a0:	6808      	ldr	r0, [r1, #0]
 800c8a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8a6:	f01e 0f10 	tst.w	lr, #16
 800c8aa:	bf08      	it	eq
 800c8ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c8b0:	f380 8809 	msr	PSP, r0
 800c8b4:	f3bf 8f6f 	isb	sy
 800c8b8:	4770      	bx	lr
 800c8ba:	bf00      	nop
 800c8bc:	f3af 8000 	nop.w

0800c8c0 <pxCurrentTCBConst>:
 800c8c0:	200018d4 	.word	0x200018d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c8c4:	bf00      	nop
 800c8c6:	bf00      	nop

0800c8c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
	__asm volatile
 800c8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d2:	f383 8811 	msr	BASEPRI, r3
 800c8d6:	f3bf 8f6f 	isb	sy
 800c8da:	f3bf 8f4f 	dsb	sy
 800c8de:	607b      	str	r3, [r7, #4]
}
 800c8e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c8e2:	f7fe fddd 	bl	800b4a0 <xTaskIncrementTick>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d003      	beq.n	800c8f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c8ec:	4b06      	ldr	r3, [pc, #24]	; (800c908 <xPortSysTickHandler+0x40>)
 800c8ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8f2:	601a      	str	r2, [r3, #0]
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	f383 8811 	msr	BASEPRI, r3
}
 800c8fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c900:	bf00      	nop
 800c902:	3708      	adds	r7, #8
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}
 800c908:	e000ed04 	.word	0xe000ed04

0800c90c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c90c:	b480      	push	{r7}
 800c90e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c910:	4b0b      	ldr	r3, [pc, #44]	; (800c940 <vPortSetupTimerInterrupt+0x34>)
 800c912:	2200      	movs	r2, #0
 800c914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c916:	4b0b      	ldr	r3, [pc, #44]	; (800c944 <vPortSetupTimerInterrupt+0x38>)
 800c918:	2200      	movs	r2, #0
 800c91a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c91c:	4b0a      	ldr	r3, [pc, #40]	; (800c948 <vPortSetupTimerInterrupt+0x3c>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a0a      	ldr	r2, [pc, #40]	; (800c94c <vPortSetupTimerInterrupt+0x40>)
 800c922:	fba2 2303 	umull	r2, r3, r2, r3
 800c926:	099b      	lsrs	r3, r3, #6
 800c928:	4a09      	ldr	r2, [pc, #36]	; (800c950 <vPortSetupTimerInterrupt+0x44>)
 800c92a:	3b01      	subs	r3, #1
 800c92c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c92e:	4b04      	ldr	r3, [pc, #16]	; (800c940 <vPortSetupTimerInterrupt+0x34>)
 800c930:	2207      	movs	r2, #7
 800c932:	601a      	str	r2, [r3, #0]
}
 800c934:	bf00      	nop
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr
 800c93e:	bf00      	nop
 800c940:	e000e010 	.word	0xe000e010
 800c944:	e000e018 	.word	0xe000e018
 800c948:	20000000 	.word	0x20000000
 800c94c:	10624dd3 	.word	0x10624dd3
 800c950:	e000e014 	.word	0xe000e014

0800c954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c954:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c964 <vPortEnableVFP+0x10>
 800c958:	6801      	ldr	r1, [r0, #0]
 800c95a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c95e:	6001      	str	r1, [r0, #0]
 800c960:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c962:	bf00      	nop
 800c964:	e000ed88 	.word	0xe000ed88

0800c968 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c968:	b480      	push	{r7}
 800c96a:	b085      	sub	sp, #20
 800c96c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c96e:	f3ef 8305 	mrs	r3, IPSR
 800c972:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2b0f      	cmp	r3, #15
 800c978:	d914      	bls.n	800c9a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c97a:	4a17      	ldr	r2, [pc, #92]	; (800c9d8 <vPortValidateInterruptPriority+0x70>)
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	4413      	add	r3, r2
 800c980:	781b      	ldrb	r3, [r3, #0]
 800c982:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c984:	4b15      	ldr	r3, [pc, #84]	; (800c9dc <vPortValidateInterruptPriority+0x74>)
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	7afa      	ldrb	r2, [r7, #11]
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d20a      	bcs.n	800c9a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c992:	f383 8811 	msr	BASEPRI, r3
 800c996:	f3bf 8f6f 	isb	sy
 800c99a:	f3bf 8f4f 	dsb	sy
 800c99e:	607b      	str	r3, [r7, #4]
}
 800c9a0:	bf00      	nop
 800c9a2:	e7fe      	b.n	800c9a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c9a4:	4b0e      	ldr	r3, [pc, #56]	; (800c9e0 <vPortValidateInterruptPriority+0x78>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c9ac:	4b0d      	ldr	r3, [pc, #52]	; (800c9e4 <vPortValidateInterruptPriority+0x7c>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d90a      	bls.n	800c9ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b8:	f383 8811 	msr	BASEPRI, r3
 800c9bc:	f3bf 8f6f 	isb	sy
 800c9c0:	f3bf 8f4f 	dsb	sy
 800c9c4:	603b      	str	r3, [r7, #0]
}
 800c9c6:	bf00      	nop
 800c9c8:	e7fe      	b.n	800c9c8 <vPortValidateInterruptPriority+0x60>
	}
 800c9ca:	bf00      	nop
 800c9cc:	3714      	adds	r7, #20
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d4:	4770      	bx	lr
 800c9d6:	bf00      	nop
 800c9d8:	e000e3f0 	.word	0xe000e3f0
 800c9dc:	20001f00 	.word	0x20001f00
 800c9e0:	e000ed0c 	.word	0xe000ed0c
 800c9e4:	20001f04 	.word	0x20001f04

0800c9e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b08a      	sub	sp, #40	; 0x28
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c9f4:	f7fe fc98 	bl	800b328 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c9f8:	4b5b      	ldr	r3, [pc, #364]	; (800cb68 <pvPortMalloc+0x180>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d101      	bne.n	800ca04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ca00:	f000 f920 	bl	800cc44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ca04:	4b59      	ldr	r3, [pc, #356]	; (800cb6c <pvPortMalloc+0x184>)
 800ca06:	681a      	ldr	r2, [r3, #0]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	4013      	ands	r3, r2
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	f040 8093 	bne.w	800cb38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d01d      	beq.n	800ca54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ca18:	2208      	movs	r2, #8
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f003 0307 	and.w	r3, r3, #7
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d014      	beq.n	800ca54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f023 0307 	bic.w	r3, r3, #7
 800ca30:	3308      	adds	r3, #8
 800ca32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f003 0307 	and.w	r3, r3, #7
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d00a      	beq.n	800ca54 <pvPortMalloc+0x6c>
	__asm volatile
 800ca3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca42:	f383 8811 	msr	BASEPRI, r3
 800ca46:	f3bf 8f6f 	isb	sy
 800ca4a:	f3bf 8f4f 	dsb	sy
 800ca4e:	617b      	str	r3, [r7, #20]
}
 800ca50:	bf00      	nop
 800ca52:	e7fe      	b.n	800ca52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d06e      	beq.n	800cb38 <pvPortMalloc+0x150>
 800ca5a:	4b45      	ldr	r3, [pc, #276]	; (800cb70 <pvPortMalloc+0x188>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d869      	bhi.n	800cb38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ca64:	4b43      	ldr	r3, [pc, #268]	; (800cb74 <pvPortMalloc+0x18c>)
 800ca66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ca68:	4b42      	ldr	r3, [pc, #264]	; (800cb74 <pvPortMalloc+0x18c>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca6e:	e004      	b.n	800ca7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ca70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ca74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d903      	bls.n	800ca8c <pvPortMalloc+0xa4>
 800ca84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d1f1      	bne.n	800ca70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ca8c:	4b36      	ldr	r3, [pc, #216]	; (800cb68 <pvPortMalloc+0x180>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d050      	beq.n	800cb38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ca96:	6a3b      	ldr	r3, [r7, #32]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	2208      	movs	r2, #8
 800ca9c:	4413      	add	r3, r2
 800ca9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800caa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	6a3b      	ldr	r3, [r7, #32]
 800caa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800caa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caaa:	685a      	ldr	r2, [r3, #4]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	1ad2      	subs	r2, r2, r3
 800cab0:	2308      	movs	r3, #8
 800cab2:	005b      	lsls	r3, r3, #1
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d91f      	bls.n	800caf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	4413      	add	r3, r2
 800cabe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cac0:	69bb      	ldr	r3, [r7, #24]
 800cac2:	f003 0307 	and.w	r3, r3, #7
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d00a      	beq.n	800cae0 <pvPortMalloc+0xf8>
	__asm volatile
 800caca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cace:	f383 8811 	msr	BASEPRI, r3
 800cad2:	f3bf 8f6f 	isb	sy
 800cad6:	f3bf 8f4f 	dsb	sy
 800cada:	613b      	str	r3, [r7, #16]
}
 800cadc:	bf00      	nop
 800cade:	e7fe      	b.n	800cade <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae2:	685a      	ldr	r2, [r3, #4]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	1ad2      	subs	r2, r2, r3
 800cae8:	69bb      	ldr	r3, [r7, #24]
 800caea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800caec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800caf2:	69b8      	ldr	r0, [r7, #24]
 800caf4:	f000 f908 	bl	800cd08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800caf8:	4b1d      	ldr	r3, [pc, #116]	; (800cb70 <pvPortMalloc+0x188>)
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	1ad3      	subs	r3, r2, r3
 800cb02:	4a1b      	ldr	r2, [pc, #108]	; (800cb70 <pvPortMalloc+0x188>)
 800cb04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cb06:	4b1a      	ldr	r3, [pc, #104]	; (800cb70 <pvPortMalloc+0x188>)
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	4b1b      	ldr	r3, [pc, #108]	; (800cb78 <pvPortMalloc+0x190>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d203      	bcs.n	800cb1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cb12:	4b17      	ldr	r3, [pc, #92]	; (800cb70 <pvPortMalloc+0x188>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4a18      	ldr	r2, [pc, #96]	; (800cb78 <pvPortMalloc+0x190>)
 800cb18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb1c:	685a      	ldr	r2, [r3, #4]
 800cb1e:	4b13      	ldr	r3, [pc, #76]	; (800cb6c <pvPortMalloc+0x184>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	431a      	orrs	r2, r3
 800cb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cb2e:	4b13      	ldr	r3, [pc, #76]	; (800cb7c <pvPortMalloc+0x194>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	3301      	adds	r3, #1
 800cb34:	4a11      	ldr	r2, [pc, #68]	; (800cb7c <pvPortMalloc+0x194>)
 800cb36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cb38:	f7fe fc04 	bl	800b344 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	f003 0307 	and.w	r3, r3, #7
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d00a      	beq.n	800cb5c <pvPortMalloc+0x174>
	__asm volatile
 800cb46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb4a:	f383 8811 	msr	BASEPRI, r3
 800cb4e:	f3bf 8f6f 	isb	sy
 800cb52:	f3bf 8f4f 	dsb	sy
 800cb56:	60fb      	str	r3, [r7, #12]
}
 800cb58:	bf00      	nop
 800cb5a:	e7fe      	b.n	800cb5a <pvPortMalloc+0x172>
	return pvReturn;
 800cb5c:	69fb      	ldr	r3, [r7, #28]
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3728      	adds	r7, #40	; 0x28
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	20002ac8 	.word	0x20002ac8
 800cb6c:	20002adc 	.word	0x20002adc
 800cb70:	20002acc 	.word	0x20002acc
 800cb74:	20002ac0 	.word	0x20002ac0
 800cb78:	20002ad0 	.word	0x20002ad0
 800cb7c:	20002ad4 	.word	0x20002ad4

0800cb80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b086      	sub	sp, #24
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d04d      	beq.n	800cc2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cb92:	2308      	movs	r3, #8
 800cb94:	425b      	negs	r3, r3
 800cb96:	697a      	ldr	r2, [r7, #20]
 800cb98:	4413      	add	r3, r2
 800cb9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	685a      	ldr	r2, [r3, #4]
 800cba4:	4b24      	ldr	r3, [pc, #144]	; (800cc38 <vPortFree+0xb8>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4013      	ands	r3, r2
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d10a      	bne.n	800cbc4 <vPortFree+0x44>
	__asm volatile
 800cbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb2:	f383 8811 	msr	BASEPRI, r3
 800cbb6:	f3bf 8f6f 	isb	sy
 800cbba:	f3bf 8f4f 	dsb	sy
 800cbbe:	60fb      	str	r3, [r7, #12]
}
 800cbc0:	bf00      	nop
 800cbc2:	e7fe      	b.n	800cbc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d00a      	beq.n	800cbe2 <vPortFree+0x62>
	__asm volatile
 800cbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd0:	f383 8811 	msr	BASEPRI, r3
 800cbd4:	f3bf 8f6f 	isb	sy
 800cbd8:	f3bf 8f4f 	dsb	sy
 800cbdc:	60bb      	str	r3, [r7, #8]
}
 800cbde:	bf00      	nop
 800cbe0:	e7fe      	b.n	800cbe0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	685a      	ldr	r2, [r3, #4]
 800cbe6:	4b14      	ldr	r3, [pc, #80]	; (800cc38 <vPortFree+0xb8>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4013      	ands	r3, r2
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d01e      	beq.n	800cc2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d11a      	bne.n	800cc2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	685a      	ldr	r2, [r3, #4]
 800cbfc:	4b0e      	ldr	r3, [pc, #56]	; (800cc38 <vPortFree+0xb8>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	43db      	mvns	r3, r3
 800cc02:	401a      	ands	r2, r3
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cc08:	f7fe fb8e 	bl	800b328 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	685a      	ldr	r2, [r3, #4]
 800cc10:	4b0a      	ldr	r3, [pc, #40]	; (800cc3c <vPortFree+0xbc>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4413      	add	r3, r2
 800cc16:	4a09      	ldr	r2, [pc, #36]	; (800cc3c <vPortFree+0xbc>)
 800cc18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cc1a:	6938      	ldr	r0, [r7, #16]
 800cc1c:	f000 f874 	bl	800cd08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cc20:	4b07      	ldr	r3, [pc, #28]	; (800cc40 <vPortFree+0xc0>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	3301      	adds	r3, #1
 800cc26:	4a06      	ldr	r2, [pc, #24]	; (800cc40 <vPortFree+0xc0>)
 800cc28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cc2a:	f7fe fb8b 	bl	800b344 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cc2e:	bf00      	nop
 800cc30:	3718      	adds	r7, #24
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	20002adc 	.word	0x20002adc
 800cc3c:	20002acc 	.word	0x20002acc
 800cc40:	20002ad8 	.word	0x20002ad8

0800cc44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cc44:	b480      	push	{r7}
 800cc46:	b085      	sub	sp, #20
 800cc48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cc4a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800cc4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cc50:	4b27      	ldr	r3, [pc, #156]	; (800ccf0 <prvHeapInit+0xac>)
 800cc52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f003 0307 	and.w	r3, r3, #7
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d00c      	beq.n	800cc78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	3307      	adds	r3, #7
 800cc62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f023 0307 	bic.w	r3, r3, #7
 800cc6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cc6c:	68ba      	ldr	r2, [r7, #8]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	1ad3      	subs	r3, r2, r3
 800cc72:	4a1f      	ldr	r2, [pc, #124]	; (800ccf0 <prvHeapInit+0xac>)
 800cc74:	4413      	add	r3, r2
 800cc76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cc7c:	4a1d      	ldr	r2, [pc, #116]	; (800ccf4 <prvHeapInit+0xb0>)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cc82:	4b1c      	ldr	r3, [pc, #112]	; (800ccf4 <prvHeapInit+0xb0>)
 800cc84:	2200      	movs	r2, #0
 800cc86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	68ba      	ldr	r2, [r7, #8]
 800cc8c:	4413      	add	r3, r2
 800cc8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cc90:	2208      	movs	r2, #8
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	1a9b      	subs	r3, r3, r2
 800cc96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	f023 0307 	bic.w	r3, r3, #7
 800cc9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	4a15      	ldr	r2, [pc, #84]	; (800ccf8 <prvHeapInit+0xb4>)
 800cca4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cca6:	4b14      	ldr	r3, [pc, #80]	; (800ccf8 <prvHeapInit+0xb4>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ccae:	4b12      	ldr	r3, [pc, #72]	; (800ccf8 <prvHeapInit+0xb4>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	68fa      	ldr	r2, [r7, #12]
 800ccbe:	1ad2      	subs	r2, r2, r3
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ccc4:	4b0c      	ldr	r3, [pc, #48]	; (800ccf8 <prvHeapInit+0xb4>)
 800ccc6:	681a      	ldr	r2, [r3, #0]
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	4a0a      	ldr	r2, [pc, #40]	; (800ccfc <prvHeapInit+0xb8>)
 800ccd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	4a09      	ldr	r2, [pc, #36]	; (800cd00 <prvHeapInit+0xbc>)
 800ccda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ccdc:	4b09      	ldr	r3, [pc, #36]	; (800cd04 <prvHeapInit+0xc0>)
 800ccde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cce2:	601a      	str	r2, [r3, #0]
}
 800cce4:	bf00      	nop
 800cce6:	3714      	adds	r7, #20
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr
 800ccf0:	20001f08 	.word	0x20001f08
 800ccf4:	20002ac0 	.word	0x20002ac0
 800ccf8:	20002ac8 	.word	0x20002ac8
 800ccfc:	20002ad0 	.word	0x20002ad0
 800cd00:	20002acc 	.word	0x20002acc
 800cd04:	20002adc 	.word	0x20002adc

0800cd08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b085      	sub	sp, #20
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cd10:	4b28      	ldr	r3, [pc, #160]	; (800cdb4 <prvInsertBlockIntoFreeList+0xac>)
 800cd12:	60fb      	str	r3, [r7, #12]
 800cd14:	e002      	b.n	800cd1c <prvInsertBlockIntoFreeList+0x14>
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	60fb      	str	r3, [r7, #12]
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d8f7      	bhi.n	800cd16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	68ba      	ldr	r2, [r7, #8]
 800cd30:	4413      	add	r3, r2
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	429a      	cmp	r2, r3
 800cd36:	d108      	bne.n	800cd4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	685a      	ldr	r2, [r3, #4]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	441a      	add	r2, r3
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	68ba      	ldr	r2, [r7, #8]
 800cd54:	441a      	add	r2, r3
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d118      	bne.n	800cd90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	4b15      	ldr	r3, [pc, #84]	; (800cdb8 <prvInsertBlockIntoFreeList+0xb0>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d00d      	beq.n	800cd86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	685a      	ldr	r2, [r3, #4]
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	685b      	ldr	r3, [r3, #4]
 800cd74:	441a      	add	r2, r3
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	681a      	ldr	r2, [r3, #0]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	601a      	str	r2, [r3, #0]
 800cd84:	e008      	b.n	800cd98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cd86:	4b0c      	ldr	r3, [pc, #48]	; (800cdb8 <prvInsertBlockIntoFreeList+0xb0>)
 800cd88:	681a      	ldr	r2, [r3, #0]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	601a      	str	r2, [r3, #0]
 800cd8e:	e003      	b.n	800cd98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cd98:	68fa      	ldr	r2, [r7, #12]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d002      	beq.n	800cda6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	687a      	ldr	r2, [r7, #4]
 800cda4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cda6:	bf00      	nop
 800cda8:	3714      	adds	r7, #20
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb0:	4770      	bx	lr
 800cdb2:	bf00      	nop
 800cdb4:	20002ac0 	.word	0x20002ac0
 800cdb8:	20002ac8 	.word	0x20002ac8

0800cdbc <atoi>:
 800cdbc:	220a      	movs	r2, #10
 800cdbe:	2100      	movs	r1, #0
 800cdc0:	f000 bb12 	b.w	800d3e8 <strtol>

0800cdc4 <__errno>:
 800cdc4:	4b01      	ldr	r3, [pc, #4]	; (800cdcc <__errno+0x8>)
 800cdc6:	6818      	ldr	r0, [r3, #0]
 800cdc8:	4770      	bx	lr
 800cdca:	bf00      	nop
 800cdcc:	20000010 	.word	0x20000010

0800cdd0 <__libc_init_array>:
 800cdd0:	b570      	push	{r4, r5, r6, lr}
 800cdd2:	4d0d      	ldr	r5, [pc, #52]	; (800ce08 <__libc_init_array+0x38>)
 800cdd4:	4c0d      	ldr	r4, [pc, #52]	; (800ce0c <__libc_init_array+0x3c>)
 800cdd6:	1b64      	subs	r4, r4, r5
 800cdd8:	10a4      	asrs	r4, r4, #2
 800cdda:	2600      	movs	r6, #0
 800cddc:	42a6      	cmp	r6, r4
 800cdde:	d109      	bne.n	800cdf4 <__libc_init_array+0x24>
 800cde0:	4d0b      	ldr	r5, [pc, #44]	; (800ce10 <__libc_init_array+0x40>)
 800cde2:	4c0c      	ldr	r4, [pc, #48]	; (800ce14 <__libc_init_array+0x44>)
 800cde4:	f001 fbba 	bl	800e55c <_init>
 800cde8:	1b64      	subs	r4, r4, r5
 800cdea:	10a4      	asrs	r4, r4, #2
 800cdec:	2600      	movs	r6, #0
 800cdee:	42a6      	cmp	r6, r4
 800cdf0:	d105      	bne.n	800cdfe <__libc_init_array+0x2e>
 800cdf2:	bd70      	pop	{r4, r5, r6, pc}
 800cdf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdf8:	4798      	blx	r3
 800cdfa:	3601      	adds	r6, #1
 800cdfc:	e7ee      	b.n	800cddc <__libc_init_array+0xc>
 800cdfe:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce02:	4798      	blx	r3
 800ce04:	3601      	adds	r6, #1
 800ce06:	e7f2      	b.n	800cdee <__libc_init_array+0x1e>
 800ce08:	0800f03c 	.word	0x0800f03c
 800ce0c:	0800f03c 	.word	0x0800f03c
 800ce10:	0800f03c 	.word	0x0800f03c
 800ce14:	0800f040 	.word	0x0800f040

0800ce18 <malloc>:
 800ce18:	4b02      	ldr	r3, [pc, #8]	; (800ce24 <malloc+0xc>)
 800ce1a:	4601      	mov	r1, r0
 800ce1c:	6818      	ldr	r0, [r3, #0]
 800ce1e:	f000 b89d 	b.w	800cf5c <_malloc_r>
 800ce22:	bf00      	nop
 800ce24:	20000010 	.word	0x20000010

0800ce28 <free>:
 800ce28:	4b02      	ldr	r3, [pc, #8]	; (800ce34 <free+0xc>)
 800ce2a:	4601      	mov	r1, r0
 800ce2c:	6818      	ldr	r0, [r3, #0]
 800ce2e:	f000 b829 	b.w	800ce84 <_free_r>
 800ce32:	bf00      	nop
 800ce34:	20000010 	.word	0x20000010

0800ce38 <memcmp>:
 800ce38:	b510      	push	{r4, lr}
 800ce3a:	3901      	subs	r1, #1
 800ce3c:	4402      	add	r2, r0
 800ce3e:	4290      	cmp	r0, r2
 800ce40:	d101      	bne.n	800ce46 <memcmp+0xe>
 800ce42:	2000      	movs	r0, #0
 800ce44:	e005      	b.n	800ce52 <memcmp+0x1a>
 800ce46:	7803      	ldrb	r3, [r0, #0]
 800ce48:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ce4c:	42a3      	cmp	r3, r4
 800ce4e:	d001      	beq.n	800ce54 <memcmp+0x1c>
 800ce50:	1b18      	subs	r0, r3, r4
 800ce52:	bd10      	pop	{r4, pc}
 800ce54:	3001      	adds	r0, #1
 800ce56:	e7f2      	b.n	800ce3e <memcmp+0x6>

0800ce58 <memcpy>:
 800ce58:	440a      	add	r2, r1
 800ce5a:	4291      	cmp	r1, r2
 800ce5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce60:	d100      	bne.n	800ce64 <memcpy+0xc>
 800ce62:	4770      	bx	lr
 800ce64:	b510      	push	{r4, lr}
 800ce66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce6e:	4291      	cmp	r1, r2
 800ce70:	d1f9      	bne.n	800ce66 <memcpy+0xe>
 800ce72:	bd10      	pop	{r4, pc}

0800ce74 <memset>:
 800ce74:	4402      	add	r2, r0
 800ce76:	4603      	mov	r3, r0
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d100      	bne.n	800ce7e <memset+0xa>
 800ce7c:	4770      	bx	lr
 800ce7e:	f803 1b01 	strb.w	r1, [r3], #1
 800ce82:	e7f9      	b.n	800ce78 <memset+0x4>

0800ce84 <_free_r>:
 800ce84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce86:	2900      	cmp	r1, #0
 800ce88:	d044      	beq.n	800cf14 <_free_r+0x90>
 800ce8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce8e:	9001      	str	r0, [sp, #4]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	f1a1 0404 	sub.w	r4, r1, #4
 800ce96:	bfb8      	it	lt
 800ce98:	18e4      	addlt	r4, r4, r3
 800ce9a:	f000 fdbf 	bl	800da1c <__malloc_lock>
 800ce9e:	4a1e      	ldr	r2, [pc, #120]	; (800cf18 <_free_r+0x94>)
 800cea0:	9801      	ldr	r0, [sp, #4]
 800cea2:	6813      	ldr	r3, [r2, #0]
 800cea4:	b933      	cbnz	r3, 800ceb4 <_free_r+0x30>
 800cea6:	6063      	str	r3, [r4, #4]
 800cea8:	6014      	str	r4, [r2, #0]
 800ceaa:	b003      	add	sp, #12
 800ceac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ceb0:	f000 bdba 	b.w	800da28 <__malloc_unlock>
 800ceb4:	42a3      	cmp	r3, r4
 800ceb6:	d908      	bls.n	800ceca <_free_r+0x46>
 800ceb8:	6825      	ldr	r5, [r4, #0]
 800ceba:	1961      	adds	r1, r4, r5
 800cebc:	428b      	cmp	r3, r1
 800cebe:	bf01      	itttt	eq
 800cec0:	6819      	ldreq	r1, [r3, #0]
 800cec2:	685b      	ldreq	r3, [r3, #4]
 800cec4:	1949      	addeq	r1, r1, r5
 800cec6:	6021      	streq	r1, [r4, #0]
 800cec8:	e7ed      	b.n	800cea6 <_free_r+0x22>
 800ceca:	461a      	mov	r2, r3
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	b10b      	cbz	r3, 800ced4 <_free_r+0x50>
 800ced0:	42a3      	cmp	r3, r4
 800ced2:	d9fa      	bls.n	800ceca <_free_r+0x46>
 800ced4:	6811      	ldr	r1, [r2, #0]
 800ced6:	1855      	adds	r5, r2, r1
 800ced8:	42a5      	cmp	r5, r4
 800ceda:	d10b      	bne.n	800cef4 <_free_r+0x70>
 800cedc:	6824      	ldr	r4, [r4, #0]
 800cede:	4421      	add	r1, r4
 800cee0:	1854      	adds	r4, r2, r1
 800cee2:	42a3      	cmp	r3, r4
 800cee4:	6011      	str	r1, [r2, #0]
 800cee6:	d1e0      	bne.n	800ceaa <_free_r+0x26>
 800cee8:	681c      	ldr	r4, [r3, #0]
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	6053      	str	r3, [r2, #4]
 800ceee:	4421      	add	r1, r4
 800cef0:	6011      	str	r1, [r2, #0]
 800cef2:	e7da      	b.n	800ceaa <_free_r+0x26>
 800cef4:	d902      	bls.n	800cefc <_free_r+0x78>
 800cef6:	230c      	movs	r3, #12
 800cef8:	6003      	str	r3, [r0, #0]
 800cefa:	e7d6      	b.n	800ceaa <_free_r+0x26>
 800cefc:	6825      	ldr	r5, [r4, #0]
 800cefe:	1961      	adds	r1, r4, r5
 800cf00:	428b      	cmp	r3, r1
 800cf02:	bf04      	itt	eq
 800cf04:	6819      	ldreq	r1, [r3, #0]
 800cf06:	685b      	ldreq	r3, [r3, #4]
 800cf08:	6063      	str	r3, [r4, #4]
 800cf0a:	bf04      	itt	eq
 800cf0c:	1949      	addeq	r1, r1, r5
 800cf0e:	6021      	streq	r1, [r4, #0]
 800cf10:	6054      	str	r4, [r2, #4]
 800cf12:	e7ca      	b.n	800ceaa <_free_r+0x26>
 800cf14:	b003      	add	sp, #12
 800cf16:	bd30      	pop	{r4, r5, pc}
 800cf18:	20002ae0 	.word	0x20002ae0

0800cf1c <sbrk_aligned>:
 800cf1c:	b570      	push	{r4, r5, r6, lr}
 800cf1e:	4e0e      	ldr	r6, [pc, #56]	; (800cf58 <sbrk_aligned+0x3c>)
 800cf20:	460c      	mov	r4, r1
 800cf22:	6831      	ldr	r1, [r6, #0]
 800cf24:	4605      	mov	r5, r0
 800cf26:	b911      	cbnz	r1, 800cf2e <sbrk_aligned+0x12>
 800cf28:	f000 f91a 	bl	800d160 <_sbrk_r>
 800cf2c:	6030      	str	r0, [r6, #0]
 800cf2e:	4621      	mov	r1, r4
 800cf30:	4628      	mov	r0, r5
 800cf32:	f000 f915 	bl	800d160 <_sbrk_r>
 800cf36:	1c43      	adds	r3, r0, #1
 800cf38:	d00a      	beq.n	800cf50 <sbrk_aligned+0x34>
 800cf3a:	1cc4      	adds	r4, r0, #3
 800cf3c:	f024 0403 	bic.w	r4, r4, #3
 800cf40:	42a0      	cmp	r0, r4
 800cf42:	d007      	beq.n	800cf54 <sbrk_aligned+0x38>
 800cf44:	1a21      	subs	r1, r4, r0
 800cf46:	4628      	mov	r0, r5
 800cf48:	f000 f90a 	bl	800d160 <_sbrk_r>
 800cf4c:	3001      	adds	r0, #1
 800cf4e:	d101      	bne.n	800cf54 <sbrk_aligned+0x38>
 800cf50:	f04f 34ff 	mov.w	r4, #4294967295
 800cf54:	4620      	mov	r0, r4
 800cf56:	bd70      	pop	{r4, r5, r6, pc}
 800cf58:	20002ae4 	.word	0x20002ae4

0800cf5c <_malloc_r>:
 800cf5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf60:	1ccd      	adds	r5, r1, #3
 800cf62:	f025 0503 	bic.w	r5, r5, #3
 800cf66:	3508      	adds	r5, #8
 800cf68:	2d0c      	cmp	r5, #12
 800cf6a:	bf38      	it	cc
 800cf6c:	250c      	movcc	r5, #12
 800cf6e:	2d00      	cmp	r5, #0
 800cf70:	4607      	mov	r7, r0
 800cf72:	db01      	blt.n	800cf78 <_malloc_r+0x1c>
 800cf74:	42a9      	cmp	r1, r5
 800cf76:	d905      	bls.n	800cf84 <_malloc_r+0x28>
 800cf78:	230c      	movs	r3, #12
 800cf7a:	603b      	str	r3, [r7, #0]
 800cf7c:	2600      	movs	r6, #0
 800cf7e:	4630      	mov	r0, r6
 800cf80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf84:	4e2e      	ldr	r6, [pc, #184]	; (800d040 <_malloc_r+0xe4>)
 800cf86:	f000 fd49 	bl	800da1c <__malloc_lock>
 800cf8a:	6833      	ldr	r3, [r6, #0]
 800cf8c:	461c      	mov	r4, r3
 800cf8e:	bb34      	cbnz	r4, 800cfde <_malloc_r+0x82>
 800cf90:	4629      	mov	r1, r5
 800cf92:	4638      	mov	r0, r7
 800cf94:	f7ff ffc2 	bl	800cf1c <sbrk_aligned>
 800cf98:	1c43      	adds	r3, r0, #1
 800cf9a:	4604      	mov	r4, r0
 800cf9c:	d14d      	bne.n	800d03a <_malloc_r+0xde>
 800cf9e:	6834      	ldr	r4, [r6, #0]
 800cfa0:	4626      	mov	r6, r4
 800cfa2:	2e00      	cmp	r6, #0
 800cfa4:	d140      	bne.n	800d028 <_malloc_r+0xcc>
 800cfa6:	6823      	ldr	r3, [r4, #0]
 800cfa8:	4631      	mov	r1, r6
 800cfaa:	4638      	mov	r0, r7
 800cfac:	eb04 0803 	add.w	r8, r4, r3
 800cfb0:	f000 f8d6 	bl	800d160 <_sbrk_r>
 800cfb4:	4580      	cmp	r8, r0
 800cfb6:	d13a      	bne.n	800d02e <_malloc_r+0xd2>
 800cfb8:	6821      	ldr	r1, [r4, #0]
 800cfba:	3503      	adds	r5, #3
 800cfbc:	1a6d      	subs	r5, r5, r1
 800cfbe:	f025 0503 	bic.w	r5, r5, #3
 800cfc2:	3508      	adds	r5, #8
 800cfc4:	2d0c      	cmp	r5, #12
 800cfc6:	bf38      	it	cc
 800cfc8:	250c      	movcc	r5, #12
 800cfca:	4629      	mov	r1, r5
 800cfcc:	4638      	mov	r0, r7
 800cfce:	f7ff ffa5 	bl	800cf1c <sbrk_aligned>
 800cfd2:	3001      	adds	r0, #1
 800cfd4:	d02b      	beq.n	800d02e <_malloc_r+0xd2>
 800cfd6:	6823      	ldr	r3, [r4, #0]
 800cfd8:	442b      	add	r3, r5
 800cfda:	6023      	str	r3, [r4, #0]
 800cfdc:	e00e      	b.n	800cffc <_malloc_r+0xa0>
 800cfde:	6822      	ldr	r2, [r4, #0]
 800cfe0:	1b52      	subs	r2, r2, r5
 800cfe2:	d41e      	bmi.n	800d022 <_malloc_r+0xc6>
 800cfe4:	2a0b      	cmp	r2, #11
 800cfe6:	d916      	bls.n	800d016 <_malloc_r+0xba>
 800cfe8:	1961      	adds	r1, r4, r5
 800cfea:	42a3      	cmp	r3, r4
 800cfec:	6025      	str	r5, [r4, #0]
 800cfee:	bf18      	it	ne
 800cff0:	6059      	strne	r1, [r3, #4]
 800cff2:	6863      	ldr	r3, [r4, #4]
 800cff4:	bf08      	it	eq
 800cff6:	6031      	streq	r1, [r6, #0]
 800cff8:	5162      	str	r2, [r4, r5]
 800cffa:	604b      	str	r3, [r1, #4]
 800cffc:	4638      	mov	r0, r7
 800cffe:	f104 060b 	add.w	r6, r4, #11
 800d002:	f000 fd11 	bl	800da28 <__malloc_unlock>
 800d006:	f026 0607 	bic.w	r6, r6, #7
 800d00a:	1d23      	adds	r3, r4, #4
 800d00c:	1af2      	subs	r2, r6, r3
 800d00e:	d0b6      	beq.n	800cf7e <_malloc_r+0x22>
 800d010:	1b9b      	subs	r3, r3, r6
 800d012:	50a3      	str	r3, [r4, r2]
 800d014:	e7b3      	b.n	800cf7e <_malloc_r+0x22>
 800d016:	6862      	ldr	r2, [r4, #4]
 800d018:	42a3      	cmp	r3, r4
 800d01a:	bf0c      	ite	eq
 800d01c:	6032      	streq	r2, [r6, #0]
 800d01e:	605a      	strne	r2, [r3, #4]
 800d020:	e7ec      	b.n	800cffc <_malloc_r+0xa0>
 800d022:	4623      	mov	r3, r4
 800d024:	6864      	ldr	r4, [r4, #4]
 800d026:	e7b2      	b.n	800cf8e <_malloc_r+0x32>
 800d028:	4634      	mov	r4, r6
 800d02a:	6876      	ldr	r6, [r6, #4]
 800d02c:	e7b9      	b.n	800cfa2 <_malloc_r+0x46>
 800d02e:	230c      	movs	r3, #12
 800d030:	603b      	str	r3, [r7, #0]
 800d032:	4638      	mov	r0, r7
 800d034:	f000 fcf8 	bl	800da28 <__malloc_unlock>
 800d038:	e7a1      	b.n	800cf7e <_malloc_r+0x22>
 800d03a:	6025      	str	r5, [r4, #0]
 800d03c:	e7de      	b.n	800cffc <_malloc_r+0xa0>
 800d03e:	bf00      	nop
 800d040:	20002ae0 	.word	0x20002ae0

0800d044 <iprintf>:
 800d044:	b40f      	push	{r0, r1, r2, r3}
 800d046:	4b0a      	ldr	r3, [pc, #40]	; (800d070 <iprintf+0x2c>)
 800d048:	b513      	push	{r0, r1, r4, lr}
 800d04a:	681c      	ldr	r4, [r3, #0]
 800d04c:	b124      	cbz	r4, 800d058 <iprintf+0x14>
 800d04e:	69a3      	ldr	r3, [r4, #24]
 800d050:	b913      	cbnz	r3, 800d058 <iprintf+0x14>
 800d052:	4620      	mov	r0, r4
 800d054:	f000 fbca 	bl	800d7ec <__sinit>
 800d058:	ab05      	add	r3, sp, #20
 800d05a:	9a04      	ldr	r2, [sp, #16]
 800d05c:	68a1      	ldr	r1, [r4, #8]
 800d05e:	9301      	str	r3, [sp, #4]
 800d060:	4620      	mov	r0, r4
 800d062:	f000 fe6d 	bl	800dd40 <_vfiprintf_r>
 800d066:	b002      	add	sp, #8
 800d068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d06c:	b004      	add	sp, #16
 800d06e:	4770      	bx	lr
 800d070:	20000010 	.word	0x20000010

0800d074 <_puts_r>:
 800d074:	b570      	push	{r4, r5, r6, lr}
 800d076:	460e      	mov	r6, r1
 800d078:	4605      	mov	r5, r0
 800d07a:	b118      	cbz	r0, 800d084 <_puts_r+0x10>
 800d07c:	6983      	ldr	r3, [r0, #24]
 800d07e:	b90b      	cbnz	r3, 800d084 <_puts_r+0x10>
 800d080:	f000 fbb4 	bl	800d7ec <__sinit>
 800d084:	69ab      	ldr	r3, [r5, #24]
 800d086:	68ac      	ldr	r4, [r5, #8]
 800d088:	b913      	cbnz	r3, 800d090 <_puts_r+0x1c>
 800d08a:	4628      	mov	r0, r5
 800d08c:	f000 fbae 	bl	800d7ec <__sinit>
 800d090:	4b2c      	ldr	r3, [pc, #176]	; (800d144 <_puts_r+0xd0>)
 800d092:	429c      	cmp	r4, r3
 800d094:	d120      	bne.n	800d0d8 <_puts_r+0x64>
 800d096:	686c      	ldr	r4, [r5, #4]
 800d098:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d09a:	07db      	lsls	r3, r3, #31
 800d09c:	d405      	bmi.n	800d0aa <_puts_r+0x36>
 800d09e:	89a3      	ldrh	r3, [r4, #12]
 800d0a0:	0598      	lsls	r0, r3, #22
 800d0a2:	d402      	bmi.n	800d0aa <_puts_r+0x36>
 800d0a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0a6:	f000 fc51 	bl	800d94c <__retarget_lock_acquire_recursive>
 800d0aa:	89a3      	ldrh	r3, [r4, #12]
 800d0ac:	0719      	lsls	r1, r3, #28
 800d0ae:	d51d      	bpl.n	800d0ec <_puts_r+0x78>
 800d0b0:	6923      	ldr	r3, [r4, #16]
 800d0b2:	b1db      	cbz	r3, 800d0ec <_puts_r+0x78>
 800d0b4:	3e01      	subs	r6, #1
 800d0b6:	68a3      	ldr	r3, [r4, #8]
 800d0b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d0bc:	3b01      	subs	r3, #1
 800d0be:	60a3      	str	r3, [r4, #8]
 800d0c0:	bb39      	cbnz	r1, 800d112 <_puts_r+0x9e>
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	da38      	bge.n	800d138 <_puts_r+0xc4>
 800d0c6:	4622      	mov	r2, r4
 800d0c8:	210a      	movs	r1, #10
 800d0ca:	4628      	mov	r0, r5
 800d0cc:	f000 f996 	bl	800d3fc <__swbuf_r>
 800d0d0:	3001      	adds	r0, #1
 800d0d2:	d011      	beq.n	800d0f8 <_puts_r+0x84>
 800d0d4:	250a      	movs	r5, #10
 800d0d6:	e011      	b.n	800d0fc <_puts_r+0x88>
 800d0d8:	4b1b      	ldr	r3, [pc, #108]	; (800d148 <_puts_r+0xd4>)
 800d0da:	429c      	cmp	r4, r3
 800d0dc:	d101      	bne.n	800d0e2 <_puts_r+0x6e>
 800d0de:	68ac      	ldr	r4, [r5, #8]
 800d0e0:	e7da      	b.n	800d098 <_puts_r+0x24>
 800d0e2:	4b1a      	ldr	r3, [pc, #104]	; (800d14c <_puts_r+0xd8>)
 800d0e4:	429c      	cmp	r4, r3
 800d0e6:	bf08      	it	eq
 800d0e8:	68ec      	ldreq	r4, [r5, #12]
 800d0ea:	e7d5      	b.n	800d098 <_puts_r+0x24>
 800d0ec:	4621      	mov	r1, r4
 800d0ee:	4628      	mov	r0, r5
 800d0f0:	f000 f9d6 	bl	800d4a0 <__swsetup_r>
 800d0f4:	2800      	cmp	r0, #0
 800d0f6:	d0dd      	beq.n	800d0b4 <_puts_r+0x40>
 800d0f8:	f04f 35ff 	mov.w	r5, #4294967295
 800d0fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d0fe:	07da      	lsls	r2, r3, #31
 800d100:	d405      	bmi.n	800d10e <_puts_r+0x9a>
 800d102:	89a3      	ldrh	r3, [r4, #12]
 800d104:	059b      	lsls	r3, r3, #22
 800d106:	d402      	bmi.n	800d10e <_puts_r+0x9a>
 800d108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d10a:	f000 fc20 	bl	800d94e <__retarget_lock_release_recursive>
 800d10e:	4628      	mov	r0, r5
 800d110:	bd70      	pop	{r4, r5, r6, pc}
 800d112:	2b00      	cmp	r3, #0
 800d114:	da04      	bge.n	800d120 <_puts_r+0xac>
 800d116:	69a2      	ldr	r2, [r4, #24]
 800d118:	429a      	cmp	r2, r3
 800d11a:	dc06      	bgt.n	800d12a <_puts_r+0xb6>
 800d11c:	290a      	cmp	r1, #10
 800d11e:	d004      	beq.n	800d12a <_puts_r+0xb6>
 800d120:	6823      	ldr	r3, [r4, #0]
 800d122:	1c5a      	adds	r2, r3, #1
 800d124:	6022      	str	r2, [r4, #0]
 800d126:	7019      	strb	r1, [r3, #0]
 800d128:	e7c5      	b.n	800d0b6 <_puts_r+0x42>
 800d12a:	4622      	mov	r2, r4
 800d12c:	4628      	mov	r0, r5
 800d12e:	f000 f965 	bl	800d3fc <__swbuf_r>
 800d132:	3001      	adds	r0, #1
 800d134:	d1bf      	bne.n	800d0b6 <_puts_r+0x42>
 800d136:	e7df      	b.n	800d0f8 <_puts_r+0x84>
 800d138:	6823      	ldr	r3, [r4, #0]
 800d13a:	250a      	movs	r5, #10
 800d13c:	1c5a      	adds	r2, r3, #1
 800d13e:	6022      	str	r2, [r4, #0]
 800d140:	701d      	strb	r5, [r3, #0]
 800d142:	e7db      	b.n	800d0fc <_puts_r+0x88>
 800d144:	0800efc0 	.word	0x0800efc0
 800d148:	0800efe0 	.word	0x0800efe0
 800d14c:	0800efa0 	.word	0x0800efa0

0800d150 <puts>:
 800d150:	4b02      	ldr	r3, [pc, #8]	; (800d15c <puts+0xc>)
 800d152:	4601      	mov	r1, r0
 800d154:	6818      	ldr	r0, [r3, #0]
 800d156:	f7ff bf8d 	b.w	800d074 <_puts_r>
 800d15a:	bf00      	nop
 800d15c:	20000010 	.word	0x20000010

0800d160 <_sbrk_r>:
 800d160:	b538      	push	{r3, r4, r5, lr}
 800d162:	4d06      	ldr	r5, [pc, #24]	; (800d17c <_sbrk_r+0x1c>)
 800d164:	2300      	movs	r3, #0
 800d166:	4604      	mov	r4, r0
 800d168:	4608      	mov	r0, r1
 800d16a:	602b      	str	r3, [r5, #0]
 800d16c:	f7f4 fca0 	bl	8001ab0 <_sbrk>
 800d170:	1c43      	adds	r3, r0, #1
 800d172:	d102      	bne.n	800d17a <_sbrk_r+0x1a>
 800d174:	682b      	ldr	r3, [r5, #0]
 800d176:	b103      	cbz	r3, 800d17a <_sbrk_r+0x1a>
 800d178:	6023      	str	r3, [r4, #0]
 800d17a:	bd38      	pop	{r3, r4, r5, pc}
 800d17c:	20002aec 	.word	0x20002aec

0800d180 <siprintf>:
 800d180:	b40e      	push	{r1, r2, r3}
 800d182:	b500      	push	{lr}
 800d184:	b09c      	sub	sp, #112	; 0x70
 800d186:	ab1d      	add	r3, sp, #116	; 0x74
 800d188:	9002      	str	r0, [sp, #8]
 800d18a:	9006      	str	r0, [sp, #24]
 800d18c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d190:	4809      	ldr	r0, [pc, #36]	; (800d1b8 <siprintf+0x38>)
 800d192:	9107      	str	r1, [sp, #28]
 800d194:	9104      	str	r1, [sp, #16]
 800d196:	4909      	ldr	r1, [pc, #36]	; (800d1bc <siprintf+0x3c>)
 800d198:	f853 2b04 	ldr.w	r2, [r3], #4
 800d19c:	9105      	str	r1, [sp, #20]
 800d19e:	6800      	ldr	r0, [r0, #0]
 800d1a0:	9301      	str	r3, [sp, #4]
 800d1a2:	a902      	add	r1, sp, #8
 800d1a4:	f000 fca2 	bl	800daec <_svfiprintf_r>
 800d1a8:	9b02      	ldr	r3, [sp, #8]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	701a      	strb	r2, [r3, #0]
 800d1ae:	b01c      	add	sp, #112	; 0x70
 800d1b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1b4:	b003      	add	sp, #12
 800d1b6:	4770      	bx	lr
 800d1b8:	20000010 	.word	0x20000010
 800d1bc:	ffff0208 	.word	0xffff0208

0800d1c0 <strchr>:
 800d1c0:	b2c9      	uxtb	r1, r1
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1c8:	b11a      	cbz	r2, 800d1d2 <strchr+0x12>
 800d1ca:	428a      	cmp	r2, r1
 800d1cc:	d1f9      	bne.n	800d1c2 <strchr+0x2>
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	4770      	bx	lr
 800d1d2:	2900      	cmp	r1, #0
 800d1d4:	bf18      	it	ne
 800d1d6:	2300      	movne	r3, #0
 800d1d8:	e7f9      	b.n	800d1ce <strchr+0xe>

0800d1da <strncpy>:
 800d1da:	b510      	push	{r4, lr}
 800d1dc:	3901      	subs	r1, #1
 800d1de:	4603      	mov	r3, r0
 800d1e0:	b132      	cbz	r2, 800d1f0 <strncpy+0x16>
 800d1e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d1e6:	f803 4b01 	strb.w	r4, [r3], #1
 800d1ea:	3a01      	subs	r2, #1
 800d1ec:	2c00      	cmp	r4, #0
 800d1ee:	d1f7      	bne.n	800d1e0 <strncpy+0x6>
 800d1f0:	441a      	add	r2, r3
 800d1f2:	2100      	movs	r1, #0
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d100      	bne.n	800d1fa <strncpy+0x20>
 800d1f8:	bd10      	pop	{r4, pc}
 800d1fa:	f803 1b01 	strb.w	r1, [r3], #1
 800d1fe:	e7f9      	b.n	800d1f4 <strncpy+0x1a>

0800d200 <strstr>:
 800d200:	780a      	ldrb	r2, [r1, #0]
 800d202:	b570      	push	{r4, r5, r6, lr}
 800d204:	b96a      	cbnz	r2, 800d222 <strstr+0x22>
 800d206:	bd70      	pop	{r4, r5, r6, pc}
 800d208:	429a      	cmp	r2, r3
 800d20a:	d109      	bne.n	800d220 <strstr+0x20>
 800d20c:	460c      	mov	r4, r1
 800d20e:	4605      	mov	r5, r0
 800d210:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d214:	2b00      	cmp	r3, #0
 800d216:	d0f6      	beq.n	800d206 <strstr+0x6>
 800d218:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d21c:	429e      	cmp	r6, r3
 800d21e:	d0f7      	beq.n	800d210 <strstr+0x10>
 800d220:	3001      	adds	r0, #1
 800d222:	7803      	ldrb	r3, [r0, #0]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d1ef      	bne.n	800d208 <strstr+0x8>
 800d228:	4618      	mov	r0, r3
 800d22a:	e7ec      	b.n	800d206 <strstr+0x6>

0800d22c <strtok>:
 800d22c:	4b16      	ldr	r3, [pc, #88]	; (800d288 <strtok+0x5c>)
 800d22e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d230:	681e      	ldr	r6, [r3, #0]
 800d232:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800d234:	4605      	mov	r5, r0
 800d236:	b9fc      	cbnz	r4, 800d278 <strtok+0x4c>
 800d238:	2050      	movs	r0, #80	; 0x50
 800d23a:	9101      	str	r1, [sp, #4]
 800d23c:	f7ff fdec 	bl	800ce18 <malloc>
 800d240:	9901      	ldr	r1, [sp, #4]
 800d242:	65b0      	str	r0, [r6, #88]	; 0x58
 800d244:	4602      	mov	r2, r0
 800d246:	b920      	cbnz	r0, 800d252 <strtok+0x26>
 800d248:	4b10      	ldr	r3, [pc, #64]	; (800d28c <strtok+0x60>)
 800d24a:	4811      	ldr	r0, [pc, #68]	; (800d290 <strtok+0x64>)
 800d24c:	2157      	movs	r1, #87	; 0x57
 800d24e:	f000 f995 	bl	800d57c <__assert_func>
 800d252:	e9c0 4400 	strd	r4, r4, [r0]
 800d256:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d25a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d25e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800d262:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800d266:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800d26a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800d26e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800d272:	6184      	str	r4, [r0, #24]
 800d274:	7704      	strb	r4, [r0, #28]
 800d276:	6244      	str	r4, [r0, #36]	; 0x24
 800d278:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800d27a:	2301      	movs	r3, #1
 800d27c:	4628      	mov	r0, r5
 800d27e:	b002      	add	sp, #8
 800d280:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d284:	f000 b806 	b.w	800d294 <__strtok_r>
 800d288:	20000010 	.word	0x20000010
 800d28c:	0800edec 	.word	0x0800edec
 800d290:	0800ee03 	.word	0x0800ee03

0800d294 <__strtok_r>:
 800d294:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d296:	b908      	cbnz	r0, 800d29c <__strtok_r+0x8>
 800d298:	6810      	ldr	r0, [r2, #0]
 800d29a:	b188      	cbz	r0, 800d2c0 <__strtok_r+0x2c>
 800d29c:	4604      	mov	r4, r0
 800d29e:	4620      	mov	r0, r4
 800d2a0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d2a4:	460f      	mov	r7, r1
 800d2a6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d2aa:	b91e      	cbnz	r6, 800d2b4 <__strtok_r+0x20>
 800d2ac:	b965      	cbnz	r5, 800d2c8 <__strtok_r+0x34>
 800d2ae:	6015      	str	r5, [r2, #0]
 800d2b0:	4628      	mov	r0, r5
 800d2b2:	e005      	b.n	800d2c0 <__strtok_r+0x2c>
 800d2b4:	42b5      	cmp	r5, r6
 800d2b6:	d1f6      	bne.n	800d2a6 <__strtok_r+0x12>
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d1f0      	bne.n	800d29e <__strtok_r+0xa>
 800d2bc:	6014      	str	r4, [r2, #0]
 800d2be:	7003      	strb	r3, [r0, #0]
 800d2c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2c2:	461c      	mov	r4, r3
 800d2c4:	e00c      	b.n	800d2e0 <__strtok_r+0x4c>
 800d2c6:	b915      	cbnz	r5, 800d2ce <__strtok_r+0x3a>
 800d2c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d2cc:	460e      	mov	r6, r1
 800d2ce:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d2d2:	42ab      	cmp	r3, r5
 800d2d4:	d1f7      	bne.n	800d2c6 <__strtok_r+0x32>
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d0f3      	beq.n	800d2c2 <__strtok_r+0x2e>
 800d2da:	2300      	movs	r3, #0
 800d2dc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d2e0:	6014      	str	r4, [r2, #0]
 800d2e2:	e7ed      	b.n	800d2c0 <__strtok_r+0x2c>

0800d2e4 <_strtol_l.constprop.0>:
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2ea:	d001      	beq.n	800d2f0 <_strtol_l.constprop.0+0xc>
 800d2ec:	2b24      	cmp	r3, #36	; 0x24
 800d2ee:	d906      	bls.n	800d2fe <_strtol_l.constprop.0+0x1a>
 800d2f0:	f7ff fd68 	bl	800cdc4 <__errno>
 800d2f4:	2316      	movs	r3, #22
 800d2f6:	6003      	str	r3, [r0, #0]
 800d2f8:	2000      	movs	r0, #0
 800d2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d3e4 <_strtol_l.constprop.0+0x100>
 800d302:	460d      	mov	r5, r1
 800d304:	462e      	mov	r6, r5
 800d306:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d30a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d30e:	f017 0708 	ands.w	r7, r7, #8
 800d312:	d1f7      	bne.n	800d304 <_strtol_l.constprop.0+0x20>
 800d314:	2c2d      	cmp	r4, #45	; 0x2d
 800d316:	d132      	bne.n	800d37e <_strtol_l.constprop.0+0x9a>
 800d318:	782c      	ldrb	r4, [r5, #0]
 800d31a:	2701      	movs	r7, #1
 800d31c:	1cb5      	adds	r5, r6, #2
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d05b      	beq.n	800d3da <_strtol_l.constprop.0+0xf6>
 800d322:	2b10      	cmp	r3, #16
 800d324:	d109      	bne.n	800d33a <_strtol_l.constprop.0+0x56>
 800d326:	2c30      	cmp	r4, #48	; 0x30
 800d328:	d107      	bne.n	800d33a <_strtol_l.constprop.0+0x56>
 800d32a:	782c      	ldrb	r4, [r5, #0]
 800d32c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d330:	2c58      	cmp	r4, #88	; 0x58
 800d332:	d14d      	bne.n	800d3d0 <_strtol_l.constprop.0+0xec>
 800d334:	786c      	ldrb	r4, [r5, #1]
 800d336:	2310      	movs	r3, #16
 800d338:	3502      	adds	r5, #2
 800d33a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d33e:	f108 38ff 	add.w	r8, r8, #4294967295
 800d342:	f04f 0c00 	mov.w	ip, #0
 800d346:	fbb8 f9f3 	udiv	r9, r8, r3
 800d34a:	4666      	mov	r6, ip
 800d34c:	fb03 8a19 	mls	sl, r3, r9, r8
 800d350:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d354:	f1be 0f09 	cmp.w	lr, #9
 800d358:	d816      	bhi.n	800d388 <_strtol_l.constprop.0+0xa4>
 800d35a:	4674      	mov	r4, lr
 800d35c:	42a3      	cmp	r3, r4
 800d35e:	dd24      	ble.n	800d3aa <_strtol_l.constprop.0+0xc6>
 800d360:	f1bc 0f00 	cmp.w	ip, #0
 800d364:	db1e      	blt.n	800d3a4 <_strtol_l.constprop.0+0xc0>
 800d366:	45b1      	cmp	r9, r6
 800d368:	d31c      	bcc.n	800d3a4 <_strtol_l.constprop.0+0xc0>
 800d36a:	d101      	bne.n	800d370 <_strtol_l.constprop.0+0x8c>
 800d36c:	45a2      	cmp	sl, r4
 800d36e:	db19      	blt.n	800d3a4 <_strtol_l.constprop.0+0xc0>
 800d370:	fb06 4603 	mla	r6, r6, r3, r4
 800d374:	f04f 0c01 	mov.w	ip, #1
 800d378:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d37c:	e7e8      	b.n	800d350 <_strtol_l.constprop.0+0x6c>
 800d37e:	2c2b      	cmp	r4, #43	; 0x2b
 800d380:	bf04      	itt	eq
 800d382:	782c      	ldrbeq	r4, [r5, #0]
 800d384:	1cb5      	addeq	r5, r6, #2
 800d386:	e7ca      	b.n	800d31e <_strtol_l.constprop.0+0x3a>
 800d388:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d38c:	f1be 0f19 	cmp.w	lr, #25
 800d390:	d801      	bhi.n	800d396 <_strtol_l.constprop.0+0xb2>
 800d392:	3c37      	subs	r4, #55	; 0x37
 800d394:	e7e2      	b.n	800d35c <_strtol_l.constprop.0+0x78>
 800d396:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d39a:	f1be 0f19 	cmp.w	lr, #25
 800d39e:	d804      	bhi.n	800d3aa <_strtol_l.constprop.0+0xc6>
 800d3a0:	3c57      	subs	r4, #87	; 0x57
 800d3a2:	e7db      	b.n	800d35c <_strtol_l.constprop.0+0x78>
 800d3a4:	f04f 3cff 	mov.w	ip, #4294967295
 800d3a8:	e7e6      	b.n	800d378 <_strtol_l.constprop.0+0x94>
 800d3aa:	f1bc 0f00 	cmp.w	ip, #0
 800d3ae:	da05      	bge.n	800d3bc <_strtol_l.constprop.0+0xd8>
 800d3b0:	2322      	movs	r3, #34	; 0x22
 800d3b2:	6003      	str	r3, [r0, #0]
 800d3b4:	4646      	mov	r6, r8
 800d3b6:	b942      	cbnz	r2, 800d3ca <_strtol_l.constprop.0+0xe6>
 800d3b8:	4630      	mov	r0, r6
 800d3ba:	e79e      	b.n	800d2fa <_strtol_l.constprop.0+0x16>
 800d3bc:	b107      	cbz	r7, 800d3c0 <_strtol_l.constprop.0+0xdc>
 800d3be:	4276      	negs	r6, r6
 800d3c0:	2a00      	cmp	r2, #0
 800d3c2:	d0f9      	beq.n	800d3b8 <_strtol_l.constprop.0+0xd4>
 800d3c4:	f1bc 0f00 	cmp.w	ip, #0
 800d3c8:	d000      	beq.n	800d3cc <_strtol_l.constprop.0+0xe8>
 800d3ca:	1e69      	subs	r1, r5, #1
 800d3cc:	6011      	str	r1, [r2, #0]
 800d3ce:	e7f3      	b.n	800d3b8 <_strtol_l.constprop.0+0xd4>
 800d3d0:	2430      	movs	r4, #48	; 0x30
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d1b1      	bne.n	800d33a <_strtol_l.constprop.0+0x56>
 800d3d6:	2308      	movs	r3, #8
 800d3d8:	e7af      	b.n	800d33a <_strtol_l.constprop.0+0x56>
 800d3da:	2c30      	cmp	r4, #48	; 0x30
 800d3dc:	d0a5      	beq.n	800d32a <_strtol_l.constprop.0+0x46>
 800d3de:	230a      	movs	r3, #10
 800d3e0:	e7ab      	b.n	800d33a <_strtol_l.constprop.0+0x56>
 800d3e2:	bf00      	nop
 800d3e4:	0800ee9d 	.word	0x0800ee9d

0800d3e8 <strtol>:
 800d3e8:	4613      	mov	r3, r2
 800d3ea:	460a      	mov	r2, r1
 800d3ec:	4601      	mov	r1, r0
 800d3ee:	4802      	ldr	r0, [pc, #8]	; (800d3f8 <strtol+0x10>)
 800d3f0:	6800      	ldr	r0, [r0, #0]
 800d3f2:	f7ff bf77 	b.w	800d2e4 <_strtol_l.constprop.0>
 800d3f6:	bf00      	nop
 800d3f8:	20000010 	.word	0x20000010

0800d3fc <__swbuf_r>:
 800d3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3fe:	460e      	mov	r6, r1
 800d400:	4614      	mov	r4, r2
 800d402:	4605      	mov	r5, r0
 800d404:	b118      	cbz	r0, 800d40e <__swbuf_r+0x12>
 800d406:	6983      	ldr	r3, [r0, #24]
 800d408:	b90b      	cbnz	r3, 800d40e <__swbuf_r+0x12>
 800d40a:	f000 f9ef 	bl	800d7ec <__sinit>
 800d40e:	4b21      	ldr	r3, [pc, #132]	; (800d494 <__swbuf_r+0x98>)
 800d410:	429c      	cmp	r4, r3
 800d412:	d12b      	bne.n	800d46c <__swbuf_r+0x70>
 800d414:	686c      	ldr	r4, [r5, #4]
 800d416:	69a3      	ldr	r3, [r4, #24]
 800d418:	60a3      	str	r3, [r4, #8]
 800d41a:	89a3      	ldrh	r3, [r4, #12]
 800d41c:	071a      	lsls	r2, r3, #28
 800d41e:	d52f      	bpl.n	800d480 <__swbuf_r+0x84>
 800d420:	6923      	ldr	r3, [r4, #16]
 800d422:	b36b      	cbz	r3, 800d480 <__swbuf_r+0x84>
 800d424:	6923      	ldr	r3, [r4, #16]
 800d426:	6820      	ldr	r0, [r4, #0]
 800d428:	1ac0      	subs	r0, r0, r3
 800d42a:	6963      	ldr	r3, [r4, #20]
 800d42c:	b2f6      	uxtb	r6, r6
 800d42e:	4283      	cmp	r3, r0
 800d430:	4637      	mov	r7, r6
 800d432:	dc04      	bgt.n	800d43e <__swbuf_r+0x42>
 800d434:	4621      	mov	r1, r4
 800d436:	4628      	mov	r0, r5
 800d438:	f000 f944 	bl	800d6c4 <_fflush_r>
 800d43c:	bb30      	cbnz	r0, 800d48c <__swbuf_r+0x90>
 800d43e:	68a3      	ldr	r3, [r4, #8]
 800d440:	3b01      	subs	r3, #1
 800d442:	60a3      	str	r3, [r4, #8]
 800d444:	6823      	ldr	r3, [r4, #0]
 800d446:	1c5a      	adds	r2, r3, #1
 800d448:	6022      	str	r2, [r4, #0]
 800d44a:	701e      	strb	r6, [r3, #0]
 800d44c:	6963      	ldr	r3, [r4, #20]
 800d44e:	3001      	adds	r0, #1
 800d450:	4283      	cmp	r3, r0
 800d452:	d004      	beq.n	800d45e <__swbuf_r+0x62>
 800d454:	89a3      	ldrh	r3, [r4, #12]
 800d456:	07db      	lsls	r3, r3, #31
 800d458:	d506      	bpl.n	800d468 <__swbuf_r+0x6c>
 800d45a:	2e0a      	cmp	r6, #10
 800d45c:	d104      	bne.n	800d468 <__swbuf_r+0x6c>
 800d45e:	4621      	mov	r1, r4
 800d460:	4628      	mov	r0, r5
 800d462:	f000 f92f 	bl	800d6c4 <_fflush_r>
 800d466:	b988      	cbnz	r0, 800d48c <__swbuf_r+0x90>
 800d468:	4638      	mov	r0, r7
 800d46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d46c:	4b0a      	ldr	r3, [pc, #40]	; (800d498 <__swbuf_r+0x9c>)
 800d46e:	429c      	cmp	r4, r3
 800d470:	d101      	bne.n	800d476 <__swbuf_r+0x7a>
 800d472:	68ac      	ldr	r4, [r5, #8]
 800d474:	e7cf      	b.n	800d416 <__swbuf_r+0x1a>
 800d476:	4b09      	ldr	r3, [pc, #36]	; (800d49c <__swbuf_r+0xa0>)
 800d478:	429c      	cmp	r4, r3
 800d47a:	bf08      	it	eq
 800d47c:	68ec      	ldreq	r4, [r5, #12]
 800d47e:	e7ca      	b.n	800d416 <__swbuf_r+0x1a>
 800d480:	4621      	mov	r1, r4
 800d482:	4628      	mov	r0, r5
 800d484:	f000 f80c 	bl	800d4a0 <__swsetup_r>
 800d488:	2800      	cmp	r0, #0
 800d48a:	d0cb      	beq.n	800d424 <__swbuf_r+0x28>
 800d48c:	f04f 37ff 	mov.w	r7, #4294967295
 800d490:	e7ea      	b.n	800d468 <__swbuf_r+0x6c>
 800d492:	bf00      	nop
 800d494:	0800efc0 	.word	0x0800efc0
 800d498:	0800efe0 	.word	0x0800efe0
 800d49c:	0800efa0 	.word	0x0800efa0

0800d4a0 <__swsetup_r>:
 800d4a0:	4b32      	ldr	r3, [pc, #200]	; (800d56c <__swsetup_r+0xcc>)
 800d4a2:	b570      	push	{r4, r5, r6, lr}
 800d4a4:	681d      	ldr	r5, [r3, #0]
 800d4a6:	4606      	mov	r6, r0
 800d4a8:	460c      	mov	r4, r1
 800d4aa:	b125      	cbz	r5, 800d4b6 <__swsetup_r+0x16>
 800d4ac:	69ab      	ldr	r3, [r5, #24]
 800d4ae:	b913      	cbnz	r3, 800d4b6 <__swsetup_r+0x16>
 800d4b0:	4628      	mov	r0, r5
 800d4b2:	f000 f99b 	bl	800d7ec <__sinit>
 800d4b6:	4b2e      	ldr	r3, [pc, #184]	; (800d570 <__swsetup_r+0xd0>)
 800d4b8:	429c      	cmp	r4, r3
 800d4ba:	d10f      	bne.n	800d4dc <__swsetup_r+0x3c>
 800d4bc:	686c      	ldr	r4, [r5, #4]
 800d4be:	89a3      	ldrh	r3, [r4, #12]
 800d4c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4c4:	0719      	lsls	r1, r3, #28
 800d4c6:	d42c      	bmi.n	800d522 <__swsetup_r+0x82>
 800d4c8:	06dd      	lsls	r5, r3, #27
 800d4ca:	d411      	bmi.n	800d4f0 <__swsetup_r+0x50>
 800d4cc:	2309      	movs	r3, #9
 800d4ce:	6033      	str	r3, [r6, #0]
 800d4d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d4d4:	81a3      	strh	r3, [r4, #12]
 800d4d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d4da:	e03e      	b.n	800d55a <__swsetup_r+0xba>
 800d4dc:	4b25      	ldr	r3, [pc, #148]	; (800d574 <__swsetup_r+0xd4>)
 800d4de:	429c      	cmp	r4, r3
 800d4e0:	d101      	bne.n	800d4e6 <__swsetup_r+0x46>
 800d4e2:	68ac      	ldr	r4, [r5, #8]
 800d4e4:	e7eb      	b.n	800d4be <__swsetup_r+0x1e>
 800d4e6:	4b24      	ldr	r3, [pc, #144]	; (800d578 <__swsetup_r+0xd8>)
 800d4e8:	429c      	cmp	r4, r3
 800d4ea:	bf08      	it	eq
 800d4ec:	68ec      	ldreq	r4, [r5, #12]
 800d4ee:	e7e6      	b.n	800d4be <__swsetup_r+0x1e>
 800d4f0:	0758      	lsls	r0, r3, #29
 800d4f2:	d512      	bpl.n	800d51a <__swsetup_r+0x7a>
 800d4f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d4f6:	b141      	cbz	r1, 800d50a <__swsetup_r+0x6a>
 800d4f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d4fc:	4299      	cmp	r1, r3
 800d4fe:	d002      	beq.n	800d506 <__swsetup_r+0x66>
 800d500:	4630      	mov	r0, r6
 800d502:	f7ff fcbf 	bl	800ce84 <_free_r>
 800d506:	2300      	movs	r3, #0
 800d508:	6363      	str	r3, [r4, #52]	; 0x34
 800d50a:	89a3      	ldrh	r3, [r4, #12]
 800d50c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d510:	81a3      	strh	r3, [r4, #12]
 800d512:	2300      	movs	r3, #0
 800d514:	6063      	str	r3, [r4, #4]
 800d516:	6923      	ldr	r3, [r4, #16]
 800d518:	6023      	str	r3, [r4, #0]
 800d51a:	89a3      	ldrh	r3, [r4, #12]
 800d51c:	f043 0308 	orr.w	r3, r3, #8
 800d520:	81a3      	strh	r3, [r4, #12]
 800d522:	6923      	ldr	r3, [r4, #16]
 800d524:	b94b      	cbnz	r3, 800d53a <__swsetup_r+0x9a>
 800d526:	89a3      	ldrh	r3, [r4, #12]
 800d528:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d52c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d530:	d003      	beq.n	800d53a <__swsetup_r+0x9a>
 800d532:	4621      	mov	r1, r4
 800d534:	4630      	mov	r0, r6
 800d536:	f000 fa31 	bl	800d99c <__smakebuf_r>
 800d53a:	89a0      	ldrh	r0, [r4, #12]
 800d53c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d540:	f010 0301 	ands.w	r3, r0, #1
 800d544:	d00a      	beq.n	800d55c <__swsetup_r+0xbc>
 800d546:	2300      	movs	r3, #0
 800d548:	60a3      	str	r3, [r4, #8]
 800d54a:	6963      	ldr	r3, [r4, #20]
 800d54c:	425b      	negs	r3, r3
 800d54e:	61a3      	str	r3, [r4, #24]
 800d550:	6923      	ldr	r3, [r4, #16]
 800d552:	b943      	cbnz	r3, 800d566 <__swsetup_r+0xc6>
 800d554:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d558:	d1ba      	bne.n	800d4d0 <__swsetup_r+0x30>
 800d55a:	bd70      	pop	{r4, r5, r6, pc}
 800d55c:	0781      	lsls	r1, r0, #30
 800d55e:	bf58      	it	pl
 800d560:	6963      	ldrpl	r3, [r4, #20]
 800d562:	60a3      	str	r3, [r4, #8]
 800d564:	e7f4      	b.n	800d550 <__swsetup_r+0xb0>
 800d566:	2000      	movs	r0, #0
 800d568:	e7f7      	b.n	800d55a <__swsetup_r+0xba>
 800d56a:	bf00      	nop
 800d56c:	20000010 	.word	0x20000010
 800d570:	0800efc0 	.word	0x0800efc0
 800d574:	0800efe0 	.word	0x0800efe0
 800d578:	0800efa0 	.word	0x0800efa0

0800d57c <__assert_func>:
 800d57c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d57e:	4614      	mov	r4, r2
 800d580:	461a      	mov	r2, r3
 800d582:	4b09      	ldr	r3, [pc, #36]	; (800d5a8 <__assert_func+0x2c>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	4605      	mov	r5, r0
 800d588:	68d8      	ldr	r0, [r3, #12]
 800d58a:	b14c      	cbz	r4, 800d5a0 <__assert_func+0x24>
 800d58c:	4b07      	ldr	r3, [pc, #28]	; (800d5ac <__assert_func+0x30>)
 800d58e:	9100      	str	r1, [sp, #0]
 800d590:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d594:	4906      	ldr	r1, [pc, #24]	; (800d5b0 <__assert_func+0x34>)
 800d596:	462b      	mov	r3, r5
 800d598:	f000 f9a6 	bl	800d8e8 <fiprintf>
 800d59c:	f000 feea 	bl	800e374 <abort>
 800d5a0:	4b04      	ldr	r3, [pc, #16]	; (800d5b4 <__assert_func+0x38>)
 800d5a2:	461c      	mov	r4, r3
 800d5a4:	e7f3      	b.n	800d58e <__assert_func+0x12>
 800d5a6:	bf00      	nop
 800d5a8:	20000010 	.word	0x20000010
 800d5ac:	0800ee60 	.word	0x0800ee60
 800d5b0:	0800ee6d 	.word	0x0800ee6d
 800d5b4:	0800ee9b 	.word	0x0800ee9b

0800d5b8 <__sflush_r>:
 800d5b8:	898a      	ldrh	r2, [r1, #12]
 800d5ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5be:	4605      	mov	r5, r0
 800d5c0:	0710      	lsls	r0, r2, #28
 800d5c2:	460c      	mov	r4, r1
 800d5c4:	d458      	bmi.n	800d678 <__sflush_r+0xc0>
 800d5c6:	684b      	ldr	r3, [r1, #4]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	dc05      	bgt.n	800d5d8 <__sflush_r+0x20>
 800d5cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	dc02      	bgt.n	800d5d8 <__sflush_r+0x20>
 800d5d2:	2000      	movs	r0, #0
 800d5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5da:	2e00      	cmp	r6, #0
 800d5dc:	d0f9      	beq.n	800d5d2 <__sflush_r+0x1a>
 800d5de:	2300      	movs	r3, #0
 800d5e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d5e4:	682f      	ldr	r7, [r5, #0]
 800d5e6:	602b      	str	r3, [r5, #0]
 800d5e8:	d032      	beq.n	800d650 <__sflush_r+0x98>
 800d5ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d5ec:	89a3      	ldrh	r3, [r4, #12]
 800d5ee:	075a      	lsls	r2, r3, #29
 800d5f0:	d505      	bpl.n	800d5fe <__sflush_r+0x46>
 800d5f2:	6863      	ldr	r3, [r4, #4]
 800d5f4:	1ac0      	subs	r0, r0, r3
 800d5f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d5f8:	b10b      	cbz	r3, 800d5fe <__sflush_r+0x46>
 800d5fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d5fc:	1ac0      	subs	r0, r0, r3
 800d5fe:	2300      	movs	r3, #0
 800d600:	4602      	mov	r2, r0
 800d602:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d604:	6a21      	ldr	r1, [r4, #32]
 800d606:	4628      	mov	r0, r5
 800d608:	47b0      	blx	r6
 800d60a:	1c43      	adds	r3, r0, #1
 800d60c:	89a3      	ldrh	r3, [r4, #12]
 800d60e:	d106      	bne.n	800d61e <__sflush_r+0x66>
 800d610:	6829      	ldr	r1, [r5, #0]
 800d612:	291d      	cmp	r1, #29
 800d614:	d82c      	bhi.n	800d670 <__sflush_r+0xb8>
 800d616:	4a2a      	ldr	r2, [pc, #168]	; (800d6c0 <__sflush_r+0x108>)
 800d618:	40ca      	lsrs	r2, r1
 800d61a:	07d6      	lsls	r6, r2, #31
 800d61c:	d528      	bpl.n	800d670 <__sflush_r+0xb8>
 800d61e:	2200      	movs	r2, #0
 800d620:	6062      	str	r2, [r4, #4]
 800d622:	04d9      	lsls	r1, r3, #19
 800d624:	6922      	ldr	r2, [r4, #16]
 800d626:	6022      	str	r2, [r4, #0]
 800d628:	d504      	bpl.n	800d634 <__sflush_r+0x7c>
 800d62a:	1c42      	adds	r2, r0, #1
 800d62c:	d101      	bne.n	800d632 <__sflush_r+0x7a>
 800d62e:	682b      	ldr	r3, [r5, #0]
 800d630:	b903      	cbnz	r3, 800d634 <__sflush_r+0x7c>
 800d632:	6560      	str	r0, [r4, #84]	; 0x54
 800d634:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d636:	602f      	str	r7, [r5, #0]
 800d638:	2900      	cmp	r1, #0
 800d63a:	d0ca      	beq.n	800d5d2 <__sflush_r+0x1a>
 800d63c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d640:	4299      	cmp	r1, r3
 800d642:	d002      	beq.n	800d64a <__sflush_r+0x92>
 800d644:	4628      	mov	r0, r5
 800d646:	f7ff fc1d 	bl	800ce84 <_free_r>
 800d64a:	2000      	movs	r0, #0
 800d64c:	6360      	str	r0, [r4, #52]	; 0x34
 800d64e:	e7c1      	b.n	800d5d4 <__sflush_r+0x1c>
 800d650:	6a21      	ldr	r1, [r4, #32]
 800d652:	2301      	movs	r3, #1
 800d654:	4628      	mov	r0, r5
 800d656:	47b0      	blx	r6
 800d658:	1c41      	adds	r1, r0, #1
 800d65a:	d1c7      	bne.n	800d5ec <__sflush_r+0x34>
 800d65c:	682b      	ldr	r3, [r5, #0]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d0c4      	beq.n	800d5ec <__sflush_r+0x34>
 800d662:	2b1d      	cmp	r3, #29
 800d664:	d001      	beq.n	800d66a <__sflush_r+0xb2>
 800d666:	2b16      	cmp	r3, #22
 800d668:	d101      	bne.n	800d66e <__sflush_r+0xb6>
 800d66a:	602f      	str	r7, [r5, #0]
 800d66c:	e7b1      	b.n	800d5d2 <__sflush_r+0x1a>
 800d66e:	89a3      	ldrh	r3, [r4, #12]
 800d670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d674:	81a3      	strh	r3, [r4, #12]
 800d676:	e7ad      	b.n	800d5d4 <__sflush_r+0x1c>
 800d678:	690f      	ldr	r7, [r1, #16]
 800d67a:	2f00      	cmp	r7, #0
 800d67c:	d0a9      	beq.n	800d5d2 <__sflush_r+0x1a>
 800d67e:	0793      	lsls	r3, r2, #30
 800d680:	680e      	ldr	r6, [r1, #0]
 800d682:	bf08      	it	eq
 800d684:	694b      	ldreq	r3, [r1, #20]
 800d686:	600f      	str	r7, [r1, #0]
 800d688:	bf18      	it	ne
 800d68a:	2300      	movne	r3, #0
 800d68c:	eba6 0807 	sub.w	r8, r6, r7
 800d690:	608b      	str	r3, [r1, #8]
 800d692:	f1b8 0f00 	cmp.w	r8, #0
 800d696:	dd9c      	ble.n	800d5d2 <__sflush_r+0x1a>
 800d698:	6a21      	ldr	r1, [r4, #32]
 800d69a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d69c:	4643      	mov	r3, r8
 800d69e:	463a      	mov	r2, r7
 800d6a0:	4628      	mov	r0, r5
 800d6a2:	47b0      	blx	r6
 800d6a4:	2800      	cmp	r0, #0
 800d6a6:	dc06      	bgt.n	800d6b6 <__sflush_r+0xfe>
 800d6a8:	89a3      	ldrh	r3, [r4, #12]
 800d6aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6ae:	81a3      	strh	r3, [r4, #12]
 800d6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b4:	e78e      	b.n	800d5d4 <__sflush_r+0x1c>
 800d6b6:	4407      	add	r7, r0
 800d6b8:	eba8 0800 	sub.w	r8, r8, r0
 800d6bc:	e7e9      	b.n	800d692 <__sflush_r+0xda>
 800d6be:	bf00      	nop
 800d6c0:	20400001 	.word	0x20400001

0800d6c4 <_fflush_r>:
 800d6c4:	b538      	push	{r3, r4, r5, lr}
 800d6c6:	690b      	ldr	r3, [r1, #16]
 800d6c8:	4605      	mov	r5, r0
 800d6ca:	460c      	mov	r4, r1
 800d6cc:	b913      	cbnz	r3, 800d6d4 <_fflush_r+0x10>
 800d6ce:	2500      	movs	r5, #0
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	bd38      	pop	{r3, r4, r5, pc}
 800d6d4:	b118      	cbz	r0, 800d6de <_fflush_r+0x1a>
 800d6d6:	6983      	ldr	r3, [r0, #24]
 800d6d8:	b90b      	cbnz	r3, 800d6de <_fflush_r+0x1a>
 800d6da:	f000 f887 	bl	800d7ec <__sinit>
 800d6de:	4b14      	ldr	r3, [pc, #80]	; (800d730 <_fflush_r+0x6c>)
 800d6e0:	429c      	cmp	r4, r3
 800d6e2:	d11b      	bne.n	800d71c <_fflush_r+0x58>
 800d6e4:	686c      	ldr	r4, [r5, #4]
 800d6e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d0ef      	beq.n	800d6ce <_fflush_r+0xa>
 800d6ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d6f0:	07d0      	lsls	r0, r2, #31
 800d6f2:	d404      	bmi.n	800d6fe <_fflush_r+0x3a>
 800d6f4:	0599      	lsls	r1, r3, #22
 800d6f6:	d402      	bmi.n	800d6fe <_fflush_r+0x3a>
 800d6f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6fa:	f000 f927 	bl	800d94c <__retarget_lock_acquire_recursive>
 800d6fe:	4628      	mov	r0, r5
 800d700:	4621      	mov	r1, r4
 800d702:	f7ff ff59 	bl	800d5b8 <__sflush_r>
 800d706:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d708:	07da      	lsls	r2, r3, #31
 800d70a:	4605      	mov	r5, r0
 800d70c:	d4e0      	bmi.n	800d6d0 <_fflush_r+0xc>
 800d70e:	89a3      	ldrh	r3, [r4, #12]
 800d710:	059b      	lsls	r3, r3, #22
 800d712:	d4dd      	bmi.n	800d6d0 <_fflush_r+0xc>
 800d714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d716:	f000 f91a 	bl	800d94e <__retarget_lock_release_recursive>
 800d71a:	e7d9      	b.n	800d6d0 <_fflush_r+0xc>
 800d71c:	4b05      	ldr	r3, [pc, #20]	; (800d734 <_fflush_r+0x70>)
 800d71e:	429c      	cmp	r4, r3
 800d720:	d101      	bne.n	800d726 <_fflush_r+0x62>
 800d722:	68ac      	ldr	r4, [r5, #8]
 800d724:	e7df      	b.n	800d6e6 <_fflush_r+0x22>
 800d726:	4b04      	ldr	r3, [pc, #16]	; (800d738 <_fflush_r+0x74>)
 800d728:	429c      	cmp	r4, r3
 800d72a:	bf08      	it	eq
 800d72c:	68ec      	ldreq	r4, [r5, #12]
 800d72e:	e7da      	b.n	800d6e6 <_fflush_r+0x22>
 800d730:	0800efc0 	.word	0x0800efc0
 800d734:	0800efe0 	.word	0x0800efe0
 800d738:	0800efa0 	.word	0x0800efa0

0800d73c <std>:
 800d73c:	2300      	movs	r3, #0
 800d73e:	b510      	push	{r4, lr}
 800d740:	4604      	mov	r4, r0
 800d742:	e9c0 3300 	strd	r3, r3, [r0]
 800d746:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d74a:	6083      	str	r3, [r0, #8]
 800d74c:	8181      	strh	r1, [r0, #12]
 800d74e:	6643      	str	r3, [r0, #100]	; 0x64
 800d750:	81c2      	strh	r2, [r0, #14]
 800d752:	6183      	str	r3, [r0, #24]
 800d754:	4619      	mov	r1, r3
 800d756:	2208      	movs	r2, #8
 800d758:	305c      	adds	r0, #92	; 0x5c
 800d75a:	f7ff fb8b 	bl	800ce74 <memset>
 800d75e:	4b05      	ldr	r3, [pc, #20]	; (800d774 <std+0x38>)
 800d760:	6263      	str	r3, [r4, #36]	; 0x24
 800d762:	4b05      	ldr	r3, [pc, #20]	; (800d778 <std+0x3c>)
 800d764:	62a3      	str	r3, [r4, #40]	; 0x28
 800d766:	4b05      	ldr	r3, [pc, #20]	; (800d77c <std+0x40>)
 800d768:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d76a:	4b05      	ldr	r3, [pc, #20]	; (800d780 <std+0x44>)
 800d76c:	6224      	str	r4, [r4, #32]
 800d76e:	6323      	str	r3, [r4, #48]	; 0x30
 800d770:	bd10      	pop	{r4, pc}
 800d772:	bf00      	nop
 800d774:	0800e2c9 	.word	0x0800e2c9
 800d778:	0800e2eb 	.word	0x0800e2eb
 800d77c:	0800e323 	.word	0x0800e323
 800d780:	0800e347 	.word	0x0800e347

0800d784 <_cleanup_r>:
 800d784:	4901      	ldr	r1, [pc, #4]	; (800d78c <_cleanup_r+0x8>)
 800d786:	f000 b8c1 	b.w	800d90c <_fwalk_reent>
 800d78a:	bf00      	nop
 800d78c:	0800d6c5 	.word	0x0800d6c5

0800d790 <__sfmoreglue>:
 800d790:	b570      	push	{r4, r5, r6, lr}
 800d792:	2268      	movs	r2, #104	; 0x68
 800d794:	1e4d      	subs	r5, r1, #1
 800d796:	4355      	muls	r5, r2
 800d798:	460e      	mov	r6, r1
 800d79a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d79e:	f7ff fbdd 	bl	800cf5c <_malloc_r>
 800d7a2:	4604      	mov	r4, r0
 800d7a4:	b140      	cbz	r0, 800d7b8 <__sfmoreglue+0x28>
 800d7a6:	2100      	movs	r1, #0
 800d7a8:	e9c0 1600 	strd	r1, r6, [r0]
 800d7ac:	300c      	adds	r0, #12
 800d7ae:	60a0      	str	r0, [r4, #8]
 800d7b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d7b4:	f7ff fb5e 	bl	800ce74 <memset>
 800d7b8:	4620      	mov	r0, r4
 800d7ba:	bd70      	pop	{r4, r5, r6, pc}

0800d7bc <__sfp_lock_acquire>:
 800d7bc:	4801      	ldr	r0, [pc, #4]	; (800d7c4 <__sfp_lock_acquire+0x8>)
 800d7be:	f000 b8c5 	b.w	800d94c <__retarget_lock_acquire_recursive>
 800d7c2:	bf00      	nop
 800d7c4:	20002ae9 	.word	0x20002ae9

0800d7c8 <__sfp_lock_release>:
 800d7c8:	4801      	ldr	r0, [pc, #4]	; (800d7d0 <__sfp_lock_release+0x8>)
 800d7ca:	f000 b8c0 	b.w	800d94e <__retarget_lock_release_recursive>
 800d7ce:	bf00      	nop
 800d7d0:	20002ae9 	.word	0x20002ae9

0800d7d4 <__sinit_lock_acquire>:
 800d7d4:	4801      	ldr	r0, [pc, #4]	; (800d7dc <__sinit_lock_acquire+0x8>)
 800d7d6:	f000 b8b9 	b.w	800d94c <__retarget_lock_acquire_recursive>
 800d7da:	bf00      	nop
 800d7dc:	20002aea 	.word	0x20002aea

0800d7e0 <__sinit_lock_release>:
 800d7e0:	4801      	ldr	r0, [pc, #4]	; (800d7e8 <__sinit_lock_release+0x8>)
 800d7e2:	f000 b8b4 	b.w	800d94e <__retarget_lock_release_recursive>
 800d7e6:	bf00      	nop
 800d7e8:	20002aea 	.word	0x20002aea

0800d7ec <__sinit>:
 800d7ec:	b510      	push	{r4, lr}
 800d7ee:	4604      	mov	r4, r0
 800d7f0:	f7ff fff0 	bl	800d7d4 <__sinit_lock_acquire>
 800d7f4:	69a3      	ldr	r3, [r4, #24]
 800d7f6:	b11b      	cbz	r3, 800d800 <__sinit+0x14>
 800d7f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7fc:	f7ff bff0 	b.w	800d7e0 <__sinit_lock_release>
 800d800:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d804:	6523      	str	r3, [r4, #80]	; 0x50
 800d806:	4b13      	ldr	r3, [pc, #76]	; (800d854 <__sinit+0x68>)
 800d808:	4a13      	ldr	r2, [pc, #76]	; (800d858 <__sinit+0x6c>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	62a2      	str	r2, [r4, #40]	; 0x28
 800d80e:	42a3      	cmp	r3, r4
 800d810:	bf04      	itt	eq
 800d812:	2301      	moveq	r3, #1
 800d814:	61a3      	streq	r3, [r4, #24]
 800d816:	4620      	mov	r0, r4
 800d818:	f000 f820 	bl	800d85c <__sfp>
 800d81c:	6060      	str	r0, [r4, #4]
 800d81e:	4620      	mov	r0, r4
 800d820:	f000 f81c 	bl	800d85c <__sfp>
 800d824:	60a0      	str	r0, [r4, #8]
 800d826:	4620      	mov	r0, r4
 800d828:	f000 f818 	bl	800d85c <__sfp>
 800d82c:	2200      	movs	r2, #0
 800d82e:	60e0      	str	r0, [r4, #12]
 800d830:	2104      	movs	r1, #4
 800d832:	6860      	ldr	r0, [r4, #4]
 800d834:	f7ff ff82 	bl	800d73c <std>
 800d838:	68a0      	ldr	r0, [r4, #8]
 800d83a:	2201      	movs	r2, #1
 800d83c:	2109      	movs	r1, #9
 800d83e:	f7ff ff7d 	bl	800d73c <std>
 800d842:	68e0      	ldr	r0, [r4, #12]
 800d844:	2202      	movs	r2, #2
 800d846:	2112      	movs	r1, #18
 800d848:	f7ff ff78 	bl	800d73c <std>
 800d84c:	2301      	movs	r3, #1
 800d84e:	61a3      	str	r3, [r4, #24]
 800d850:	e7d2      	b.n	800d7f8 <__sinit+0xc>
 800d852:	bf00      	nop
 800d854:	0800ede8 	.word	0x0800ede8
 800d858:	0800d785 	.word	0x0800d785

0800d85c <__sfp>:
 800d85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d85e:	4607      	mov	r7, r0
 800d860:	f7ff ffac 	bl	800d7bc <__sfp_lock_acquire>
 800d864:	4b1e      	ldr	r3, [pc, #120]	; (800d8e0 <__sfp+0x84>)
 800d866:	681e      	ldr	r6, [r3, #0]
 800d868:	69b3      	ldr	r3, [r6, #24]
 800d86a:	b913      	cbnz	r3, 800d872 <__sfp+0x16>
 800d86c:	4630      	mov	r0, r6
 800d86e:	f7ff ffbd 	bl	800d7ec <__sinit>
 800d872:	3648      	adds	r6, #72	; 0x48
 800d874:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d878:	3b01      	subs	r3, #1
 800d87a:	d503      	bpl.n	800d884 <__sfp+0x28>
 800d87c:	6833      	ldr	r3, [r6, #0]
 800d87e:	b30b      	cbz	r3, 800d8c4 <__sfp+0x68>
 800d880:	6836      	ldr	r6, [r6, #0]
 800d882:	e7f7      	b.n	800d874 <__sfp+0x18>
 800d884:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d888:	b9d5      	cbnz	r5, 800d8c0 <__sfp+0x64>
 800d88a:	4b16      	ldr	r3, [pc, #88]	; (800d8e4 <__sfp+0x88>)
 800d88c:	60e3      	str	r3, [r4, #12]
 800d88e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d892:	6665      	str	r5, [r4, #100]	; 0x64
 800d894:	f000 f859 	bl	800d94a <__retarget_lock_init_recursive>
 800d898:	f7ff ff96 	bl	800d7c8 <__sfp_lock_release>
 800d89c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d8a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d8a4:	6025      	str	r5, [r4, #0]
 800d8a6:	61a5      	str	r5, [r4, #24]
 800d8a8:	2208      	movs	r2, #8
 800d8aa:	4629      	mov	r1, r5
 800d8ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d8b0:	f7ff fae0 	bl	800ce74 <memset>
 800d8b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d8b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d8bc:	4620      	mov	r0, r4
 800d8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8c0:	3468      	adds	r4, #104	; 0x68
 800d8c2:	e7d9      	b.n	800d878 <__sfp+0x1c>
 800d8c4:	2104      	movs	r1, #4
 800d8c6:	4638      	mov	r0, r7
 800d8c8:	f7ff ff62 	bl	800d790 <__sfmoreglue>
 800d8cc:	4604      	mov	r4, r0
 800d8ce:	6030      	str	r0, [r6, #0]
 800d8d0:	2800      	cmp	r0, #0
 800d8d2:	d1d5      	bne.n	800d880 <__sfp+0x24>
 800d8d4:	f7ff ff78 	bl	800d7c8 <__sfp_lock_release>
 800d8d8:	230c      	movs	r3, #12
 800d8da:	603b      	str	r3, [r7, #0]
 800d8dc:	e7ee      	b.n	800d8bc <__sfp+0x60>
 800d8de:	bf00      	nop
 800d8e0:	0800ede8 	.word	0x0800ede8
 800d8e4:	ffff0001 	.word	0xffff0001

0800d8e8 <fiprintf>:
 800d8e8:	b40e      	push	{r1, r2, r3}
 800d8ea:	b503      	push	{r0, r1, lr}
 800d8ec:	4601      	mov	r1, r0
 800d8ee:	ab03      	add	r3, sp, #12
 800d8f0:	4805      	ldr	r0, [pc, #20]	; (800d908 <fiprintf+0x20>)
 800d8f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8f6:	6800      	ldr	r0, [r0, #0]
 800d8f8:	9301      	str	r3, [sp, #4]
 800d8fa:	f000 fa21 	bl	800dd40 <_vfiprintf_r>
 800d8fe:	b002      	add	sp, #8
 800d900:	f85d eb04 	ldr.w	lr, [sp], #4
 800d904:	b003      	add	sp, #12
 800d906:	4770      	bx	lr
 800d908:	20000010 	.word	0x20000010

0800d90c <_fwalk_reent>:
 800d90c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d910:	4606      	mov	r6, r0
 800d912:	4688      	mov	r8, r1
 800d914:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d918:	2700      	movs	r7, #0
 800d91a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d91e:	f1b9 0901 	subs.w	r9, r9, #1
 800d922:	d505      	bpl.n	800d930 <_fwalk_reent+0x24>
 800d924:	6824      	ldr	r4, [r4, #0]
 800d926:	2c00      	cmp	r4, #0
 800d928:	d1f7      	bne.n	800d91a <_fwalk_reent+0xe>
 800d92a:	4638      	mov	r0, r7
 800d92c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d930:	89ab      	ldrh	r3, [r5, #12]
 800d932:	2b01      	cmp	r3, #1
 800d934:	d907      	bls.n	800d946 <_fwalk_reent+0x3a>
 800d936:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d93a:	3301      	adds	r3, #1
 800d93c:	d003      	beq.n	800d946 <_fwalk_reent+0x3a>
 800d93e:	4629      	mov	r1, r5
 800d940:	4630      	mov	r0, r6
 800d942:	47c0      	blx	r8
 800d944:	4307      	orrs	r7, r0
 800d946:	3568      	adds	r5, #104	; 0x68
 800d948:	e7e9      	b.n	800d91e <_fwalk_reent+0x12>

0800d94a <__retarget_lock_init_recursive>:
 800d94a:	4770      	bx	lr

0800d94c <__retarget_lock_acquire_recursive>:
 800d94c:	4770      	bx	lr

0800d94e <__retarget_lock_release_recursive>:
 800d94e:	4770      	bx	lr

0800d950 <__swhatbuf_r>:
 800d950:	b570      	push	{r4, r5, r6, lr}
 800d952:	460e      	mov	r6, r1
 800d954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d958:	2900      	cmp	r1, #0
 800d95a:	b096      	sub	sp, #88	; 0x58
 800d95c:	4614      	mov	r4, r2
 800d95e:	461d      	mov	r5, r3
 800d960:	da08      	bge.n	800d974 <__swhatbuf_r+0x24>
 800d962:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d966:	2200      	movs	r2, #0
 800d968:	602a      	str	r2, [r5, #0]
 800d96a:	061a      	lsls	r2, r3, #24
 800d96c:	d410      	bmi.n	800d990 <__swhatbuf_r+0x40>
 800d96e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d972:	e00e      	b.n	800d992 <__swhatbuf_r+0x42>
 800d974:	466a      	mov	r2, sp
 800d976:	f000 fd15 	bl	800e3a4 <_fstat_r>
 800d97a:	2800      	cmp	r0, #0
 800d97c:	dbf1      	blt.n	800d962 <__swhatbuf_r+0x12>
 800d97e:	9a01      	ldr	r2, [sp, #4]
 800d980:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d984:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d988:	425a      	negs	r2, r3
 800d98a:	415a      	adcs	r2, r3
 800d98c:	602a      	str	r2, [r5, #0]
 800d98e:	e7ee      	b.n	800d96e <__swhatbuf_r+0x1e>
 800d990:	2340      	movs	r3, #64	; 0x40
 800d992:	2000      	movs	r0, #0
 800d994:	6023      	str	r3, [r4, #0]
 800d996:	b016      	add	sp, #88	; 0x58
 800d998:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d99c <__smakebuf_r>:
 800d99c:	898b      	ldrh	r3, [r1, #12]
 800d99e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d9a0:	079d      	lsls	r5, r3, #30
 800d9a2:	4606      	mov	r6, r0
 800d9a4:	460c      	mov	r4, r1
 800d9a6:	d507      	bpl.n	800d9b8 <__smakebuf_r+0x1c>
 800d9a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d9ac:	6023      	str	r3, [r4, #0]
 800d9ae:	6123      	str	r3, [r4, #16]
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	6163      	str	r3, [r4, #20]
 800d9b4:	b002      	add	sp, #8
 800d9b6:	bd70      	pop	{r4, r5, r6, pc}
 800d9b8:	ab01      	add	r3, sp, #4
 800d9ba:	466a      	mov	r2, sp
 800d9bc:	f7ff ffc8 	bl	800d950 <__swhatbuf_r>
 800d9c0:	9900      	ldr	r1, [sp, #0]
 800d9c2:	4605      	mov	r5, r0
 800d9c4:	4630      	mov	r0, r6
 800d9c6:	f7ff fac9 	bl	800cf5c <_malloc_r>
 800d9ca:	b948      	cbnz	r0, 800d9e0 <__smakebuf_r+0x44>
 800d9cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9d0:	059a      	lsls	r2, r3, #22
 800d9d2:	d4ef      	bmi.n	800d9b4 <__smakebuf_r+0x18>
 800d9d4:	f023 0303 	bic.w	r3, r3, #3
 800d9d8:	f043 0302 	orr.w	r3, r3, #2
 800d9dc:	81a3      	strh	r3, [r4, #12]
 800d9de:	e7e3      	b.n	800d9a8 <__smakebuf_r+0xc>
 800d9e0:	4b0d      	ldr	r3, [pc, #52]	; (800da18 <__smakebuf_r+0x7c>)
 800d9e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800d9e4:	89a3      	ldrh	r3, [r4, #12]
 800d9e6:	6020      	str	r0, [r4, #0]
 800d9e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9ec:	81a3      	strh	r3, [r4, #12]
 800d9ee:	9b00      	ldr	r3, [sp, #0]
 800d9f0:	6163      	str	r3, [r4, #20]
 800d9f2:	9b01      	ldr	r3, [sp, #4]
 800d9f4:	6120      	str	r0, [r4, #16]
 800d9f6:	b15b      	cbz	r3, 800da10 <__smakebuf_r+0x74>
 800d9f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9fc:	4630      	mov	r0, r6
 800d9fe:	f000 fce3 	bl	800e3c8 <_isatty_r>
 800da02:	b128      	cbz	r0, 800da10 <__smakebuf_r+0x74>
 800da04:	89a3      	ldrh	r3, [r4, #12]
 800da06:	f023 0303 	bic.w	r3, r3, #3
 800da0a:	f043 0301 	orr.w	r3, r3, #1
 800da0e:	81a3      	strh	r3, [r4, #12]
 800da10:	89a0      	ldrh	r0, [r4, #12]
 800da12:	4305      	orrs	r5, r0
 800da14:	81a5      	strh	r5, [r4, #12]
 800da16:	e7cd      	b.n	800d9b4 <__smakebuf_r+0x18>
 800da18:	0800d785 	.word	0x0800d785

0800da1c <__malloc_lock>:
 800da1c:	4801      	ldr	r0, [pc, #4]	; (800da24 <__malloc_lock+0x8>)
 800da1e:	f7ff bf95 	b.w	800d94c <__retarget_lock_acquire_recursive>
 800da22:	bf00      	nop
 800da24:	20002ae8 	.word	0x20002ae8

0800da28 <__malloc_unlock>:
 800da28:	4801      	ldr	r0, [pc, #4]	; (800da30 <__malloc_unlock+0x8>)
 800da2a:	f7ff bf90 	b.w	800d94e <__retarget_lock_release_recursive>
 800da2e:	bf00      	nop
 800da30:	20002ae8 	.word	0x20002ae8

0800da34 <__ssputs_r>:
 800da34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da38:	688e      	ldr	r6, [r1, #8]
 800da3a:	429e      	cmp	r6, r3
 800da3c:	4682      	mov	sl, r0
 800da3e:	460c      	mov	r4, r1
 800da40:	4690      	mov	r8, r2
 800da42:	461f      	mov	r7, r3
 800da44:	d838      	bhi.n	800dab8 <__ssputs_r+0x84>
 800da46:	898a      	ldrh	r2, [r1, #12]
 800da48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800da4c:	d032      	beq.n	800dab4 <__ssputs_r+0x80>
 800da4e:	6825      	ldr	r5, [r4, #0]
 800da50:	6909      	ldr	r1, [r1, #16]
 800da52:	eba5 0901 	sub.w	r9, r5, r1
 800da56:	6965      	ldr	r5, [r4, #20]
 800da58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da60:	3301      	adds	r3, #1
 800da62:	444b      	add	r3, r9
 800da64:	106d      	asrs	r5, r5, #1
 800da66:	429d      	cmp	r5, r3
 800da68:	bf38      	it	cc
 800da6a:	461d      	movcc	r5, r3
 800da6c:	0553      	lsls	r3, r2, #21
 800da6e:	d531      	bpl.n	800dad4 <__ssputs_r+0xa0>
 800da70:	4629      	mov	r1, r5
 800da72:	f7ff fa73 	bl	800cf5c <_malloc_r>
 800da76:	4606      	mov	r6, r0
 800da78:	b950      	cbnz	r0, 800da90 <__ssputs_r+0x5c>
 800da7a:	230c      	movs	r3, #12
 800da7c:	f8ca 3000 	str.w	r3, [sl]
 800da80:	89a3      	ldrh	r3, [r4, #12]
 800da82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da86:	81a3      	strh	r3, [r4, #12]
 800da88:	f04f 30ff 	mov.w	r0, #4294967295
 800da8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da90:	6921      	ldr	r1, [r4, #16]
 800da92:	464a      	mov	r2, r9
 800da94:	f7ff f9e0 	bl	800ce58 <memcpy>
 800da98:	89a3      	ldrh	r3, [r4, #12]
 800da9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800da9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800daa2:	81a3      	strh	r3, [r4, #12]
 800daa4:	6126      	str	r6, [r4, #16]
 800daa6:	6165      	str	r5, [r4, #20]
 800daa8:	444e      	add	r6, r9
 800daaa:	eba5 0509 	sub.w	r5, r5, r9
 800daae:	6026      	str	r6, [r4, #0]
 800dab0:	60a5      	str	r5, [r4, #8]
 800dab2:	463e      	mov	r6, r7
 800dab4:	42be      	cmp	r6, r7
 800dab6:	d900      	bls.n	800daba <__ssputs_r+0x86>
 800dab8:	463e      	mov	r6, r7
 800daba:	6820      	ldr	r0, [r4, #0]
 800dabc:	4632      	mov	r2, r6
 800dabe:	4641      	mov	r1, r8
 800dac0:	f000 fca4 	bl	800e40c <memmove>
 800dac4:	68a3      	ldr	r3, [r4, #8]
 800dac6:	1b9b      	subs	r3, r3, r6
 800dac8:	60a3      	str	r3, [r4, #8]
 800daca:	6823      	ldr	r3, [r4, #0]
 800dacc:	4433      	add	r3, r6
 800dace:	6023      	str	r3, [r4, #0]
 800dad0:	2000      	movs	r0, #0
 800dad2:	e7db      	b.n	800da8c <__ssputs_r+0x58>
 800dad4:	462a      	mov	r2, r5
 800dad6:	f000 fcb3 	bl	800e440 <_realloc_r>
 800dada:	4606      	mov	r6, r0
 800dadc:	2800      	cmp	r0, #0
 800dade:	d1e1      	bne.n	800daa4 <__ssputs_r+0x70>
 800dae0:	6921      	ldr	r1, [r4, #16]
 800dae2:	4650      	mov	r0, sl
 800dae4:	f7ff f9ce 	bl	800ce84 <_free_r>
 800dae8:	e7c7      	b.n	800da7a <__ssputs_r+0x46>
	...

0800daec <_svfiprintf_r>:
 800daec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf0:	4698      	mov	r8, r3
 800daf2:	898b      	ldrh	r3, [r1, #12]
 800daf4:	061b      	lsls	r3, r3, #24
 800daf6:	b09d      	sub	sp, #116	; 0x74
 800daf8:	4607      	mov	r7, r0
 800dafa:	460d      	mov	r5, r1
 800dafc:	4614      	mov	r4, r2
 800dafe:	d50e      	bpl.n	800db1e <_svfiprintf_r+0x32>
 800db00:	690b      	ldr	r3, [r1, #16]
 800db02:	b963      	cbnz	r3, 800db1e <_svfiprintf_r+0x32>
 800db04:	2140      	movs	r1, #64	; 0x40
 800db06:	f7ff fa29 	bl	800cf5c <_malloc_r>
 800db0a:	6028      	str	r0, [r5, #0]
 800db0c:	6128      	str	r0, [r5, #16]
 800db0e:	b920      	cbnz	r0, 800db1a <_svfiprintf_r+0x2e>
 800db10:	230c      	movs	r3, #12
 800db12:	603b      	str	r3, [r7, #0]
 800db14:	f04f 30ff 	mov.w	r0, #4294967295
 800db18:	e0d1      	b.n	800dcbe <_svfiprintf_r+0x1d2>
 800db1a:	2340      	movs	r3, #64	; 0x40
 800db1c:	616b      	str	r3, [r5, #20]
 800db1e:	2300      	movs	r3, #0
 800db20:	9309      	str	r3, [sp, #36]	; 0x24
 800db22:	2320      	movs	r3, #32
 800db24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db28:	f8cd 800c 	str.w	r8, [sp, #12]
 800db2c:	2330      	movs	r3, #48	; 0x30
 800db2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dcd8 <_svfiprintf_r+0x1ec>
 800db32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db36:	f04f 0901 	mov.w	r9, #1
 800db3a:	4623      	mov	r3, r4
 800db3c:	469a      	mov	sl, r3
 800db3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db42:	b10a      	cbz	r2, 800db48 <_svfiprintf_r+0x5c>
 800db44:	2a25      	cmp	r2, #37	; 0x25
 800db46:	d1f9      	bne.n	800db3c <_svfiprintf_r+0x50>
 800db48:	ebba 0b04 	subs.w	fp, sl, r4
 800db4c:	d00b      	beq.n	800db66 <_svfiprintf_r+0x7a>
 800db4e:	465b      	mov	r3, fp
 800db50:	4622      	mov	r2, r4
 800db52:	4629      	mov	r1, r5
 800db54:	4638      	mov	r0, r7
 800db56:	f7ff ff6d 	bl	800da34 <__ssputs_r>
 800db5a:	3001      	adds	r0, #1
 800db5c:	f000 80aa 	beq.w	800dcb4 <_svfiprintf_r+0x1c8>
 800db60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db62:	445a      	add	r2, fp
 800db64:	9209      	str	r2, [sp, #36]	; 0x24
 800db66:	f89a 3000 	ldrb.w	r3, [sl]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	f000 80a2 	beq.w	800dcb4 <_svfiprintf_r+0x1c8>
 800db70:	2300      	movs	r3, #0
 800db72:	f04f 32ff 	mov.w	r2, #4294967295
 800db76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db7a:	f10a 0a01 	add.w	sl, sl, #1
 800db7e:	9304      	str	r3, [sp, #16]
 800db80:	9307      	str	r3, [sp, #28]
 800db82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db86:	931a      	str	r3, [sp, #104]	; 0x68
 800db88:	4654      	mov	r4, sl
 800db8a:	2205      	movs	r2, #5
 800db8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db90:	4851      	ldr	r0, [pc, #324]	; (800dcd8 <_svfiprintf_r+0x1ec>)
 800db92:	f7f2 fb25 	bl	80001e0 <memchr>
 800db96:	9a04      	ldr	r2, [sp, #16]
 800db98:	b9d8      	cbnz	r0, 800dbd2 <_svfiprintf_r+0xe6>
 800db9a:	06d0      	lsls	r0, r2, #27
 800db9c:	bf44      	itt	mi
 800db9e:	2320      	movmi	r3, #32
 800dba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dba4:	0711      	lsls	r1, r2, #28
 800dba6:	bf44      	itt	mi
 800dba8:	232b      	movmi	r3, #43	; 0x2b
 800dbaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbae:	f89a 3000 	ldrb.w	r3, [sl]
 800dbb2:	2b2a      	cmp	r3, #42	; 0x2a
 800dbb4:	d015      	beq.n	800dbe2 <_svfiprintf_r+0xf6>
 800dbb6:	9a07      	ldr	r2, [sp, #28]
 800dbb8:	4654      	mov	r4, sl
 800dbba:	2000      	movs	r0, #0
 800dbbc:	f04f 0c0a 	mov.w	ip, #10
 800dbc0:	4621      	mov	r1, r4
 800dbc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbc6:	3b30      	subs	r3, #48	; 0x30
 800dbc8:	2b09      	cmp	r3, #9
 800dbca:	d94e      	bls.n	800dc6a <_svfiprintf_r+0x17e>
 800dbcc:	b1b0      	cbz	r0, 800dbfc <_svfiprintf_r+0x110>
 800dbce:	9207      	str	r2, [sp, #28]
 800dbd0:	e014      	b.n	800dbfc <_svfiprintf_r+0x110>
 800dbd2:	eba0 0308 	sub.w	r3, r0, r8
 800dbd6:	fa09 f303 	lsl.w	r3, r9, r3
 800dbda:	4313      	orrs	r3, r2
 800dbdc:	9304      	str	r3, [sp, #16]
 800dbde:	46a2      	mov	sl, r4
 800dbe0:	e7d2      	b.n	800db88 <_svfiprintf_r+0x9c>
 800dbe2:	9b03      	ldr	r3, [sp, #12]
 800dbe4:	1d19      	adds	r1, r3, #4
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	9103      	str	r1, [sp, #12]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	bfbb      	ittet	lt
 800dbee:	425b      	neglt	r3, r3
 800dbf0:	f042 0202 	orrlt.w	r2, r2, #2
 800dbf4:	9307      	strge	r3, [sp, #28]
 800dbf6:	9307      	strlt	r3, [sp, #28]
 800dbf8:	bfb8      	it	lt
 800dbfa:	9204      	strlt	r2, [sp, #16]
 800dbfc:	7823      	ldrb	r3, [r4, #0]
 800dbfe:	2b2e      	cmp	r3, #46	; 0x2e
 800dc00:	d10c      	bne.n	800dc1c <_svfiprintf_r+0x130>
 800dc02:	7863      	ldrb	r3, [r4, #1]
 800dc04:	2b2a      	cmp	r3, #42	; 0x2a
 800dc06:	d135      	bne.n	800dc74 <_svfiprintf_r+0x188>
 800dc08:	9b03      	ldr	r3, [sp, #12]
 800dc0a:	1d1a      	adds	r2, r3, #4
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	9203      	str	r2, [sp, #12]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	bfb8      	it	lt
 800dc14:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc18:	3402      	adds	r4, #2
 800dc1a:	9305      	str	r3, [sp, #20]
 800dc1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dce8 <_svfiprintf_r+0x1fc>
 800dc20:	7821      	ldrb	r1, [r4, #0]
 800dc22:	2203      	movs	r2, #3
 800dc24:	4650      	mov	r0, sl
 800dc26:	f7f2 fadb 	bl	80001e0 <memchr>
 800dc2a:	b140      	cbz	r0, 800dc3e <_svfiprintf_r+0x152>
 800dc2c:	2340      	movs	r3, #64	; 0x40
 800dc2e:	eba0 000a 	sub.w	r0, r0, sl
 800dc32:	fa03 f000 	lsl.w	r0, r3, r0
 800dc36:	9b04      	ldr	r3, [sp, #16]
 800dc38:	4303      	orrs	r3, r0
 800dc3a:	3401      	adds	r4, #1
 800dc3c:	9304      	str	r3, [sp, #16]
 800dc3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc42:	4826      	ldr	r0, [pc, #152]	; (800dcdc <_svfiprintf_r+0x1f0>)
 800dc44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc48:	2206      	movs	r2, #6
 800dc4a:	f7f2 fac9 	bl	80001e0 <memchr>
 800dc4e:	2800      	cmp	r0, #0
 800dc50:	d038      	beq.n	800dcc4 <_svfiprintf_r+0x1d8>
 800dc52:	4b23      	ldr	r3, [pc, #140]	; (800dce0 <_svfiprintf_r+0x1f4>)
 800dc54:	bb1b      	cbnz	r3, 800dc9e <_svfiprintf_r+0x1b2>
 800dc56:	9b03      	ldr	r3, [sp, #12]
 800dc58:	3307      	adds	r3, #7
 800dc5a:	f023 0307 	bic.w	r3, r3, #7
 800dc5e:	3308      	adds	r3, #8
 800dc60:	9303      	str	r3, [sp, #12]
 800dc62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc64:	4433      	add	r3, r6
 800dc66:	9309      	str	r3, [sp, #36]	; 0x24
 800dc68:	e767      	b.n	800db3a <_svfiprintf_r+0x4e>
 800dc6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc6e:	460c      	mov	r4, r1
 800dc70:	2001      	movs	r0, #1
 800dc72:	e7a5      	b.n	800dbc0 <_svfiprintf_r+0xd4>
 800dc74:	2300      	movs	r3, #0
 800dc76:	3401      	adds	r4, #1
 800dc78:	9305      	str	r3, [sp, #20]
 800dc7a:	4619      	mov	r1, r3
 800dc7c:	f04f 0c0a 	mov.w	ip, #10
 800dc80:	4620      	mov	r0, r4
 800dc82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc86:	3a30      	subs	r2, #48	; 0x30
 800dc88:	2a09      	cmp	r2, #9
 800dc8a:	d903      	bls.n	800dc94 <_svfiprintf_r+0x1a8>
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d0c5      	beq.n	800dc1c <_svfiprintf_r+0x130>
 800dc90:	9105      	str	r1, [sp, #20]
 800dc92:	e7c3      	b.n	800dc1c <_svfiprintf_r+0x130>
 800dc94:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc98:	4604      	mov	r4, r0
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	e7f0      	b.n	800dc80 <_svfiprintf_r+0x194>
 800dc9e:	ab03      	add	r3, sp, #12
 800dca0:	9300      	str	r3, [sp, #0]
 800dca2:	462a      	mov	r2, r5
 800dca4:	4b0f      	ldr	r3, [pc, #60]	; (800dce4 <_svfiprintf_r+0x1f8>)
 800dca6:	a904      	add	r1, sp, #16
 800dca8:	4638      	mov	r0, r7
 800dcaa:	f3af 8000 	nop.w
 800dcae:	1c42      	adds	r2, r0, #1
 800dcb0:	4606      	mov	r6, r0
 800dcb2:	d1d6      	bne.n	800dc62 <_svfiprintf_r+0x176>
 800dcb4:	89ab      	ldrh	r3, [r5, #12]
 800dcb6:	065b      	lsls	r3, r3, #25
 800dcb8:	f53f af2c 	bmi.w	800db14 <_svfiprintf_r+0x28>
 800dcbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dcbe:	b01d      	add	sp, #116	; 0x74
 800dcc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcc4:	ab03      	add	r3, sp, #12
 800dcc6:	9300      	str	r3, [sp, #0]
 800dcc8:	462a      	mov	r2, r5
 800dcca:	4b06      	ldr	r3, [pc, #24]	; (800dce4 <_svfiprintf_r+0x1f8>)
 800dccc:	a904      	add	r1, sp, #16
 800dcce:	4638      	mov	r0, r7
 800dcd0:	f000 f9d4 	bl	800e07c <_printf_i>
 800dcd4:	e7eb      	b.n	800dcae <_svfiprintf_r+0x1c2>
 800dcd6:	bf00      	nop
 800dcd8:	0800f000 	.word	0x0800f000
 800dcdc:	0800f00a 	.word	0x0800f00a
 800dce0:	00000000 	.word	0x00000000
 800dce4:	0800da35 	.word	0x0800da35
 800dce8:	0800f006 	.word	0x0800f006

0800dcec <__sfputc_r>:
 800dcec:	6893      	ldr	r3, [r2, #8]
 800dcee:	3b01      	subs	r3, #1
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	b410      	push	{r4}
 800dcf4:	6093      	str	r3, [r2, #8]
 800dcf6:	da08      	bge.n	800dd0a <__sfputc_r+0x1e>
 800dcf8:	6994      	ldr	r4, [r2, #24]
 800dcfa:	42a3      	cmp	r3, r4
 800dcfc:	db01      	blt.n	800dd02 <__sfputc_r+0x16>
 800dcfe:	290a      	cmp	r1, #10
 800dd00:	d103      	bne.n	800dd0a <__sfputc_r+0x1e>
 800dd02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd06:	f7ff bb79 	b.w	800d3fc <__swbuf_r>
 800dd0a:	6813      	ldr	r3, [r2, #0]
 800dd0c:	1c58      	adds	r0, r3, #1
 800dd0e:	6010      	str	r0, [r2, #0]
 800dd10:	7019      	strb	r1, [r3, #0]
 800dd12:	4608      	mov	r0, r1
 800dd14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd18:	4770      	bx	lr

0800dd1a <__sfputs_r>:
 800dd1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd1c:	4606      	mov	r6, r0
 800dd1e:	460f      	mov	r7, r1
 800dd20:	4614      	mov	r4, r2
 800dd22:	18d5      	adds	r5, r2, r3
 800dd24:	42ac      	cmp	r4, r5
 800dd26:	d101      	bne.n	800dd2c <__sfputs_r+0x12>
 800dd28:	2000      	movs	r0, #0
 800dd2a:	e007      	b.n	800dd3c <__sfputs_r+0x22>
 800dd2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd30:	463a      	mov	r2, r7
 800dd32:	4630      	mov	r0, r6
 800dd34:	f7ff ffda 	bl	800dcec <__sfputc_r>
 800dd38:	1c43      	adds	r3, r0, #1
 800dd3a:	d1f3      	bne.n	800dd24 <__sfputs_r+0xa>
 800dd3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dd40 <_vfiprintf_r>:
 800dd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd44:	460d      	mov	r5, r1
 800dd46:	b09d      	sub	sp, #116	; 0x74
 800dd48:	4614      	mov	r4, r2
 800dd4a:	4698      	mov	r8, r3
 800dd4c:	4606      	mov	r6, r0
 800dd4e:	b118      	cbz	r0, 800dd58 <_vfiprintf_r+0x18>
 800dd50:	6983      	ldr	r3, [r0, #24]
 800dd52:	b90b      	cbnz	r3, 800dd58 <_vfiprintf_r+0x18>
 800dd54:	f7ff fd4a 	bl	800d7ec <__sinit>
 800dd58:	4b89      	ldr	r3, [pc, #548]	; (800df80 <_vfiprintf_r+0x240>)
 800dd5a:	429d      	cmp	r5, r3
 800dd5c:	d11b      	bne.n	800dd96 <_vfiprintf_r+0x56>
 800dd5e:	6875      	ldr	r5, [r6, #4]
 800dd60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd62:	07d9      	lsls	r1, r3, #31
 800dd64:	d405      	bmi.n	800dd72 <_vfiprintf_r+0x32>
 800dd66:	89ab      	ldrh	r3, [r5, #12]
 800dd68:	059a      	lsls	r2, r3, #22
 800dd6a:	d402      	bmi.n	800dd72 <_vfiprintf_r+0x32>
 800dd6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd6e:	f7ff fded 	bl	800d94c <__retarget_lock_acquire_recursive>
 800dd72:	89ab      	ldrh	r3, [r5, #12]
 800dd74:	071b      	lsls	r3, r3, #28
 800dd76:	d501      	bpl.n	800dd7c <_vfiprintf_r+0x3c>
 800dd78:	692b      	ldr	r3, [r5, #16]
 800dd7a:	b9eb      	cbnz	r3, 800ddb8 <_vfiprintf_r+0x78>
 800dd7c:	4629      	mov	r1, r5
 800dd7e:	4630      	mov	r0, r6
 800dd80:	f7ff fb8e 	bl	800d4a0 <__swsetup_r>
 800dd84:	b1c0      	cbz	r0, 800ddb8 <_vfiprintf_r+0x78>
 800dd86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd88:	07dc      	lsls	r4, r3, #31
 800dd8a:	d50e      	bpl.n	800ddaa <_vfiprintf_r+0x6a>
 800dd8c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd90:	b01d      	add	sp, #116	; 0x74
 800dd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd96:	4b7b      	ldr	r3, [pc, #492]	; (800df84 <_vfiprintf_r+0x244>)
 800dd98:	429d      	cmp	r5, r3
 800dd9a:	d101      	bne.n	800dda0 <_vfiprintf_r+0x60>
 800dd9c:	68b5      	ldr	r5, [r6, #8]
 800dd9e:	e7df      	b.n	800dd60 <_vfiprintf_r+0x20>
 800dda0:	4b79      	ldr	r3, [pc, #484]	; (800df88 <_vfiprintf_r+0x248>)
 800dda2:	429d      	cmp	r5, r3
 800dda4:	bf08      	it	eq
 800dda6:	68f5      	ldreq	r5, [r6, #12]
 800dda8:	e7da      	b.n	800dd60 <_vfiprintf_r+0x20>
 800ddaa:	89ab      	ldrh	r3, [r5, #12]
 800ddac:	0598      	lsls	r0, r3, #22
 800ddae:	d4ed      	bmi.n	800dd8c <_vfiprintf_r+0x4c>
 800ddb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddb2:	f7ff fdcc 	bl	800d94e <__retarget_lock_release_recursive>
 800ddb6:	e7e9      	b.n	800dd8c <_vfiprintf_r+0x4c>
 800ddb8:	2300      	movs	r3, #0
 800ddba:	9309      	str	r3, [sp, #36]	; 0x24
 800ddbc:	2320      	movs	r3, #32
 800ddbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ddc2:	f8cd 800c 	str.w	r8, [sp, #12]
 800ddc6:	2330      	movs	r3, #48	; 0x30
 800ddc8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800df8c <_vfiprintf_r+0x24c>
 800ddcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ddd0:	f04f 0901 	mov.w	r9, #1
 800ddd4:	4623      	mov	r3, r4
 800ddd6:	469a      	mov	sl, r3
 800ddd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dddc:	b10a      	cbz	r2, 800dde2 <_vfiprintf_r+0xa2>
 800ddde:	2a25      	cmp	r2, #37	; 0x25
 800dde0:	d1f9      	bne.n	800ddd6 <_vfiprintf_r+0x96>
 800dde2:	ebba 0b04 	subs.w	fp, sl, r4
 800dde6:	d00b      	beq.n	800de00 <_vfiprintf_r+0xc0>
 800dde8:	465b      	mov	r3, fp
 800ddea:	4622      	mov	r2, r4
 800ddec:	4629      	mov	r1, r5
 800ddee:	4630      	mov	r0, r6
 800ddf0:	f7ff ff93 	bl	800dd1a <__sfputs_r>
 800ddf4:	3001      	adds	r0, #1
 800ddf6:	f000 80aa 	beq.w	800df4e <_vfiprintf_r+0x20e>
 800ddfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddfc:	445a      	add	r2, fp
 800ddfe:	9209      	str	r2, [sp, #36]	; 0x24
 800de00:	f89a 3000 	ldrb.w	r3, [sl]
 800de04:	2b00      	cmp	r3, #0
 800de06:	f000 80a2 	beq.w	800df4e <_vfiprintf_r+0x20e>
 800de0a:	2300      	movs	r3, #0
 800de0c:	f04f 32ff 	mov.w	r2, #4294967295
 800de10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de14:	f10a 0a01 	add.w	sl, sl, #1
 800de18:	9304      	str	r3, [sp, #16]
 800de1a:	9307      	str	r3, [sp, #28]
 800de1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de20:	931a      	str	r3, [sp, #104]	; 0x68
 800de22:	4654      	mov	r4, sl
 800de24:	2205      	movs	r2, #5
 800de26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de2a:	4858      	ldr	r0, [pc, #352]	; (800df8c <_vfiprintf_r+0x24c>)
 800de2c:	f7f2 f9d8 	bl	80001e0 <memchr>
 800de30:	9a04      	ldr	r2, [sp, #16]
 800de32:	b9d8      	cbnz	r0, 800de6c <_vfiprintf_r+0x12c>
 800de34:	06d1      	lsls	r1, r2, #27
 800de36:	bf44      	itt	mi
 800de38:	2320      	movmi	r3, #32
 800de3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de3e:	0713      	lsls	r3, r2, #28
 800de40:	bf44      	itt	mi
 800de42:	232b      	movmi	r3, #43	; 0x2b
 800de44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de48:	f89a 3000 	ldrb.w	r3, [sl]
 800de4c:	2b2a      	cmp	r3, #42	; 0x2a
 800de4e:	d015      	beq.n	800de7c <_vfiprintf_r+0x13c>
 800de50:	9a07      	ldr	r2, [sp, #28]
 800de52:	4654      	mov	r4, sl
 800de54:	2000      	movs	r0, #0
 800de56:	f04f 0c0a 	mov.w	ip, #10
 800de5a:	4621      	mov	r1, r4
 800de5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de60:	3b30      	subs	r3, #48	; 0x30
 800de62:	2b09      	cmp	r3, #9
 800de64:	d94e      	bls.n	800df04 <_vfiprintf_r+0x1c4>
 800de66:	b1b0      	cbz	r0, 800de96 <_vfiprintf_r+0x156>
 800de68:	9207      	str	r2, [sp, #28]
 800de6a:	e014      	b.n	800de96 <_vfiprintf_r+0x156>
 800de6c:	eba0 0308 	sub.w	r3, r0, r8
 800de70:	fa09 f303 	lsl.w	r3, r9, r3
 800de74:	4313      	orrs	r3, r2
 800de76:	9304      	str	r3, [sp, #16]
 800de78:	46a2      	mov	sl, r4
 800de7a:	e7d2      	b.n	800de22 <_vfiprintf_r+0xe2>
 800de7c:	9b03      	ldr	r3, [sp, #12]
 800de7e:	1d19      	adds	r1, r3, #4
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	9103      	str	r1, [sp, #12]
 800de84:	2b00      	cmp	r3, #0
 800de86:	bfbb      	ittet	lt
 800de88:	425b      	neglt	r3, r3
 800de8a:	f042 0202 	orrlt.w	r2, r2, #2
 800de8e:	9307      	strge	r3, [sp, #28]
 800de90:	9307      	strlt	r3, [sp, #28]
 800de92:	bfb8      	it	lt
 800de94:	9204      	strlt	r2, [sp, #16]
 800de96:	7823      	ldrb	r3, [r4, #0]
 800de98:	2b2e      	cmp	r3, #46	; 0x2e
 800de9a:	d10c      	bne.n	800deb6 <_vfiprintf_r+0x176>
 800de9c:	7863      	ldrb	r3, [r4, #1]
 800de9e:	2b2a      	cmp	r3, #42	; 0x2a
 800dea0:	d135      	bne.n	800df0e <_vfiprintf_r+0x1ce>
 800dea2:	9b03      	ldr	r3, [sp, #12]
 800dea4:	1d1a      	adds	r2, r3, #4
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	9203      	str	r2, [sp, #12]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	bfb8      	it	lt
 800deae:	f04f 33ff 	movlt.w	r3, #4294967295
 800deb2:	3402      	adds	r4, #2
 800deb4:	9305      	str	r3, [sp, #20]
 800deb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800df9c <_vfiprintf_r+0x25c>
 800deba:	7821      	ldrb	r1, [r4, #0]
 800debc:	2203      	movs	r2, #3
 800debe:	4650      	mov	r0, sl
 800dec0:	f7f2 f98e 	bl	80001e0 <memchr>
 800dec4:	b140      	cbz	r0, 800ded8 <_vfiprintf_r+0x198>
 800dec6:	2340      	movs	r3, #64	; 0x40
 800dec8:	eba0 000a 	sub.w	r0, r0, sl
 800decc:	fa03 f000 	lsl.w	r0, r3, r0
 800ded0:	9b04      	ldr	r3, [sp, #16]
 800ded2:	4303      	orrs	r3, r0
 800ded4:	3401      	adds	r4, #1
 800ded6:	9304      	str	r3, [sp, #16]
 800ded8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dedc:	482c      	ldr	r0, [pc, #176]	; (800df90 <_vfiprintf_r+0x250>)
 800dede:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dee2:	2206      	movs	r2, #6
 800dee4:	f7f2 f97c 	bl	80001e0 <memchr>
 800dee8:	2800      	cmp	r0, #0
 800deea:	d03f      	beq.n	800df6c <_vfiprintf_r+0x22c>
 800deec:	4b29      	ldr	r3, [pc, #164]	; (800df94 <_vfiprintf_r+0x254>)
 800deee:	bb1b      	cbnz	r3, 800df38 <_vfiprintf_r+0x1f8>
 800def0:	9b03      	ldr	r3, [sp, #12]
 800def2:	3307      	adds	r3, #7
 800def4:	f023 0307 	bic.w	r3, r3, #7
 800def8:	3308      	adds	r3, #8
 800defa:	9303      	str	r3, [sp, #12]
 800defc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800defe:	443b      	add	r3, r7
 800df00:	9309      	str	r3, [sp, #36]	; 0x24
 800df02:	e767      	b.n	800ddd4 <_vfiprintf_r+0x94>
 800df04:	fb0c 3202 	mla	r2, ip, r2, r3
 800df08:	460c      	mov	r4, r1
 800df0a:	2001      	movs	r0, #1
 800df0c:	e7a5      	b.n	800de5a <_vfiprintf_r+0x11a>
 800df0e:	2300      	movs	r3, #0
 800df10:	3401      	adds	r4, #1
 800df12:	9305      	str	r3, [sp, #20]
 800df14:	4619      	mov	r1, r3
 800df16:	f04f 0c0a 	mov.w	ip, #10
 800df1a:	4620      	mov	r0, r4
 800df1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df20:	3a30      	subs	r2, #48	; 0x30
 800df22:	2a09      	cmp	r2, #9
 800df24:	d903      	bls.n	800df2e <_vfiprintf_r+0x1ee>
 800df26:	2b00      	cmp	r3, #0
 800df28:	d0c5      	beq.n	800deb6 <_vfiprintf_r+0x176>
 800df2a:	9105      	str	r1, [sp, #20]
 800df2c:	e7c3      	b.n	800deb6 <_vfiprintf_r+0x176>
 800df2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800df32:	4604      	mov	r4, r0
 800df34:	2301      	movs	r3, #1
 800df36:	e7f0      	b.n	800df1a <_vfiprintf_r+0x1da>
 800df38:	ab03      	add	r3, sp, #12
 800df3a:	9300      	str	r3, [sp, #0]
 800df3c:	462a      	mov	r2, r5
 800df3e:	4b16      	ldr	r3, [pc, #88]	; (800df98 <_vfiprintf_r+0x258>)
 800df40:	a904      	add	r1, sp, #16
 800df42:	4630      	mov	r0, r6
 800df44:	f3af 8000 	nop.w
 800df48:	4607      	mov	r7, r0
 800df4a:	1c78      	adds	r0, r7, #1
 800df4c:	d1d6      	bne.n	800defc <_vfiprintf_r+0x1bc>
 800df4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df50:	07d9      	lsls	r1, r3, #31
 800df52:	d405      	bmi.n	800df60 <_vfiprintf_r+0x220>
 800df54:	89ab      	ldrh	r3, [r5, #12]
 800df56:	059a      	lsls	r2, r3, #22
 800df58:	d402      	bmi.n	800df60 <_vfiprintf_r+0x220>
 800df5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df5c:	f7ff fcf7 	bl	800d94e <__retarget_lock_release_recursive>
 800df60:	89ab      	ldrh	r3, [r5, #12]
 800df62:	065b      	lsls	r3, r3, #25
 800df64:	f53f af12 	bmi.w	800dd8c <_vfiprintf_r+0x4c>
 800df68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df6a:	e711      	b.n	800dd90 <_vfiprintf_r+0x50>
 800df6c:	ab03      	add	r3, sp, #12
 800df6e:	9300      	str	r3, [sp, #0]
 800df70:	462a      	mov	r2, r5
 800df72:	4b09      	ldr	r3, [pc, #36]	; (800df98 <_vfiprintf_r+0x258>)
 800df74:	a904      	add	r1, sp, #16
 800df76:	4630      	mov	r0, r6
 800df78:	f000 f880 	bl	800e07c <_printf_i>
 800df7c:	e7e4      	b.n	800df48 <_vfiprintf_r+0x208>
 800df7e:	bf00      	nop
 800df80:	0800efc0 	.word	0x0800efc0
 800df84:	0800efe0 	.word	0x0800efe0
 800df88:	0800efa0 	.word	0x0800efa0
 800df8c:	0800f000 	.word	0x0800f000
 800df90:	0800f00a 	.word	0x0800f00a
 800df94:	00000000 	.word	0x00000000
 800df98:	0800dd1b 	.word	0x0800dd1b
 800df9c:	0800f006 	.word	0x0800f006

0800dfa0 <_printf_common>:
 800dfa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfa4:	4616      	mov	r6, r2
 800dfa6:	4699      	mov	r9, r3
 800dfa8:	688a      	ldr	r2, [r1, #8]
 800dfaa:	690b      	ldr	r3, [r1, #16]
 800dfac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	bfb8      	it	lt
 800dfb4:	4613      	movlt	r3, r2
 800dfb6:	6033      	str	r3, [r6, #0]
 800dfb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dfbc:	4607      	mov	r7, r0
 800dfbe:	460c      	mov	r4, r1
 800dfc0:	b10a      	cbz	r2, 800dfc6 <_printf_common+0x26>
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	6033      	str	r3, [r6, #0]
 800dfc6:	6823      	ldr	r3, [r4, #0]
 800dfc8:	0699      	lsls	r1, r3, #26
 800dfca:	bf42      	ittt	mi
 800dfcc:	6833      	ldrmi	r3, [r6, #0]
 800dfce:	3302      	addmi	r3, #2
 800dfd0:	6033      	strmi	r3, [r6, #0]
 800dfd2:	6825      	ldr	r5, [r4, #0]
 800dfd4:	f015 0506 	ands.w	r5, r5, #6
 800dfd8:	d106      	bne.n	800dfe8 <_printf_common+0x48>
 800dfda:	f104 0a19 	add.w	sl, r4, #25
 800dfde:	68e3      	ldr	r3, [r4, #12]
 800dfe0:	6832      	ldr	r2, [r6, #0]
 800dfe2:	1a9b      	subs	r3, r3, r2
 800dfe4:	42ab      	cmp	r3, r5
 800dfe6:	dc26      	bgt.n	800e036 <_printf_common+0x96>
 800dfe8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dfec:	1e13      	subs	r3, r2, #0
 800dfee:	6822      	ldr	r2, [r4, #0]
 800dff0:	bf18      	it	ne
 800dff2:	2301      	movne	r3, #1
 800dff4:	0692      	lsls	r2, r2, #26
 800dff6:	d42b      	bmi.n	800e050 <_printf_common+0xb0>
 800dff8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dffc:	4649      	mov	r1, r9
 800dffe:	4638      	mov	r0, r7
 800e000:	47c0      	blx	r8
 800e002:	3001      	adds	r0, #1
 800e004:	d01e      	beq.n	800e044 <_printf_common+0xa4>
 800e006:	6823      	ldr	r3, [r4, #0]
 800e008:	68e5      	ldr	r5, [r4, #12]
 800e00a:	6832      	ldr	r2, [r6, #0]
 800e00c:	f003 0306 	and.w	r3, r3, #6
 800e010:	2b04      	cmp	r3, #4
 800e012:	bf08      	it	eq
 800e014:	1aad      	subeq	r5, r5, r2
 800e016:	68a3      	ldr	r3, [r4, #8]
 800e018:	6922      	ldr	r2, [r4, #16]
 800e01a:	bf0c      	ite	eq
 800e01c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e020:	2500      	movne	r5, #0
 800e022:	4293      	cmp	r3, r2
 800e024:	bfc4      	itt	gt
 800e026:	1a9b      	subgt	r3, r3, r2
 800e028:	18ed      	addgt	r5, r5, r3
 800e02a:	2600      	movs	r6, #0
 800e02c:	341a      	adds	r4, #26
 800e02e:	42b5      	cmp	r5, r6
 800e030:	d11a      	bne.n	800e068 <_printf_common+0xc8>
 800e032:	2000      	movs	r0, #0
 800e034:	e008      	b.n	800e048 <_printf_common+0xa8>
 800e036:	2301      	movs	r3, #1
 800e038:	4652      	mov	r2, sl
 800e03a:	4649      	mov	r1, r9
 800e03c:	4638      	mov	r0, r7
 800e03e:	47c0      	blx	r8
 800e040:	3001      	adds	r0, #1
 800e042:	d103      	bne.n	800e04c <_printf_common+0xac>
 800e044:	f04f 30ff 	mov.w	r0, #4294967295
 800e048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e04c:	3501      	adds	r5, #1
 800e04e:	e7c6      	b.n	800dfde <_printf_common+0x3e>
 800e050:	18e1      	adds	r1, r4, r3
 800e052:	1c5a      	adds	r2, r3, #1
 800e054:	2030      	movs	r0, #48	; 0x30
 800e056:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e05a:	4422      	add	r2, r4
 800e05c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e060:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e064:	3302      	adds	r3, #2
 800e066:	e7c7      	b.n	800dff8 <_printf_common+0x58>
 800e068:	2301      	movs	r3, #1
 800e06a:	4622      	mov	r2, r4
 800e06c:	4649      	mov	r1, r9
 800e06e:	4638      	mov	r0, r7
 800e070:	47c0      	blx	r8
 800e072:	3001      	adds	r0, #1
 800e074:	d0e6      	beq.n	800e044 <_printf_common+0xa4>
 800e076:	3601      	adds	r6, #1
 800e078:	e7d9      	b.n	800e02e <_printf_common+0x8e>
	...

0800e07c <_printf_i>:
 800e07c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e080:	7e0f      	ldrb	r7, [r1, #24]
 800e082:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e084:	2f78      	cmp	r7, #120	; 0x78
 800e086:	4691      	mov	r9, r2
 800e088:	4680      	mov	r8, r0
 800e08a:	460c      	mov	r4, r1
 800e08c:	469a      	mov	sl, r3
 800e08e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e092:	d807      	bhi.n	800e0a4 <_printf_i+0x28>
 800e094:	2f62      	cmp	r7, #98	; 0x62
 800e096:	d80a      	bhi.n	800e0ae <_printf_i+0x32>
 800e098:	2f00      	cmp	r7, #0
 800e09a:	f000 80d8 	beq.w	800e24e <_printf_i+0x1d2>
 800e09e:	2f58      	cmp	r7, #88	; 0x58
 800e0a0:	f000 80a3 	beq.w	800e1ea <_printf_i+0x16e>
 800e0a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e0a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e0ac:	e03a      	b.n	800e124 <_printf_i+0xa8>
 800e0ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e0b2:	2b15      	cmp	r3, #21
 800e0b4:	d8f6      	bhi.n	800e0a4 <_printf_i+0x28>
 800e0b6:	a101      	add	r1, pc, #4	; (adr r1, 800e0bc <_printf_i+0x40>)
 800e0b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e0bc:	0800e115 	.word	0x0800e115
 800e0c0:	0800e129 	.word	0x0800e129
 800e0c4:	0800e0a5 	.word	0x0800e0a5
 800e0c8:	0800e0a5 	.word	0x0800e0a5
 800e0cc:	0800e0a5 	.word	0x0800e0a5
 800e0d0:	0800e0a5 	.word	0x0800e0a5
 800e0d4:	0800e129 	.word	0x0800e129
 800e0d8:	0800e0a5 	.word	0x0800e0a5
 800e0dc:	0800e0a5 	.word	0x0800e0a5
 800e0e0:	0800e0a5 	.word	0x0800e0a5
 800e0e4:	0800e0a5 	.word	0x0800e0a5
 800e0e8:	0800e235 	.word	0x0800e235
 800e0ec:	0800e159 	.word	0x0800e159
 800e0f0:	0800e217 	.word	0x0800e217
 800e0f4:	0800e0a5 	.word	0x0800e0a5
 800e0f8:	0800e0a5 	.word	0x0800e0a5
 800e0fc:	0800e257 	.word	0x0800e257
 800e100:	0800e0a5 	.word	0x0800e0a5
 800e104:	0800e159 	.word	0x0800e159
 800e108:	0800e0a5 	.word	0x0800e0a5
 800e10c:	0800e0a5 	.word	0x0800e0a5
 800e110:	0800e21f 	.word	0x0800e21f
 800e114:	682b      	ldr	r3, [r5, #0]
 800e116:	1d1a      	adds	r2, r3, #4
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	602a      	str	r2, [r5, #0]
 800e11c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e124:	2301      	movs	r3, #1
 800e126:	e0a3      	b.n	800e270 <_printf_i+0x1f4>
 800e128:	6820      	ldr	r0, [r4, #0]
 800e12a:	6829      	ldr	r1, [r5, #0]
 800e12c:	0606      	lsls	r6, r0, #24
 800e12e:	f101 0304 	add.w	r3, r1, #4
 800e132:	d50a      	bpl.n	800e14a <_printf_i+0xce>
 800e134:	680e      	ldr	r6, [r1, #0]
 800e136:	602b      	str	r3, [r5, #0]
 800e138:	2e00      	cmp	r6, #0
 800e13a:	da03      	bge.n	800e144 <_printf_i+0xc8>
 800e13c:	232d      	movs	r3, #45	; 0x2d
 800e13e:	4276      	negs	r6, r6
 800e140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e144:	485e      	ldr	r0, [pc, #376]	; (800e2c0 <_printf_i+0x244>)
 800e146:	230a      	movs	r3, #10
 800e148:	e019      	b.n	800e17e <_printf_i+0x102>
 800e14a:	680e      	ldr	r6, [r1, #0]
 800e14c:	602b      	str	r3, [r5, #0]
 800e14e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e152:	bf18      	it	ne
 800e154:	b236      	sxthne	r6, r6
 800e156:	e7ef      	b.n	800e138 <_printf_i+0xbc>
 800e158:	682b      	ldr	r3, [r5, #0]
 800e15a:	6820      	ldr	r0, [r4, #0]
 800e15c:	1d19      	adds	r1, r3, #4
 800e15e:	6029      	str	r1, [r5, #0]
 800e160:	0601      	lsls	r1, r0, #24
 800e162:	d501      	bpl.n	800e168 <_printf_i+0xec>
 800e164:	681e      	ldr	r6, [r3, #0]
 800e166:	e002      	b.n	800e16e <_printf_i+0xf2>
 800e168:	0646      	lsls	r6, r0, #25
 800e16a:	d5fb      	bpl.n	800e164 <_printf_i+0xe8>
 800e16c:	881e      	ldrh	r6, [r3, #0]
 800e16e:	4854      	ldr	r0, [pc, #336]	; (800e2c0 <_printf_i+0x244>)
 800e170:	2f6f      	cmp	r7, #111	; 0x6f
 800e172:	bf0c      	ite	eq
 800e174:	2308      	moveq	r3, #8
 800e176:	230a      	movne	r3, #10
 800e178:	2100      	movs	r1, #0
 800e17a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e17e:	6865      	ldr	r5, [r4, #4]
 800e180:	60a5      	str	r5, [r4, #8]
 800e182:	2d00      	cmp	r5, #0
 800e184:	bfa2      	ittt	ge
 800e186:	6821      	ldrge	r1, [r4, #0]
 800e188:	f021 0104 	bicge.w	r1, r1, #4
 800e18c:	6021      	strge	r1, [r4, #0]
 800e18e:	b90e      	cbnz	r6, 800e194 <_printf_i+0x118>
 800e190:	2d00      	cmp	r5, #0
 800e192:	d04d      	beq.n	800e230 <_printf_i+0x1b4>
 800e194:	4615      	mov	r5, r2
 800e196:	fbb6 f1f3 	udiv	r1, r6, r3
 800e19a:	fb03 6711 	mls	r7, r3, r1, r6
 800e19e:	5dc7      	ldrb	r7, [r0, r7]
 800e1a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e1a4:	4637      	mov	r7, r6
 800e1a6:	42bb      	cmp	r3, r7
 800e1a8:	460e      	mov	r6, r1
 800e1aa:	d9f4      	bls.n	800e196 <_printf_i+0x11a>
 800e1ac:	2b08      	cmp	r3, #8
 800e1ae:	d10b      	bne.n	800e1c8 <_printf_i+0x14c>
 800e1b0:	6823      	ldr	r3, [r4, #0]
 800e1b2:	07de      	lsls	r6, r3, #31
 800e1b4:	d508      	bpl.n	800e1c8 <_printf_i+0x14c>
 800e1b6:	6923      	ldr	r3, [r4, #16]
 800e1b8:	6861      	ldr	r1, [r4, #4]
 800e1ba:	4299      	cmp	r1, r3
 800e1bc:	bfde      	ittt	le
 800e1be:	2330      	movle	r3, #48	; 0x30
 800e1c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e1c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e1c8:	1b52      	subs	r2, r2, r5
 800e1ca:	6122      	str	r2, [r4, #16]
 800e1cc:	f8cd a000 	str.w	sl, [sp]
 800e1d0:	464b      	mov	r3, r9
 800e1d2:	aa03      	add	r2, sp, #12
 800e1d4:	4621      	mov	r1, r4
 800e1d6:	4640      	mov	r0, r8
 800e1d8:	f7ff fee2 	bl	800dfa0 <_printf_common>
 800e1dc:	3001      	adds	r0, #1
 800e1de:	d14c      	bne.n	800e27a <_printf_i+0x1fe>
 800e1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e1e4:	b004      	add	sp, #16
 800e1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1ea:	4835      	ldr	r0, [pc, #212]	; (800e2c0 <_printf_i+0x244>)
 800e1ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e1f0:	6829      	ldr	r1, [r5, #0]
 800e1f2:	6823      	ldr	r3, [r4, #0]
 800e1f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800e1f8:	6029      	str	r1, [r5, #0]
 800e1fa:	061d      	lsls	r5, r3, #24
 800e1fc:	d514      	bpl.n	800e228 <_printf_i+0x1ac>
 800e1fe:	07df      	lsls	r7, r3, #31
 800e200:	bf44      	itt	mi
 800e202:	f043 0320 	orrmi.w	r3, r3, #32
 800e206:	6023      	strmi	r3, [r4, #0]
 800e208:	b91e      	cbnz	r6, 800e212 <_printf_i+0x196>
 800e20a:	6823      	ldr	r3, [r4, #0]
 800e20c:	f023 0320 	bic.w	r3, r3, #32
 800e210:	6023      	str	r3, [r4, #0]
 800e212:	2310      	movs	r3, #16
 800e214:	e7b0      	b.n	800e178 <_printf_i+0xfc>
 800e216:	6823      	ldr	r3, [r4, #0]
 800e218:	f043 0320 	orr.w	r3, r3, #32
 800e21c:	6023      	str	r3, [r4, #0]
 800e21e:	2378      	movs	r3, #120	; 0x78
 800e220:	4828      	ldr	r0, [pc, #160]	; (800e2c4 <_printf_i+0x248>)
 800e222:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e226:	e7e3      	b.n	800e1f0 <_printf_i+0x174>
 800e228:	0659      	lsls	r1, r3, #25
 800e22a:	bf48      	it	mi
 800e22c:	b2b6      	uxthmi	r6, r6
 800e22e:	e7e6      	b.n	800e1fe <_printf_i+0x182>
 800e230:	4615      	mov	r5, r2
 800e232:	e7bb      	b.n	800e1ac <_printf_i+0x130>
 800e234:	682b      	ldr	r3, [r5, #0]
 800e236:	6826      	ldr	r6, [r4, #0]
 800e238:	6961      	ldr	r1, [r4, #20]
 800e23a:	1d18      	adds	r0, r3, #4
 800e23c:	6028      	str	r0, [r5, #0]
 800e23e:	0635      	lsls	r5, r6, #24
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	d501      	bpl.n	800e248 <_printf_i+0x1cc>
 800e244:	6019      	str	r1, [r3, #0]
 800e246:	e002      	b.n	800e24e <_printf_i+0x1d2>
 800e248:	0670      	lsls	r0, r6, #25
 800e24a:	d5fb      	bpl.n	800e244 <_printf_i+0x1c8>
 800e24c:	8019      	strh	r1, [r3, #0]
 800e24e:	2300      	movs	r3, #0
 800e250:	6123      	str	r3, [r4, #16]
 800e252:	4615      	mov	r5, r2
 800e254:	e7ba      	b.n	800e1cc <_printf_i+0x150>
 800e256:	682b      	ldr	r3, [r5, #0]
 800e258:	1d1a      	adds	r2, r3, #4
 800e25a:	602a      	str	r2, [r5, #0]
 800e25c:	681d      	ldr	r5, [r3, #0]
 800e25e:	6862      	ldr	r2, [r4, #4]
 800e260:	2100      	movs	r1, #0
 800e262:	4628      	mov	r0, r5
 800e264:	f7f1 ffbc 	bl	80001e0 <memchr>
 800e268:	b108      	cbz	r0, 800e26e <_printf_i+0x1f2>
 800e26a:	1b40      	subs	r0, r0, r5
 800e26c:	6060      	str	r0, [r4, #4]
 800e26e:	6863      	ldr	r3, [r4, #4]
 800e270:	6123      	str	r3, [r4, #16]
 800e272:	2300      	movs	r3, #0
 800e274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e278:	e7a8      	b.n	800e1cc <_printf_i+0x150>
 800e27a:	6923      	ldr	r3, [r4, #16]
 800e27c:	462a      	mov	r2, r5
 800e27e:	4649      	mov	r1, r9
 800e280:	4640      	mov	r0, r8
 800e282:	47d0      	blx	sl
 800e284:	3001      	adds	r0, #1
 800e286:	d0ab      	beq.n	800e1e0 <_printf_i+0x164>
 800e288:	6823      	ldr	r3, [r4, #0]
 800e28a:	079b      	lsls	r3, r3, #30
 800e28c:	d413      	bmi.n	800e2b6 <_printf_i+0x23a>
 800e28e:	68e0      	ldr	r0, [r4, #12]
 800e290:	9b03      	ldr	r3, [sp, #12]
 800e292:	4298      	cmp	r0, r3
 800e294:	bfb8      	it	lt
 800e296:	4618      	movlt	r0, r3
 800e298:	e7a4      	b.n	800e1e4 <_printf_i+0x168>
 800e29a:	2301      	movs	r3, #1
 800e29c:	4632      	mov	r2, r6
 800e29e:	4649      	mov	r1, r9
 800e2a0:	4640      	mov	r0, r8
 800e2a2:	47d0      	blx	sl
 800e2a4:	3001      	adds	r0, #1
 800e2a6:	d09b      	beq.n	800e1e0 <_printf_i+0x164>
 800e2a8:	3501      	adds	r5, #1
 800e2aa:	68e3      	ldr	r3, [r4, #12]
 800e2ac:	9903      	ldr	r1, [sp, #12]
 800e2ae:	1a5b      	subs	r3, r3, r1
 800e2b0:	42ab      	cmp	r3, r5
 800e2b2:	dcf2      	bgt.n	800e29a <_printf_i+0x21e>
 800e2b4:	e7eb      	b.n	800e28e <_printf_i+0x212>
 800e2b6:	2500      	movs	r5, #0
 800e2b8:	f104 0619 	add.w	r6, r4, #25
 800e2bc:	e7f5      	b.n	800e2aa <_printf_i+0x22e>
 800e2be:	bf00      	nop
 800e2c0:	0800f011 	.word	0x0800f011
 800e2c4:	0800f022 	.word	0x0800f022

0800e2c8 <__sread>:
 800e2c8:	b510      	push	{r4, lr}
 800e2ca:	460c      	mov	r4, r1
 800e2cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2d0:	f000 f8e6 	bl	800e4a0 <_read_r>
 800e2d4:	2800      	cmp	r0, #0
 800e2d6:	bfab      	itete	ge
 800e2d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e2da:	89a3      	ldrhlt	r3, [r4, #12]
 800e2dc:	181b      	addge	r3, r3, r0
 800e2de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e2e2:	bfac      	ite	ge
 800e2e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e2e6:	81a3      	strhlt	r3, [r4, #12]
 800e2e8:	bd10      	pop	{r4, pc}

0800e2ea <__swrite>:
 800e2ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ee:	461f      	mov	r7, r3
 800e2f0:	898b      	ldrh	r3, [r1, #12]
 800e2f2:	05db      	lsls	r3, r3, #23
 800e2f4:	4605      	mov	r5, r0
 800e2f6:	460c      	mov	r4, r1
 800e2f8:	4616      	mov	r6, r2
 800e2fa:	d505      	bpl.n	800e308 <__swrite+0x1e>
 800e2fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e300:	2302      	movs	r3, #2
 800e302:	2200      	movs	r2, #0
 800e304:	f000 f870 	bl	800e3e8 <_lseek_r>
 800e308:	89a3      	ldrh	r3, [r4, #12]
 800e30a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e30e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e312:	81a3      	strh	r3, [r4, #12]
 800e314:	4632      	mov	r2, r6
 800e316:	463b      	mov	r3, r7
 800e318:	4628      	mov	r0, r5
 800e31a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e31e:	f000 b817 	b.w	800e350 <_write_r>

0800e322 <__sseek>:
 800e322:	b510      	push	{r4, lr}
 800e324:	460c      	mov	r4, r1
 800e326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e32a:	f000 f85d 	bl	800e3e8 <_lseek_r>
 800e32e:	1c43      	adds	r3, r0, #1
 800e330:	89a3      	ldrh	r3, [r4, #12]
 800e332:	bf15      	itete	ne
 800e334:	6560      	strne	r0, [r4, #84]	; 0x54
 800e336:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e33a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e33e:	81a3      	strheq	r3, [r4, #12]
 800e340:	bf18      	it	ne
 800e342:	81a3      	strhne	r3, [r4, #12]
 800e344:	bd10      	pop	{r4, pc}

0800e346 <__sclose>:
 800e346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e34a:	f000 b81b 	b.w	800e384 <_close_r>
	...

0800e350 <_write_r>:
 800e350:	b538      	push	{r3, r4, r5, lr}
 800e352:	4d07      	ldr	r5, [pc, #28]	; (800e370 <_write_r+0x20>)
 800e354:	4604      	mov	r4, r0
 800e356:	4608      	mov	r0, r1
 800e358:	4611      	mov	r1, r2
 800e35a:	2200      	movs	r2, #0
 800e35c:	602a      	str	r2, [r5, #0]
 800e35e:	461a      	mov	r2, r3
 800e360:	f7f3 fb55 	bl	8001a0e <_write>
 800e364:	1c43      	adds	r3, r0, #1
 800e366:	d102      	bne.n	800e36e <_write_r+0x1e>
 800e368:	682b      	ldr	r3, [r5, #0]
 800e36a:	b103      	cbz	r3, 800e36e <_write_r+0x1e>
 800e36c:	6023      	str	r3, [r4, #0]
 800e36e:	bd38      	pop	{r3, r4, r5, pc}
 800e370:	20002aec 	.word	0x20002aec

0800e374 <abort>:
 800e374:	b508      	push	{r3, lr}
 800e376:	2006      	movs	r0, #6
 800e378:	f000 f8cc 	bl	800e514 <raise>
 800e37c:	2001      	movs	r0, #1
 800e37e:	f7f3 fb1f 	bl	80019c0 <_exit>
	...

0800e384 <_close_r>:
 800e384:	b538      	push	{r3, r4, r5, lr}
 800e386:	4d06      	ldr	r5, [pc, #24]	; (800e3a0 <_close_r+0x1c>)
 800e388:	2300      	movs	r3, #0
 800e38a:	4604      	mov	r4, r0
 800e38c:	4608      	mov	r0, r1
 800e38e:	602b      	str	r3, [r5, #0]
 800e390:	f7f3 fb59 	bl	8001a46 <_close>
 800e394:	1c43      	adds	r3, r0, #1
 800e396:	d102      	bne.n	800e39e <_close_r+0x1a>
 800e398:	682b      	ldr	r3, [r5, #0]
 800e39a:	b103      	cbz	r3, 800e39e <_close_r+0x1a>
 800e39c:	6023      	str	r3, [r4, #0]
 800e39e:	bd38      	pop	{r3, r4, r5, pc}
 800e3a0:	20002aec 	.word	0x20002aec

0800e3a4 <_fstat_r>:
 800e3a4:	b538      	push	{r3, r4, r5, lr}
 800e3a6:	4d07      	ldr	r5, [pc, #28]	; (800e3c4 <_fstat_r+0x20>)
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	4604      	mov	r4, r0
 800e3ac:	4608      	mov	r0, r1
 800e3ae:	4611      	mov	r1, r2
 800e3b0:	602b      	str	r3, [r5, #0]
 800e3b2:	f7f3 fb54 	bl	8001a5e <_fstat>
 800e3b6:	1c43      	adds	r3, r0, #1
 800e3b8:	d102      	bne.n	800e3c0 <_fstat_r+0x1c>
 800e3ba:	682b      	ldr	r3, [r5, #0]
 800e3bc:	b103      	cbz	r3, 800e3c0 <_fstat_r+0x1c>
 800e3be:	6023      	str	r3, [r4, #0]
 800e3c0:	bd38      	pop	{r3, r4, r5, pc}
 800e3c2:	bf00      	nop
 800e3c4:	20002aec 	.word	0x20002aec

0800e3c8 <_isatty_r>:
 800e3c8:	b538      	push	{r3, r4, r5, lr}
 800e3ca:	4d06      	ldr	r5, [pc, #24]	; (800e3e4 <_isatty_r+0x1c>)
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	4604      	mov	r4, r0
 800e3d0:	4608      	mov	r0, r1
 800e3d2:	602b      	str	r3, [r5, #0]
 800e3d4:	f7f3 fb53 	bl	8001a7e <_isatty>
 800e3d8:	1c43      	adds	r3, r0, #1
 800e3da:	d102      	bne.n	800e3e2 <_isatty_r+0x1a>
 800e3dc:	682b      	ldr	r3, [r5, #0]
 800e3de:	b103      	cbz	r3, 800e3e2 <_isatty_r+0x1a>
 800e3e0:	6023      	str	r3, [r4, #0]
 800e3e2:	bd38      	pop	{r3, r4, r5, pc}
 800e3e4:	20002aec 	.word	0x20002aec

0800e3e8 <_lseek_r>:
 800e3e8:	b538      	push	{r3, r4, r5, lr}
 800e3ea:	4d07      	ldr	r5, [pc, #28]	; (800e408 <_lseek_r+0x20>)
 800e3ec:	4604      	mov	r4, r0
 800e3ee:	4608      	mov	r0, r1
 800e3f0:	4611      	mov	r1, r2
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	602a      	str	r2, [r5, #0]
 800e3f6:	461a      	mov	r2, r3
 800e3f8:	f7f3 fb4c 	bl	8001a94 <_lseek>
 800e3fc:	1c43      	adds	r3, r0, #1
 800e3fe:	d102      	bne.n	800e406 <_lseek_r+0x1e>
 800e400:	682b      	ldr	r3, [r5, #0]
 800e402:	b103      	cbz	r3, 800e406 <_lseek_r+0x1e>
 800e404:	6023      	str	r3, [r4, #0]
 800e406:	bd38      	pop	{r3, r4, r5, pc}
 800e408:	20002aec 	.word	0x20002aec

0800e40c <memmove>:
 800e40c:	4288      	cmp	r0, r1
 800e40e:	b510      	push	{r4, lr}
 800e410:	eb01 0402 	add.w	r4, r1, r2
 800e414:	d902      	bls.n	800e41c <memmove+0x10>
 800e416:	4284      	cmp	r4, r0
 800e418:	4623      	mov	r3, r4
 800e41a:	d807      	bhi.n	800e42c <memmove+0x20>
 800e41c:	1e43      	subs	r3, r0, #1
 800e41e:	42a1      	cmp	r1, r4
 800e420:	d008      	beq.n	800e434 <memmove+0x28>
 800e422:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e426:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e42a:	e7f8      	b.n	800e41e <memmove+0x12>
 800e42c:	4402      	add	r2, r0
 800e42e:	4601      	mov	r1, r0
 800e430:	428a      	cmp	r2, r1
 800e432:	d100      	bne.n	800e436 <memmove+0x2a>
 800e434:	bd10      	pop	{r4, pc}
 800e436:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e43a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e43e:	e7f7      	b.n	800e430 <memmove+0x24>

0800e440 <_realloc_r>:
 800e440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e444:	4680      	mov	r8, r0
 800e446:	4614      	mov	r4, r2
 800e448:	460e      	mov	r6, r1
 800e44a:	b921      	cbnz	r1, 800e456 <_realloc_r+0x16>
 800e44c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e450:	4611      	mov	r1, r2
 800e452:	f7fe bd83 	b.w	800cf5c <_malloc_r>
 800e456:	b92a      	cbnz	r2, 800e464 <_realloc_r+0x24>
 800e458:	f7fe fd14 	bl	800ce84 <_free_r>
 800e45c:	4625      	mov	r5, r4
 800e45e:	4628      	mov	r0, r5
 800e460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e464:	f000 f872 	bl	800e54c <_malloc_usable_size_r>
 800e468:	4284      	cmp	r4, r0
 800e46a:	4607      	mov	r7, r0
 800e46c:	d802      	bhi.n	800e474 <_realloc_r+0x34>
 800e46e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e472:	d812      	bhi.n	800e49a <_realloc_r+0x5a>
 800e474:	4621      	mov	r1, r4
 800e476:	4640      	mov	r0, r8
 800e478:	f7fe fd70 	bl	800cf5c <_malloc_r>
 800e47c:	4605      	mov	r5, r0
 800e47e:	2800      	cmp	r0, #0
 800e480:	d0ed      	beq.n	800e45e <_realloc_r+0x1e>
 800e482:	42bc      	cmp	r4, r7
 800e484:	4622      	mov	r2, r4
 800e486:	4631      	mov	r1, r6
 800e488:	bf28      	it	cs
 800e48a:	463a      	movcs	r2, r7
 800e48c:	f7fe fce4 	bl	800ce58 <memcpy>
 800e490:	4631      	mov	r1, r6
 800e492:	4640      	mov	r0, r8
 800e494:	f7fe fcf6 	bl	800ce84 <_free_r>
 800e498:	e7e1      	b.n	800e45e <_realloc_r+0x1e>
 800e49a:	4635      	mov	r5, r6
 800e49c:	e7df      	b.n	800e45e <_realloc_r+0x1e>
	...

0800e4a0 <_read_r>:
 800e4a0:	b538      	push	{r3, r4, r5, lr}
 800e4a2:	4d07      	ldr	r5, [pc, #28]	; (800e4c0 <_read_r+0x20>)
 800e4a4:	4604      	mov	r4, r0
 800e4a6:	4608      	mov	r0, r1
 800e4a8:	4611      	mov	r1, r2
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	602a      	str	r2, [r5, #0]
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	f7f3 fa90 	bl	80019d4 <_read>
 800e4b4:	1c43      	adds	r3, r0, #1
 800e4b6:	d102      	bne.n	800e4be <_read_r+0x1e>
 800e4b8:	682b      	ldr	r3, [r5, #0]
 800e4ba:	b103      	cbz	r3, 800e4be <_read_r+0x1e>
 800e4bc:	6023      	str	r3, [r4, #0]
 800e4be:	bd38      	pop	{r3, r4, r5, pc}
 800e4c0:	20002aec 	.word	0x20002aec

0800e4c4 <_raise_r>:
 800e4c4:	291f      	cmp	r1, #31
 800e4c6:	b538      	push	{r3, r4, r5, lr}
 800e4c8:	4604      	mov	r4, r0
 800e4ca:	460d      	mov	r5, r1
 800e4cc:	d904      	bls.n	800e4d8 <_raise_r+0x14>
 800e4ce:	2316      	movs	r3, #22
 800e4d0:	6003      	str	r3, [r0, #0]
 800e4d2:	f04f 30ff 	mov.w	r0, #4294967295
 800e4d6:	bd38      	pop	{r3, r4, r5, pc}
 800e4d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e4da:	b112      	cbz	r2, 800e4e2 <_raise_r+0x1e>
 800e4dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e4e0:	b94b      	cbnz	r3, 800e4f6 <_raise_r+0x32>
 800e4e2:	4620      	mov	r0, r4
 800e4e4:	f000 f830 	bl	800e548 <_getpid_r>
 800e4e8:	462a      	mov	r2, r5
 800e4ea:	4601      	mov	r1, r0
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4f2:	f000 b817 	b.w	800e524 <_kill_r>
 800e4f6:	2b01      	cmp	r3, #1
 800e4f8:	d00a      	beq.n	800e510 <_raise_r+0x4c>
 800e4fa:	1c59      	adds	r1, r3, #1
 800e4fc:	d103      	bne.n	800e506 <_raise_r+0x42>
 800e4fe:	2316      	movs	r3, #22
 800e500:	6003      	str	r3, [r0, #0]
 800e502:	2001      	movs	r0, #1
 800e504:	e7e7      	b.n	800e4d6 <_raise_r+0x12>
 800e506:	2400      	movs	r4, #0
 800e508:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e50c:	4628      	mov	r0, r5
 800e50e:	4798      	blx	r3
 800e510:	2000      	movs	r0, #0
 800e512:	e7e0      	b.n	800e4d6 <_raise_r+0x12>

0800e514 <raise>:
 800e514:	4b02      	ldr	r3, [pc, #8]	; (800e520 <raise+0xc>)
 800e516:	4601      	mov	r1, r0
 800e518:	6818      	ldr	r0, [r3, #0]
 800e51a:	f7ff bfd3 	b.w	800e4c4 <_raise_r>
 800e51e:	bf00      	nop
 800e520:	20000010 	.word	0x20000010

0800e524 <_kill_r>:
 800e524:	b538      	push	{r3, r4, r5, lr}
 800e526:	4d07      	ldr	r5, [pc, #28]	; (800e544 <_kill_r+0x20>)
 800e528:	2300      	movs	r3, #0
 800e52a:	4604      	mov	r4, r0
 800e52c:	4608      	mov	r0, r1
 800e52e:	4611      	mov	r1, r2
 800e530:	602b      	str	r3, [r5, #0]
 800e532:	f7f3 fa35 	bl	80019a0 <_kill>
 800e536:	1c43      	adds	r3, r0, #1
 800e538:	d102      	bne.n	800e540 <_kill_r+0x1c>
 800e53a:	682b      	ldr	r3, [r5, #0]
 800e53c:	b103      	cbz	r3, 800e540 <_kill_r+0x1c>
 800e53e:	6023      	str	r3, [r4, #0]
 800e540:	bd38      	pop	{r3, r4, r5, pc}
 800e542:	bf00      	nop
 800e544:	20002aec 	.word	0x20002aec

0800e548 <_getpid_r>:
 800e548:	f7f3 ba22 	b.w	8001990 <_getpid>

0800e54c <_malloc_usable_size_r>:
 800e54c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e550:	1f18      	subs	r0, r3, #4
 800e552:	2b00      	cmp	r3, #0
 800e554:	bfbc      	itt	lt
 800e556:	580b      	ldrlt	r3, [r1, r0]
 800e558:	18c0      	addlt	r0, r0, r3
 800e55a:	4770      	bx	lr

0800e55c <_init>:
 800e55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e55e:	bf00      	nop
 800e560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e562:	bc08      	pop	{r3}
 800e564:	469e      	mov	lr, r3
 800e566:	4770      	bx	lr

0800e568 <_fini>:
 800e568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e56a:	bf00      	nop
 800e56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e56e:	bc08      	pop	{r3}
 800e570:	469e      	mov	lr, r3
 800e572:	4770      	bx	lr
