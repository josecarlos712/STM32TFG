
STM32TFG-WIFI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d428  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac4  0800d5b8  0800d5b8  0001d5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e07c  0800e07c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800e07c  0800e07c  0001e07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e084  0800e084  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e084  0800e084  0001e084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e088  0800e088  0001e088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800e08c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003234  20000074  0800e100  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200032a8  0800e100  000232a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000306f8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c1d  00000000  00000000  0005079c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002870  00000000  00000000  000563c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002638  00000000  00000000  00058c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007d78  00000000  00000000  0005b268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002df57  00000000  00000000  00062fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010cd94  00000000  00000000  00090f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019dccb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ba6c  00000000  00000000  0019dd1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d5a0 	.word	0x0800d5a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800d5a0 	.word	0x0800d5a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <__io_putchar>:
#include "SerialTask.h"

PUTCHAR_PROTOTYPE {
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

	//xSemaphoreTake(xSemaphoreSerialHandle, portMAX_DELAY);
	while (HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 30000)) {
 800058c:	bf00      	nop
 800058e:	1d39      	adds	r1, r7, #4
 8000590:	f247 5330 	movw	r3, #30000	; 0x7530
 8000594:	2201      	movs	r2, #1
 8000596:	480b      	ldr	r0, [pc, #44]	; (80005c4 <__io_putchar+0x40>)
 8000598:	f005 fe08 	bl	80061ac <HAL_UART_Transmit>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d1f5      	bne.n	800058e <__io_putchar+0xa>
		;
	}
	while (HAL_OK != HAL_UART_Transmit(&huart4, (uint8_t*) &ch, 1, 30000)) {
 80005a2:	bf00      	nop
 80005a4:	1d39      	adds	r1, r7, #4
 80005a6:	f247 5330 	movw	r3, #30000	; 0x7530
 80005aa:	2201      	movs	r2, #1
 80005ac:	4806      	ldr	r0, [pc, #24]	; (80005c8 <__io_putchar+0x44>)
 80005ae:	f005 fdfd 	bl	80061ac <HAL_UART_Transmit>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d1f5      	bne.n	80005a4 <__io_putchar+0x20>
		;
	}
	//HAL_UART_Transmit_IT(&huart1, (uint8_t*) &ch, 1);
	return ch;
 80005b8:	687b      	ldr	r3, [r7, #4]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000240 	.word	0x20000240
 80005c8:	200001bc 	.word	0x200001bc

080005cc <TareaWebServer>:
		//vTaskDelay(pMov.duration * 100);
		vTaskDelay(50);
	}
}

void TareaWebServer(void *pArg) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	printf("\rHOLA MUNDO\n\r");
 80005d4:	4804      	ldr	r0, [pc, #16]	; (80005e8 <TareaWebServer+0x1c>)
 80005d6:	f00b fe5b 	bl	800c290 <iprintf>
	wifi_server();
 80005da:	f001 f8af 	bl	800173c <wifi_server>
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	0800d5d8 	.word	0x0800d5d8

080005ec <CreateSerialObjects>:

void CreateSerialObjects() {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	//Liberamos el semaforo
	xSemaphoreGive(xSemaphoreSerialHandle);
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <CreateSerialObjects+0x18>)
 80005f2:	6818      	ldr	r0, [r3, #0]
 80005f4:	2300      	movs	r3, #0
 80005f6:	2200      	movs	r2, #0
 80005f8:	2100      	movs	r1, #0
 80005fa:	f009 f935 	bl	8009868 <xQueueGenericSend>

	//Creamos una cola de 16 elementos en la que cada elemento tiene 1 byte
	//instructionQueueHandle = xQueueCreate(16, 1);
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200006d4 	.word	0x200006d4

08000608 <PrintTask>:

void PrintTask(void *parg) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	while (1) {
		printf("\rCreateTask\n");
 8000610:	4803      	ldr	r0, [pc, #12]	; (8000620 <PrintTask+0x18>)
 8000612:	f00b fec3 	bl	800c39c <puts>
		vTaskDelay(1000);
 8000616:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061a:	f009 ff13 	bl	800a444 <vTaskDelay>
		printf("\rCreateTask\n");
 800061e:	e7f7      	b.n	8000610 <PrintTask+0x8>
 8000620:	0800d5e8 	.word	0x0800d5e8

08000624 <CreateSerialTask>:
	}
}

void CreateSerialTask() {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af02      	add	r7, sp, #8
	xTaskCreate(TareaWebServer, "TareaWebServer", 256, NULL, 2, NULL);
 800062a:	2300      	movs	r3, #0
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	2302      	movs	r3, #2
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2300      	movs	r3, #0
 8000634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000638:	4908      	ldr	r1, [pc, #32]	; (800065c <CreateSerialTask+0x38>)
 800063a:	4809      	ldr	r0, [pc, #36]	; (8000660 <CreateSerialTask+0x3c>)
 800063c:	f009 fda7 	bl	800a18e <xTaskCreate>
	//xTaskCreate(serialTxTask, "serialTxTask", 256, NULL, 1, NULL);
	//xTaskCreate(serialRxTask, "serialRxTask", 256, NULL, 1, NULL);
	xTaskCreate(PrintTask, "PrintTask", 256, NULL, 1, NULL);
 8000640:	2300      	movs	r3, #0
 8000642:	9301      	str	r3, [sp, #4]
 8000644:	2301      	movs	r3, #1
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2300      	movs	r3, #0
 800064a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800064e:	4905      	ldr	r1, [pc, #20]	; (8000664 <CreateSerialTask+0x40>)
 8000650:	4805      	ldr	r0, [pc, #20]	; (8000668 <CreateSerialTask+0x44>)
 8000652:	f009 fd9c 	bl	800a18e <xTaskCreate>
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	0800d5f4 	.word	0x0800d5f4
 8000660:	080005cd 	.word	0x080005cd
 8000664:	0800d604 	.word	0x0800d604
 8000668:	08000609 	.word	0x08000609

0800066c <__io_getchar>:
	static signed long xHigherPriorityTaskWoken = pdFALSE;

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}

int __io_getchar(void) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	71fb      	strb	r3, [r7, #7]

	//while(HAL_OK != HAL_UART_Receive(&huart1, &ch, 1, 30000))
	//{
	//	;
	//}
	HAL_UART_Receive(&huart1, &ch, 1, 0);
 8000676:	1df9      	adds	r1, r7, #7
 8000678:	2300      	movs	r3, #0
 800067a:	2201      	movs	r2, #1
 800067c:	4803      	ldr	r0, [pc, #12]	; (800068c <__io_getchar+0x20>)
 800067e:	f005 fe29 	bl	80062d4 <HAL_UART_Receive>

	return ch;
 8000682:	79fb      	ldrb	r3, [r7, #7]
}
 8000684:	4618      	mov	r0, r3
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000240 	.word	0x20000240

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000694:	f001 fb2d 	bl	8001cf2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000698:	f000 f840 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f000 fa0a 	bl	8000ab4 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80006a0:	f000 f89e 	bl	80007e0 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80006a4:	f000 f8d4 	bl	8000850 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80006a8:	f000 f912 	bl	80008d0 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80006ac:	f000 f936 	bl	800091c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80006b0:	f000 f9a2 	bl	80009f8 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006b4:	f000 f9d0 	bl	8000a58 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 80006b8:	f000 f96e 	bl	8000998 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006bc:	f008 fc50 	bl	8008f60 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of xSemaphoreSerial */
  xSemaphoreSerialHandle = osSemaphoreNew(1, 1, &xSemaphoreSerial_attributes);
 80006c0:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <main+0x70>)
 80006c2:	2101      	movs	r1, #1
 80006c4:	2001      	movs	r0, #1
 80006c6:	f008 fd42 	bl	800914e <osSemaphoreNew>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a0d      	ldr	r2, [pc, #52]	; (8000704 <main+0x74>)
 80006ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  CreateSerialObjects();
 80006d0:	f7ff ff8c 	bl	80005ec <CreateSerialObjects>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of instructionQueue */
  instructionQueueHandle = osMessageQueueNew (100, sizeof(MovementInstruction_t), &instructionQueue_attributes);
 80006d4:	4a0c      	ldr	r2, [pc, #48]	; (8000708 <main+0x78>)
 80006d6:	2102      	movs	r1, #2
 80006d8:	2064      	movs	r0, #100	; 0x64
 80006da:	f008 fdc1 	bl	8009260 <osMessageQueueNew>
 80006de:	4603      	mov	r3, r0
 80006e0:	4a0a      	ldr	r2, [pc, #40]	; (800070c <main+0x7c>)
 80006e2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006e4:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <main+0x80>)
 80006e6:	2100      	movs	r1, #0
 80006e8:	480a      	ldr	r0, [pc, #40]	; (8000714 <main+0x84>)
 80006ea:	f008 fc83 	bl	8008ff4 <osThreadNew>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a09      	ldr	r2, [pc, #36]	; (8000718 <main+0x88>)
 80006f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  CreateSerialTask();
 80006f4:	f7ff ff96 	bl	8000624 <CreateSerialTask>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006f8:	f008 fc56 	bl	8008fa8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <main+0x6c>
 80006fe:	bf00      	nop
 8000700:	0800dedc 	.word	0x0800dedc
 8000704:	200006d4 	.word	0x200006d4
 8000708:	0800dec4 	.word	0x0800dec4
 800070c:	200006d0 	.word	0x200006d0
 8000710:	0800dea0 	.word	0x0800dea0
 8000714:	08000df9 	.word	0x08000df9
 8000718:	200006cc 	.word	0x200006cc

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b096      	sub	sp, #88	; 0x58
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2244      	movs	r2, #68	; 0x44
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f00b fcc8 	bl	800c0c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	463b      	mov	r3, r7
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800073e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000742:	f002 fad5 	bl	8002cf0 <HAL_PWREx_ControlVoltageScaling>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800074c:	f000 fb6e 	bl	8000e2c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000750:	f002 fab0 	bl	8002cb4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000754:	4b21      	ldr	r3, [pc, #132]	; (80007dc <SystemClock_Config+0xc0>)
 8000756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800075a:	4a20      	ldr	r2, [pc, #128]	; (80007dc <SystemClock_Config+0xc0>)
 800075c:	f023 0318 	bic.w	r3, r3, #24
 8000760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000764:	2314      	movs	r3, #20
 8000766:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000768:	2301      	movs	r3, #1
 800076a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800076c:	2301      	movs	r3, #1
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000774:	2360      	movs	r3, #96	; 0x60
 8000776:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000778:	2302      	movs	r3, #2
 800077a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800077c:	2301      	movs	r3, #1
 800077e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000780:	2301      	movs	r3, #1
 8000782:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000784:	2328      	movs	r3, #40	; 0x28
 8000786:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000788:	2307      	movs	r3, #7
 800078a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800078c:	2302      	movs	r3, #2
 800078e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000790:	2302      	movs	r3, #2
 8000792:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4618      	mov	r0, r3
 800079a:	f002 fbcb 	bl	8002f34 <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007a4:	f000 fb42 	bl	8000e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	230f      	movs	r3, #15
 80007aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ac:	2303      	movs	r3, #3
 80007ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007bc:	463b      	mov	r3, r7
 80007be:	2104      	movs	r1, #4
 80007c0:	4618      	mov	r0, r3
 80007c2:	f002 ff9f 	bl	8003704 <HAL_RCC_ClockConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007cc:	f000 fb2e 	bl	8000e2c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007d0:	f003 fcba 	bl	8004148 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007d4:	bf00      	nop
 80007d6:	3758      	adds	r7, #88	; 0x58
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40021000 	.word	0x40021000

080007e0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80007e4:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_DFSDM1_Init+0x68>)
 80007e6:	4a19      	ldr	r2, [pc, #100]	; (800084c <MX_DFSDM1_Init+0x6c>)
 80007e8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_DFSDM1_Init+0x68>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80007f0:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_DFSDM1_Init+0x68>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_DFSDM1_Init+0x68>)
 80007f8:	2202      	movs	r2, #2
 80007fa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_DFSDM1_Init+0x68>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_DFSDM1_Init+0x68>)
 8000804:	2200      	movs	r2, #0
 8000806:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_DFSDM1_Init+0x68>)
 800080a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800080e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <MX_DFSDM1_Init+0x68>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_DFSDM1_Init+0x68>)
 8000818:	2204      	movs	r2, #4
 800081a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <MX_DFSDM1_Init+0x68>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_DFSDM1_Init+0x68>)
 8000824:	2201      	movs	r2, #1
 8000826:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <MX_DFSDM1_Init+0x68>)
 800082a:	2200      	movs	r2, #0
 800082c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_DFSDM1_Init+0x68>)
 8000830:	2200      	movs	r2, #0
 8000832:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_DFSDM1_Init+0x68>)
 8000836:	f001 fb9b 	bl	8001f70 <HAL_DFSDM_ChannelInit>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000840:	f000 faf4 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000090 	.word	0x20000090
 800084c:	40016020 	.word	0x40016020

08000850 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000856:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <MX_I2C2_Init+0x78>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_I2C2_Init+0x74>)
 800085c:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <MX_I2C2_Init+0x7c>)
 800085e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000868:	2201      	movs	r2, #1
 800086a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_I2C2_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_I2C2_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800088a:	480e      	ldr	r0, [pc, #56]	; (80008c4 <MX_I2C2_Init+0x74>)
 800088c:	f001 ffa4 	bl	80027d8 <HAL_I2C_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000896:	f000 fac9 	bl	8000e2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800089a:	2100      	movs	r1, #0
 800089c:	4809      	ldr	r0, [pc, #36]	; (80008c4 <MX_I2C2_Init+0x74>)
 800089e:	f002 f82a 	bl	80028f6 <HAL_I2CEx_ConfigAnalogFilter>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008a8:	f000 fac0 	bl	8000e2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_I2C2_Init+0x74>)
 80008b0:	f002 f86c 	bl	800298c <HAL_I2CEx_ConfigDigitalFilter>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008ba:	f000 fab7 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000c8 	.word	0x200000c8
 80008c8:	40005800 	.word	0x40005800
 80008cc:	10909cec 	.word	0x10909cec

080008d0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_QUADSPI_Init+0x44>)
 80008d6:	4a10      	ldr	r2, [pc, #64]	; (8000918 <MX_QUADSPI_Init+0x48>)
 80008d8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_QUADSPI_Init+0x44>)
 80008dc:	2202      	movs	r2, #2
 80008de:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_QUADSPI_Init+0x44>)
 80008e2:	2204      	movs	r2, #4
 80008e4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_QUADSPI_Init+0x44>)
 80008e8:	2210      	movs	r2, #16
 80008ea:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_QUADSPI_Init+0x44>)
 80008ee:	2217      	movs	r2, #23
 80008f0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <MX_QUADSPI_Init+0x44>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_QUADSPI_Init+0x44>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_QUADSPI_Init+0x44>)
 8000900:	f002 fa5c 	bl	8002dbc <HAL_QSPI_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800090a:	f000 fa8f 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000114 	.word	0x20000114
 8000918:	a0001000 	.word	0xa0001000

0800091c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <MX_SPI3_Init+0x74>)
 8000922:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <MX_SPI3_Init+0x78>)
 8000924:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_SPI3_Init+0x74>)
 8000928:	f44f 7282 	mov.w	r2, #260	; 0x104
 800092c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_SPI3_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000934:	4b16      	ldr	r3, [pc, #88]	; (8000990 <MX_SPI3_Init+0x74>)
 8000936:	f44f 7240 	mov.w	r2, #768	; 0x300
 800093a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_SPI3_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <MX_SPI3_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_SPI3_Init+0x74>)
 800094a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800094e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_SPI3_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_SPI3_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_SPI3_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_SPI3_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_SPI3_Init+0x74>)
 800096a:	2207      	movs	r2, #7
 800096c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_SPI3_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_SPI3_Init+0x74>)
 8000976:	2208      	movs	r2, #8
 8000978:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_SPI3_Init+0x74>)
 800097c:	f003 fdc6 	bl	800450c <HAL_SPI_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000986:	f000 fa51 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000158 	.word	0x20000158
 8000994:	40003c00 	.word	0x40003c00

08000998 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_UART4_Init+0x58>)
 800099e:	4a15      	ldr	r2, [pc, #84]	; (80009f4 <MX_UART4_Init+0x5c>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_UART4_Init+0x58>)
 80009a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009a8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_UART4_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_UART4_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_UART4_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_UART4_Init+0x58>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_UART4_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_UART4_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_UART4_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_UART4_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_UART4_Init+0x58>)
 80009dc:	f005 fb98 	bl	8006110 <HAL_UART_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80009e6:	f000 fa21 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200001bc 	.word	0x200001bc
 80009f4:	40004c00 	.word	0x40004c00

080009f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <MX_USART1_UART_Init+0x58>)
 80009fe:	4a15      	ldr	r2, [pc, #84]	; (8000a54 <MX_USART1_UART_Init+0x5c>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a02:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <MX_USART1_UART_Init+0x58>)
 8000a04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_USART1_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_USART1_UART_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_USART1_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_USART1_UART_Init+0x58>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <MX_USART1_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_USART1_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <MX_USART1_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_USART1_UART_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_USART1_UART_Init+0x58>)
 8000a3c:	f005 fb68 	bl	8006110 <HAL_UART_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a46:	f000 f9f1 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000240 	.word	0x20000240
 8000a54:	40013800 	.word	0x40013800

08000a58 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a66:	2206      	movs	r2, #6
 8000a68:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a72:	2202      	movs	r2, #2
 8000a74:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9c:	f001 ffc2 	bl	8002a24 <HAL_PCD_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000aa6:	f000 f9c1 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200002c4 	.word	0x200002c4

08000ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aca:	4bbc      	ldr	r3, [pc, #752]	; (8000dbc <MX_GPIO_Init+0x308>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4abb      	ldr	r2, [pc, #748]	; (8000dbc <MX_GPIO_Init+0x308>)
 8000ad0:	f043 0310 	orr.w	r3, r3, #16
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4bb9      	ldr	r3, [pc, #740]	; (8000dbc <MX_GPIO_Init+0x308>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0310 	and.w	r3, r3, #16
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	4bb6      	ldr	r3, [pc, #728]	; (8000dbc <MX_GPIO_Init+0x308>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4ab5      	ldr	r2, [pc, #724]	; (8000dbc <MX_GPIO_Init+0x308>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4bb3      	ldr	r3, [pc, #716]	; (8000dbc <MX_GPIO_Init+0x308>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4bb0      	ldr	r3, [pc, #704]	; (8000dbc <MX_GPIO_Init+0x308>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	4aaf      	ldr	r2, [pc, #700]	; (8000dbc <MX_GPIO_Init+0x308>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b06:	4bad      	ldr	r3, [pc, #692]	; (8000dbc <MX_GPIO_Init+0x308>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	4baa      	ldr	r3, [pc, #680]	; (8000dbc <MX_GPIO_Init+0x308>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	4aa9      	ldr	r2, [pc, #676]	; (8000dbc <MX_GPIO_Init+0x308>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1e:	4ba7      	ldr	r3, [pc, #668]	; (8000dbc <MX_GPIO_Init+0x308>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2a:	4ba4      	ldr	r3, [pc, #656]	; (8000dbc <MX_GPIO_Init+0x308>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	4aa3      	ldr	r2, [pc, #652]	; (8000dbc <MX_GPIO_Init+0x308>)
 8000b30:	f043 0308 	orr.w	r3, r3, #8
 8000b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b36:	4ba1      	ldr	r3, [pc, #644]	; (8000dbc <MX_GPIO_Init+0x308>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000b48:	489d      	ldr	r0, [pc, #628]	; (8000dc0 <MX_GPIO_Init+0x30c>)
 8000b4a:	f001 fe15 	bl	8002778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f248 1104 	movw	r1, #33028	; 0x8104
 8000b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b58:	f001 fe0e 	bl	8002778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000b62:	4898      	ldr	r0, [pc, #608]	; (8000dc4 <MX_GPIO_Init+0x310>)
 8000b64:	f001 fe08 	bl	8002778 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f241 0181 	movw	r1, #4225	; 0x1081
 8000b6e:	4896      	ldr	r0, [pc, #600]	; (8000dc8 <MX_GPIO_Init+0x314>)
 8000b70:	f001 fe02 	bl	8002778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b7a:	4893      	ldr	r0, [pc, #588]	; (8000dc8 <MX_GPIO_Init+0x314>)
 8000b7c:	f001 fdfc 	bl	8002778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000b86:	4891      	ldr	r0, [pc, #580]	; (8000dcc <MX_GPIO_Init+0x318>)
 8000b88:	f001 fdf6 	bl	8002778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2120      	movs	r1, #32
 8000b90:	488c      	ldr	r0, [pc, #560]	; (8000dc4 <MX_GPIO_Init+0x310>)
 8000b92:	f001 fdf1 	bl	8002778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b96:	2201      	movs	r2, #1
 8000b98:	2101      	movs	r1, #1
 8000b9a:	4889      	ldr	r0, [pc, #548]	; (8000dc0 <MX_GPIO_Init+0x30c>)
 8000b9c:	f001 fdec 	bl	8002778 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000ba0:	f240 1315 	movw	r3, #277	; 0x115
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4881      	ldr	r0, [pc, #516]	; (8000dc0 <MX_GPIO_Init+0x30c>)
 8000bba:	f001 fb27 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000bbe:	236a      	movs	r3, #106	; 0x6a
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	487b      	ldr	r0, [pc, #492]	; (8000dc0 <MX_GPIO_Init+0x30c>)
 8000bd4:	f001 fb1a 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000bd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bde:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	4877      	ldr	r0, [pc, #476]	; (8000dcc <MX_GPIO_Init+0x318>)
 8000bf0:	f001 fb0c 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000bf4:	233f      	movs	r3, #63	; 0x3f
 8000bf6:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bf8:	230b      	movs	r3, #11
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	4871      	ldr	r0, [pc, #452]	; (8000dcc <MX_GPIO_Init+0x318>)
 8000c08:	f001 fb00 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000c0c:	f248 1304 	movw	r3, #33028	; 0x8104
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c28:	f001 faf0 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4a:	f001 fadf 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000c4e:	23e0      	movs	r3, #224	; 0xe0
 8000c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c5e:	2305      	movs	r3, #5
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6c:	f001 face 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000c70:	2301      	movs	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c74:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	484f      	ldr	r0, [pc, #316]	; (8000dc4 <MX_GPIO_Init+0x310>)
 8000c86:	f001 fac1 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c8e:	230b      	movs	r3, #11
 8000c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4849      	ldr	r0, [pc, #292]	; (8000dc4 <MX_GPIO_Init+0x310>)
 8000c9e:	f001 fab5 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000ca2:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000ca6:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4842      	ldr	r0, [pc, #264]	; (8000dc4 <MX_GPIO_Init+0x310>)
 8000cbc:	f001 faa6 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000cc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cd2:	2307      	movs	r3, #7
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	483a      	ldr	r0, [pc, #232]	; (8000dc8 <MX_GPIO_Init+0x314>)
 8000cde:	f001 fa95 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000ce2:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000ce6:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4833      	ldr	r0, [pc, #204]	; (8000dc8 <MX_GPIO_Init+0x314>)
 8000cfa:	f001 fa87 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000cfe:	f243 0381 	movw	r3, #12417	; 0x3081
 8000d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4619      	mov	r1, r3
 8000d16:	482c      	ldr	r0, [pc, #176]	; (8000dc8 <MX_GPIO_Init+0x314>)
 8000d18:	f001 fa78 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000d1c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	4825      	ldr	r0, [pc, #148]	; (8000dcc <MX_GPIO_Init+0x318>)
 8000d36:	f001 fa69 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000d3a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d40:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	481e      	ldr	r0, [pc, #120]	; (8000dcc <MX_GPIO_Init+0x318>)
 8000d52:	f001 fa5b 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000d56:	2302      	movs	r3, #2
 8000d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d66:	2305      	movs	r3, #5
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4815      	ldr	r0, [pc, #84]	; (8000dc8 <MX_GPIO_Init+0x314>)
 8000d72:	f001 fa4b 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PD5 PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|GPIO_PIN_5|PMOD_UART2_RX_Pin;
 8000d76:	2378      	movs	r3, #120	; 0x78
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d86:	2307      	movs	r3, #7
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <MX_GPIO_Init+0x314>)
 8000d92:	f001 fa3b 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000d96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9c:	2312      	movs	r3, #18
 8000d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000da8:	2304      	movs	r3, #4
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <MX_GPIO_Init+0x310>)
 8000db4:	f001 fa2a 	bl	800220c <HAL_GPIO_Init>
 8000db8:	e00a      	b.n	8000dd0 <MX_GPIO_Init+0x31c>
 8000dba:	bf00      	nop
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	48001000 	.word	0x48001000
 8000dc4:	48000400 	.word	0x48000400
 8000dc8:	48000c00 	.word	0x48000c00
 8000dcc:	48000800 	.word	0x48000800

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2105      	movs	r1, #5
 8000dd4:	2017      	movs	r0, #23
 8000dd6:	f001 f8a1 	bl	8001f1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000dda:	2017      	movs	r0, #23
 8000ddc:	f001 f8ba 	bl	8001f54 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2105      	movs	r1, #5
 8000de4:	2028      	movs	r0, #40	; 0x28
 8000de6:	f001 f899 	bl	8001f1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dea:	2028      	movs	r0, #40	; 0x28
 8000dec:	f001 f8b2 	bl	8001f54 <HAL_NVIC_EnableIRQ>

}
 8000df0:	bf00      	nop
 8000df2:	3728      	adds	r7, #40	; 0x28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e00:	2001      	movs	r0, #1
 8000e02:	f008 f989 	bl	8009118 <osDelay>
 8000e06:	e7fb      	b.n	8000e00 <StartDefaultTask+0x8>

08000e08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d101      	bne.n	8000e1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e1a:	f000 ff83 	bl	8001d24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40000800 	.word	0x40000800

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <Error_Handler+0x8>
	...

08000e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_MspInit+0x4c>)
 8000e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e42:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <HAL_MspInit+0x4c>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6613      	str	r3, [r2, #96]	; 0x60
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_MspInit+0x4c>)
 8000e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <HAL_MspInit+0x4c>)
 8000e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <HAL_MspInit+0x4c>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e60:	6593      	str	r3, [r2, #88]	; 0x58
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <HAL_MspInit+0x4c>)
 8000e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	210f      	movs	r1, #15
 8000e72:	f06f 0001 	mvn.w	r0, #1
 8000e76:	f001 f851 	bl	8001f1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40021000 	.word	0x40021000

08000e88 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b0ac      	sub	sp, #176	; 0xb0
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2288      	movs	r2, #136	; 0x88
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f00b f909 	bl	800c0c0 <memset>
  if(DFSDM1_Init == 0)
 8000eae:	4b25      	ldr	r3, [pc, #148]	; (8000f44 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d142      	bne.n	8000f3c <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000eb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f002 fe54 	bl	8003b74 <HAL_RCCEx_PeriphCLKConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000ed2:	f7ff ffab 	bl	8000e2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eda:	4a1b      	ldr	r2, [pc, #108]	; (8000f48 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000edc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ee0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ee2:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eee:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	4a15      	ldr	r2, [pc, #84]	; (8000f48 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ef4:	f043 0310 	orr.w	r3, r3, #16
 8000ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	f003 0310 	and.w	r3, r3, #16
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000f06:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000f0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f20:	2306      	movs	r3, #6
 8000f22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f26:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4807      	ldr	r0, [pc, #28]	; (8000f4c <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000f2e:	f001 f96d 	bl	800220c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000f32:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	3301      	adds	r3, #1
 8000f38:	4a02      	ldr	r2, [pc, #8]	; (8000f44 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f3a:	6013      	str	r3, [r2, #0]
  }

}
 8000f3c:	bf00      	nop
 8000f3e:	37b0      	adds	r7, #176	; 0xb0
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200006d8 	.word	0x200006d8
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	48001000 	.word	0x48001000

08000f50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b0ac      	sub	sp, #176	; 0xb0
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2288      	movs	r2, #136	; 0x88
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f00b f8a5 	bl	800c0c0 <memset>
  if(hi2c->Instance==I2C2)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a21      	ldr	r2, [pc, #132]	; (8001000 <HAL_I2C_MspInit+0xb0>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d13b      	bne.n	8000ff8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f002 fdf1 	bl	8003b74 <HAL_RCCEx_PeriphCLKConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f98:	f7ff ff48 	bl	8000e2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <HAL_I2C_MspInit+0xb4>)
 8000f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa0:	4a18      	ldr	r2, [pc, #96]	; (8001004 <HAL_I2C_MspInit+0xb4>)
 8000fa2:	f043 0302 	orr.w	r3, r3, #2
 8000fa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <HAL_I2C_MspInit+0xb4>)
 8000faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000fb4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fbc:	2312      	movs	r3, #18
 8000fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fd8:	4619      	mov	r1, r3
 8000fda:	480b      	ldr	r0, [pc, #44]	; (8001008 <HAL_I2C_MspInit+0xb8>)
 8000fdc:	f001 f916 	bl	800220c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <HAL_I2C_MspInit+0xb4>)
 8000fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <HAL_I2C_MspInit+0xb4>)
 8000fe6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fea:	6593      	str	r3, [r2, #88]	; 0x58
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <HAL_I2C_MspInit+0xb4>)
 8000fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ff8:	bf00      	nop
 8000ffa:	37b0      	adds	r7, #176	; 0xb0
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40005800 	.word	0x40005800
 8001004:	40021000 	.word	0x40021000
 8001008:	48000400 	.word	0x48000400

0800100c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a17      	ldr	r2, [pc, #92]	; (8001088 <HAL_QSPI_MspInit+0x7c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d128      	bne.n	8001080 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <HAL_QSPI_MspInit+0x80>)
 8001030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001032:	4a16      	ldr	r2, [pc, #88]	; (800108c <HAL_QSPI_MspInit+0x80>)
 8001034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001038:	6513      	str	r3, [r2, #80]	; 0x50
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <HAL_QSPI_MspInit+0x80>)
 800103c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800103e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <HAL_QSPI_MspInit+0x80>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	4a10      	ldr	r2, [pc, #64]	; (800108c <HAL_QSPI_MspInit+0x80>)
 800104c:	f043 0310 	orr.w	r3, r3, #16
 8001050:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <HAL_QSPI_MspInit+0x80>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800105e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001062:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001070:	230a      	movs	r3, #10
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	4619      	mov	r1, r3
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <HAL_QSPI_MspInit+0x84>)
 800107c:	f001 f8c6 	bl	800220c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001080:	bf00      	nop
 8001082:	3728      	adds	r7, #40	; 0x28
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	a0001000 	.word	0xa0001000
 800108c:	40021000 	.word	0x40021000
 8001090:	48001000 	.word	0x48001000

08001094 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a17      	ldr	r2, [pc, #92]	; (8001110 <HAL_SPI_MspInit+0x7c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d128      	bne.n	8001108 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <HAL_SPI_MspInit+0x80>)
 80010b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ba:	4a16      	ldr	r2, [pc, #88]	; (8001114 <HAL_SPI_MspInit+0x80>)
 80010bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010c0:	6593      	str	r3, [r2, #88]	; 0x58
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <HAL_SPI_MspInit+0x80>)
 80010c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_SPI_MspInit+0x80>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	4a10      	ldr	r2, [pc, #64]	; (8001114 <HAL_SPI_MspInit+0x80>)
 80010d4:	f043 0304 	orr.w	r3, r3, #4
 80010d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_SPI_MspInit+0x80>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	f003 0304 	and.w	r3, r3, #4
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80010e6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010f8:	2306      	movs	r3, #6
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <HAL_SPI_MspInit+0x84>)
 8001104:	f001 f882 	bl	800220c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001108:	bf00      	nop
 800110a:	3728      	adds	r7, #40	; 0x28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40003c00 	.word	0x40003c00
 8001114:	40021000 	.word	0x40021000
 8001118:	48000800 	.word	0x48000800

0800111c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a08      	ldr	r2, [pc, #32]	; (800114c <HAL_SPI_MspDeInit+0x30>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d10a      	bne.n	8001144 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <HAL_SPI_MspDeInit+0x34>)
 8001130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001132:	4a07      	ldr	r2, [pc, #28]	; (8001150 <HAL_SPI_MspDeInit+0x34>)
 8001134:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001138:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 800113a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <HAL_SPI_MspDeInit+0x38>)
 8001140:	f001 fa0e 	bl	8002560 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40003c00 	.word	0x40003c00
 8001150:	40021000 	.word	0x40021000
 8001154:	48000800 	.word	0x48000800

08001158 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b0ae      	sub	sp, #184	; 0xb8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	2288      	movs	r2, #136	; 0x88
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f00a ffa1 	bl	800c0c0 <memset>
  if(huart->Instance==UART4)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a42      	ldr	r2, [pc, #264]	; (800128c <HAL_UART_MspInit+0x134>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d13c      	bne.n	8001202 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001188:	2308      	movs	r3, #8
 800118a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800118c:	2300      	movs	r3, #0
 800118e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	4618      	mov	r0, r3
 8001196:	f002 fced 	bl	8003b74 <HAL_RCCEx_PeriphCLKConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011a0:	f7ff fe44 	bl	8000e2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80011a4:	4b3a      	ldr	r3, [pc, #232]	; (8001290 <HAL_UART_MspInit+0x138>)
 80011a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a8:	4a39      	ldr	r2, [pc, #228]	; (8001290 <HAL_UART_MspInit+0x138>)
 80011aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011ae:	6593      	str	r3, [r2, #88]	; 0x58
 80011b0:	4b37      	ldr	r3, [pc, #220]	; (8001290 <HAL_UART_MspInit+0x138>)
 80011b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011b8:	61bb      	str	r3, [r7, #24]
 80011ba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	4b34      	ldr	r3, [pc, #208]	; (8001290 <HAL_UART_MspInit+0x138>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c0:	4a33      	ldr	r2, [pc, #204]	; (8001290 <HAL_UART_MspInit+0x138>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c8:	4b31      	ldr	r3, [pc, #196]	; (8001290 <HAL_UART_MspInit+0x138>)
 80011ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80011d4:	2303      	movs	r3, #3
 80011d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80011ec:	2308      	movs	r3, #8
 80011ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fc:	f001 f806 	bl	800220c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001200:	e03f      	b.n	8001282 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART1)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a23      	ldr	r2, [pc, #140]	; (8001294 <HAL_UART_MspInit+0x13c>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d13a      	bne.n	8001282 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800120c:	2301      	movs	r3, #1
 800120e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001210:	2300      	movs	r3, #0
 8001212:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	4618      	mov	r0, r3
 800121a:	f002 fcab 	bl	8003b74 <HAL_RCCEx_PeriphCLKConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001224:	f7ff fe02 	bl	8000e2c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001228:	4b19      	ldr	r3, [pc, #100]	; (8001290 <HAL_UART_MspInit+0x138>)
 800122a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800122c:	4a18      	ldr	r2, [pc, #96]	; (8001290 <HAL_UART_MspInit+0x138>)
 800122e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001232:	6613      	str	r3, [r2, #96]	; 0x60
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <HAL_UART_MspInit+0x138>)
 8001236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001238:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001240:	4b13      	ldr	r3, [pc, #76]	; (8001290 <HAL_UART_MspInit+0x138>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001244:	4a12      	ldr	r2, [pc, #72]	; (8001290 <HAL_UART_MspInit+0x138>)
 8001246:	f043 0302 	orr.w	r3, r3, #2
 800124a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <HAL_UART_MspInit+0x138>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001258:	23c0      	movs	r3, #192	; 0xc0
 800125a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126a:	2303      	movs	r3, #3
 800126c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001270:	2307      	movs	r3, #7
 8001272:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001276:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800127a:	4619      	mov	r1, r3
 800127c:	4806      	ldr	r0, [pc, #24]	; (8001298 <HAL_UART_MspInit+0x140>)
 800127e:	f000 ffc5 	bl	800220c <HAL_GPIO_Init>
}
 8001282:	bf00      	nop
 8001284:	37b8      	adds	r7, #184	; 0xb8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40004c00 	.word	0x40004c00
 8001290:	40021000 	.word	0x40021000
 8001294:	40013800 	.word	0x40013800
 8001298:	48000400 	.word	0x48000400

0800129c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b0ac      	sub	sp, #176	; 0xb0
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2288      	movs	r2, #136	; 0x88
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f00a feff 	bl	800c0c0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012ca:	d17c      	bne.n	80013c6 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80012d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80012d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80012da:	2301      	movs	r3, #1
 80012dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80012de:	2301      	movs	r3, #1
 80012e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80012e2:	2318      	movs	r3, #24
 80012e4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80012e6:	2307      	movs	r3, #7
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80012ea:	2302      	movs	r3, #2
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80012ee:	2302      	movs	r3, #2
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80012f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012f6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4618      	mov	r0, r3
 80012fe:	f002 fc39 	bl	8003b74 <HAL_RCCEx_PeriphCLKConfig>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001308:	f7ff fd90 	bl	8000e2c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	4b30      	ldr	r3, [pc, #192]	; (80013d0 <HAL_PCD_MspInit+0x134>)
 800130e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001310:	4a2f      	ldr	r2, [pc, #188]	; (80013d0 <HAL_PCD_MspInit+0x134>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001318:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <HAL_PCD_MspInit+0x134>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001328:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001338:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800133c:	4619      	mov	r1, r3
 800133e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001342:	f000 ff63 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001346:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800134a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001360:	230a      	movs	r3, #10
 8001362:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800136a:	4619      	mov	r1, r3
 800136c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001370:	f000 ff4c 	bl	800220c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <HAL_PCD_MspInit+0x134>)
 8001376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001378:	4a15      	ldr	r2, [pc, #84]	; (80013d0 <HAL_PCD_MspInit+0x134>)
 800137a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800137e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HAL_PCD_MspInit+0x134>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001384:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_PCD_MspInit+0x134>)
 800138e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d114      	bne.n	80013c2 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001398:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <HAL_PCD_MspInit+0x134>)
 800139a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139c:	4a0c      	ldr	r2, [pc, #48]	; (80013d0 <HAL_PCD_MspInit+0x134>)
 800139e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a2:	6593      	str	r3, [r2, #88]	; 0x58
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_PCD_MspInit+0x134>)
 80013a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80013b0:	f001 fcf4 	bl	8002d9c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_PCD_MspInit+0x134>)
 80013b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b8:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <HAL_PCD_MspInit+0x134>)
 80013ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013be:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013c0:	e001      	b.n	80013c6 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80013c2:	f001 fceb 	bl	8002d9c <HAL_PWREx_EnableVddUSB>
}
 80013c6:	bf00      	nop
 80013c8:	37b0      	adds	r7, #176	; 0xb0
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40021000 	.word	0x40021000

080013d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08c      	sub	sp, #48	; 0x30
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	201e      	movs	r0, #30
 80013ea:	f000 fd97 	bl	8001f1c <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013ee:	201e      	movs	r0, #30
 80013f0:	f000 fdb0 	bl	8001f54 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80013f4:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <HAL_InitTick+0x9c>)
 80013f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f8:	4a1d      	ldr	r2, [pc, #116]	; (8001470 <HAL_InitTick+0x9c>)
 80013fa:	f043 0304 	orr.w	r3, r3, #4
 80013fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <HAL_InitTick+0x9c>)
 8001402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001404:	f003 0304 	and.w	r3, r3, #4
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800140c:	f107 0210 	add.w	r2, r7, #16
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f002 fb1a 	bl	8003a50 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800141c:	f002 faec 	bl	80039f8 <HAL_RCC_GetPCLK1Freq>
 8001420:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001424:	4a13      	ldr	r2, [pc, #76]	; (8001474 <HAL_InitTick+0xa0>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	0c9b      	lsrs	r3, r3, #18
 800142c:	3b01      	subs	r3, #1
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_InitTick+0xa4>)
 8001432:	4a12      	ldr	r2, [pc, #72]	; (800147c <HAL_InitTick+0xa8>)
 8001434:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <HAL_InitTick+0xa4>)
 8001438:	f240 32e7 	movw	r2, #999	; 0x3e7
 800143c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800143e:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <HAL_InitTick+0xa4>)
 8001440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001442:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <HAL_InitTick+0xa4>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_InitTick+0xa4>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001450:	4809      	ldr	r0, [pc, #36]	; (8001478 <HAL_InitTick+0xa4>)
 8001452:	f004 fb8c 	bl	8005b6e <HAL_TIM_Base_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d104      	bne.n	8001466 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800145c:	4806      	ldr	r0, [pc, #24]	; (8001478 <HAL_InitTick+0xa4>)
 800145e:	f004 fbe7 	bl	8005c30 <HAL_TIM_Base_Start_IT>
 8001462:	4603      	mov	r3, r0
 8001464:	e000      	b.n	8001468 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
}
 8001468:	4618      	mov	r0, r3
 800146a:	3730      	adds	r7, #48	; 0x30
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40021000 	.word	0x40021000
 8001474:	431bde83 	.word	0x431bde83
 8001478:	200006dc 	.word	0x200006dc
 800147c:	40000800 	.word	0x40000800

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <NMI_Handler+0x4>

08001486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <MemManage_Handler+0x4>

08001492 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <BusFault_Handler+0x4>

08001498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <UsageFault_Handler+0x4>

0800149e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80014b0:	2020      	movs	r0, #32
 80014b2:	f001 f979 	bl	80027a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80014b6:	2040      	movs	r0, #64	; 0x40
 80014b8:	f001 f976 	bl	80027a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80014bc:	2080      	movs	r0, #128	; 0x80
 80014be:	f001 f973 	bl	80027a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80014c2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80014c6:	f001 f96f 	bl	80027a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <TIM4_IRQHandler+0x10>)
 80014d6:	f004 fc1b 	bl	8005d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200006dc 	.word	0x200006dc

080014e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80014e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80014ec:	f001 f95c 	bl	80027a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80014f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80014f4:	f001 f958 	bl	80027a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80014f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014fc:	f001 f954 	bl	80027a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001500:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001504:	f001 f950 	bl	80027a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001508:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800150c:	f001 f94c 	bl	80027a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}

08001514 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
	return 1;
 8001518:	2301      	movs	r3, #1
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <_kill>:

int _kill(int pid, int sig)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800152e:	f00a fc7d 	bl	800be2c <__errno>
 8001532:	4603      	mov	r3, r0
 8001534:	2216      	movs	r2, #22
 8001536:	601a      	str	r2, [r3, #0]
	return -1;
 8001538:	f04f 33ff 	mov.w	r3, #4294967295
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <_exit>:

void _exit (int status)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800154c:	f04f 31ff 	mov.w	r1, #4294967295
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ffe7 	bl	8001524 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001556:	e7fe      	b.n	8001556 <_exit+0x12>

08001558 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	e00a      	b.n	8001580 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800156a:	f7ff f87f 	bl	800066c <__io_getchar>
 800156e:	4601      	mov	r1, r0
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	1c5a      	adds	r2, r3, #1
 8001574:	60ba      	str	r2, [r7, #8]
 8001576:	b2ca      	uxtb	r2, r1
 8001578:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3301      	adds	r3, #1
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	429a      	cmp	r2, r3
 8001586:	dbf0      	blt.n	800156a <_read+0x12>
	}

return len;
 8001588:	687b      	ldr	r3, [r7, #4]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b086      	sub	sp, #24
 8001596:	af00      	add	r7, sp, #0
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	e009      	b.n	80015b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	1c5a      	adds	r2, r3, #1
 80015a8:	60ba      	str	r2, [r7, #8]
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe ffe9 	bl	8000584 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3301      	adds	r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	429a      	cmp	r2, r3
 80015be:	dbf1      	blt.n	80015a4 <_write+0x12>
	}
	return len;
 80015c0:	687b      	ldr	r3, [r7, #4]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <_close>:

int _close(int file)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
	return -1;
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015f2:	605a      	str	r2, [r3, #4]
	return 0;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <_isatty>:

int _isatty(int file)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
	return 1;
 800160a:	2301      	movs	r3, #1
}
 800160c:	4618      	mov	r0, r3
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
	return 0;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800163c:	4a14      	ldr	r2, [pc, #80]	; (8001690 <_sbrk+0x5c>)
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <_sbrk+0x60>)
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001648:	4b13      	ldr	r3, [pc, #76]	; (8001698 <_sbrk+0x64>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d102      	bne.n	8001656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <_sbrk+0x64>)
 8001652:	4a12      	ldr	r2, [pc, #72]	; (800169c <_sbrk+0x68>)
 8001654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <_sbrk+0x64>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	429a      	cmp	r2, r3
 8001662:	d207      	bcs.n	8001674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001664:	f00a fbe2 	bl	800be2c <__errno>
 8001668:	4603      	mov	r3, r0
 800166a:	220c      	movs	r2, #12
 800166c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
 8001672:	e009      	b.n	8001688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <_sbrk+0x64>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <_sbrk+0x64>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <_sbrk+0x64>)
 8001684:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001686:	68fb      	ldr	r3, [r7, #12]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20018000 	.word	0x20018000
 8001694:	00000400 	.word	0x00000400
 8001698:	20000728 	.word	0x20000728
 800169c:	200032a8 	.word	0x200032a8

080016a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <SystemInit+0x20>)
 80016a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <SystemInit+0x20>)
 80016ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <wifi_start>:




static int wifi_start(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
  uint8_t  MAC_Addr[6];

 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 80016ca:	f007 fa9f 	bl	8008c0c <WIFI_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d109      	bne.n	80016e8 <wifi_start+0x24>
  {
    //LOG(("ES-WIFI Initialized.\n\r"));
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 80016d4:	463b      	mov	r3, r7
 80016d6:	4618      	mov	r0, r3
 80016d8:	f007 fae6 	bl	8008ca8 <WIFI_GetMAC_Address>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d005      	beq.n	80016ee <wifi_start+0x2a>
               MAC_Addr[5]));*/
    }
    else
    {
      //LOG(("> ERROR : CANNOT get MAC address\n\r"));
      return -1;
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295
 80016e6:	e003      	b.n	80016f0 <wifi_start+0x2c>
    }
  }
  else
  {
    return -1;
 80016e8:	f04f 33ff 	mov.w	r3, #4294967295
 80016ec:	e000      	b.n	80016f0 <wifi_start+0x2c>
  }
  return 0;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <wifi_connect>:



int wifi_connect(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0

  wifi_start();
 80016fc:	f7ff ffe2 	bl	80016c4 <wifi_start>

  //LOG(("\nConnecting to %s , %s\n\r",SSID,PASSWORD));
  if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 8001700:	2203      	movs	r2, #3
 8001702:	490b      	ldr	r1, [pc, #44]	; (8001730 <wifi_connect+0x38>)
 8001704:	480b      	ldr	r0, [pc, #44]	; (8001734 <wifi_connect+0x3c>)
 8001706:	f007 faad 	bl	8008c64 <WIFI_Connect>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d108      	bne.n	8001722 <wifi_connect+0x2a>
  {
    if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8001710:	4809      	ldr	r0, [pc, #36]	; (8001738 <wifi_connect+0x40>)
 8001712:	f007 fadf 	bl	8008cd4 <WIFI_GetIP_Address>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <wifi_connect+0x30>
               IP_Addr[3]));*/
    }
    else
    {
		  //LOG((" ERROR : es-wifi module CANNOT get IP address\n\r"));
      return -1;
 800171c:	f04f 33ff 	mov.w	r3, #4294967295
 8001720:	e003      	b.n	800172a <wifi_connect+0x32>
    }
  }
  else
  {
		 //LOG(("ERROR : es-wifi module NOT connected\n\r"));
     return -1;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	e000      	b.n	800172a <wifi_connect+0x32>
  }
  return 0;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	0800d644 	.word	0x0800d644
 8001734:	0800d65c 	.word	0x0800d65c
 8001738:	20000b2c 	.word	0x20000b2c

0800173c <wifi_server>:

int wifi_server(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af02      	add	r7, sp, #8
  bool StopServer = false;
 8001742:	2300      	movs	r3, #0
 8001744:	73fb      	strb	r3, [r7, #15]

  //LOG(("\nRunning HTML Server test\n\r"));
  if (wifi_connect()!=0) return -1;
 8001746:	f7ff ffd7 	bl	80016f8 <wifi_connect>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d002      	beq.n	8001756 <wifi_server+0x1a>
 8001750:	f04f 33ff 	mov.w	r3, #4294967295
 8001754:	e030      	b.n	80017b8 <wifi_server+0x7c>


  if (WIFI_STATUS_OK!=WIFI_StartServer(SOCKET, WIFI_TCP_PROTOCOL, 1, "", PORT))
 8001756:	2350      	movs	r3, #80	; 0x50
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <wifi_server+0x84>)
 800175c:	2201      	movs	r2, #1
 800175e:	2100      	movs	r1, #0
 8001760:	2000      	movs	r0, #0
 8001762:	f007 fad3 	bl	8008d0c <WIFI_StartServer>
  do
  {
    uint8_t RemoteIP[4];
    uint16_t RemotePort;

    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,100,RemoteIP,&RemotePort))
 8001766:	e006      	b.n	8001776 <wifi_server+0x3a>
    {
        //LOG(("Waiting connection to  %d.%d.%d.%d\n\r",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
    	LOG(("\r\n."));
 8001768:	4816      	ldr	r0, [pc, #88]	; (80017c4 <wifi_server+0x88>)
 800176a:	f00a fd91 	bl	800c290 <iprintf>
    	vTaskDelay(900);
 800176e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001772:	f008 fe67 	bl	800a444 <vTaskDelay>
    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,100,RemoteIP,&RemotePort))
 8001776:	1dbb      	adds	r3, r7, #6
 8001778:	f107 0208 	add.w	r2, r7, #8
 800177c:	2164      	movs	r1, #100	; 0x64
 800177e:	2000      	movs	r0, #0
 8001780:	f007 faf4 	bl	8008d6c <WIFI_WaitServerConnection>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1ee      	bne.n	8001768 <wifi_server+0x2c>
    }

    //LOG(("Client connected %d.%d.%d.%d:%d\n\r",RemoteIP[0],RemoteIP[1],RemoteIP[2],RemoteIP[3],RemotePort));

    StopServer=WebServerProcess();
 800178a:	f000 f81d 	bl	80017c8 <WebServerProcess>
 800178e:	4603      	mov	r3, r0
 8001790:	73fb      	strb	r3, [r7, #15]

    if(WIFI_CloseServerConnection(SOCKET) != WIFI_STATUS_OK)
 8001792:	2000      	movs	r0, #0
 8001794:	f007 fb2e 	bl	8008df4 <WIFI_CloseServerConnection>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d002      	beq.n	80017a4 <wifi_server+0x68>
    {
      //LOG(("ERROR: failed to close current Server connection\n\r"));
      //LOG(("\n\r"));
      return -1;
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
 80017a2:	e009      	b.n	80017b8 <wifi_server+0x7c>
    }
  }
  while(StopServer == false);
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	f083 0301 	eor.w	r3, r3, #1
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1e2      	bne.n	8001776 <wifi_server+0x3a>

  if (WIFI_STATUS_OK!=WIFI_StopServer(SOCKET))
 80017b0:	2000      	movs	r0, #0
 80017b2:	f007 fb35 	bl	8008e20 <WIFI_StopServer>
    //LOG(("ERROR: Cannot stop server.\n\r"));
    //LOG(("\n\r"));
  }

  //LOG(("Server is stop\n\r"));
  return 0;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	0800d66c 	.word	0x0800d66c
 80017c4:	0800d670 	.word	0x0800d670

080017c8 <WebServerProcess>:


static bool WebServerProcess(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af02      	add	r7, sp, #8
	uint8_t LedState=1;
 80017ce:	2301      	movs	r3, #1
 80017d0:	71fb      	strb	r3, [r7, #7]
  uint8_t temp;
  uint16_t  respLen;
  static   uint8_t resp[1024];
  bool    stopserver=false;
 80017d2:	2300      	movs	r3, #0
 80017d4:	71bb      	strb	r3, [r7, #6]

  if (WIFI_STATUS_OK == WIFI_ReceiveData(SOCKET, resp, 1000, &respLen, WIFI_READ_TIMEOUT))
 80017d6:	1cbb      	adds	r3, r7, #2
 80017d8:	f242 7210 	movw	r2, #10000	; 0x2710
 80017dc:	9200      	str	r2, [sp, #0]
 80017de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017e2:	493f      	ldr	r1, [pc, #252]	; (80018e0 <WebServerProcess+0x118>)
 80017e4:	2000      	movs	r0, #0
 80017e6:	f007 fb55 	bl	8008e94 <WIFI_ReceiveData>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d16e      	bne.n	80018ce <WebServerProcess+0x106>
  {
   LOG(("get %d byte from server\n\r",respLen));
 80017f0:	887b      	ldrh	r3, [r7, #2]
 80017f2:	4619      	mov	r1, r3
 80017f4:	483b      	ldr	r0, [pc, #236]	; (80018e4 <WebServerProcess+0x11c>)
 80017f6:	f00a fd4b 	bl	800c290 <iprintf>

   if( respLen > 0)
 80017fa:	887b      	ldrh	r3, [r7, #2]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d069      	beq.n	80018d4 <WebServerProcess+0x10c>
   {
      if(strstr((char *)resp, "GET")) /* GET: put web page */
 8001800:	4939      	ldr	r1, [pc, #228]	; (80018e8 <WebServerProcess+0x120>)
 8001802:	4837      	ldr	r0, [pc, #220]	; (80018e0 <WebServerProcess+0x118>)
 8001804:	f00a fee5 	bl	800c5d2 <strstr>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d010      	beq.n	8001830 <WebServerProcess+0x68>
      {
        //temp = (int) GetSensores(); //BSP_TSENSOR_ReadTemp();
        if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 800180e:	797a      	ldrb	r2, [r7, #5]
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f000 f881 	bl	800191c <SendWebPage>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <WebServerProcess+0x60>
        {
          LOG(("> ERROR : Cannot send web page\n\r"));
 8001820:	4832      	ldr	r0, [pc, #200]	; (80018ec <WebServerProcess+0x124>)
 8001822:	f00a fd35 	bl	800c290 <iprintf>
 8001826:	e055      	b.n	80018d4 <WebServerProcess+0x10c>
        }
        else
        {
          LOG(("Send page after  GET command\n\r"));
 8001828:	4831      	ldr	r0, [pc, #196]	; (80018f0 <WebServerProcess+0x128>)
 800182a:	f00a fd31 	bl	800c290 <iprintf>
 800182e:	e051      	b.n	80018d4 <WebServerProcess+0x10c>
        }
       }
       else if(strstr((char *)resp, "POST"))/* POST: received info */
 8001830:	4930      	ldr	r1, [pc, #192]	; (80018f4 <WebServerProcess+0x12c>)
 8001832:	482b      	ldr	r0, [pc, #172]	; (80018e0 <WebServerProcess+0x118>)
 8001834:	f00a fecd 	bl	800c5d2 <strstr>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d04a      	beq.n	80018d4 <WebServerProcess+0x10c>
       {
         LOG(("Post request\n\r"));
 800183e:	482e      	ldr	r0, [pc, #184]	; (80018f8 <WebServerProcess+0x130>)
 8001840:	f00a fd26 	bl	800c290 <iprintf>

         if(strstr((char *)resp, "radio"))
 8001844:	492d      	ldr	r1, [pc, #180]	; (80018fc <WebServerProcess+0x134>)
 8001846:	4826      	ldr	r0, [pc, #152]	; (80018e0 <WebServerProcess+0x118>)
 8001848:	f00a fec3 	bl	800c5d2 <strstr>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d012      	beq.n	8001878 <WebServerProcess+0xb0>
         {
           if(strstr((char *)resp, "radio=0"))
 8001852:	492b      	ldr	r1, [pc, #172]	; (8001900 <WebServerProcess+0x138>)
 8001854:	4822      	ldr	r0, [pc, #136]	; (80018e0 <WebServerProcess+0x118>)
 8001856:	f00a febc 	bl	800c5d2 <strstr>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <WebServerProcess+0x9e>
           {
             LedState = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	71fb      	strb	r3, [r7, #7]
 8001864:	e008      	b.n	8001878 <WebServerProcess+0xb0>
             //EncolarLED(LedState);
           }
           else if(strstr((char *)resp, "radio=1"))
 8001866:	4927      	ldr	r1, [pc, #156]	; (8001904 <WebServerProcess+0x13c>)
 8001868:	481d      	ldr	r0, [pc, #116]	; (80018e0 <WebServerProcess+0x118>)
 800186a:	f00a feb2 	bl	800c5d2 <strstr>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <WebServerProcess+0xb0>
           {
             LedState = 1;
 8001874:	2301      	movs	r3, #1
 8001876:	71fb      	strb	r3, [r7, #7]
             //EncolarLED(LedState);
           }
           //temp = (int) GetSensores(); //BSP_TSENSOR_ReadTemp();
         }
         if(strstr((char *)resp, "stop_server"))
 8001878:	4923      	ldr	r1, [pc, #140]	; (8001908 <WebServerProcess+0x140>)
 800187a:	4819      	ldr	r0, [pc, #100]	; (80018e0 <WebServerProcess+0x118>)
 800187c:	f00a fea9 	bl	800c5d2 <strstr>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d012      	beq.n	80018ac <WebServerProcess+0xe4>
         {
           if(strstr((char *)resp, "stop_server=0"))
 8001886:	4921      	ldr	r1, [pc, #132]	; (800190c <WebServerProcess+0x144>)
 8001888:	4815      	ldr	r0, [pc, #84]	; (80018e0 <WebServerProcess+0x118>)
 800188a:	f00a fea2 	bl	800c5d2 <strstr>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d002      	beq.n	800189a <WebServerProcess+0xd2>
           {
             stopserver = false;
 8001894:	2300      	movs	r3, #0
 8001896:	71bb      	strb	r3, [r7, #6]
 8001898:	e008      	b.n	80018ac <WebServerProcess+0xe4>
           }
           else if(strstr((char *)resp, "stop_server=1"))
 800189a:	491d      	ldr	r1, [pc, #116]	; (8001910 <WebServerProcess+0x148>)
 800189c:	4810      	ldr	r0, [pc, #64]	; (80018e0 <WebServerProcess+0x118>)
 800189e:	f00a fe98 	bl	800c5d2 <strstr>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <WebServerProcess+0xe4>
           {
             stopserver = true;
 80018a8:	2301      	movs	r3, #1
 80018aa:	71bb      	strb	r3, [r7, #6]
           }
         }
         //temp = (int) GetSensores(); //BSP_TSENSOR_ReadTemp();
         if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 80018ac:	797a      	ldrb	r2, [r7, #5]
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	4611      	mov	r1, r2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 f832 	bl	800191c <SendWebPage>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <WebServerProcess+0xfe>
         {
           LOG(("> ERROR : Cannot send web page\n\r"));
 80018be:	480b      	ldr	r0, [pc, #44]	; (80018ec <WebServerProcess+0x124>)
 80018c0:	f00a fce6 	bl	800c290 <iprintf>
 80018c4:	e006      	b.n	80018d4 <WebServerProcess+0x10c>
         }
         else
         {
           LOG(("Send Page after POST command\n\r"));
 80018c6:	4813      	ldr	r0, [pc, #76]	; (8001914 <WebServerProcess+0x14c>)
 80018c8:	f00a fce2 	bl	800c290 <iprintf>
 80018cc:	e002      	b.n	80018d4 <WebServerProcess+0x10c>
       }
     }
  }
  else
  {
    LOG(("Client close connection\n\r"));
 80018ce:	4812      	ldr	r0, [pc, #72]	; (8001918 <WebServerProcess+0x150>)
 80018d0:	f00a fcde 	bl	800c290 <iprintf>
  }
  return stopserver;
 80018d4:	79bb      	ldrb	r3, [r7, #6]

 }
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000b30 	.word	0x20000b30
 80018e4:	0800d674 	.word	0x0800d674
 80018e8:	0800d690 	.word	0x0800d690
 80018ec:	0800d694 	.word	0x0800d694
 80018f0:	0800d6b8 	.word	0x0800d6b8
 80018f4:	0800d6d8 	.word	0x0800d6d8
 80018f8:	0800d6e0 	.word	0x0800d6e0
 80018fc:	0800d6f0 	.word	0x0800d6f0
 8001900:	0800d6f8 	.word	0x0800d6f8
 8001904:	0800d700 	.word	0x0800d700
 8001908:	0800d708 	.word	0x0800d708
 800190c:	0800d714 	.word	0x0800d714
 8001910:	0800d724 	.word	0x0800d724
 8001914:	0800d734 	.word	0x0800d734
 8001918:	0800d754 	.word	0x0800d754

0800191c <SendWebPage>:
  * @brief  Send HTML page
  * @param  None
  * @retval None
  */
static WIFI_Status_t SendWebPage(uint8_t ledIsOn, uint8_t temperature)
{
 800191c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800191e:	b093      	sub	sp, #76	; 0x4c
 8001920:	af02      	add	r7, sp, #8
 8001922:	4603      	mov	r3, r0
 8001924:	460a      	mov	r2, r1
 8001926:	71fb      	strb	r3, [r7, #7]
 8001928:	4613      	mov	r3, r2
 800192a:	71bb      	strb	r3, [r7, #6]
  uint8_t  temp[50];
  uint16_t SentDataLength;
  WIFI_Status_t ret;

  /* construct web page content */
  strcpy((char *)http, (char *)"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n");
 800192c:	4abc      	ldr	r2, [pc, #752]	; (8001c20 <SendWebPage+0x304>)
 800192e:	4bbd      	ldr	r3, [pc, #756]	; (8001c24 <SendWebPage+0x308>)
 8001930:	4614      	mov	r4, r2
 8001932:	461d      	mov	r5, r3
 8001934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800193a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800193c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800193e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001940:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001944:	c407      	stmia	r4!, {r0, r1, r2}
 8001946:	8023      	strh	r3, [r4, #0]
 8001948:	3402      	adds	r4, #2
 800194a:	0c1b      	lsrs	r3, r3, #16
 800194c:	7023      	strb	r3, [r4, #0]
  strcat((char *)http, (char *)"<html>\r\n<body>\r\n");
 800194e:	48b4      	ldr	r0, [pc, #720]	; (8001c20 <SendWebPage+0x304>)
 8001950:	f7fe fc3e 	bl	80001d0 <strlen>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	4bb1      	ldr	r3, [pc, #708]	; (8001c20 <SendWebPage+0x304>)
 800195a:	4413      	add	r3, r2
 800195c:	4ab2      	ldr	r2, [pc, #712]	; (8001c28 <SendWebPage+0x30c>)
 800195e:	461d      	mov	r5, r3
 8001960:	4614      	mov	r4, r2
 8001962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001964:	6028      	str	r0, [r5, #0]
 8001966:	6069      	str	r1, [r5, #4]
 8001968:	60aa      	str	r2, [r5, #8]
 800196a:	60eb      	str	r3, [r5, #12]
 800196c:	7823      	ldrb	r3, [r4, #0]
 800196e:	742b      	strb	r3, [r5, #16]
  strcat((char *)http, (char *)"<title>STM32 Web Server</title>\r\n");
 8001970:	48ab      	ldr	r0, [pc, #684]	; (8001c20 <SendWebPage+0x304>)
 8001972:	f7fe fc2d 	bl	80001d0 <strlen>
 8001976:	4603      	mov	r3, r0
 8001978:	461a      	mov	r2, r3
 800197a:	4ba9      	ldr	r3, [pc, #676]	; (8001c20 <SendWebPage+0x304>)
 800197c:	4413      	add	r3, r2
 800197e:	4aab      	ldr	r2, [pc, #684]	; (8001c2c <SendWebPage+0x310>)
 8001980:	4614      	mov	r4, r2
 8001982:	469c      	mov	ip, r3
 8001984:	f104 0e20 	add.w	lr, r4, #32
 8001988:	4665      	mov	r5, ip
 800198a:	4626      	mov	r6, r4
 800198c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800198e:	6028      	str	r0, [r5, #0]
 8001990:	6069      	str	r1, [r5, #4]
 8001992:	60aa      	str	r2, [r5, #8]
 8001994:	60eb      	str	r3, [r5, #12]
 8001996:	3410      	adds	r4, #16
 8001998:	f10c 0c10 	add.w	ip, ip, #16
 800199c:	4574      	cmp	r4, lr
 800199e:	d1f3      	bne.n	8001988 <SendWebPage+0x6c>
 80019a0:	4662      	mov	r2, ip
 80019a2:	4623      	mov	r3, r4
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	8013      	strh	r3, [r2, #0]
  strcat((char *)http, (char *)"<h2>InventekSys : Web Server using Es-Wifi with STM32</h2>\r\n");
 80019a8:	489d      	ldr	r0, [pc, #628]	; (8001c20 <SendWebPage+0x304>)
 80019aa:	f7fe fc11 	bl	80001d0 <strlen>
 80019ae:	4603      	mov	r3, r0
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b9b      	ldr	r3, [pc, #620]	; (8001c20 <SendWebPage+0x304>)
 80019b4:	4413      	add	r3, r2
 80019b6:	4a9e      	ldr	r2, [pc, #632]	; (8001c30 <SendWebPage+0x314>)
 80019b8:	4614      	mov	r4, r2
 80019ba:	469c      	mov	ip, r3
 80019bc:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80019c0:	4665      	mov	r5, ip
 80019c2:	4626      	mov	r6, r4
 80019c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80019c6:	6028      	str	r0, [r5, #0]
 80019c8:	6069      	str	r1, [r5, #4]
 80019ca:	60aa      	str	r2, [r5, #8]
 80019cc:	60eb      	str	r3, [r5, #12]
 80019ce:	3410      	adds	r4, #16
 80019d0:	f10c 0c10 	add.w	ip, ip, #16
 80019d4:	4574      	cmp	r4, lr
 80019d6:	d1f3      	bne.n	80019c0 <SendWebPage+0xa4>
 80019d8:	4665      	mov	r5, ip
 80019da:	4623      	mov	r3, r4
 80019dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80019de:	6028      	str	r0, [r5, #0]
 80019e0:	6069      	str	r1, [r5, #4]
 80019e2:	60aa      	str	r2, [r5, #8]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	732b      	strb	r3, [r5, #12]
  strcat((char *)http, (char *)"<br /><hr>\r\n");
 80019e8:	488d      	ldr	r0, [pc, #564]	; (8001c20 <SendWebPage+0x304>)
 80019ea:	f7fe fbf1 	bl	80001d0 <strlen>
 80019ee:	4603      	mov	r3, r0
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b8b      	ldr	r3, [pc, #556]	; (8001c20 <SendWebPage+0x304>)
 80019f4:	4413      	add	r3, r2
 80019f6:	4a8f      	ldr	r2, [pc, #572]	; (8001c34 <SendWebPage+0x318>)
 80019f8:	461c      	mov	r4, r3
 80019fa:	4613      	mov	r3, r2
 80019fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80019fe:	6020      	str	r0, [r4, #0]
 8001a00:	6061      	str	r1, [r4, #4]
 8001a02:	60a2      	str	r2, [r4, #8]
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	7323      	strb	r3, [r4, #12]
  strcat((char *)http, (char *)"<p><form method=\"POST\"><strong>Temp: <input type=\"text\" value=\"");
 8001a08:	4885      	ldr	r0, [pc, #532]	; (8001c20 <SendWebPage+0x304>)
 8001a0a:	f7fe fbe1 	bl	80001d0 <strlen>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b83      	ldr	r3, [pc, #524]	; (8001c20 <SendWebPage+0x304>)
 8001a14:	4413      	add	r3, r2
 8001a16:	4a88      	ldr	r2, [pc, #544]	; (8001c38 <SendWebPage+0x31c>)
 8001a18:	4614      	mov	r4, r2
 8001a1a:	469c      	mov	ip, r3
 8001a1c:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8001a20:	4665      	mov	r5, ip
 8001a22:	4626      	mov	r6, r4
 8001a24:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a26:	6028      	str	r0, [r5, #0]
 8001a28:	6069      	str	r1, [r5, #4]
 8001a2a:	60aa      	str	r2, [r5, #8]
 8001a2c:	60eb      	str	r3, [r5, #12]
 8001a2e:	3410      	adds	r4, #16
 8001a30:	f10c 0c10 	add.w	ip, ip, #16
 8001a34:	4574      	cmp	r4, lr
 8001a36:	d1f3      	bne.n	8001a20 <SendWebPage+0x104>
  sprintf((char *)temp, "%d", temperature);
 8001a38:	79ba      	ldrb	r2, [r7, #6]
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	497f      	ldr	r1, [pc, #508]	; (8001c3c <SendWebPage+0x320>)
 8001a40:	4618      	mov	r0, r3
 8001a42:	f00a fd2d 	bl	800c4a0 <siprintf>
  strcat((char *)http, (char *)temp);
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4874      	ldr	r0, [pc, #464]	; (8001c20 <SendWebPage+0x304>)
 8001a4e:	f00a fd8a 	bl	800c566 <strcat>
  strcat((char *)http, (char *)"\"> <sup>O</sup>C");
 8001a52:	4873      	ldr	r0, [pc, #460]	; (8001c20 <SendWebPage+0x304>)
 8001a54:	f7fe fbbc 	bl	80001d0 <strlen>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4b70      	ldr	r3, [pc, #448]	; (8001c20 <SendWebPage+0x304>)
 8001a5e:	4413      	add	r3, r2
 8001a60:	4a77      	ldr	r2, [pc, #476]	; (8001c40 <SendWebPage+0x324>)
 8001a62:	461d      	mov	r5, r3
 8001a64:	4614      	mov	r4, r2
 8001a66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a68:	6028      	str	r0, [r5, #0]
 8001a6a:	6069      	str	r1, [r5, #4]
 8001a6c:	60aa      	str	r2, [r5, #8]
 8001a6e:	60eb      	str	r3, [r5, #12]
 8001a70:	7823      	ldrb	r3, [r4, #0]
 8001a72:	742b      	strb	r3, [r5, #16]

  if (ledIsOn)
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d040      	beq.n	8001afc <SendWebPage+0x1e0>
  {
    strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" >LED off");
 8001a7a:	4869      	ldr	r0, [pc, #420]	; (8001c20 <SendWebPage+0x304>)
 8001a7c:	f7fe fba8 	bl	80001d0 <strlen>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b66      	ldr	r3, [pc, #408]	; (8001c20 <SendWebPage+0x304>)
 8001a86:	4413      	add	r3, r2
 8001a88:	4a6e      	ldr	r2, [pc, #440]	; (8001c44 <SendWebPage+0x328>)
 8001a8a:	4614      	mov	r4, r2
 8001a8c:	469c      	mov	ip, r3
 8001a8e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001a92:	4665      	mov	r5, ip
 8001a94:	4626      	mov	r6, r4
 8001a96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a98:	6028      	str	r0, [r5, #0]
 8001a9a:	6069      	str	r1, [r5, #4]
 8001a9c:	60aa      	str	r2, [r5, #8]
 8001a9e:	60eb      	str	r3, [r5, #12]
 8001aa0:	3410      	adds	r4, #16
 8001aa2:	f10c 0c10 	add.w	ip, ip, #16
 8001aa6:	4574      	cmp	r4, lr
 8001aa8:	d1f3      	bne.n	8001a92 <SendWebPage+0x176>
 8001aaa:	4663      	mov	r3, ip
 8001aac:	4622      	mov	r2, r4
 8001aae:	6810      	ldr	r0, [r2, #0]
 8001ab0:	6018      	str	r0, [r3, #0]
 8001ab2:	8891      	ldrh	r1, [r2, #4]
 8001ab4:	7992      	ldrb	r2, [r2, #6]
 8001ab6:	8099      	strh	r1, [r3, #4]
 8001ab8:	719a      	strb	r2, [r3, #6]
    strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" checked>LED on");
 8001aba:	4859      	ldr	r0, [pc, #356]	; (8001c20 <SendWebPage+0x304>)
 8001abc:	f7fe fb88 	bl	80001d0 <strlen>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4b56      	ldr	r3, [pc, #344]	; (8001c20 <SendWebPage+0x304>)
 8001ac6:	4413      	add	r3, r2
 8001ac8:	4a5f      	ldr	r2, [pc, #380]	; (8001c48 <SendWebPage+0x32c>)
 8001aca:	4614      	mov	r4, r2
 8001acc:	469c      	mov	ip, r3
 8001ace:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001ad2:	4665      	mov	r5, ip
 8001ad4:	4626      	mov	r6, r4
 8001ad6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001ad8:	6028      	str	r0, [r5, #0]
 8001ada:	6069      	str	r1, [r5, #4]
 8001adc:	60aa      	str	r2, [r5, #8]
 8001ade:	60eb      	str	r3, [r5, #12]
 8001ae0:	3410      	adds	r4, #16
 8001ae2:	f10c 0c10 	add.w	ip, ip, #16
 8001ae6:	4574      	cmp	r4, lr
 8001ae8:	d1f3      	bne.n	8001ad2 <SendWebPage+0x1b6>
 8001aea:	4665      	mov	r5, ip
 8001aec:	4623      	mov	r3, r4
 8001aee:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001af0:	6028      	str	r0, [r5, #0]
 8001af2:	6069      	str	r1, [r5, #4]
 8001af4:	60aa      	str	r2, [r5, #8]
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	81ab      	strh	r3, [r5, #12]
 8001afa:	e03f      	b.n	8001b7c <SendWebPage+0x260>
  }
  else
  {
    strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" checked>LED off");
 8001afc:	4848      	ldr	r0, [pc, #288]	; (8001c20 <SendWebPage+0x304>)
 8001afe:	f7fe fb67 	bl	80001d0 <strlen>
 8001b02:	4603      	mov	r3, r0
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b46      	ldr	r3, [pc, #280]	; (8001c20 <SendWebPage+0x304>)
 8001b08:	4413      	add	r3, r2
 8001b0a:	4a50      	ldr	r2, [pc, #320]	; (8001c4c <SendWebPage+0x330>)
 8001b0c:	4614      	mov	r4, r2
 8001b0e:	469c      	mov	ip, r3
 8001b10:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001b14:	4665      	mov	r5, ip
 8001b16:	4626      	mov	r6, r4
 8001b18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b1a:	6028      	str	r0, [r5, #0]
 8001b1c:	6069      	str	r1, [r5, #4]
 8001b1e:	60aa      	str	r2, [r5, #8]
 8001b20:	60eb      	str	r3, [r5, #12]
 8001b22:	3410      	adds	r4, #16
 8001b24:	f10c 0c10 	add.w	ip, ip, #16
 8001b28:	4574      	cmp	r4, lr
 8001b2a:	d1f3      	bne.n	8001b14 <SendWebPage+0x1f8>
 8001b2c:	4665      	mov	r5, ip
 8001b2e:	4623      	mov	r3, r4
 8001b30:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001b32:	6028      	str	r0, [r5, #0]
 8001b34:	6069      	str	r1, [r5, #4]
 8001b36:	60aa      	str	r2, [r5, #8]
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	81ab      	strh	r3, [r5, #12]
    strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" >LED on");
 8001b3c:	4838      	ldr	r0, [pc, #224]	; (8001c20 <SendWebPage+0x304>)
 8001b3e:	f7fe fb47 	bl	80001d0 <strlen>
 8001b42:	4603      	mov	r3, r0
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b36      	ldr	r3, [pc, #216]	; (8001c20 <SendWebPage+0x304>)
 8001b48:	4413      	add	r3, r2
 8001b4a:	4a41      	ldr	r2, [pc, #260]	; (8001c50 <SendWebPage+0x334>)
 8001b4c:	4614      	mov	r4, r2
 8001b4e:	469c      	mov	ip, r3
 8001b50:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001b54:	4665      	mov	r5, ip
 8001b56:	4626      	mov	r6, r4
 8001b58:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b5a:	6028      	str	r0, [r5, #0]
 8001b5c:	6069      	str	r1, [r5, #4]
 8001b5e:	60aa      	str	r2, [r5, #8]
 8001b60:	60eb      	str	r3, [r5, #12]
 8001b62:	3410      	adds	r4, #16
 8001b64:	f10c 0c10 	add.w	ip, ip, #16
 8001b68:	4574      	cmp	r4, lr
 8001b6a:	d1f3      	bne.n	8001b54 <SendWebPage+0x238>
 8001b6c:	4663      	mov	r3, ip
 8001b6e:	4622      	mov	r2, r4
 8001b70:	6810      	ldr	r0, [r2, #0]
 8001b72:	6018      	str	r0, [r3, #0]
 8001b74:	8891      	ldrh	r1, [r2, #4]
 8001b76:	7992      	ldrb	r2, [r2, #6]
 8001b78:	8099      	strh	r1, [r3, #4]
 8001b7a:	719a      	strb	r2, [r3, #6]
  }

  strcat((char *)http, (char *)"</strong><p><input type=\"submit\"></form></span>");
 8001b7c:	4828      	ldr	r0, [pc, #160]	; (8001c20 <SendWebPage+0x304>)
 8001b7e:	f7fe fb27 	bl	80001d0 <strlen>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <SendWebPage+0x304>)
 8001b88:	4413      	add	r3, r2
 8001b8a:	4a32      	ldr	r2, [pc, #200]	; (8001c54 <SendWebPage+0x338>)
 8001b8c:	4614      	mov	r4, r2
 8001b8e:	469c      	mov	ip, r3
 8001b90:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001b94:	4665      	mov	r5, ip
 8001b96:	4626      	mov	r6, r4
 8001b98:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b9a:	6028      	str	r0, [r5, #0]
 8001b9c:	6069      	str	r1, [r5, #4]
 8001b9e:	60aa      	str	r2, [r5, #8]
 8001ba0:	60eb      	str	r3, [r5, #12]
 8001ba2:	3410      	adds	r4, #16
 8001ba4:	f10c 0c10 	add.w	ip, ip, #16
 8001ba8:	4574      	cmp	r4, lr
 8001baa:	d1f3      	bne.n	8001b94 <SendWebPage+0x278>
  strcat((char *)http, (char *)"</body>\r\n</html>\r\n");
 8001bac:	481c      	ldr	r0, [pc, #112]	; (8001c20 <SendWebPage+0x304>)
 8001bae:	f7fe fb0f 	bl	80001d0 <strlen>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <SendWebPage+0x304>)
 8001bb8:	4413      	add	r3, r2
 8001bba:	4a27      	ldr	r2, [pc, #156]	; (8001c58 <SendWebPage+0x33c>)
 8001bbc:	461d      	mov	r5, r3
 8001bbe:	4614      	mov	r4, r2
 8001bc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bc2:	6028      	str	r0, [r5, #0]
 8001bc4:	6069      	str	r1, [r5, #4]
 8001bc6:	60aa      	str	r2, [r5, #8]
 8001bc8:	60eb      	str	r3, [r5, #12]
 8001bca:	8823      	ldrh	r3, [r4, #0]
 8001bcc:	78a2      	ldrb	r2, [r4, #2]
 8001bce:	822b      	strh	r3, [r5, #16]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	74ab      	strb	r3, [r5, #18]

  ret = WIFI_SendData(0, (uint8_t *)http, strlen((char *)http), &SentDataLength, WIFI_WRITE_TIMEOUT);
 8001bd4:	4812      	ldr	r0, [pc, #72]	; (8001c20 <SendWebPage+0x304>)
 8001bd6:	f7fe fafb 	bl	80001d0 <strlen>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	f107 030a 	add.w	r3, r7, #10
 8001be2:	f242 7110 	movw	r1, #10000	; 0x2710
 8001be6:	9100      	str	r1, [sp, #0]
 8001be8:	490d      	ldr	r1, [pc, #52]	; (8001c20 <SendWebPage+0x304>)
 8001bea:	2000      	movs	r0, #0
 8001bec:	f007 f930 	bl	8008e50 <WIFI_SendData>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if((ret == WIFI_STATUS_OK) && (SentDataLength != strlen((char *)http)))
 8001bf6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10a      	bne.n	8001c14 <SendWebPage+0x2f8>
 8001bfe:	897b      	ldrh	r3, [r7, #10]
 8001c00:	461c      	mov	r4, r3
 8001c02:	4807      	ldr	r0, [pc, #28]	; (8001c20 <SendWebPage+0x304>)
 8001c04:	f7fe fae4 	bl	80001d0 <strlen>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	429c      	cmp	r4, r3
 8001c0c:	d002      	beq.n	8001c14 <SendWebPage+0x2f8>
  {
    ret = WIFI_STATUS_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return ret;
 8001c14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3744      	adds	r7, #68	; 0x44
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c20:	2000072c 	.word	0x2000072c
 8001c24:	0800d770 	.word	0x0800d770
 8001c28:	0800d7b0 	.word	0x0800d7b0
 8001c2c:	0800d7c4 	.word	0x0800d7c4
 8001c30:	0800d7e8 	.word	0x0800d7e8
 8001c34:	0800d828 	.word	0x0800d828
 8001c38:	0800d838 	.word	0x0800d838
 8001c3c:	0800d878 	.word	0x0800d878
 8001c40:	0800d87c 	.word	0x0800d87c
 8001c44:	0800d890 	.word	0x0800d890
 8001c48:	0800d8c8 	.word	0x0800d8c8
 8001c4c:	0800d908 	.word	0x0800d908
 8001c50:	0800d948 	.word	0x0800d948
 8001c54:	0800d980 	.word	0x0800d980
 8001c58:	0800d9b0 	.word	0x0800d9b0

08001c5c <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001c60:	2002      	movs	r0, #2
 8001c62:	f000 fda1 	bl	80027a8 <HAL_GPIO_EXTI_IRQHandler>
 portYIELD_FROM_ISR(pdFALSE);
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	4603      	mov	r3, r0
 8001c72:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001c74:	88fb      	ldrh	r3, [r7, #6]
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d102      	bne.n	8001c80 <HAL_GPIO_EXTI_Callback+0x16>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8001c7a:	f006 ffb7 	bl	8008bec <SPI_WIFI_ISR>
      break;
 8001c7e:	e000      	b.n	8001c82 <HAL_GPIO_EXTI_Callback+0x18>
    }
    default:
    {
      break;
 8001c80:	bf00      	nop
    }
  }
  portYIELD_FROM_ISR(pdFALSE);
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <SPI3_IRQHandler>:
  * @param  None
  * @retval None
  */
extern  SPI_HandleTypeDef hspi;
void SPI3_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8001c90:	4802      	ldr	r0, [pc, #8]	; (8001c9c <SPI3_IRQHandler+0x10>)
 8001c92:	f003 fa37 	bl	8005104 <HAL_SPI_IRQHandler>
  portYIELD_FROM_ISR(pdFALSE);
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000f5c 	.word	0x20000f5c

08001ca0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ca4:	f7ff fcfc 	bl	80016a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ca8:	480c      	ldr	r0, [pc, #48]	; (8001cdc <LoopForever+0x6>)
  ldr r1, =_edata
 8001caa:	490d      	ldr	r1, [pc, #52]	; (8001ce0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cac:	4a0d      	ldr	r2, [pc, #52]	; (8001ce4 <LoopForever+0xe>)
  movs r3, #0
 8001cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb0:	e002      	b.n	8001cb8 <LoopCopyDataInit>

08001cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb6:	3304      	adds	r3, #4

08001cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cbc:	d3f9      	bcc.n	8001cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cc0:	4c0a      	ldr	r4, [pc, #40]	; (8001cec <LoopForever+0x16>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc4:	e001      	b.n	8001cca <LoopFillZerobss>

08001cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc8:	3204      	adds	r2, #4

08001cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ccc:	d3fb      	bcc.n	8001cc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cce:	f00a f9a9 	bl	800c024 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cd2:	f7fe fcdd 	bl	8000690 <main>

08001cd6 <LoopForever>:

LoopForever:
    b LoopForever
 8001cd6:	e7fe      	b.n	8001cd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001cd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001ce4:	0800e08c 	.word	0x0800e08c
  ldr r2, =_sbss
 8001ce8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001cec:	200032a8 	.word	0x200032a8

08001cf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cf0:	e7fe      	b.n	8001cf0 <ADC1_2_IRQHandler>

08001cf2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cfc:	2003      	movs	r0, #3
 8001cfe:	f000 f902 	bl	8001f06 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d02:	200f      	movs	r0, #15
 8001d04:	f7ff fb66 	bl	80013d4 <HAL_InitTick>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	71fb      	strb	r3, [r7, #7]
 8001d12:	e001      	b.n	8001d18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d14:	f7ff f890 	bl	8000e38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d18:	79fb      	ldrb	r3, [r7, #7]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_IncTick+0x20>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_IncTick+0x24>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4413      	add	r3, r2
 8001d34:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <HAL_IncTick+0x24>)
 8001d36:	6013      	str	r3, [r2, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20000008 	.word	0x20000008
 8001d48:	20000f30 	.word	0x20000f30

08001d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d50:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <HAL_GetTick+0x14>)
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000f30 	.word	0x20000f30

08001d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d6c:	f7ff ffee 	bl	8001d4c <HAL_GetTick>
 8001d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7c:	d005      	beq.n	8001d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_Delay+0x44>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4413      	add	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d8a:	bf00      	nop
 8001d8c:	f7ff ffde 	bl	8001d4c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d8f7      	bhi.n	8001d8c <HAL_Delay+0x28>
  {
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000008 	.word	0x20000008

08001dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dde:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	60d3      	str	r3, [r2, #12]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <__NVIC_GetPriorityGrouping+0x18>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	0a1b      	lsrs	r3, r3, #8
 8001dfe:	f003 0307 	and.w	r3, r3, #7
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	db0b      	blt.n	8001e3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f003 021f 	and.w	r2, r3, #31
 8001e28:	4907      	ldr	r1, [pc, #28]	; (8001e48 <__NVIC_EnableIRQ+0x38>)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	2001      	movs	r0, #1
 8001e32:	fa00 f202 	lsl.w	r2, r0, r2
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000e100 	.word	0xe000e100

08001e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	db0a      	blt.n	8001e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	490c      	ldr	r1, [pc, #48]	; (8001e98 <__NVIC_SetPriority+0x4c>)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	0112      	lsls	r2, r2, #4
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e74:	e00a      	b.n	8001e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4908      	ldr	r1, [pc, #32]	; (8001e9c <__NVIC_SetPriority+0x50>)
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	3b04      	subs	r3, #4
 8001e84:	0112      	lsls	r2, r2, #4
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	440b      	add	r3, r1
 8001e8a:	761a      	strb	r2, [r3, #24]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000e100 	.word	0xe000e100
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f1c3 0307 	rsb	r3, r3, #7
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	bf28      	it	cs
 8001ebe:	2304      	movcs	r3, #4
 8001ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d902      	bls.n	8001ed0 <NVIC_EncodePriority+0x30>
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3b03      	subs	r3, #3
 8001ece:	e000      	b.n	8001ed2 <NVIC_EncodePriority+0x32>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	43d9      	mvns	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	4313      	orrs	r3, r2
         );
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3724      	adds	r7, #36	; 0x24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff ff4c 	bl	8001dac <__NVIC_SetPriorityGrouping>
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f2e:	f7ff ff61 	bl	8001df4 <__NVIC_GetPriorityGrouping>
 8001f32:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	68b9      	ldr	r1, [r7, #8]
 8001f38:	6978      	ldr	r0, [r7, #20]
 8001f3a:	f7ff ffb1 	bl	8001ea0 <NVIC_EncodePriority>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff ff80 	bl	8001e4c <__NVIC_SetPriority>
}
 8001f4c:	bf00      	nop
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff ff54 	bl	8001e10 <__NVIC_EnableIRQ>
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e0ac      	b.n	80020dc <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 f8b2 	bl	80020f0 <DFSDM_GetChannelFromInstance>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	4a55      	ldr	r2, [pc, #340]	; (80020e4 <HAL_DFSDM_ChannelInit+0x174>)
 8001f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e09f      	b.n	80020dc <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7fe ff73 	bl	8000e88 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001fa2:	4b51      	ldr	r3, [pc, #324]	; (80020e8 <HAL_DFSDM_ChannelInit+0x178>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	4a4f      	ldr	r2, [pc, #316]	; (80020e8 <HAL_DFSDM_ChannelInit+0x178>)
 8001faa:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001fac:	4b4e      	ldr	r3, [pc, #312]	; (80020e8 <HAL_DFSDM_ChannelInit+0x178>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d125      	bne.n	8002000 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001fb4:	4b4d      	ldr	r3, [pc, #308]	; (80020ec <HAL_DFSDM_ChannelInit+0x17c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a4c      	ldr	r2, [pc, #304]	; (80020ec <HAL_DFSDM_ChannelInit+0x17c>)
 8001fba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001fbe:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001fc0:	4b4a      	ldr	r3, [pc, #296]	; (80020ec <HAL_DFSDM_ChannelInit+0x17c>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	4948      	ldr	r1, [pc, #288]	; (80020ec <HAL_DFSDM_ChannelInit+0x17c>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001fce:	4b47      	ldr	r3, [pc, #284]	; (80020ec <HAL_DFSDM_ChannelInit+0x17c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a46      	ldr	r2, [pc, #280]	; (80020ec <HAL_DFSDM_ChannelInit+0x17c>)
 8001fd4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001fd8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	791b      	ldrb	r3, [r3, #4]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d108      	bne.n	8001ff4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001fe2:	4b42      	ldr	r3, [pc, #264]	; (80020ec <HAL_DFSDM_ChannelInit+0x17c>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	041b      	lsls	r3, r3, #16
 8001fee:	493f      	ldr	r1, [pc, #252]	; (80020ec <HAL_DFSDM_ChannelInit+0x17c>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001ff4:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <HAL_DFSDM_ChannelInit+0x17c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a3c      	ldr	r2, [pc, #240]	; (80020ec <HAL_DFSDM_ChannelInit+0x17c>)
 8001ffa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ffe:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800200e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6819      	ldr	r1, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800201e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002024:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 020f 	bic.w	r2, r2, #15
 800203c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6819      	ldr	r1, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002064:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6899      	ldr	r1, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	3b01      	subs	r3, #1
 8002076:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f002 0207 	and.w	r2, r2, #7
 8002090:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6859      	ldr	r1, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020bc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 f810 	bl	80020f0 <DFSDM_GetChannelFromInstance>
 80020d0:	4602      	mov	r2, r0
 80020d2:	4904      	ldr	r1, [pc, #16]	; (80020e4 <HAL_DFSDM_ChannelInit+0x174>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000f38 	.word	0x20000f38
 80020e8:	20000f34 	.word	0x20000f34
 80020ec:	40016000 	.word	0x40016000

080020f0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a1c      	ldr	r2, [pc, #112]	; (800216c <DFSDM_GetChannelFromInstance+0x7c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d102      	bne.n	8002106 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	e02b      	b.n	800215e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a19      	ldr	r2, [pc, #100]	; (8002170 <DFSDM_GetChannelFromInstance+0x80>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d102      	bne.n	8002114 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800210e:	2301      	movs	r3, #1
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	e024      	b.n	800215e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a17      	ldr	r2, [pc, #92]	; (8002174 <DFSDM_GetChannelFromInstance+0x84>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d102      	bne.n	8002122 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800211c:	2302      	movs	r3, #2
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	e01d      	b.n	800215e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a14      	ldr	r2, [pc, #80]	; (8002178 <DFSDM_GetChannelFromInstance+0x88>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d102      	bne.n	8002130 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800212a:	2304      	movs	r3, #4
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	e016      	b.n	800215e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a12      	ldr	r2, [pc, #72]	; (800217c <DFSDM_GetChannelFromInstance+0x8c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d102      	bne.n	800213e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002138:	2305      	movs	r3, #5
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	e00f      	b.n	800215e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a0f      	ldr	r2, [pc, #60]	; (8002180 <DFSDM_GetChannelFromInstance+0x90>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d102      	bne.n	800214c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002146:	2306      	movs	r3, #6
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	e008      	b.n	800215e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a0d      	ldr	r2, [pc, #52]	; (8002184 <DFSDM_GetChannelFromInstance+0x94>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d102      	bne.n	800215a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002154:	2307      	movs	r3, #7
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	e001      	b.n	800215e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800215a:	2303      	movs	r3, #3
 800215c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800215e:	68fb      	ldr	r3, [r7, #12]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	40016000 	.word	0x40016000
 8002170:	40016020 	.word	0x40016020
 8002174:	40016040 	.word	0x40016040
 8002178:	40016080 	.word	0x40016080
 800217c:	400160a0 	.word	0x400160a0
 8002180:	400160c0 	.word	0x400160c0
 8002184:	400160e0 	.word	0x400160e0

08002188 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d005      	beq.n	80021ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2204      	movs	r2, #4
 80021a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	73fb      	strb	r3, [r7, #15]
 80021aa:	e029      	b.n	8002200 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 020e 	bic.w	r2, r2, #14
 80021ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0201 	bic.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d0:	f003 021c 	and.w	r2, r3, #28
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	2101      	movs	r1, #1
 80021da:	fa01 f202 	lsl.w	r2, r1, r2
 80021de:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	4798      	blx	r3
    }
  }
  return status;
 8002200:	7bfb      	ldrb	r3, [r7, #15]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800220c:	b480      	push	{r7}
 800220e:	b087      	sub	sp, #28
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800221a:	e17f      	b.n	800251c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	2101      	movs	r1, #1
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	fa01 f303 	lsl.w	r3, r1, r3
 8002228:	4013      	ands	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 8171 	beq.w	8002516 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	2b01      	cmp	r3, #1
 800223e:	d005      	beq.n	800224c <HAL_GPIO_Init+0x40>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d130      	bne.n	80022ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	2203      	movs	r2, #3
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002282:	2201      	movs	r2, #1
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4013      	ands	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	091b      	lsrs	r3, r3, #4
 8002298:	f003 0201 	and.w	r2, r3, #1
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d118      	bne.n	80022ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80022c0:	2201      	movs	r2, #1
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	08db      	lsrs	r3, r3, #3
 80022d6:	f003 0201 	and.w	r2, r3, #1
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	d017      	beq.n	8002328 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	2203      	movs	r2, #3
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4013      	ands	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4313      	orrs	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d123      	bne.n	800237c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	08da      	lsrs	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3208      	adds	r2, #8
 800233c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002340:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	220f      	movs	r2, #15
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4013      	ands	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	08da      	lsrs	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3208      	adds	r2, #8
 8002376:	6939      	ldr	r1, [r7, #16]
 8002378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	2203      	movs	r2, #3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0203 	and.w	r2, r3, #3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80ac 	beq.w	8002516 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023be:	4b5f      	ldr	r3, [pc, #380]	; (800253c <HAL_GPIO_Init+0x330>)
 80023c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c2:	4a5e      	ldr	r2, [pc, #376]	; (800253c <HAL_GPIO_Init+0x330>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6613      	str	r3, [r2, #96]	; 0x60
 80023ca:	4b5c      	ldr	r3, [pc, #368]	; (800253c <HAL_GPIO_Init+0x330>)
 80023cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023d6:	4a5a      	ldr	r2, [pc, #360]	; (8002540 <HAL_GPIO_Init+0x334>)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	089b      	lsrs	r3, r3, #2
 80023dc:	3302      	adds	r3, #2
 80023de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	220f      	movs	r2, #15
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4013      	ands	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002400:	d025      	beq.n	800244e <HAL_GPIO_Init+0x242>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a4f      	ldr	r2, [pc, #316]	; (8002544 <HAL_GPIO_Init+0x338>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d01f      	beq.n	800244a <HAL_GPIO_Init+0x23e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a4e      	ldr	r2, [pc, #312]	; (8002548 <HAL_GPIO_Init+0x33c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d019      	beq.n	8002446 <HAL_GPIO_Init+0x23a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a4d      	ldr	r2, [pc, #308]	; (800254c <HAL_GPIO_Init+0x340>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d013      	beq.n	8002442 <HAL_GPIO_Init+0x236>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a4c      	ldr	r2, [pc, #304]	; (8002550 <HAL_GPIO_Init+0x344>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d00d      	beq.n	800243e <HAL_GPIO_Init+0x232>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a4b      	ldr	r2, [pc, #300]	; (8002554 <HAL_GPIO_Init+0x348>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d007      	beq.n	800243a <HAL_GPIO_Init+0x22e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a4a      	ldr	r2, [pc, #296]	; (8002558 <HAL_GPIO_Init+0x34c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d101      	bne.n	8002436 <HAL_GPIO_Init+0x22a>
 8002432:	2306      	movs	r3, #6
 8002434:	e00c      	b.n	8002450 <HAL_GPIO_Init+0x244>
 8002436:	2307      	movs	r3, #7
 8002438:	e00a      	b.n	8002450 <HAL_GPIO_Init+0x244>
 800243a:	2305      	movs	r3, #5
 800243c:	e008      	b.n	8002450 <HAL_GPIO_Init+0x244>
 800243e:	2304      	movs	r3, #4
 8002440:	e006      	b.n	8002450 <HAL_GPIO_Init+0x244>
 8002442:	2303      	movs	r3, #3
 8002444:	e004      	b.n	8002450 <HAL_GPIO_Init+0x244>
 8002446:	2302      	movs	r3, #2
 8002448:	e002      	b.n	8002450 <HAL_GPIO_Init+0x244>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_GPIO_Init+0x244>
 800244e:	2300      	movs	r3, #0
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	f002 0203 	and.w	r2, r2, #3
 8002456:	0092      	lsls	r2, r2, #2
 8002458:	4093      	lsls	r3, r2
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002460:	4937      	ldr	r1, [pc, #220]	; (8002540 <HAL_GPIO_Init+0x334>)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	089b      	lsrs	r3, r3, #2
 8002466:	3302      	adds	r3, #2
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800246e:	4b3b      	ldr	r3, [pc, #236]	; (800255c <HAL_GPIO_Init+0x350>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	43db      	mvns	r3, r3
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002492:	4a32      	ldr	r2, [pc, #200]	; (800255c <HAL_GPIO_Init+0x350>)
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002498:	4b30      	ldr	r3, [pc, #192]	; (800255c <HAL_GPIO_Init+0x350>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024bc:	4a27      	ldr	r2, [pc, #156]	; (800255c <HAL_GPIO_Init+0x350>)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024c2:	4b26      	ldr	r3, [pc, #152]	; (800255c <HAL_GPIO_Init+0x350>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024e6:	4a1d      	ldr	r2, [pc, #116]	; (800255c <HAL_GPIO_Init+0x350>)
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024ec:	4b1b      	ldr	r3, [pc, #108]	; (800255c <HAL_GPIO_Init+0x350>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002510:	4a12      	ldr	r2, [pc, #72]	; (800255c <HAL_GPIO_Init+0x350>)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	3301      	adds	r3, #1
 800251a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	fa22 f303 	lsr.w	r3, r2, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	f47f ae78 	bne.w	800221c <HAL_GPIO_Init+0x10>
  }
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	371c      	adds	r7, #28
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40021000 	.word	0x40021000
 8002540:	40010000 	.word	0x40010000
 8002544:	48000400 	.word	0x48000400
 8002548:	48000800 	.word	0x48000800
 800254c:	48000c00 	.word	0x48000c00
 8002550:	48001000 	.word	0x48001000
 8002554:	48001400 	.word	0x48001400
 8002558:	48001800 	.word	0x48001800
 800255c:	40010400 	.word	0x40010400

08002560 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800256e:	e0cd      	b.n	800270c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002570:	2201      	movs	r2, #1
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	4013      	ands	r3, r2
 800257c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80c0 	beq.w	8002706 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002586:	4a68      	ldr	r2, [pc, #416]	; (8002728 <HAL_GPIO_DeInit+0x1c8>)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	089b      	lsrs	r3, r3, #2
 800258c:	3302      	adds	r3, #2
 800258e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002592:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	220f      	movs	r2, #15
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4013      	ands	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025ae:	d025      	beq.n	80025fc <HAL_GPIO_DeInit+0x9c>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a5e      	ldr	r2, [pc, #376]	; (800272c <HAL_GPIO_DeInit+0x1cc>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d01f      	beq.n	80025f8 <HAL_GPIO_DeInit+0x98>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a5d      	ldr	r2, [pc, #372]	; (8002730 <HAL_GPIO_DeInit+0x1d0>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d019      	beq.n	80025f4 <HAL_GPIO_DeInit+0x94>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a5c      	ldr	r2, [pc, #368]	; (8002734 <HAL_GPIO_DeInit+0x1d4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d013      	beq.n	80025f0 <HAL_GPIO_DeInit+0x90>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a5b      	ldr	r2, [pc, #364]	; (8002738 <HAL_GPIO_DeInit+0x1d8>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d00d      	beq.n	80025ec <HAL_GPIO_DeInit+0x8c>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a5a      	ldr	r2, [pc, #360]	; (800273c <HAL_GPIO_DeInit+0x1dc>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d007      	beq.n	80025e8 <HAL_GPIO_DeInit+0x88>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a59      	ldr	r2, [pc, #356]	; (8002740 <HAL_GPIO_DeInit+0x1e0>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d101      	bne.n	80025e4 <HAL_GPIO_DeInit+0x84>
 80025e0:	2306      	movs	r3, #6
 80025e2:	e00c      	b.n	80025fe <HAL_GPIO_DeInit+0x9e>
 80025e4:	2307      	movs	r3, #7
 80025e6:	e00a      	b.n	80025fe <HAL_GPIO_DeInit+0x9e>
 80025e8:	2305      	movs	r3, #5
 80025ea:	e008      	b.n	80025fe <HAL_GPIO_DeInit+0x9e>
 80025ec:	2304      	movs	r3, #4
 80025ee:	e006      	b.n	80025fe <HAL_GPIO_DeInit+0x9e>
 80025f0:	2303      	movs	r3, #3
 80025f2:	e004      	b.n	80025fe <HAL_GPIO_DeInit+0x9e>
 80025f4:	2302      	movs	r3, #2
 80025f6:	e002      	b.n	80025fe <HAL_GPIO_DeInit+0x9e>
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <HAL_GPIO_DeInit+0x9e>
 80025fc:	2300      	movs	r3, #0
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	f002 0203 	and.w	r2, r2, #3
 8002604:	0092      	lsls	r2, r2, #2
 8002606:	4093      	lsls	r3, r2
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	429a      	cmp	r2, r3
 800260c:	d132      	bne.n	8002674 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800260e:	4b4d      	ldr	r3, [pc, #308]	; (8002744 <HAL_GPIO_DeInit+0x1e4>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	43db      	mvns	r3, r3
 8002616:	494b      	ldr	r1, [pc, #300]	; (8002744 <HAL_GPIO_DeInit+0x1e4>)
 8002618:	4013      	ands	r3, r2
 800261a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800261c:	4b49      	ldr	r3, [pc, #292]	; (8002744 <HAL_GPIO_DeInit+0x1e4>)
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	43db      	mvns	r3, r3
 8002624:	4947      	ldr	r1, [pc, #284]	; (8002744 <HAL_GPIO_DeInit+0x1e4>)
 8002626:	4013      	ands	r3, r2
 8002628:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800262a:	4b46      	ldr	r3, [pc, #280]	; (8002744 <HAL_GPIO_DeInit+0x1e4>)
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	43db      	mvns	r3, r3
 8002632:	4944      	ldr	r1, [pc, #272]	; (8002744 <HAL_GPIO_DeInit+0x1e4>)
 8002634:	4013      	ands	r3, r2
 8002636:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002638:	4b42      	ldr	r3, [pc, #264]	; (8002744 <HAL_GPIO_DeInit+0x1e4>)
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	43db      	mvns	r3, r3
 8002640:	4940      	ldr	r1, [pc, #256]	; (8002744 <HAL_GPIO_DeInit+0x1e4>)
 8002642:	4013      	ands	r3, r2
 8002644:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	220f      	movs	r2, #15
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002656:	4a34      	ldr	r2, [pc, #208]	; (8002728 <HAL_GPIO_DeInit+0x1c8>)
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	089b      	lsrs	r3, r3, #2
 800265c:	3302      	adds	r3, #2
 800265e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	43da      	mvns	r2, r3
 8002666:	4830      	ldr	r0, [pc, #192]	; (8002728 <HAL_GPIO_DeInit+0x1c8>)
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	400a      	ands	r2, r1
 800266e:	3302      	adds	r3, #2
 8002670:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	2103      	movs	r1, #3
 800267e:	fa01 f303 	lsl.w	r3, r1, r3
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	08da      	lsrs	r2, r3, #3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3208      	adds	r2, #8
 8002690:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	220f      	movs	r2, #15
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	08d2      	lsrs	r2, r2, #3
 80026a8:	4019      	ands	r1, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3208      	adds	r2, #8
 80026ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	2103      	movs	r1, #3
 80026bc:	fa01 f303 	lsl.w	r3, r1, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	401a      	ands	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	2101      	movs	r1, #1
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	fa01 f303 	lsl.w	r3, r1, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	401a      	ands	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	2103      	movs	r1, #3
 80026e6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	401a      	ands	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f6:	2101      	movs	r1, #1
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	fa01 f303 	lsl.w	r3, r1, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	401a      	ands	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	3301      	adds	r3, #1
 800270a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	f47f af2b 	bne.w	8002570 <HAL_GPIO_DeInit+0x10>
  }
}
 800271a:	bf00      	nop
 800271c:	bf00      	nop
 800271e:	371c      	adds	r7, #28
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	40010000 	.word	0x40010000
 800272c:	48000400 	.word	0x48000400
 8002730:	48000800 	.word	0x48000800
 8002734:	48000c00 	.word	0x48000c00
 8002738:	48001000 	.word	0x48001000
 800273c:	48001400 	.word	0x48001400
 8002740:	48001800 	.word	0x48001800
 8002744:	40010400 	.word	0x40010400

08002748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	887b      	ldrh	r3, [r7, #2]
 800275a:	4013      	ands	r3, r2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
 8002764:	e001      	b.n	800276a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002766:	2300      	movs	r3, #0
 8002768:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800276a:	7bfb      	ldrb	r3, [r7, #15]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	807b      	strh	r3, [r7, #2]
 8002784:	4613      	mov	r3, r2
 8002786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002788:	787b      	ldrb	r3, [r7, #1]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800278e:	887a      	ldrh	r2, [r7, #2]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002794:	e002      	b.n	800279c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002796:	887a      	ldrh	r2, [r7, #2]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027b2:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027b4:	695a      	ldr	r2, [r3, #20]
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d006      	beq.n	80027cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027be:	4a05      	ldr	r2, [pc, #20]	; (80027d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027c4:	88fb      	ldrh	r3, [r7, #6]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff fa4f 	bl	8001c6a <HAL_GPIO_EXTI_Callback>
  }
}
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40010400 	.word	0x40010400

080027d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e081      	b.n	80028ee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7fe fba6 	bl	8000f50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2224      	movs	r2, #36	; 0x24
 8002808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0201 	bic.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002828:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002838:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d107      	bne.n	8002852 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	e006      	b.n	8002860 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800285e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	2b02      	cmp	r3, #2
 8002866:	d104      	bne.n	8002872 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002870:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002884:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002894:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691a      	ldr	r2, [r3, #16]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69d9      	ldr	r1, [r3, #28]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1a      	ldr	r2, [r3, #32]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0201 	orr.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2220      	movs	r2, #32
 80028da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b20      	cmp	r3, #32
 800290a:	d138      	bne.n	800297e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002916:	2302      	movs	r3, #2
 8002918:	e032      	b.n	8002980 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2224      	movs	r2, #36	; 0x24
 8002926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0201 	bic.w	r2, r2, #1
 8002938:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002948:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6819      	ldr	r1, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0201 	orr.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	e000      	b.n	8002980 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800297e:	2302      	movs	r3, #2
  }
}
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b20      	cmp	r3, #32
 80029a0:	d139      	bne.n	8002a16 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e033      	b.n	8002a18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2224      	movs	r2, #36	; 0x24
 80029bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0201 	bic.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	021b      	lsls	r3, r3, #8
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f042 0201 	orr.w	r2, r2, #1
 8002a00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	e000      	b.n	8002a18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a16:	2302      	movs	r3, #2
  }
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a26:	b08f      	sub	sp, #60	; 0x3c
 8002a28:	af0a      	add	r7, sp, #40	; 0x28
 8002a2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e116      	b.n	8002c64 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d106      	bne.n	8002a56 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7fe fc23 	bl	800129c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2203      	movs	r2, #3
 8002a5a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d102      	bne.n	8002a70 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f004 f992 	bl	8006d9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	603b      	str	r3, [r7, #0]
 8002a80:	687e      	ldr	r6, [r7, #4]
 8002a82:	466d      	mov	r5, sp
 8002a84:	f106 0410 	add.w	r4, r6, #16
 8002a88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a94:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a98:	1d33      	adds	r3, r6, #4
 8002a9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a9c:	6838      	ldr	r0, [r7, #0]
 8002a9e:	f004 f952 	bl	8006d46 <USB_CoreInit>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0d7      	b.n	8002c64 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4618      	mov	r0, r3
 8002abc:	f004 f980 	bl	8006dc0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	73fb      	strb	r3, [r7, #15]
 8002ac4:	e04a      	b.n	8002b5c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ac6:	7bfa      	ldrb	r2, [r7, #15]
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	1a9b      	subs	r3, r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	333d      	adds	r3, #61	; 0x3d
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ada:	7bfa      	ldrb	r2, [r7, #15]
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	333c      	adds	r3, #60	; 0x3c
 8002aea:	7bfa      	ldrb	r2, [r7, #15]
 8002aec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002aee:	7bfa      	ldrb	r2, [r7, #15]
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	b298      	uxth	r0, r3
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	1a9b      	subs	r3, r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	3342      	adds	r3, #66	; 0x42
 8002b02:	4602      	mov	r2, r0
 8002b04:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b06:	7bfa      	ldrb	r2, [r7, #15]
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	1a9b      	subs	r3, r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	333f      	adds	r3, #63	; 0x3f
 8002b16:	2200      	movs	r2, #0
 8002b18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b1a:	7bfa      	ldrb	r2, [r7, #15]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	1a9b      	subs	r3, r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	3344      	adds	r3, #68	; 0x44
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	1a9b      	subs	r3, r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	3348      	adds	r3, #72	; 0x48
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b42:	7bfa      	ldrb	r2, [r7, #15]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	1a9b      	subs	r3, r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	3350      	adds	r3, #80	; 0x50
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
 8002b5c:	7bfa      	ldrb	r2, [r7, #15]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d3af      	bcc.n	8002ac6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b66:	2300      	movs	r3, #0
 8002b68:	73fb      	strb	r3, [r7, #15]
 8002b6a:	e044      	b.n	8002bf6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b6c:	7bfa      	ldrb	r2, [r7, #15]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b7e:	2200      	movs	r2, #0
 8002b80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b82:	7bfa      	ldrb	r2, [r7, #15]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	1a9b      	subs	r3, r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b94:	7bfa      	ldrb	r2, [r7, #15]
 8002b96:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b98:	7bfa      	ldrb	r2, [r7, #15]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	1a9b      	subs	r3, r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	1a9b      	subs	r3, r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bc4:	7bfa      	ldrb	r2, [r7, #15]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bda:	7bfa      	ldrb	r2, [r7, #15]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	1a9b      	subs	r3, r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	73fb      	strb	r3, [r7, #15]
 8002bf6:	7bfa      	ldrb	r2, [r7, #15]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d3b5      	bcc.n	8002b6c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	603b      	str	r3, [r7, #0]
 8002c06:	687e      	ldr	r6, [r7, #4]
 8002c08:	466d      	mov	r5, sp
 8002c0a:	f106 0410 	add.w	r4, r6, #16
 8002c0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c1e:	1d33      	adds	r3, r6, #4
 8002c20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c22:	6838      	ldr	r0, [r7, #0]
 8002c24:	f004 f918 	bl	8006e58 <USB_DevInit>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d005      	beq.n	8002c3a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2202      	movs	r2, #2
 8002c32:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e014      	b.n	8002c64 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d102      	bne.n	8002c58 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f80a 	bl	8002c6c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f004 fac0 	bl	80071e2 <USB_DevDisconnect>

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c9e:	f043 0303 	orr.w	r3, r3, #3
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a04      	ldr	r2, [pc, #16]	; (8002cd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc2:	6013      	str	r3, [r2, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	40007000 	.word	0x40007000

08002cd4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002cd8:	4b04      	ldr	r3, [pc, #16]	; (8002cec <HAL_PWREx_GetVoltageRange+0x18>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40007000 	.word	0x40007000

08002cf0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cfe:	d130      	bne.n	8002d62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d00:	4b23      	ldr	r3, [pc, #140]	; (8002d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d0c:	d038      	beq.n	8002d80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d0e:	4b20      	ldr	r3, [pc, #128]	; (8002d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d16:	4a1e      	ldr	r2, [pc, #120]	; (8002d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d1e:	4b1d      	ldr	r3, [pc, #116]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2232      	movs	r2, #50	; 0x32
 8002d24:	fb02 f303 	mul.w	r3, r2, r3
 8002d28:	4a1b      	ldr	r2, [pc, #108]	; (8002d98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2e:	0c9b      	lsrs	r3, r3, #18
 8002d30:	3301      	adds	r3, #1
 8002d32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d34:	e002      	b.n	8002d3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d3c:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d48:	d102      	bne.n	8002d50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1f2      	bne.n	8002d36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d50:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d5c:	d110      	bne.n	8002d80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e00f      	b.n	8002d82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d62:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d6e:	d007      	beq.n	8002d80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d70:	4b07      	ldr	r3, [pc, #28]	; (8002d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d78:	4a05      	ldr	r2, [pc, #20]	; (8002d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40007000 	.word	0x40007000
 8002d94:	20000000 	.word	0x20000000
 8002d98:	431bde83 	.word	0x431bde83

08002d9c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002daa:	6053      	str	r3, [r2, #4]
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40007000 	.word	0x40007000

08002dbc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002dc4:	f7fe ffc2 	bl	8001d4c <HAL_GetTick>
 8002dc8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e063      	b.n	8002e9c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10b      	bne.n	8002df8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7fe f90f 	bl	800100c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002dee:	f241 3188 	movw	r1, #5000	; 0x1388
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f858 	bl	8002ea8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	021a      	lsls	r2, r3, #8
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2120      	movs	r1, #32
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f850 	bl	8002ec4 <QSPI_WaitFlagStateUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002e28:	7afb      	ldrb	r3, [r7, #11]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d131      	bne.n	8002e92 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e38:	f023 0310 	bic.w	r3, r3, #16
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6852      	ldr	r2, [r2, #4]
 8002e40:	0611      	lsls	r1, r2, #24
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68d2      	ldr	r2, [r2, #12]
 8002e46:	4311      	orrs	r1, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	4b13      	ldr	r3, [pc, #76]	; (8002ea4 <HAL_QSPI_Init+0xe8>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6912      	ldr	r2, [r2, #16]
 8002e5e:	0411      	lsls	r1, r2, #16
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6952      	ldr	r2, [r2, #20]
 8002e64:	4311      	orrs	r1, r2
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6992      	ldr	r2, [r2, #24]
 8002e6a:	4311      	orrs	r1, r2
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	430b      	orrs	r3, r1
 8002e72:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002e9a:	7afb      	ldrb	r3, [r7, #11]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	ffe0f8fe 	.word	0xffe0f8fe

08002ea8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002ed4:	e01a      	b.n	8002f0c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002edc:	d016      	beq.n	8002f0c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ede:	f7fe ff35 	bl	8001d4c <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d302      	bcc.n	8002ef4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10b      	bne.n	8002f0c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2204      	movs	r2, #4
 8002ef8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f00:	f043 0201 	orr.w	r2, r3, #1
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e00e      	b.n	8002f2a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	4013      	ands	r3, r2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	bf14      	ite	ne
 8002f1a:	2301      	movne	r3, #1
 8002f1c:	2300      	moveq	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d1d6      	bne.n	8002ed6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e3d8      	b.n	80036f8 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f46:	4b97      	ldr	r3, [pc, #604]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
 8002f4e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f50:	4b94      	ldr	r3, [pc, #592]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 80e4 	beq.w	8003130 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d007      	beq.n	8002f7e <HAL_RCC_OscConfig+0x4a>
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	2b0c      	cmp	r3, #12
 8002f72:	f040 808b 	bne.w	800308c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	f040 8087 	bne.w	800308c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f7e:	4b89      	ldr	r3, [pc, #548]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d005      	beq.n	8002f96 <HAL_RCC_OscConfig+0x62>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e3b0      	b.n	80036f8 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1a      	ldr	r2, [r3, #32]
 8002f9a:	4b82      	ldr	r3, [pc, #520]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d004      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x7c>
 8002fa6:	4b7f      	ldr	r3, [pc, #508]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fae:	e005      	b.n	8002fbc <HAL_RCC_OscConfig+0x88>
 8002fb0:	4b7c      	ldr	r3, [pc, #496]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8002fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb6:	091b      	lsrs	r3, r3, #4
 8002fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d223      	bcs.n	8003008 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fd75 	bl	8003ab4 <RCC_SetFlashLatencyFromMSIRange>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e391      	b.n	80036f8 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fd4:	4b73      	ldr	r3, [pc, #460]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a72      	ldr	r2, [pc, #456]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8002fda:	f043 0308 	orr.w	r3, r3, #8
 8002fde:	6013      	str	r3, [r2, #0]
 8002fe0:	4b70      	ldr	r3, [pc, #448]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	496d      	ldr	r1, [pc, #436]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ff2:	4b6c      	ldr	r3, [pc, #432]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	021b      	lsls	r3, r3, #8
 8003000:	4968      	ldr	r1, [pc, #416]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8003002:	4313      	orrs	r3, r2
 8003004:	604b      	str	r3, [r1, #4]
 8003006:	e025      	b.n	8003054 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003008:	4b66      	ldr	r3, [pc, #408]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a65      	ldr	r2, [pc, #404]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 800300e:	f043 0308 	orr.w	r3, r3, #8
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	4b63      	ldr	r3, [pc, #396]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	4960      	ldr	r1, [pc, #384]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8003022:	4313      	orrs	r3, r2
 8003024:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003026:	4b5f      	ldr	r3, [pc, #380]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	495b      	ldr	r1, [pc, #364]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8003036:	4313      	orrs	r3, r2
 8003038:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d109      	bne.n	8003054 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fd35 	bl	8003ab4 <RCC_SetFlashLatencyFromMSIRange>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e351      	b.n	80036f8 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003054:	f000 fc38 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
 8003058:	4602      	mov	r2, r0
 800305a:	4b52      	ldr	r3, [pc, #328]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	091b      	lsrs	r3, r3, #4
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	4950      	ldr	r1, [pc, #320]	; (80031a8 <HAL_RCC_OscConfig+0x274>)
 8003066:	5ccb      	ldrb	r3, [r1, r3]
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	fa22 f303 	lsr.w	r3, r2, r3
 8003070:	4a4e      	ldr	r2, [pc, #312]	; (80031ac <HAL_RCC_OscConfig+0x278>)
 8003072:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003074:	4b4e      	ldr	r3, [pc, #312]	; (80031b0 <HAL_RCC_OscConfig+0x27c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f7fe f9ab 	bl	80013d4 <HAL_InitTick>
 800307e:	4603      	mov	r3, r0
 8003080:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003082:	7bfb      	ldrb	r3, [r7, #15]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d052      	beq.n	800312e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	e335      	b.n	80036f8 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d032      	beq.n	80030fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003094:	4b43      	ldr	r3, [pc, #268]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a42      	ldr	r2, [pc, #264]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030a0:	f7fe fe54 	bl	8001d4c <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030a8:	f7fe fe50 	bl	8001d4c <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e31e      	b.n	80036f8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030ba:	4b3a      	ldr	r3, [pc, #232]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030c6:	4b37      	ldr	r3, [pc, #220]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a36      	ldr	r2, [pc, #216]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 80030cc:	f043 0308 	orr.w	r3, r3, #8
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	4b34      	ldr	r3, [pc, #208]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	4931      	ldr	r1, [pc, #196]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030e4:	4b2f      	ldr	r3, [pc, #188]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	021b      	lsls	r3, r3, #8
 80030f2:	492c      	ldr	r1, [pc, #176]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]
 80030f8:	e01a      	b.n	8003130 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030fa:	4b2a      	ldr	r3, [pc, #168]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a29      	ldr	r2, [pc, #164]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8003100:	f023 0301 	bic.w	r3, r3, #1
 8003104:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003106:	f7fe fe21 	bl	8001d4c <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800310e:	f7fe fe1d 	bl	8001d4c <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e2eb      	b.n	80036f8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003120:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f0      	bne.n	800310e <HAL_RCC_OscConfig+0x1da>
 800312c:	e000      	b.n	8003130 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800312e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	d074      	beq.n	8003226 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	2b08      	cmp	r3, #8
 8003140:	d005      	beq.n	800314e <HAL_RCC_OscConfig+0x21a>
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	2b0c      	cmp	r3, #12
 8003146:	d10e      	bne.n	8003166 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2b03      	cmp	r3, #3
 800314c:	d10b      	bne.n	8003166 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314e:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d064      	beq.n	8003224 <HAL_RCC_OscConfig+0x2f0>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d160      	bne.n	8003224 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e2c8      	b.n	80036f8 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316e:	d106      	bne.n	800317e <HAL_RCC_OscConfig+0x24a>
 8003170:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a0b      	ldr	r2, [pc, #44]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8003176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	e026      	b.n	80031cc <HAL_RCC_OscConfig+0x298>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003186:	d115      	bne.n	80031b4 <HAL_RCC_OscConfig+0x280>
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a05      	ldr	r2, [pc, #20]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 800318e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	4b03      	ldr	r3, [pc, #12]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a02      	ldr	r2, [pc, #8]	; (80031a4 <HAL_RCC_OscConfig+0x270>)
 800319a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	e014      	b.n	80031cc <HAL_RCC_OscConfig+0x298>
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
 80031a8:	0800deec 	.word	0x0800deec
 80031ac:	20000000 	.word	0x20000000
 80031b0:	20000004 	.word	0x20000004
 80031b4:	4ba0      	ldr	r3, [pc, #640]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a9f      	ldr	r2, [pc, #636]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 80031ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	4b9d      	ldr	r3, [pc, #628]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a9c      	ldr	r2, [pc, #624]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 80031c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d013      	beq.n	80031fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d4:	f7fe fdba 	bl	8001d4c <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031dc:	f7fe fdb6 	bl	8001d4c <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b64      	cmp	r3, #100	; 0x64
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e284      	b.n	80036f8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ee:	4b92      	ldr	r3, [pc, #584]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0x2a8>
 80031fa:	e014      	b.n	8003226 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7fe fda6 	bl	8001d4c <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003204:	f7fe fda2 	bl	8001d4c <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	; 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e270      	b.n	80036f8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003216:	4b88      	ldr	r3, [pc, #544]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0x2d0>
 8003222:	e000      	b.n	8003226 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d060      	beq.n	80032f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	2b04      	cmp	r3, #4
 8003236:	d005      	beq.n	8003244 <HAL_RCC_OscConfig+0x310>
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	2b0c      	cmp	r3, #12
 800323c:	d119      	bne.n	8003272 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d116      	bne.n	8003272 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003244:	4b7c      	ldr	r3, [pc, #496]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324c:	2b00      	cmp	r3, #0
 800324e:	d005      	beq.n	800325c <HAL_RCC_OscConfig+0x328>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e24d      	b.n	80036f8 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800325c:	4b76      	ldr	r3, [pc, #472]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	061b      	lsls	r3, r3, #24
 800326a:	4973      	ldr	r1, [pc, #460]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 800326c:	4313      	orrs	r3, r2
 800326e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003270:	e040      	b.n	80032f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d023      	beq.n	80032c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800327a:	4b6f      	ldr	r3, [pc, #444]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a6e      	ldr	r2, [pc, #440]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 8003280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003286:	f7fe fd61 	bl	8001d4c <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800328e:	f7fe fd5d 	bl	8001d4c <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e22b      	b.n	80036f8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032a0:	4b65      	ldr	r3, [pc, #404]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0f0      	beq.n	800328e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ac:	4b62      	ldr	r3, [pc, #392]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	061b      	lsls	r3, r3, #24
 80032ba:	495f      	ldr	r1, [pc, #380]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	604b      	str	r3, [r1, #4]
 80032c0:	e018      	b.n	80032f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032c2:	4b5d      	ldr	r3, [pc, #372]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a5c      	ldr	r2, [pc, #368]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 80032c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ce:	f7fe fd3d 	bl	8001d4c <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d6:	f7fe fd39 	bl	8001d4c <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e207      	b.n	80036f8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032e8:	4b53      	ldr	r3, [pc, #332]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f0      	bne.n	80032d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d03c      	beq.n	800337a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01c      	beq.n	8003342 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003308:	4b4b      	ldr	r3, [pc, #300]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 800330a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800330e:	4a4a      	ldr	r2, [pc, #296]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003318:	f7fe fd18 	bl	8001d4c <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003320:	f7fe fd14 	bl	8001d4c <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e1e2      	b.n	80036f8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003332:	4b41      	ldr	r3, [pc, #260]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 8003334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0ef      	beq.n	8003320 <HAL_RCC_OscConfig+0x3ec>
 8003340:	e01b      	b.n	800337a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003342:	4b3d      	ldr	r3, [pc, #244]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 8003344:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003348:	4a3b      	ldr	r2, [pc, #236]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 800334a:	f023 0301 	bic.w	r3, r3, #1
 800334e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003352:	f7fe fcfb 	bl	8001d4c <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800335a:	f7fe fcf7 	bl	8001d4c <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e1c5      	b.n	80036f8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800336c:	4b32      	ldr	r3, [pc, #200]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 800336e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1ef      	bne.n	800335a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 80a6 	beq.w	80034d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003388:	2300      	movs	r3, #0
 800338a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800338c:	4b2a      	ldr	r3, [pc, #168]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 800338e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10d      	bne.n	80033b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003398:	4b27      	ldr	r3, [pc, #156]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 800339a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339c:	4a26      	ldr	r2, [pc, #152]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 800339e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a2:	6593      	str	r3, [r2, #88]	; 0x58
 80033a4:	4b24      	ldr	r3, [pc, #144]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 80033a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b0:	2301      	movs	r3, #1
 80033b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033b4:	4b21      	ldr	r3, [pc, #132]	; (800343c <HAL_RCC_OscConfig+0x508>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d118      	bne.n	80033f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033c0:	4b1e      	ldr	r3, [pc, #120]	; (800343c <HAL_RCC_OscConfig+0x508>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a1d      	ldr	r2, [pc, #116]	; (800343c <HAL_RCC_OscConfig+0x508>)
 80033c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033cc:	f7fe fcbe 	bl	8001d4c <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d4:	f7fe fcba 	bl	8001d4c <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e188      	b.n	80036f8 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033e6:	4b15      	ldr	r3, [pc, #84]	; (800343c <HAL_RCC_OscConfig+0x508>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d108      	bne.n	800340c <HAL_RCC_OscConfig+0x4d8>
 80033fa:	4b0f      	ldr	r3, [pc, #60]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 80033fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003400:	4a0d      	ldr	r2, [pc, #52]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800340a:	e029      	b.n	8003460 <HAL_RCC_OscConfig+0x52c>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b05      	cmp	r3, #5
 8003412:	d115      	bne.n	8003440 <HAL_RCC_OscConfig+0x50c>
 8003414:	4b08      	ldr	r3, [pc, #32]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341a:	4a07      	ldr	r2, [pc, #28]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 800341c:	f043 0304 	orr.w	r3, r3, #4
 8003420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003424:	4b04      	ldr	r3, [pc, #16]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342a:	4a03      	ldr	r2, [pc, #12]	; (8003438 <HAL_RCC_OscConfig+0x504>)
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003434:	e014      	b.n	8003460 <HAL_RCC_OscConfig+0x52c>
 8003436:	bf00      	nop
 8003438:	40021000 	.word	0x40021000
 800343c:	40007000 	.word	0x40007000
 8003440:	4b91      	ldr	r3, [pc, #580]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003446:	4a90      	ldr	r2, [pc, #576]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 8003448:	f023 0301 	bic.w	r3, r3, #1
 800344c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003450:	4b8d      	ldr	r3, [pc, #564]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 8003452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003456:	4a8c      	ldr	r2, [pc, #560]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 8003458:	f023 0304 	bic.w	r3, r3, #4
 800345c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d016      	beq.n	8003496 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003468:	f7fe fc70 	bl	8001d4c <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800346e:	e00a      	b.n	8003486 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003470:	f7fe fc6c 	bl	8001d4c <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f241 3288 	movw	r2, #5000	; 0x1388
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e138      	b.n	80036f8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003486:	4b80      	ldr	r3, [pc, #512]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 8003488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0ed      	beq.n	8003470 <HAL_RCC_OscConfig+0x53c>
 8003494:	e015      	b.n	80034c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003496:	f7fe fc59 	bl	8001d4c <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800349c:	e00a      	b.n	80034b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349e:	f7fe fc55 	bl	8001d4c <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e121      	b.n	80036f8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034b4:	4b74      	ldr	r3, [pc, #464]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 80034b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1ed      	bne.n	800349e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034c2:	7ffb      	ldrb	r3, [r7, #31]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d105      	bne.n	80034d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c8:	4b6f      	ldr	r3, [pc, #444]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 80034ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034cc:	4a6e      	ldr	r2, [pc, #440]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 80034ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 810c 	beq.w	80036f6 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	f040 80d4 	bne.w	8003690 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034e8:	4b67      	ldr	r3, [pc, #412]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f003 0203 	and.w	r2, r3, #3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d130      	bne.n	800355e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	3b01      	subs	r3, #1
 8003508:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800350a:	429a      	cmp	r2, r3
 800350c:	d127      	bne.n	800355e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003518:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800351a:	429a      	cmp	r2, r3
 800351c:	d11f      	bne.n	800355e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003528:	2a07      	cmp	r2, #7
 800352a:	bf14      	ite	ne
 800352c:	2201      	movne	r2, #1
 800352e:	2200      	moveq	r2, #0
 8003530:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003532:	4293      	cmp	r3, r2
 8003534:	d113      	bne.n	800355e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003540:	085b      	lsrs	r3, r3, #1
 8003542:	3b01      	subs	r3, #1
 8003544:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003546:	429a      	cmp	r2, r3
 8003548:	d109      	bne.n	800355e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	085b      	lsrs	r3, r3, #1
 8003556:	3b01      	subs	r3, #1
 8003558:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800355a:	429a      	cmp	r2, r3
 800355c:	d06e      	beq.n	800363c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	2b0c      	cmp	r3, #12
 8003562:	d069      	beq.n	8003638 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003564:	4b48      	ldr	r3, [pc, #288]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d105      	bne.n	800357c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003570:	4b45      	ldr	r3, [pc, #276]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e0bb      	b.n	80036f8 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003580:	4b41      	ldr	r3, [pc, #260]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a40      	ldr	r2, [pc, #256]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 8003586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800358a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800358c:	f7fe fbde 	bl	8001d4c <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003594:	f7fe fbda 	bl	8001d4c <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e0a8      	b.n	80036f8 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035a6:	4b38      	ldr	r3, [pc, #224]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f0      	bne.n	8003594 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035b2:	4b35      	ldr	r3, [pc, #212]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	4b35      	ldr	r3, [pc, #212]	; (800368c <HAL_RCC_OscConfig+0x758>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035c2:	3a01      	subs	r2, #1
 80035c4:	0112      	lsls	r2, r2, #4
 80035c6:	4311      	orrs	r1, r2
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035cc:	0212      	lsls	r2, r2, #8
 80035ce:	4311      	orrs	r1, r2
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035d4:	0852      	lsrs	r2, r2, #1
 80035d6:	3a01      	subs	r2, #1
 80035d8:	0552      	lsls	r2, r2, #21
 80035da:	4311      	orrs	r1, r2
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035e0:	0852      	lsrs	r2, r2, #1
 80035e2:	3a01      	subs	r2, #1
 80035e4:	0652      	lsls	r2, r2, #25
 80035e6:	4311      	orrs	r1, r2
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035ec:	0912      	lsrs	r2, r2, #4
 80035ee:	0452      	lsls	r2, r2, #17
 80035f0:	430a      	orrs	r2, r1
 80035f2:	4925      	ldr	r1, [pc, #148]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035f8:	4b23      	ldr	r3, [pc, #140]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a22      	ldr	r2, [pc, #136]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 80035fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003602:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003604:	4b20      	ldr	r3, [pc, #128]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4a1f      	ldr	r2, [pc, #124]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 800360a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800360e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003610:	f7fe fb9c 	bl	8001d4c <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003618:	f7fe fb98 	bl	8001d4c <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e066      	b.n	80036f8 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800362a:	4b17      	ldr	r3, [pc, #92]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f0      	beq.n	8003618 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003636:	e05e      	b.n	80036f6 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e05d      	b.n	80036f8 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800363c:	4b12      	ldr	r3, [pc, #72]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d156      	bne.n	80036f6 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003648:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a0e      	ldr	r2, [pc, #56]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 800364e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003652:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003654:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	4a0b      	ldr	r2, [pc, #44]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 800365a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800365e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003660:	f7fe fb74 	bl	8001d4c <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003668:	f7fe fb70 	bl	8001d4c <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e03e      	b.n	80036f8 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800367a:	4b03      	ldr	r3, [pc, #12]	; (8003688 <HAL_RCC_OscConfig+0x754>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f0      	beq.n	8003668 <HAL_RCC_OscConfig+0x734>
 8003686:	e036      	b.n	80036f6 <HAL_RCC_OscConfig+0x7c2>
 8003688:	40021000 	.word	0x40021000
 800368c:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	2b0c      	cmp	r3, #12
 8003694:	d02d      	beq.n	80036f2 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003696:	4b1a      	ldr	r3, [pc, #104]	; (8003700 <HAL_RCC_OscConfig+0x7cc>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a19      	ldr	r2, [pc, #100]	; (8003700 <HAL_RCC_OscConfig+0x7cc>)
 800369c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036a0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80036a2:	4b17      	ldr	r3, [pc, #92]	; (8003700 <HAL_RCC_OscConfig+0x7cc>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d105      	bne.n	80036ba <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80036ae:	4b14      	ldr	r3, [pc, #80]	; (8003700 <HAL_RCC_OscConfig+0x7cc>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	4a13      	ldr	r2, [pc, #76]	; (8003700 <HAL_RCC_OscConfig+0x7cc>)
 80036b4:	f023 0303 	bic.w	r3, r3, #3
 80036b8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036ba:	4b11      	ldr	r3, [pc, #68]	; (8003700 <HAL_RCC_OscConfig+0x7cc>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	4a10      	ldr	r2, [pc, #64]	; (8003700 <HAL_RCC_OscConfig+0x7cc>)
 80036c0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80036c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ca:	f7fe fb3f 	bl	8001d4c <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d2:	f7fe fb3b 	bl	8001d4c <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e009      	b.n	80036f8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036e4:	4b06      	ldr	r3, [pc, #24]	; (8003700 <HAL_RCC_OscConfig+0x7cc>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f0      	bne.n	80036d2 <HAL_RCC_OscConfig+0x79e>
 80036f0:	e001      	b.n	80036f6 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3720      	adds	r7, #32
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40021000 	.word	0x40021000

08003704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e0c8      	b.n	80038aa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003718:	4b66      	ldr	r3, [pc, #408]	; (80038b4 <HAL_RCC_ClockConfig+0x1b0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d910      	bls.n	8003748 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003726:	4b63      	ldr	r3, [pc, #396]	; (80038b4 <HAL_RCC_ClockConfig+0x1b0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f023 0207 	bic.w	r2, r3, #7
 800372e:	4961      	ldr	r1, [pc, #388]	; (80038b4 <HAL_RCC_ClockConfig+0x1b0>)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	4313      	orrs	r3, r2
 8003734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003736:	4b5f      	ldr	r3, [pc, #380]	; (80038b4 <HAL_RCC_ClockConfig+0x1b0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	429a      	cmp	r2, r3
 8003742:	d001      	beq.n	8003748 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e0b0      	b.n	80038aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d04c      	beq.n	80037ee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b03      	cmp	r3, #3
 800375a:	d107      	bne.n	800376c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800375c:	4b56      	ldr	r3, [pc, #344]	; (80038b8 <HAL_RCC_ClockConfig+0x1b4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d121      	bne.n	80037ac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e09e      	b.n	80038aa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d107      	bne.n	8003784 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003774:	4b50      	ldr	r3, [pc, #320]	; (80038b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d115      	bne.n	80037ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e092      	b.n	80038aa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d107      	bne.n	800379c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800378c:	4b4a      	ldr	r3, [pc, #296]	; (80038b8 <HAL_RCC_ClockConfig+0x1b4>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d109      	bne.n	80037ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e086      	b.n	80038aa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800379c:	4b46      	ldr	r3, [pc, #280]	; (80038b8 <HAL_RCC_ClockConfig+0x1b4>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e07e      	b.n	80038aa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037ac:	4b42      	ldr	r3, [pc, #264]	; (80038b8 <HAL_RCC_ClockConfig+0x1b4>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f023 0203 	bic.w	r2, r3, #3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	493f      	ldr	r1, [pc, #252]	; (80038b8 <HAL_RCC_ClockConfig+0x1b4>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037be:	f7fe fac5 	bl	8001d4c <HAL_GetTick>
 80037c2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c4:	e00a      	b.n	80037dc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c6:	f7fe fac1 	bl	8001d4c <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e066      	b.n	80038aa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037dc:	4b36      	ldr	r3, [pc, #216]	; (80038b8 <HAL_RCC_ClockConfig+0x1b4>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 020c 	and.w	r2, r3, #12
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d1eb      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037fa:	4b2f      	ldr	r3, [pc, #188]	; (80038b8 <HAL_RCC_ClockConfig+0x1b4>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	492c      	ldr	r1, [pc, #176]	; (80038b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003808:	4313      	orrs	r3, r2
 800380a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800380c:	4b29      	ldr	r3, [pc, #164]	; (80038b4 <HAL_RCC_ClockConfig+0x1b0>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d210      	bcs.n	800383c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b26      	ldr	r3, [pc, #152]	; (80038b4 <HAL_RCC_ClockConfig+0x1b0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f023 0207 	bic.w	r2, r3, #7
 8003822:	4924      	ldr	r1, [pc, #144]	; (80038b4 <HAL_RCC_ClockConfig+0x1b0>)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	4313      	orrs	r3, r2
 8003828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800382a:	4b22      	ldr	r3, [pc, #136]	; (80038b4 <HAL_RCC_ClockConfig+0x1b0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d001      	beq.n	800383c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e036      	b.n	80038aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003848:	4b1b      	ldr	r3, [pc, #108]	; (80038b8 <HAL_RCC_ClockConfig+0x1b4>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	4918      	ldr	r1, [pc, #96]	; (80038b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003856:	4313      	orrs	r3, r2
 8003858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d009      	beq.n	800387a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003866:	4b14      	ldr	r3, [pc, #80]	; (80038b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	4910      	ldr	r1, [pc, #64]	; (80038b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003876:	4313      	orrs	r3, r2
 8003878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800387a:	f000 f825 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
 800387e:	4602      	mov	r2, r0
 8003880:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	490c      	ldr	r1, [pc, #48]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 800388c:	5ccb      	ldrb	r3, [r1, r3]
 800388e:	f003 031f 	and.w	r3, r3, #31
 8003892:	fa22 f303 	lsr.w	r3, r2, r3
 8003896:	4a0a      	ldr	r2, [pc, #40]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800389a:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <HAL_RCC_ClockConfig+0x1c0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fd fd98 	bl	80013d4 <HAL_InitTick>
 80038a4:	4603      	mov	r3, r0
 80038a6:	72fb      	strb	r3, [r7, #11]

  return status;
 80038a8:	7afb      	ldrb	r3, [r7, #11]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40022000 	.word	0x40022000
 80038b8:	40021000 	.word	0x40021000
 80038bc:	0800deec 	.word	0x0800deec
 80038c0:	20000000 	.word	0x20000000
 80038c4:	20000004 	.word	0x20000004

080038c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b089      	sub	sp, #36	; 0x24
 80038cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	61fb      	str	r3, [r7, #28]
 80038d2:	2300      	movs	r3, #0
 80038d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038d6:	4b3e      	ldr	r3, [pc, #248]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 030c 	and.w	r3, r3, #12
 80038de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038e0:	4b3b      	ldr	r3, [pc, #236]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <HAL_RCC_GetSysClockFreq+0x34>
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	2b0c      	cmp	r3, #12
 80038f4:	d121      	bne.n	800393a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d11e      	bne.n	800393a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038fc:	4b34      	ldr	r3, [pc, #208]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b00      	cmp	r3, #0
 8003906:	d107      	bne.n	8003918 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003908:	4b31      	ldr	r3, [pc, #196]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800390a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800390e:	0a1b      	lsrs	r3, r3, #8
 8003910:	f003 030f 	and.w	r3, r3, #15
 8003914:	61fb      	str	r3, [r7, #28]
 8003916:	e005      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003918:	4b2d      	ldr	r3, [pc, #180]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	091b      	lsrs	r3, r3, #4
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003924:	4a2b      	ldr	r2, [pc, #172]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800392c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10d      	bne.n	8003950 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003938:	e00a      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	2b04      	cmp	r3, #4
 800393e:	d102      	bne.n	8003946 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003940:	4b25      	ldr	r3, [pc, #148]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003942:	61bb      	str	r3, [r7, #24]
 8003944:	e004      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	2b08      	cmp	r3, #8
 800394a:	d101      	bne.n	8003950 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800394c:	4b23      	ldr	r3, [pc, #140]	; (80039dc <HAL_RCC_GetSysClockFreq+0x114>)
 800394e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	2b0c      	cmp	r3, #12
 8003954:	d134      	bne.n	80039c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003956:	4b1e      	ldr	r3, [pc, #120]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2b02      	cmp	r3, #2
 8003964:	d003      	beq.n	800396e <HAL_RCC_GetSysClockFreq+0xa6>
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2b03      	cmp	r3, #3
 800396a:	d003      	beq.n	8003974 <HAL_RCC_GetSysClockFreq+0xac>
 800396c:	e005      	b.n	800397a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800396e:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003970:	617b      	str	r3, [r7, #20]
      break;
 8003972:	e005      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003974:	4b19      	ldr	r3, [pc, #100]	; (80039dc <HAL_RCC_GetSysClockFreq+0x114>)
 8003976:	617b      	str	r3, [r7, #20]
      break;
 8003978:	e002      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	617b      	str	r3, [r7, #20]
      break;
 800397e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003980:	4b13      	ldr	r3, [pc, #76]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	091b      	lsrs	r3, r3, #4
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	3301      	adds	r3, #1
 800398c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800398e:	4b10      	ldr	r3, [pc, #64]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	0a1b      	lsrs	r3, r3, #8
 8003994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	fb03 f202 	mul.w	r2, r3, r2
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039a6:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	0e5b      	lsrs	r3, r3, #25
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	3301      	adds	r3, #1
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80039be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039c0:	69bb      	ldr	r3, [r7, #24]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3724      	adds	r7, #36	; 0x24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40021000 	.word	0x40021000
 80039d4:	0800df04 	.word	0x0800df04
 80039d8:	00f42400 	.word	0x00f42400
 80039dc:	007a1200 	.word	0x007a1200

080039e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039e4:	4b03      	ldr	r3, [pc, #12]	; (80039f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80039e6:	681b      	ldr	r3, [r3, #0]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	20000000 	.word	0x20000000

080039f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039fc:	f7ff fff0 	bl	80039e0 <HAL_RCC_GetHCLKFreq>
 8003a00:	4602      	mov	r2, r0
 8003a02:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	0a1b      	lsrs	r3, r3, #8
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	4904      	ldr	r1, [pc, #16]	; (8003a20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a0e:	5ccb      	ldrb	r3, [r1, r3]
 8003a10:	f003 031f 	and.w	r3, r3, #31
 8003a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	0800defc 	.word	0x0800defc

08003a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a28:	f7ff ffda 	bl	80039e0 <HAL_RCC_GetHCLKFreq>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	0adb      	lsrs	r3, r3, #11
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	4904      	ldr	r1, [pc, #16]	; (8003a4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a3a:	5ccb      	ldrb	r3, [r1, r3]
 8003a3c:	f003 031f 	and.w	r3, r3, #31
 8003a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	0800defc 	.word	0x0800defc

08003a50 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	220f      	movs	r2, #15
 8003a5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003a60:	4b12      	ldr	r3, [pc, #72]	; (8003aac <HAL_RCC_GetClockConfig+0x5c>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 0203 	and.w	r2, r3, #3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003a6c:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <HAL_RCC_GetClockConfig+0x5c>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003a78:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <HAL_RCC_GetClockConfig+0x5c>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003a84:	4b09      	ldr	r3, [pc, #36]	; (8003aac <HAL_RCC_GetClockConfig+0x5c>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	08db      	lsrs	r3, r3, #3
 8003a8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003a92:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <HAL_RCC_GetClockConfig+0x60>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0207 	and.w	r2, r3, #7
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	601a      	str	r2, [r3, #0]
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	40022000 	.word	0x40022000

08003ab4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003abc:	2300      	movs	r3, #0
 8003abe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ac0:	4b2a      	ldr	r3, [pc, #168]	; (8003b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003acc:	f7ff f902 	bl	8002cd4 <HAL_PWREx_GetVoltageRange>
 8003ad0:	6178      	str	r0, [r7, #20]
 8003ad2:	e014      	b.n	8003afe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ad4:	4b25      	ldr	r3, [pc, #148]	; (8003b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad8:	4a24      	ldr	r2, [pc, #144]	; (8003b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ade:	6593      	str	r3, [r2, #88]	; 0x58
 8003ae0:	4b22      	ldr	r3, [pc, #136]	; (8003b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003aec:	f7ff f8f2 	bl	8002cd4 <HAL_PWREx_GetVoltageRange>
 8003af0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003af2:	4b1e      	ldr	r3, [pc, #120]	; (8003b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af6:	4a1d      	ldr	r2, [pc, #116]	; (8003b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003af8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003afc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b04:	d10b      	bne.n	8003b1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b80      	cmp	r3, #128	; 0x80
 8003b0a:	d919      	bls.n	8003b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2ba0      	cmp	r3, #160	; 0xa0
 8003b10:	d902      	bls.n	8003b18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b12:	2302      	movs	r3, #2
 8003b14:	613b      	str	r3, [r7, #16]
 8003b16:	e013      	b.n	8003b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b18:	2301      	movs	r3, #1
 8003b1a:	613b      	str	r3, [r7, #16]
 8003b1c:	e010      	b.n	8003b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b80      	cmp	r3, #128	; 0x80
 8003b22:	d902      	bls.n	8003b2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b24:	2303      	movs	r3, #3
 8003b26:	613b      	str	r3, [r7, #16]
 8003b28:	e00a      	b.n	8003b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b80      	cmp	r3, #128	; 0x80
 8003b2e:	d102      	bne.n	8003b36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b30:	2302      	movs	r3, #2
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	e004      	b.n	8003b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b70      	cmp	r3, #112	; 0x70
 8003b3a:	d101      	bne.n	8003b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b40:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f023 0207 	bic.w	r2, r3, #7
 8003b48:	4909      	ldr	r1, [pc, #36]	; (8003b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b50:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d001      	beq.n	8003b62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	40022000 	.word	0x40022000

08003b74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b80:	2300      	movs	r3, #0
 8003b82:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d041      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b98:	d02a      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b9e:	d824      	bhi.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ba0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ba4:	d008      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ba6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003baa:	d81e      	bhi.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003bb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bb4:	d010      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bb6:	e018      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bb8:	4b86      	ldr	r3, [pc, #536]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	4a85      	ldr	r2, [pc, #532]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bc4:	e015      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 facb 	bl	8004168 <RCCEx_PLLSAI1_Config>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bd6:	e00c      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3320      	adds	r3, #32
 8003bdc:	2100      	movs	r1, #0
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fbb6 	bl	8004350 <RCCEx_PLLSAI2_Config>
 8003be4:	4603      	mov	r3, r0
 8003be6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003be8:	e003      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	74fb      	strb	r3, [r7, #19]
      break;
 8003bee:	e000      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003bf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bf2:	7cfb      	ldrb	r3, [r7, #19]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10b      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bf8:	4b76      	ldr	r3, [pc, #472]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c06:	4973      	ldr	r1, [pc, #460]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c0e:	e001      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c10:	7cfb      	ldrb	r3, [r7, #19]
 8003c12:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d041      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c28:	d02a      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c2e:	d824      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c34:	d008      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c3a:	d81e      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00a      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c44:	d010      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c46:	e018      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c48:	4b62      	ldr	r3, [pc, #392]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	4a61      	ldr	r2, [pc, #388]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c52:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c54:	e015      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 fa83 	bl	8004168 <RCCEx_PLLSAI1_Config>
 8003c62:	4603      	mov	r3, r0
 8003c64:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c66:	e00c      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3320      	adds	r3, #32
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fb6e 	bl	8004350 <RCCEx_PLLSAI2_Config>
 8003c74:	4603      	mov	r3, r0
 8003c76:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c78:	e003      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	74fb      	strb	r3, [r7, #19]
      break;
 8003c7e:	e000      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c82:	7cfb      	ldrb	r3, [r7, #19]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10b      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c88:	4b52      	ldr	r3, [pc, #328]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c96:	494f      	ldr	r1, [pc, #316]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c9e:	e001      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca0:	7cfb      	ldrb	r3, [r7, #19]
 8003ca2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 80a0 	beq.w	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cb6:	4b47      	ldr	r3, [pc, #284]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00d      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ccc:	4b41      	ldr	r3, [pc, #260]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd0:	4a40      	ldr	r2, [pc, #256]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd6:	6593      	str	r3, [r2, #88]	; 0x58
 8003cd8:	4b3e      	ldr	r3, [pc, #248]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ce8:	4b3b      	ldr	r3, [pc, #236]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a3a      	ldr	r2, [pc, #232]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cf4:	f7fe f82a 	bl	8001d4c <HAL_GetTick>
 8003cf8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cfa:	e009      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cfc:	f7fe f826 	bl	8001d4c <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d902      	bls.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	74fb      	strb	r3, [r7, #19]
        break;
 8003d0e:	e005      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d10:	4b31      	ldr	r3, [pc, #196]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0ef      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d1c:	7cfb      	ldrb	r3, [r7, #19]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d15c      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d22:	4b2c      	ldr	r3, [pc, #176]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d2c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d01f      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d019      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d40:	4b24      	ldr	r3, [pc, #144]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d4c:	4b21      	ldr	r3, [pc, #132]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d52:	4a20      	ldr	r2, [pc, #128]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d5c:	4b1d      	ldr	r3, [pc, #116]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d62:	4a1c      	ldr	r2, [pc, #112]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d6c:	4a19      	ldr	r2, [pc, #100]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d016      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7e:	f7fd ffe5 	bl	8001d4c <HAL_GetTick>
 8003d82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d84:	e00b      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d86:	f7fd ffe1 	bl	8001d4c <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d902      	bls.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	74fb      	strb	r3, [r7, #19]
            break;
 8003d9c:	e006      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d9e:	4b0d      	ldr	r3, [pc, #52]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0ec      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003dac:	7cfb      	ldrb	r3, [r7, #19]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10c      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003db2:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc2:	4904      	ldr	r1, [pc, #16]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003dca:	e009      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dcc:	7cfb      	ldrb	r3, [r7, #19]
 8003dce:	74bb      	strb	r3, [r7, #18]
 8003dd0:	e006      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003dd2:	bf00      	nop
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003de0:	7c7b      	ldrb	r3, [r7, #17]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d105      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003de6:	4b9e      	ldr	r3, [pc, #632]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dea:	4a9d      	ldr	r2, [pc, #628]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003df0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dfe:	4b98      	ldr	r3, [pc, #608]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e04:	f023 0203 	bic.w	r2, r3, #3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0c:	4994      	ldr	r1, [pc, #592]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00a      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e20:	4b8f      	ldr	r3, [pc, #572]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e26:	f023 020c 	bic.w	r2, r3, #12
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2e:	498c      	ldr	r1, [pc, #560]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e42:	4b87      	ldr	r3, [pc, #540]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	4983      	ldr	r1, [pc, #524]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0308 	and.w	r3, r3, #8
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e64:	4b7e      	ldr	r3, [pc, #504]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	497b      	ldr	r1, [pc, #492]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0310 	and.w	r3, r3, #16
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e86:	4b76      	ldr	r3, [pc, #472]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e94:	4972      	ldr	r1, [pc, #456]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0320 	and.w	r3, r3, #32
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00a      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ea8:	4b6d      	ldr	r3, [pc, #436]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb6:	496a      	ldr	r1, [pc, #424]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eca:	4b65      	ldr	r3, [pc, #404]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed8:	4961      	ldr	r1, [pc, #388]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003eec:	4b5c      	ldr	r3, [pc, #368]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003efa:	4959      	ldr	r1, [pc, #356]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f0e:	4b54      	ldr	r3, [pc, #336]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1c:	4950      	ldr	r1, [pc, #320]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f30:	4b4b      	ldr	r3, [pc, #300]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3e:	4948      	ldr	r1, [pc, #288]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f52:	4b43      	ldr	r3, [pc, #268]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f60:	493f      	ldr	r1, [pc, #252]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d028      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f74:	4b3a      	ldr	r3, [pc, #232]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f82:	4937      	ldr	r1, [pc, #220]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f92:	d106      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f94:	4b32      	ldr	r3, [pc, #200]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	4a31      	ldr	r2, [pc, #196]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f9e:	60d3      	str	r3, [r2, #12]
 8003fa0:	e011      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fa6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003faa:	d10c      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 f8d8 	bl	8004168 <RCCEx_PLLSAI1_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fbc:	7cfb      	ldrb	r3, [r7, #19]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003fc2:	7cfb      	ldrb	r3, [r7, #19]
 8003fc4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d028      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fd2:	4b23      	ldr	r3, [pc, #140]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe0:	491f      	ldr	r1, [pc, #124]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ff0:	d106      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ff2:	4b1b      	ldr	r3, [pc, #108]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	4a1a      	ldr	r2, [pc, #104]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ffc:	60d3      	str	r3, [r2, #12]
 8003ffe:	e011      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004004:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004008:	d10c      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3304      	adds	r3, #4
 800400e:	2101      	movs	r1, #1
 8004010:	4618      	mov	r0, r3
 8004012:	f000 f8a9 	bl	8004168 <RCCEx_PLLSAI1_Config>
 8004016:	4603      	mov	r3, r0
 8004018:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800401a:	7cfb      	ldrb	r3, [r7, #19]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004020:	7cfb      	ldrb	r3, [r7, #19]
 8004022:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d02b      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004030:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004036:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800403e:	4908      	ldr	r1, [pc, #32]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800404a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800404e:	d109      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004050:	4b03      	ldr	r3, [pc, #12]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4a02      	ldr	r2, [pc, #8]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800405a:	60d3      	str	r3, [r2, #12]
 800405c:	e014      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800405e:	bf00      	nop
 8004060:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004068:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800406c:	d10c      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3304      	adds	r3, #4
 8004072:	2101      	movs	r1, #1
 8004074:	4618      	mov	r0, r3
 8004076:	f000 f877 	bl	8004168 <RCCEx_PLLSAI1_Config>
 800407a:	4603      	mov	r3, r0
 800407c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800407e:	7cfb      	ldrb	r3, [r7, #19]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004084:	7cfb      	ldrb	r3, [r7, #19]
 8004086:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d02f      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004094:	4b2b      	ldr	r3, [pc, #172]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040a2:	4928      	ldr	r1, [pc, #160]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040b2:	d10d      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3304      	adds	r3, #4
 80040b8:	2102      	movs	r1, #2
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 f854 	bl	8004168 <RCCEx_PLLSAI1_Config>
 80040c0:	4603      	mov	r3, r0
 80040c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040c4:	7cfb      	ldrb	r3, [r7, #19]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d014      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040ca:	7cfb      	ldrb	r3, [r7, #19]
 80040cc:	74bb      	strb	r3, [r7, #18]
 80040ce:	e011      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040d8:	d10c      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	3320      	adds	r3, #32
 80040de:	2102      	movs	r1, #2
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 f935 	bl	8004350 <RCCEx_PLLSAI2_Config>
 80040e6:	4603      	mov	r3, r0
 80040e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040ea:	7cfb      	ldrb	r3, [r7, #19]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040f0:	7cfb      	ldrb	r3, [r7, #19]
 80040f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00a      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004100:	4b10      	ldr	r3, [pc, #64]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004106:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800410e:	490d      	ldr	r1, [pc, #52]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004110:	4313      	orrs	r3, r2
 8004112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00b      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004122:	4b08      	ldr	r3, [pc, #32]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004128:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004132:	4904      	ldr	r1, [pc, #16]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800413a:	7cbb      	ldrb	r3, [r7, #18]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40021000 	.word	0x40021000

08004148 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800414c:	4b05      	ldr	r3, [pc, #20]	; (8004164 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a04      	ldr	r2, [pc, #16]	; (8004164 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004152:	f043 0304 	orr.w	r3, r3, #4
 8004156:	6013      	str	r3, [r2, #0]
}
 8004158:	bf00      	nop
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40021000 	.word	0x40021000

08004168 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004172:	2300      	movs	r3, #0
 8004174:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004176:	4b75      	ldr	r3, [pc, #468]	; (800434c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d018      	beq.n	80041b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004182:	4b72      	ldr	r3, [pc, #456]	; (800434c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f003 0203 	and.w	r2, r3, #3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d10d      	bne.n	80041ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
       ||
 8004196:	2b00      	cmp	r3, #0
 8004198:	d009      	beq.n	80041ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800419a:	4b6c      	ldr	r3, [pc, #432]	; (800434c <RCCEx_PLLSAI1_Config+0x1e4>)
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	091b      	lsrs	r3, r3, #4
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
       ||
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d047      	beq.n	800423e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]
 80041b2:	e044      	b.n	800423e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2b03      	cmp	r3, #3
 80041ba:	d018      	beq.n	80041ee <RCCEx_PLLSAI1_Config+0x86>
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d825      	bhi.n	800420c <RCCEx_PLLSAI1_Config+0xa4>
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d002      	beq.n	80041ca <RCCEx_PLLSAI1_Config+0x62>
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d009      	beq.n	80041dc <RCCEx_PLLSAI1_Config+0x74>
 80041c8:	e020      	b.n	800420c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041ca:	4b60      	ldr	r3, [pc, #384]	; (800434c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d11d      	bne.n	8004212 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041da:	e01a      	b.n	8004212 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041dc:	4b5b      	ldr	r3, [pc, #364]	; (800434c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d116      	bne.n	8004216 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ec:	e013      	b.n	8004216 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041ee:	4b57      	ldr	r3, [pc, #348]	; (800434c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10f      	bne.n	800421a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041fa:	4b54      	ldr	r3, [pc, #336]	; (800434c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d109      	bne.n	800421a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800420a:	e006      	b.n	800421a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	73fb      	strb	r3, [r7, #15]
      break;
 8004210:	e004      	b.n	800421c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004212:	bf00      	nop
 8004214:	e002      	b.n	800421c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004216:	bf00      	nop
 8004218:	e000      	b.n	800421c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800421a:	bf00      	nop
    }

    if(status == HAL_OK)
 800421c:	7bfb      	ldrb	r3, [r7, #15]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10d      	bne.n	800423e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004222:	4b4a      	ldr	r3, [pc, #296]	; (800434c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6819      	ldr	r1, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	3b01      	subs	r3, #1
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	430b      	orrs	r3, r1
 8004238:	4944      	ldr	r1, [pc, #272]	; (800434c <RCCEx_PLLSAI1_Config+0x1e4>)
 800423a:	4313      	orrs	r3, r2
 800423c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d17d      	bne.n	8004340 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004244:	4b41      	ldr	r3, [pc, #260]	; (800434c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a40      	ldr	r2, [pc, #256]	; (800434c <RCCEx_PLLSAI1_Config+0x1e4>)
 800424a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800424e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004250:	f7fd fd7c 	bl	8001d4c <HAL_GetTick>
 8004254:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004256:	e009      	b.n	800426c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004258:	f7fd fd78 	bl	8001d4c <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d902      	bls.n	800426c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	73fb      	strb	r3, [r7, #15]
        break;
 800426a:	e005      	b.n	8004278 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800426c:	4b37      	ldr	r3, [pc, #220]	; (800434c <RCCEx_PLLSAI1_Config+0x1e4>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1ef      	bne.n	8004258 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d160      	bne.n	8004340 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d111      	bne.n	80042a8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004284:	4b31      	ldr	r3, [pc, #196]	; (800434c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800428c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6892      	ldr	r2, [r2, #8]
 8004294:	0211      	lsls	r1, r2, #8
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	68d2      	ldr	r2, [r2, #12]
 800429a:	0912      	lsrs	r2, r2, #4
 800429c:	0452      	lsls	r2, r2, #17
 800429e:	430a      	orrs	r2, r1
 80042a0:	492a      	ldr	r1, [pc, #168]	; (800434c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	610b      	str	r3, [r1, #16]
 80042a6:	e027      	b.n	80042f8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d112      	bne.n	80042d4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042ae:	4b27      	ldr	r3, [pc, #156]	; (800434c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80042b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6892      	ldr	r2, [r2, #8]
 80042be:	0211      	lsls	r1, r2, #8
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6912      	ldr	r2, [r2, #16]
 80042c4:	0852      	lsrs	r2, r2, #1
 80042c6:	3a01      	subs	r2, #1
 80042c8:	0552      	lsls	r2, r2, #21
 80042ca:	430a      	orrs	r2, r1
 80042cc:	491f      	ldr	r1, [pc, #124]	; (800434c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	610b      	str	r3, [r1, #16]
 80042d2:	e011      	b.n	80042f8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042d4:	4b1d      	ldr	r3, [pc, #116]	; (800434c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6892      	ldr	r2, [r2, #8]
 80042e4:	0211      	lsls	r1, r2, #8
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6952      	ldr	r2, [r2, #20]
 80042ea:	0852      	lsrs	r2, r2, #1
 80042ec:	3a01      	subs	r2, #1
 80042ee:	0652      	lsls	r2, r2, #25
 80042f0:	430a      	orrs	r2, r1
 80042f2:	4916      	ldr	r1, [pc, #88]	; (800434c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042f8:	4b14      	ldr	r3, [pc, #80]	; (800434c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a13      	ldr	r2, [pc, #76]	; (800434c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004302:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004304:	f7fd fd22 	bl	8001d4c <HAL_GetTick>
 8004308:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800430a:	e009      	b.n	8004320 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800430c:	f7fd fd1e 	bl	8001d4c <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d902      	bls.n	8004320 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	73fb      	strb	r3, [r7, #15]
          break;
 800431e:	e005      	b.n	800432c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004320:	4b0a      	ldr	r3, [pc, #40]	; (800434c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0ef      	beq.n	800430c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d106      	bne.n	8004340 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004332:	4b06      	ldr	r3, [pc, #24]	; (800434c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004334:	691a      	ldr	r2, [r3, #16]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	4904      	ldr	r1, [pc, #16]	; (800434c <RCCEx_PLLSAI1_Config+0x1e4>)
 800433c:	4313      	orrs	r3, r2
 800433e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004340:	7bfb      	ldrb	r3, [r7, #15]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40021000 	.word	0x40021000

08004350 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800435e:	4b6a      	ldr	r3, [pc, #424]	; (8004508 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d018      	beq.n	800439c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800436a:	4b67      	ldr	r3, [pc, #412]	; (8004508 <RCCEx_PLLSAI2_Config+0x1b8>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f003 0203 	and.w	r2, r3, #3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d10d      	bne.n	8004396 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
       ||
 800437e:	2b00      	cmp	r3, #0
 8004380:	d009      	beq.n	8004396 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004382:	4b61      	ldr	r3, [pc, #388]	; (8004508 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	091b      	lsrs	r3, r3, #4
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
       ||
 8004392:	429a      	cmp	r2, r3
 8004394:	d047      	beq.n	8004426 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	73fb      	strb	r3, [r7, #15]
 800439a:	e044      	b.n	8004426 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d018      	beq.n	80043d6 <RCCEx_PLLSAI2_Config+0x86>
 80043a4:	2b03      	cmp	r3, #3
 80043a6:	d825      	bhi.n	80043f4 <RCCEx_PLLSAI2_Config+0xa4>
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d002      	beq.n	80043b2 <RCCEx_PLLSAI2_Config+0x62>
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d009      	beq.n	80043c4 <RCCEx_PLLSAI2_Config+0x74>
 80043b0:	e020      	b.n	80043f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043b2:	4b55      	ldr	r3, [pc, #340]	; (8004508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d11d      	bne.n	80043fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c2:	e01a      	b.n	80043fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043c4:	4b50      	ldr	r3, [pc, #320]	; (8004508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d116      	bne.n	80043fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d4:	e013      	b.n	80043fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043d6:	4b4c      	ldr	r3, [pc, #304]	; (8004508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10f      	bne.n	8004402 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043e2:	4b49      	ldr	r3, [pc, #292]	; (8004508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043f2:	e006      	b.n	8004402 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	73fb      	strb	r3, [r7, #15]
      break;
 80043f8:	e004      	b.n	8004404 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043fa:	bf00      	nop
 80043fc:	e002      	b.n	8004404 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043fe:	bf00      	nop
 8004400:	e000      	b.n	8004404 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004402:	bf00      	nop
    }

    if(status == HAL_OK)
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10d      	bne.n	8004426 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800440a:	4b3f      	ldr	r3, [pc, #252]	; (8004508 <RCCEx_PLLSAI2_Config+0x1b8>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6819      	ldr	r1, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	3b01      	subs	r3, #1
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	430b      	orrs	r3, r1
 8004420:	4939      	ldr	r1, [pc, #228]	; (8004508 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004422:	4313      	orrs	r3, r2
 8004424:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d167      	bne.n	80044fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800442c:	4b36      	ldr	r3, [pc, #216]	; (8004508 <RCCEx_PLLSAI2_Config+0x1b8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a35      	ldr	r2, [pc, #212]	; (8004508 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004438:	f7fd fc88 	bl	8001d4c <HAL_GetTick>
 800443c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800443e:	e009      	b.n	8004454 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004440:	f7fd fc84 	bl	8001d4c <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d902      	bls.n	8004454 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	73fb      	strb	r3, [r7, #15]
        break;
 8004452:	e005      	b.n	8004460 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004454:	4b2c      	ldr	r3, [pc, #176]	; (8004508 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1ef      	bne.n	8004440 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004460:	7bfb      	ldrb	r3, [r7, #15]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d14a      	bne.n	80044fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d111      	bne.n	8004490 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800446c:	4b26      	ldr	r3, [pc, #152]	; (8004508 <RCCEx_PLLSAI2_Config+0x1b8>)
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6892      	ldr	r2, [r2, #8]
 800447c:	0211      	lsls	r1, r2, #8
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	68d2      	ldr	r2, [r2, #12]
 8004482:	0912      	lsrs	r2, r2, #4
 8004484:	0452      	lsls	r2, r2, #17
 8004486:	430a      	orrs	r2, r1
 8004488:	491f      	ldr	r1, [pc, #124]	; (8004508 <RCCEx_PLLSAI2_Config+0x1b8>)
 800448a:	4313      	orrs	r3, r2
 800448c:	614b      	str	r3, [r1, #20]
 800448e:	e011      	b.n	80044b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004490:	4b1d      	ldr	r3, [pc, #116]	; (8004508 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004498:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6892      	ldr	r2, [r2, #8]
 80044a0:	0211      	lsls	r1, r2, #8
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6912      	ldr	r2, [r2, #16]
 80044a6:	0852      	lsrs	r2, r2, #1
 80044a8:	3a01      	subs	r2, #1
 80044aa:	0652      	lsls	r2, r2, #25
 80044ac:	430a      	orrs	r2, r1
 80044ae:	4916      	ldr	r1, [pc, #88]	; (8004508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80044b4:	4b14      	ldr	r3, [pc, #80]	; (8004508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a13      	ldr	r2, [pc, #76]	; (8004508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c0:	f7fd fc44 	bl	8001d4c <HAL_GetTick>
 80044c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044c6:	e009      	b.n	80044dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044c8:	f7fd fc40 	bl	8001d4c <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d902      	bls.n	80044dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	73fb      	strb	r3, [r7, #15]
          break;
 80044da:	e005      	b.n	80044e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044dc:	4b0a      	ldr	r3, [pc, #40]	; (8004508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0ef      	beq.n	80044c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044ee:	4b06      	ldr	r3, [pc, #24]	; (8004508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044f0:	695a      	ldr	r2, [r3, #20]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	4904      	ldr	r1, [pc, #16]	; (8004508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	40021000 	.word	0x40021000

0800450c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e095      	b.n	800464a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	2b00      	cmp	r3, #0
 8004524:	d108      	bne.n	8004538 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800452e:	d009      	beq.n	8004544 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	61da      	str	r2, [r3, #28]
 8004536:	e005      	b.n	8004544 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7fc fd98 	bl	8001094 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800457a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004584:	d902      	bls.n	800458c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	e002      	b.n	8004592 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800458c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004590:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800459a:	d007      	beq.n	80045ac <HAL_SPI_Init+0xa0>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045a4:	d002      	beq.n	80045ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ee:	ea42 0103 	orr.w	r1, r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	0c1b      	lsrs	r3, r3, #16
 8004608:	f003 0204 	and.w	r2, r3, #4
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	f003 0310 	and.w	r3, r3, #16
 8004614:	431a      	orrs	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004628:	ea42 0103 	orr.w	r1, r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b082      	sub	sp, #8
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e01a      	b.n	800469a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800467a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7fc fd4d 	bl	800111c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b088      	sub	sp, #32
 80046a6:	af02      	add	r7, sp, #8
 80046a8:	60f8      	str	r0, [r7, #12]
 80046aa:	60b9      	str	r1, [r7, #8]
 80046ac:	603b      	str	r3, [r7, #0]
 80046ae:	4613      	mov	r3, r2
 80046b0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046be:	d112      	bne.n	80046e6 <HAL_SPI_Receive+0x44>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10e      	bne.n	80046e6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2204      	movs	r2, #4
 80046cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80046d0:	88fa      	ldrh	r2, [r7, #6]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	4613      	mov	r3, r2
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	68b9      	ldr	r1, [r7, #8]
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f910 	bl	8004902 <HAL_SPI_TransmitReceive>
 80046e2:	4603      	mov	r3, r0
 80046e4:	e109      	b.n	80048fa <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_SPI_Receive+0x52>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e102      	b.n	80048fa <HAL_SPI_Receive+0x258>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046fc:	f7fd fb26 	bl	8001d4c <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b01      	cmp	r3, #1
 800470c:	d002      	beq.n	8004714 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800470e:	2302      	movs	r3, #2
 8004710:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004712:	e0e9      	b.n	80048e8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <HAL_SPI_Receive+0x7e>
 800471a:	88fb      	ldrh	r3, [r7, #6]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d102      	bne.n	8004726 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004724:	e0e0      	b.n	80048e8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2204      	movs	r2, #4
 800472a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	88fa      	ldrh	r2, [r7, #6]
 800473e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	88fa      	ldrh	r2, [r7, #6]
 8004746:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004770:	d908      	bls.n	8004784 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004780:	605a      	str	r2, [r3, #4]
 8004782:	e007      	b.n	8004794 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004792:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800479c:	d10f      	bne.n	80047be <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c8:	2b40      	cmp	r3, #64	; 0x40
 80047ca:	d007      	beq.n	80047dc <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047e4:	d867      	bhi.n	80048b6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80047e6:	e030      	b.n	800484a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d117      	bne.n	8004826 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f103 020c 	add.w	r2, r3, #12
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	7812      	ldrb	r2, [r2, #0]
 8004804:	b2d2      	uxtb	r2, r2
 8004806:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004818:	b29b      	uxth	r3, r3
 800481a:	3b01      	subs	r3, #1
 800481c:	b29a      	uxth	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004824:	e011      	b.n	800484a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004826:	f7fd fa91 	bl	8001d4c <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d803      	bhi.n	800483e <HAL_SPI_Receive+0x19c>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483c:	d102      	bne.n	8004844 <HAL_SPI_Receive+0x1a2>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d102      	bne.n	800484a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004848:	e04e      	b.n	80048e8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004850:	b29b      	uxth	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1c8      	bne.n	80047e8 <HAL_SPI_Receive+0x146>
 8004856:	e034      	b.n	80048c2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b01      	cmp	r3, #1
 8004864:	d115      	bne.n	8004892 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	b292      	uxth	r2, r2
 8004872:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	1c9a      	adds	r2, r3, #2
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004884:	b29b      	uxth	r3, r3
 8004886:	3b01      	subs	r3, #1
 8004888:	b29a      	uxth	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004890:	e011      	b.n	80048b6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004892:	f7fd fa5b 	bl	8001d4c <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d803      	bhi.n	80048aa <HAL_SPI_Receive+0x208>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a8:	d102      	bne.n	80048b0 <HAL_SPI_Receive+0x20e>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d102      	bne.n	80048b6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80048b4:	e018      	b.n	80048e8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1ca      	bne.n	8004858 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	6839      	ldr	r1, [r7, #0]
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f001 f802 	bl	80058d0 <SPI_EndRxTransaction>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	75fb      	strb	r3, [r7, #23]
 80048e4:	e000      	b.n	80048e8 <HAL_SPI_Receive+0x246>
  }

error :
 80048e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80048f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b08a      	sub	sp, #40	; 0x28
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004910:	2301      	movs	r3, #1
 8004912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <HAL_SPI_TransmitReceive+0x26>
 8004924:	2302      	movs	r3, #2
 8004926:	e1fb      	b.n	8004d20 <HAL_SPI_TransmitReceive+0x41e>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004930:	f7fd fa0c 	bl	8001d4c <HAL_GetTick>
 8004934:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800493c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004944:	887b      	ldrh	r3, [r7, #2]
 8004946:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004948:	887b      	ldrh	r3, [r7, #2]
 800494a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800494c:	7efb      	ldrb	r3, [r7, #27]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d00e      	beq.n	8004970 <HAL_SPI_TransmitReceive+0x6e>
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004958:	d106      	bne.n	8004968 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d102      	bne.n	8004968 <HAL_SPI_TransmitReceive+0x66>
 8004962:	7efb      	ldrb	r3, [r7, #27]
 8004964:	2b04      	cmp	r3, #4
 8004966:	d003      	beq.n	8004970 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004968:	2302      	movs	r3, #2
 800496a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800496e:	e1cd      	b.n	8004d0c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d005      	beq.n	8004982 <HAL_SPI_TransmitReceive+0x80>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <HAL_SPI_TransmitReceive+0x80>
 800497c:	887b      	ldrh	r3, [r7, #2]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d103      	bne.n	800498a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004988:	e1c0      	b.n	8004d0c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b04      	cmp	r3, #4
 8004994:	d003      	beq.n	800499e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2205      	movs	r2, #5
 800499a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	887a      	ldrh	r2, [r7, #2]
 80049ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	887a      	ldrh	r2, [r7, #2]
 80049b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	887a      	ldrh	r2, [r7, #2]
 80049c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	887a      	ldrh	r2, [r7, #2]
 80049ca:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049e0:	d802      	bhi.n	80049e8 <HAL_SPI_TransmitReceive+0xe6>
 80049e2:	8a3b      	ldrh	r3, [r7, #16]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d908      	bls.n	80049fa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049f6:	605a      	str	r2, [r3, #4]
 80049f8:	e007      	b.n	8004a0a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a08:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a14:	2b40      	cmp	r3, #64	; 0x40
 8004a16:	d007      	beq.n	8004a28 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a30:	d97c      	bls.n	8004b2c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <HAL_SPI_TransmitReceive+0x13e>
 8004a3a:	8a7b      	ldrh	r3, [r7, #18]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d169      	bne.n	8004b14 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	881a      	ldrh	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a50:	1c9a      	adds	r2, r3, #2
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a64:	e056      	b.n	8004b14 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d11b      	bne.n	8004aac <HAL_SPI_TransmitReceive+0x1aa>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d016      	beq.n	8004aac <HAL_SPI_TransmitReceive+0x1aa>
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d113      	bne.n	8004aac <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a88:	881a      	ldrh	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a94:	1c9a      	adds	r2, r3, #2
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d11c      	bne.n	8004af4 <HAL_SPI_TransmitReceive+0x1f2>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d016      	beq.n	8004af4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68da      	ldr	r2, [r3, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	b292      	uxth	r2, r2
 8004ad2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad8:	1c9a      	adds	r2, r3, #2
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004af0:	2301      	movs	r3, #1
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004af4:	f7fd f92a 	bl	8001d4c <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d807      	bhi.n	8004b14 <HAL_SPI_TransmitReceive+0x212>
 8004b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0a:	d003      	beq.n	8004b14 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004b12:	e0fb      	b.n	8004d0c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1a3      	bne.n	8004a66 <HAL_SPI_TransmitReceive+0x164>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d19d      	bne.n	8004a66 <HAL_SPI_TransmitReceive+0x164>
 8004b2a:	e0df      	b.n	8004cec <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <HAL_SPI_TransmitReceive+0x23a>
 8004b34:	8a7b      	ldrh	r3, [r7, #18]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	f040 80cb 	bne.w	8004cd2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d912      	bls.n	8004b6c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4a:	881a      	ldrh	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b56:	1c9a      	adds	r2, r3, #2
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	3b02      	subs	r3, #2
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b6a:	e0b2      	b.n	8004cd2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	330c      	adds	r3, #12
 8004b76:	7812      	ldrb	r2, [r2, #0]
 8004b78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b92:	e09e      	b.n	8004cd2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d134      	bne.n	8004c0c <HAL_SPI_TransmitReceive+0x30a>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d02f      	beq.n	8004c0c <HAL_SPI_TransmitReceive+0x30a>
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d12c      	bne.n	8004c0c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d912      	bls.n	8004be2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc0:	881a      	ldrh	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bcc:	1c9a      	adds	r2, r3, #2
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b02      	subs	r3, #2
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004be0:	e012      	b.n	8004c08 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	330c      	adds	r3, #12
 8004bec:	7812      	ldrb	r2, [r2, #0]
 8004bee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	3b01      	subs	r3, #1
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d148      	bne.n	8004cac <HAL_SPI_TransmitReceive+0x3aa>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d042      	beq.n	8004cac <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d923      	bls.n	8004c7a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3c:	b292      	uxth	r2, r2
 8004c3e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	1c9a      	adds	r2, r3, #2
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b02      	subs	r3, #2
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d81f      	bhi.n	8004ca8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c76:	605a      	str	r2, [r3, #4]
 8004c78:	e016      	b.n	8004ca8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f103 020c 	add.w	r2, r3, #12
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	7812      	ldrb	r2, [r2, #0]
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004cac:	f7fd f84e 	bl	8001d4c <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d803      	bhi.n	8004cc4 <HAL_SPI_TransmitReceive+0x3c2>
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc2:	d102      	bne.n	8004cca <HAL_SPI_TransmitReceive+0x3c8>
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d103      	bne.n	8004cd2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004cd0:	e01c      	b.n	8004d0c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f47f af5b 	bne.w	8004b94 <HAL_SPI_TransmitReceive+0x292>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f47f af54 	bne.w	8004b94 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cec:	69fa      	ldr	r2, [r7, #28]
 8004cee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 fe45 	bl	8005980 <SPI_EndRxTxTransaction>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d006      	beq.n	8004d0a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2220      	movs	r2, #32
 8004d06:	661a      	str	r2, [r3, #96]	; 0x60
 8004d08:	e000      	b.n	8004d0c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004d0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3728      	adds	r7, #40	; 0x28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	4613      	mov	r3, r2
 8004d34:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d101      	bne.n	8004d48 <HAL_SPI_Transmit_IT+0x20>
 8004d44:	2302      	movs	r3, #2
 8004d46:	e072      	b.n	8004e2e <HAL_SPI_Transmit_IT+0x106>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <HAL_SPI_Transmit_IT+0x34>
 8004d56:	88fb      	ldrh	r3, [r7, #6]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d102      	bne.n	8004d62 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d60:	e060      	b.n	8004e24 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d002      	beq.n	8004d74 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004d6e:	2302      	movs	r3, #2
 8004d70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d72:	e057      	b.n	8004e24 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2203      	movs	r2, #3
 8004d78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	88fa      	ldrh	r2, [r7, #6]
 8004d8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	88fa      	ldrh	r2, [r7, #6]
 8004d92:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004db8:	d903      	bls.n	8004dc2 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4a1f      	ldr	r2, [pc, #124]	; (8004e3c <HAL_SPI_Transmit_IT+0x114>)
 8004dbe:	651a      	str	r2, [r3, #80]	; 0x50
 8004dc0:	e002      	b.n	8004dc8 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	4a1e      	ldr	r2, [pc, #120]	; (8004e40 <HAL_SPI_Transmit_IT+0x118>)
 8004dc6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dd0:	d10f      	bne.n	8004df2 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004de0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004df0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004e00:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0c:	2b40      	cmp	r3, #64	; 0x40
 8004e0e:	d008      	beq.n	8004e22 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	e000      	b.n	8004e24 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8004e22:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	371c      	adds	r7, #28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	0800564f 	.word	0x0800564f
 8004e40:	08005609 	.word	0x08005609

08004e44 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d110      	bne.n	8004e80 <HAL_SPI_Receive_IT+0x3c>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e66:	d10b      	bne.n	8004e80 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2204      	movs	r2, #4
 8004e6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8004e70:	88fb      	ldrh	r3, [r7, #6]
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	68b9      	ldr	r1, [r7, #8]
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 f894 	bl	8004fa4 <HAL_SPI_TransmitReceive_IT>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	e089      	b.n	8004f94 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d101      	bne.n	8004e8e <HAL_SPI_Receive_IT+0x4a>
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	e082      	b.n	8004f94 <HAL_SPI_Receive_IT+0x150>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d002      	beq.n	8004ea8 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ea6:	e070      	b.n	8004f8a <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <HAL_SPI_Receive_IT+0x70>
 8004eae:	88fb      	ldrh	r3, [r7, #6]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d102      	bne.n	8004eba <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004eb8:	e067      	b.n	8004f8a <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2204      	movs	r2, #4
 8004ebe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	88fa      	ldrh	r2, [r7, #6]
 8004ed2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	88fa      	ldrh	r2, [r7, #6]
 8004eda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004efe:	d90b      	bls.n	8004f18 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f0e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4a22      	ldr	r2, [pc, #136]	; (8004f9c <HAL_SPI_Receive_IT+0x158>)
 8004f14:	64da      	str	r2, [r3, #76]	; 0x4c
 8004f16:	e00a      	b.n	8004f2e <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f26:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4a1d      	ldr	r2, [pc, #116]	; (8004fa0 <HAL_SPI_Receive_IT+0x15c>)
 8004f2c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f36:	d10f      	bne.n	8004f58 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f56:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004f66:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f72:	2b40      	cmp	r3, #64	; 0x40
 8004f74:	d008      	beq.n	8004f88 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	e000      	b.n	8004f8a <HAL_SPI_Receive_IT+0x146>
  }

error :
 8004f88:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3718      	adds	r7, #24
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	080055bd 	.word	0x080055bd
 8004fa0:	0800556d 	.word	0x0800556d

08004fa4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d101      	bne.n	8004fc4 <HAL_SPI_TransmitReceive_IT+0x20>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	e091      	b.n	80050e8 <HAL_SPI_TransmitReceive_IT+0x144>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fd2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fda:	7dbb      	ldrb	r3, [r7, #22]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d00d      	beq.n	8004ffc <HAL_SPI_TransmitReceive_IT+0x58>
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fe6:	d106      	bne.n	8004ff6 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d102      	bne.n	8004ff6 <HAL_SPI_TransmitReceive_IT+0x52>
 8004ff0:	7dbb      	ldrb	r3, [r7, #22]
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d002      	beq.n	8004ffc <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ffa:	e070      	b.n	80050de <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d005      	beq.n	800500e <HAL_SPI_TransmitReceive_IT+0x6a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <HAL_SPI_TransmitReceive_IT+0x6a>
 8005008:	887b      	ldrh	r3, [r7, #2]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d102      	bne.n	8005014 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005012:	e064      	b.n	80050de <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b04      	cmp	r3, #4
 800501e:	d003      	beq.n	8005028 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2205      	movs	r2, #5
 8005024:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	887a      	ldrh	r2, [r7, #2]
 8005038:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	887a      	ldrh	r2, [r7, #2]
 800503e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	887a      	ldrh	r2, [r7, #2]
 800504a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	887a      	ldrh	r2, [r7, #2]
 8005052:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800505e:	d906      	bls.n	800506e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4a24      	ldr	r2, [pc, #144]	; (80050f4 <HAL_SPI_TransmitReceive_IT+0x150>)
 8005064:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	4a23      	ldr	r2, [pc, #140]	; (80050f8 <HAL_SPI_TransmitReceive_IT+0x154>)
 800506a:	651a      	str	r2, [r3, #80]	; 0x50
 800506c:	e005      	b.n	800507a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	4a22      	ldr	r2, [pc, #136]	; (80050fc <HAL_SPI_TransmitReceive_IT+0x158>)
 8005072:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4a22      	ldr	r2, [pc, #136]	; (8005100 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8005078:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005082:	d802      	bhi.n	800508a <HAL_SPI_TransmitReceive_IT+0xe6>
 8005084:	887b      	ldrh	r3, [r7, #2]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d908      	bls.n	800509c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005098:	605a      	str	r2, [r3, #4]
 800509a:	e007      	b.n	80050ac <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050aa:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80050ba:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c6:	2b40      	cmp	r3, #64	; 0x40
 80050c8:	d008      	beq.n	80050dc <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	e000      	b.n	80050de <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 80050dc:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80050e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	371c      	adds	r7, #28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	080054a7 	.word	0x080054a7
 80050f8:	0800550d 	.word	0x0800550d
 80050fc:	08005357 	.word	0x08005357
 8005100:	08005415 	.word	0x08005415

08005104 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	099b      	lsrs	r3, r3, #6
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10f      	bne.n	8005148 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	099b      	lsrs	r3, r3, #6
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d004      	beq.n	8005148 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	4798      	blx	r3
    return;
 8005146:	e0d7      	b.n	80052f8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	085b      	lsrs	r3, r3, #1
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <HAL_SPI_IRQHandler+0x66>
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	09db      	lsrs	r3, r3, #7
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	d004      	beq.n	800516a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	4798      	blx	r3
    return;
 8005168:	e0c6      	b.n	80052f8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	095b      	lsrs	r3, r3, #5
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10c      	bne.n	8005190 <HAL_SPI_IRQHandler+0x8c>
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	099b      	lsrs	r3, r3, #6
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	0a1b      	lsrs	r3, r3, #8
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 80b4 	beq.w	80052f8 <HAL_SPI_IRQHandler+0x1f4>
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 80ad 	beq.w	80052f8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	099b      	lsrs	r3, r3, #6
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d023      	beq.n	80051f2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d011      	beq.n	80051da <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ba:	f043 0204 	orr.w	r2, r3, #4
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	617b      	str	r3, [r7, #20]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	e00b      	b.n	80051f2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051da:	2300      	movs	r3, #0
 80051dc:	613b      	str	r3, [r7, #16]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	613b      	str	r3, [r7, #16]
 80051ee:	693b      	ldr	r3, [r7, #16]
        return;
 80051f0:	e082      	b.n	80052f8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	095b      	lsrs	r3, r3, #5
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d014      	beq.n	8005228 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005202:	f043 0201 	orr.w	r2, r3, #1
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800520a:	2300      	movs	r3, #0
 800520c:	60fb      	str	r3, [r7, #12]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	0a1b      	lsrs	r3, r3, #8
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00c      	beq.n	800524e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005238:	f043 0208 	orr.w	r2, r3, #8
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005240:	2300      	movs	r3, #0
 8005242:	60bb      	str	r3, [r7, #8]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	60bb      	str	r3, [r7, #8]
 800524c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005252:	2b00      	cmp	r3, #0
 8005254:	d04f      	beq.n	80052f6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005264:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d104      	bne.n	8005282 <HAL_SPI_IRQHandler+0x17e>
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d034      	beq.n	80052ec <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0203 	bic.w	r2, r2, #3
 8005290:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005296:	2b00      	cmp	r3, #0
 8005298:	d011      	beq.n	80052be <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529e:	4a18      	ldr	r2, [pc, #96]	; (8005300 <HAL_SPI_IRQHandler+0x1fc>)
 80052a0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fc ff6e 	bl	8002188 <HAL_DMA_Abort_IT>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d005      	beq.n	80052be <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d016      	beq.n	80052f4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ca:	4a0d      	ldr	r2, [pc, #52]	; (8005300 <HAL_SPI_IRQHandler+0x1fc>)
 80052cc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fc ff58 	bl	8002188 <HAL_DMA_Abort_IT>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80052ea:	e003      	b.n	80052f4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f813 	bl	8005318 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80052f2:	e000      	b.n	80052f6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80052f4:	bf00      	nop
    return;
 80052f6:	bf00      	nop
  }
}
 80052f8:	3720      	adds	r7, #32
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	0800532d 	.word	0x0800532d

08005304 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005338:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f7ff ffe5 	bl	8005318 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800534e:	bf00      	nop
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b082      	sub	sp, #8
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005364:	b29b      	uxth	r3, r3
 8005366:	2b01      	cmp	r3, #1
 8005368:	d923      	bls.n	80053b2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68da      	ldr	r2, [r3, #12]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005374:	b292      	uxth	r2, r2
 8005376:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537c:	1c9a      	adds	r2, r3, #2
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005388:	b29b      	uxth	r3, r3
 800538a:	3b02      	subs	r3, #2
 800538c:	b29a      	uxth	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800539a:	b29b      	uxth	r3, r3
 800539c:	2b01      	cmp	r3, #1
 800539e:	d11f      	bne.n	80053e0 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053ae:	605a      	str	r2, [r3, #4]
 80053b0:	e016      	b.n	80053e0 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f103 020c 	add.w	r2, r3, #12
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	7812      	ldrb	r2, [r2, #0]
 80053c0:	b2d2      	uxtb	r2, r2
 80053c2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b29a      	uxth	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10f      	bne.n	800540c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80053fa:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005400:	b29b      	uxth	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d102      	bne.n	800540c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fb00 	bl	8005a0c <SPI_CloseRxTx_ISR>
    }
  }
}
 800540c:	bf00      	nop
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b01      	cmp	r3, #1
 8005424:	d912      	bls.n	800544c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542a:	881a      	ldrh	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005436:	1c9a      	adds	r2, r3, #2
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005440:	b29b      	uxth	r3, r3
 8005442:	3b02      	subs	r3, #2
 8005444:	b29a      	uxth	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	87da      	strh	r2, [r3, #62]	; 0x3e
 800544a:	e012      	b.n	8005472 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	330c      	adds	r3, #12
 8005456:	7812      	ldrb	r2, [r2, #0]
 8005458:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005468:	b29b      	uxth	r3, r3
 800546a:	3b01      	subs	r3, #1
 800546c:	b29a      	uxth	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005476:	b29b      	uxth	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d110      	bne.n	800549e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800548a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005492:	b29b      	uxth	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d102      	bne.n	800549e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fab7 	bl	8005a0c <SPI_CloseRxTx_ISR>
    }
  }
}
 800549e:	bf00      	nop
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b082      	sub	sp, #8
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b8:	b292      	uxth	r2, r2
 80054ba:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	1c9a      	adds	r2, r3, #2
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054de:	b29b      	uxth	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10f      	bne.n	8005504 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054f2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d102      	bne.n	8005504 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fa84 	bl	8005a0c <SPI_CloseRxTx_ISR>
    }
  }
}
 8005504:	bf00      	nop
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005518:	881a      	ldrh	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005524:	1c9a      	adds	r2, r3, #2
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800552e:	b29b      	uxth	r3, r3
 8005530:	3b01      	subs	r3, #1
 8005532:	b29a      	uxth	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800553c:	b29b      	uxth	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d110      	bne.n	8005564 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005550:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005558:	b29b      	uxth	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d102      	bne.n	8005564 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fa54 	bl	8005a0c <SPI_CloseRxTx_ISR>
    }
  }
}
 8005564:	bf00      	nop
 8005566:	3708      	adds	r7, #8
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f103 020c 	add.w	r2, r3, #12
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005580:	7812      	ldrb	r2, [r2, #0]
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005596:	b29b      	uxth	r3, r3
 8005598:	3b01      	subs	r3, #1
 800559a:	b29a      	uxth	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d102      	bne.n	80055b4 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fa6e 	bl	8005a90 <SPI_CloseRx_ISR>
  }
}
 80055b4:	bf00      	nop
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	b292      	uxth	r2, r2
 80055d0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	1c9a      	adds	r2, r3, #2
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d102      	bne.n	8005600 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 fa48 	bl	8005a90 <SPI_CloseRx_ISR>
  }
}
 8005600:	bf00      	nop
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	330c      	adds	r3, #12
 800561a:	7812      	ldrb	r2, [r2, #0]
 800561c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800562c:	b29b      	uxth	r3, r3
 800562e:	3b01      	subs	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800563a:	b29b      	uxth	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d102      	bne.n	8005646 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 fa55 	bl	8005af0 <SPI_CloseTx_ISR>
  }
}
 8005646:	bf00      	nop
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565a:	881a      	ldrh	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005666:	1c9a      	adds	r2, r3, #2
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005670:	b29b      	uxth	r3, r3
 8005672:	3b01      	subs	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800567e:	b29b      	uxth	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d102      	bne.n	800568a <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 fa33 	bl	8005af0 <SPI_CloseTx_ISR>
  }
}
 800568a:	bf00      	nop
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b088      	sub	sp, #32
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	603b      	str	r3, [r7, #0]
 80056a0:	4613      	mov	r3, r2
 80056a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056a4:	f7fc fb52 	bl	8001d4c <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ac:	1a9b      	subs	r3, r3, r2
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	4413      	add	r3, r2
 80056b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056b4:	f7fc fb4a 	bl	8001d4c <HAL_GetTick>
 80056b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056ba:	4b39      	ldr	r3, [pc, #228]	; (80057a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	015b      	lsls	r3, r3, #5
 80056c0:	0d1b      	lsrs	r3, r3, #20
 80056c2:	69fa      	ldr	r2, [r7, #28]
 80056c4:	fb02 f303 	mul.w	r3, r2, r3
 80056c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056ca:	e054      	b.n	8005776 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d2:	d050      	beq.n	8005776 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056d4:	f7fc fb3a 	bl	8001d4c <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	69fa      	ldr	r2, [r7, #28]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d902      	bls.n	80056ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d13d      	bne.n	8005766 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005702:	d111      	bne.n	8005728 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800570c:	d004      	beq.n	8005718 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005716:	d107      	bne.n	8005728 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005726:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005730:	d10f      	bne.n	8005752 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005750:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e017      	b.n	8005796 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800576c:	2300      	movs	r3, #0
 800576e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	3b01      	subs	r3, #1
 8005774:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	4013      	ands	r3, r2
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	429a      	cmp	r2, r3
 8005784:	bf0c      	ite	eq
 8005786:	2301      	moveq	r3, #1
 8005788:	2300      	movne	r3, #0
 800578a:	b2db      	uxtb	r3, r3
 800578c:	461a      	mov	r2, r3
 800578e:	79fb      	ldrb	r3, [r7, #7]
 8005790:	429a      	cmp	r2, r3
 8005792:	d19b      	bne.n	80056cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3720      	adds	r7, #32
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	20000000 	.word	0x20000000

080057a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b08a      	sub	sp, #40	; 0x28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
 80057b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80057b2:	2300      	movs	r3, #0
 80057b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80057b6:	f7fc fac9 	bl	8001d4c <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	1a9b      	subs	r3, r3, r2
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	4413      	add	r3, r2
 80057c4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80057c6:	f7fc fac1 	bl	8001d4c <HAL_GetTick>
 80057ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	330c      	adds	r3, #12
 80057d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80057d4:	4b3d      	ldr	r3, [pc, #244]	; (80058cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	4613      	mov	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	00da      	lsls	r2, r3, #3
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	0d1b      	lsrs	r3, r3, #20
 80057e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e6:	fb02 f303 	mul.w	r3, r2, r3
 80057ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80057ec:	e060      	b.n	80058b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80057f4:	d107      	bne.n	8005806 <SPI_WaitFifoStateUntilTimeout+0x62>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d104      	bne.n	8005806 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	b2db      	uxtb	r3, r3
 8005802:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005804:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580c:	d050      	beq.n	80058b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800580e:	f7fc fa9d 	bl	8001d4c <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800581a:	429a      	cmp	r2, r3
 800581c:	d902      	bls.n	8005824 <SPI_WaitFifoStateUntilTimeout+0x80>
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	2b00      	cmp	r3, #0
 8005822:	d13d      	bne.n	80058a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005832:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800583c:	d111      	bne.n	8005862 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005846:	d004      	beq.n	8005852 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005850:	d107      	bne.n	8005862 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005860:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800586a:	d10f      	bne.n	800588c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800588a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e010      	b.n	80058c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80058a6:	2300      	movs	r3, #0
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	3b01      	subs	r3, #1
 80058ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	4013      	ands	r3, r2
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d196      	bne.n	80057ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3728      	adds	r7, #40	; 0x28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	20000000 	.word	0x20000000

080058d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af02      	add	r7, sp, #8
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058e4:	d111      	bne.n	800590a <SPI_EndRxTransaction+0x3a>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ee:	d004      	beq.n	80058fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058f8:	d107      	bne.n	800590a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005908:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2200      	movs	r2, #0
 8005912:	2180      	movs	r1, #128	; 0x80
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f7ff febd 	bl	8005694 <SPI_WaitFlagStateUntilTimeout>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d007      	beq.n	8005930 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005924:	f043 0220 	orr.w	r2, r3, #32
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e023      	b.n	8005978 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005938:	d11d      	bne.n	8005976 <SPI_EndRxTransaction+0xa6>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005942:	d004      	beq.n	800594e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800594c:	d113      	bne.n	8005976 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2200      	movs	r2, #0
 8005956:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f7ff ff22 	bl	80057a4 <SPI_WaitFifoStateUntilTimeout>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d007      	beq.n	8005976 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800596a:	f043 0220 	orr.w	r2, r3, #32
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e000      	b.n	8005978 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af02      	add	r7, sp, #8
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2200      	movs	r2, #0
 8005994:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f7ff ff03 	bl	80057a4 <SPI_WaitFifoStateUntilTimeout>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d007      	beq.n	80059b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a8:	f043 0220 	orr.w	r2, r3, #32
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e027      	b.n	8005a04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2200      	movs	r2, #0
 80059bc:	2180      	movs	r1, #128	; 0x80
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f7ff fe68 	bl	8005694 <SPI_WaitFlagStateUntilTimeout>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d007      	beq.n	80059da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ce:	f043 0220 	orr.w	r2, r3, #32
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e014      	b.n	8005a04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f7ff fedc 	bl	80057a4 <SPI_WaitFifoStateUntilTimeout>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d007      	beq.n	8005a02 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f6:	f043 0220 	orr.w	r2, r3, #32
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e000      	b.n	8005a04 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a14:	f7fc f99a 	bl	8001d4c <HAL_GetTick>
 8005a18:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0220 	bic.w	r2, r2, #32
 8005a28:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	2164      	movs	r1, #100	; 0x64
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7ff ffa6 	bl	8005980 <SPI_EndRxTxTransaction>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d005      	beq.n	8005a46 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a3e:	f043 0220 	orr.w	r2, r3, #32
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d115      	bne.n	8005a7a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	d107      	bne.n	8005a6a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f003 f89a 	bl	8008b9c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005a68:	e00e      	b.n	8005a88 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7ff fc46 	bl	8005304 <HAL_SPI_TxRxCpltCallback>
}
 8005a78:	e006      	b.n	8005a88 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7ff fc48 	bl	8005318 <HAL_SPI_ErrorCallback>
}
 8005a88:	bf00      	nop
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005aa6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8005aa8:	f7fc f950 	bl	8001d4c <HAL_GetTick>
 8005aac:	4603      	mov	r3, r0
 8005aae:	461a      	mov	r2, r3
 8005ab0:	2164      	movs	r1, #100	; 0x64
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7ff ff0c 	bl	80058d0 <SPI_EndRxTransaction>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d005      	beq.n	8005aca <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac2:	f043 0220 	orr.w	r2, r3, #32
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d103      	bne.n	8005ae2 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f003 f85e 	bl	8008b9c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005ae0:	e002      	b.n	8005ae8 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7ff fc18 	bl	8005318 <HAL_SPI_ErrorCallback>
}
 8005ae8:	bf00      	nop
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005af8:	f7fc f928 	bl	8001d4c <HAL_GetTick>
 8005afc:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b0c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	2164      	movs	r1, #100	; 0x64
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7ff ff34 	bl	8005980 <SPI_EndRxTxTransaction>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d005      	beq.n	8005b2a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b22:	f043 0220 	orr.w	r2, r3, #32
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10a      	bne.n	8005b48 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b32:	2300      	movs	r3, #0
 8005b34:	60bb      	str	r3, [r7, #8]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	60bb      	str	r3, [r7, #8]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	60bb      	str	r3, [r7, #8]
 8005b46:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7ff fbdd 	bl	8005318 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005b5e:	e002      	b.n	8005b66 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f003 f82f 	bl	8008bc4 <HAL_SPI_TxCpltCallback>
}
 8005b66:	bf00      	nop
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b082      	sub	sp, #8
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e049      	b.n	8005c14 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d106      	bne.n	8005b9a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f841 	bl	8005c1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	3304      	adds	r3, #4
 8005baa:	4619      	mov	r1, r3
 8005bac:	4610      	mov	r0, r2
 8005bae:	f000 f9f7 	bl	8005fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d001      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e04f      	b.n	8005ce8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0201 	orr.w	r2, r2, #1
 8005c5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a23      	ldr	r2, [pc, #140]	; (8005cf4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d01d      	beq.n	8005ca6 <HAL_TIM_Base_Start_IT+0x76>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c72:	d018      	beq.n	8005ca6 <HAL_TIM_Base_Start_IT+0x76>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a1f      	ldr	r2, [pc, #124]	; (8005cf8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d013      	beq.n	8005ca6 <HAL_TIM_Base_Start_IT+0x76>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a1e      	ldr	r2, [pc, #120]	; (8005cfc <HAL_TIM_Base_Start_IT+0xcc>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00e      	beq.n	8005ca6 <HAL_TIM_Base_Start_IT+0x76>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a1c      	ldr	r2, [pc, #112]	; (8005d00 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d009      	beq.n	8005ca6 <HAL_TIM_Base_Start_IT+0x76>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a1b      	ldr	r2, [pc, #108]	; (8005d04 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d004      	beq.n	8005ca6 <HAL_TIM_Base_Start_IT+0x76>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a19      	ldr	r2, [pc, #100]	; (8005d08 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d115      	bne.n	8005cd2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	4b17      	ldr	r3, [pc, #92]	; (8005d0c <HAL_TIM_Base_Start_IT+0xdc>)
 8005cae:	4013      	ands	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2b06      	cmp	r3, #6
 8005cb6:	d015      	beq.n	8005ce4 <HAL_TIM_Base_Start_IT+0xb4>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cbe:	d011      	beq.n	8005ce4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f042 0201 	orr.w	r2, r2, #1
 8005cce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd0:	e008      	b.n	8005ce4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f042 0201 	orr.w	r2, r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	e000      	b.n	8005ce6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	40012c00 	.word	0x40012c00
 8005cf8:	40000400 	.word	0x40000400
 8005cfc:	40000800 	.word	0x40000800
 8005d00:	40000c00 	.word	0x40000c00
 8005d04:	40013400 	.word	0x40013400
 8005d08:	40014000 	.word	0x40014000
 8005d0c:	00010007 	.word	0x00010007

08005d10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d122      	bne.n	8005d6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d11b      	bne.n	8005d6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f06f 0202 	mvn.w	r2, #2
 8005d3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	f003 0303 	and.w	r3, r3, #3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f905 	bl	8005f62 <HAL_TIM_IC_CaptureCallback>
 8005d58:	e005      	b.n	8005d66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f8f7 	bl	8005f4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f908 	bl	8005f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	f003 0304 	and.w	r3, r3, #4
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	d122      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b04      	cmp	r3, #4
 8005d86:	d11b      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f06f 0204 	mvn.w	r2, #4
 8005d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2202      	movs	r2, #2
 8005d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f8db 	bl	8005f62 <HAL_TIM_IC_CaptureCallback>
 8005dac:	e005      	b.n	8005dba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f8cd 	bl	8005f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f8de 	bl	8005f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f003 0308 	and.w	r3, r3, #8
 8005dca:	2b08      	cmp	r3, #8
 8005dcc:	d122      	bne.n	8005e14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f003 0308 	and.w	r3, r3, #8
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d11b      	bne.n	8005e14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f06f 0208 	mvn.w	r2, #8
 8005de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2204      	movs	r2, #4
 8005dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	f003 0303 	and.w	r3, r3, #3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f8b1 	bl	8005f62 <HAL_TIM_IC_CaptureCallback>
 8005e00:	e005      	b.n	8005e0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f8a3 	bl	8005f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f8b4 	bl	8005f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f003 0310 	and.w	r3, r3, #16
 8005e1e:	2b10      	cmp	r3, #16
 8005e20:	d122      	bne.n	8005e68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f003 0310 	and.w	r3, r3, #16
 8005e2c:	2b10      	cmp	r3, #16
 8005e2e:	d11b      	bne.n	8005e68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f06f 0210 	mvn.w	r2, #16
 8005e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2208      	movs	r2, #8
 8005e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f887 	bl	8005f62 <HAL_TIM_IC_CaptureCallback>
 8005e54:	e005      	b.n	8005e62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f879 	bl	8005f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f88a 	bl	8005f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d10e      	bne.n	8005e94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d107      	bne.n	8005e94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f06f 0201 	mvn.w	r2, #1
 8005e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7fa ffba 	bl	8000e08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9e:	2b80      	cmp	r3, #128	; 0x80
 8005ea0:	d10e      	bne.n	8005ec0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eac:	2b80      	cmp	r3, #128	; 0x80
 8005eae:	d107      	bne.n	8005ec0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f914 	bl	80060e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ece:	d10e      	bne.n	8005eee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eda:	2b80      	cmp	r3, #128	; 0x80
 8005edc:	d107      	bne.n	8005eee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 f907 	bl	80060fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef8:	2b40      	cmp	r3, #64	; 0x40
 8005efa:	d10e      	bne.n	8005f1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f06:	2b40      	cmp	r3, #64	; 0x40
 8005f08:	d107      	bne.n	8005f1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f838 	bl	8005f8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	f003 0320 	and.w	r3, r3, #32
 8005f24:	2b20      	cmp	r3, #32
 8005f26:	d10e      	bne.n	8005f46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	f003 0320 	and.w	r3, r3, #32
 8005f32:	2b20      	cmp	r3, #32
 8005f34:	d107      	bne.n	8005f46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f06f 0220 	mvn.w	r2, #32
 8005f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f8c7 	bl	80060d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f46:	bf00      	nop
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b083      	sub	sp, #12
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f6a:	bf00      	nop
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b083      	sub	sp, #12
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f7e:	bf00      	nop
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f92:	bf00      	nop
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
	...

08005fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a40      	ldr	r2, [pc, #256]	; (80060b4 <TIM_Base_SetConfig+0x114>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d013      	beq.n	8005fe0 <TIM_Base_SetConfig+0x40>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fbe:	d00f      	beq.n	8005fe0 <TIM_Base_SetConfig+0x40>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a3d      	ldr	r2, [pc, #244]	; (80060b8 <TIM_Base_SetConfig+0x118>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00b      	beq.n	8005fe0 <TIM_Base_SetConfig+0x40>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a3c      	ldr	r2, [pc, #240]	; (80060bc <TIM_Base_SetConfig+0x11c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d007      	beq.n	8005fe0 <TIM_Base_SetConfig+0x40>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a3b      	ldr	r2, [pc, #236]	; (80060c0 <TIM_Base_SetConfig+0x120>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d003      	beq.n	8005fe0 <TIM_Base_SetConfig+0x40>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a3a      	ldr	r2, [pc, #232]	; (80060c4 <TIM_Base_SetConfig+0x124>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d108      	bne.n	8005ff2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a2f      	ldr	r2, [pc, #188]	; (80060b4 <TIM_Base_SetConfig+0x114>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d01f      	beq.n	800603a <TIM_Base_SetConfig+0x9a>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006000:	d01b      	beq.n	800603a <TIM_Base_SetConfig+0x9a>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a2c      	ldr	r2, [pc, #176]	; (80060b8 <TIM_Base_SetConfig+0x118>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d017      	beq.n	800603a <TIM_Base_SetConfig+0x9a>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a2b      	ldr	r2, [pc, #172]	; (80060bc <TIM_Base_SetConfig+0x11c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d013      	beq.n	800603a <TIM_Base_SetConfig+0x9a>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a2a      	ldr	r2, [pc, #168]	; (80060c0 <TIM_Base_SetConfig+0x120>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d00f      	beq.n	800603a <TIM_Base_SetConfig+0x9a>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a29      	ldr	r2, [pc, #164]	; (80060c4 <TIM_Base_SetConfig+0x124>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d00b      	beq.n	800603a <TIM_Base_SetConfig+0x9a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a28      	ldr	r2, [pc, #160]	; (80060c8 <TIM_Base_SetConfig+0x128>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d007      	beq.n	800603a <TIM_Base_SetConfig+0x9a>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a27      	ldr	r2, [pc, #156]	; (80060cc <TIM_Base_SetConfig+0x12c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d003      	beq.n	800603a <TIM_Base_SetConfig+0x9a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a26      	ldr	r2, [pc, #152]	; (80060d0 <TIM_Base_SetConfig+0x130>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d108      	bne.n	800604c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	4313      	orrs	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a10      	ldr	r2, [pc, #64]	; (80060b4 <TIM_Base_SetConfig+0x114>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d00f      	beq.n	8006098 <TIM_Base_SetConfig+0xf8>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a12      	ldr	r2, [pc, #72]	; (80060c4 <TIM_Base_SetConfig+0x124>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d00b      	beq.n	8006098 <TIM_Base_SetConfig+0xf8>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a11      	ldr	r2, [pc, #68]	; (80060c8 <TIM_Base_SetConfig+0x128>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d007      	beq.n	8006098 <TIM_Base_SetConfig+0xf8>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a10      	ldr	r2, [pc, #64]	; (80060cc <TIM_Base_SetConfig+0x12c>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d003      	beq.n	8006098 <TIM_Base_SetConfig+0xf8>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a0f      	ldr	r2, [pc, #60]	; (80060d0 <TIM_Base_SetConfig+0x130>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d103      	bne.n	80060a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	691a      	ldr	r2, [r3, #16]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	615a      	str	r2, [r3, #20]
}
 80060a6:	bf00      	nop
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	40012c00 	.word	0x40012c00
 80060b8:	40000400 	.word	0x40000400
 80060bc:	40000800 	.word	0x40000800
 80060c0:	40000c00 	.word	0x40000c00
 80060c4:	40013400 	.word	0x40013400
 80060c8:	40014000 	.word	0x40014000
 80060cc:	40014400 	.word	0x40014400
 80060d0:	40014800 	.word	0x40014800

080060d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e040      	b.n	80061a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006126:	2b00      	cmp	r3, #0
 8006128:	d106      	bne.n	8006138 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7fb f810 	bl	8001158 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2224      	movs	r2, #36	; 0x24
 800613c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0201 	bic.w	r2, r2, #1
 800614c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f992 	bl	8006478 <UART_SetConfig>
 8006154:	4603      	mov	r3, r0
 8006156:	2b01      	cmp	r3, #1
 8006158:	d101      	bne.n	800615e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e022      	b.n	80061a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	2b00      	cmp	r3, #0
 8006164:	d002      	beq.n	800616c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fc3e 	bl	80069e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800617a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689a      	ldr	r2, [r3, #8]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800618a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f042 0201 	orr.w	r2, r2, #1
 800619a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 fcc5 	bl	8006b2c <UART_CheckIdleState>
 80061a2:	4603      	mov	r3, r0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08a      	sub	sp, #40	; 0x28
 80061b0:	af02      	add	r7, sp, #8
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	603b      	str	r3, [r7, #0]
 80061b8:	4613      	mov	r3, r2
 80061ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061c0:	2b20      	cmp	r3, #32
 80061c2:	f040 8082 	bne.w	80062ca <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <HAL_UART_Transmit+0x26>
 80061cc:	88fb      	ldrh	r3, [r7, #6]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e07a      	b.n	80062cc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d101      	bne.n	80061e4 <HAL_UART_Transmit+0x38>
 80061e0:	2302      	movs	r3, #2
 80061e2:	e073      	b.n	80062cc <HAL_UART_Transmit+0x120>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2221      	movs	r2, #33	; 0x21
 80061f8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061fa:	f7fb fda7 	bl	8001d4c <HAL_GetTick>
 80061fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	88fa      	ldrh	r2, [r7, #6]
 8006204:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	88fa      	ldrh	r2, [r7, #6]
 800620c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006218:	d108      	bne.n	800622c <HAL_UART_Transmit+0x80>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d104      	bne.n	800622c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006222:	2300      	movs	r3, #0
 8006224:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	61bb      	str	r3, [r7, #24]
 800622a:	e003      	b.n	8006234 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006230:	2300      	movs	r3, #0
 8006232:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800623c:	e02d      	b.n	800629a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2200      	movs	r2, #0
 8006246:	2180      	movs	r1, #128	; 0x80
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 fcb8 	bl	8006bbe <UART_WaitOnFlagUntilTimeout>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e039      	b.n	80062cc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10b      	bne.n	8006276 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	881a      	ldrh	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800626a:	b292      	uxth	r2, r2
 800626c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	3302      	adds	r3, #2
 8006272:	61bb      	str	r3, [r7, #24]
 8006274:	e008      	b.n	8006288 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	781a      	ldrb	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	b292      	uxth	r2, r2
 8006280:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	3301      	adds	r3, #1
 8006286:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800628e:	b29b      	uxth	r3, r3
 8006290:	3b01      	subs	r3, #1
 8006292:	b29a      	uxth	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1cb      	bne.n	800623e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	2200      	movs	r2, #0
 80062ae:	2140      	movs	r1, #64	; 0x40
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f000 fc84 	bl	8006bbe <UART_WaitOnFlagUntilTimeout>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e005      	b.n	80062cc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2220      	movs	r2, #32
 80062c4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	e000      	b.n	80062cc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80062ca:	2302      	movs	r3, #2
  }
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3720      	adds	r7, #32
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b08a      	sub	sp, #40	; 0x28
 80062d8:	af02      	add	r7, sp, #8
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	4613      	mov	r3, r2
 80062e2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062e8:	2b20      	cmp	r3, #32
 80062ea:	f040 80bf 	bne.w	800646c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <HAL_UART_Receive+0x26>
 80062f4:	88fb      	ldrh	r3, [r7, #6]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e0b7      	b.n	800646e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006304:	2b01      	cmp	r3, #1
 8006306:	d101      	bne.n	800630c <HAL_UART_Receive+0x38>
 8006308:	2302      	movs	r3, #2
 800630a:	e0b0      	b.n	800646e <HAL_UART_Receive+0x19a>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2222      	movs	r2, #34	; 0x22
 8006320:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006328:	f7fb fd10 	bl	8001d4c <HAL_GetTick>
 800632c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	88fa      	ldrh	r2, [r7, #6]
 8006332:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	88fa      	ldrh	r2, [r7, #6]
 800633a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006346:	d10e      	bne.n	8006366 <HAL_UART_Receive+0x92>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d105      	bne.n	800635c <HAL_UART_Receive+0x88>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006356:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800635a:	e02d      	b.n	80063b8 <HAL_UART_Receive+0xe4>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	22ff      	movs	r2, #255	; 0xff
 8006360:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006364:	e028      	b.n	80063b8 <HAL_UART_Receive+0xe4>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10d      	bne.n	800638a <HAL_UART_Receive+0xb6>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d104      	bne.n	8006380 <HAL_UART_Receive+0xac>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	22ff      	movs	r2, #255	; 0xff
 800637a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800637e:	e01b      	b.n	80063b8 <HAL_UART_Receive+0xe4>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	227f      	movs	r2, #127	; 0x7f
 8006384:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006388:	e016      	b.n	80063b8 <HAL_UART_Receive+0xe4>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006392:	d10d      	bne.n	80063b0 <HAL_UART_Receive+0xdc>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d104      	bne.n	80063a6 <HAL_UART_Receive+0xd2>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	227f      	movs	r2, #127	; 0x7f
 80063a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063a4:	e008      	b.n	80063b8 <HAL_UART_Receive+0xe4>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	223f      	movs	r2, #63	; 0x3f
 80063aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063ae:	e003      	b.n	80063b8 <HAL_UART_Receive+0xe4>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80063be:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c8:	d108      	bne.n	80063dc <HAL_UART_Receive+0x108>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d104      	bne.n	80063dc <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80063d2:	2300      	movs	r3, #0
 80063d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	61bb      	str	r3, [r7, #24]
 80063da:	e003      	b.n	80063e4 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063e0:	2300      	movs	r3, #0
 80063e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80063ec:	e033      	b.n	8006456 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2200      	movs	r2, #0
 80063f6:	2120      	movs	r1, #32
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fbe0 	bl	8006bbe <UART_WaitOnFlagUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e032      	b.n	800646e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10c      	bne.n	8006428 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006414:	b29a      	uxth	r2, r3
 8006416:	8a7b      	ldrh	r3, [r7, #18]
 8006418:	4013      	ands	r3, r2
 800641a:	b29a      	uxth	r2, r3
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	3302      	adds	r3, #2
 8006424:	61bb      	str	r3, [r7, #24]
 8006426:	e00d      	b.n	8006444 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800642e:	b29b      	uxth	r3, r3
 8006430:	b2da      	uxtb	r2, r3
 8006432:	8a7b      	ldrh	r3, [r7, #18]
 8006434:	b2db      	uxtb	r3, r3
 8006436:	4013      	ands	r3, r2
 8006438:	b2da      	uxtb	r2, r3
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	3301      	adds	r3, #1
 8006442:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800644a:	b29b      	uxth	r3, r3
 800644c:	3b01      	subs	r3, #1
 800644e:	b29a      	uxth	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800645c:	b29b      	uxth	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1c5      	bne.n	80063ee <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2220      	movs	r2, #32
 8006466:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006468:	2300      	movs	r3, #0
 800646a:	e000      	b.n	800646e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800646c:	2302      	movs	r3, #2
  }
}
 800646e:	4618      	mov	r0, r3
 8006470:	3720      	adds	r7, #32
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
	...

08006478 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800647c:	b08a      	sub	sp, #40	; 0x28
 800647e:	af00      	add	r7, sp, #0
 8006480:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	689a      	ldr	r2, [r3, #8]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	431a      	orrs	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	431a      	orrs	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	69db      	ldr	r3, [r3, #28]
 800649c:	4313      	orrs	r3, r2
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	4ba4      	ldr	r3, [pc, #656]	; (8006738 <UART_SetConfig+0x2c0>)
 80064a8:	4013      	ands	r3, r2
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	6812      	ldr	r2, [r2, #0]
 80064ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064b0:	430b      	orrs	r3, r1
 80064b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	68da      	ldr	r2, [r3, #12]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a99      	ldr	r2, [pc, #612]	; (800673c <UART_SetConfig+0x2c4>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d004      	beq.n	80064e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e0:	4313      	orrs	r3, r2
 80064e2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f4:	430a      	orrs	r2, r1
 80064f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a90      	ldr	r2, [pc, #576]	; (8006740 <UART_SetConfig+0x2c8>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d126      	bne.n	8006550 <UART_SetConfig+0xd8>
 8006502:	4b90      	ldr	r3, [pc, #576]	; (8006744 <UART_SetConfig+0x2cc>)
 8006504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006508:	f003 0303 	and.w	r3, r3, #3
 800650c:	2b03      	cmp	r3, #3
 800650e:	d81b      	bhi.n	8006548 <UART_SetConfig+0xd0>
 8006510:	a201      	add	r2, pc, #4	; (adr r2, 8006518 <UART_SetConfig+0xa0>)
 8006512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006516:	bf00      	nop
 8006518:	08006529 	.word	0x08006529
 800651c:	08006539 	.word	0x08006539
 8006520:	08006531 	.word	0x08006531
 8006524:	08006541 	.word	0x08006541
 8006528:	2301      	movs	r3, #1
 800652a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800652e:	e116      	b.n	800675e <UART_SetConfig+0x2e6>
 8006530:	2302      	movs	r3, #2
 8006532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006536:	e112      	b.n	800675e <UART_SetConfig+0x2e6>
 8006538:	2304      	movs	r3, #4
 800653a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800653e:	e10e      	b.n	800675e <UART_SetConfig+0x2e6>
 8006540:	2308      	movs	r3, #8
 8006542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006546:	e10a      	b.n	800675e <UART_SetConfig+0x2e6>
 8006548:	2310      	movs	r3, #16
 800654a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800654e:	e106      	b.n	800675e <UART_SetConfig+0x2e6>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a7c      	ldr	r2, [pc, #496]	; (8006748 <UART_SetConfig+0x2d0>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d138      	bne.n	80065cc <UART_SetConfig+0x154>
 800655a:	4b7a      	ldr	r3, [pc, #488]	; (8006744 <UART_SetConfig+0x2cc>)
 800655c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006560:	f003 030c 	and.w	r3, r3, #12
 8006564:	2b0c      	cmp	r3, #12
 8006566:	d82d      	bhi.n	80065c4 <UART_SetConfig+0x14c>
 8006568:	a201      	add	r2, pc, #4	; (adr r2, 8006570 <UART_SetConfig+0xf8>)
 800656a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656e:	bf00      	nop
 8006570:	080065a5 	.word	0x080065a5
 8006574:	080065c5 	.word	0x080065c5
 8006578:	080065c5 	.word	0x080065c5
 800657c:	080065c5 	.word	0x080065c5
 8006580:	080065b5 	.word	0x080065b5
 8006584:	080065c5 	.word	0x080065c5
 8006588:	080065c5 	.word	0x080065c5
 800658c:	080065c5 	.word	0x080065c5
 8006590:	080065ad 	.word	0x080065ad
 8006594:	080065c5 	.word	0x080065c5
 8006598:	080065c5 	.word	0x080065c5
 800659c:	080065c5 	.word	0x080065c5
 80065a0:	080065bd 	.word	0x080065bd
 80065a4:	2300      	movs	r3, #0
 80065a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065aa:	e0d8      	b.n	800675e <UART_SetConfig+0x2e6>
 80065ac:	2302      	movs	r3, #2
 80065ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065b2:	e0d4      	b.n	800675e <UART_SetConfig+0x2e6>
 80065b4:	2304      	movs	r3, #4
 80065b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065ba:	e0d0      	b.n	800675e <UART_SetConfig+0x2e6>
 80065bc:	2308      	movs	r3, #8
 80065be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065c2:	e0cc      	b.n	800675e <UART_SetConfig+0x2e6>
 80065c4:	2310      	movs	r3, #16
 80065c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065ca:	e0c8      	b.n	800675e <UART_SetConfig+0x2e6>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a5e      	ldr	r2, [pc, #376]	; (800674c <UART_SetConfig+0x2d4>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d125      	bne.n	8006622 <UART_SetConfig+0x1aa>
 80065d6:	4b5b      	ldr	r3, [pc, #364]	; (8006744 <UART_SetConfig+0x2cc>)
 80065d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065e0:	2b30      	cmp	r3, #48	; 0x30
 80065e2:	d016      	beq.n	8006612 <UART_SetConfig+0x19a>
 80065e4:	2b30      	cmp	r3, #48	; 0x30
 80065e6:	d818      	bhi.n	800661a <UART_SetConfig+0x1a2>
 80065e8:	2b20      	cmp	r3, #32
 80065ea:	d00a      	beq.n	8006602 <UART_SetConfig+0x18a>
 80065ec:	2b20      	cmp	r3, #32
 80065ee:	d814      	bhi.n	800661a <UART_SetConfig+0x1a2>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <UART_SetConfig+0x182>
 80065f4:	2b10      	cmp	r3, #16
 80065f6:	d008      	beq.n	800660a <UART_SetConfig+0x192>
 80065f8:	e00f      	b.n	800661a <UART_SetConfig+0x1a2>
 80065fa:	2300      	movs	r3, #0
 80065fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006600:	e0ad      	b.n	800675e <UART_SetConfig+0x2e6>
 8006602:	2302      	movs	r3, #2
 8006604:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006608:	e0a9      	b.n	800675e <UART_SetConfig+0x2e6>
 800660a:	2304      	movs	r3, #4
 800660c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006610:	e0a5      	b.n	800675e <UART_SetConfig+0x2e6>
 8006612:	2308      	movs	r3, #8
 8006614:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006618:	e0a1      	b.n	800675e <UART_SetConfig+0x2e6>
 800661a:	2310      	movs	r3, #16
 800661c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006620:	e09d      	b.n	800675e <UART_SetConfig+0x2e6>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a4a      	ldr	r2, [pc, #296]	; (8006750 <UART_SetConfig+0x2d8>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d125      	bne.n	8006678 <UART_SetConfig+0x200>
 800662c:	4b45      	ldr	r3, [pc, #276]	; (8006744 <UART_SetConfig+0x2cc>)
 800662e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006632:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006636:	2bc0      	cmp	r3, #192	; 0xc0
 8006638:	d016      	beq.n	8006668 <UART_SetConfig+0x1f0>
 800663a:	2bc0      	cmp	r3, #192	; 0xc0
 800663c:	d818      	bhi.n	8006670 <UART_SetConfig+0x1f8>
 800663e:	2b80      	cmp	r3, #128	; 0x80
 8006640:	d00a      	beq.n	8006658 <UART_SetConfig+0x1e0>
 8006642:	2b80      	cmp	r3, #128	; 0x80
 8006644:	d814      	bhi.n	8006670 <UART_SetConfig+0x1f8>
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <UART_SetConfig+0x1d8>
 800664a:	2b40      	cmp	r3, #64	; 0x40
 800664c:	d008      	beq.n	8006660 <UART_SetConfig+0x1e8>
 800664e:	e00f      	b.n	8006670 <UART_SetConfig+0x1f8>
 8006650:	2300      	movs	r3, #0
 8006652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006656:	e082      	b.n	800675e <UART_SetConfig+0x2e6>
 8006658:	2302      	movs	r3, #2
 800665a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800665e:	e07e      	b.n	800675e <UART_SetConfig+0x2e6>
 8006660:	2304      	movs	r3, #4
 8006662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006666:	e07a      	b.n	800675e <UART_SetConfig+0x2e6>
 8006668:	2308      	movs	r3, #8
 800666a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800666e:	e076      	b.n	800675e <UART_SetConfig+0x2e6>
 8006670:	2310      	movs	r3, #16
 8006672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006676:	e072      	b.n	800675e <UART_SetConfig+0x2e6>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a35      	ldr	r2, [pc, #212]	; (8006754 <UART_SetConfig+0x2dc>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d12a      	bne.n	80066d8 <UART_SetConfig+0x260>
 8006682:	4b30      	ldr	r3, [pc, #192]	; (8006744 <UART_SetConfig+0x2cc>)
 8006684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006688:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800668c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006690:	d01a      	beq.n	80066c8 <UART_SetConfig+0x250>
 8006692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006696:	d81b      	bhi.n	80066d0 <UART_SetConfig+0x258>
 8006698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800669c:	d00c      	beq.n	80066b8 <UART_SetConfig+0x240>
 800669e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066a2:	d815      	bhi.n	80066d0 <UART_SetConfig+0x258>
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d003      	beq.n	80066b0 <UART_SetConfig+0x238>
 80066a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ac:	d008      	beq.n	80066c0 <UART_SetConfig+0x248>
 80066ae:	e00f      	b.n	80066d0 <UART_SetConfig+0x258>
 80066b0:	2300      	movs	r3, #0
 80066b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066b6:	e052      	b.n	800675e <UART_SetConfig+0x2e6>
 80066b8:	2302      	movs	r3, #2
 80066ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066be:	e04e      	b.n	800675e <UART_SetConfig+0x2e6>
 80066c0:	2304      	movs	r3, #4
 80066c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066c6:	e04a      	b.n	800675e <UART_SetConfig+0x2e6>
 80066c8:	2308      	movs	r3, #8
 80066ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ce:	e046      	b.n	800675e <UART_SetConfig+0x2e6>
 80066d0:	2310      	movs	r3, #16
 80066d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066d6:	e042      	b.n	800675e <UART_SetConfig+0x2e6>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a17      	ldr	r2, [pc, #92]	; (800673c <UART_SetConfig+0x2c4>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d13a      	bne.n	8006758 <UART_SetConfig+0x2e0>
 80066e2:	4b18      	ldr	r3, [pc, #96]	; (8006744 <UART_SetConfig+0x2cc>)
 80066e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066f0:	d01a      	beq.n	8006728 <UART_SetConfig+0x2b0>
 80066f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066f6:	d81b      	bhi.n	8006730 <UART_SetConfig+0x2b8>
 80066f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066fc:	d00c      	beq.n	8006718 <UART_SetConfig+0x2a0>
 80066fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006702:	d815      	bhi.n	8006730 <UART_SetConfig+0x2b8>
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <UART_SetConfig+0x298>
 8006708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800670c:	d008      	beq.n	8006720 <UART_SetConfig+0x2a8>
 800670e:	e00f      	b.n	8006730 <UART_SetConfig+0x2b8>
 8006710:	2300      	movs	r3, #0
 8006712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006716:	e022      	b.n	800675e <UART_SetConfig+0x2e6>
 8006718:	2302      	movs	r3, #2
 800671a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800671e:	e01e      	b.n	800675e <UART_SetConfig+0x2e6>
 8006720:	2304      	movs	r3, #4
 8006722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006726:	e01a      	b.n	800675e <UART_SetConfig+0x2e6>
 8006728:	2308      	movs	r3, #8
 800672a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800672e:	e016      	b.n	800675e <UART_SetConfig+0x2e6>
 8006730:	2310      	movs	r3, #16
 8006732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006736:	e012      	b.n	800675e <UART_SetConfig+0x2e6>
 8006738:	efff69f3 	.word	0xefff69f3
 800673c:	40008000 	.word	0x40008000
 8006740:	40013800 	.word	0x40013800
 8006744:	40021000 	.word	0x40021000
 8006748:	40004400 	.word	0x40004400
 800674c:	40004800 	.word	0x40004800
 8006750:	40004c00 	.word	0x40004c00
 8006754:	40005000 	.word	0x40005000
 8006758:	2310      	movs	r3, #16
 800675a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a9f      	ldr	r2, [pc, #636]	; (80069e0 <UART_SetConfig+0x568>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d17a      	bne.n	800685e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006768:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800676c:	2b08      	cmp	r3, #8
 800676e:	d824      	bhi.n	80067ba <UART_SetConfig+0x342>
 8006770:	a201      	add	r2, pc, #4	; (adr r2, 8006778 <UART_SetConfig+0x300>)
 8006772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006776:	bf00      	nop
 8006778:	0800679d 	.word	0x0800679d
 800677c:	080067bb 	.word	0x080067bb
 8006780:	080067a5 	.word	0x080067a5
 8006784:	080067bb 	.word	0x080067bb
 8006788:	080067ab 	.word	0x080067ab
 800678c:	080067bb 	.word	0x080067bb
 8006790:	080067bb 	.word	0x080067bb
 8006794:	080067bb 	.word	0x080067bb
 8006798:	080067b3 	.word	0x080067b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800679c:	f7fd f92c 	bl	80039f8 <HAL_RCC_GetPCLK1Freq>
 80067a0:	61f8      	str	r0, [r7, #28]
        break;
 80067a2:	e010      	b.n	80067c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067a4:	4b8f      	ldr	r3, [pc, #572]	; (80069e4 <UART_SetConfig+0x56c>)
 80067a6:	61fb      	str	r3, [r7, #28]
        break;
 80067a8:	e00d      	b.n	80067c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067aa:	f7fd f88d 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
 80067ae:	61f8      	str	r0, [r7, #28]
        break;
 80067b0:	e009      	b.n	80067c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067b6:	61fb      	str	r3, [r7, #28]
        break;
 80067b8:	e005      	b.n	80067c6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80067ba:	2300      	movs	r3, #0
 80067bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80067c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 80fb 	beq.w	80069c4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	4613      	mov	r3, r2
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	4413      	add	r3, r2
 80067d8:	69fa      	ldr	r2, [r7, #28]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d305      	bcc.n	80067ea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067e4:	69fa      	ldr	r2, [r7, #28]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d903      	bls.n	80067f2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80067f0:	e0e8      	b.n	80069c4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	2200      	movs	r2, #0
 80067f6:	461c      	mov	r4, r3
 80067f8:	4615      	mov	r5, r2
 80067fa:	f04f 0200 	mov.w	r2, #0
 80067fe:	f04f 0300 	mov.w	r3, #0
 8006802:	022b      	lsls	r3, r5, #8
 8006804:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006808:	0222      	lsls	r2, r4, #8
 800680a:	68f9      	ldr	r1, [r7, #12]
 800680c:	6849      	ldr	r1, [r1, #4]
 800680e:	0849      	lsrs	r1, r1, #1
 8006810:	2000      	movs	r0, #0
 8006812:	4688      	mov	r8, r1
 8006814:	4681      	mov	r9, r0
 8006816:	eb12 0a08 	adds.w	sl, r2, r8
 800681a:	eb43 0b09 	adc.w	fp, r3, r9
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	603b      	str	r3, [r7, #0]
 8006826:	607a      	str	r2, [r7, #4]
 8006828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800682c:	4650      	mov	r0, sl
 800682e:	4659      	mov	r1, fp
 8006830:	f7f9 fd26 	bl	8000280 <__aeabi_uldivmod>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	4613      	mov	r3, r2
 800683a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006842:	d308      	bcc.n	8006856 <UART_SetConfig+0x3de>
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800684a:	d204      	bcs.n	8006856 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	60da      	str	r2, [r3, #12]
 8006854:	e0b6      	b.n	80069c4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800685c:	e0b2      	b.n	80069c4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006866:	d15e      	bne.n	8006926 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006868:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800686c:	2b08      	cmp	r3, #8
 800686e:	d828      	bhi.n	80068c2 <UART_SetConfig+0x44a>
 8006870:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <UART_SetConfig+0x400>)
 8006872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006876:	bf00      	nop
 8006878:	0800689d 	.word	0x0800689d
 800687c:	080068a5 	.word	0x080068a5
 8006880:	080068ad 	.word	0x080068ad
 8006884:	080068c3 	.word	0x080068c3
 8006888:	080068b3 	.word	0x080068b3
 800688c:	080068c3 	.word	0x080068c3
 8006890:	080068c3 	.word	0x080068c3
 8006894:	080068c3 	.word	0x080068c3
 8006898:	080068bb 	.word	0x080068bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800689c:	f7fd f8ac 	bl	80039f8 <HAL_RCC_GetPCLK1Freq>
 80068a0:	61f8      	str	r0, [r7, #28]
        break;
 80068a2:	e014      	b.n	80068ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068a4:	f7fd f8be 	bl	8003a24 <HAL_RCC_GetPCLK2Freq>
 80068a8:	61f8      	str	r0, [r7, #28]
        break;
 80068aa:	e010      	b.n	80068ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068ac:	4b4d      	ldr	r3, [pc, #308]	; (80069e4 <UART_SetConfig+0x56c>)
 80068ae:	61fb      	str	r3, [r7, #28]
        break;
 80068b0:	e00d      	b.n	80068ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068b2:	f7fd f809 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
 80068b6:	61f8      	str	r0, [r7, #28]
        break;
 80068b8:	e009      	b.n	80068ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068be:	61fb      	str	r3, [r7, #28]
        break;
 80068c0:	e005      	b.n	80068ce <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80068c2:	2300      	movs	r3, #0
 80068c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80068cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d077      	beq.n	80069c4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	005a      	lsls	r2, r3, #1
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	085b      	lsrs	r3, r3, #1
 80068de:	441a      	add	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	2b0f      	cmp	r3, #15
 80068ee:	d916      	bls.n	800691e <UART_SetConfig+0x4a6>
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f6:	d212      	bcs.n	800691e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	f023 030f 	bic.w	r3, r3, #15
 8006900:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	085b      	lsrs	r3, r3, #1
 8006906:	b29b      	uxth	r3, r3
 8006908:	f003 0307 	and.w	r3, r3, #7
 800690c:	b29a      	uxth	r2, r3
 800690e:	8afb      	ldrh	r3, [r7, #22]
 8006910:	4313      	orrs	r3, r2
 8006912:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	8afa      	ldrh	r2, [r7, #22]
 800691a:	60da      	str	r2, [r3, #12]
 800691c:	e052      	b.n	80069c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006924:	e04e      	b.n	80069c4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006926:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800692a:	2b08      	cmp	r3, #8
 800692c:	d827      	bhi.n	800697e <UART_SetConfig+0x506>
 800692e:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <UART_SetConfig+0x4bc>)
 8006930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006934:	08006959 	.word	0x08006959
 8006938:	08006961 	.word	0x08006961
 800693c:	08006969 	.word	0x08006969
 8006940:	0800697f 	.word	0x0800697f
 8006944:	0800696f 	.word	0x0800696f
 8006948:	0800697f 	.word	0x0800697f
 800694c:	0800697f 	.word	0x0800697f
 8006950:	0800697f 	.word	0x0800697f
 8006954:	08006977 	.word	0x08006977
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006958:	f7fd f84e 	bl	80039f8 <HAL_RCC_GetPCLK1Freq>
 800695c:	61f8      	str	r0, [r7, #28]
        break;
 800695e:	e014      	b.n	800698a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006960:	f7fd f860 	bl	8003a24 <HAL_RCC_GetPCLK2Freq>
 8006964:	61f8      	str	r0, [r7, #28]
        break;
 8006966:	e010      	b.n	800698a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006968:	4b1e      	ldr	r3, [pc, #120]	; (80069e4 <UART_SetConfig+0x56c>)
 800696a:	61fb      	str	r3, [r7, #28]
        break;
 800696c:	e00d      	b.n	800698a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800696e:	f7fc ffab 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
 8006972:	61f8      	str	r0, [r7, #28]
        break;
 8006974:	e009      	b.n	800698a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800697a:	61fb      	str	r3, [r7, #28]
        break;
 800697c:	e005      	b.n	800698a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800697e:	2300      	movs	r3, #0
 8006980:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006988:	bf00      	nop
    }

    if (pclk != 0U)
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d019      	beq.n	80069c4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	085a      	lsrs	r2, r3, #1
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	441a      	add	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	2b0f      	cmp	r3, #15
 80069a8:	d909      	bls.n	80069be <UART_SetConfig+0x546>
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b0:	d205      	bcs.n	80069be <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	60da      	str	r2, [r3, #12]
 80069bc:	e002      	b.n	80069c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80069d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3728      	adds	r7, #40	; 0x28
 80069d8:	46bd      	mov	sp, r7
 80069da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069de:	bf00      	nop
 80069e0:	40008000 	.word	0x40008000
 80069e4:	00f42400 	.word	0x00f42400

080069e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00a      	beq.n	8006a12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00a      	beq.n	8006a34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	430a      	orrs	r2, r1
 8006a32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a38:	f003 0304 	and.w	r3, r3, #4
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00a      	beq.n	8006a56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5a:	f003 0308 	and.w	r3, r3, #8
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00a      	beq.n	8006a78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	430a      	orrs	r2, r1
 8006a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7c:	f003 0310 	and.w	r3, r3, #16
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00a      	beq.n	8006a9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9e:	f003 0320 	and.w	r3, r3, #32
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00a      	beq.n	8006abc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d01a      	beq.n	8006afe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ae6:	d10a      	bne.n	8006afe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00a      	beq.n	8006b20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	605a      	str	r2, [r3, #4]
  }
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af02      	add	r7, sp, #8
 8006b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b3c:	f7fb f906 	bl	8001d4c <HAL_GetTick>
 8006b40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0308 	and.w	r3, r3, #8
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	d10e      	bne.n	8006b6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f82d 	bl	8006bbe <UART_WaitOnFlagUntilTimeout>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e023      	b.n	8006bb6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0304 	and.w	r3, r3, #4
 8006b78:	2b04      	cmp	r3, #4
 8006b7a:	d10e      	bne.n	8006b9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f817 	bl	8006bbe <UART_WaitOnFlagUntilTimeout>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e00d      	b.n	8006bb6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b09c      	sub	sp, #112	; 0x70
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	60f8      	str	r0, [r7, #12]
 8006bc6:	60b9      	str	r1, [r7, #8]
 8006bc8:	603b      	str	r3, [r7, #0]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bce:	e0a5      	b.n	8006d1c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd6:	f000 80a1 	beq.w	8006d1c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bda:	f7fb f8b7 	bl	8001d4c <HAL_GetTick>
 8006bde:	4602      	mov	r2, r0
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d302      	bcc.n	8006bf0 <UART_WaitOnFlagUntilTimeout+0x32>
 8006bea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d13e      	bne.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c04:	667b      	str	r3, [r7, #100]	; 0x64
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c10:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c16:	e841 2300 	strex	r3, r2, [r1]
 8006c1a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e6      	bne.n	8006bf0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3308      	adds	r3, #8
 8006c28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c2c:	e853 3f00 	ldrex	r3, [r3]
 8006c30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c34:	f023 0301 	bic.w	r3, r3, #1
 8006c38:	663b      	str	r3, [r7, #96]	; 0x60
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3308      	adds	r3, #8
 8006c40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c42:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c4a:	e841 2300 	strex	r3, r2, [r1]
 8006c4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1e5      	bne.n	8006c22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2220      	movs	r2, #32
 8006c5a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e067      	b.n	8006d3e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0304 	and.w	r3, r3, #4
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d04f      	beq.n	8006d1c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c8a:	d147      	bne.n	8006d1c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c94:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9e:	e853 3f00 	ldrex	r3, [r3]
 8006ca2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006caa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8006cb6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cbc:	e841 2300 	strex	r3, r2, [r1]
 8006cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e6      	bne.n	8006c96 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3308      	adds	r3, #8
 8006cce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	e853 3f00 	ldrex	r3, [r3]
 8006cd6:	613b      	str	r3, [r7, #16]
   return(result);
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	f023 0301 	bic.w	r3, r3, #1
 8006cde:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3308      	adds	r3, #8
 8006ce6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ce8:	623a      	str	r2, [r7, #32]
 8006cea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cec:	69f9      	ldr	r1, [r7, #28]
 8006cee:	6a3a      	ldr	r2, [r7, #32]
 8006cf0:	e841 2300 	strex	r3, r2, [r1]
 8006cf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1e5      	bne.n	8006cc8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2220      	movs	r2, #32
 8006d06:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e010      	b.n	8006d3e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	69da      	ldr	r2, [r3, #28]
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	4013      	ands	r3, r2
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	bf0c      	ite	eq
 8006d2c:	2301      	moveq	r3, #1
 8006d2e:	2300      	movne	r3, #0
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	461a      	mov	r2, r3
 8006d34:	79fb      	ldrb	r3, [r7, #7]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	f43f af4a 	beq.w	8006bd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3770      	adds	r7, #112	; 0x70
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d46:	b084      	sub	sp, #16
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	f107 001c 	add.w	r0, r7, #28
 8006d54:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fa6b 	bl	8007240 <USB_CoreReset>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d106      	bne.n	8006d82 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	639a      	str	r2, [r3, #56]	; 0x38
 8006d80:	e005      	b.n	8006d8e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d9a:	b004      	add	sp, #16
 8006d9c:	4770      	bx	lr

08006d9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b083      	sub	sp, #12
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f023 0201 	bic.w	r2, r3, #1
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	460b      	mov	r3, r1
 8006dca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ddc:	78fb      	ldrb	r3, [r7, #3]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d115      	bne.n	8006e0e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006dee:	2001      	movs	r0, #1
 8006df0:	f7fa ffb8 	bl	8001d64 <HAL_Delay>
      ms++;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	3301      	adds	r3, #1
 8006df8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fa12 	bl	8007224 <USB_GetMode>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d01e      	beq.n	8006e44 <USB_SetCurrentMode+0x84>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2b31      	cmp	r3, #49	; 0x31
 8006e0a:	d9f0      	bls.n	8006dee <USB_SetCurrentMode+0x2e>
 8006e0c:	e01a      	b.n	8006e44 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e0e:	78fb      	ldrb	r3, [r7, #3]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d115      	bne.n	8006e40 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e20:	2001      	movs	r0, #1
 8006e22:	f7fa ff9f 	bl	8001d64 <HAL_Delay>
      ms++;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f9f9 	bl	8007224 <USB_GetMode>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d005      	beq.n	8006e44 <USB_SetCurrentMode+0x84>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2b31      	cmp	r3, #49	; 0x31
 8006e3c:	d9f0      	bls.n	8006e20 <USB_SetCurrentMode+0x60>
 8006e3e:	e001      	b.n	8006e44 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e005      	b.n	8006e50 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b32      	cmp	r3, #50	; 0x32
 8006e48:	d101      	bne.n	8006e4e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e000      	b.n	8006e50 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e58:	b084      	sub	sp, #16
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b086      	sub	sp, #24
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006e66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e72:	2300      	movs	r3, #0
 8006e74:	613b      	str	r3, [r7, #16]
 8006e76:	e009      	b.n	8006e8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	3340      	adds	r3, #64	; 0x40
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	2200      	movs	r2, #0
 8006e84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	613b      	str	r3, [r7, #16]
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	2b0e      	cmp	r3, #14
 8006e90:	d9f2      	bls.n	8006e78 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d11c      	bne.n	8006ed2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ea6:	f043 0302 	orr.w	r3, r3, #2
 8006eaa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	e005      	b.n	8006ede <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ef8:	461a      	mov	r2, r3
 8006efa:	680b      	ldr	r3, [r1, #0]
 8006efc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006efe:	2103      	movs	r1, #3
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 f955 	bl	80071b0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f06:	2110      	movs	r1, #16
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f8f1 	bl	80070f0 <USB_FlushTxFifo>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f91b 	bl	8007154 <USB_FlushRxFifo>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f2e:	461a      	mov	r2, r3
 8006f30:	2300      	movs	r3, #0
 8006f32:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f46:	461a      	mov	r2, r3
 8006f48:	2300      	movs	r3, #0
 8006f4a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	613b      	str	r3, [r7, #16]
 8006f50:	e043      	b.n	8006fda <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	015a      	lsls	r2, r3, #5
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f68:	d118      	bne.n	8006f9c <USB_DevInit+0x144>
    {
      if (i == 0U)
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10a      	bne.n	8006f86 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f82:	6013      	str	r3, [r2, #0]
 8006f84:	e013      	b.n	8006fae <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f92:	461a      	mov	r2, r3
 8006f94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f98:	6013      	str	r3, [r2, #0]
 8006f9a:	e008      	b.n	8006fae <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	015a      	lsls	r2, r3, #5
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa8:	461a      	mov	r2, r3
 8006faa:	2300      	movs	r3, #0
 8006fac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fba:	461a      	mov	r2, r3
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fcc:	461a      	mov	r2, r3
 8006fce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006fd2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	613b      	str	r3, [r7, #16]
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d3b7      	bcc.n	8006f52 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	613b      	str	r3, [r7, #16]
 8006fe6:	e043      	b.n	8007070 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ffa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ffe:	d118      	bne.n	8007032 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10a      	bne.n	800701c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4413      	add	r3, r2
 800700e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007012:	461a      	mov	r2, r3
 8007014:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007018:	6013      	str	r3, [r2, #0]
 800701a:	e013      	b.n	8007044 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4413      	add	r3, r2
 8007024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007028:	461a      	mov	r2, r3
 800702a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800702e:	6013      	str	r3, [r2, #0]
 8007030:	e008      	b.n	8007044 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800703e:	461a      	mov	r2, r3
 8007040:	2300      	movs	r3, #0
 8007042:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007050:	461a      	mov	r2, r3
 8007052:	2300      	movs	r3, #0
 8007054:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	015a      	lsls	r2, r3, #5
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	4413      	add	r3, r2
 800705e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007062:	461a      	mov	r2, r3
 8007064:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007068:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	3301      	adds	r3, #1
 800706e:	613b      	str	r3, [r7, #16]
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	429a      	cmp	r2, r3
 8007076:	d3b7      	bcc.n	8006fe8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007086:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800708a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007098:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	f043 0210 	orr.w	r2, r3, #16
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	699a      	ldr	r2, [r3, #24]
 80070aa:	4b10      	ldr	r3, [pc, #64]	; (80070ec <USB_DevInit+0x294>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80070b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d005      	beq.n	80070c4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	f043 0208 	orr.w	r2, r3, #8
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80070c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d107      	bne.n	80070da <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070d2:	f043 0304 	orr.w	r3, r3, #4
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80070da:	7dfb      	ldrb	r3, [r7, #23]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3718      	adds	r7, #24
 80070e0:	46bd      	mov	sp, r7
 80070e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070e6:	b004      	add	sp, #16
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	803c3800 	.word	0x803c3800

080070f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	3301      	adds	r3, #1
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	4a12      	ldr	r2, [pc, #72]	; (8007150 <USB_FlushTxFifo+0x60>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d901      	bls.n	800710e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e01a      	b.n	8007144 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	2b00      	cmp	r3, #0
 8007114:	daf3      	bge.n	80070fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007116:	2300      	movs	r3, #0
 8007118:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	019b      	lsls	r3, r3, #6
 800711e:	f043 0220 	orr.w	r2, r3, #32
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	3301      	adds	r3, #1
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	4a08      	ldr	r2, [pc, #32]	; (8007150 <USB_FlushTxFifo+0x60>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d901      	bls.n	8007136 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e006      	b.n	8007144 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	f003 0320 	and.w	r3, r3, #32
 800713e:	2b20      	cmp	r3, #32
 8007140:	d0f1      	beq.n	8007126 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3714      	adds	r7, #20
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	00030d40 	.word	0x00030d40

08007154 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800715c:	2300      	movs	r3, #0
 800715e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	3301      	adds	r3, #1
 8007164:	60fb      	str	r3, [r7, #12]
 8007166:	4a11      	ldr	r2, [pc, #68]	; (80071ac <USB_FlushRxFifo+0x58>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d901      	bls.n	8007170 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e017      	b.n	80071a0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	2b00      	cmp	r3, #0
 8007176:	daf3      	bge.n	8007160 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2210      	movs	r2, #16
 8007180:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	3301      	adds	r3, #1
 8007186:	60fb      	str	r3, [r7, #12]
 8007188:	4a08      	ldr	r2, [pc, #32]	; (80071ac <USB_FlushRxFifo+0x58>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d901      	bls.n	8007192 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e006      	b.n	80071a0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	f003 0310 	and.w	r3, r3, #16
 800719a:	2b10      	cmp	r3, #16
 800719c:	d0f1      	beq.n	8007182 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	00030d40 	.word	0x00030d40

080071b0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	460b      	mov	r3, r1
 80071ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	78fb      	ldrb	r3, [r7, #3]
 80071ca:	68f9      	ldr	r1, [r7, #12]
 80071cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071d0:	4313      	orrs	r3, r2
 80071d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b085      	sub	sp, #20
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071fc:	f023 0303 	bic.w	r3, r3, #3
 8007200:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007210:	f043 0302 	orr.w	r3, r3, #2
 8007214:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	f003 0301 	and.w	r3, r3, #1
}
 8007234:	4618      	mov	r0, r3
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007248:	2300      	movs	r3, #0
 800724a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	3301      	adds	r3, #1
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	4a13      	ldr	r2, [pc, #76]	; (80072a0 <USB_CoreReset+0x60>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d901      	bls.n	800725c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e01a      	b.n	8007292 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	daf3      	bge.n	800724c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	f043 0201 	orr.w	r2, r3, #1
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3301      	adds	r3, #1
 8007278:	60fb      	str	r3, [r7, #12]
 800727a:	4a09      	ldr	r2, [pc, #36]	; (80072a0 <USB_CoreReset+0x60>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d901      	bls.n	8007284 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e006      	b.n	8007292 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	f003 0301 	and.w	r3, r3, #1
 800728c:	2b01      	cmp	r3, #1
 800728e:	d0f1      	beq.n	8007274 <USB_CoreReset+0x34>

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	00030d40 	.word	0x00030d40

080072a4 <Hex2Num>:
 * @brief  Convert char in Hex format to integer.
 * @param  a: character to convert
 * @retval integer value.
 */

static uint8_t Hex2Num(char a) {
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	4603      	mov	r3, r0
 80072ac:	71fb      	strb	r3, [r7, #7]
	if (a >= '0' && a <= '9') { /* Char is num */
 80072ae:	79fb      	ldrb	r3, [r7, #7]
 80072b0:	2b2f      	cmp	r3, #47	; 0x2f
 80072b2:	d906      	bls.n	80072c2 <Hex2Num+0x1e>
 80072b4:	79fb      	ldrb	r3, [r7, #7]
 80072b6:	2b39      	cmp	r3, #57	; 0x39
 80072b8:	d803      	bhi.n	80072c2 <Hex2Num+0x1e>
		return a - '0';
 80072ba:	79fb      	ldrb	r3, [r7, #7]
 80072bc:	3b30      	subs	r3, #48	; 0x30
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	e014      	b.n	80072ec <Hex2Num+0x48>
	} else if (a >= 'a' && a <= 'f') { /* Char is lowercase character A - Z (hex) */
 80072c2:	79fb      	ldrb	r3, [r7, #7]
 80072c4:	2b60      	cmp	r3, #96	; 0x60
 80072c6:	d906      	bls.n	80072d6 <Hex2Num+0x32>
 80072c8:	79fb      	ldrb	r3, [r7, #7]
 80072ca:	2b66      	cmp	r3, #102	; 0x66
 80072cc:	d803      	bhi.n	80072d6 <Hex2Num+0x32>
		return (a - 'a') + 10;
 80072ce:	79fb      	ldrb	r3, [r7, #7]
 80072d0:	3b57      	subs	r3, #87	; 0x57
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	e00a      	b.n	80072ec <Hex2Num+0x48>
	} else if (a >= 'A' && a <= 'F') { /* Char is uppercase character A - Z (hex) */
 80072d6:	79fb      	ldrb	r3, [r7, #7]
 80072d8:	2b40      	cmp	r3, #64	; 0x40
 80072da:	d906      	bls.n	80072ea <Hex2Num+0x46>
 80072dc:	79fb      	ldrb	r3, [r7, #7]
 80072de:	2b46      	cmp	r3, #70	; 0x46
 80072e0:	d803      	bhi.n	80072ea <Hex2Num+0x46>
		return (a - 'A') + 10;
 80072e2:	79fb      	ldrb	r3, [r7, #7]
 80072e4:	3b37      	subs	r3, #55	; 0x37
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	e000      	b.n	80072ec <Hex2Num+0x48>
	}

	return 0;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <ParseHexNumber>:
 * @brief  Extract a hex number from a string.
 * @param  ptr: pointer to string
 * @param  cnt: pointer to the number of parsed digit
 * @retval Hex value.
 */
static uint32_t ParseHexNumber(char *ptr, uint8_t *cnt) {
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
	uint32_t sum = 0;
 8007302:	2300      	movs	r3, #0
 8007304:	60fb      	str	r3, [r7, #12]
	uint8_t i = 0;
 8007306:	2300      	movs	r3, #0
 8007308:	72fb      	strb	r3, [r7, #11]

	while (CHARISHEXNUM(*ptr)) { /* Parse number */
 800730a:	e012      	b.n	8007332 <ParseHexNumber+0x3a>
		sum <<= 4;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	011b      	lsls	r3, r3, #4
 8007310:	60fb      	str	r3, [r7, #12]
		sum += Hex2Num(*ptr);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	4618      	mov	r0, r3
 8007318:	f7ff ffc4 	bl	80072a4 <Hex2Num>
 800731c:	4603      	mov	r3, r0
 800731e:	461a      	mov	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	4413      	add	r3, r2
 8007324:	60fb      	str	r3, [r7, #12]
		ptr++;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	3301      	adds	r3, #1
 800732a:	607b      	str	r3, [r7, #4]
		i++;
 800732c:	7afb      	ldrb	r3, [r7, #11]
 800732e:	3301      	adds	r3, #1
 8007330:	72fb      	strb	r3, [r7, #11]
	while (CHARISHEXNUM(*ptr)) { /* Parse number */
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	2b2f      	cmp	r3, #47	; 0x2f
 8007338:	d903      	bls.n	8007342 <ParseHexNumber+0x4a>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b39      	cmp	r3, #57	; 0x39
 8007340:	d9e4      	bls.n	800730c <ParseHexNumber+0x14>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	2b60      	cmp	r3, #96	; 0x60
 8007348:	d903      	bls.n	8007352 <ParseHexNumber+0x5a>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	2b66      	cmp	r3, #102	; 0x66
 8007350:	d9dc      	bls.n	800730c <ParseHexNumber+0x14>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	2b40      	cmp	r3, #64	; 0x40
 8007358:	d903      	bls.n	8007362 <ParseHexNumber+0x6a>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	2b46      	cmp	r3, #70	; 0x46
 8007360:	d9d4      	bls.n	800730c <ParseHexNumber+0x14>
	}

	if (cnt != NULL) { /* Save number of characters used for number */
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d002      	beq.n	800736e <ParseHexNumber+0x76>
		*cnt = i;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	7afa      	ldrb	r2, [r7, #11]
 800736c:	701a      	strb	r2, [r3, #0]
	}
	return sum; /* Return number */
 800736e:	68fb      	ldr	r3, [r7, #12]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <ParseNumber>:
 * @brief  Parses and returns number from string.
 * @param  ptr: pointer to string
 * @param  cnt: pointer to the number of parsed digit
 * @retval integer value.
 */
static int32_t ParseNumber(char *ptr, uint8_t *cnt) {
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
	uint8_t minus = 0, i = 0;
 8007382:	2300      	movs	r3, #0
 8007384:	73fb      	strb	r3, [r7, #15]
 8007386:	2300      	movs	r3, #0
 8007388:	73bb      	strb	r3, [r7, #14]
	int32_t sum = 0;
 800738a:	2300      	movs	r3, #0
 800738c:	60bb      	str	r3, [r7, #8]

	if (*ptr == '-') { /* Check for minus character */
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	2b2d      	cmp	r3, #45	; 0x2d
 8007394:	d119      	bne.n	80073ca <ParseNumber+0x52>
		minus = 1;
 8007396:	2301      	movs	r3, #1
 8007398:	73fb      	strb	r3, [r7, #15]
		ptr++;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	3301      	adds	r3, #1
 800739e:	607b      	str	r3, [r7, #4]
		i++;
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
 80073a2:	3301      	adds	r3, #1
 80073a4:	73bb      	strb	r3, [r7, #14]
	}
	while (CHARISNUM(*ptr)) { /* Parse number */
 80073a6:	e010      	b.n	80073ca <ParseNumber+0x52>
		sum = 10 * sum + CHAR2NUM(*ptr);
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	4613      	mov	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	4413      	add	r3, r2
 80073b0:	005b      	lsls	r3, r3, #1
 80073b2:	461a      	mov	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	3b30      	subs	r3, #48	; 0x30
 80073ba:	4413      	add	r3, r2
 80073bc:	60bb      	str	r3, [r7, #8]
		ptr++;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	3301      	adds	r3, #1
 80073c2:	607b      	str	r3, [r7, #4]
		i++;
 80073c4:	7bbb      	ldrb	r3, [r7, #14]
 80073c6:	3301      	adds	r3, #1
 80073c8:	73bb      	strb	r3, [r7, #14]
	while (CHARISNUM(*ptr)) { /* Parse number */
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	2b2f      	cmp	r3, #47	; 0x2f
 80073d0:	d903      	bls.n	80073da <ParseNumber+0x62>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	2b39      	cmp	r3, #57	; 0x39
 80073d8:	d9e6      	bls.n	80073a8 <ParseNumber+0x30>
	}
	if (cnt != NULL) { /* Save number of characters used for number */
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d002      	beq.n	80073e6 <ParseNumber+0x6e>
		*cnt = i;
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	7bba      	ldrb	r2, [r7, #14]
 80073e4:	701a      	strb	r2, [r3, #0]
	}
	if (minus) { /* Minus detected */
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <ParseNumber+0x7a>
		return 0 - sum;
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	425b      	negs	r3, r3
 80073f0:	e000      	b.n	80073f4 <ParseNumber+0x7c>
	}
	return sum; /* Return number */
 80073f2:	68bb      	ldr	r3, [r7, #8]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <ParseMAC>:
 * @brief  Parses and returns MAC address.
 * @param  ptr: pointer to string
 * @param  arr: pointer to MAC array
 * @retval None.
 */
static void ParseMAC(char *ptr, uint8_t *arr) {
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
	uint8_t hexnum = 0, hexcnt;
 800740a:	2300      	movs	r3, #0
 800740c:	73fb      	strb	r3, [r7, #15]

	while (*ptr) {
 800740e:	e019      	b.n	8007444 <ParseMAC+0x44>
		hexcnt = 1;
 8007410:	2301      	movs	r3, #1
 8007412:	73bb      	strb	r3, [r7, #14]
		if (*ptr != ':') {
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	2b3a      	cmp	r3, #58	; 0x3a
 800741a:	d00e      	beq.n	800743a <ParseMAC+0x3a>
			arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 800741c:	f107 030e 	add.w	r3, r7, #14
 8007420:	4619      	mov	r1, r3
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7ff ff68 	bl	80072f8 <ParseHexNumber>
 8007428:	4601      	mov	r1, r0
 800742a:	7bfb      	ldrb	r3, [r7, #15]
 800742c:	1c5a      	adds	r2, r3, #1
 800742e:	73fa      	strb	r2, [r7, #15]
 8007430:	461a      	mov	r2, r3
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	4413      	add	r3, r2
 8007436:	b2ca      	uxtb	r2, r1
 8007438:	701a      	strb	r2, [r3, #0]
		}
		ptr = ptr + hexcnt;
 800743a:	7bbb      	ldrb	r3, [r7, #14]
 800743c:	461a      	mov	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4413      	add	r3, r2
 8007442:	607b      	str	r3, [r7, #4]
	while (*ptr) {
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1e1      	bne.n	8007410 <ParseMAC+0x10>
	}
}
 800744c:	bf00      	nop
 800744e:	bf00      	nop
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <ParseIP>:
 * @brief  Parses and returns IP address.
 * @param  ptr: pointer to string
 * @param  arr: pointer to IP array
 * @retval None.
 */
static void ParseIP(char *ptr, uint8_t *arr) {
 8007456:	b580      	push	{r7, lr}
 8007458:	b084      	sub	sp, #16
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
 800745e:	6039      	str	r1, [r7, #0]
	uint8_t hexnum = 0, hexcnt;
 8007460:	2300      	movs	r3, #0
 8007462:	73fb      	strb	r3, [r7, #15]

	while (*ptr) {
 8007464:	e019      	b.n	800749a <ParseIP+0x44>
		hexcnt = 1;
 8007466:	2301      	movs	r3, #1
 8007468:	73bb      	strb	r3, [r7, #14]
		if (*ptr != '.') {
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	2b2e      	cmp	r3, #46	; 0x2e
 8007470:	d00e      	beq.n	8007490 <ParseIP+0x3a>
			arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8007472:	f107 030e 	add.w	r3, r7, #14
 8007476:	4619      	mov	r1, r3
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7ff ff7d 	bl	8007378 <ParseNumber>
 800747e:	4601      	mov	r1, r0
 8007480:	7bfb      	ldrb	r3, [r7, #15]
 8007482:	1c5a      	adds	r2, r3, #1
 8007484:	73fa      	strb	r2, [r7, #15]
 8007486:	461a      	mov	r2, r3
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	4413      	add	r3, r2
 800748c:	b2ca      	uxtb	r2, r1
 800748e:	701a      	strb	r2, [r3, #0]
		}
		ptr = ptr + hexcnt;
 8007490:	7bbb      	ldrb	r3, [r7, #14]
 8007492:	461a      	mov	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4413      	add	r3, r2
 8007498:	607b      	str	r3, [r7, #4]
	while (*ptr) {
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1e1      	bne.n	8007466 <ParseIP+0x10>
	}
}
 80074a2:	bf00      	nop
 80074a4:	bf00      	nop
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <AT_ParseInfo>:
 * @brief  Parses ES module informations and save them in the handle.
 * @param  Obj: pointer to module handle
 * @param  ptr: pointer to string
 * @retval None.
 */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata) {
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
	char *ptr;
	uint8_t num = 0;
 80074b6:	2300      	movs	r3, #0
 80074b8:	72fb      	strb	r3, [r7, #11]

	ptr = strtok((char*) pdata + 2, ",");
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	3302      	adds	r3, #2
 80074be:	4934      	ldr	r1, [pc, #208]	; (8007590 <AT_ParseInfo+0xe4>)
 80074c0:	4618      	mov	r0, r3
 80074c2:	f005 f89d 	bl	800c600 <strtok>
 80074c6:	60f8      	str	r0, [r7, #12]

	while (ptr != NULL) {
 80074c8:	e05a      	b.n	8007580 <AT_ParseInfo+0xd4>
		switch (num++) {
 80074ca:	7afb      	ldrb	r3, [r7, #11]
 80074cc:	1c5a      	adds	r2, r3, #1
 80074ce:	72fa      	strb	r2, [r7, #11]
 80074d0:	2b06      	cmp	r3, #6
 80074d2:	d84f      	bhi.n	8007574 <AT_ParseInfo+0xc8>
 80074d4:	a201      	add	r2, pc, #4	; (adr r2, 80074dc <AT_ParseInfo+0x30>)
 80074d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074da:	bf00      	nop
 80074dc:	080074f9 	.word	0x080074f9
 80074e0:	08007507 	.word	0x08007507
 80074e4:	08007517 	.word	0x08007517
 80074e8:	08007527 	.word	0x08007527
 80074ec:	08007537 	.word	0x08007537
 80074f0:	08007547 	.word	0x08007547
 80074f4:	0800755b 	.word	0x0800755b
		case 0:
			strncpy((char*) Obj->Product_ID, ptr, ES_WIFI_PRODUCT_ID_SIZE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2220      	movs	r2, #32
 80074fc:	68f9      	ldr	r1, [r7, #12]
 80074fe:	4618      	mov	r0, r3
 8007500:	f005 f854 	bl	800c5ac <strncpy>
			break;
 8007504:	e037      	b.n	8007576 <AT_ParseInfo+0xca>

		case 1:
			strncpy((char*) Obj->FW_Rev, ptr, ES_WIFI_FW_REV_SIZE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	3320      	adds	r3, #32
 800750a:	2218      	movs	r2, #24
 800750c:	68f9      	ldr	r1, [r7, #12]
 800750e:	4618      	mov	r0, r3
 8007510:	f005 f84c 	bl	800c5ac <strncpy>
			break;
 8007514:	e02f      	b.n	8007576 <AT_ParseInfo+0xca>

		case 2:
			strncpy((char*) Obj->API_Rev, ptr, ES_WIFI_API_REV_SIZE);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	3338      	adds	r3, #56	; 0x38
 800751a:	2210      	movs	r2, #16
 800751c:	68f9      	ldr	r1, [r7, #12]
 800751e:	4618      	mov	r0, r3
 8007520:	f005 f844 	bl	800c5ac <strncpy>
			break;
 8007524:	e027      	b.n	8007576 <AT_ParseInfo+0xca>

		case 3:
			strncpy((char*) Obj->Stack_Rev, ptr, ES_WIFI_STACK_REV_SIZE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	3348      	adds	r3, #72	; 0x48
 800752a:	2210      	movs	r2, #16
 800752c:	68f9      	ldr	r1, [r7, #12]
 800752e:	4618      	mov	r0, r3
 8007530:	f005 f83c 	bl	800c5ac <strncpy>
			break;
 8007534:	e01f      	b.n	8007576 <AT_ParseInfo+0xca>

		case 4:
			strncpy((char*) Obj->RTOS_Rev, ptr, ES_WIFI_RTOS_REV_SIZE);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	3358      	adds	r3, #88	; 0x58
 800753a:	2210      	movs	r2, #16
 800753c:	68f9      	ldr	r1, [r7, #12]
 800753e:	4618      	mov	r0, r3
 8007540:	f005 f834 	bl	800c5ac <strncpy>
			break;
 8007544:	e017      	b.n	8007576 <AT_ParseInfo+0xca>

		case 5:
			Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8007546:	2100      	movs	r1, #0
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f7ff ff15 	bl	8007378 <ParseNumber>
 800754e:	4603      	mov	r3, r0
 8007550:	461a      	mov	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8007558:	e00d      	b.n	8007576 <AT_ParseInfo+0xca>

		case 6:
			ptr = strtok(ptr, "\r");
 800755a:	490e      	ldr	r1, [pc, #56]	; (8007594 <AT_ParseInfo+0xe8>)
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f005 f84f 	bl	800c600 <strtok>
 8007562:	60f8      	str	r0, [r7, #12]
			strncpy((char*) Obj->Product_Name, ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	3368      	adds	r3, #104	; 0x68
 8007568:	2220      	movs	r2, #32
 800756a:	68f9      	ldr	r1, [r7, #12]
 800756c:	4618      	mov	r0, r3
 800756e:	f005 f81d 	bl	800c5ac <strncpy>
			break;
 8007572:	e000      	b.n	8007576 <AT_ParseInfo+0xca>

		default:
			break;
 8007574:	bf00      	nop
		}
		ptr = strtok(NULL, ",");
 8007576:	4906      	ldr	r1, [pc, #24]	; (8007590 <AT_ParseInfo+0xe4>)
 8007578:	2000      	movs	r0, #0
 800757a:	f005 f841 	bl	800c600 <strtok>
 800757e:	60f8      	str	r0, [r7, #12]
	while (ptr != NULL) {
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1a1      	bne.n	80074ca <AT_ParseInfo+0x1e>
	}
}
 8007586:	bf00      	nop
 8007588:	bf00      	nop
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	0800d9f4 	.word	0x0800d9f4
 8007594:	0800d9f8 	.word	0x0800d9f8

08007598 <AT_ParseConnSettings>:
 * @brief  Parses WIFI connection settings.
 * @param  NetSettings: settings
 * @param  pdata: pointer to data
 * @retval None.
 */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings) {
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
	uint8_t num = 0;
 80075a2:	2300      	movs	r3, #0
 80075a4:	73fb      	strb	r3, [r7, #15]
	char *ptr;

	ptr = strtok(pdata + 2, ",");
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	3302      	adds	r3, #2
 80075aa:	4952      	ldr	r1, [pc, #328]	; (80076f4 <AT_ParseConnSettings+0x15c>)
 80075ac:	4618      	mov	r0, r3
 80075ae:	f005 f827 	bl	800c600 <strtok>
 80075b2:	60b8      	str	r0, [r7, #8]

	while (ptr != NULL) {
 80075b4:	e095      	b.n	80076e2 <AT_ParseConnSettings+0x14a>
		switch (num++) {
 80075b6:	7bfb      	ldrb	r3, [r7, #15]
 80075b8:	1c5a      	adds	r2, r3, #1
 80075ba:	73fa      	strb	r2, [r7, #15]
 80075bc:	2b0b      	cmp	r3, #11
 80075be:	d87f      	bhi.n	80076c0 <AT_ParseConnSettings+0x128>
 80075c0:	a201      	add	r2, pc, #4	; (adr r2, 80075c8 <AT_ParseConnSettings+0x30>)
 80075c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c6:	bf00      	nop
 80075c8:	080075f9 	.word	0x080075f9
 80075cc:	08007607 	.word	0x08007607
 80075d0:	08007617 	.word	0x08007617
 80075d4:	0800762b 	.word	0x0800762b
 80075d8:	0800763f 	.word	0x0800763f
 80075dc:	08007653 	.word	0x08007653
 80075e0:	08007661 	.word	0x08007661
 80075e4:	0800766f 	.word	0x0800766f
 80075e8:	0800767d 	.word	0x0800767d
 80075ec:	0800768b 	.word	0x0800768b
 80075f0:	08007699 	.word	0x08007699
 80075f4:	080076ad 	.word	0x080076ad
		case 0:
			strncpy((char*) NetSettings->SSID, ptr,
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	2221      	movs	r2, #33	; 0x21
 80075fc:	68b9      	ldr	r1, [r7, #8]
 80075fe:	4618      	mov	r0, r3
 8007600:	f004 ffd4 	bl	800c5ac <strncpy>
			ES_WIFI_MAX_SSID_NAME_SIZE + 1);
			break;
 8007604:	e05d      	b.n	80076c2 <AT_ParseConnSettings+0x12a>

		case 1:
			strncpy((char*) NetSettings->pswd, ptr,
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	3321      	adds	r3, #33	; 0x21
 800760a:	2221      	movs	r2, #33	; 0x21
 800760c:	68b9      	ldr	r1, [r7, #8]
 800760e:	4618      	mov	r0, r3
 8007610:	f004 ffcc 	bl	800c5ac <strncpy>
			ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
			break;
 8007614:	e055      	b.n	80076c2 <AT_ParseConnSettings+0x12a>

		case 2:
			NetSettings->Security = (ES_WIFI_SecurityType_t) ParseNumber(ptr,
 8007616:	2100      	movs	r1, #0
 8007618:	68b8      	ldr	r0, [r7, #8]
 800761a:	f7ff fead 	bl	8007378 <ParseNumber>
 800761e:	4603      	mov	r3, r0
 8007620:	b2da      	uxtb	r2, r3
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			NULL);
			break;
 8007628:	e04b      	b.n	80076c2 <AT_ParseConnSettings+0x12a>

		case 3:
			NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 800762a:	2100      	movs	r1, #0
 800762c:	68b8      	ldr	r0, [r7, #8]
 800762e:	f7ff fea3 	bl	8007378 <ParseNumber>
 8007632:	4603      	mov	r3, r0
 8007634:	b2da      	uxtb	r2, r3
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
			break;
 800763c:	e041      	b.n	80076c2 <AT_ParseConnSettings+0x12a>

		case 4:
			NetSettings->IP_Ver = (ES_WIFI_IPVer_t) ParseNumber(ptr, NULL);
 800763e:	2100      	movs	r1, #0
 8007640:	68b8      	ldr	r0, [r7, #8]
 8007642:	f7ff fe99 	bl	8007378 <ParseNumber>
 8007646:	4603      	mov	r3, r0
 8007648:	b2da      	uxtb	r2, r3
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			break;
 8007650:	e037      	b.n	80076c2 <AT_ParseConnSettings+0x12a>

		case 5:
			ParseIP(ptr, NetSettings->IP_Addr);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	3348      	adds	r3, #72	; 0x48
 8007656:	4619      	mov	r1, r3
 8007658:	68b8      	ldr	r0, [r7, #8]
 800765a:	f7ff fefc 	bl	8007456 <ParseIP>
			break;
 800765e:	e030      	b.n	80076c2 <AT_ParseConnSettings+0x12a>

		case 6:
			ParseIP(ptr, NetSettings->IP_Mask);
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	334c      	adds	r3, #76	; 0x4c
 8007664:	4619      	mov	r1, r3
 8007666:	68b8      	ldr	r0, [r7, #8]
 8007668:	f7ff fef5 	bl	8007456 <ParseIP>
			break;
 800766c:	e029      	b.n	80076c2 <AT_ParseConnSettings+0x12a>

		case 7:
			ParseIP(ptr, NetSettings->Gateway_Addr);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	3350      	adds	r3, #80	; 0x50
 8007672:	4619      	mov	r1, r3
 8007674:	68b8      	ldr	r0, [r7, #8]
 8007676:	f7ff feee 	bl	8007456 <ParseIP>
			break;
 800767a:	e022      	b.n	80076c2 <AT_ParseConnSettings+0x12a>

		case 8:
			ParseIP(ptr, NetSettings->DNS1);
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	3354      	adds	r3, #84	; 0x54
 8007680:	4619      	mov	r1, r3
 8007682:	68b8      	ldr	r0, [r7, #8]
 8007684:	f7ff fee7 	bl	8007456 <ParseIP>
			break;
 8007688:	e01b      	b.n	80076c2 <AT_ParseConnSettings+0x12a>

		case 9:
			ParseIP(ptr, NetSettings->DNS2);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	3358      	adds	r3, #88	; 0x58
 800768e:	4619      	mov	r1, r3
 8007690:	68b8      	ldr	r0, [r7, #8]
 8007692:	f7ff fee0 	bl	8007456 <ParseIP>
			break;
 8007696:	e014      	b.n	80076c2 <AT_ParseConnSettings+0x12a>

		case 10:
			NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8007698:	2100      	movs	r1, #0
 800769a:	68b8      	ldr	r0, [r7, #8]
 800769c:	f7ff fe6c 	bl	8007378 <ParseNumber>
 80076a0:	4603      	mov	r3, r0
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			break;
 80076aa:	e00a      	b.n	80076c2 <AT_ParseConnSettings+0x12a>

		case 11:
			NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 80076ac:	2100      	movs	r1, #0
 80076ae:	68b8      	ldr	r0, [r7, #8]
 80076b0:	f7ff fe62 	bl	8007378 <ParseNumber>
 80076b4:	4603      	mov	r3, r0
 80076b6:	b2da      	uxtb	r2, r3
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			break;
 80076be:	e000      	b.n	80076c2 <AT_ParseConnSettings+0x12a>

		default:
			break;
 80076c0:	bf00      	nop
		}
		ptr = strtok(NULL, ",");
 80076c2:	490c      	ldr	r1, [pc, #48]	; (80076f4 <AT_ParseConnSettings+0x15c>)
 80076c4:	2000      	movs	r0, #0
 80076c6:	f004 ff9b 	bl	800c600 <strtok>
 80076ca:	60b8      	str	r0, [r7, #8]
		if ((ptr != NULL) && (ptr[-1] == ',')) { /* Ignore empty fields */
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d007      	beq.n	80076e2 <AT_ParseConnSettings+0x14a>
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	3b01      	subs	r3, #1
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	2b2c      	cmp	r3, #44	; 0x2c
 80076da:	d102      	bne.n	80076e2 <AT_ParseConnSettings+0x14a>
			num++;
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
 80076de:	3301      	adds	r3, #1
 80076e0:	73fb      	strb	r3, [r7, #15]
	while (ptr != NULL) {
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f47f af66 	bne.w	80075b6 <AT_ParseConnSettings+0x1e>
		}
	}
}
 80076ea:	bf00      	nop
 80076ec:	bf00      	nop
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	0800d9f4 	.word	0x0800d9f4

080076f8 <AT_ParseIsConnected>:
 * @brief  Parses the connection status
 * @param  pdata: pointer to data
 * @param  isConnected: pointer to result
 * @retval None.
 */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected) {
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
	*isConnected = (pdata[2] == '1') ? 1 : 0;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	3302      	adds	r3, #2
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	2b31      	cmp	r3, #49	; 0x31
 800770a:	bf0c      	ite	eq
 800770c:	2301      	moveq	r3, #1
 800770e:	2300      	movne	r3, #0
 8007710:	b2db      	uxtb	r3, r3
 8007712:	461a      	mov	r2, r3
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	701a      	strb	r2, [r3, #0]
}
 8007718:	bf00      	nop
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <AT_ExecuteCommand>:
 * @param  cmd: pointer to command string
 * @param  pdata: pointer to returned data
 * @retval Operation Status.
 */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t *cmd,
		uint8_t *pdata) {
 8007724:	b590      	push	{r4, r7, lr}
 8007726:	b087      	sub	sp, #28
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
	int ret = 0;
 8007730:	2300      	movs	r3, #0
 8007732:	613b      	str	r3, [r7, #16]
	int16_t recv_len = 0;
 8007734:	2300      	movs	r3, #0
 8007736:	82fb      	strh	r3, [r7, #22]
	LOCK_WIFI();

	ret = Obj->fops.IO_Send(cmd, strlen((char*) cmd), Obj->Timeout);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800773e:	68b8      	ldr	r0, [r7, #8]
 8007740:	f7f8 fd46 	bl	80001d0 <strlen>
 8007744:	4603      	mov	r3, r0
 8007746:	b299      	uxth	r1, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800774e:	461a      	mov	r2, r3
 8007750:	68b8      	ldr	r0, [r7, #8]
 8007752:	47a0      	blx	r4
 8007754:	4603      	mov	r3, r0
 8007756:	613b      	str	r3, [r7, #16]

	if (ret > 0) {
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	2b00      	cmp	r3, #0
 800775c:	dd3e      	ble.n	80077dc <AT_ExecuteCommand+0xb8>
		recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800776a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	4798      	blx	r3
 8007772:	4603      	mov	r3, r0
 8007774:	82fb      	strh	r3, [r7, #22]
		if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE)) {
 8007776:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800777a:	2b00      	cmp	r3, #0
 800777c:	dd27      	ble.n	80077ce <AT_ExecuteCommand+0xaa>
 800777e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007782:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007786:	dc22      	bgt.n	80077ce <AT_ExecuteCommand+0xaa>
			if (recv_len == ES_WIFI_DATA_SIZE) {
 8007788:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800778c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007790:	d105      	bne.n	800779e <AT_ExecuteCommand+0x7a>
				// ES_WIFI_DATA_SIZE maybe too small !!
				recv_len--;
 8007792:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007796:	b29b      	uxth	r3, r3
 8007798:	3b01      	subs	r3, #1
 800779a:	b29b      	uxth	r3, r3
 800779c:	82fb      	strh	r3, [r7, #22]
			}
			*(pdata + recv_len) = 0;
 800779e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	4413      	add	r3, r2
 80077a6:	2200      	movs	r2, #0
 80077a8:	701a      	strb	r2, [r3, #0]
			if (strstr((char*) pdata, AT_OK_STRING)) {
 80077aa:	490f      	ldr	r1, [pc, #60]	; (80077e8 <AT_ExecuteCommand+0xc4>)
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f004 ff10 	bl	800c5d2 <strstr>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d001      	beq.n	80077bc <AT_ExecuteCommand+0x98>
				UNLOCK_WIFI();
				return ES_WIFI_STATUS_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	e010      	b.n	80077de <AT_ExecuteCommand+0xba>
			} else if (strstr((char*) pdata, AT_ERROR_STRING)) {
 80077bc:	490b      	ldr	r1, [pc, #44]	; (80077ec <AT_ExecuteCommand+0xc8>)
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f004 ff07 	bl	800c5d2 <strstr>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d001      	beq.n	80077ce <AT_ExecuteCommand+0xaa>
				UNLOCK_WIFI();
				return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80077ca:	2305      	movs	r3, #5
 80077cc:	e007      	b.n	80077de <AT_ExecuteCommand+0xba>
			}
		}
		if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER) {
 80077ce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80077d2:	f113 0f04 	cmn.w	r3, #4
 80077d6:	d101      	bne.n	80077dc <AT_ExecuteCommand+0xb8>
			UNLOCK_WIFI();
			return ES_WIFI_STATUS_MODULE_CRASH;
 80077d8:	2306      	movs	r3, #6
 80077da:	e000      	b.n	80077de <AT_ExecuteCommand+0xba>
		}
	}UNLOCK_WIFI();
	return ES_WIFI_STATUS_IO_ERROR;
 80077dc:	2304      	movs	r3, #4
}
 80077de:	4618      	mov	r0, r3
 80077e0:	371c      	adds	r7, #28
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd90      	pop	{r4, r7, pc}
 80077e6:	bf00      	nop
 80077e8:	0800da08 	.word	0x0800da08
 80077ec:	0800da14 	.word	0x0800da14

080077f0 <AT_RequestSendData>:
 * @param  pdata: pointer to returned data
 * @retval Operation Status.
 */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t *cmd,
		uint8_t *pcmd_data, uint16_t len, uint8_t *pdata) {
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
 80077fc:	807b      	strh	r3, [r7, #2]
	int16_t send_len = 0;
 80077fe:	2300      	movs	r3, #0
 8007800:	82fb      	strh	r3, [r7, #22]
	int16_t recv_len = 0;
 8007802:	2300      	movs	r3, #0
 8007804:	82bb      	strh	r3, [r7, #20]
	uint16_t cmd_len = 0;
 8007806:	2300      	movs	r3, #0
 8007808:	827b      	strh	r3, [r7, #18]
	uint16_t n;

	LOCK_WIFI();
	cmd_len = strlen((char*) cmd);
 800780a:	68b8      	ldr	r0, [r7, #8]
 800780c:	f7f8 fce0 	bl	80001d0 <strlen>
 8007810:	4603      	mov	r3, r0
 8007812:	827b      	strh	r3, [r7, #18]

	/* can send only even number of byte on first send */
	if (cmd_len & 1)
 8007814:	8a7b      	ldrh	r3, [r7, #18]
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <AT_RequestSendData+0x32>
		return ES_WIFI_STATUS_ERROR;
 800781e:	2302      	movs	r3, #2
 8007820:	e053      	b.n	80078ca <AT_RequestSendData+0xda>
	n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800782e:	8a79      	ldrh	r1, [r7, #18]
 8007830:	68b8      	ldr	r0, [r7, #8]
 8007832:	4798      	blx	r3
 8007834:	4603      	mov	r3, r0
 8007836:	823b      	strh	r3, [r7, #16]
	if (n == cmd_len) {
 8007838:	8a3a      	ldrh	r2, [r7, #16]
 800783a:	8a7b      	ldrh	r3, [r7, #18]
 800783c:	429a      	cmp	r2, r3
 800783e:	d143      	bne.n	80078c8 <AT_RequestSendData+0xd8>
		send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800784c:	8879      	ldrh	r1, [r7, #2]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	4798      	blx	r3
 8007852:	4603      	mov	r3, r0
 8007854:	82fb      	strh	r3, [r7, #22]
		if (send_len == len) {
 8007856:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800785a:	887b      	ldrh	r3, [r7, #2]
 800785c:	429a      	cmp	r2, r3
 800785e:	d131      	bne.n	80078c4 <AT_RequestSendData+0xd4>
			recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800786c:	2100      	movs	r1, #0
 800786e:	6a38      	ldr	r0, [r7, #32]
 8007870:	4798      	blx	r3
 8007872:	4603      	mov	r3, r0
 8007874:	82bb      	strh	r3, [r7, #20]
			if (recv_len > 0) {
 8007876:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800787a:	2b00      	cmp	r3, #0
 800787c:	dd19      	ble.n	80078b2 <AT_RequestSendData+0xc2>
				*(pdata + recv_len) = 0;
 800787e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007882:	6a3a      	ldr	r2, [r7, #32]
 8007884:	4413      	add	r3, r2
 8007886:	2200      	movs	r2, #0
 8007888:	701a      	strb	r2, [r3, #0]
				if (strstr((char*) pdata, AT_OK_STRING)) {
 800788a:	4912      	ldr	r1, [pc, #72]	; (80078d4 <AT_RequestSendData+0xe4>)
 800788c:	6a38      	ldr	r0, [r7, #32]
 800788e:	f004 fea0 	bl	800c5d2 <strstr>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <AT_RequestSendData+0xac>
					UNLOCK_WIFI();
					return ES_WIFI_STATUS_OK;
 8007898:	2300      	movs	r3, #0
 800789a:	e016      	b.n	80078ca <AT_RequestSendData+0xda>
				} else if (strstr((char*) pdata, AT_ERROR_STRING)) {
 800789c:	490e      	ldr	r1, [pc, #56]	; (80078d8 <AT_RequestSendData+0xe8>)
 800789e:	6a38      	ldr	r0, [r7, #32]
 80078a0:	f004 fe97 	bl	800c5d2 <strstr>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <AT_RequestSendData+0xbe>
					UNLOCK_WIFI();
					return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80078aa:	2305      	movs	r3, #5
 80078ac:	e00d      	b.n	80078ca <AT_RequestSendData+0xda>
				} else {
					UNLOCK_WIFI();
					return ES_WIFI_STATUS_ERROR;
 80078ae:	2302      	movs	r3, #2
 80078b0:	e00b      	b.n	80078ca <AT_RequestSendData+0xda>
				}
			}UNLOCK_WIFI();
			if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER) {
 80078b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80078b6:	f113 0f04 	cmn.w	r3, #4
 80078ba:	d101      	bne.n	80078c0 <AT_RequestSendData+0xd0>
				return ES_WIFI_STATUS_MODULE_CRASH;
 80078bc:	2306      	movs	r3, #6
 80078be:	e004      	b.n	80078ca <AT_RequestSendData+0xda>
			}
			return ES_WIFI_STATUS_ERROR;
 80078c0:	2302      	movs	r3, #2
 80078c2:	e002      	b.n	80078ca <AT_RequestSendData+0xda>
		} else {
			return ES_WIFI_STATUS_ERROR;
 80078c4:	2302      	movs	r3, #2
 80078c6:	e000      	b.n	80078ca <AT_RequestSendData+0xda>
		}
	}
	return ES_WIFI_STATUS_IO_ERROR;
 80078c8:	2304      	movs	r3, #4
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3718      	adds	r7, #24
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	0800da08 	.word	0x0800da08
 80078d8:	0800da14 	.word	0x0800da14

080078dc <AT_RequestReceiveData>:
 * @param  Reqlen : requested Data length.
 * @param  ReadData : pointer to received data length.
 * @retval Operation Status.
 */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj,
		uint8_t *cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData) {
 80078dc:	b590      	push	{r4, r7, lr}
 80078de:	b087      	sub	sp, #28
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
 80078e8:	807b      	strh	r3, [r7, #2]
	int len;
	uint8_t *p = Obj->CmdData;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80078f0:	613b      	str	r3, [r7, #16]

	LOCK_WIFI();
	if (Obj->fops.IO_Send(cmd, strlen((char*) cmd), Obj->Timeout) > 0) {
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 80078f8:	68b8      	ldr	r0, [r7, #8]
 80078fa:	f7f8 fc69 	bl	80001d0 <strlen>
 80078fe:	4603      	mov	r3, r0
 8007900:	b299      	uxth	r1, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8007908:	461a      	mov	r2, r3
 800790a:	68b8      	ldr	r0, [r7, #8]
 800790c:	47a0      	blx	r4
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	dd6f      	ble.n	80079f4 <AT_RequestReceiveData+0x118>
		len = Obj->fops.IO_Receive(p, 0, Obj->Timeout);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007920:	2100      	movs	r1, #0
 8007922:	6938      	ldr	r0, [r7, #16]
 8007924:	4798      	blx	r3
 8007926:	4603      	mov	r3, r0
 8007928:	617b      	str	r3, [r7, #20]
		if ((p[0] != '\r') || (p[1] != '\n')) {
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	2b0d      	cmp	r3, #13
 8007930:	d104      	bne.n	800793c <AT_RequestReceiveData+0x60>
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	3301      	adds	r3, #1
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	2b0a      	cmp	r3, #10
 800793a:	d001      	beq.n	8007940 <AT_RequestReceiveData+0x64>
			return ES_WIFI_STATUS_IO_ERROR;
 800793c:	2304      	movs	r3, #4
 800793e:	e05a      	b.n	80079f6 <AT_RequestReceiveData+0x11a>
		}
		len -= 2;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	3b02      	subs	r3, #2
 8007944:	617b      	str	r3, [r7, #20]
		p += 2;
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	3302      	adds	r3, #2
 800794a:	613b      	str	r3, [r7, #16]
		if (len >= AT_OK_STRING_LEN) {
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	2b07      	cmp	r3, #7
 8007950:	d94a      	bls.n	80079e8 <AT_RequestReceiveData+0x10c>
			while (len && (p[len - 1] == 0x15))
 8007952:	e002      	b.n	800795a <AT_RequestReceiveData+0x7e>
				len--;
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	3b01      	subs	r3, #1
 8007958:	617b      	str	r3, [r7, #20]
			while (len && (p[len - 1] == 0x15))
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d006      	beq.n	800796e <AT_RequestReceiveData+0x92>
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	3b01      	subs	r3, #1
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	4413      	add	r3, r2
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	2b15      	cmp	r3, #21
 800796c:	d0f2      	beq.n	8007954 <AT_RequestReceiveData+0x78>
			p[len] = '\0';
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	693a      	ldr	r2, [r7, #16]
 8007972:	4413      	add	r3, r2
 8007974:	2200      	movs	r2, #0
 8007976:	701a      	strb	r2, [r3, #0]
			if (strstr((char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING)) {
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	3b08      	subs	r3, #8
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	4413      	add	r3, r2
 8007980:	491f      	ldr	r1, [pc, #124]	; (8007a00 <AT_RequestReceiveData+0x124>)
 8007982:	4618      	mov	r0, r3
 8007984:	f004 fe25 	bl	800c5d2 <strstr>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d016      	beq.n	80079bc <AT_RequestReceiveData+0xe0>
				*ReadData = len - AT_OK_STRING_LEN;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	b29b      	uxth	r3, r3
 8007992:	3b08      	subs	r3, #8
 8007994:	b29a      	uxth	r2, r3
 8007996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007998:	801a      	strh	r2, [r3, #0]
				if (*ReadData > Reqlen) {
 800799a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	887a      	ldrh	r2, [r7, #2]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d202      	bcs.n	80079aa <AT_RequestReceiveData+0xce>
					*ReadData = Reqlen;
 80079a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a6:	887a      	ldrh	r2, [r7, #2]
 80079a8:	801a      	strh	r2, [r3, #0]
				}
				memcpy(pdata, p, *ReadData);
 80079aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ac:	881b      	ldrh	r3, [r3, #0]
 80079ae:	461a      	mov	r2, r3
 80079b0:	6939      	ldr	r1, [r7, #16]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f004 fb76 	bl	800c0a4 <memcpy>
				UNLOCK_WIFI();
				return ES_WIFI_STATUS_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	e01c      	b.n	80079f6 <AT_RequestReceiveData+0x11a>
			} else if (memcmp((char*) p + len - AT_DELIMETER_LEN,
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	3b04      	subs	r3, #4
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	4413      	add	r3, r2
 80079c4:	2204      	movs	r2, #4
 80079c6:	490f      	ldr	r1, [pc, #60]	; (8007a04 <AT_RequestReceiveData+0x128>)
 80079c8:	4618      	mov	r0, r3
 80079ca:	f004 fb5b 	bl	800c084 <memcmp>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d104      	bne.n	80079de <AT_RequestReceiveData+0x102>
			AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0) {
				*ReadData = 0;
 80079d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d6:	2200      	movs	r2, #0
 80079d8:	801a      	strh	r2, [r3, #0]
				UNLOCK_WIFI();
				return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80079da:	2305      	movs	r3, #5
 80079dc:	e00b      	b.n	80079f6 <AT_RequestReceiveData+0x11a>
			}

			UNLOCK_WIFI();
			*ReadData = 0;
 80079de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e0:	2200      	movs	r2, #0
 80079e2:	801a      	strh	r2, [r3, #0]
			return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80079e4:	2305      	movs	r3, #5
 80079e6:	e006      	b.n	80079f6 <AT_RequestReceiveData+0x11a>
		}
		if (len == ES_WIFI_ERROR_STUFFING_FOREVER) {
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	f113 0f04 	cmn.w	r3, #4
 80079ee:	d101      	bne.n	80079f4 <AT_RequestReceiveData+0x118>
			UNLOCK_WIFI();
			return ES_WIFI_STATUS_MODULE_CRASH;
 80079f0:	2306      	movs	r3, #6
 80079f2:	e000      	b.n	80079f6 <AT_RequestReceiveData+0x11a>
		}
	}UNLOCK_WIFI();
	return ES_WIFI_STATUS_IO_ERROR;
 80079f4:	2304      	movs	r3, #4
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	371c      	adds	r7, #28
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd90      	pop	{r4, r7, pc}
 80079fe:	bf00      	nop
 8007a00:	0800da08 	.word	0x0800da08
 8007a04:	0800da1c 	.word	0x0800da1c

08007a08 <ES_WIFI_Init>:
/**
 * @brief  Initialize WIFI module.
 * @param  Obj: pointer to module handle
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj) {
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
	ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8007a10:	2302      	movs	r3, #2
 8007a12:	73fb      	strb	r3, [r7, #15]

	LOCK_WIFI();

	Obj->Timeout = ES_WIFI_TIMEOUT;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f247 5230 	movw	r2, #30000	; 0x7530
 8007a1a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

	if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0) {
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8007a24:	2000      	movs	r0, #0
 8007a26:	4798      	blx	r3
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d113      	bne.n	8007a56 <ES_WIFI_Init+0x4e>
		ret = AT_ExecuteCommand(Obj, (uint8_t*) "I?\r\n", Obj->CmdData);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007a34:	461a      	mov	r2, r3
 8007a36:	490a      	ldr	r1, [pc, #40]	; (8007a60 <ES_WIFI_Init+0x58>)
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f7ff fe73 	bl	8007724 <AT_ExecuteCommand>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	73fb      	strb	r3, [r7, #15]

		if (ret == ES_WIFI_STATUS_OK) {
 8007a42:	7bfb      	ldrb	r3, [r7, #15]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d106      	bne.n	8007a56 <ES_WIFI_Init+0x4e>
			AT_ParseInfo(Obj, Obj->CmdData);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f7ff fd2b 	bl	80074ac <AT_ParseInfo>
		}
	}UNLOCK_WIFI();
	return ret;
 8007a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	0800da24 	.word	0x0800da24

08007a64 <ES_WIFI_RegisterBusIO>:
 * @param  Obj: pointer to module handle
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj,
		IO_Init_Func IO_Init, IO_DeInit_Func IO_DeInit, IO_Delay_Func IO_Delay,
		IO_Send_Func IO_Send, IO_Receive_Func IO_Receive) {
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
 8007a70:	603b      	str	r3, [r7, #0]
	if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive) {
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00b      	beq.n	8007a90 <ES_WIFI_RegisterBusIO+0x2c>
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d008      	beq.n	8007a90 <ES_WIFI_RegisterBusIO+0x2c>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d005      	beq.n	8007a90 <ES_WIFI_RegisterBusIO+0x2c>
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d002      	beq.n	8007a90 <ES_WIFI_RegisterBusIO+0x2c>
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <ES_WIFI_RegisterBusIO+0x30>
		return ES_WIFI_STATUS_ERROR;
 8007a90:	2302      	movs	r3, #2
 8007a92:	e014      	b.n	8007abe <ES_WIFI_RegisterBusIO+0x5a>
	}

	Obj->fops.IO_Init = IO_Init;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	Obj->fops.IO_DeInit = IO_DeInit;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	Obj->fops.IO_Send = IO_Send;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	69ba      	ldr	r2, [r7, #24]
 8007aa8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	Obj->fops.IO_Receive = IO_Receive;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	69fa      	ldr	r2, [r7, #28]
 8007ab0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	Obj->fops.IO_Delay = IO_Delay;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	return ES_WIFI_STATUS_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3714      	adds	r7, #20
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
	...

08007acc <ES_WIFI_Connect>:
 * @param  Password: the Access point password.
 * @param  SecType: Security type.
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
		const char *Password, ES_WIFI_SecurityType_t SecType) {
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
 8007ad8:	70fb      	strb	r3, [r7, #3]
	ES_WIFI_Status_t ret;
	LOCK_WIFI();

	sprintf((char*) Obj->CmdData, "C1=%s\r", SSID);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	4932      	ldr	r1, [pc, #200]	; (8007bac <ES_WIFI_Connect+0xe0>)
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f004 fcdb 	bl	800c4a0 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007af6:	461a      	mov	r2, r3
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f7ff fe13 	bl	8007724 <AT_ExecuteCommand>
 8007afe:	4603      	mov	r3, r0
 8007b00:	75fb      	strb	r3, [r7, #23]
	if (ret == ES_WIFI_STATUS_OK) {
 8007b02:	7dfb      	ldrb	r3, [r7, #23]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d14b      	bne.n	8007ba0 <ES_WIFI_Connect+0xd4>
		sprintf((char*) Obj->CmdData, "C2=%s\r", Password);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	4927      	ldr	r1, [pc, #156]	; (8007bb0 <ES_WIFI_Connect+0xe4>)
 8007b12:	4618      	mov	r0, r3
 8007b14:	f004 fcc4 	bl	800c4a0 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007b24:	461a      	mov	r2, r3
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f7ff fdfc 	bl	8007724 <AT_ExecuteCommand>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	75fb      	strb	r3, [r7, #23]

		if (ret == ES_WIFI_STATUS_OK) {
 8007b30:	7dfb      	ldrb	r3, [r7, #23]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d134      	bne.n	8007ba0 <ES_WIFI_Connect+0xd4>
			Obj->Security = SecType;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	78fa      	ldrb	r2, [r7, #3]
 8007b3a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
			sprintf((char*) Obj->CmdData, "C3=%d\r", (uint8_t) SecType);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007b44:	78fa      	ldrb	r2, [r7, #3]
 8007b46:	491b      	ldr	r1, [pc, #108]	; (8007bb4 <ES_WIFI_Connect+0xe8>)
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f004 fca9 	bl	800c4a0 <siprintf>
			ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f7ff fde1 	bl	8007724 <AT_ExecuteCommand>
 8007b62:	4603      	mov	r3, r0
 8007b64:	75fb      	strb	r3, [r7, #23]

			if (ret == ES_WIFI_STATUS_OK) {
 8007b66:	7dfb      	ldrb	r3, [r7, #23]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d119      	bne.n	8007ba0 <ES_WIFI_Connect+0xd4>
				sprintf((char*) Obj->CmdData, "C0\r");
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007b72:	4911      	ldr	r1, [pc, #68]	; (8007bb8 <ES_WIFI_Connect+0xec>)
 8007b74:	4618      	mov	r0, r3
 8007b76:	f004 fc93 	bl	800c4a0 <siprintf>
				ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007b86:	461a      	mov	r2, r3
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f7ff fdcb 	bl	8007724 <AT_ExecuteCommand>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	75fb      	strb	r3, [r7, #23]
				if (ret == ES_WIFI_STATUS_OK) {
 8007b92:	7dfb      	ldrb	r3, [r7, #23]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d103      	bne.n	8007ba0 <ES_WIFI_Connect+0xd4>
					Obj->NetSettings.IsConnected = 1;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
				}
			}
		}
	}UNLOCK_WIFI();
	return ret;
 8007ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3718      	adds	r7, #24
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	0800da3c 	.word	0x0800da3c
 8007bb0:	0800da44 	.word	0x0800da44
 8007bb4:	0800da4c 	.word	0x0800da4c
 8007bb8:	0800da54 	.word	0x0800da54

08007bbc <ES_WIFI_IsConnected>:

/**
 * @brief  Check whether the module is connected to an access point.
 * @retval Operation Status.
 */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj) {
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
	ES_WIFI_Status_t ret;
	LOCK_WIFI();

	sprintf((char*) Obj->CmdData, "CS\r");
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007bca:	4911      	ldr	r1, [pc, #68]	; (8007c10 <ES_WIFI_IsConnected+0x54>)
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f004 fc67 	bl	800c4a0 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007bde:	461a      	mov	r2, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7ff fd9f 	bl	8007724 <AT_ExecuteCommand>
 8007be6:	4603      	mov	r3, r0
 8007be8:	73fb      	strb	r3, [r7, #15]
	if (ret == ES_WIFI_STATUS_OK) {
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d108      	bne.n	8007c02 <ES_WIFI_IsConnected+0x46>
		AT_ParseIsConnected((char*) Obj->CmdData,
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	33d2      	adds	r3, #210	; 0xd2
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	f7ff fd7b 	bl	80076f8 <AT_ParseIsConnected>
				&(Obj->NetSettings.IsConnected));
	}UNLOCK_WIFI();
	return Obj->NetSettings.IsConnected;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	0800da58 	.word	0x0800da58

08007c14 <ES_WIFI_GetNetworkSettings>:
 * @brief  Return network settings.
 * @param  Obj: pointer to module handle
 * @param  Pointer to network setting structure.
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj) {
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
	ES_WIFI_Status_t ret;
	LOCK_WIFI();

	sprintf((char*) Obj->CmdData, "C?\r");
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007c22:	4910      	ldr	r1, [pc, #64]	; (8007c64 <ES_WIFI_GetNetworkSettings+0x50>)
 8007c24:	4618      	mov	r0, r3
 8007c26:	f004 fc3b 	bl	800c4a0 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007c36:	461a      	mov	r2, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f7ff fd73 	bl	8007724 <AT_ExecuteCommand>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	73fb      	strb	r3, [r7, #15]

	if (ret == ES_WIFI_STATUS_OK) {
 8007c42:	7bfb      	ldrb	r3, [r7, #15]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d108      	bne.n	8007c5a <ES_WIFI_GetNetworkSettings+0x46>
		AT_ParseConnSettings((char*) Obj->CmdData, &Obj->NetSettings);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	338d      	adds	r3, #141	; 0x8d
 8007c52:	4619      	mov	r1, r3
 8007c54:	4610      	mov	r0, r2
 8007c56:	f7ff fc9f 	bl	8007598 <AT_ParseConnSettings>
	}

	UNLOCK_WIFI();
	return ret;
 8007c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3710      	adds	r7, #16
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	0800da60 	.word	0x0800da60

08007c68 <ES_WIFI_GetMACAddress>:
 * @brief  retrn the MAC address of the es module.
 * @param  Obj: pointer to module handle
 * @param  mac: pointer to the MAC address array.
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac) {
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
	ES_WIFI_Status_t ret;
	char *ptr;
	LOCK_WIFI();

	sprintf((char*) Obj->CmdData, "Z5\r");
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007c78:	4912      	ldr	r1, [pc, #72]	; (8007cc4 <ES_WIFI_GetMACAddress+0x5c>)
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f004 fc10 	bl	800c4a0 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7ff fd48 	bl	8007724 <AT_ExecuteCommand>
 8007c94:	4603      	mov	r3, r0
 8007c96:	73fb      	strb	r3, [r7, #15]
	if (ret == ES_WIFI_STATUS_OK) {
 8007c98:	7bfb      	ldrb	r3, [r7, #15]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d10c      	bne.n	8007cb8 <ES_WIFI_GetMACAddress+0x50>
		ptr = strtok((char*) (Obj->CmdData + 2), "\r\n");
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007ca4:	3302      	adds	r3, #2
 8007ca6:	4908      	ldr	r1, [pc, #32]	; (8007cc8 <ES_WIFI_GetMACAddress+0x60>)
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f004 fca9 	bl	800c600 <strtok>
 8007cae:	60b8      	str	r0, [r7, #8]
		ParseMAC(ptr, mac);
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	68b8      	ldr	r0, [r7, #8]
 8007cb4:	f7ff fba4 	bl	8007400 <ParseMAC>
	}UNLOCK_WIFI();
	return ret;
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	0800dabc 	.word	0x0800dabc
 8007cc8:	0800dac0 	.word	0x0800dac0

08007ccc <ES_WIFI_StartServerSingleConn>:
 * @param  Obj: pointer to module handle
 * @param  conn: pointer to the connection structure
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj,
		ES_WIFI_Conn_t *conn) {
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
	ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	73fb      	strb	r3, [r7, #15]
	LOCK_WIFI();

	sprintf((char*) Obj->CmdData, "P0=%d\r", conn->Number);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	785b      	ldrb	r3, [r3, #1]
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	4949      	ldr	r1, [pc, #292]	; (8007e0c <ES_WIFI_StartServerSingleConn+0x140>)
 8007ce8:	f004 fbda 	bl	800c4a0 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f7ff fd12 	bl	8007724 <AT_ExecuteCommand>
 8007d00:	4603      	mov	r3, r0
 8007d02:	73fb      	strb	r3, [r7, #15]
	if (ret != ES_WIFI_STATUS_OK) {
 8007d04:	7bfb      	ldrb	r3, [r7, #15]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d001      	beq.n	8007d0e <ES_WIFI_StartServerSingleConn+0x42>
		UNLOCK_WIFI();
		return ret;
 8007d0a:	7bfb      	ldrb	r3, [r7, #15]
 8007d0c:	e079      	b.n	8007e02 <ES_WIFI_StartServerSingleConn+0x136>
	}

	if ((conn->Type != ES_WIFI_UDP_CONNECTION)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d016      	beq.n	8007d44 <ES_WIFI_StartServerSingleConn+0x78>
			&& (conn->Type != ES_WIFI_UDP_LITE_CONNECTION)) {
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d012      	beq.n	8007d44 <ES_WIFI_StartServerSingleConn+0x78>
		sprintf((char*) Obj->CmdData, "PK=1,3000\r");
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007d24:	493a      	ldr	r1, [pc, #232]	; (8007e10 <ES_WIFI_StartServerSingleConn+0x144>)
 8007d26:	4618      	mov	r0, r3
 8007d28:	f004 fbba 	bl	800c4a0 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007d38:	461a      	mov	r2, r3
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7ff fcf2 	bl	8007724 <AT_ExecuteCommand>
 8007d40:	4603      	mov	r3, r0
 8007d42:	73fb      	strb	r3, [r7, #15]
	}

	if (ret == ES_WIFI_STATUS_OK) {
 8007d44:	7bfb      	ldrb	r3, [r7, #15]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d15a      	bne.n	8007e00 <ES_WIFI_StartServerSingleConn+0x134>
		sprintf((char*) Obj->CmdData, "P1=%d\r", conn->Type);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	461a      	mov	r2, r3
 8007d56:	492f      	ldr	r1, [pc, #188]	; (8007e14 <ES_WIFI_StartServerSingleConn+0x148>)
 8007d58:	f004 fba2 	bl	800c4a0 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007d68:	461a      	mov	r2, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7ff fcda 	bl	8007724 <AT_ExecuteCommand>
 8007d70:	4603      	mov	r3, r0
 8007d72:	73fb      	strb	r3, [r7, #15]
		if (ret == ES_WIFI_STATUS_OK) {
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d142      	bne.n	8007e00 <ES_WIFI_StartServerSingleConn+0x134>
			sprintf((char*) Obj->CmdData, "P8=%d\r", conn->Backlog);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	7c1b      	ldrb	r3, [r3, #16]
 8007d84:	461a      	mov	r2, r3
 8007d86:	4924      	ldr	r1, [pc, #144]	; (8007e18 <ES_WIFI_StartServerSingleConn+0x14c>)
 8007d88:	f004 fb8a 	bl	800c4a0 <siprintf>
			ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007d98:	461a      	mov	r2, r3
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7ff fcc2 	bl	8007724 <AT_ExecuteCommand>
 8007da0:	4603      	mov	r3, r0
 8007da2:	73fb      	strb	r3, [r7, #15]
			if (ret == ES_WIFI_STATUS_OK) {
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d12a      	bne.n	8007e00 <ES_WIFI_StartServerSingleConn+0x134>
				sprintf((char*) Obj->CmdData, "P2=%d\r", conn->LocalPort);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	889b      	ldrh	r3, [r3, #4]
 8007db4:	461a      	mov	r2, r3
 8007db6:	4919      	ldr	r1, [pc, #100]	; (8007e1c <ES_WIFI_StartServerSingleConn+0x150>)
 8007db8:	f004 fb72 	bl	800c4a0 <siprintf>
				ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007dc8:	461a      	mov	r2, r3
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7ff fcaa 	bl	8007724 <AT_ExecuteCommand>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	73fb      	strb	r3, [r7, #15]
				if (ret == ES_WIFI_STATUS_OK) {
 8007dd4:	7bfb      	ldrb	r3, [r7, #15]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d112      	bne.n	8007e00 <ES_WIFI_StartServerSingleConn+0x134>
					// multi accept mode
					sprintf((char*) Obj->CmdData, "P5=11\r");
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007de0:	490f      	ldr	r1, [pc, #60]	; (8007e20 <ES_WIFI_StartServerSingleConn+0x154>)
 8007de2:	4618      	mov	r0, r3
 8007de4:	f004 fb5c 	bl	800c4a0 <siprintf>
					ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007df4:	461a      	mov	r2, r3
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f7ff fc94 	bl	8007724 <AT_ExecuteCommand>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	73fb      	strb	r3, [r7, #15]
#endif
				}
			}
		}
	}UNLOCK_WIFI();
	return ret;
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	0800db24 	.word	0x0800db24
 8007e10:	0800db6c 	.word	0x0800db6c
 8007e14:	0800db2c 	.word	0x0800db2c
 8007e18:	0800db78 	.word	0x0800db78
 8007e1c:	0800db34 	.word	0x0800db34
 8007e20:	0800db80 	.word	0x0800db80

08007e24 <ES_WIFI_WaitServerConnection>:
 * @param  Obj: pointer to module handle
 * @param  conn: pointer to the connection structure
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj,
		uint32_t timeout, ES_WIFI_Conn_t *conn) {
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b08a      	sub	sp, #40	; 0x28
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
	ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t t;
	uint32_t tlast;
	uint32_t tstart;
	char *ptr;

	tstart = HAL_GetTick();
 8007e36:	f7f9 ff89 	bl	8001d4c <HAL_GetTick>
 8007e3a:	6278      	str	r0, [r7, #36]	; 0x24
	tlast = tstart + timeout;
 8007e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	4413      	add	r3, r2
 8007e42:	61fb      	str	r3, [r7, #28]
	if (tlast < tstart) {
 8007e44:	69fa      	ldr	r2, [r7, #28]
 8007e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d201      	bcs.n	8007e50 <ES_WIFI_WaitServerConnection+0x2c>
		tstart = 0;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	do {
#if (ES_WIFI_USE_UART == 0)
		// mandatory to flush MR async messages
		memset(Obj->CmdData, 0, sizeof(Obj->CmdData));
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007e56:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f004 f92f 	bl	800c0c0 <memset>
		sprintf((char*) Obj->CmdData, "MR\r");
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007e68:	4972      	ldr	r1, [pc, #456]	; (8008034 <ES_WIFI_WaitServerConnection+0x210>)
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f004 fb18 	bl	800c4a0 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f7ff fc50 	bl	8007724 <AT_ExecuteCommand>
 8007e84:	4603      	mov	r3, r0
 8007e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (ret == ES_WIFI_STATUS_OK) {
 8007e8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d136      	bne.n	8007f00 <ES_WIFI_WaitServerConnection+0xdc>
			if ((strstr((char*) Obj->CmdData, "[SOMA]"))
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007e98:	4967      	ldr	r1, [pc, #412]	; (8008038 <ES_WIFI_WaitServerConnection+0x214>)
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f004 fb99 	bl	800c5d2 <strstr>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d03b      	beq.n	8007f1e <ES_WIFI_WaitServerConnection+0xfa>
					&& (strstr((char*) Obj->CmdData, "[EOMA]"))) {
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007eac:	4963      	ldr	r1, [pc, #396]	; (800803c <ES_WIFI_WaitServerConnection+0x218>)
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f004 fb8f 	bl	800c5d2 <strstr>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d031      	beq.n	8007f1e <ES_WIFI_WaitServerConnection+0xfa>
				if (strstr((char*) Obj->CmdData, "Accepted")) {
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007ec0:	495f      	ldr	r1, [pc, #380]	; (8008040 <ES_WIFI_WaitServerConnection+0x21c>)
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f004 fb85 	bl	800c5d2 <strstr>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d127      	bne.n	8007f1e <ES_WIFI_WaitServerConnection+0xfa>
					//printf("SOMA Accepted\n");
				} else if (!strstr((char*) Obj->CmdData, "[SOMA][EOMA]")) {
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007ed4:	495b      	ldr	r1, [pc, #364]	; (8008044 <ES_WIFI_WaitServerConnection+0x220>)
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f004 fb7b 	bl	800c5d2 <strstr>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d11d      	bne.n	8007f1e <ES_WIFI_WaitServerConnection+0xfa>
					DEBUG("Bad MR stntax msg %s\n", Obj->CmdData)
 8007ee2:	f240 62c9 	movw	r2, #1737	; 0x6c9
 8007ee6:	4958      	ldr	r1, [pc, #352]	; (8008048 <ES_WIFI_WaitServerConnection+0x224>)
 8007ee8:	4858      	ldr	r0, [pc, #352]	; (800804c <ES_WIFI_WaitServerConnection+0x228>)
 8007eea:	f004 f9d1 	bl	800c290 <iprintf>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	4856      	ldr	r0, [pc, #344]	; (8008050 <ES_WIFI_WaitServerConnection+0x22c>)
 8007ef8:	f004 f9ca 	bl	800c290 <iprintf>
					;
					UNLOCK_WIFI();
					return ES_WIFI_STATUS_ERROR;
 8007efc:	2302      	movs	r3, #2
 8007efe:	e095      	b.n	800802c <ES_WIFI_WaitServerConnection+0x208>
				}
			}
		} else {
			DEBUG("MR command failed %s\n", Obj->CmdData)
 8007f00:	f44f 62da 	mov.w	r2, #1744	; 0x6d0
 8007f04:	4950      	ldr	r1, [pc, #320]	; (8008048 <ES_WIFI_WaitServerConnection+0x224>)
 8007f06:	4851      	ldr	r0, [pc, #324]	; (800804c <ES_WIFI_WaitServerConnection+0x228>)
 8007f08:	f004 f9c2 	bl	800c290 <iprintf>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007f12:	4619      	mov	r1, r3
 8007f14:	484f      	ldr	r0, [pc, #316]	; (8008054 <ES_WIFI_WaitServerConnection+0x230>)
 8007f16:	f004 f9bb 	bl	800c290 <iprintf>
			;
			UNLOCK_WIFI();
			return ES_WIFI_STATUS_ERROR;
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	e086      	b.n	800802c <ES_WIFI_WaitServerConnection+0x208>
		}
#endif

		memset(Obj->CmdData, 0, sizeof(Obj->CmdData));
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007f24:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007f28:	2100      	movs	r1, #0
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f004 f8c8 	bl	800c0c0 <memset>
		sprintf((char*) Obj->CmdData, "P?\r");
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007f36:	4948      	ldr	r1, [pc, #288]	; (8008058 <ES_WIFI_WaitServerConnection+0x234>)
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f004 fab1 	bl	800c4a0 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f7ff fbe9 	bl	8007724 <AT_ExecuteCommand>
 8007f52:	4603      	mov	r3, r0
 8007f54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (ret == ES_WIFI_STATUS_OK) {
 8007f58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d13f      	bne.n	8007fe0 <ES_WIFI_WaitServerConnection+0x1bc>
			if (strncmp((char*) Obj->CmdData, "\r\n0,0.0.0.0,", 12) != 0) {
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007f66:	220c      	movs	r2, #12
 8007f68:	493c      	ldr	r1, [pc, #240]	; (800805c <ES_WIFI_WaitServerConnection+0x238>)
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f004 fb0a 	bl	800c584 <strncmp>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d043      	beq.n	8007ffe <ES_WIFI_WaitServerConnection+0x1da>
				ptr = strtok((char*) Obj->CmdData + 2, ",");
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007f7c:	3302      	adds	r3, #2
 8007f7e:	4938      	ldr	r1, [pc, #224]	; (8008060 <ES_WIFI_WaitServerConnection+0x23c>)
 8007f80:	4618      	mov	r0, r3
 8007f82:	f004 fb3d 	bl	800c600 <strtok>
 8007f86:	6178      	str	r0, [r7, #20]
				ptr = strtok(0, ","); //port
 8007f88:	4935      	ldr	r1, [pc, #212]	; (8008060 <ES_WIFI_WaitServerConnection+0x23c>)
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	f004 fb38 	bl	800c600 <strtok>
 8007f90:	6178      	str	r0, [r7, #20]
				ParseIP((char*) ptr, conn->RemoteIP);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	3306      	adds	r3, #6
 8007f96:	4619      	mov	r1, r3
 8007f98:	6978      	ldr	r0, [r7, #20]
 8007f9a:	f7ff fa5c 	bl	8007456 <ParseIP>
				ptr = strtok(0, ","); //port
 8007f9e:	4930      	ldr	r1, [pc, #192]	; (8008060 <ES_WIFI_WaitServerConnection+0x23c>)
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	f004 fb2d 	bl	800c600 <strtok>
 8007fa6:	6178      	str	r0, [r7, #20]
				conn->LocalPort = ParseNumber(ptr, 0);
 8007fa8:	2100      	movs	r1, #0
 8007faa:	6978      	ldr	r0, [r7, #20]
 8007fac:	f7ff f9e4 	bl	8007378 <ParseNumber>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	809a      	strh	r2, [r3, #4]
				ptr = strtok(0, ","); //ip
 8007fb8:	4929      	ldr	r1, [pc, #164]	; (8008060 <ES_WIFI_WaitServerConnection+0x23c>)
 8007fba:	2000      	movs	r0, #0
 8007fbc:	f004 fb20 	bl	800c600 <strtok>
 8007fc0:	6178      	str	r0, [r7, #20]
				ptr = strtok(0, ","); //remote port
 8007fc2:	4927      	ldr	r1, [pc, #156]	; (8008060 <ES_WIFI_WaitServerConnection+0x23c>)
 8007fc4:	2000      	movs	r0, #0
 8007fc6:	f004 fb1b 	bl	800c600 <strtok>
 8007fca:	6178      	str	r0, [r7, #20]
				conn->RemotePort = ParseNumber(ptr, 0);
 8007fcc:	2100      	movs	r1, #0
 8007fce:	6978      	ldr	r0, [r7, #20]
 8007fd0:	f7ff f9d2 	bl	8007378 <ParseNumber>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	805a      	strh	r2, [r3, #2]
				UNLOCK_WIFI();
				return ES_WIFI_STATUS_OK;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	e025      	b.n	800802c <ES_WIFI_WaitServerConnection+0x208>
			}
		} else {
			DEBUG("P? command failed %s\n", Obj->CmdData)
 8007fe0:	f44f 62dd 	mov.w	r2, #1768	; 0x6e8
 8007fe4:	4918      	ldr	r1, [pc, #96]	; (8008048 <ES_WIFI_WaitServerConnection+0x224>)
 8007fe6:	4819      	ldr	r0, [pc, #100]	; (800804c <ES_WIFI_WaitServerConnection+0x228>)
 8007fe8:	f004 f952 	bl	800c290 <iprintf>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	481b      	ldr	r0, [pc, #108]	; (8008064 <ES_WIFI_WaitServerConnection+0x240>)
 8007ff6:	f004 f94b 	bl	800c290 <iprintf>
			;
			UNLOCK_WIFI();
			return ES_WIFI_STATUS_ERROR;
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	e016      	b.n	800802c <ES_WIFI_WaitServerConnection+0x208>
		}

		UNLOCK_WIFI();
		Obj->fops.IO_Delay(100);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008004:	2064      	movs	r0, #100	; 0x64
 8008006:	4798      	blx	r3
		LOCK_WIFI();
		t = HAL_GetTick();
 8008008:	f7f9 fea0 	bl	8001d4c <HAL_GetTick>
 800800c:	61b8      	str	r0, [r7, #24]
	} while ((timeout == 0) || ((t < tlast) || (t < tstart)));
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	2b00      	cmp	r3, #0
 8008012:	f43f af1d 	beq.w	8007e50 <ES_WIFI_WaitServerConnection+0x2c>
 8008016:	69ba      	ldr	r2, [r7, #24]
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	429a      	cmp	r2, r3
 800801c:	f4ff af18 	bcc.w	8007e50 <ES_WIFI_WaitServerConnection+0x2c>
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	429a      	cmp	r2, r3
 8008026:	f4ff af13 	bcc.w	8007e50 <ES_WIFI_WaitServerConnection+0x2c>
	return ES_WIFI_STATUS_TIMEOUT;
 800802a:	2303      	movs	r3, #3
}
 800802c:	4618      	mov	r0, r3
 800802e:	3728      	adds	r7, #40	; 0x28
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	0800da34 	.word	0x0800da34
 8008038:	0800db88 	.word	0x0800db88
 800803c:	0800db90 	.word	0x0800db90
 8008040:	0800db98 	.word	0x0800db98
 8008044:	0800dba4 	.word	0x0800dba4
 8008048:	0800dbb4 	.word	0x0800dbb4
 800804c:	0800dbd0 	.word	0x0800dbd0
 8008050:	0800dbd8 	.word	0x0800dbd8
 8008054:	0800dbf0 	.word	0x0800dbf0
 8008058:	0800dc08 	.word	0x0800dc08
 800805c:	0800dc0c 	.word	0x0800dc0c
 8008060:	0800d9f4 	.word	0x0800d9f4
 8008064:	0800dc1c 	.word	0x0800dc1c

08008068 <ES_WIFI_CloseServerConnection>:
 * @brief  Close current server connection.
 * @param  Obj: pointer to module handle
 * @param  socket:  server socket
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, int socket) {
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
	ES_WIFI_Status_t ret;
	LOCK_WIFI();
	sprintf((char*) Obj->CmdData, "P0=%d\r", socket);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008078:	683a      	ldr	r2, [r7, #0]
 800807a:	4925      	ldr	r1, [pc, #148]	; (8008110 <ES_WIFI_CloseServerConnection+0xa8>)
 800807c:	4618      	mov	r0, r3
 800807e:	f004 fa0f 	bl	800c4a0 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800808e:	461a      	mov	r2, r3
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f7ff fb47 	bl	8007724 <AT_ExecuteCommand>
 8008096:	4603      	mov	r3, r0
 8008098:	73fb      	strb	r3, [r7, #15]
	if (ret != ES_WIFI_STATUS_OK) {
 800809a:	7bfb      	ldrb	r3, [r7, #15]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00e      	beq.n	80080be <ES_WIFI_CloseServerConnection+0x56>
		DEBUG(" Can not select socket %s\n", Obj->CmdData)
 80080a0:	f240 7202 	movw	r2, #1794	; 0x702
 80080a4:	491b      	ldr	r1, [pc, #108]	; (8008114 <ES_WIFI_CloseServerConnection+0xac>)
 80080a6:	481c      	ldr	r0, [pc, #112]	; (8008118 <ES_WIFI_CloseServerConnection+0xb0>)
 80080a8:	f004 f8f2 	bl	800c290 <iprintf>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80080b2:	4619      	mov	r1, r3
 80080b4:	4819      	ldr	r0, [pc, #100]	; (800811c <ES_WIFI_CloseServerConnection+0xb4>)
 80080b6:	f004 f8eb 	bl	800c290 <iprintf>
		;
		UNLOCK_WIFI();
		return ret;
 80080ba:	7bfb      	ldrb	r3, [r7, #15]
 80080bc:	e023      	b.n	8008106 <ES_WIFI_CloseServerConnection+0x9e>
	}

	sprintf((char*) Obj->CmdData, "P5=10\r");
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80080c4:	4916      	ldr	r1, [pc, #88]	; (8008120 <ES_WIFI_CloseServerConnection+0xb8>)
 80080c6:	4618      	mov	r0, r3
 80080c8:	f004 f9ea 	bl	800c4a0 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80080d8:	461a      	mov	r2, r3
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7ff fb22 	bl	8007724 <AT_ExecuteCommand>
 80080e0:	4603      	mov	r3, r0
 80080e2:	73fb      	strb	r3, [r7, #15]
	if (ret != ES_WIFI_STATUS_OK) {
 80080e4:	7bfb      	ldrb	r3, [r7, #15]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00c      	beq.n	8008104 <ES_WIFI_CloseServerConnection+0x9c>
		DEBUG(" Open next failed %s\n", Obj->CmdData)
 80080ea:	f240 720b 	movw	r2, #1803	; 0x70b
 80080ee:	4909      	ldr	r1, [pc, #36]	; (8008114 <ES_WIFI_CloseServerConnection+0xac>)
 80080f0:	4809      	ldr	r0, [pc, #36]	; (8008118 <ES_WIFI_CloseServerConnection+0xb0>)
 80080f2:	f004 f8cd 	bl	800c290 <iprintf>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80080fc:	4619      	mov	r1, r3
 80080fe:	4809      	ldr	r0, [pc, #36]	; (8008124 <ES_WIFI_CloseServerConnection+0xbc>)
 8008100:	f004 f8c6 	bl	800c290 <iprintf>
		;
	}

	UNLOCK_WIFI();
	return ret;
 8008104:	7bfb      	ldrb	r3, [r7, #15]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	0800db24 	.word	0x0800db24
 8008114:	0800dbb4 	.word	0x0800dbb4
 8008118:	0800dbd0 	.word	0x0800dbd0
 800811c:	0800dc34 	.word	0x0800dc34
 8008120:	0800dc50 	.word	0x0800dc50
 8008124:	0800dc58 	.word	0x0800dc58

08008128 <ES_WIFI_StopServerSingleConn>:
/**
 * @brief  Stop a Server.
 * @param  Obj: pointer to module handle
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, int socket) {
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
	ES_WIFI_Status_t ret;
	LOCK_WIFI();
	sprintf((char*) Obj->CmdData, "P0=%d\r", socket);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008138:	683a      	ldr	r2, [r7, #0]
 800813a:	4926      	ldr	r1, [pc, #152]	; (80081d4 <ES_WIFI_StopServerSingleConn+0xac>)
 800813c:	4618      	mov	r0, r3
 800813e:	f004 f9af 	bl	800c4a0 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800814e:	461a      	mov	r2, r3
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7ff fae7 	bl	8007724 <AT_ExecuteCommand>
 8008156:	4603      	mov	r3, r0
 8008158:	73fb      	strb	r3, [r7, #15]
	if (ret != ES_WIFI_STATUS_OK) {
 800815a:	7bfb      	ldrb	r3, [r7, #15]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00e      	beq.n	800817e <ES_WIFI_StopServerSingleConn+0x56>
		DEBUG("Selecting socket failed: %s\n", Obj->CmdData)
 8008160:	f240 721e 	movw	r2, #1822	; 0x71e
 8008164:	491c      	ldr	r1, [pc, #112]	; (80081d8 <ES_WIFI_StopServerSingleConn+0xb0>)
 8008166:	481d      	ldr	r0, [pc, #116]	; (80081dc <ES_WIFI_StopServerSingleConn+0xb4>)
 8008168:	f004 f892 	bl	800c290 <iprintf>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008172:	4619      	mov	r1, r3
 8008174:	481a      	ldr	r0, [pc, #104]	; (80081e0 <ES_WIFI_StopServerSingleConn+0xb8>)
 8008176:	f004 f88b 	bl	800c290 <iprintf>
		;
		UNLOCK_WIFI();
		return ret;
 800817a:	7bfb      	ldrb	r3, [r7, #15]
 800817c:	e025      	b.n	80081ca <ES_WIFI_StopServerSingleConn+0xa2>
	}

	sprintf((char*) Obj->CmdData, "P5=0\r");
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008184:	4917      	ldr	r1, [pc, #92]	; (80081e4 <ES_WIFI_StopServerSingleConn+0xbc>)
 8008186:	4618      	mov	r0, r3
 8008188:	f004 f98a 	bl	800c4a0 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008198:	461a      	mov	r2, r3
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7ff fac2 	bl	8007724 <AT_ExecuteCommand>
 80081a0:	4603      	mov	r3, r0
 80081a2:	73fb      	strb	r3, [r7, #15]
	if (ret != ES_WIFI_STATUS_OK) {
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00e      	beq.n	80081c8 <ES_WIFI_StopServerSingleConn+0xa0>
		DEBUG("Stopping server failed %s\n", Obj->CmdData)
 80081aa:	f240 7227 	movw	r2, #1831	; 0x727
 80081ae:	490a      	ldr	r1, [pc, #40]	; (80081d8 <ES_WIFI_StopServerSingleConn+0xb0>)
 80081b0:	480a      	ldr	r0, [pc, #40]	; (80081dc <ES_WIFI_StopServerSingleConn+0xb4>)
 80081b2:	f004 f86d 	bl	800c290 <iprintf>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80081bc:	4619      	mov	r1, r3
 80081be:	480a      	ldr	r0, [pc, #40]	; (80081e8 <ES_WIFI_StopServerSingleConn+0xc0>)
 80081c0:	f004 f866 	bl	800c290 <iprintf>
		;
		UNLOCK_WIFI();
		return ret;
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
 80081c6:	e000      	b.n	80081ca <ES_WIFI_StopServerSingleConn+0xa2>
	}

	UNLOCK_WIFI();
	return ret;
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	0800db24 	.word	0x0800db24
 80081d8:	0800dbb4 	.word	0x0800dbb4
 80081dc:	0800dbd0 	.word	0x0800dbd0
 80081e0:	0800dc70 	.word	0x0800dc70
 80081e4:	0800dc90 	.word	0x0800dc90
 80081e8:	0800dc98 	.word	0x0800dc98

080081ec <ES_WIFI_SendData>:
 * @param  pdata: pointer to data
 * @param  len : length of the data to be sent
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
		uint8_t *pdata, uint16_t Reqlen, uint16_t *SentLen, uint32_t Timeout) {
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b088      	sub	sp, #32
 80081f0:	af02      	add	r7, sp, #8
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	607a      	str	r2, [r7, #4]
 80081f6:	461a      	mov	r2, r3
 80081f8:	460b      	mov	r3, r1
 80081fa:	72fb      	strb	r3, [r7, #11]
 80081fc:	4613      	mov	r3, r2
 80081fe:	813b      	strh	r3, [r7, #8]
	uint32_t wkgTimeOut;

	ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8008200:	2302      	movs	r3, #2
 8008202:	74fb      	strb	r3, [r7, #19]

	if (Timeout == 0) {
 8008204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008206:	2b00      	cmp	r3, #0
 8008208:	d102      	bne.n	8008210 <ES_WIFI_SendData+0x24>
		wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 800820a:	2301      	movs	r3, #1
 800820c:	617b      	str	r3, [r7, #20]
 800820e:	e001      	b.n	8008214 <ES_WIFI_SendData+0x28>
	} else {
		wkgTimeOut = Timeout;
 8008210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008212:	617b      	str	r3, [r7, #20]
	}

	LOCK_WIFI();
	if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 8008214:	893b      	ldrh	r3, [r7, #8]
 8008216:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800821a:	d302      	bcc.n	8008222 <ES_WIFI_SendData+0x36>
		Reqlen = ES_WIFI_PAYLOAD_SIZE;
 800821c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008220:	813b      	strh	r3, [r7, #8]

	*SentLen = Reqlen;
 8008222:	6a3b      	ldr	r3, [r7, #32]
 8008224:	893a      	ldrh	r2, [r7, #8]
 8008226:	801a      	strh	r2, [r3, #0]
	sprintf((char*) Obj->CmdData, "P0=%d\r", Socket);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800822e:	7afa      	ldrb	r2, [r7, #11]
 8008230:	4942      	ldr	r1, [pc, #264]	; (800833c <ES_WIFI_SendData+0x150>)
 8008232:	4618      	mov	r0, r3
 8008234:	f004 f934 	bl	800c4a0 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008244:	461a      	mov	r2, r3
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f7ff fa6c 	bl	8007724 <AT_ExecuteCommand>
 800824c:	4603      	mov	r3, r0
 800824e:	74fb      	strb	r3, [r7, #19]
	if (ret == ES_WIFI_STATUS_OK) {
 8008250:	7cfb      	ldrb	r3, [r7, #19]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d15e      	bne.n	8008314 <ES_WIFI_SendData+0x128>
		sprintf((char*) Obj->CmdData, "S2=%lu\r", wkgTimeOut);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800825c:	697a      	ldr	r2, [r7, #20]
 800825e:	4938      	ldr	r1, [pc, #224]	; (8008340 <ES_WIFI_SendData+0x154>)
 8008260:	4618      	mov	r0, r3
 8008262:	f004 f91d 	bl	800c4a0 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008272:	461a      	mov	r2, r3
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f7ff fa55 	bl	8007724 <AT_ExecuteCommand>
 800827a:	4603      	mov	r3, r0
 800827c:	74fb      	strb	r3, [r7, #19]

		if (ret == ES_WIFI_STATUS_OK) {
 800827e:	7cfb      	ldrb	r3, [r7, #19]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d13d      	bne.n	8008300 <ES_WIFI_SendData+0x114>
			sprintf((char*) Obj->CmdData, "S3=%04d\r", Reqlen);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800828a:	893a      	ldrh	r2, [r7, #8]
 800828c:	492d      	ldr	r1, [pc, #180]	; (8008344 <ES_WIFI_SendData+0x158>)
 800828e:	4618      	mov	r0, r3
 8008290:	f004 f906 	bl	800c4a0 <siprintf>
			ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen,
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f503 7194 	add.w	r1, r3, #296	; 0x128
					Obj->CmdData);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f503 7394 	add.w	r3, r3, #296	; 0x128
			ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen,
 80082a0:	893a      	ldrh	r2, [r7, #8]
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	4613      	mov	r3, r2
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f7ff faa1 	bl	80077f0 <AT_RequestSendData>
 80082ae:	4603      	mov	r3, r0
 80082b0:	74fb      	strb	r3, [r7, #19]

			if (ret == ES_WIFI_STATUS_OK) {
 80082b2:	7cfb      	ldrb	r3, [r7, #19]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d119      	bne.n	80082ec <ES_WIFI_SendData+0x100>
				if (strstr((char*) Obj->CmdData, "-1\r\n")) {
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80082be:	4922      	ldr	r1, [pc, #136]	; (8008348 <ES_WIFI_SendData+0x15c>)
 80082c0:	4618      	mov	r0, r3
 80082c2:	f004 f986 	bl	800c5d2 <strstr>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d02c      	beq.n	8008326 <ES_WIFI_SendData+0x13a>
					DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData)
 80082cc:	f240 72c7 	movw	r2, #1991	; 0x7c7
 80082d0:	491e      	ldr	r1, [pc, #120]	; (800834c <ES_WIFI_SendData+0x160>)
 80082d2:	481f      	ldr	r0, [pc, #124]	; (8008350 <ES_WIFI_SendData+0x164>)
 80082d4:	f003 ffdc 	bl	800c290 <iprintf>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80082de:	4619      	mov	r1, r3
 80082e0:	481c      	ldr	r0, [pc, #112]	; (8008354 <ES_WIFI_SendData+0x168>)
 80082e2:	f003 ffd5 	bl	800c290 <iprintf>
					;
					ret = ES_WIFI_STATUS_ERROR;
 80082e6:	2302      	movs	r3, #2
 80082e8:	74fb      	strb	r3, [r7, #19]
 80082ea:	e01c      	b.n	8008326 <ES_WIFI_SendData+0x13a>
				}
			} else {
				DEBUG("Send Data command failed\n")
 80082ec:	f240 72cc 	movw	r2, #1996	; 0x7cc
 80082f0:	4916      	ldr	r1, [pc, #88]	; (800834c <ES_WIFI_SendData+0x160>)
 80082f2:	4817      	ldr	r0, [pc, #92]	; (8008350 <ES_WIFI_SendData+0x164>)
 80082f4:	f003 ffcc 	bl	800c290 <iprintf>
 80082f8:	4817      	ldr	r0, [pc, #92]	; (8008358 <ES_WIFI_SendData+0x16c>)
 80082fa:	f004 f84f 	bl	800c39c <puts>
 80082fe:	e012      	b.n	8008326 <ES_WIFI_SendData+0x13a>
				;
			}
		} else {
			DEBUG("S2 command failed\n")
 8008300:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008304:	4911      	ldr	r1, [pc, #68]	; (800834c <ES_WIFI_SendData+0x160>)
 8008306:	4812      	ldr	r0, [pc, #72]	; (8008350 <ES_WIFI_SendData+0x164>)
 8008308:	f003 ffc2 	bl	800c290 <iprintf>
 800830c:	4813      	ldr	r0, [pc, #76]	; (800835c <ES_WIFI_SendData+0x170>)
 800830e:	f004 f845 	bl	800c39c <puts>
 8008312:	e008      	b.n	8008326 <ES_WIFI_SendData+0x13a>
			;
		}
	} else {
		DEBUG("P0 command failed\n")
 8008314:	f240 72d4 	movw	r2, #2004	; 0x7d4
 8008318:	490c      	ldr	r1, [pc, #48]	; (800834c <ES_WIFI_SendData+0x160>)
 800831a:	480d      	ldr	r0, [pc, #52]	; (8008350 <ES_WIFI_SendData+0x164>)
 800831c:	f003 ffb8 	bl	800c290 <iprintf>
 8008320:	480f      	ldr	r0, [pc, #60]	; (8008360 <ES_WIFI_SendData+0x174>)
 8008322:	f004 f83b 	bl	800c39c <puts>
		;
	}

	if (ret == ES_WIFI_STATUS_ERROR) {
 8008326:	7cfb      	ldrb	r3, [r7, #19]
 8008328:	2b02      	cmp	r3, #2
 800832a:	d102      	bne.n	8008332 <ES_WIFI_SendData+0x146>
		*SentLen = 0;
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	2200      	movs	r2, #0
 8008330:	801a      	strh	r2, [r3, #0]
	}UNLOCK_WIFI();
	return ret;
 8008332:	7cfb      	ldrb	r3, [r7, #19]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3718      	adds	r7, #24
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	0800db24 	.word	0x0800db24
 8008340:	0800dcdc 	.word	0x0800dcdc
 8008344:	0800dce4 	.word	0x0800dce4
 8008348:	0800dcf0 	.word	0x0800dcf0
 800834c:	0800dbb4 	.word	0x0800dbb4
 8008350:	0800dbd0 	.word	0x0800dbd0
 8008354:	0800dcf8 	.word	0x0800dcf8
 8008358:	0800dd14 	.word	0x0800dd14
 800835c:	0800dd30 	.word	0x0800dd30
 8008360:	0800dd44 	.word	0x0800dd44

08008364 <ES_WIFI_ReceiveData>:
 * @param  len : pointer to the length of the data to be received
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket,
		uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen,
		uint32_t Timeout) {
 8008364:	b580      	push	{r7, lr}
 8008366:	b088      	sub	sp, #32
 8008368:	af02      	add	r7, sp, #8
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	607a      	str	r2, [r7, #4]
 800836e:	461a      	mov	r2, r3
 8008370:	460b      	mov	r3, r1
 8008372:	72fb      	strb	r3, [r7, #11]
 8008374:	4613      	mov	r3, r2
 8008376:	813b      	strh	r3, [r7, #8]
	uint32_t wkgTimeOut;

	ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8008378:	2302      	movs	r3, #2
 800837a:	74fb      	strb	r3, [r7, #19]

	if (Timeout == 0) {
 800837c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837e:	2b00      	cmp	r3, #0
 8008380:	d102      	bne.n	8008388 <ES_WIFI_ReceiveData+0x24>
		wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8008382:	2301      	movs	r3, #1
 8008384:	617b      	str	r3, [r7, #20]
 8008386:	e001      	b.n	800838c <ES_WIFI_ReceiveData+0x28>
	} else {
		wkgTimeOut = Timeout;
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	617b      	str	r3, [r7, #20]
	}

	LOCK_WIFI();

	if (Reqlen <= ES_WIFI_PAYLOAD_SIZE) {
 800838c:	893b      	ldrh	r3, [r7, #8]
 800838e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8008392:	f200 808b 	bhi.w	80084ac <ES_WIFI_ReceiveData+0x148>
		sprintf((char*) Obj->CmdData, "P0=%d\r", Socket);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800839c:	7afa      	ldrb	r2, [r7, #11]
 800839e:	4946      	ldr	r1, [pc, #280]	; (80084b8 <ES_WIFI_ReceiveData+0x154>)
 80083a0:	4618      	mov	r0, r3
 80083a2:	f004 f87d 	bl	800c4a0 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80083b2:	461a      	mov	r2, r3
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f7ff f9b5 	bl	8007724 <AT_ExecuteCommand>
 80083ba:	4603      	mov	r3, r0
 80083bc:	74fb      	strb	r3, [r7, #19]

		if (ret == ES_WIFI_STATUS_OK) {
 80083be:	7cfb      	ldrb	r3, [r7, #19]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d165      	bne.n	8008490 <ES_WIFI_ReceiveData+0x12c>
			sprintf((char*) Obj->CmdData, "R1=%d\r", Reqlen);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80083ca:	893a      	ldrh	r2, [r7, #8]
 80083cc:	493b      	ldr	r1, [pc, #236]	; (80084bc <ES_WIFI_ReceiveData+0x158>)
 80083ce:	4618      	mov	r0, r3
 80083d0:	f004 f866 	bl	800c4a0 <siprintf>
			ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80083e0:	461a      	mov	r2, r3
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f7ff f99e 	bl	8007724 <AT_ExecuteCommand>
 80083e8:	4603      	mov	r3, r0
 80083ea:	74fb      	strb	r3, [r7, #19]
			if (ret == ES_WIFI_STATUS_OK) {
 80083ec:	7cfb      	ldrb	r3, [r7, #19]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d141      	bne.n	8008476 <ES_WIFI_ReceiveData+0x112>
				sprintf((char*) Obj->CmdData, "R2=%lu\r", wkgTimeOut);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80083f8:	697a      	ldr	r2, [r7, #20]
 80083fa:	4931      	ldr	r1, [pc, #196]	; (80084c0 <ES_WIFI_ReceiveData+0x15c>)
 80083fc:	4618      	mov	r0, r3
 80083fe:	f004 f84f 	bl	800c4a0 <siprintf>
				ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800840e:	461a      	mov	r2, r3
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f7ff f987 	bl	8007724 <AT_ExecuteCommand>
 8008416:	4603      	mov	r3, r0
 8008418:	74fb      	strb	r3, [r7, #19]
				if (ret == ES_WIFI_STATUS_OK) {
 800841a:	7cfb      	ldrb	r3, [r7, #19]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d120      	bne.n	8008462 <ES_WIFI_ReceiveData+0xfe>
					sprintf((char*) Obj->CmdData, "R0\r");
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008426:	4927      	ldr	r1, [pc, #156]	; (80084c4 <ES_WIFI_ReceiveData+0x160>)
 8008428:	4618      	mov	r0, r3
 800842a:	f004 f839 	bl	800c4a0 <siprintf>
					ret = AT_RequestReceiveData(Obj, Obj->CmdData,
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008434:	893a      	ldrh	r2, [r7, #8]
 8008436:	6a3b      	ldr	r3, [r7, #32]
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	4613      	mov	r3, r2
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f7ff fa4c 	bl	80078dc <AT_RequestReceiveData>
 8008444:	4603      	mov	r3, r0
 8008446:	74fb      	strb	r3, [r7, #19]
							(char*) pdata, Reqlen, Receivedlen);
					if (ret != ES_WIFI_STATUS_OK) {
 8008448:	7cfb      	ldrb	r3, [r7, #19]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d02e      	beq.n	80084ac <ES_WIFI_ReceiveData+0x148>
						DEBUG("AT_RequestReceiveData  failed\n")
 800844e:	f44f 6205 	mov.w	r2, #2128	; 0x850
 8008452:	491d      	ldr	r1, [pc, #116]	; (80084c8 <ES_WIFI_ReceiveData+0x164>)
 8008454:	481d      	ldr	r0, [pc, #116]	; (80084cc <ES_WIFI_ReceiveData+0x168>)
 8008456:	f003 ff1b 	bl	800c290 <iprintf>
 800845a:	481d      	ldr	r0, [pc, #116]	; (80084d0 <ES_WIFI_ReceiveData+0x16c>)
 800845c:	f003 ff9e 	bl	800c39c <puts>
 8008460:	e024      	b.n	80084ac <ES_WIFI_ReceiveData+0x148>
						;
					}
				} else {
					DEBUG("setting timeout failed\n")
 8008462:	f640 0254 	movw	r2, #2132	; 0x854
 8008466:	4918      	ldr	r1, [pc, #96]	; (80084c8 <ES_WIFI_ReceiveData+0x164>)
 8008468:	4818      	ldr	r0, [pc, #96]	; (80084cc <ES_WIFI_ReceiveData+0x168>)
 800846a:	f003 ff11 	bl	800c290 <iprintf>
 800846e:	4819      	ldr	r0, [pc, #100]	; (80084d4 <ES_WIFI_ReceiveData+0x170>)
 8008470:	f003 ff94 	bl	800c39c <puts>
 8008474:	e01a      	b.n	80084ac <ES_WIFI_ReceiveData+0x148>
					;
				}
			} else {
				DEBUG("setting requested len failed\n")
 8008476:	f640 0258 	movw	r2, #2136	; 0x858
 800847a:	4913      	ldr	r1, [pc, #76]	; (80084c8 <ES_WIFI_ReceiveData+0x164>)
 800847c:	4813      	ldr	r0, [pc, #76]	; (80084cc <ES_WIFI_ReceiveData+0x168>)
 800847e:	f003 ff07 	bl	800c290 <iprintf>
 8008482:	4815      	ldr	r0, [pc, #84]	; (80084d8 <ES_WIFI_ReceiveData+0x174>)
 8008484:	f003 ff8a 	bl	800c39c <puts>
				;
				*Receivedlen = 0;
 8008488:	6a3b      	ldr	r3, [r7, #32]
 800848a:	2200      	movs	r2, #0
 800848c:	801a      	strh	r2, [r3, #0]
 800848e:	e00d      	b.n	80084ac <ES_WIFI_ReceiveData+0x148>
			}
		} else {
			DEBUG("setting socket for read failed\n")
 8008490:	f640 025d 	movw	r2, #2141	; 0x85d
 8008494:	490c      	ldr	r1, [pc, #48]	; (80084c8 <ES_WIFI_ReceiveData+0x164>)
 8008496:	480d      	ldr	r0, [pc, #52]	; (80084cc <ES_WIFI_ReceiveData+0x168>)
 8008498:	f003 fefa 	bl	800c290 <iprintf>
 800849c:	480f      	ldr	r0, [pc, #60]	; (80084dc <ES_WIFI_ReceiveData+0x178>)
 800849e:	f003 ff7d 	bl	800c39c <puts>
			;
			issue15++;
 80084a2:	4b0f      	ldr	r3, [pc, #60]	; (80084e0 <ES_WIFI_ReceiveData+0x17c>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3301      	adds	r3, #1
 80084a8:	4a0d      	ldr	r2, [pc, #52]	; (80084e0 <ES_WIFI_ReceiveData+0x17c>)
 80084aa:	6013      	str	r3, [r2, #0]
		}
	}UNLOCK_WIFI();
	return ret;
 80084ac:	7cfb      	ldrb	r3, [r7, #19]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3718      	adds	r7, #24
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	0800db24 	.word	0x0800db24
 80084bc:	0800dd68 	.word	0x0800dd68
 80084c0:	0800dd70 	.word	0x0800dd70
 80084c4:	0800dd78 	.word	0x0800dd78
 80084c8:	0800dbb4 	.word	0x0800dbb4
 80084cc:	0800dbd0 	.word	0x0800dbd0
 80084d0:	0800dd7c 	.word	0x0800dd7c
 80084d4:	0800dd9c 	.word	0x0800dd9c
 80084d8:	0800ddb4 	.word	0x0800ddb4
 80084dc:	0800ddd4 	.word	0x0800ddd4
 80084e0:	20000f58 	.word	0x20000f58

080084e4 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b08c      	sub	sp, #48	; 0x30
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 80084ec:	4b57      	ldr	r3, [pc, #348]	; (800864c <SPI_WIFI_MspInit+0x168>)
 80084ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084f0:	4a56      	ldr	r2, [pc, #344]	; (800864c <SPI_WIFI_MspInit+0x168>)
 80084f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084f6:	6593      	str	r3, [r2, #88]	; 0x58
 80084f8:	4b54      	ldr	r3, [pc, #336]	; (800864c <SPI_WIFI_MspInit+0x168>)
 80084fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008500:	61bb      	str	r3, [r7, #24]
 8008502:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008504:	4b51      	ldr	r3, [pc, #324]	; (800864c <SPI_WIFI_MspInit+0x168>)
 8008506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008508:	4a50      	ldr	r2, [pc, #320]	; (800864c <SPI_WIFI_MspInit+0x168>)
 800850a:	f043 0302 	orr.w	r3, r3, #2
 800850e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008510:	4b4e      	ldr	r3, [pc, #312]	; (800864c <SPI_WIFI_MspInit+0x168>)
 8008512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008514:	f003 0302 	and.w	r3, r3, #2
 8008518:	617b      	str	r3, [r7, #20]
 800851a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800851c:	4b4b      	ldr	r3, [pc, #300]	; (800864c <SPI_WIFI_MspInit+0x168>)
 800851e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008520:	4a4a      	ldr	r2, [pc, #296]	; (800864c <SPI_WIFI_MspInit+0x168>)
 8008522:	f043 0304 	orr.w	r3, r3, #4
 8008526:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008528:	4b48      	ldr	r3, [pc, #288]	; (800864c <SPI_WIFI_MspInit+0x168>)
 800852a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800852c:	f003 0304 	and.w	r3, r3, #4
 8008530:	613b      	str	r3, [r7, #16]
 8008532:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008534:	4b45      	ldr	r3, [pc, #276]	; (800864c <SPI_WIFI_MspInit+0x168>)
 8008536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008538:	4a44      	ldr	r2, [pc, #272]	; (800864c <SPI_WIFI_MspInit+0x168>)
 800853a:	f043 0310 	orr.w	r3, r3, #16
 800853e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008540:	4b42      	ldr	r3, [pc, #264]	; (800864c <SPI_WIFI_MspInit+0x168>)
 8008542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008544:	f003 0310 	and.w	r3, r3, #16
 8008548:	60fb      	str	r3, [r7, #12]
 800854a:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800854c:	2200      	movs	r2, #0
 800854e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008552:	483f      	ldr	r0, [pc, #252]	; (8008650 <SPI_WIFI_MspInit+0x16c>)
 8008554:	f7fa f910 	bl	8002778 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8008558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800855c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800855e:	2301      	movs	r3, #1
 8008560:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008562:	2300      	movs	r3, #0
 8008564:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8008566:	2300      	movs	r3, #0
 8008568:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800856a:	f107 031c 	add.w	r3, r7, #28
 800856e:	4619      	mov	r1, r3
 8008570:	4837      	ldr	r0, [pc, #220]	; (8008650 <SPI_WIFI_MspInit+0x16c>)
 8008572:	f7f9 fe4b 	bl	800220c <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8008576:	2302      	movs	r3, #2
 8008578:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800857a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800857e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008580:	2300      	movs	r3, #0
 8008582:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8008584:	2300      	movs	r3, #0
 8008586:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8008588:	f107 031c 	add.w	r3, r7, #28
 800858c:	4619      	mov	r1, r3
 800858e:	4831      	ldr	r0, [pc, #196]	; (8008654 <SPI_WIFI_MspInit+0x170>)
 8008590:	f7f9 fe3c 	bl	800220c <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8008594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008598:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800859a:	2301      	movs	r3, #1
 800859c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800859e:	2300      	movs	r3, #0
 80085a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80085a2:	2300      	movs	r3, #0
 80085a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 80085a6:	2300      	movs	r3, #0
 80085a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80085aa:	f107 031c 	add.w	r3, r7, #28
 80085ae:	4619      	mov	r1, r3
 80085b0:	4828      	ldr	r0, [pc, #160]	; (8008654 <SPI_WIFI_MspInit+0x170>)
 80085b2:	f7f9 fe2b 	bl	800220c <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 80085b6:	2201      	movs	r2, #1
 80085b8:	2101      	movs	r1, #1
 80085ba:	4826      	ldr	r0, [pc, #152]	; (8008654 <SPI_WIFI_MspInit+0x170>)
 80085bc:	f7fa f8dc 	bl	8002778 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 80085c0:	2301      	movs	r3, #1
 80085c2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80085c4:	2301      	movs	r3, #1
 80085c6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80085c8:	2300      	movs	r3, #0
 80085ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80085cc:	2301      	movs	r3, #1
 80085ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80085d0:	f107 031c 	add.w	r3, r7, #28
 80085d4:	4619      	mov	r1, r3
 80085d6:	481f      	ldr	r0, [pc, #124]	; (8008654 <SPI_WIFI_MspInit+0x170>)
 80085d8:	f7f9 fe18 	bl	800220c <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 80085dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085e0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80085e2:	2302      	movs	r3, #2
 80085e4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80085e6:	2300      	movs	r3, #0
 80085e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80085ea:	2301      	movs	r3, #1
 80085ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80085ee:	2306      	movs	r3, #6
 80085f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 80085f2:	f107 031c 	add.w	r3, r7, #28
 80085f6:	4619      	mov	r1, r3
 80085f8:	4817      	ldr	r0, [pc, #92]	; (8008658 <SPI_WIFI_MspInit+0x174>)
 80085fa:	f7f9 fe07 	bl	800220c <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 80085fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008602:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8008604:	2302      	movs	r3, #2
 8008606:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008608:	2300      	movs	r3, #0
 800860a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800860c:	2301      	movs	r3, #1
 800860e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8008610:	2306      	movs	r3, #6
 8008612:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8008614:	f107 031c 	add.w	r3, r7, #28
 8008618:	4619      	mov	r1, r3
 800861a:	480f      	ldr	r0, [pc, #60]	; (8008658 <SPI_WIFI_MspInit+0x174>)
 800861c:	f7f9 fdf6 	bl	800220c <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8008620:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008624:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8008626:	2302      	movs	r3, #2
 8008628:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 800862a:	2301      	movs	r3, #1
 800862c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800862e:	2301      	movs	r3, #1
 8008630:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8008632:	2306      	movs	r3, #6
 8008634:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8008636:	f107 031c 	add.w	r3, r7, #28
 800863a:	4619      	mov	r1, r3
 800863c:	4806      	ldr	r0, [pc, #24]	; (8008658 <SPI_WIFI_MspInit+0x174>)
 800863e:	f7f9 fde5 	bl	800220c <HAL_GPIO_Init>
}
 8008642:	bf00      	nop
 8008644:	3730      	adds	r7, #48	; 0x30
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	40021000 	.word	0x40021000
 8008650:	48000400 	.word	0x48000400
 8008654:	48001000 	.word	0x48001000
 8008658:	48000800 	.word	0x48000800

0800865c <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	4603      	mov	r3, r0
 8008664:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8008666:	2300      	movs	r3, #0
 8008668:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 800866a:	88fb      	ldrh	r3, [r7, #6]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d145      	bne.n	80086fc <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8008670:	4b27      	ldr	r3, [pc, #156]	; (8008710 <SPI_WIFI_Init+0xb4>)
 8008672:	4a28      	ldr	r2, [pc, #160]	; (8008714 <SPI_WIFI_Init+0xb8>)
 8008674:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8008676:	4826      	ldr	r0, [pc, #152]	; (8008710 <SPI_WIFI_Init+0xb4>)
 8008678:	f7ff ff34 	bl	80084e4 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 800867c:	4b24      	ldr	r3, [pc, #144]	; (8008710 <SPI_WIFI_Init+0xb4>)
 800867e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008682:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8008684:	4b22      	ldr	r3, [pc, #136]	; (8008710 <SPI_WIFI_Init+0xb4>)
 8008686:	2200      	movs	r2, #0
 8008688:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800868a:	4b21      	ldr	r3, [pc, #132]	; (8008710 <SPI_WIFI_Init+0xb4>)
 800868c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8008690:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8008692:	4b1f      	ldr	r3, [pc, #124]	; (8008710 <SPI_WIFI_Init+0xb4>)
 8008694:	2200      	movs	r2, #0
 8008696:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8008698:	4b1d      	ldr	r3, [pc, #116]	; (8008710 <SPI_WIFI_Init+0xb4>)
 800869a:	2200      	movs	r2, #0
 800869c:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 800869e:	4b1c      	ldr	r3, [pc, #112]	; (8008710 <SPI_WIFI_Init+0xb4>)
 80086a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086a4:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 80086a6:	4b1a      	ldr	r3, [pc, #104]	; (8008710 <SPI_WIFI_Init+0xb4>)
 80086a8:	2210      	movs	r2, #16
 80086aa:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80086ac:	4b18      	ldr	r3, [pc, #96]	; (8008710 <SPI_WIFI_Init+0xb4>)
 80086ae:	2200      	movs	r2, #0
 80086b0:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 80086b2:	4b17      	ldr	r3, [pc, #92]	; (8008710 <SPI_WIFI_Init+0xb4>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80086b8:	4b15      	ldr	r3, [pc, #84]	; (8008710 <SPI_WIFI_Init+0xb4>)
 80086ba:	2200      	movs	r2, #0
 80086bc:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 80086be:	4b14      	ldr	r3, [pc, #80]	; (8008710 <SPI_WIFI_Init+0xb4>)
 80086c0:	2200      	movs	r2, #0
 80086c2:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 80086c4:	4812      	ldr	r0, [pc, #72]	; (8008710 <SPI_WIFI_Init+0xb4>)
 80086c6:	f7fb ff21 	bl	800450c <HAL_SPI_Init>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d002      	beq.n	80086d6 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 80086d0:	f04f 33ff 	mov.w	r3, #4294967295
 80086d4:	e018      	b.n	8008708 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 80086d6:	2200      	movs	r2, #0
 80086d8:	2100      	movs	r1, #0
 80086da:	2007      	movs	r0, #7
 80086dc:	f7f9 fc1e 	bl	8001f1c <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 80086e0:	2007      	movs	r0, #7
 80086e2:	f7f9 fc37 	bl	8001f54 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 80086e6:	2200      	movs	r2, #0
 80086e8:	2100      	movs	r1, #0
 80086ea:	2033      	movs	r0, #51	; 0x33
 80086ec:	f7f9 fc16 	bl	8001f1c <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 80086f0:	2033      	movs	r0, #51	; 0x33
 80086f2:	f7f9 fc2f 	bl	8001f54 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 80086f6:	200a      	movs	r0, #10
 80086f8:	f000 f9fe 	bl	8008af8 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 80086fc:	f000 f80c 	bl	8008718 <SPI_WIFI_ResetModule>
 8008700:	4603      	mov	r3, r0
 8008702:	73fb      	strb	r3, [r7, #15]

  return rc;
 8008704:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	20000f5c 	.word	0x20000f5c
 8008714:	40003c00 	.word	0x40003c00

08008718 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800871e:	f7f9 fb15 	bl	8001d4c <HAL_GetTick>
 8008722:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8008724:	2300      	movs	r3, #0
 8008726:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8008728:	2200      	movs	r2, #0
 800872a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800872e:	4830      	ldr	r0, [pc, #192]	; (80087f0 <SPI_WIFI_ResetModule+0xd8>)
 8008730:	f7fa f822 	bl	8002778 <HAL_GPIO_WritePin>
 8008734:	200a      	movs	r0, #10
 8008736:	f7f9 fb15 	bl	8001d64 <HAL_Delay>
 800873a:	2201      	movs	r2, #1
 800873c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008740:	482b      	ldr	r0, [pc, #172]	; (80087f0 <SPI_WIFI_ResetModule+0xd8>)
 8008742:	f7fa f819 	bl	8002778 <HAL_GPIO_WritePin>
 8008746:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800874a:	f7f9 fb0b 	bl	8001d64 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 800874e:	2200      	movs	r2, #0
 8008750:	2101      	movs	r1, #1
 8008752:	4827      	ldr	r0, [pc, #156]	; (80087f0 <SPI_WIFI_ResetModule+0xd8>)
 8008754:	f7fa f810 	bl	8002778 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8008758:	200f      	movs	r0, #15
 800875a:	f000 f9cd 	bl	8008af8 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 800875e:	e020      	b.n	80087a2 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8008760:	7bfb      	ldrb	r3, [r7, #15]
 8008762:	463a      	mov	r2, r7
 8008764:	18d1      	adds	r1, r2, r3
 8008766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800876a:	2201      	movs	r2, #1
 800876c:	4821      	ldr	r0, [pc, #132]	; (80087f4 <SPI_WIFI_ResetModule+0xdc>)
 800876e:	f7fb ff98 	bl	80046a2 <HAL_SPI_Receive>
 8008772:	4603      	mov	r3, r0
 8008774:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8008776:	7bfb      	ldrb	r3, [r7, #15]
 8008778:	3302      	adds	r3, #2
 800877a:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 800877c:	f7f9 fae6 	bl	8001d4c <HAL_GetTick>
 8008780:	4602      	mov	r2, r0
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800878a:	d202      	bcs.n	8008792 <SPI_WIFI_ResetModule+0x7a>
 800878c:	79fb      	ldrb	r3, [r7, #7]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d007      	beq.n	80087a2 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 8008792:	2201      	movs	r2, #1
 8008794:	2101      	movs	r1, #1
 8008796:	4816      	ldr	r0, [pc, #88]	; (80087f0 <SPI_WIFI_ResetModule+0xd8>)
 8008798:	f7f9 ffee 	bl	8002778 <HAL_GPIO_WritePin>
      return -1;
 800879c:	f04f 33ff 	mov.w	r3, #4294967295
 80087a0:	e021      	b.n	80087e6 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 80087a2:	2102      	movs	r1, #2
 80087a4:	4812      	ldr	r0, [pc, #72]	; (80087f0 <SPI_WIFI_ResetModule+0xd8>)
 80087a6:	f7f9 ffcf 	bl	8002748 <HAL_GPIO_ReadPin>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d0d7      	beq.n	8008760 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 80087b0:	2201      	movs	r2, #1
 80087b2:	2101      	movs	r1, #1
 80087b4:	480e      	ldr	r0, [pc, #56]	; (80087f0 <SPI_WIFI_ResetModule+0xd8>)
 80087b6:	f7f9 ffdf 	bl	8002778 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 80087ba:	783b      	ldrb	r3, [r7, #0]
 80087bc:	2b15      	cmp	r3, #21
 80087be:	d10e      	bne.n	80087de <SPI_WIFI_ResetModule+0xc6>
 80087c0:	787b      	ldrb	r3, [r7, #1]
 80087c2:	2b15      	cmp	r3, #21
 80087c4:	d10b      	bne.n	80087de <SPI_WIFI_ResetModule+0xc6>
 80087c6:	78bb      	ldrb	r3, [r7, #2]
 80087c8:	2b0d      	cmp	r3, #13
 80087ca:	d108      	bne.n	80087de <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 80087cc:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 80087ce:	2b0a      	cmp	r3, #10
 80087d0:	d105      	bne.n	80087de <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 80087d2:	793b      	ldrb	r3, [r7, #4]
 80087d4:	2b3e      	cmp	r3, #62	; 0x3e
 80087d6:	d102      	bne.n	80087de <SPI_WIFI_ResetModule+0xc6>
 80087d8:	797b      	ldrb	r3, [r7, #5]
 80087da:	2b20      	cmp	r3, #32
 80087dc:	d002      	beq.n	80087e4 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 80087de:	f04f 33ff 	mov.w	r3, #4294967295
 80087e2:	e000      	b.n	80087e6 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	48001000 	.word	0x48001000
 80087f4:	20000f5c 	.word	0x20000f5c

080087f8 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 80087fc:	4802      	ldr	r0, [pc, #8]	; (8008808 <SPI_WIFI_DeInit+0x10>)
 80087fe:	f7fb ff28 	bl	8004652 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	bd80      	pop	{r7, pc}
 8008808:	20000f5c 	.word	0x20000f5c

0800880c <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8008814:	f7f9 fa9a 	bl	8001d4c <HAL_GetTick>
 8008818:	4603      	mov	r3, r0
 800881a:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 800881c:	e00a      	b.n	8008834 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800881e:	f7f9 fa95 	bl	8001d4c <HAL_GetTick>
 8008822:	4602      	mov	r2, r0
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	1ad2      	subs	r2, r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	429a      	cmp	r2, r3
 800882c:	d902      	bls.n	8008834 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800882e:	f04f 33ff 	mov.w	r3, #4294967295
 8008832:	e007      	b.n	8008844 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8008834:	2102      	movs	r1, #2
 8008836:	4805      	ldr	r0, [pc, #20]	; (800884c <wait_cmddata_rdy_high+0x40>)
 8008838:	f7f9 ff86 	bl	8002748 <HAL_GPIO_ReadPin>
 800883c:	4603      	mov	r3, r0
 800883e:	2b01      	cmp	r3, #1
 8008840:	d1ed      	bne.n	800881e <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	48001000 	.word	0x48001000

08008850 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8008858:	f7f9 fa78 	bl	8001d4c <HAL_GetTick>
 800885c:	4603      	mov	r3, r0
 800885e:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8008860:	e00a      	b.n	8008878 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8008862:	f7f9 fa73 	bl	8001d4c <HAL_GetTick>
 8008866:	4602      	mov	r2, r0
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	1ad2      	subs	r2, r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	429a      	cmp	r2, r3
 8008870:	d902      	bls.n	8008878 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8008872:	f04f 33ff 	mov.w	r3, #4294967295
 8008876:	e004      	b.n	8008882 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8008878:	4b04      	ldr	r3, [pc, #16]	; (800888c <wait_cmddata_rdy_rising_event+0x3c>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d0f0      	beq.n	8008862 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8008880:	2300      	movs	r3, #0
#endif
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	20000fc8 	.word	0x20000fc8

08008890 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8008898:	f7f9 fa58 	bl	8001d4c <HAL_GetTick>
 800889c:	4603      	mov	r3, r0
 800889e:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 80088a0:	e00a      	b.n	80088b8 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80088a2:	f7f9 fa53 	bl	8001d4c <HAL_GetTick>
 80088a6:	4602      	mov	r2, r0
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	1ad2      	subs	r2, r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d902      	bls.n	80088b8 <wait_spi_rx_event+0x28>
    {
      return -1;
 80088b2:	f04f 33ff 	mov.w	r3, #4294967295
 80088b6:	e004      	b.n	80088c2 <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 80088b8:	4b04      	ldr	r3, [pc, #16]	; (80088cc <wait_spi_rx_event+0x3c>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d0f0      	beq.n	80088a2 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 80088c0:	2300      	movs	r3, #0
#endif
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	20000fc0 	.word	0x20000fc0

080088d0 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80088d8:	f7f9 fa38 	bl	8001d4c <HAL_GetTick>
 80088dc:	4603      	mov	r3, r0
 80088de:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 80088e0:	e00a      	b.n	80088f8 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80088e2:	f7f9 fa33 	bl	8001d4c <HAL_GetTick>
 80088e6:	4602      	mov	r2, r0
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	1ad2      	subs	r2, r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d902      	bls.n	80088f8 <wait_spi_tx_event+0x28>
    {
      return -1;
 80088f2:	f04f 33ff 	mov.w	r3, #4294967295
 80088f6:	e004      	b.n	8008902 <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 80088f8:	4b04      	ldr	r3, [pc, #16]	; (800890c <wait_spi_tx_event+0x3c>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d0f0      	beq.n	80088e2 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8008900:	2300      	movs	r3, #0
#endif
}
 8008902:	4618      	mov	r0, r3
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	20000fc4 	.word	0x20000fc4

08008910 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	460b      	mov	r3, r1
 800891a:	607a      	str	r2, [r7, #4]
 800891c:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800891e:	2300      	movs	r3, #0
 8008920:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 8008922:	2201      	movs	r2, #1
 8008924:	2101      	movs	r1, #1
 8008926:	4834      	ldr	r0, [pc, #208]	; (80089f8 <SPI_WIFI_ReceiveData+0xe8>)
 8008928:	f7f9 ff26 	bl	8002778 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 800892c:	2003      	movs	r0, #3
 800892e:	f000 f8e3 	bl	8008af8 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4618      	mov	r0, r3
 8008936:	f7ff ff8b 	bl	8008850 <wait_cmddata_rdy_rising_event>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	da02      	bge.n	8008946 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8008940:	f06f 0302 	mvn.w	r3, #2
 8008944:	e054      	b.n	80089f0 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8008946:	2200      	movs	r2, #0
 8008948:	2101      	movs	r1, #1
 800894a:	482b      	ldr	r0, [pc, #172]	; (80089f8 <SPI_WIFI_ReceiveData+0xe8>)
 800894c:	f7f9 ff14 	bl	8002778 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8008950:	200f      	movs	r0, #15
 8008952:	f000 f8d1 	bl	8008af8 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8008956:	e03d      	b.n	80089d4 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8008958:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800895c:	897b      	ldrh	r3, [r7, #10]
 800895e:	429a      	cmp	r2, r3
 8008960:	db02      	blt.n	8008968 <SPI_WIFI_ReceiveData+0x58>
 8008962:	897b      	ldrh	r3, [r7, #10]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d13c      	bne.n	80089e2 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8008968:	4b24      	ldr	r3, [pc, #144]	; (80089fc <SPI_WIFI_ReceiveData+0xec>)
 800896a:	2201      	movs	r2, #1
 800896c:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800896e:	f107 0314 	add.w	r3, r7, #20
 8008972:	2201      	movs	r2, #1
 8008974:	4619      	mov	r1, r3
 8008976:	4822      	ldr	r0, [pc, #136]	; (8008a00 <SPI_WIFI_ReceiveData+0xf0>)
 8008978:	f7fc fa64 	bl	8004e44 <HAL_SPI_Receive_IT>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d007      	beq.n	8008992 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8008982:	2201      	movs	r2, #1
 8008984:	2101      	movs	r1, #1
 8008986:	481c      	ldr	r0, [pc, #112]	; (80089f8 <SPI_WIFI_ReceiveData+0xe8>)
 8008988:	f7f9 fef6 	bl	8002778 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 800898c:	f04f 33ff 	mov.w	r3, #4294967295
 8008990:	e02e      	b.n	80089f0 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4618      	mov	r0, r3
 8008996:	f7ff ff7b 	bl	8008890 <wait_spi_rx_event>

      pData[0] = tmp[0];
 800899a:	7d3a      	ldrb	r2, [r7, #20]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	3301      	adds	r3, #1
 80089a4:	7d7a      	ldrb	r2, [r7, #21]
 80089a6:	701a      	strb	r2, [r3, #0]
      length += 2;
 80089a8:	8afb      	ldrh	r3, [r7, #22]
 80089aa:	3302      	adds	r3, #2
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	3302      	adds	r3, #2
 80089b4:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 80089b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80089ba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80089be:	db09      	blt.n	80089d4 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 80089c0:	2201      	movs	r2, #1
 80089c2:	2101      	movs	r1, #1
 80089c4:	480c      	ldr	r0, [pc, #48]	; (80089f8 <SPI_WIFI_ReceiveData+0xe8>)
 80089c6:	f7f9 fed7 	bl	8002778 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 80089ca:	f7ff fea5 	bl	8008718 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 80089ce:	f06f 0303 	mvn.w	r3, #3
 80089d2:	e00d      	b.n	80089f0 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 80089d4:	2102      	movs	r1, #2
 80089d6:	4808      	ldr	r0, [pc, #32]	; (80089f8 <SPI_WIFI_ReceiveData+0xe8>)
 80089d8:	f7f9 feb6 	bl	8002748 <HAL_GPIO_ReadPin>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d0ba      	beq.n	8008958 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 80089e2:	2201      	movs	r2, #1
 80089e4:	2101      	movs	r1, #1
 80089e6:	4804      	ldr	r0, [pc, #16]	; (80089f8 <SPI_WIFI_ReceiveData+0xe8>)
 80089e8:	f7f9 fec6 	bl	8002778 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 80089ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3718      	adds	r7, #24
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	48001000 	.word	0x48001000
 80089fc:	20000fc0 	.word	0x20000fc0
 8008a00:	20000f5c 	.word	0x20000f5c

08008a04 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	607a      	str	r2, [r7, #4]
 8008a10:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7ff fef9 	bl	800880c <wait_cmddata_rdy_high>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	da02      	bge.n	8008a26 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8008a20:	f04f 33ff 	mov.w	r3, #4294967295
 8008a24:	e04f      	b.n	8008ac6 <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 8008a26:	4b2a      	ldr	r3, [pc, #168]	; (8008ad0 <SPI_WIFI_SendData+0xcc>)
 8008a28:	2201      	movs	r2, #1
 8008a2a:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	2101      	movs	r1, #1
 8008a30:	4828      	ldr	r0, [pc, #160]	; (8008ad4 <SPI_WIFI_SendData+0xd0>)
 8008a32:	f7f9 fea1 	bl	8002778 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8008a36:	200f      	movs	r0, #15
 8008a38:	f000 f85e 	bl	8008af8 <SPI_WIFI_DelayUs>
  if (len > 1)
 8008a3c:	897b      	ldrh	r3, [r7, #10]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d919      	bls.n	8008a76 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 8008a42:	4b25      	ldr	r3, [pc, #148]	; (8008ad8 <SPI_WIFI_SendData+0xd4>)
 8008a44:	2201      	movs	r2, #1
 8008a46:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8008a48:	897b      	ldrh	r3, [r7, #10]
 8008a4a:	085b      	lsrs	r3, r3, #1
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	461a      	mov	r2, r3
 8008a50:	68f9      	ldr	r1, [r7, #12]
 8008a52:	4822      	ldr	r0, [pc, #136]	; (8008adc <SPI_WIFI_SendData+0xd8>)
 8008a54:	f7fc f968 	bl	8004d28 <HAL_SPI_Transmit_IT>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d007      	beq.n	8008a6e <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8008a5e:	2201      	movs	r2, #1
 8008a60:	2101      	movs	r1, #1
 8008a62:	481c      	ldr	r0, [pc, #112]	; (8008ad4 <SPI_WIFI_SendData+0xd0>)
 8008a64:	f7f9 fe88 	bl	8002778 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8008a68:	f04f 33ff 	mov.w	r3, #4294967295
 8008a6c:	e02b      	b.n	8008ac6 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7ff ff2d 	bl	80088d0 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 8008a76:	897b      	ldrh	r3, [r7, #10]
 8008a78:	f003 0301 	and.w	r3, r3, #1
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d020      	beq.n	8008ac2 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 8008a80:	897b      	ldrh	r3, [r7, #10]
 8008a82:	3b01      	subs	r3, #1
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	4413      	add	r3, r2
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8008a8c:	230a      	movs	r3, #10
 8008a8e:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8008a90:	4b11      	ldr	r3, [pc, #68]	; (8008ad8 <SPI_WIFI_SendData+0xd4>)
 8008a92:	2201      	movs	r2, #1
 8008a94:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8008a96:	f107 0314 	add.w	r3, r7, #20
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	480f      	ldr	r0, [pc, #60]	; (8008adc <SPI_WIFI_SendData+0xd8>)
 8008aa0:	f7fc f942 	bl	8004d28 <HAL_SPI_Transmit_IT>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d007      	beq.n	8008aba <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8008aaa:	2201      	movs	r2, #1
 8008aac:	2101      	movs	r1, #1
 8008aae:	4809      	ldr	r0, [pc, #36]	; (8008ad4 <SPI_WIFI_SendData+0xd0>)
 8008ab0:	f7f9 fe62 	bl	8002778 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8008ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab8:	e005      	b.n	8008ac6 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7ff ff07 	bl	80088d0 <wait_spi_tx_event>
    
  }
  return len;
 8008ac2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3718      	adds	r7, #24
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	20000fc8 	.word	0x20000fc8
 8008ad4:	48001000 	.word	0x48001000
 8008ad8:	20000fc4 	.word	0x20000fc4
 8008adc:	20000f5c 	.word	0x20000f5c

08008ae0 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f7f9 f93b 	bl	8001d64 <HAL_Delay>
}
 8008aee:	bf00      	nop
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
	...

08008af8 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8008b00:	2300      	movs	r3, #0
 8008b02:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8008b04:	2300      	movs	r3, #0
 8008b06:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8008b08:	4b20      	ldr	r3, [pc, #128]	; (8008b8c <SPI_WIFI_DelayUs+0x94>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d122      	bne.n	8008b56 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8008b10:	4b1f      	ldr	r3, [pc, #124]	; (8008b90 <SPI_WIFI_DelayUs+0x98>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a1f      	ldr	r2, [pc, #124]	; (8008b94 <SPI_WIFI_DelayUs+0x9c>)
 8008b16:	fba2 2303 	umull	r2, r3, r2, r3
 8008b1a:	099b      	lsrs	r3, r3, #6
 8008b1c:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8008b26:	f7f9 f911 	bl	8001d4c <HAL_GetTick>
 8008b2a:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8008b2c:	e002      	b.n	8008b34 <SPI_WIFI_DelayUs+0x3c>
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	3b01      	subs	r3, #1
 8008b32:	60bb      	str	r3, [r7, #8]
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1f9      	bne.n	8008b2e <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 8008b3a:	f7f9 f907 	bl	8001d4c <HAL_GetTick>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	1ad3      	subs	r3, r2, r3
 8008b44:	4a11      	ldr	r2, [pc, #68]	; (8008b8c <SPI_WIFI_DelayUs+0x94>)
 8008b46:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8008b48:	4b10      	ldr	r3, [pc, #64]	; (8008b8c <SPI_WIFI_DelayUs+0x94>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d102      	bne.n	8008b56 <SPI_WIFI_DelayUs+0x5e>
 8008b50:	4b0e      	ldr	r3, [pc, #56]	; (8008b8c <SPI_WIFI_DelayUs+0x94>)
 8008b52:	2201      	movs	r2, #1
 8008b54:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8008b56:	4b0e      	ldr	r3, [pc, #56]	; (8008b90 <SPI_WIFI_DelayUs+0x98>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a0f      	ldr	r2, [pc, #60]	; (8008b98 <SPI_WIFI_DelayUs+0xa0>)
 8008b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b60:	0c9a      	lsrs	r2, r3, #18
 8008b62:	4b0a      	ldr	r3, [pc, #40]	; (8008b8c <SPI_WIFI_DelayUs+0x94>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b6a:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	fb02 f303 	mul.w	r3, r2, r3
 8008b74:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8008b76:	e002      	b.n	8008b7e <SPI_WIFI_DelayUs+0x86>
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	60bb      	str	r3, [r7, #8]
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1f9      	bne.n	8008b78 <SPI_WIFI_DelayUs+0x80>
  return;
 8008b84:	bf00      	nop
}
 8008b86:	3718      	adds	r7, #24
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	20000fcc 	.word	0x20000fcc
 8008b90:	20000000 	.word	0x20000000
 8008b94:	10624dd3 	.word	0x10624dd3
 8008b98:	431bde83 	.word	0x431bde83

08008b9c <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8008ba4:	4b06      	ldr	r3, [pc, #24]	; (8008bc0 <HAL_SPI_RxCpltCallback+0x24>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d002      	beq.n	8008bb2 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8008bac:	4b04      	ldr	r3, [pc, #16]	; (8008bc0 <HAL_SPI_RxCpltCallback+0x24>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	601a      	str	r2, [r3, #0]
  }
}
 8008bb2:	bf00      	nop
 8008bb4:	370c      	adds	r7, #12
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop
 8008bc0:	20000fc0 	.word	0x20000fc0

08008bc4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8008bcc:	4b06      	ldr	r3, [pc, #24]	; (8008be8 <HAL_SPI_TxCpltCallback+0x24>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d002      	beq.n	8008bda <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8008bd4:	4b04      	ldr	r3, [pc, #16]	; (8008be8 <HAL_SPI_TxCpltCallback+0x24>)
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	601a      	str	r2, [r3, #0]
  }
}
 8008bda:	bf00      	nop
 8008bdc:	370c      	adds	r7, #12
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	20000fc4 	.word	0x20000fc4

08008bec <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8008bec:	b480      	push	{r7}
 8008bee:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8008bf0:	4b05      	ldr	r3, [pc, #20]	; (8008c08 <SPI_WIFI_ISR+0x1c>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d102      	bne.n	8008bfe <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8008bf8:	4b03      	ldr	r3, [pc, #12]	; (8008c08 <SPI_WIFI_ISR+0x1c>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	601a      	str	r2, [r3, #0]
   }
}
 8008bfe:	bf00      	nop
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr
 8008c08:	20000fc8 	.word	0x20000fc8

08008c0c <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8008c16:	4b0d      	ldr	r3, [pc, #52]	; (8008c4c <WIFI_Init+0x40>)
 8008c18:	9301      	str	r3, [sp, #4]
 8008c1a:	4b0d      	ldr	r3, [pc, #52]	; (8008c50 <WIFI_Init+0x44>)
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	4b0d      	ldr	r3, [pc, #52]	; (8008c54 <WIFI_Init+0x48>)
 8008c20:	4a0d      	ldr	r2, [pc, #52]	; (8008c58 <WIFI_Init+0x4c>)
 8008c22:	490e      	ldr	r1, [pc, #56]	; (8008c5c <WIFI_Init+0x50>)
 8008c24:	480e      	ldr	r0, [pc, #56]	; (8008c60 <WIFI_Init+0x54>)
 8008c26:	f7fe ff1d 	bl	8007a64 <ES_WIFI_RegisterBusIO>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d107      	bne.n	8008c40 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8008c30:	480b      	ldr	r0, [pc, #44]	; (8008c60 <WIFI_Init+0x54>)
 8008c32:	f7fe fee9 	bl	8007a08 <ES_WIFI_Init>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d101      	bne.n	8008c40 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8008c40:	79fb      	ldrb	r3, [r7, #7]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3708      	adds	r7, #8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	08008911 	.word	0x08008911
 8008c50:	08008a05 	.word	0x08008a05
 8008c54:	08008ae1 	.word	0x08008ae1
 8008c58:	080087f9 	.word	0x080087f9
 8008c5c:	0800865d 	.word	0x0800865d
 8008c60:	20000fd0 	.word	0x20000fd0

08008c64 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8008c76:	79fb      	ldrb	r3, [r7, #7]
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	68f9      	ldr	r1, [r7, #12]
 8008c7c:	4809      	ldr	r0, [pc, #36]	; (8008ca4 <WIFI_Connect+0x40>)
 8008c7e:	f7fe ff25 	bl	8007acc <ES_WIFI_Connect>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d107      	bne.n	8008c98 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8008c88:	4806      	ldr	r0, [pc, #24]	; (8008ca4 <WIFI_Connect+0x40>)
 8008c8a:	f7fe ffc3 	bl	8007c14 <ES_WIFI_GetNetworkSettings>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d101      	bne.n	8008c98 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8008c94:	2300      	movs	r3, #0
 8008c96:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8008c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3718      	adds	r7, #24
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	20000fd0 	.word	0x20000fd0

08008ca8 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8008cb4:	6879      	ldr	r1, [r7, #4]
 8008cb6:	4806      	ldr	r0, [pc, #24]	; (8008cd0 <WIFI_GetMAC_Address+0x28>)
 8008cb8:	f7fe ffd6 	bl	8007c68 <ES_WIFI_GetMACAddress>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d101      	bne.n	8008cc6 <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	20000fd0 	.word	0x20000fd0

08008cd4 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8008ce0:	4809      	ldr	r0, [pc, #36]	; (8008d08 <WIFI_GetIP_Address+0x34>)
 8008ce2:	f7fe ff6b 	bl	8007bbc <ES_WIFI_IsConnected>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d107      	bne.n	8008cfc <WIFI_GetIP_Address+0x28>
 8008cec:	4b06      	ldr	r3, [pc, #24]	; (8008d08 <WIFI_GetIP_Address+0x34>)
 8008cee:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 8008cf2:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	20000fd0 	.word	0x20000fd0

08008d0c <WIFI_StartServer>:
  * @param  name : name of the connection
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, uint16_t backlog ,const char *name, uint16_t port)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b08a      	sub	sp, #40	; 0x28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	607b      	str	r3, [r7, #4]
 8008d16:	460b      	mov	r3, r1
 8008d18:	72fb      	strb	r3, [r7, #11]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	813b      	strh	r3, [r7, #8]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	747b      	strb	r3, [r7, #17]
  conn.LocalPort = port;
 8008d2a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008d2c:	82bb      	strh	r3, [r7, #20]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8008d2e:	7afb      	ldrb	r3, [r7, #11]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	bf14      	ite	ne
 8008d34:	2301      	movne	r3, #1
 8008d36:	2300      	moveq	r3, #0
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	743b      	strb	r3, [r7, #16]
  conn.Backlog = backlog;
 8008d3c:	893b      	ldrh	r3, [r7, #8]
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	f887 3020 	strb.w	r3, [r7, #32]
  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8008d44:	f107 0310 	add.w	r3, r7, #16
 8008d48:	4619      	mov	r1, r3
 8008d4a:	4807      	ldr	r0, [pc, #28]	; (8008d68 <WIFI_StartServer+0x5c>)
 8008d4c:	f7fe ffbe 	bl	8007ccc <ES_WIFI_StartServerSingleConn>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d102      	bne.n	8008d5c <WIFI_StartServer+0x50>
  {
    ret = WIFI_STATUS_OK;
 8008d56:	2300      	movs	r3, #0
 8008d58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8008d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3728      	adds	r7, #40	; 0x28
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	20000fd0 	.word	0x20000fd0

08008d6c <WIFI_WaitServerConnection>:
  * @brief  Wait for a client connection to the server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_WaitServerConnection(int socket,uint32_t Timeout,uint8_t *RemoteIp,uint16_t *RemotePort)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b08a      	sub	sp, #40	; 0x28
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
 8008d78:	603b      	str	r3, [r7, #0]
  ES_WIFI_Conn_t conn;
  ES_WIFI_Status_t ret;
  
  conn.Number = socket;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	747b      	strb	r3, [r7, #17]

  ret = ES_WIFI_WaitServerConnection(&EsWifiObj,Timeout,&conn);
 8008d80:	f107 0310 	add.w	r3, r7, #16
 8008d84:	461a      	mov	r2, r3
 8008d86:	68b9      	ldr	r1, [r7, #8]
 8008d88:	4819      	ldr	r0, [pc, #100]	; (8008df0 <WIFI_WaitServerConnection+0x84>)
 8008d8a:	f7ff f84b 	bl	8007e24 <ES_WIFI_WaitServerConnection>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ES_WIFI_STATUS_OK == ret)
 8008d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d10f      	bne.n	8008dbc <WIFI_WaitServerConnection+0x50>
  {
    if (RemotePort) *RemotePort=conn.RemotePort;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d002      	beq.n	8008da8 <WIFI_WaitServerConnection+0x3c>
 8008da2:	8a7a      	ldrh	r2, [r7, #18]
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	801a      	strh	r2, [r3, #0]
    if (RemoteIp)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d004      	beq.n	8008db8 <WIFI_WaitServerConnection+0x4c>
 8008dae:	f8d7 3016 	ldr.w	r3, [r7, #22]
 8008db2:	461a      	mov	r2, r3
    {
      memcpy(RemoteIp,conn.RemoteIP,sizeof(conn.RemoteIP));
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	601a      	str	r2, [r3, #0]
    }
    return  WIFI_STATUS_OK;
 8008db8:	2300      	movs	r3, #0
 8008dba:	e014      	b.n	8008de6 <WIFI_WaitServerConnection+0x7a>
  }
  
  if (ES_WIFI_STATUS_TIMEOUT ==ret)
 8008dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dc0:	2b03      	cmp	r3, #3
 8008dc2:	d10f      	bne.n	8008de4 <WIFI_WaitServerConnection+0x78>
  {
    if (RemotePort) *RemotePort=0;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d002      	beq.n	8008dd0 <WIFI_WaitServerConnection+0x64>
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	801a      	strh	r2, [r3, #0]
    if (RemoteIp)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d004      	beq.n	8008de0 <WIFI_WaitServerConnection+0x74>
    {
      memset(RemoteIp,0,sizeof(conn.RemoteIP));
 8008dd6:	2204      	movs	r2, #4
 8008dd8:	2100      	movs	r1, #0
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f003 f970 	bl	800c0c0 <memset>
    }
    return  WIFI_STATUS_TIMEOUT;
 8008de0:	2305      	movs	r3, #5
 8008de2:	e000      	b.n	8008de6 <WIFI_WaitServerConnection+0x7a>
  }

  return WIFI_STATUS_ERROR;
 8008de4:	2301      	movs	r3, #1
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3728      	adds	r7, #40	; 0x28
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	20000fd0 	.word	0x20000fd0

08008df4 <WIFI_CloseServerConnection>:
/**
  * @brief  Close current connection from a client  to the server
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseServerConnection(int socket)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	73fb      	strb	r3, [r7, #15]
  if (ES_WIFI_STATUS_OK == ES_WIFI_CloseServerConnection(&EsWifiObj,socket))
 8008e00:	6879      	ldr	r1, [r7, #4]
 8008e02:	4806      	ldr	r0, [pc, #24]	; (8008e1c <WIFI_CloseServerConnection+0x28>)
 8008e04:	f7ff f930 	bl	8008068 <ES_WIFI_CloseServerConnection>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d101      	bne.n	8008e12 <WIFI_CloseServerConnection+0x1e>
  {
    ret = WIFI_STATUS_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	20000fd0 	.word	0x20000fd0

08008e20 <WIFI_StopServer>:
  * @brief  Stop a server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_StopServer(uint32_t socket)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_StopServerSingleConn(&EsWifiObj,socket)== ES_WIFI_STATUS_OK)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4619      	mov	r1, r3
 8008e30:	4806      	ldr	r0, [pc, #24]	; (8008e4c <WIFI_StopServer+0x2c>)
 8008e32:	f7ff f979 	bl	8008128 <ES_WIFI_StopServerSingleConn>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d101      	bne.n	8008e40 <WIFI_StopServer+0x20>
  {
    ret = WIFI_STATUS_OK;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	20000fd0 	.word	0x20000fd0

08008e50 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b088      	sub	sp, #32
 8008e54:	af02      	add	r7, sp, #8
 8008e56:	60b9      	str	r1, [r7, #8]
 8008e58:	607b      	str	r3, [r7, #4]
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	73fb      	strb	r3, [r7, #15]
 8008e5e:	4613      	mov	r3, r2
 8008e60:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8008e66:	89ba      	ldrh	r2, [r7, #12]
 8008e68:	7bf9      	ldrb	r1, [r7, #15]
 8008e6a:	6a3b      	ldr	r3, [r7, #32]
 8008e6c:	9301      	str	r3, [sp, #4]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	9300      	str	r3, [sp, #0]
 8008e72:	4613      	mov	r3, r2
 8008e74:	68ba      	ldr	r2, [r7, #8]
 8008e76:	4806      	ldr	r0, [pc, #24]	; (8008e90 <WIFI_SendData+0x40>)
 8008e78:	f7ff f9b8 	bl	80081ec <ES_WIFI_SendData>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d101      	bne.n	8008e86 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8008e82:	2300      	movs	r3, #0
 8008e84:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8008e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3718      	adds	r7, #24
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	20000fd0 	.word	0x20000fd0

08008e94 <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b088      	sub	sp, #32
 8008e98:	af02      	add	r7, sp, #8
 8008e9a:	60b9      	str	r1, [r7, #8]
 8008e9c:	607b      	str	r3, [r7, #4]
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	73fb      	strb	r3, [r7, #15]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8008eaa:	89ba      	ldrh	r2, [r7, #12]
 8008eac:	7bf9      	ldrb	r1, [r7, #15]
 8008eae:	6a3b      	ldr	r3, [r7, #32]
 8008eb0:	9301      	str	r3, [sp, #4]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	68ba      	ldr	r2, [r7, #8]
 8008eba:	4806      	ldr	r0, [pc, #24]	; (8008ed4 <WIFI_ReceiveData+0x40>)
 8008ebc:	f7ff fa52 	bl	8008364 <ES_WIFI_ReceiveData>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d101      	bne.n	8008eca <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3718      	adds	r7, #24
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	20000fd0 	.word	0x20000fd0

08008ed8 <__NVIC_SetPriority>:
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	4603      	mov	r3, r0
 8008ee0:	6039      	str	r1, [r7, #0]
 8008ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	db0a      	blt.n	8008f02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	b2da      	uxtb	r2, r3
 8008ef0:	490c      	ldr	r1, [pc, #48]	; (8008f24 <__NVIC_SetPriority+0x4c>)
 8008ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ef6:	0112      	lsls	r2, r2, #4
 8008ef8:	b2d2      	uxtb	r2, r2
 8008efa:	440b      	add	r3, r1
 8008efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008f00:	e00a      	b.n	8008f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	b2da      	uxtb	r2, r3
 8008f06:	4908      	ldr	r1, [pc, #32]	; (8008f28 <__NVIC_SetPriority+0x50>)
 8008f08:	79fb      	ldrb	r3, [r7, #7]
 8008f0a:	f003 030f 	and.w	r3, r3, #15
 8008f0e:	3b04      	subs	r3, #4
 8008f10:	0112      	lsls	r2, r2, #4
 8008f12:	b2d2      	uxtb	r2, r2
 8008f14:	440b      	add	r3, r1
 8008f16:	761a      	strb	r2, [r3, #24]
}
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr
 8008f24:	e000e100 	.word	0xe000e100
 8008f28:	e000ed00 	.word	0xe000ed00

08008f2c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008f30:	4b05      	ldr	r3, [pc, #20]	; (8008f48 <SysTick_Handler+0x1c>)
 8008f32:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008f34:	f001 ff16 	bl	800ad64 <xTaskGetSchedulerState>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d001      	beq.n	8008f42 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008f3e:	f002 fcfb 	bl	800b938 <xPortSysTickHandler>
  }
}
 8008f42:	bf00      	nop
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	e000e010 	.word	0xe000e010

08008f4c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008f50:	2100      	movs	r1, #0
 8008f52:	f06f 0004 	mvn.w	r0, #4
 8008f56:	f7ff ffbf 	bl	8008ed8 <__NVIC_SetPriority>
#endif
}
 8008f5a:	bf00      	nop
 8008f5c:	bd80      	pop	{r7, pc}
	...

08008f60 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f66:	f3ef 8305 	mrs	r3, IPSR
 8008f6a:	603b      	str	r3, [r7, #0]
  return(result);
 8008f6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d003      	beq.n	8008f7a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008f72:	f06f 0305 	mvn.w	r3, #5
 8008f76:	607b      	str	r3, [r7, #4]
 8008f78:	e00c      	b.n	8008f94 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008f7a:	4b0a      	ldr	r3, [pc, #40]	; (8008fa4 <osKernelInitialize+0x44>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d105      	bne.n	8008f8e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008f82:	4b08      	ldr	r3, [pc, #32]	; (8008fa4 <osKernelInitialize+0x44>)
 8008f84:	2201      	movs	r2, #1
 8008f86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	607b      	str	r3, [r7, #4]
 8008f8c:	e002      	b.n	8008f94 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f94:	687b      	ldr	r3, [r7, #4]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	370c      	adds	r7, #12
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	200018d0 	.word	0x200018d0

08008fa8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fae:	f3ef 8305 	mrs	r3, IPSR
 8008fb2:	603b      	str	r3, [r7, #0]
  return(result);
 8008fb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d003      	beq.n	8008fc2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008fba:	f06f 0305 	mvn.w	r3, #5
 8008fbe:	607b      	str	r3, [r7, #4]
 8008fc0:	e010      	b.n	8008fe4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008fc2:	4b0b      	ldr	r3, [pc, #44]	; (8008ff0 <osKernelStart+0x48>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d109      	bne.n	8008fde <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008fca:	f7ff ffbf 	bl	8008f4c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008fce:	4b08      	ldr	r3, [pc, #32]	; (8008ff0 <osKernelStart+0x48>)
 8008fd0:	2202      	movs	r2, #2
 8008fd2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008fd4:	f001 fa6a 	bl	800a4ac <vTaskStartScheduler>
      stat = osOK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	607b      	str	r3, [r7, #4]
 8008fdc:	e002      	b.n	8008fe4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008fde:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008fe4:	687b      	ldr	r3, [r7, #4]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	200018d0 	.word	0x200018d0

08008ff4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b08e      	sub	sp, #56	; 0x38
 8008ff8:	af04      	add	r7, sp, #16
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009000:	2300      	movs	r3, #0
 8009002:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009004:	f3ef 8305 	mrs	r3, IPSR
 8009008:	617b      	str	r3, [r7, #20]
  return(result);
 800900a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800900c:	2b00      	cmp	r3, #0
 800900e:	d17e      	bne.n	800910e <osThreadNew+0x11a>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d07b      	beq.n	800910e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009016:	2380      	movs	r3, #128	; 0x80
 8009018:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800901a:	2318      	movs	r3, #24
 800901c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800901e:	2300      	movs	r3, #0
 8009020:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009022:	f04f 33ff 	mov.w	r3, #4294967295
 8009026:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d045      	beq.n	80090ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d002      	beq.n	800903c <osThreadNew+0x48>
        name = attr->name;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	699b      	ldr	r3, [r3, #24]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d002      	beq.n	800904a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d008      	beq.n	8009062 <osThreadNew+0x6e>
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	2b38      	cmp	r3, #56	; 0x38
 8009054:	d805      	bhi.n	8009062 <osThreadNew+0x6e>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	f003 0301 	and.w	r3, r3, #1
 800905e:	2b00      	cmp	r3, #0
 8009060:	d001      	beq.n	8009066 <osThreadNew+0x72>
        return (NULL);
 8009062:	2300      	movs	r3, #0
 8009064:	e054      	b.n	8009110 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	695b      	ldr	r3, [r3, #20]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d003      	beq.n	8009076 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	695b      	ldr	r3, [r3, #20]
 8009072:	089b      	lsrs	r3, r3, #2
 8009074:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00e      	beq.n	800909c <osThreadNew+0xa8>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	2bbb      	cmp	r3, #187	; 0xbb
 8009084:	d90a      	bls.n	800909c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800908a:	2b00      	cmp	r3, #0
 800908c:	d006      	beq.n	800909c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	695b      	ldr	r3, [r3, #20]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d002      	beq.n	800909c <osThreadNew+0xa8>
        mem = 1;
 8009096:	2301      	movs	r3, #1
 8009098:	61bb      	str	r3, [r7, #24]
 800909a:	e010      	b.n	80090be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d10c      	bne.n	80090be <osThreadNew+0xca>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d108      	bne.n	80090be <osThreadNew+0xca>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d104      	bne.n	80090be <osThreadNew+0xca>
          mem = 0;
 80090b4:	2300      	movs	r3, #0
 80090b6:	61bb      	str	r3, [r7, #24]
 80090b8:	e001      	b.n	80090be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80090ba:	2300      	movs	r3, #0
 80090bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d110      	bne.n	80090e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80090cc:	9202      	str	r2, [sp, #8]
 80090ce:	9301      	str	r3, [sp, #4]
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	9300      	str	r3, [sp, #0]
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	6a3a      	ldr	r2, [r7, #32]
 80090d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f000 fffa 	bl	800a0d4 <xTaskCreateStatic>
 80090e0:	4603      	mov	r3, r0
 80090e2:	613b      	str	r3, [r7, #16]
 80090e4:	e013      	b.n	800910e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d110      	bne.n	800910e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	f107 0310 	add.w	r3, r7, #16
 80090f4:	9301      	str	r3, [sp, #4]
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	9300      	str	r3, [sp, #0]
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f001 f845 	bl	800a18e <xTaskCreate>
 8009104:	4603      	mov	r3, r0
 8009106:	2b01      	cmp	r3, #1
 8009108:	d001      	beq.n	800910e <osThreadNew+0x11a>
            hTask = NULL;
 800910a:	2300      	movs	r3, #0
 800910c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800910e:	693b      	ldr	r3, [r7, #16]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3728      	adds	r7, #40	; 0x28
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009120:	f3ef 8305 	mrs	r3, IPSR
 8009124:	60bb      	str	r3, [r7, #8]
  return(result);
 8009126:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009128:	2b00      	cmp	r3, #0
 800912a:	d003      	beq.n	8009134 <osDelay+0x1c>
    stat = osErrorISR;
 800912c:	f06f 0305 	mvn.w	r3, #5
 8009130:	60fb      	str	r3, [r7, #12]
 8009132:	e007      	b.n	8009144 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009134:	2300      	movs	r3, #0
 8009136:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d002      	beq.n	8009144 <osDelay+0x2c>
      vTaskDelay(ticks);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f001 f980 	bl	800a444 <vTaskDelay>
    }
  }

  return (stat);
 8009144:	68fb      	ldr	r3, [r7, #12]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800914e:	b580      	push	{r7, lr}
 8009150:	b08a      	sub	sp, #40	; 0x28
 8009152:	af02      	add	r7, sp, #8
 8009154:	60f8      	str	r0, [r7, #12]
 8009156:	60b9      	str	r1, [r7, #8]
 8009158:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800915a:	2300      	movs	r3, #0
 800915c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800915e:	f3ef 8305 	mrs	r3, IPSR
 8009162:	613b      	str	r3, [r7, #16]
  return(result);
 8009164:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009166:	2b00      	cmp	r3, #0
 8009168:	d175      	bne.n	8009256 <osSemaphoreNew+0x108>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d072      	beq.n	8009256 <osSemaphoreNew+0x108>
 8009170:	68ba      	ldr	r2, [r7, #8]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	429a      	cmp	r2, r3
 8009176:	d86e      	bhi.n	8009256 <osSemaphoreNew+0x108>
    mem = -1;
 8009178:	f04f 33ff 	mov.w	r3, #4294967295
 800917c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d015      	beq.n	80091b0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d006      	beq.n	800919a <osSemaphoreNew+0x4c>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	2b4f      	cmp	r3, #79	; 0x4f
 8009192:	d902      	bls.n	800919a <osSemaphoreNew+0x4c>
        mem = 1;
 8009194:	2301      	movs	r3, #1
 8009196:	61bb      	str	r3, [r7, #24]
 8009198:	e00c      	b.n	80091b4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d108      	bne.n	80091b4 <osSemaphoreNew+0x66>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d104      	bne.n	80091b4 <osSemaphoreNew+0x66>
          mem = 0;
 80091aa:	2300      	movs	r3, #0
 80091ac:	61bb      	str	r3, [r7, #24]
 80091ae:	e001      	b.n	80091b4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80091b0:	2300      	movs	r3, #0
 80091b2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ba:	d04c      	beq.n	8009256 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d128      	bne.n	8009214 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d10a      	bne.n	80091de <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	2203      	movs	r2, #3
 80091ce:	9200      	str	r2, [sp, #0]
 80091d0:	2200      	movs	r2, #0
 80091d2:	2100      	movs	r1, #0
 80091d4:	2001      	movs	r0, #1
 80091d6:	f000 fa07 	bl	80095e8 <xQueueGenericCreateStatic>
 80091da:	61f8      	str	r0, [r7, #28]
 80091dc:	e005      	b.n	80091ea <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80091de:	2203      	movs	r2, #3
 80091e0:	2100      	movs	r1, #0
 80091e2:	2001      	movs	r0, #1
 80091e4:	f000 fa78 	bl	80096d8 <xQueueGenericCreate>
 80091e8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d022      	beq.n	8009236 <osSemaphoreNew+0xe8>
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d01f      	beq.n	8009236 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80091f6:	2300      	movs	r3, #0
 80091f8:	2200      	movs	r2, #0
 80091fa:	2100      	movs	r1, #0
 80091fc:	69f8      	ldr	r0, [r7, #28]
 80091fe:	f000 fb33 	bl	8009868 <xQueueGenericSend>
 8009202:	4603      	mov	r3, r0
 8009204:	2b01      	cmp	r3, #1
 8009206:	d016      	beq.n	8009236 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009208:	69f8      	ldr	r0, [r7, #28]
 800920a:	f000 fda7 	bl	8009d5c <vQueueDelete>
            hSemaphore = NULL;
 800920e:	2300      	movs	r3, #0
 8009210:	61fb      	str	r3, [r7, #28]
 8009212:	e010      	b.n	8009236 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d108      	bne.n	800922c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	461a      	mov	r2, r3
 8009220:	68b9      	ldr	r1, [r7, #8]
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f000 fab5 	bl	8009792 <xQueueCreateCountingSemaphoreStatic>
 8009228:	61f8      	str	r0, [r7, #28]
 800922a:	e004      	b.n	8009236 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800922c:	68b9      	ldr	r1, [r7, #8]
 800922e:	68f8      	ldr	r0, [r7, #12]
 8009230:	f000 fae6 	bl	8009800 <xQueueCreateCountingSemaphore>
 8009234:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00c      	beq.n	8009256 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d003      	beq.n	800924a <osSemaphoreNew+0xfc>
          name = attr->name;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	617b      	str	r3, [r7, #20]
 8009248:	e001      	b.n	800924e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800924a:	2300      	movs	r3, #0
 800924c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800924e:	6979      	ldr	r1, [r7, #20]
 8009250:	69f8      	ldr	r0, [r7, #28]
 8009252:	f000 feb7 	bl	8009fc4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009256:	69fb      	ldr	r3, [r7, #28]
}
 8009258:	4618      	mov	r0, r3
 800925a:	3720      	adds	r7, #32
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009260:	b580      	push	{r7, lr}
 8009262:	b08a      	sub	sp, #40	; 0x28
 8009264:	af02      	add	r7, sp, #8
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800926c:	2300      	movs	r3, #0
 800926e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009270:	f3ef 8305 	mrs	r3, IPSR
 8009274:	613b      	str	r3, [r7, #16]
  return(result);
 8009276:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009278:	2b00      	cmp	r3, #0
 800927a:	d15f      	bne.n	800933c <osMessageQueueNew+0xdc>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d05c      	beq.n	800933c <osMessageQueueNew+0xdc>
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d059      	beq.n	800933c <osMessageQueueNew+0xdc>
    mem = -1;
 8009288:	f04f 33ff 	mov.w	r3, #4294967295
 800928c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d029      	beq.n	80092e8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d012      	beq.n	80092c2 <osMessageQueueNew+0x62>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	2b4f      	cmp	r3, #79	; 0x4f
 80092a2:	d90e      	bls.n	80092c2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00a      	beq.n	80092c2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	695a      	ldr	r2, [r3, #20]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	68b9      	ldr	r1, [r7, #8]
 80092b4:	fb01 f303 	mul.w	r3, r1, r3
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d302      	bcc.n	80092c2 <osMessageQueueNew+0x62>
        mem = 1;
 80092bc:	2301      	movs	r3, #1
 80092be:	61bb      	str	r3, [r7, #24]
 80092c0:	e014      	b.n	80092ec <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d110      	bne.n	80092ec <osMessageQueueNew+0x8c>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d10c      	bne.n	80092ec <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d108      	bne.n	80092ec <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	695b      	ldr	r3, [r3, #20]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d104      	bne.n	80092ec <osMessageQueueNew+0x8c>
          mem = 0;
 80092e2:	2300      	movs	r3, #0
 80092e4:	61bb      	str	r3, [r7, #24]
 80092e6:	e001      	b.n	80092ec <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80092e8:	2300      	movs	r3, #0
 80092ea:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d10b      	bne.n	800930a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	691a      	ldr	r2, [r3, #16]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	2100      	movs	r1, #0
 80092fc:	9100      	str	r1, [sp, #0]
 80092fe:	68b9      	ldr	r1, [r7, #8]
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f000 f971 	bl	80095e8 <xQueueGenericCreateStatic>
 8009306:	61f8      	str	r0, [r7, #28]
 8009308:	e008      	b.n	800931c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d105      	bne.n	800931c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009310:	2200      	movs	r2, #0
 8009312:	68b9      	ldr	r1, [r7, #8]
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f000 f9df 	bl	80096d8 <xQueueGenericCreate>
 800931a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00c      	beq.n	800933c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d003      	beq.n	8009330 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	617b      	str	r3, [r7, #20]
 800932e:	e001      	b.n	8009334 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009330:	2300      	movs	r3, #0
 8009332:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009334:	6979      	ldr	r1, [r7, #20]
 8009336:	69f8      	ldr	r0, [r7, #28]
 8009338:	f000 fe44 	bl	8009fc4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800933c:	69fb      	ldr	r3, [r7, #28]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3720      	adds	r7, #32
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
	...

08009348 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	4a07      	ldr	r2, [pc, #28]	; (8009374 <vApplicationGetIdleTaskMemory+0x2c>)
 8009358:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	4a06      	ldr	r2, [pc, #24]	; (8009378 <vApplicationGetIdleTaskMemory+0x30>)
 800935e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2280      	movs	r2, #128	; 0x80
 8009364:	601a      	str	r2, [r3, #0]
}
 8009366:	bf00      	nop
 8009368:	3714      	adds	r7, #20
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	200018d4 	.word	0x200018d4
 8009378:	20001990 	.word	0x20001990

0800937c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800937c:	b480      	push	{r7}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	4a07      	ldr	r2, [pc, #28]	; (80093a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800938c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	4a06      	ldr	r2, [pc, #24]	; (80093ac <vApplicationGetTimerTaskMemory+0x30>)
 8009392:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f44f 7280 	mov.w	r2, #256	; 0x100
 800939a:	601a      	str	r2, [r3, #0]
}
 800939c:	bf00      	nop
 800939e:	3714      	adds	r7, #20
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr
 80093a8:	20001b90 	.word	0x20001b90
 80093ac:	20001c4c 	.word	0x20001c4c

080093b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f103 0208 	add.w	r2, r3, #8
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f04f 32ff 	mov.w	r2, #4294967295
 80093c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f103 0208 	add.w	r2, r3, #8
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f103 0208 	add.w	r2, r3, #8
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80093e4:	bf00      	nop
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80093fe:	bf00      	nop
 8009400:	370c      	adds	r7, #12
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr

0800940a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800940a:	b480      	push	{r7}
 800940c:	b085      	sub	sp, #20
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	689a      	ldr	r2, [r3, #8]
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	683a      	ldr	r2, [r7, #0]
 800942e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	683a      	ldr	r2, [r7, #0]
 8009434:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	1c5a      	adds	r2, r3, #1
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	601a      	str	r2, [r3, #0]
}
 8009446:	bf00      	nop
 8009448:	3714      	adds	r7, #20
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr

08009452 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009452:	b480      	push	{r7}
 8009454:	b085      	sub	sp, #20
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
 800945a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009468:	d103      	bne.n	8009472 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	60fb      	str	r3, [r7, #12]
 8009470:	e00c      	b.n	800948c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	3308      	adds	r3, #8
 8009476:	60fb      	str	r3, [r7, #12]
 8009478:	e002      	b.n	8009480 <vListInsert+0x2e>
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	60fb      	str	r3, [r7, #12]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	68ba      	ldr	r2, [r7, #8]
 8009488:	429a      	cmp	r2, r3
 800948a:	d2f6      	bcs.n	800947a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	685a      	ldr	r2, [r3, #4]
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	683a      	ldr	r2, [r7, #0]
 800949a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	683a      	ldr	r2, [r7, #0]
 80094a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	1c5a      	adds	r2, r3, #1
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	601a      	str	r2, [r3, #0]
}
 80094b8:	bf00      	nop
 80094ba:	3714      	adds	r7, #20
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	691b      	ldr	r3, [r3, #16]
 80094d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	6892      	ldr	r2, [r2, #8]
 80094da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	6852      	ldr	r2, [r2, #4]
 80094e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d103      	bne.n	80094f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	689a      	ldr	r2, [r3, #8]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	1e5a      	subs	r2, r3, #1
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
}
 800950c:	4618      	mov	r0, r3
 800950e:	3714      	adds	r7, #20
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10a      	bne.n	8009542 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800952c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009530:	f383 8811 	msr	BASEPRI, r3
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	f3bf 8f4f 	dsb	sy
 800953c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800953e:	bf00      	nop
 8009540:	e7fe      	b.n	8009540 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009542:	f002 f967 	bl	800b814 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800954e:	68f9      	ldr	r1, [r7, #12]
 8009550:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009552:	fb01 f303 	mul.w	r3, r1, r3
 8009556:	441a      	add	r2, r3
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2200      	movs	r2, #0
 8009560:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009572:	3b01      	subs	r3, #1
 8009574:	68f9      	ldr	r1, [r7, #12]
 8009576:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009578:	fb01 f303 	mul.w	r3, r1, r3
 800957c:	441a      	add	r2, r3
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	22ff      	movs	r2, #255	; 0xff
 8009586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	22ff      	movs	r2, #255	; 0xff
 800958e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d114      	bne.n	80095c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d01a      	beq.n	80095d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	3310      	adds	r3, #16
 80095a4:	4618      	mov	r0, r3
 80095a6:	f001 fa1b 	bl	800a9e0 <xTaskRemoveFromEventList>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d012      	beq.n	80095d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80095b0:	4b0c      	ldr	r3, [pc, #48]	; (80095e4 <xQueueGenericReset+0xcc>)
 80095b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095b6:	601a      	str	r2, [r3, #0]
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	e009      	b.n	80095d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	3310      	adds	r3, #16
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7ff fef2 	bl	80093b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	3324      	adds	r3, #36	; 0x24
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7ff feed 	bl	80093b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80095d6:	f002 f94d 	bl	800b874 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80095da:	2301      	movs	r3, #1
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3710      	adds	r7, #16
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	e000ed04 	.word	0xe000ed04

080095e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b08e      	sub	sp, #56	; 0x38
 80095ec:	af02      	add	r7, sp, #8
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	607a      	str	r2, [r7, #4]
 80095f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10a      	bne.n	8009612 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80095fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800960e:	bf00      	nop
 8009610:	e7fe      	b.n	8009610 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d10a      	bne.n	800962e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961c:	f383 8811 	msr	BASEPRI, r3
 8009620:	f3bf 8f6f 	isb	sy
 8009624:	f3bf 8f4f 	dsb	sy
 8009628:	627b      	str	r3, [r7, #36]	; 0x24
}
 800962a:	bf00      	nop
 800962c:	e7fe      	b.n	800962c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d002      	beq.n	800963a <xQueueGenericCreateStatic+0x52>
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d001      	beq.n	800963e <xQueueGenericCreateStatic+0x56>
 800963a:	2301      	movs	r3, #1
 800963c:	e000      	b.n	8009640 <xQueueGenericCreateStatic+0x58>
 800963e:	2300      	movs	r3, #0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d10a      	bne.n	800965a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009648:	f383 8811 	msr	BASEPRI, r3
 800964c:	f3bf 8f6f 	isb	sy
 8009650:	f3bf 8f4f 	dsb	sy
 8009654:	623b      	str	r3, [r7, #32]
}
 8009656:	bf00      	nop
 8009658:	e7fe      	b.n	8009658 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d102      	bne.n	8009666 <xQueueGenericCreateStatic+0x7e>
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d101      	bne.n	800966a <xQueueGenericCreateStatic+0x82>
 8009666:	2301      	movs	r3, #1
 8009668:	e000      	b.n	800966c <xQueueGenericCreateStatic+0x84>
 800966a:	2300      	movs	r3, #0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d10a      	bne.n	8009686 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009674:	f383 8811 	msr	BASEPRI, r3
 8009678:	f3bf 8f6f 	isb	sy
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	61fb      	str	r3, [r7, #28]
}
 8009682:	bf00      	nop
 8009684:	e7fe      	b.n	8009684 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009686:	2350      	movs	r3, #80	; 0x50
 8009688:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	2b50      	cmp	r3, #80	; 0x50
 800968e:	d00a      	beq.n	80096a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009694:	f383 8811 	msr	BASEPRI, r3
 8009698:	f3bf 8f6f 	isb	sy
 800969c:	f3bf 8f4f 	dsb	sy
 80096a0:	61bb      	str	r3, [r7, #24]
}
 80096a2:	bf00      	nop
 80096a4:	e7fe      	b.n	80096a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80096a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80096ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00d      	beq.n	80096ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80096b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b4:	2201      	movs	r2, #1
 80096b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80096ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80096be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c0:	9300      	str	r3, [sp, #0]
 80096c2:	4613      	mov	r3, r2
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	68b9      	ldr	r1, [r7, #8]
 80096c8:	68f8      	ldr	r0, [r7, #12]
 80096ca:	f000 f83f 	bl	800974c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80096ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3730      	adds	r7, #48	; 0x30
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b08a      	sub	sp, #40	; 0x28
 80096dc:	af02      	add	r7, sp, #8
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	4613      	mov	r3, r2
 80096e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10a      	bne.n	8009702 <xQueueGenericCreate+0x2a>
	__asm volatile
 80096ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f0:	f383 8811 	msr	BASEPRI, r3
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	613b      	str	r3, [r7, #16]
}
 80096fe:	bf00      	nop
 8009700:	e7fe      	b.n	8009700 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	68ba      	ldr	r2, [r7, #8]
 8009706:	fb02 f303 	mul.w	r3, r2, r3
 800970a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	3350      	adds	r3, #80	; 0x50
 8009710:	4618      	mov	r0, r3
 8009712:	f002 f9a1 	bl	800ba58 <pvPortMalloc>
 8009716:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d011      	beq.n	8009742 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800971e:	69bb      	ldr	r3, [r7, #24]
 8009720:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	3350      	adds	r3, #80	; 0x50
 8009726:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009730:	79fa      	ldrb	r2, [r7, #7]
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	4613      	mov	r3, r2
 8009738:	697a      	ldr	r2, [r7, #20]
 800973a:	68b9      	ldr	r1, [r7, #8]
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f000 f805 	bl	800974c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009742:	69bb      	ldr	r3, [r7, #24]
	}
 8009744:	4618      	mov	r0, r3
 8009746:	3720      	adds	r7, #32
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	607a      	str	r2, [r7, #4]
 8009758:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d103      	bne.n	8009768 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	69ba      	ldr	r2, [r7, #24]
 8009764:	601a      	str	r2, [r3, #0]
 8009766:	e002      	b.n	800976e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009768:	69bb      	ldr	r3, [r7, #24]
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	68fa      	ldr	r2, [r7, #12]
 8009772:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	68ba      	ldr	r2, [r7, #8]
 8009778:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800977a:	2101      	movs	r1, #1
 800977c:	69b8      	ldr	r0, [r7, #24]
 800977e:	f7ff fecb 	bl	8009518 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	78fa      	ldrb	r2, [r7, #3]
 8009786:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800978a:	bf00      	nop
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009792:	b580      	push	{r7, lr}
 8009794:	b08a      	sub	sp, #40	; 0x28
 8009796:	af02      	add	r7, sp, #8
 8009798:	60f8      	str	r0, [r7, #12]
 800979a:	60b9      	str	r1, [r7, #8]
 800979c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d10a      	bne.n	80097ba <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80097a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a8:	f383 8811 	msr	BASEPRI, r3
 80097ac:	f3bf 8f6f 	isb	sy
 80097b0:	f3bf 8f4f 	dsb	sy
 80097b4:	61bb      	str	r3, [r7, #24]
}
 80097b6:	bf00      	nop
 80097b8:	e7fe      	b.n	80097b8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80097ba:	68ba      	ldr	r2, [r7, #8]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d90a      	bls.n	80097d8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	617b      	str	r3, [r7, #20]
}
 80097d4:	bf00      	nop
 80097d6:	e7fe      	b.n	80097d6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80097d8:	2302      	movs	r3, #2
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	2100      	movs	r1, #0
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	f7ff ff00 	bl	80095e8 <xQueueGenericCreateStatic>
 80097e8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80097ea:	69fb      	ldr	r3, [r7, #28]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d002      	beq.n	80097f6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	68ba      	ldr	r2, [r7, #8]
 80097f4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80097f6:	69fb      	ldr	r3, [r7, #28]
	}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3720      	adds	r7, #32
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d10a      	bne.n	8009826 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	613b      	str	r3, [r7, #16]
}
 8009822:	bf00      	nop
 8009824:	e7fe      	b.n	8009824 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009826:	683a      	ldr	r2, [r7, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	429a      	cmp	r2, r3
 800982c:	d90a      	bls.n	8009844 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800982e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009832:	f383 8811 	msr	BASEPRI, r3
 8009836:	f3bf 8f6f 	isb	sy
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	60fb      	str	r3, [r7, #12]
}
 8009840:	bf00      	nop
 8009842:	e7fe      	b.n	8009842 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009844:	2202      	movs	r2, #2
 8009846:	2100      	movs	r1, #0
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f7ff ff45 	bl	80096d8 <xQueueGenericCreate>
 800984e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d002      	beq.n	800985c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	683a      	ldr	r2, [r7, #0]
 800985a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800985c:	697b      	ldr	r3, [r7, #20]
	}
 800985e:	4618      	mov	r0, r3
 8009860:	3718      	adds	r7, #24
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
	...

08009868 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b08e      	sub	sp, #56	; 0x38
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
 8009874:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009876:	2300      	movs	r3, #0
 8009878:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800987e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009880:	2b00      	cmp	r3, #0
 8009882:	d10a      	bne.n	800989a <xQueueGenericSend+0x32>
	__asm volatile
 8009884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009888:	f383 8811 	msr	BASEPRI, r3
 800988c:	f3bf 8f6f 	isb	sy
 8009890:	f3bf 8f4f 	dsb	sy
 8009894:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009896:	bf00      	nop
 8009898:	e7fe      	b.n	8009898 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d103      	bne.n	80098a8 <xQueueGenericSend+0x40>
 80098a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d101      	bne.n	80098ac <xQueueGenericSend+0x44>
 80098a8:	2301      	movs	r3, #1
 80098aa:	e000      	b.n	80098ae <xQueueGenericSend+0x46>
 80098ac:	2300      	movs	r3, #0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10a      	bne.n	80098c8 <xQueueGenericSend+0x60>
	__asm volatile
 80098b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b6:	f383 8811 	msr	BASEPRI, r3
 80098ba:	f3bf 8f6f 	isb	sy
 80098be:	f3bf 8f4f 	dsb	sy
 80098c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80098c4:	bf00      	nop
 80098c6:	e7fe      	b.n	80098c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	d103      	bne.n	80098d6 <xQueueGenericSend+0x6e>
 80098ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d101      	bne.n	80098da <xQueueGenericSend+0x72>
 80098d6:	2301      	movs	r3, #1
 80098d8:	e000      	b.n	80098dc <xQueueGenericSend+0x74>
 80098da:	2300      	movs	r3, #0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10a      	bne.n	80098f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80098e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e4:	f383 8811 	msr	BASEPRI, r3
 80098e8:	f3bf 8f6f 	isb	sy
 80098ec:	f3bf 8f4f 	dsb	sy
 80098f0:	623b      	str	r3, [r7, #32]
}
 80098f2:	bf00      	nop
 80098f4:	e7fe      	b.n	80098f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80098f6:	f001 fa35 	bl	800ad64 <xTaskGetSchedulerState>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d102      	bne.n	8009906 <xQueueGenericSend+0x9e>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d101      	bne.n	800990a <xQueueGenericSend+0xa2>
 8009906:	2301      	movs	r3, #1
 8009908:	e000      	b.n	800990c <xQueueGenericSend+0xa4>
 800990a:	2300      	movs	r3, #0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d10a      	bne.n	8009926 <xQueueGenericSend+0xbe>
	__asm volatile
 8009910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009914:	f383 8811 	msr	BASEPRI, r3
 8009918:	f3bf 8f6f 	isb	sy
 800991c:	f3bf 8f4f 	dsb	sy
 8009920:	61fb      	str	r3, [r7, #28]
}
 8009922:	bf00      	nop
 8009924:	e7fe      	b.n	8009924 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009926:	f001 ff75 	bl	800b814 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800992a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800992e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009932:	429a      	cmp	r2, r3
 8009934:	d302      	bcc.n	800993c <xQueueGenericSend+0xd4>
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	2b02      	cmp	r3, #2
 800993a:	d129      	bne.n	8009990 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800993c:	683a      	ldr	r2, [r7, #0]
 800993e:	68b9      	ldr	r1, [r7, #8]
 8009940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009942:	f000 fa2e 	bl	8009da2 <prvCopyDataToQueue>
 8009946:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994c:	2b00      	cmp	r3, #0
 800994e:	d010      	beq.n	8009972 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009952:	3324      	adds	r3, #36	; 0x24
 8009954:	4618      	mov	r0, r3
 8009956:	f001 f843 	bl	800a9e0 <xTaskRemoveFromEventList>
 800995a:	4603      	mov	r3, r0
 800995c:	2b00      	cmp	r3, #0
 800995e:	d013      	beq.n	8009988 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009960:	4b3f      	ldr	r3, [pc, #252]	; (8009a60 <xQueueGenericSend+0x1f8>)
 8009962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009966:	601a      	str	r2, [r3, #0]
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	e00a      	b.n	8009988 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009974:	2b00      	cmp	r3, #0
 8009976:	d007      	beq.n	8009988 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009978:	4b39      	ldr	r3, [pc, #228]	; (8009a60 <xQueueGenericSend+0x1f8>)
 800997a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800997e:	601a      	str	r2, [r3, #0]
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009988:	f001 ff74 	bl	800b874 <vPortExitCritical>
				return pdPASS;
 800998c:	2301      	movs	r3, #1
 800998e:	e063      	b.n	8009a58 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d103      	bne.n	800999e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009996:	f001 ff6d 	bl	800b874 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800999a:	2300      	movs	r3, #0
 800999c:	e05c      	b.n	8009a58 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800999e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d106      	bne.n	80099b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099a4:	f107 0314 	add.w	r3, r7, #20
 80099a8:	4618      	mov	r0, r3
 80099aa:	f001 f87d 	bl	800aaa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099ae:	2301      	movs	r3, #1
 80099b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099b2:	f001 ff5f 	bl	800b874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099b6:	f000 fde9 	bl	800a58c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099ba:	f001 ff2b 	bl	800b814 <vPortEnterCritical>
 80099be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099c4:	b25b      	sxtb	r3, r3
 80099c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ca:	d103      	bne.n	80099d4 <xQueueGenericSend+0x16c>
 80099cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ce:	2200      	movs	r2, #0
 80099d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099da:	b25b      	sxtb	r3, r3
 80099dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e0:	d103      	bne.n	80099ea <xQueueGenericSend+0x182>
 80099e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e4:	2200      	movs	r2, #0
 80099e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099ea:	f001 ff43 	bl	800b874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80099ee:	1d3a      	adds	r2, r7, #4
 80099f0:	f107 0314 	add.w	r3, r7, #20
 80099f4:	4611      	mov	r1, r2
 80099f6:	4618      	mov	r0, r3
 80099f8:	f001 f86c 	bl	800aad4 <xTaskCheckForTimeOut>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d124      	bne.n	8009a4c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009a02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a04:	f000 fac5 	bl	8009f92 <prvIsQueueFull>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d018      	beq.n	8009a40 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a10:	3310      	adds	r3, #16
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	4611      	mov	r1, r2
 8009a16:	4618      	mov	r0, r3
 8009a18:	f000 ff92 	bl	800a940 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a1e:	f000 fa50 	bl	8009ec2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009a22:	f000 fdc1 	bl	800a5a8 <xTaskResumeAll>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f47f af7c 	bne.w	8009926 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009a2e:	4b0c      	ldr	r3, [pc, #48]	; (8009a60 <xQueueGenericSend+0x1f8>)
 8009a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a34:	601a      	str	r2, [r3, #0]
 8009a36:	f3bf 8f4f 	dsb	sy
 8009a3a:	f3bf 8f6f 	isb	sy
 8009a3e:	e772      	b.n	8009926 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a42:	f000 fa3e 	bl	8009ec2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a46:	f000 fdaf 	bl	800a5a8 <xTaskResumeAll>
 8009a4a:	e76c      	b.n	8009926 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a4e:	f000 fa38 	bl	8009ec2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a52:	f000 fda9 	bl	800a5a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009a56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3738      	adds	r7, #56	; 0x38
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	e000ed04 	.word	0xe000ed04

08009a64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b090      	sub	sp, #64	; 0x40
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	607a      	str	r2, [r7, #4]
 8009a70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d10a      	bne.n	8009a92 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a80:	f383 8811 	msr	BASEPRI, r3
 8009a84:	f3bf 8f6f 	isb	sy
 8009a88:	f3bf 8f4f 	dsb	sy
 8009a8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a8e:	bf00      	nop
 8009a90:	e7fe      	b.n	8009a90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d103      	bne.n	8009aa0 <xQueueGenericSendFromISR+0x3c>
 8009a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d101      	bne.n	8009aa4 <xQueueGenericSendFromISR+0x40>
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e000      	b.n	8009aa6 <xQueueGenericSendFromISR+0x42>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10a      	bne.n	8009ac0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aae:	f383 8811 	msr	BASEPRI, r3
 8009ab2:	f3bf 8f6f 	isb	sy
 8009ab6:	f3bf 8f4f 	dsb	sy
 8009aba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009abc:	bf00      	nop
 8009abe:	e7fe      	b.n	8009abe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d103      	bne.n	8009ace <xQueueGenericSendFromISR+0x6a>
 8009ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d101      	bne.n	8009ad2 <xQueueGenericSendFromISR+0x6e>
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e000      	b.n	8009ad4 <xQueueGenericSendFromISR+0x70>
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10a      	bne.n	8009aee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009adc:	f383 8811 	msr	BASEPRI, r3
 8009ae0:	f3bf 8f6f 	isb	sy
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	623b      	str	r3, [r7, #32]
}
 8009aea:	bf00      	nop
 8009aec:	e7fe      	b.n	8009aec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009aee:	f001 ff73 	bl	800b9d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009af2:	f3ef 8211 	mrs	r2, BASEPRI
 8009af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afa:	f383 8811 	msr	BASEPRI, r3
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	61fa      	str	r2, [r7, #28]
 8009b08:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009b0a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b0c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d302      	bcc.n	8009b20 <xQueueGenericSendFromISR+0xbc>
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	d12f      	bne.n	8009b80 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b30:	683a      	ldr	r2, [r7, #0]
 8009b32:	68b9      	ldr	r1, [r7, #8]
 8009b34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009b36:	f000 f934 	bl	8009da2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009b3a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b42:	d112      	bne.n	8009b6a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d016      	beq.n	8009b7a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4e:	3324      	adds	r3, #36	; 0x24
 8009b50:	4618      	mov	r0, r3
 8009b52:	f000 ff45 	bl	800a9e0 <xTaskRemoveFromEventList>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d00e      	beq.n	8009b7a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d00b      	beq.n	8009b7a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2201      	movs	r2, #1
 8009b66:	601a      	str	r2, [r3, #0]
 8009b68:	e007      	b.n	8009b7a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009b6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009b6e:	3301      	adds	r3, #1
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	b25a      	sxtb	r2, r3
 8009b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009b7e:	e001      	b.n	8009b84 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009b80:	2300      	movs	r3, #0
 8009b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b86:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009b8e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3740      	adds	r7, #64	; 0x40
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
	...

08009b9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b08c      	sub	sp, #48	; 0x30
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d10a      	bne.n	8009bcc <xQueueReceive+0x30>
	__asm volatile
 8009bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bba:	f383 8811 	msr	BASEPRI, r3
 8009bbe:	f3bf 8f6f 	isb	sy
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	623b      	str	r3, [r7, #32]
}
 8009bc8:	bf00      	nop
 8009bca:	e7fe      	b.n	8009bca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d103      	bne.n	8009bda <xQueueReceive+0x3e>
 8009bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d101      	bne.n	8009bde <xQueueReceive+0x42>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e000      	b.n	8009be0 <xQueueReceive+0x44>
 8009bde:	2300      	movs	r3, #0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d10a      	bne.n	8009bfa <xQueueReceive+0x5e>
	__asm volatile
 8009be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be8:	f383 8811 	msr	BASEPRI, r3
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	61fb      	str	r3, [r7, #28]
}
 8009bf6:	bf00      	nop
 8009bf8:	e7fe      	b.n	8009bf8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009bfa:	f001 f8b3 	bl	800ad64 <xTaskGetSchedulerState>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d102      	bne.n	8009c0a <xQueueReceive+0x6e>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d101      	bne.n	8009c0e <xQueueReceive+0x72>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e000      	b.n	8009c10 <xQueueReceive+0x74>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d10a      	bne.n	8009c2a <xQueueReceive+0x8e>
	__asm volatile
 8009c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c18:	f383 8811 	msr	BASEPRI, r3
 8009c1c:	f3bf 8f6f 	isb	sy
 8009c20:	f3bf 8f4f 	dsb	sy
 8009c24:	61bb      	str	r3, [r7, #24]
}
 8009c26:	bf00      	nop
 8009c28:	e7fe      	b.n	8009c28 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c2a:	f001 fdf3 	bl	800b814 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d01f      	beq.n	8009c7a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c3a:	68b9      	ldr	r1, [r7, #8]
 8009c3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c3e:	f000 f91a 	bl	8009e76 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c44:	1e5a      	subs	r2, r3, #1
 8009c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4c:	691b      	ldr	r3, [r3, #16]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00f      	beq.n	8009c72 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c54:	3310      	adds	r3, #16
 8009c56:	4618      	mov	r0, r3
 8009c58:	f000 fec2 	bl	800a9e0 <xTaskRemoveFromEventList>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d007      	beq.n	8009c72 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c62:	4b3d      	ldr	r3, [pc, #244]	; (8009d58 <xQueueReceive+0x1bc>)
 8009c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c68:	601a      	str	r2, [r3, #0]
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009c72:	f001 fdff 	bl	800b874 <vPortExitCritical>
				return pdPASS;
 8009c76:	2301      	movs	r3, #1
 8009c78:	e069      	b.n	8009d4e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d103      	bne.n	8009c88 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c80:	f001 fdf8 	bl	800b874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009c84:	2300      	movs	r3, #0
 8009c86:	e062      	b.n	8009d4e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d106      	bne.n	8009c9c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c8e:	f107 0310 	add.w	r3, r7, #16
 8009c92:	4618      	mov	r0, r3
 8009c94:	f000 ff08 	bl	800aaa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c9c:	f001 fdea 	bl	800b874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009ca0:	f000 fc74 	bl	800a58c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ca4:	f001 fdb6 	bl	800b814 <vPortEnterCritical>
 8009ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009caa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cae:	b25b      	sxtb	r3, r3
 8009cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb4:	d103      	bne.n	8009cbe <xQueueReceive+0x122>
 8009cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cc4:	b25b      	sxtb	r3, r3
 8009cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cca:	d103      	bne.n	8009cd4 <xQueueReceive+0x138>
 8009ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cd4:	f001 fdce 	bl	800b874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009cd8:	1d3a      	adds	r2, r7, #4
 8009cda:	f107 0310 	add.w	r3, r7, #16
 8009cde:	4611      	mov	r1, r2
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f000 fef7 	bl	800aad4 <xTaskCheckForTimeOut>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d123      	bne.n	8009d34 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cee:	f000 f93a 	bl	8009f66 <prvIsQueueEmpty>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d017      	beq.n	8009d28 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfa:	3324      	adds	r3, #36	; 0x24
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	4611      	mov	r1, r2
 8009d00:	4618      	mov	r0, r3
 8009d02:	f000 fe1d 	bl	800a940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d08:	f000 f8db 	bl	8009ec2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d0c:	f000 fc4c 	bl	800a5a8 <xTaskResumeAll>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d189      	bne.n	8009c2a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009d16:	4b10      	ldr	r3, [pc, #64]	; (8009d58 <xQueueReceive+0x1bc>)
 8009d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d1c:	601a      	str	r2, [r3, #0]
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	f3bf 8f6f 	isb	sy
 8009d26:	e780      	b.n	8009c2a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d2a:	f000 f8ca 	bl	8009ec2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d2e:	f000 fc3b 	bl	800a5a8 <xTaskResumeAll>
 8009d32:	e77a      	b.n	8009c2a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d36:	f000 f8c4 	bl	8009ec2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d3a:	f000 fc35 	bl	800a5a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d40:	f000 f911 	bl	8009f66 <prvIsQueueEmpty>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	f43f af6f 	beq.w	8009c2a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009d4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3730      	adds	r7, #48	; 0x30
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	e000ed04 	.word	0xe000ed04

08009d5c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d10a      	bne.n	8009d84 <vQueueDelete+0x28>
	__asm volatile
 8009d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d72:	f383 8811 	msr	BASEPRI, r3
 8009d76:	f3bf 8f6f 	isb	sy
 8009d7a:	f3bf 8f4f 	dsb	sy
 8009d7e:	60bb      	str	r3, [r7, #8]
}
 8009d80:	bf00      	nop
 8009d82:	e7fe      	b.n	8009d82 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009d84:	68f8      	ldr	r0, [r7, #12]
 8009d86:	f000 f947 	bl	800a018 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d102      	bne.n	8009d9a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009d94:	68f8      	ldr	r0, [r7, #12]
 8009d96:	f001 ff2b 	bl	800bbf0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009d9a:	bf00      	nop
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b086      	sub	sp, #24
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	60f8      	str	r0, [r7, #12]
 8009daa:	60b9      	str	r1, [r7, #8]
 8009dac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009dae:	2300      	movs	r3, #0
 8009db0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d10d      	bne.n	8009ddc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d14d      	bne.n	8009e64 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f000 ffe7 	bl	800ada0 <xTaskPriorityDisinherit>
 8009dd2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	609a      	str	r2, [r3, #8]
 8009dda:	e043      	b.n	8009e64 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d119      	bne.n	8009e16 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	6858      	ldr	r0, [r3, #4]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dea:	461a      	mov	r2, r3
 8009dec:	68b9      	ldr	r1, [r7, #8]
 8009dee:	f002 f959 	bl	800c0a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	685a      	ldr	r2, [r3, #4]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfa:	441a      	add	r2, r3
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	685a      	ldr	r2, [r3, #4]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d32b      	bcc.n	8009e64 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	605a      	str	r2, [r3, #4]
 8009e14:	e026      	b.n	8009e64 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	68d8      	ldr	r0, [r3, #12]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1e:	461a      	mov	r2, r3
 8009e20:	68b9      	ldr	r1, [r7, #8]
 8009e22:	f002 f93f 	bl	800c0a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	68da      	ldr	r2, [r3, #12]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2e:	425b      	negs	r3, r3
 8009e30:	441a      	add	r2, r3
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	68da      	ldr	r2, [r3, #12]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d207      	bcs.n	8009e52 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	689a      	ldr	r2, [r3, #8]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4a:	425b      	negs	r3, r3
 8009e4c:	441a      	add	r2, r3
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2b02      	cmp	r3, #2
 8009e56:	d105      	bne.n	8009e64 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d002      	beq.n	8009e64 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	3b01      	subs	r3, #1
 8009e62:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	1c5a      	adds	r2, r3, #1
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009e6c:	697b      	ldr	r3, [r7, #20]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3718      	adds	r7, #24
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b082      	sub	sp, #8
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
 8009e7e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d018      	beq.n	8009eba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	68da      	ldr	r2, [r3, #12]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e90:	441a      	add	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	68da      	ldr	r2, [r3, #12]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d303      	bcc.n	8009eaa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	68d9      	ldr	r1, [r3, #12]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	6838      	ldr	r0, [r7, #0]
 8009eb6:	f002 f8f5 	bl	800c0a4 <memcpy>
	}
}
 8009eba:	bf00      	nop
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b084      	sub	sp, #16
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009eca:	f001 fca3 	bl	800b814 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ed4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ed6:	e011      	b.n	8009efc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d012      	beq.n	8009f06 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	3324      	adds	r3, #36	; 0x24
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f000 fd7b 	bl	800a9e0 <xTaskRemoveFromEventList>
 8009eea:	4603      	mov	r3, r0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d001      	beq.n	8009ef4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009ef0:	f000 fe52 	bl	800ab98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009ef4:	7bfb      	ldrb	r3, [r7, #15]
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	dce9      	bgt.n	8009ed8 <prvUnlockQueue+0x16>
 8009f04:	e000      	b.n	8009f08 <prvUnlockQueue+0x46>
					break;
 8009f06:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	22ff      	movs	r2, #255	; 0xff
 8009f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009f10:	f001 fcb0 	bl	800b874 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009f14:	f001 fc7e 	bl	800b814 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f1e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f20:	e011      	b.n	8009f46 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d012      	beq.n	8009f50 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	3310      	adds	r3, #16
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f000 fd56 	bl	800a9e0 <xTaskRemoveFromEventList>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d001      	beq.n	8009f3e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009f3a:	f000 fe2d 	bl	800ab98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009f3e:	7bbb      	ldrb	r3, [r7, #14]
 8009f40:	3b01      	subs	r3, #1
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	dce9      	bgt.n	8009f22 <prvUnlockQueue+0x60>
 8009f4e:	e000      	b.n	8009f52 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009f50:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	22ff      	movs	r2, #255	; 0xff
 8009f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009f5a:	f001 fc8b 	bl	800b874 <vPortExitCritical>
}
 8009f5e:	bf00      	nop
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b084      	sub	sp, #16
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009f6e:	f001 fc51 	bl	800b814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d102      	bne.n	8009f80 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	60fb      	str	r3, [r7, #12]
 8009f7e:	e001      	b.n	8009f84 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009f80:	2300      	movs	r3, #0
 8009f82:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009f84:	f001 fc76 	bl	800b874 <vPortExitCritical>

	return xReturn;
 8009f88:	68fb      	ldr	r3, [r7, #12]
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b084      	sub	sp, #16
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009f9a:	f001 fc3b 	bl	800b814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d102      	bne.n	8009fb0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009faa:	2301      	movs	r3, #1
 8009fac:	60fb      	str	r3, [r7, #12]
 8009fae:	e001      	b.n	8009fb4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009fb4:	f001 fc5e 	bl	800b874 <vPortExitCritical>

	return xReturn;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3710      	adds	r7, #16
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
	...

08009fc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b085      	sub	sp, #20
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009fce:	2300      	movs	r3, #0
 8009fd0:	60fb      	str	r3, [r7, #12]
 8009fd2:	e014      	b.n	8009ffe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009fd4:	4a0f      	ldr	r2, [pc, #60]	; (800a014 <vQueueAddToRegistry+0x50>)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d10b      	bne.n	8009ff8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009fe0:	490c      	ldr	r1, [pc, #48]	; (800a014 <vQueueAddToRegistry+0x50>)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	683a      	ldr	r2, [r7, #0]
 8009fe6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009fea:	4a0a      	ldr	r2, [pc, #40]	; (800a014 <vQueueAddToRegistry+0x50>)
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	00db      	lsls	r3, r3, #3
 8009ff0:	4413      	add	r3, r2
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009ff6:	e006      	b.n	800a006 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	60fb      	str	r3, [r7, #12]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2b07      	cmp	r3, #7
 800a002:	d9e7      	bls.n	8009fd4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a004:	bf00      	nop
 800a006:	bf00      	nop
 800a008:	3714      	adds	r7, #20
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	2000204c 	.word	0x2000204c

0800a018 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a020:	2300      	movs	r3, #0
 800a022:	60fb      	str	r3, [r7, #12]
 800a024:	e016      	b.n	800a054 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a026:	4a10      	ldr	r2, [pc, #64]	; (800a068 <vQueueUnregisterQueue+0x50>)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	00db      	lsls	r3, r3, #3
 800a02c:	4413      	add	r3, r2
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	429a      	cmp	r2, r3
 800a034:	d10b      	bne.n	800a04e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a036:	4a0c      	ldr	r2, [pc, #48]	; (800a068 <vQueueUnregisterQueue+0x50>)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2100      	movs	r1, #0
 800a03c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a040:	4a09      	ldr	r2, [pc, #36]	; (800a068 <vQueueUnregisterQueue+0x50>)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	00db      	lsls	r3, r3, #3
 800a046:	4413      	add	r3, r2
 800a048:	2200      	movs	r2, #0
 800a04a:	605a      	str	r2, [r3, #4]
				break;
 800a04c:	e006      	b.n	800a05c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	3301      	adds	r3, #1
 800a052:	60fb      	str	r3, [r7, #12]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2b07      	cmp	r3, #7
 800a058:	d9e5      	bls.n	800a026 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a05a:	bf00      	nop
 800a05c:	bf00      	nop
 800a05e:	3714      	adds	r7, #20
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr
 800a068:	2000204c 	.word	0x2000204c

0800a06c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b086      	sub	sp, #24
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a07c:	f001 fbca 	bl	800b814 <vPortEnterCritical>
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a086:	b25b      	sxtb	r3, r3
 800a088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a08c:	d103      	bne.n	800a096 <vQueueWaitForMessageRestricted+0x2a>
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	2200      	movs	r2, #0
 800a092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a09c:	b25b      	sxtb	r3, r3
 800a09e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a2:	d103      	bne.n	800a0ac <vQueueWaitForMessageRestricted+0x40>
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0ac:	f001 fbe2 	bl	800b874 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d106      	bne.n	800a0c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	3324      	adds	r3, #36	; 0x24
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	68b9      	ldr	r1, [r7, #8]
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f000 fc61 	bl	800a988 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a0c6:	6978      	ldr	r0, [r7, #20]
 800a0c8:	f7ff fefb 	bl	8009ec2 <prvUnlockQueue>
	}
 800a0cc:	bf00      	nop
 800a0ce:	3718      	adds	r7, #24
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b08e      	sub	sp, #56	; 0x38
 800a0d8:	af04      	add	r7, sp, #16
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
 800a0e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10a      	bne.n	800a0fe <xTaskCreateStatic+0x2a>
	__asm volatile
 800a0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ec:	f383 8811 	msr	BASEPRI, r3
 800a0f0:	f3bf 8f6f 	isb	sy
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	623b      	str	r3, [r7, #32]
}
 800a0fa:	bf00      	nop
 800a0fc:	e7fe      	b.n	800a0fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10a      	bne.n	800a11a <xTaskCreateStatic+0x46>
	__asm volatile
 800a104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	61fb      	str	r3, [r7, #28]
}
 800a116:	bf00      	nop
 800a118:	e7fe      	b.n	800a118 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a11a:	23bc      	movs	r3, #188	; 0xbc
 800a11c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	2bbc      	cmp	r3, #188	; 0xbc
 800a122:	d00a      	beq.n	800a13a <xTaskCreateStatic+0x66>
	__asm volatile
 800a124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a128:	f383 8811 	msr	BASEPRI, r3
 800a12c:	f3bf 8f6f 	isb	sy
 800a130:	f3bf 8f4f 	dsb	sy
 800a134:	61bb      	str	r3, [r7, #24]
}
 800a136:	bf00      	nop
 800a138:	e7fe      	b.n	800a138 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a13a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d01e      	beq.n	800a180 <xTaskCreateStatic+0xac>
 800a142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a144:	2b00      	cmp	r3, #0
 800a146:	d01b      	beq.n	800a180 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a150:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a154:	2202      	movs	r2, #2
 800a156:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a15a:	2300      	movs	r3, #0
 800a15c:	9303      	str	r3, [sp, #12]
 800a15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a160:	9302      	str	r3, [sp, #8]
 800a162:	f107 0314 	add.w	r3, r7, #20
 800a166:	9301      	str	r3, [sp, #4]
 800a168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	68b9      	ldr	r1, [r7, #8]
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	f000 f850 	bl	800a218 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a178:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a17a:	f000 f8f3 	bl	800a364 <prvAddNewTaskToReadyList>
 800a17e:	e001      	b.n	800a184 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a180:	2300      	movs	r3, #0
 800a182:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a184:	697b      	ldr	r3, [r7, #20]
	}
 800a186:	4618      	mov	r0, r3
 800a188:	3728      	adds	r7, #40	; 0x28
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b08c      	sub	sp, #48	; 0x30
 800a192:	af04      	add	r7, sp, #16
 800a194:	60f8      	str	r0, [r7, #12]
 800a196:	60b9      	str	r1, [r7, #8]
 800a198:	603b      	str	r3, [r7, #0]
 800a19a:	4613      	mov	r3, r2
 800a19c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a19e:	88fb      	ldrh	r3, [r7, #6]
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f001 fc58 	bl	800ba58 <pvPortMalloc>
 800a1a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d00e      	beq.n	800a1ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a1b0:	20bc      	movs	r0, #188	; 0xbc
 800a1b2:	f001 fc51 	bl	800ba58 <pvPortMalloc>
 800a1b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a1b8:	69fb      	ldr	r3, [r7, #28]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d003      	beq.n	800a1c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	697a      	ldr	r2, [r7, #20]
 800a1c2:	631a      	str	r2, [r3, #48]	; 0x30
 800a1c4:	e005      	b.n	800a1d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a1c6:	6978      	ldr	r0, [r7, #20]
 800a1c8:	f001 fd12 	bl	800bbf0 <vPortFree>
 800a1cc:	e001      	b.n	800a1d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d017      	beq.n	800a208 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a1e0:	88fa      	ldrh	r2, [r7, #6]
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	9303      	str	r3, [sp, #12]
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	9302      	str	r3, [sp, #8]
 800a1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ec:	9301      	str	r3, [sp, #4]
 800a1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	68b9      	ldr	r1, [r7, #8]
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f000 f80e 	bl	800a218 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1fc:	69f8      	ldr	r0, [r7, #28]
 800a1fe:	f000 f8b1 	bl	800a364 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a202:	2301      	movs	r3, #1
 800a204:	61bb      	str	r3, [r7, #24]
 800a206:	e002      	b.n	800a20e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a208:	f04f 33ff 	mov.w	r3, #4294967295
 800a20c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a20e:	69bb      	ldr	r3, [r7, #24]
	}
 800a210:	4618      	mov	r0, r3
 800a212:	3720      	adds	r7, #32
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b088      	sub	sp, #32
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	607a      	str	r2, [r7, #4]
 800a224:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a228:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	461a      	mov	r2, r3
 800a230:	21a5      	movs	r1, #165	; 0xa5
 800a232:	f001 ff45 	bl	800c0c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a240:	3b01      	subs	r3, #1
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	4413      	add	r3, r2
 800a246:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	f023 0307 	bic.w	r3, r3, #7
 800a24e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	f003 0307 	and.w	r3, r3, #7
 800a256:	2b00      	cmp	r3, #0
 800a258:	d00a      	beq.n	800a270 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25e:	f383 8811 	msr	BASEPRI, r3
 800a262:	f3bf 8f6f 	isb	sy
 800a266:	f3bf 8f4f 	dsb	sy
 800a26a:	617b      	str	r3, [r7, #20]
}
 800a26c:	bf00      	nop
 800a26e:	e7fe      	b.n	800a26e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d01f      	beq.n	800a2b6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a276:	2300      	movs	r3, #0
 800a278:	61fb      	str	r3, [r7, #28]
 800a27a:	e012      	b.n	800a2a2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a27c:	68ba      	ldr	r2, [r7, #8]
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	4413      	add	r3, r2
 800a282:	7819      	ldrb	r1, [r3, #0]
 800a284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	4413      	add	r3, r2
 800a28a:	3334      	adds	r3, #52	; 0x34
 800a28c:	460a      	mov	r2, r1
 800a28e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a290:	68ba      	ldr	r2, [r7, #8]
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	4413      	add	r3, r2
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d006      	beq.n	800a2aa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	61fb      	str	r3, [r7, #28]
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	2b0f      	cmp	r3, #15
 800a2a6:	d9e9      	bls.n	800a27c <prvInitialiseNewTask+0x64>
 800a2a8:	e000      	b.n	800a2ac <prvInitialiseNewTask+0x94>
			{
				break;
 800a2aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a2b4:	e003      	b.n	800a2be <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c0:	2b37      	cmp	r3, #55	; 0x37
 800a2c2:	d901      	bls.n	800a2c8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a2c4:	2337      	movs	r3, #55	; 0x37
 800a2c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2dc:	3304      	adds	r3, #4
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7ff f886 	bl	80093f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e6:	3318      	adds	r3, #24
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7ff f881 	bl	80093f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a302:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a306:	2200      	movs	r2, #0
 800a308:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a316:	3354      	adds	r3, #84	; 0x54
 800a318:	2260      	movs	r2, #96	; 0x60
 800a31a:	2100      	movs	r1, #0
 800a31c:	4618      	mov	r0, r3
 800a31e:	f001 fecf 	bl	800c0c0 <memset>
 800a322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a324:	4a0c      	ldr	r2, [pc, #48]	; (800a358 <prvInitialiseNewTask+0x140>)
 800a326:	659a      	str	r2, [r3, #88]	; 0x58
 800a328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32a:	4a0c      	ldr	r2, [pc, #48]	; (800a35c <prvInitialiseNewTask+0x144>)
 800a32c:	65da      	str	r2, [r3, #92]	; 0x5c
 800a32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a330:	4a0b      	ldr	r2, [pc, #44]	; (800a360 <prvInitialiseNewTask+0x148>)
 800a332:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a334:	683a      	ldr	r2, [r7, #0]
 800a336:	68f9      	ldr	r1, [r7, #12]
 800a338:	69b8      	ldr	r0, [r7, #24]
 800a33a:	f001 f941 	bl	800b5c0 <pxPortInitialiseStack>
 800a33e:	4602      	mov	r2, r0
 800a340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a342:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a346:	2b00      	cmp	r3, #0
 800a348:	d002      	beq.n	800a350 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a34e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a350:	bf00      	nop
 800a352:	3720      	adds	r7, #32
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	0800df54 	.word	0x0800df54
 800a35c:	0800df74 	.word	0x0800df74
 800a360:	0800df34 	.word	0x0800df34

0800a364 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a36c:	f001 fa52 	bl	800b814 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a370:	4b2d      	ldr	r3, [pc, #180]	; (800a428 <prvAddNewTaskToReadyList+0xc4>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	3301      	adds	r3, #1
 800a376:	4a2c      	ldr	r2, [pc, #176]	; (800a428 <prvAddNewTaskToReadyList+0xc4>)
 800a378:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a37a:	4b2c      	ldr	r3, [pc, #176]	; (800a42c <prvAddNewTaskToReadyList+0xc8>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d109      	bne.n	800a396 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a382:	4a2a      	ldr	r2, [pc, #168]	; (800a42c <prvAddNewTaskToReadyList+0xc8>)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a388:	4b27      	ldr	r3, [pc, #156]	; (800a428 <prvAddNewTaskToReadyList+0xc4>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d110      	bne.n	800a3b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a390:	f000 fc26 	bl	800abe0 <prvInitialiseTaskLists>
 800a394:	e00d      	b.n	800a3b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a396:	4b26      	ldr	r3, [pc, #152]	; (800a430 <prvAddNewTaskToReadyList+0xcc>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d109      	bne.n	800a3b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a39e:	4b23      	ldr	r3, [pc, #140]	; (800a42c <prvAddNewTaskToReadyList+0xc8>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d802      	bhi.n	800a3b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a3ac:	4a1f      	ldr	r2, [pc, #124]	; (800a42c <prvAddNewTaskToReadyList+0xc8>)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a3b2:	4b20      	ldr	r3, [pc, #128]	; (800a434 <prvAddNewTaskToReadyList+0xd0>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	4a1e      	ldr	r2, [pc, #120]	; (800a434 <prvAddNewTaskToReadyList+0xd0>)
 800a3ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a3bc:	4b1d      	ldr	r3, [pc, #116]	; (800a434 <prvAddNewTaskToReadyList+0xd0>)
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3c8:	4b1b      	ldr	r3, [pc, #108]	; (800a438 <prvAddNewTaskToReadyList+0xd4>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d903      	bls.n	800a3d8 <prvAddNewTaskToReadyList+0x74>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d4:	4a18      	ldr	r2, [pc, #96]	; (800a438 <prvAddNewTaskToReadyList+0xd4>)
 800a3d6:	6013      	str	r3, [r2, #0]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3dc:	4613      	mov	r3, r2
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	4413      	add	r3, r2
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	4a15      	ldr	r2, [pc, #84]	; (800a43c <prvAddNewTaskToReadyList+0xd8>)
 800a3e6:	441a      	add	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	3304      	adds	r3, #4
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	4610      	mov	r0, r2
 800a3f0:	f7ff f80b 	bl	800940a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a3f4:	f001 fa3e 	bl	800b874 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a3f8:	4b0d      	ldr	r3, [pc, #52]	; (800a430 <prvAddNewTaskToReadyList+0xcc>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d00e      	beq.n	800a41e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a400:	4b0a      	ldr	r3, [pc, #40]	; (800a42c <prvAddNewTaskToReadyList+0xc8>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d207      	bcs.n	800a41e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a40e:	4b0c      	ldr	r3, [pc, #48]	; (800a440 <prvAddNewTaskToReadyList+0xdc>)
 800a410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a414:	601a      	str	r2, [r3, #0]
 800a416:	f3bf 8f4f 	dsb	sy
 800a41a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a41e:	bf00      	nop
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	20002560 	.word	0x20002560
 800a42c:	2000208c 	.word	0x2000208c
 800a430:	2000256c 	.word	0x2000256c
 800a434:	2000257c 	.word	0x2000257c
 800a438:	20002568 	.word	0x20002568
 800a43c:	20002090 	.word	0x20002090
 800a440:	e000ed04 	.word	0xe000ed04

0800a444 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a44c:	2300      	movs	r3, #0
 800a44e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d017      	beq.n	800a486 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a456:	4b13      	ldr	r3, [pc, #76]	; (800a4a4 <vTaskDelay+0x60>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00a      	beq.n	800a474 <vTaskDelay+0x30>
	__asm volatile
 800a45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a462:	f383 8811 	msr	BASEPRI, r3
 800a466:	f3bf 8f6f 	isb	sy
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	60bb      	str	r3, [r7, #8]
}
 800a470:	bf00      	nop
 800a472:	e7fe      	b.n	800a472 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a474:	f000 f88a 	bl	800a58c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a478:	2100      	movs	r1, #0
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 fcfe 	bl	800ae7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a480:	f000 f892 	bl	800a5a8 <xTaskResumeAll>
 800a484:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d107      	bne.n	800a49c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a48c:	4b06      	ldr	r3, [pc, #24]	; (800a4a8 <vTaskDelay+0x64>)
 800a48e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a492:	601a      	str	r2, [r3, #0]
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a49c:	bf00      	nop
 800a49e:	3710      	adds	r7, #16
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	20002588 	.word	0x20002588
 800a4a8:	e000ed04 	.word	0xe000ed04

0800a4ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b08a      	sub	sp, #40	; 0x28
 800a4b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a4ba:	463a      	mov	r2, r7
 800a4bc:	1d39      	adds	r1, r7, #4
 800a4be:	f107 0308 	add.w	r3, r7, #8
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7fe ff40 	bl	8009348 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a4c8:	6839      	ldr	r1, [r7, #0]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	68ba      	ldr	r2, [r7, #8]
 800a4ce:	9202      	str	r2, [sp, #8]
 800a4d0:	9301      	str	r3, [sp, #4]
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	9300      	str	r3, [sp, #0]
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	460a      	mov	r2, r1
 800a4da:	4924      	ldr	r1, [pc, #144]	; (800a56c <vTaskStartScheduler+0xc0>)
 800a4dc:	4824      	ldr	r0, [pc, #144]	; (800a570 <vTaskStartScheduler+0xc4>)
 800a4de:	f7ff fdf9 	bl	800a0d4 <xTaskCreateStatic>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	4a23      	ldr	r2, [pc, #140]	; (800a574 <vTaskStartScheduler+0xc8>)
 800a4e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a4e8:	4b22      	ldr	r3, [pc, #136]	; (800a574 <vTaskStartScheduler+0xc8>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d002      	beq.n	800a4f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	617b      	str	r3, [r7, #20]
 800a4f4:	e001      	b.n	800a4fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d102      	bne.n	800a506 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a500:	f000 fd10 	bl	800af24 <xTimerCreateTimerTask>
 800a504:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d11b      	bne.n	800a544 <vTaskStartScheduler+0x98>
	__asm volatile
 800a50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a510:	f383 8811 	msr	BASEPRI, r3
 800a514:	f3bf 8f6f 	isb	sy
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	613b      	str	r3, [r7, #16]
}
 800a51e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a520:	4b15      	ldr	r3, [pc, #84]	; (800a578 <vTaskStartScheduler+0xcc>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	3354      	adds	r3, #84	; 0x54
 800a526:	4a15      	ldr	r2, [pc, #84]	; (800a57c <vTaskStartScheduler+0xd0>)
 800a528:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a52a:	4b15      	ldr	r3, [pc, #84]	; (800a580 <vTaskStartScheduler+0xd4>)
 800a52c:	f04f 32ff 	mov.w	r2, #4294967295
 800a530:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a532:	4b14      	ldr	r3, [pc, #80]	; (800a584 <vTaskStartScheduler+0xd8>)
 800a534:	2201      	movs	r2, #1
 800a536:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a538:	4b13      	ldr	r3, [pc, #76]	; (800a588 <vTaskStartScheduler+0xdc>)
 800a53a:	2200      	movs	r2, #0
 800a53c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a53e:	f001 f8c7 	bl	800b6d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a542:	e00e      	b.n	800a562 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a54a:	d10a      	bne.n	800a562 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a550:	f383 8811 	msr	BASEPRI, r3
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	f3bf 8f4f 	dsb	sy
 800a55c:	60fb      	str	r3, [r7, #12]
}
 800a55e:	bf00      	nop
 800a560:	e7fe      	b.n	800a560 <vTaskStartScheduler+0xb4>
}
 800a562:	bf00      	nop
 800a564:	3718      	adds	r7, #24
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	0800de88 	.word	0x0800de88
 800a570:	0800abb1 	.word	0x0800abb1
 800a574:	20002584 	.word	0x20002584
 800a578:	2000208c 	.word	0x2000208c
 800a57c:	20000010 	.word	0x20000010
 800a580:	20002580 	.word	0x20002580
 800a584:	2000256c 	.word	0x2000256c
 800a588:	20002564 	.word	0x20002564

0800a58c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a58c:	b480      	push	{r7}
 800a58e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a590:	4b04      	ldr	r3, [pc, #16]	; (800a5a4 <vTaskSuspendAll+0x18>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	3301      	adds	r3, #1
 800a596:	4a03      	ldr	r2, [pc, #12]	; (800a5a4 <vTaskSuspendAll+0x18>)
 800a598:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a59a:	bf00      	nop
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr
 800a5a4:	20002588 	.word	0x20002588

0800a5a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b084      	sub	sp, #16
 800a5ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a5b6:	4b42      	ldr	r3, [pc, #264]	; (800a6c0 <xTaskResumeAll+0x118>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d10a      	bne.n	800a5d4 <xTaskResumeAll+0x2c>
	__asm volatile
 800a5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	603b      	str	r3, [r7, #0]
}
 800a5d0:	bf00      	nop
 800a5d2:	e7fe      	b.n	800a5d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a5d4:	f001 f91e 	bl	800b814 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a5d8:	4b39      	ldr	r3, [pc, #228]	; (800a6c0 <xTaskResumeAll+0x118>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	4a38      	ldr	r2, [pc, #224]	; (800a6c0 <xTaskResumeAll+0x118>)
 800a5e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5e2:	4b37      	ldr	r3, [pc, #220]	; (800a6c0 <xTaskResumeAll+0x118>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d162      	bne.n	800a6b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a5ea:	4b36      	ldr	r3, [pc, #216]	; (800a6c4 <xTaskResumeAll+0x11c>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d05e      	beq.n	800a6b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a5f2:	e02f      	b.n	800a654 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5f4:	4b34      	ldr	r3, [pc, #208]	; (800a6c8 <xTaskResumeAll+0x120>)
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	68db      	ldr	r3, [r3, #12]
 800a5fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	3318      	adds	r3, #24
 800a600:	4618      	mov	r0, r3
 800a602:	f7fe ff5f 	bl	80094c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	3304      	adds	r3, #4
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7fe ff5a 	bl	80094c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a614:	4b2d      	ldr	r3, [pc, #180]	; (800a6cc <xTaskResumeAll+0x124>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d903      	bls.n	800a624 <xTaskResumeAll+0x7c>
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a620:	4a2a      	ldr	r2, [pc, #168]	; (800a6cc <xTaskResumeAll+0x124>)
 800a622:	6013      	str	r3, [r2, #0]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a628:	4613      	mov	r3, r2
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	4413      	add	r3, r2
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	4a27      	ldr	r2, [pc, #156]	; (800a6d0 <xTaskResumeAll+0x128>)
 800a632:	441a      	add	r2, r3
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	3304      	adds	r3, #4
 800a638:	4619      	mov	r1, r3
 800a63a:	4610      	mov	r0, r2
 800a63c:	f7fe fee5 	bl	800940a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a644:	4b23      	ldr	r3, [pc, #140]	; (800a6d4 <xTaskResumeAll+0x12c>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d302      	bcc.n	800a654 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a64e:	4b22      	ldr	r3, [pc, #136]	; (800a6d8 <xTaskResumeAll+0x130>)
 800a650:	2201      	movs	r2, #1
 800a652:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a654:	4b1c      	ldr	r3, [pc, #112]	; (800a6c8 <xTaskResumeAll+0x120>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d1cb      	bne.n	800a5f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d001      	beq.n	800a666 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a662:	f000 fb5f 	bl	800ad24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a666:	4b1d      	ldr	r3, [pc, #116]	; (800a6dc <xTaskResumeAll+0x134>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d010      	beq.n	800a694 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a672:	f000 f847 	bl	800a704 <xTaskIncrementTick>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d002      	beq.n	800a682 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a67c:	4b16      	ldr	r3, [pc, #88]	; (800a6d8 <xTaskResumeAll+0x130>)
 800a67e:	2201      	movs	r2, #1
 800a680:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	3b01      	subs	r3, #1
 800a686:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d1f1      	bne.n	800a672 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a68e:	4b13      	ldr	r3, [pc, #76]	; (800a6dc <xTaskResumeAll+0x134>)
 800a690:	2200      	movs	r2, #0
 800a692:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a694:	4b10      	ldr	r3, [pc, #64]	; (800a6d8 <xTaskResumeAll+0x130>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d009      	beq.n	800a6b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a69c:	2301      	movs	r3, #1
 800a69e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a6a0:	4b0f      	ldr	r3, [pc, #60]	; (800a6e0 <xTaskResumeAll+0x138>)
 800a6a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6a6:	601a      	str	r2, [r3, #0]
 800a6a8:	f3bf 8f4f 	dsb	sy
 800a6ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a6b0:	f001 f8e0 	bl	800b874 <vPortExitCritical>

	return xAlreadyYielded;
 800a6b4:	68bb      	ldr	r3, [r7, #8]
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3710      	adds	r7, #16
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	20002588 	.word	0x20002588
 800a6c4:	20002560 	.word	0x20002560
 800a6c8:	20002520 	.word	0x20002520
 800a6cc:	20002568 	.word	0x20002568
 800a6d0:	20002090 	.word	0x20002090
 800a6d4:	2000208c 	.word	0x2000208c
 800a6d8:	20002574 	.word	0x20002574
 800a6dc:	20002570 	.word	0x20002570
 800a6e0:	e000ed04 	.word	0xe000ed04

0800a6e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a6ea:	4b05      	ldr	r3, [pc, #20]	; (800a700 <xTaskGetTickCount+0x1c>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a6f0:	687b      	ldr	r3, [r7, #4]
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	370c      	adds	r7, #12
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr
 800a6fe:	bf00      	nop
 800a700:	20002564 	.word	0x20002564

0800a704 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b086      	sub	sp, #24
 800a708:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a70a:	2300      	movs	r3, #0
 800a70c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a70e:	4b4f      	ldr	r3, [pc, #316]	; (800a84c <xTaskIncrementTick+0x148>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	2b00      	cmp	r3, #0
 800a714:	f040 808f 	bne.w	800a836 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a718:	4b4d      	ldr	r3, [pc, #308]	; (800a850 <xTaskIncrementTick+0x14c>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	3301      	adds	r3, #1
 800a71e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a720:	4a4b      	ldr	r2, [pc, #300]	; (800a850 <xTaskIncrementTick+0x14c>)
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d120      	bne.n	800a76e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a72c:	4b49      	ldr	r3, [pc, #292]	; (800a854 <xTaskIncrementTick+0x150>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00a      	beq.n	800a74c <xTaskIncrementTick+0x48>
	__asm volatile
 800a736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73a:	f383 8811 	msr	BASEPRI, r3
 800a73e:	f3bf 8f6f 	isb	sy
 800a742:	f3bf 8f4f 	dsb	sy
 800a746:	603b      	str	r3, [r7, #0]
}
 800a748:	bf00      	nop
 800a74a:	e7fe      	b.n	800a74a <xTaskIncrementTick+0x46>
 800a74c:	4b41      	ldr	r3, [pc, #260]	; (800a854 <xTaskIncrementTick+0x150>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	60fb      	str	r3, [r7, #12]
 800a752:	4b41      	ldr	r3, [pc, #260]	; (800a858 <xTaskIncrementTick+0x154>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a3f      	ldr	r2, [pc, #252]	; (800a854 <xTaskIncrementTick+0x150>)
 800a758:	6013      	str	r3, [r2, #0]
 800a75a:	4a3f      	ldr	r2, [pc, #252]	; (800a858 <xTaskIncrementTick+0x154>)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6013      	str	r3, [r2, #0]
 800a760:	4b3e      	ldr	r3, [pc, #248]	; (800a85c <xTaskIncrementTick+0x158>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	3301      	adds	r3, #1
 800a766:	4a3d      	ldr	r2, [pc, #244]	; (800a85c <xTaskIncrementTick+0x158>)
 800a768:	6013      	str	r3, [r2, #0]
 800a76a:	f000 fadb 	bl	800ad24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a76e:	4b3c      	ldr	r3, [pc, #240]	; (800a860 <xTaskIncrementTick+0x15c>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	693a      	ldr	r2, [r7, #16]
 800a774:	429a      	cmp	r2, r3
 800a776:	d349      	bcc.n	800a80c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a778:	4b36      	ldr	r3, [pc, #216]	; (800a854 <xTaskIncrementTick+0x150>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d104      	bne.n	800a78c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a782:	4b37      	ldr	r3, [pc, #220]	; (800a860 <xTaskIncrementTick+0x15c>)
 800a784:	f04f 32ff 	mov.w	r2, #4294967295
 800a788:	601a      	str	r2, [r3, #0]
					break;
 800a78a:	e03f      	b.n	800a80c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a78c:	4b31      	ldr	r3, [pc, #196]	; (800a854 <xTaskIncrementTick+0x150>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	68db      	ldr	r3, [r3, #12]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a79c:	693a      	ldr	r2, [r7, #16]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d203      	bcs.n	800a7ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a7a4:	4a2e      	ldr	r2, [pc, #184]	; (800a860 <xTaskIncrementTick+0x15c>)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a7aa:	e02f      	b.n	800a80c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	3304      	adds	r3, #4
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7fe fe87 	bl	80094c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d004      	beq.n	800a7c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	3318      	adds	r3, #24
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fe fe7e 	bl	80094c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7cc:	4b25      	ldr	r3, [pc, #148]	; (800a864 <xTaskIncrementTick+0x160>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d903      	bls.n	800a7dc <xTaskIncrementTick+0xd8>
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d8:	4a22      	ldr	r2, [pc, #136]	; (800a864 <xTaskIncrementTick+0x160>)
 800a7da:	6013      	str	r3, [r2, #0]
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	4413      	add	r3, r2
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	4a1f      	ldr	r2, [pc, #124]	; (800a868 <xTaskIncrementTick+0x164>)
 800a7ea:	441a      	add	r2, r3
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	3304      	adds	r3, #4
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	4610      	mov	r0, r2
 800a7f4:	f7fe fe09 	bl	800940a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7fc:	4b1b      	ldr	r3, [pc, #108]	; (800a86c <xTaskIncrementTick+0x168>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a802:	429a      	cmp	r2, r3
 800a804:	d3b8      	bcc.n	800a778 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a806:	2301      	movs	r3, #1
 800a808:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a80a:	e7b5      	b.n	800a778 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a80c:	4b17      	ldr	r3, [pc, #92]	; (800a86c <xTaskIncrementTick+0x168>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a812:	4915      	ldr	r1, [pc, #84]	; (800a868 <xTaskIncrementTick+0x164>)
 800a814:	4613      	mov	r3, r2
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	4413      	add	r3, r2
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	440b      	add	r3, r1
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2b01      	cmp	r3, #1
 800a822:	d901      	bls.n	800a828 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a824:	2301      	movs	r3, #1
 800a826:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a828:	4b11      	ldr	r3, [pc, #68]	; (800a870 <xTaskIncrementTick+0x16c>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d007      	beq.n	800a840 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a830:	2301      	movs	r3, #1
 800a832:	617b      	str	r3, [r7, #20]
 800a834:	e004      	b.n	800a840 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a836:	4b0f      	ldr	r3, [pc, #60]	; (800a874 <xTaskIncrementTick+0x170>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	3301      	adds	r3, #1
 800a83c:	4a0d      	ldr	r2, [pc, #52]	; (800a874 <xTaskIncrementTick+0x170>)
 800a83e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a840:	697b      	ldr	r3, [r7, #20]
}
 800a842:	4618      	mov	r0, r3
 800a844:	3718      	adds	r7, #24
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	20002588 	.word	0x20002588
 800a850:	20002564 	.word	0x20002564
 800a854:	20002518 	.word	0x20002518
 800a858:	2000251c 	.word	0x2000251c
 800a85c:	20002578 	.word	0x20002578
 800a860:	20002580 	.word	0x20002580
 800a864:	20002568 	.word	0x20002568
 800a868:	20002090 	.word	0x20002090
 800a86c:	2000208c 	.word	0x2000208c
 800a870:	20002574 	.word	0x20002574
 800a874:	20002570 	.word	0x20002570

0800a878 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a878:	b480      	push	{r7}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a87e:	4b2a      	ldr	r3, [pc, #168]	; (800a928 <vTaskSwitchContext+0xb0>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d003      	beq.n	800a88e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a886:	4b29      	ldr	r3, [pc, #164]	; (800a92c <vTaskSwitchContext+0xb4>)
 800a888:	2201      	movs	r2, #1
 800a88a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a88c:	e046      	b.n	800a91c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a88e:	4b27      	ldr	r3, [pc, #156]	; (800a92c <vTaskSwitchContext+0xb4>)
 800a890:	2200      	movs	r2, #0
 800a892:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a894:	4b26      	ldr	r3, [pc, #152]	; (800a930 <vTaskSwitchContext+0xb8>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	60fb      	str	r3, [r7, #12]
 800a89a:	e010      	b.n	800a8be <vTaskSwitchContext+0x46>
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d10a      	bne.n	800a8b8 <vTaskSwitchContext+0x40>
	__asm volatile
 800a8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a6:	f383 8811 	msr	BASEPRI, r3
 800a8aa:	f3bf 8f6f 	isb	sy
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	607b      	str	r3, [r7, #4]
}
 800a8b4:	bf00      	nop
 800a8b6:	e7fe      	b.n	800a8b6 <vTaskSwitchContext+0x3e>
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	60fb      	str	r3, [r7, #12]
 800a8be:	491d      	ldr	r1, [pc, #116]	; (800a934 <vTaskSwitchContext+0xbc>)
 800a8c0:	68fa      	ldr	r2, [r7, #12]
 800a8c2:	4613      	mov	r3, r2
 800a8c4:	009b      	lsls	r3, r3, #2
 800a8c6:	4413      	add	r3, r2
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	440b      	add	r3, r1
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d0e4      	beq.n	800a89c <vTaskSwitchContext+0x24>
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	4613      	mov	r3, r2
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	4413      	add	r3, r2
 800a8da:	009b      	lsls	r3, r3, #2
 800a8dc:	4a15      	ldr	r2, [pc, #84]	; (800a934 <vTaskSwitchContext+0xbc>)
 800a8de:	4413      	add	r3, r2
 800a8e0:	60bb      	str	r3, [r7, #8]
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	685a      	ldr	r2, [r3, #4]
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	605a      	str	r2, [r3, #4]
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	685a      	ldr	r2, [r3, #4]
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	3308      	adds	r3, #8
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d104      	bne.n	800a902 <vTaskSwitchContext+0x8a>
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	685a      	ldr	r2, [r3, #4]
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	605a      	str	r2, [r3, #4]
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	4a0b      	ldr	r2, [pc, #44]	; (800a938 <vTaskSwitchContext+0xc0>)
 800a90a:	6013      	str	r3, [r2, #0]
 800a90c:	4a08      	ldr	r2, [pc, #32]	; (800a930 <vTaskSwitchContext+0xb8>)
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a912:	4b09      	ldr	r3, [pc, #36]	; (800a938 <vTaskSwitchContext+0xc0>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	3354      	adds	r3, #84	; 0x54
 800a918:	4a08      	ldr	r2, [pc, #32]	; (800a93c <vTaskSwitchContext+0xc4>)
 800a91a:	6013      	str	r3, [r2, #0]
}
 800a91c:	bf00      	nop
 800a91e:	3714      	adds	r7, #20
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr
 800a928:	20002588 	.word	0x20002588
 800a92c:	20002574 	.word	0x20002574
 800a930:	20002568 	.word	0x20002568
 800a934:	20002090 	.word	0x20002090
 800a938:	2000208c 	.word	0x2000208c
 800a93c:	20000010 	.word	0x20000010

0800a940 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d10a      	bne.n	800a966 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a954:	f383 8811 	msr	BASEPRI, r3
 800a958:	f3bf 8f6f 	isb	sy
 800a95c:	f3bf 8f4f 	dsb	sy
 800a960:	60fb      	str	r3, [r7, #12]
}
 800a962:	bf00      	nop
 800a964:	e7fe      	b.n	800a964 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a966:	4b07      	ldr	r3, [pc, #28]	; (800a984 <vTaskPlaceOnEventList+0x44>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	3318      	adds	r3, #24
 800a96c:	4619      	mov	r1, r3
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7fe fd6f 	bl	8009452 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a974:	2101      	movs	r1, #1
 800a976:	6838      	ldr	r0, [r7, #0]
 800a978:	f000 fa80 	bl	800ae7c <prvAddCurrentTaskToDelayedList>
}
 800a97c:	bf00      	nop
 800a97e:	3710      	adds	r7, #16
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	2000208c 	.word	0x2000208c

0800a988 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b086      	sub	sp, #24
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	60b9      	str	r1, [r7, #8]
 800a992:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d10a      	bne.n	800a9b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99e:	f383 8811 	msr	BASEPRI, r3
 800a9a2:	f3bf 8f6f 	isb	sy
 800a9a6:	f3bf 8f4f 	dsb	sy
 800a9aa:	617b      	str	r3, [r7, #20]
}
 800a9ac:	bf00      	nop
 800a9ae:	e7fe      	b.n	800a9ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a9b0:	4b0a      	ldr	r3, [pc, #40]	; (800a9dc <vTaskPlaceOnEventListRestricted+0x54>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	3318      	adds	r3, #24
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f7fe fd26 	bl	800940a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d002      	beq.n	800a9ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a9c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a9c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a9ca:	6879      	ldr	r1, [r7, #4]
 800a9cc:	68b8      	ldr	r0, [r7, #8]
 800a9ce:	f000 fa55 	bl	800ae7c <prvAddCurrentTaskToDelayedList>
	}
 800a9d2:	bf00      	nop
 800a9d4:	3718      	adds	r7, #24
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	2000208c 	.word	0x2000208c

0800a9e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b086      	sub	sp, #24
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	68db      	ldr	r3, [r3, #12]
 800a9ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d10a      	bne.n	800aa0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fa:	f383 8811 	msr	BASEPRI, r3
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	f3bf 8f4f 	dsb	sy
 800aa06:	60fb      	str	r3, [r7, #12]
}
 800aa08:	bf00      	nop
 800aa0a:	e7fe      	b.n	800aa0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	3318      	adds	r3, #24
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7fe fd57 	bl	80094c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa16:	4b1e      	ldr	r3, [pc, #120]	; (800aa90 <xTaskRemoveFromEventList+0xb0>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d11d      	bne.n	800aa5a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	3304      	adds	r3, #4
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7fe fd4e 	bl	80094c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa2c:	4b19      	ldr	r3, [pc, #100]	; (800aa94 <xTaskRemoveFromEventList+0xb4>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d903      	bls.n	800aa3c <xTaskRemoveFromEventList+0x5c>
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa38:	4a16      	ldr	r2, [pc, #88]	; (800aa94 <xTaskRemoveFromEventList+0xb4>)
 800aa3a:	6013      	str	r3, [r2, #0]
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa40:	4613      	mov	r3, r2
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	4413      	add	r3, r2
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	4a13      	ldr	r2, [pc, #76]	; (800aa98 <xTaskRemoveFromEventList+0xb8>)
 800aa4a:	441a      	add	r2, r3
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	3304      	adds	r3, #4
 800aa50:	4619      	mov	r1, r3
 800aa52:	4610      	mov	r0, r2
 800aa54:	f7fe fcd9 	bl	800940a <vListInsertEnd>
 800aa58:	e005      	b.n	800aa66 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	3318      	adds	r3, #24
 800aa5e:	4619      	mov	r1, r3
 800aa60:	480e      	ldr	r0, [pc, #56]	; (800aa9c <xTaskRemoveFromEventList+0xbc>)
 800aa62:	f7fe fcd2 	bl	800940a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa6a:	4b0d      	ldr	r3, [pc, #52]	; (800aaa0 <xTaskRemoveFromEventList+0xc0>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d905      	bls.n	800aa80 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aa74:	2301      	movs	r3, #1
 800aa76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aa78:	4b0a      	ldr	r3, [pc, #40]	; (800aaa4 <xTaskRemoveFromEventList+0xc4>)
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	601a      	str	r2, [r3, #0]
 800aa7e:	e001      	b.n	800aa84 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800aa80:	2300      	movs	r3, #0
 800aa82:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aa84:	697b      	ldr	r3, [r7, #20]
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3718      	adds	r7, #24
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	20002588 	.word	0x20002588
 800aa94:	20002568 	.word	0x20002568
 800aa98:	20002090 	.word	0x20002090
 800aa9c:	20002520 	.word	0x20002520
 800aaa0:	2000208c 	.word	0x2000208c
 800aaa4:	20002574 	.word	0x20002574

0800aaa8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aab0:	4b06      	ldr	r3, [pc, #24]	; (800aacc <vTaskInternalSetTimeOutState+0x24>)
 800aab2:	681a      	ldr	r2, [r3, #0]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aab8:	4b05      	ldr	r3, [pc, #20]	; (800aad0 <vTaskInternalSetTimeOutState+0x28>)
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	605a      	str	r2, [r3, #4]
}
 800aac0:	bf00      	nop
 800aac2:	370c      	adds	r7, #12
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr
 800aacc:	20002578 	.word	0x20002578
 800aad0:	20002564 	.word	0x20002564

0800aad4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b088      	sub	sp, #32
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d10a      	bne.n	800aafa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800aae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae8:	f383 8811 	msr	BASEPRI, r3
 800aaec:	f3bf 8f6f 	isb	sy
 800aaf0:	f3bf 8f4f 	dsb	sy
 800aaf4:	613b      	str	r3, [r7, #16]
}
 800aaf6:	bf00      	nop
 800aaf8:	e7fe      	b.n	800aaf8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d10a      	bne.n	800ab16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ab00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	60fb      	str	r3, [r7, #12]
}
 800ab12:	bf00      	nop
 800ab14:	e7fe      	b.n	800ab14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ab16:	f000 fe7d 	bl	800b814 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ab1a:	4b1d      	ldr	r3, [pc, #116]	; (800ab90 <xTaskCheckForTimeOut+0xbc>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	69ba      	ldr	r2, [r7, #24]
 800ab26:	1ad3      	subs	r3, r2, r3
 800ab28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab32:	d102      	bne.n	800ab3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ab34:	2300      	movs	r3, #0
 800ab36:	61fb      	str	r3, [r7, #28]
 800ab38:	e023      	b.n	800ab82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	4b15      	ldr	r3, [pc, #84]	; (800ab94 <xTaskCheckForTimeOut+0xc0>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d007      	beq.n	800ab56 <xTaskCheckForTimeOut+0x82>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	69ba      	ldr	r2, [r7, #24]
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d302      	bcc.n	800ab56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ab50:	2301      	movs	r3, #1
 800ab52:	61fb      	str	r3, [r7, #28]
 800ab54:	e015      	b.n	800ab82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	697a      	ldr	r2, [r7, #20]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d20b      	bcs.n	800ab78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	1ad2      	subs	r2, r2, r3
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f7ff ff9b 	bl	800aaa8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ab72:	2300      	movs	r3, #0
 800ab74:	61fb      	str	r3, [r7, #28]
 800ab76:	e004      	b.n	800ab82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ab82:	f000 fe77 	bl	800b874 <vPortExitCritical>

	return xReturn;
 800ab86:	69fb      	ldr	r3, [r7, #28]
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3720      	adds	r7, #32
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	20002564 	.word	0x20002564
 800ab94:	20002578 	.word	0x20002578

0800ab98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ab98:	b480      	push	{r7}
 800ab9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ab9c:	4b03      	ldr	r3, [pc, #12]	; (800abac <vTaskMissedYield+0x14>)
 800ab9e:	2201      	movs	r2, #1
 800aba0:	601a      	str	r2, [r3, #0]
}
 800aba2:	bf00      	nop
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr
 800abac:	20002574 	.word	0x20002574

0800abb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800abb8:	f000 f852 	bl	800ac60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800abbc:	4b06      	ldr	r3, [pc, #24]	; (800abd8 <prvIdleTask+0x28>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d9f9      	bls.n	800abb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800abc4:	4b05      	ldr	r3, [pc, #20]	; (800abdc <prvIdleTask+0x2c>)
 800abc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abca:	601a      	str	r2, [r3, #0]
 800abcc:	f3bf 8f4f 	dsb	sy
 800abd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800abd4:	e7f0      	b.n	800abb8 <prvIdleTask+0x8>
 800abd6:	bf00      	nop
 800abd8:	20002090 	.word	0x20002090
 800abdc:	e000ed04 	.word	0xe000ed04

0800abe0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abe6:	2300      	movs	r3, #0
 800abe8:	607b      	str	r3, [r7, #4]
 800abea:	e00c      	b.n	800ac06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	4613      	mov	r3, r2
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	4413      	add	r3, r2
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4a12      	ldr	r2, [pc, #72]	; (800ac40 <prvInitialiseTaskLists+0x60>)
 800abf8:	4413      	add	r3, r2
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7fe fbd8 	bl	80093b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	3301      	adds	r3, #1
 800ac04:	607b      	str	r3, [r7, #4]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2b37      	cmp	r3, #55	; 0x37
 800ac0a:	d9ef      	bls.n	800abec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ac0c:	480d      	ldr	r0, [pc, #52]	; (800ac44 <prvInitialiseTaskLists+0x64>)
 800ac0e:	f7fe fbcf 	bl	80093b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ac12:	480d      	ldr	r0, [pc, #52]	; (800ac48 <prvInitialiseTaskLists+0x68>)
 800ac14:	f7fe fbcc 	bl	80093b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ac18:	480c      	ldr	r0, [pc, #48]	; (800ac4c <prvInitialiseTaskLists+0x6c>)
 800ac1a:	f7fe fbc9 	bl	80093b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ac1e:	480c      	ldr	r0, [pc, #48]	; (800ac50 <prvInitialiseTaskLists+0x70>)
 800ac20:	f7fe fbc6 	bl	80093b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ac24:	480b      	ldr	r0, [pc, #44]	; (800ac54 <prvInitialiseTaskLists+0x74>)
 800ac26:	f7fe fbc3 	bl	80093b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ac2a:	4b0b      	ldr	r3, [pc, #44]	; (800ac58 <prvInitialiseTaskLists+0x78>)
 800ac2c:	4a05      	ldr	r2, [pc, #20]	; (800ac44 <prvInitialiseTaskLists+0x64>)
 800ac2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ac30:	4b0a      	ldr	r3, [pc, #40]	; (800ac5c <prvInitialiseTaskLists+0x7c>)
 800ac32:	4a05      	ldr	r2, [pc, #20]	; (800ac48 <prvInitialiseTaskLists+0x68>)
 800ac34:	601a      	str	r2, [r3, #0]
}
 800ac36:	bf00      	nop
 800ac38:	3708      	adds	r7, #8
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
 800ac3e:	bf00      	nop
 800ac40:	20002090 	.word	0x20002090
 800ac44:	200024f0 	.word	0x200024f0
 800ac48:	20002504 	.word	0x20002504
 800ac4c:	20002520 	.word	0x20002520
 800ac50:	20002534 	.word	0x20002534
 800ac54:	2000254c 	.word	0x2000254c
 800ac58:	20002518 	.word	0x20002518
 800ac5c:	2000251c 	.word	0x2000251c

0800ac60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac66:	e019      	b.n	800ac9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ac68:	f000 fdd4 	bl	800b814 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac6c:	4b10      	ldr	r3, [pc, #64]	; (800acb0 <prvCheckTasksWaitingTermination+0x50>)
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	3304      	adds	r3, #4
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7fe fc23 	bl	80094c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ac7e:	4b0d      	ldr	r3, [pc, #52]	; (800acb4 <prvCheckTasksWaitingTermination+0x54>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	3b01      	subs	r3, #1
 800ac84:	4a0b      	ldr	r2, [pc, #44]	; (800acb4 <prvCheckTasksWaitingTermination+0x54>)
 800ac86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ac88:	4b0b      	ldr	r3, [pc, #44]	; (800acb8 <prvCheckTasksWaitingTermination+0x58>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	3b01      	subs	r3, #1
 800ac8e:	4a0a      	ldr	r2, [pc, #40]	; (800acb8 <prvCheckTasksWaitingTermination+0x58>)
 800ac90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ac92:	f000 fdef 	bl	800b874 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 f810 	bl	800acbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac9c:	4b06      	ldr	r3, [pc, #24]	; (800acb8 <prvCheckTasksWaitingTermination+0x58>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d1e1      	bne.n	800ac68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aca4:	bf00      	nop
 800aca6:	bf00      	nop
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	20002534 	.word	0x20002534
 800acb4:	20002560 	.word	0x20002560
 800acb8:	20002548 	.word	0x20002548

0800acbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	3354      	adds	r3, #84	; 0x54
 800acc8:	4618      	mov	r0, r3
 800acca:	f001 fb7d 	bl	800c3c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d108      	bne.n	800acea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acdc:	4618      	mov	r0, r3
 800acde:	f000 ff87 	bl	800bbf0 <vPortFree>
				vPortFree( pxTCB );
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 ff84 	bl	800bbf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ace8:	e018      	b.n	800ad1c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d103      	bne.n	800acfc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 ff7b 	bl	800bbf0 <vPortFree>
	}
 800acfa:	e00f      	b.n	800ad1c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ad02:	2b02      	cmp	r3, #2
 800ad04:	d00a      	beq.n	800ad1c <prvDeleteTCB+0x60>
	__asm volatile
 800ad06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	60fb      	str	r3, [r7, #12]
}
 800ad18:	bf00      	nop
 800ad1a:	e7fe      	b.n	800ad1a <prvDeleteTCB+0x5e>
	}
 800ad1c:	bf00      	nop
 800ad1e:	3710      	adds	r7, #16
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad2a:	4b0c      	ldr	r3, [pc, #48]	; (800ad5c <prvResetNextTaskUnblockTime+0x38>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d104      	bne.n	800ad3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad34:	4b0a      	ldr	r3, [pc, #40]	; (800ad60 <prvResetNextTaskUnblockTime+0x3c>)
 800ad36:	f04f 32ff 	mov.w	r2, #4294967295
 800ad3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ad3c:	e008      	b.n	800ad50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad3e:	4b07      	ldr	r3, [pc, #28]	; (800ad5c <prvResetNextTaskUnblockTime+0x38>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	4a04      	ldr	r2, [pc, #16]	; (800ad60 <prvResetNextTaskUnblockTime+0x3c>)
 800ad4e:	6013      	str	r3, [r2, #0]
}
 800ad50:	bf00      	nop
 800ad52:	370c      	adds	r7, #12
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr
 800ad5c:	20002518 	.word	0x20002518
 800ad60:	20002580 	.word	0x20002580

0800ad64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ad6a:	4b0b      	ldr	r3, [pc, #44]	; (800ad98 <xTaskGetSchedulerState+0x34>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d102      	bne.n	800ad78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ad72:	2301      	movs	r3, #1
 800ad74:	607b      	str	r3, [r7, #4]
 800ad76:	e008      	b.n	800ad8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad78:	4b08      	ldr	r3, [pc, #32]	; (800ad9c <xTaskGetSchedulerState+0x38>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d102      	bne.n	800ad86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ad80:	2302      	movs	r3, #2
 800ad82:	607b      	str	r3, [r7, #4]
 800ad84:	e001      	b.n	800ad8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ad86:	2300      	movs	r3, #0
 800ad88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ad8a:	687b      	ldr	r3, [r7, #4]
	}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr
 800ad98:	2000256c 	.word	0x2000256c
 800ad9c:	20002588 	.word	0x20002588

0800ada0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b086      	sub	sp, #24
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800adac:	2300      	movs	r3, #0
 800adae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d056      	beq.n	800ae64 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800adb6:	4b2e      	ldr	r3, [pc, #184]	; (800ae70 <xTaskPriorityDisinherit+0xd0>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	693a      	ldr	r2, [r7, #16]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d00a      	beq.n	800add6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800adc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc4:	f383 8811 	msr	BASEPRI, r3
 800adc8:	f3bf 8f6f 	isb	sy
 800adcc:	f3bf 8f4f 	dsb	sy
 800add0:	60fb      	str	r3, [r7, #12]
}
 800add2:	bf00      	nop
 800add4:	e7fe      	b.n	800add4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adda:	2b00      	cmp	r3, #0
 800addc:	d10a      	bne.n	800adf4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800adde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade2:	f383 8811 	msr	BASEPRI, r3
 800ade6:	f3bf 8f6f 	isb	sy
 800adea:	f3bf 8f4f 	dsb	sy
 800adee:	60bb      	str	r3, [r7, #8]
}
 800adf0:	bf00      	nop
 800adf2:	e7fe      	b.n	800adf2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adf8:	1e5a      	subs	r2, r3, #1
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d02c      	beq.n	800ae64 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d128      	bne.n	800ae64 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	3304      	adds	r3, #4
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7fe fb54 	bl	80094c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae28:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae34:	4b0f      	ldr	r3, [pc, #60]	; (800ae74 <xTaskPriorityDisinherit+0xd4>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d903      	bls.n	800ae44 <xTaskPriorityDisinherit+0xa4>
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae40:	4a0c      	ldr	r2, [pc, #48]	; (800ae74 <xTaskPriorityDisinherit+0xd4>)
 800ae42:	6013      	str	r3, [r2, #0]
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae48:	4613      	mov	r3, r2
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	4413      	add	r3, r2
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	4a09      	ldr	r2, [pc, #36]	; (800ae78 <xTaskPriorityDisinherit+0xd8>)
 800ae52:	441a      	add	r2, r3
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	3304      	adds	r3, #4
 800ae58:	4619      	mov	r1, r3
 800ae5a:	4610      	mov	r0, r2
 800ae5c:	f7fe fad5 	bl	800940a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ae60:	2301      	movs	r3, #1
 800ae62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ae64:	697b      	ldr	r3, [r7, #20]
	}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3718      	adds	r7, #24
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	2000208c 	.word	0x2000208c
 800ae74:	20002568 	.word	0x20002568
 800ae78:	20002090 	.word	0x20002090

0800ae7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ae86:	4b21      	ldr	r3, [pc, #132]	; (800af0c <prvAddCurrentTaskToDelayedList+0x90>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae8c:	4b20      	ldr	r3, [pc, #128]	; (800af10 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	3304      	adds	r3, #4
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7fe fb16 	bl	80094c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae9e:	d10a      	bne.n	800aeb6 <prvAddCurrentTaskToDelayedList+0x3a>
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d007      	beq.n	800aeb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aea6:	4b1a      	ldr	r3, [pc, #104]	; (800af10 <prvAddCurrentTaskToDelayedList+0x94>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	3304      	adds	r3, #4
 800aeac:	4619      	mov	r1, r3
 800aeae:	4819      	ldr	r0, [pc, #100]	; (800af14 <prvAddCurrentTaskToDelayedList+0x98>)
 800aeb0:	f7fe faab 	bl	800940a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aeb4:	e026      	b.n	800af04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aeb6:	68fa      	ldr	r2, [r7, #12]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	4413      	add	r3, r2
 800aebc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aebe:	4b14      	ldr	r3, [pc, #80]	; (800af10 <prvAddCurrentTaskToDelayedList+0x94>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	68ba      	ldr	r2, [r7, #8]
 800aec4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aec6:	68ba      	ldr	r2, [r7, #8]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d209      	bcs.n	800aee2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aece:	4b12      	ldr	r3, [pc, #72]	; (800af18 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	4b0f      	ldr	r3, [pc, #60]	; (800af10 <prvAddCurrentTaskToDelayedList+0x94>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	3304      	adds	r3, #4
 800aed8:	4619      	mov	r1, r3
 800aeda:	4610      	mov	r0, r2
 800aedc:	f7fe fab9 	bl	8009452 <vListInsert>
}
 800aee0:	e010      	b.n	800af04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aee2:	4b0e      	ldr	r3, [pc, #56]	; (800af1c <prvAddCurrentTaskToDelayedList+0xa0>)
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	4b0a      	ldr	r3, [pc, #40]	; (800af10 <prvAddCurrentTaskToDelayedList+0x94>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	3304      	adds	r3, #4
 800aeec:	4619      	mov	r1, r3
 800aeee:	4610      	mov	r0, r2
 800aef0:	f7fe faaf 	bl	8009452 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aef4:	4b0a      	ldr	r3, [pc, #40]	; (800af20 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	68ba      	ldr	r2, [r7, #8]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d202      	bcs.n	800af04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aefe:	4a08      	ldr	r2, [pc, #32]	; (800af20 <prvAddCurrentTaskToDelayedList+0xa4>)
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	6013      	str	r3, [r2, #0]
}
 800af04:	bf00      	nop
 800af06:	3710      	adds	r7, #16
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	20002564 	.word	0x20002564
 800af10:	2000208c 	.word	0x2000208c
 800af14:	2000254c 	.word	0x2000254c
 800af18:	2000251c 	.word	0x2000251c
 800af1c:	20002518 	.word	0x20002518
 800af20:	20002580 	.word	0x20002580

0800af24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b08a      	sub	sp, #40	; 0x28
 800af28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800af2a:	2300      	movs	r3, #0
 800af2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800af2e:	f000 fb07 	bl	800b540 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800af32:	4b1c      	ldr	r3, [pc, #112]	; (800afa4 <xTimerCreateTimerTask+0x80>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d021      	beq.n	800af7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800af3a:	2300      	movs	r3, #0
 800af3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800af3e:	2300      	movs	r3, #0
 800af40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800af42:	1d3a      	adds	r2, r7, #4
 800af44:	f107 0108 	add.w	r1, r7, #8
 800af48:	f107 030c 	add.w	r3, r7, #12
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7fe fa15 	bl	800937c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800af52:	6879      	ldr	r1, [r7, #4]
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	9202      	str	r2, [sp, #8]
 800af5a:	9301      	str	r3, [sp, #4]
 800af5c:	2302      	movs	r3, #2
 800af5e:	9300      	str	r3, [sp, #0]
 800af60:	2300      	movs	r3, #0
 800af62:	460a      	mov	r2, r1
 800af64:	4910      	ldr	r1, [pc, #64]	; (800afa8 <xTimerCreateTimerTask+0x84>)
 800af66:	4811      	ldr	r0, [pc, #68]	; (800afac <xTimerCreateTimerTask+0x88>)
 800af68:	f7ff f8b4 	bl	800a0d4 <xTaskCreateStatic>
 800af6c:	4603      	mov	r3, r0
 800af6e:	4a10      	ldr	r2, [pc, #64]	; (800afb0 <xTimerCreateTimerTask+0x8c>)
 800af70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800af72:	4b0f      	ldr	r3, [pc, #60]	; (800afb0 <xTimerCreateTimerTask+0x8c>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d001      	beq.n	800af7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800af7a:	2301      	movs	r3, #1
 800af7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d10a      	bne.n	800af9a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800af84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af88:	f383 8811 	msr	BASEPRI, r3
 800af8c:	f3bf 8f6f 	isb	sy
 800af90:	f3bf 8f4f 	dsb	sy
 800af94:	613b      	str	r3, [r7, #16]
}
 800af96:	bf00      	nop
 800af98:	e7fe      	b.n	800af98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800af9a:	697b      	ldr	r3, [r7, #20]
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3718      	adds	r7, #24
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	200025bc 	.word	0x200025bc
 800afa8:	0800de90 	.word	0x0800de90
 800afac:	0800b0e9 	.word	0x0800b0e9
 800afb0:	200025c0 	.word	0x200025c0

0800afb4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b08a      	sub	sp, #40	; 0x28
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
 800afc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800afc2:	2300      	movs	r3, #0
 800afc4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d10a      	bne.n	800afe2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800afcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd0:	f383 8811 	msr	BASEPRI, r3
 800afd4:	f3bf 8f6f 	isb	sy
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	623b      	str	r3, [r7, #32]
}
 800afde:	bf00      	nop
 800afe0:	e7fe      	b.n	800afe0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800afe2:	4b1a      	ldr	r3, [pc, #104]	; (800b04c <xTimerGenericCommand+0x98>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d02a      	beq.n	800b040 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	2b05      	cmp	r3, #5
 800affa:	dc18      	bgt.n	800b02e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800affc:	f7ff feb2 	bl	800ad64 <xTaskGetSchedulerState>
 800b000:	4603      	mov	r3, r0
 800b002:	2b02      	cmp	r3, #2
 800b004:	d109      	bne.n	800b01a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b006:	4b11      	ldr	r3, [pc, #68]	; (800b04c <xTimerGenericCommand+0x98>)
 800b008:	6818      	ldr	r0, [r3, #0]
 800b00a:	f107 0110 	add.w	r1, r7, #16
 800b00e:	2300      	movs	r3, #0
 800b010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b012:	f7fe fc29 	bl	8009868 <xQueueGenericSend>
 800b016:	6278      	str	r0, [r7, #36]	; 0x24
 800b018:	e012      	b.n	800b040 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b01a:	4b0c      	ldr	r3, [pc, #48]	; (800b04c <xTimerGenericCommand+0x98>)
 800b01c:	6818      	ldr	r0, [r3, #0]
 800b01e:	f107 0110 	add.w	r1, r7, #16
 800b022:	2300      	movs	r3, #0
 800b024:	2200      	movs	r2, #0
 800b026:	f7fe fc1f 	bl	8009868 <xQueueGenericSend>
 800b02a:	6278      	str	r0, [r7, #36]	; 0x24
 800b02c:	e008      	b.n	800b040 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b02e:	4b07      	ldr	r3, [pc, #28]	; (800b04c <xTimerGenericCommand+0x98>)
 800b030:	6818      	ldr	r0, [r3, #0]
 800b032:	f107 0110 	add.w	r1, r7, #16
 800b036:	2300      	movs	r3, #0
 800b038:	683a      	ldr	r2, [r7, #0]
 800b03a:	f7fe fd13 	bl	8009a64 <xQueueGenericSendFromISR>
 800b03e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b042:	4618      	mov	r0, r3
 800b044:	3728      	adds	r7, #40	; 0x28
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	bf00      	nop
 800b04c:	200025bc 	.word	0x200025bc

0800b050 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b088      	sub	sp, #32
 800b054:	af02      	add	r7, sp, #8
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b05a:	4b22      	ldr	r3, [pc, #136]	; (800b0e4 <prvProcessExpiredTimer+0x94>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	3304      	adds	r3, #4
 800b068:	4618      	mov	r0, r3
 800b06a:	f7fe fa2b 	bl	80094c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b074:	f003 0304 	and.w	r3, r3, #4
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d022      	beq.n	800b0c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	699a      	ldr	r2, [r3, #24]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	18d1      	adds	r1, r2, r3
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	683a      	ldr	r2, [r7, #0]
 800b088:	6978      	ldr	r0, [r7, #20]
 800b08a:	f000 f8d1 	bl	800b230 <prvInsertTimerInActiveList>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d01f      	beq.n	800b0d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b094:	2300      	movs	r3, #0
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	2300      	movs	r3, #0
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	2100      	movs	r1, #0
 800b09e:	6978      	ldr	r0, [r7, #20]
 800b0a0:	f7ff ff88 	bl	800afb4 <xTimerGenericCommand>
 800b0a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d113      	bne.n	800b0d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b0:	f383 8811 	msr	BASEPRI, r3
 800b0b4:	f3bf 8f6f 	isb	sy
 800b0b8:	f3bf 8f4f 	dsb	sy
 800b0bc:	60fb      	str	r3, [r7, #12]
}
 800b0be:	bf00      	nop
 800b0c0:	e7fe      	b.n	800b0c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0c8:	f023 0301 	bic.w	r3, r3, #1
 800b0cc:	b2da      	uxtb	r2, r3
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	6a1b      	ldr	r3, [r3, #32]
 800b0d8:	6978      	ldr	r0, [r7, #20]
 800b0da:	4798      	blx	r3
}
 800b0dc:	bf00      	nop
 800b0de:	3718      	adds	r7, #24
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	200025b4 	.word	0x200025b4

0800b0e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b0f0:	f107 0308 	add.w	r3, r7, #8
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f000 f857 	bl	800b1a8 <prvGetNextExpireTime>
 800b0fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	4619      	mov	r1, r3
 800b100:	68f8      	ldr	r0, [r7, #12]
 800b102:	f000 f803 	bl	800b10c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b106:	f000 f8d5 	bl	800b2b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b10a:	e7f1      	b.n	800b0f0 <prvTimerTask+0x8>

0800b10c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b084      	sub	sp, #16
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b116:	f7ff fa39 	bl	800a58c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b11a:	f107 0308 	add.w	r3, r7, #8
 800b11e:	4618      	mov	r0, r3
 800b120:	f000 f866 	bl	800b1f0 <prvSampleTimeNow>
 800b124:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d130      	bne.n	800b18e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d10a      	bne.n	800b148 <prvProcessTimerOrBlockTask+0x3c>
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	429a      	cmp	r2, r3
 800b138:	d806      	bhi.n	800b148 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b13a:	f7ff fa35 	bl	800a5a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b13e:	68f9      	ldr	r1, [r7, #12]
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f7ff ff85 	bl	800b050 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b146:	e024      	b.n	800b192 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d008      	beq.n	800b160 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b14e:	4b13      	ldr	r3, [pc, #76]	; (800b19c <prvProcessTimerOrBlockTask+0x90>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d101      	bne.n	800b15c <prvProcessTimerOrBlockTask+0x50>
 800b158:	2301      	movs	r3, #1
 800b15a:	e000      	b.n	800b15e <prvProcessTimerOrBlockTask+0x52>
 800b15c:	2300      	movs	r3, #0
 800b15e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b160:	4b0f      	ldr	r3, [pc, #60]	; (800b1a0 <prvProcessTimerOrBlockTask+0x94>)
 800b162:	6818      	ldr	r0, [r3, #0]
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	1ad3      	subs	r3, r2, r3
 800b16a:	683a      	ldr	r2, [r7, #0]
 800b16c:	4619      	mov	r1, r3
 800b16e:	f7fe ff7d 	bl	800a06c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b172:	f7ff fa19 	bl	800a5a8 <xTaskResumeAll>
 800b176:	4603      	mov	r3, r0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d10a      	bne.n	800b192 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b17c:	4b09      	ldr	r3, [pc, #36]	; (800b1a4 <prvProcessTimerOrBlockTask+0x98>)
 800b17e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b182:	601a      	str	r2, [r3, #0]
 800b184:	f3bf 8f4f 	dsb	sy
 800b188:	f3bf 8f6f 	isb	sy
}
 800b18c:	e001      	b.n	800b192 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b18e:	f7ff fa0b 	bl	800a5a8 <xTaskResumeAll>
}
 800b192:	bf00      	nop
 800b194:	3710      	adds	r7, #16
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	200025b8 	.word	0x200025b8
 800b1a0:	200025bc 	.word	0x200025bc
 800b1a4:	e000ed04 	.word	0xe000ed04

0800b1a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b085      	sub	sp, #20
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b1b0:	4b0e      	ldr	r3, [pc, #56]	; (800b1ec <prvGetNextExpireTime+0x44>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d101      	bne.n	800b1be <prvGetNextExpireTime+0x16>
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	e000      	b.n	800b1c0 <prvGetNextExpireTime+0x18>
 800b1be:	2200      	movs	r2, #0
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d105      	bne.n	800b1d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b1cc:	4b07      	ldr	r3, [pc, #28]	; (800b1ec <prvGetNextExpireTime+0x44>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	68db      	ldr	r3, [r3, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	60fb      	str	r3, [r7, #12]
 800b1d6:	e001      	b.n	800b1dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3714      	adds	r7, #20
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr
 800b1ea:	bf00      	nop
 800b1ec:	200025b4 	.word	0x200025b4

0800b1f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b1f8:	f7ff fa74 	bl	800a6e4 <xTaskGetTickCount>
 800b1fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b1fe:	4b0b      	ldr	r3, [pc, #44]	; (800b22c <prvSampleTimeNow+0x3c>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	68fa      	ldr	r2, [r7, #12]
 800b204:	429a      	cmp	r2, r3
 800b206:	d205      	bcs.n	800b214 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b208:	f000 f936 	bl	800b478 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	601a      	str	r2, [r3, #0]
 800b212:	e002      	b.n	800b21a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b21a:	4a04      	ldr	r2, [pc, #16]	; (800b22c <prvSampleTimeNow+0x3c>)
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b220:	68fb      	ldr	r3, [r7, #12]
}
 800b222:	4618      	mov	r0, r3
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	200025c4 	.word	0x200025c4

0800b230 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b086      	sub	sp, #24
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	607a      	str	r2, [r7, #4]
 800b23c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b23e:	2300      	movs	r3, #0
 800b240:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	68ba      	ldr	r2, [r7, #8]
 800b246:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	68fa      	ldr	r2, [r7, #12]
 800b24c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b24e:	68ba      	ldr	r2, [r7, #8]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	429a      	cmp	r2, r3
 800b254:	d812      	bhi.n	800b27c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	1ad2      	subs	r2, r2, r3
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	699b      	ldr	r3, [r3, #24]
 800b260:	429a      	cmp	r2, r3
 800b262:	d302      	bcc.n	800b26a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b264:	2301      	movs	r3, #1
 800b266:	617b      	str	r3, [r7, #20]
 800b268:	e01b      	b.n	800b2a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b26a:	4b10      	ldr	r3, [pc, #64]	; (800b2ac <prvInsertTimerInActiveList+0x7c>)
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	3304      	adds	r3, #4
 800b272:	4619      	mov	r1, r3
 800b274:	4610      	mov	r0, r2
 800b276:	f7fe f8ec 	bl	8009452 <vListInsert>
 800b27a:	e012      	b.n	800b2a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	429a      	cmp	r2, r3
 800b282:	d206      	bcs.n	800b292 <prvInsertTimerInActiveList+0x62>
 800b284:	68ba      	ldr	r2, [r7, #8]
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d302      	bcc.n	800b292 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b28c:	2301      	movs	r3, #1
 800b28e:	617b      	str	r3, [r7, #20]
 800b290:	e007      	b.n	800b2a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b292:	4b07      	ldr	r3, [pc, #28]	; (800b2b0 <prvInsertTimerInActiveList+0x80>)
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	3304      	adds	r3, #4
 800b29a:	4619      	mov	r1, r3
 800b29c:	4610      	mov	r0, r2
 800b29e:	f7fe f8d8 	bl	8009452 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b2a2:	697b      	ldr	r3, [r7, #20]
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3718      	adds	r7, #24
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}
 800b2ac:	200025b8 	.word	0x200025b8
 800b2b0:	200025b4 	.word	0x200025b4

0800b2b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b08e      	sub	sp, #56	; 0x38
 800b2b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b2ba:	e0ca      	b.n	800b452 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	da18      	bge.n	800b2f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b2c2:	1d3b      	adds	r3, r7, #4
 800b2c4:	3304      	adds	r3, #4
 800b2c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d10a      	bne.n	800b2e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	61fb      	str	r3, [r7, #28]
}
 800b2e0:	bf00      	nop
 800b2e2:	e7fe      	b.n	800b2e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2ea:	6850      	ldr	r0, [r2, #4]
 800b2ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2ee:	6892      	ldr	r2, [r2, #8]
 800b2f0:	4611      	mov	r1, r2
 800b2f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	f2c0 80aa 	blt.w	800b450 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b302:	695b      	ldr	r3, [r3, #20]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d004      	beq.n	800b312 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30a:	3304      	adds	r3, #4
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7fe f8d9 	bl	80094c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b312:	463b      	mov	r3, r7
 800b314:	4618      	mov	r0, r3
 800b316:	f7ff ff6b 	bl	800b1f0 <prvSampleTimeNow>
 800b31a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2b09      	cmp	r3, #9
 800b320:	f200 8097 	bhi.w	800b452 <prvProcessReceivedCommands+0x19e>
 800b324:	a201      	add	r2, pc, #4	; (adr r2, 800b32c <prvProcessReceivedCommands+0x78>)
 800b326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b32a:	bf00      	nop
 800b32c:	0800b355 	.word	0x0800b355
 800b330:	0800b355 	.word	0x0800b355
 800b334:	0800b355 	.word	0x0800b355
 800b338:	0800b3c9 	.word	0x0800b3c9
 800b33c:	0800b3dd 	.word	0x0800b3dd
 800b340:	0800b427 	.word	0x0800b427
 800b344:	0800b355 	.word	0x0800b355
 800b348:	0800b355 	.word	0x0800b355
 800b34c:	0800b3c9 	.word	0x0800b3c9
 800b350:	0800b3dd 	.word	0x0800b3dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b35a:	f043 0301 	orr.w	r3, r3, #1
 800b35e:	b2da      	uxtb	r2, r3
 800b360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b366:	68ba      	ldr	r2, [r7, #8]
 800b368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36a:	699b      	ldr	r3, [r3, #24]
 800b36c:	18d1      	adds	r1, r2, r3
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b374:	f7ff ff5c 	bl	800b230 <prvInsertTimerInActiveList>
 800b378:	4603      	mov	r3, r0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d069      	beq.n	800b452 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b380:	6a1b      	ldr	r3, [r3, #32]
 800b382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b384:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b388:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b38c:	f003 0304 	and.w	r3, r3, #4
 800b390:	2b00      	cmp	r3, #0
 800b392:	d05e      	beq.n	800b452 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b394:	68ba      	ldr	r2, [r7, #8]
 800b396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b398:	699b      	ldr	r3, [r3, #24]
 800b39a:	441a      	add	r2, r3
 800b39c:	2300      	movs	r3, #0
 800b39e:	9300      	str	r3, [sp, #0]
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	2100      	movs	r1, #0
 800b3a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3a6:	f7ff fe05 	bl	800afb4 <xTimerGenericCommand>
 800b3aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b3ac:	6a3b      	ldr	r3, [r7, #32]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d14f      	bne.n	800b452 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b6:	f383 8811 	msr	BASEPRI, r3
 800b3ba:	f3bf 8f6f 	isb	sy
 800b3be:	f3bf 8f4f 	dsb	sy
 800b3c2:	61bb      	str	r3, [r7, #24]
}
 800b3c4:	bf00      	nop
 800b3c6:	e7fe      	b.n	800b3c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3ce:	f023 0301 	bic.w	r3, r3, #1
 800b3d2:	b2da      	uxtb	r2, r3
 800b3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b3da:	e03a      	b.n	800b452 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3e2:	f043 0301 	orr.w	r3, r3, #1
 800b3e6:	b2da      	uxtb	r2, r3
 800b3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b3ee:	68ba      	ldr	r2, [r7, #8]
 800b3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f6:	699b      	ldr	r3, [r3, #24]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d10a      	bne.n	800b412 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b400:	f383 8811 	msr	BASEPRI, r3
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	617b      	str	r3, [r7, #20]
}
 800b40e:	bf00      	nop
 800b410:	e7fe      	b.n	800b410 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b414:	699a      	ldr	r2, [r3, #24]
 800b416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b418:	18d1      	adds	r1, r2, r3
 800b41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b41e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b420:	f7ff ff06 	bl	800b230 <prvInsertTimerInActiveList>
					break;
 800b424:	e015      	b.n	800b452 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b42c:	f003 0302 	and.w	r3, r3, #2
 800b430:	2b00      	cmp	r3, #0
 800b432:	d103      	bne.n	800b43c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b436:	f000 fbdb 	bl	800bbf0 <vPortFree>
 800b43a:	e00a      	b.n	800b452 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b442:	f023 0301 	bic.w	r3, r3, #1
 800b446:	b2da      	uxtb	r2, r3
 800b448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b44a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b44e:	e000      	b.n	800b452 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b450:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b452:	4b08      	ldr	r3, [pc, #32]	; (800b474 <prvProcessReceivedCommands+0x1c0>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	1d39      	adds	r1, r7, #4
 800b458:	2200      	movs	r2, #0
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7fe fb9e 	bl	8009b9c <xQueueReceive>
 800b460:	4603      	mov	r3, r0
 800b462:	2b00      	cmp	r3, #0
 800b464:	f47f af2a 	bne.w	800b2bc <prvProcessReceivedCommands+0x8>
	}
}
 800b468:	bf00      	nop
 800b46a:	bf00      	nop
 800b46c:	3730      	adds	r7, #48	; 0x30
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	200025bc 	.word	0x200025bc

0800b478 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b088      	sub	sp, #32
 800b47c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b47e:	e048      	b.n	800b512 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b480:	4b2d      	ldr	r3, [pc, #180]	; (800b538 <prvSwitchTimerLists+0xc0>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b48a:	4b2b      	ldr	r3, [pc, #172]	; (800b538 <prvSwitchTimerLists+0xc0>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	3304      	adds	r3, #4
 800b498:	4618      	mov	r0, r3
 800b49a:	f7fe f813 	bl	80094c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	6a1b      	ldr	r3, [r3, #32]
 800b4a2:	68f8      	ldr	r0, [r7, #12]
 800b4a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4ac:	f003 0304 	and.w	r3, r3, #4
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d02e      	beq.n	800b512 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	699b      	ldr	r3, [r3, #24]
 800b4b8:	693a      	ldr	r2, [r7, #16]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b4be:	68ba      	ldr	r2, [r7, #8]
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d90e      	bls.n	800b4e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	68ba      	ldr	r2, [r7, #8]
 800b4ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	68fa      	ldr	r2, [r7, #12]
 800b4d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b4d2:	4b19      	ldr	r3, [pc, #100]	; (800b538 <prvSwitchTimerLists+0xc0>)
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	3304      	adds	r3, #4
 800b4da:	4619      	mov	r1, r3
 800b4dc:	4610      	mov	r0, r2
 800b4de:	f7fd ffb8 	bl	8009452 <vListInsert>
 800b4e2:	e016      	b.n	800b512 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	9300      	str	r3, [sp, #0]
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	693a      	ldr	r2, [r7, #16]
 800b4ec:	2100      	movs	r1, #0
 800b4ee:	68f8      	ldr	r0, [r7, #12]
 800b4f0:	f7ff fd60 	bl	800afb4 <xTimerGenericCommand>
 800b4f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d10a      	bne.n	800b512 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b500:	f383 8811 	msr	BASEPRI, r3
 800b504:	f3bf 8f6f 	isb	sy
 800b508:	f3bf 8f4f 	dsb	sy
 800b50c:	603b      	str	r3, [r7, #0]
}
 800b50e:	bf00      	nop
 800b510:	e7fe      	b.n	800b510 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b512:	4b09      	ldr	r3, [pc, #36]	; (800b538 <prvSwitchTimerLists+0xc0>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d1b1      	bne.n	800b480 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b51c:	4b06      	ldr	r3, [pc, #24]	; (800b538 <prvSwitchTimerLists+0xc0>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b522:	4b06      	ldr	r3, [pc, #24]	; (800b53c <prvSwitchTimerLists+0xc4>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4a04      	ldr	r2, [pc, #16]	; (800b538 <prvSwitchTimerLists+0xc0>)
 800b528:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b52a:	4a04      	ldr	r2, [pc, #16]	; (800b53c <prvSwitchTimerLists+0xc4>)
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	6013      	str	r3, [r2, #0]
}
 800b530:	bf00      	nop
 800b532:	3718      	adds	r7, #24
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	200025b4 	.word	0x200025b4
 800b53c:	200025b8 	.word	0x200025b8

0800b540 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b082      	sub	sp, #8
 800b544:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b546:	f000 f965 	bl	800b814 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b54a:	4b15      	ldr	r3, [pc, #84]	; (800b5a0 <prvCheckForValidListAndQueue+0x60>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d120      	bne.n	800b594 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b552:	4814      	ldr	r0, [pc, #80]	; (800b5a4 <prvCheckForValidListAndQueue+0x64>)
 800b554:	f7fd ff2c 	bl	80093b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b558:	4813      	ldr	r0, [pc, #76]	; (800b5a8 <prvCheckForValidListAndQueue+0x68>)
 800b55a:	f7fd ff29 	bl	80093b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b55e:	4b13      	ldr	r3, [pc, #76]	; (800b5ac <prvCheckForValidListAndQueue+0x6c>)
 800b560:	4a10      	ldr	r2, [pc, #64]	; (800b5a4 <prvCheckForValidListAndQueue+0x64>)
 800b562:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b564:	4b12      	ldr	r3, [pc, #72]	; (800b5b0 <prvCheckForValidListAndQueue+0x70>)
 800b566:	4a10      	ldr	r2, [pc, #64]	; (800b5a8 <prvCheckForValidListAndQueue+0x68>)
 800b568:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b56a:	2300      	movs	r3, #0
 800b56c:	9300      	str	r3, [sp, #0]
 800b56e:	4b11      	ldr	r3, [pc, #68]	; (800b5b4 <prvCheckForValidListAndQueue+0x74>)
 800b570:	4a11      	ldr	r2, [pc, #68]	; (800b5b8 <prvCheckForValidListAndQueue+0x78>)
 800b572:	2110      	movs	r1, #16
 800b574:	200a      	movs	r0, #10
 800b576:	f7fe f837 	bl	80095e8 <xQueueGenericCreateStatic>
 800b57a:	4603      	mov	r3, r0
 800b57c:	4a08      	ldr	r2, [pc, #32]	; (800b5a0 <prvCheckForValidListAndQueue+0x60>)
 800b57e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b580:	4b07      	ldr	r3, [pc, #28]	; (800b5a0 <prvCheckForValidListAndQueue+0x60>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d005      	beq.n	800b594 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b588:	4b05      	ldr	r3, [pc, #20]	; (800b5a0 <prvCheckForValidListAndQueue+0x60>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	490b      	ldr	r1, [pc, #44]	; (800b5bc <prvCheckForValidListAndQueue+0x7c>)
 800b58e:	4618      	mov	r0, r3
 800b590:	f7fe fd18 	bl	8009fc4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b594:	f000 f96e 	bl	800b874 <vPortExitCritical>
}
 800b598:	bf00      	nop
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	200025bc 	.word	0x200025bc
 800b5a4:	2000258c 	.word	0x2000258c
 800b5a8:	200025a0 	.word	0x200025a0
 800b5ac:	200025b4 	.word	0x200025b4
 800b5b0:	200025b8 	.word	0x200025b8
 800b5b4:	20002668 	.word	0x20002668
 800b5b8:	200025c8 	.word	0x200025c8
 800b5bc:	0800de98 	.word	0x0800de98

0800b5c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b085      	sub	sp, #20
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	3b04      	subs	r3, #4
 800b5d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b5d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	3b04      	subs	r3, #4
 800b5de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	f023 0201 	bic.w	r2, r3, #1
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	3b04      	subs	r3, #4
 800b5ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b5f0:	4a0c      	ldr	r2, [pc, #48]	; (800b624 <pxPortInitialiseStack+0x64>)
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	3b14      	subs	r3, #20
 800b5fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	3b04      	subs	r3, #4
 800b606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f06f 0202 	mvn.w	r2, #2
 800b60e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	3b20      	subs	r3, #32
 800b614:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b616:	68fb      	ldr	r3, [r7, #12]
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3714      	adds	r7, #20
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr
 800b624:	0800b629 	.word	0x0800b629

0800b628 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b628:	b480      	push	{r7}
 800b62a:	b085      	sub	sp, #20
 800b62c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b62e:	2300      	movs	r3, #0
 800b630:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b632:	4b12      	ldr	r3, [pc, #72]	; (800b67c <prvTaskExitError+0x54>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b63a:	d00a      	beq.n	800b652 <prvTaskExitError+0x2a>
	__asm volatile
 800b63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b640:	f383 8811 	msr	BASEPRI, r3
 800b644:	f3bf 8f6f 	isb	sy
 800b648:	f3bf 8f4f 	dsb	sy
 800b64c:	60fb      	str	r3, [r7, #12]
}
 800b64e:	bf00      	nop
 800b650:	e7fe      	b.n	800b650 <prvTaskExitError+0x28>
	__asm volatile
 800b652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b656:	f383 8811 	msr	BASEPRI, r3
 800b65a:	f3bf 8f6f 	isb	sy
 800b65e:	f3bf 8f4f 	dsb	sy
 800b662:	60bb      	str	r3, [r7, #8]
}
 800b664:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b666:	bf00      	nop
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d0fc      	beq.n	800b668 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b66e:	bf00      	nop
 800b670:	bf00      	nop
 800b672:	3714      	adds	r7, #20
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr
 800b67c:	2000000c 	.word	0x2000000c

0800b680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b680:	4b07      	ldr	r3, [pc, #28]	; (800b6a0 <pxCurrentTCBConst2>)
 800b682:	6819      	ldr	r1, [r3, #0]
 800b684:	6808      	ldr	r0, [r1, #0]
 800b686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b68a:	f380 8809 	msr	PSP, r0
 800b68e:	f3bf 8f6f 	isb	sy
 800b692:	f04f 0000 	mov.w	r0, #0
 800b696:	f380 8811 	msr	BASEPRI, r0
 800b69a:	4770      	bx	lr
 800b69c:	f3af 8000 	nop.w

0800b6a0 <pxCurrentTCBConst2>:
 800b6a0:	2000208c 	.word	0x2000208c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b6a4:	bf00      	nop
 800b6a6:	bf00      	nop

0800b6a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b6a8:	4808      	ldr	r0, [pc, #32]	; (800b6cc <prvPortStartFirstTask+0x24>)
 800b6aa:	6800      	ldr	r0, [r0, #0]
 800b6ac:	6800      	ldr	r0, [r0, #0]
 800b6ae:	f380 8808 	msr	MSP, r0
 800b6b2:	f04f 0000 	mov.w	r0, #0
 800b6b6:	f380 8814 	msr	CONTROL, r0
 800b6ba:	b662      	cpsie	i
 800b6bc:	b661      	cpsie	f
 800b6be:	f3bf 8f4f 	dsb	sy
 800b6c2:	f3bf 8f6f 	isb	sy
 800b6c6:	df00      	svc	0
 800b6c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b6ca:	bf00      	nop
 800b6cc:	e000ed08 	.word	0xe000ed08

0800b6d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b086      	sub	sp, #24
 800b6d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b6d6:	4b46      	ldr	r3, [pc, #280]	; (800b7f0 <xPortStartScheduler+0x120>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a46      	ldr	r2, [pc, #280]	; (800b7f4 <xPortStartScheduler+0x124>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d10a      	bne.n	800b6f6 <xPortStartScheduler+0x26>
	__asm volatile
 800b6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e4:	f383 8811 	msr	BASEPRI, r3
 800b6e8:	f3bf 8f6f 	isb	sy
 800b6ec:	f3bf 8f4f 	dsb	sy
 800b6f0:	613b      	str	r3, [r7, #16]
}
 800b6f2:	bf00      	nop
 800b6f4:	e7fe      	b.n	800b6f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b6f6:	4b3e      	ldr	r3, [pc, #248]	; (800b7f0 <xPortStartScheduler+0x120>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a3f      	ldr	r2, [pc, #252]	; (800b7f8 <xPortStartScheduler+0x128>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d10a      	bne.n	800b716 <xPortStartScheduler+0x46>
	__asm volatile
 800b700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b704:	f383 8811 	msr	BASEPRI, r3
 800b708:	f3bf 8f6f 	isb	sy
 800b70c:	f3bf 8f4f 	dsb	sy
 800b710:	60fb      	str	r3, [r7, #12]
}
 800b712:	bf00      	nop
 800b714:	e7fe      	b.n	800b714 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b716:	4b39      	ldr	r3, [pc, #228]	; (800b7fc <xPortStartScheduler+0x12c>)
 800b718:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	b2db      	uxtb	r3, r3
 800b720:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	22ff      	movs	r2, #255	; 0xff
 800b726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b730:	78fb      	ldrb	r3, [r7, #3]
 800b732:	b2db      	uxtb	r3, r3
 800b734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b738:	b2da      	uxtb	r2, r3
 800b73a:	4b31      	ldr	r3, [pc, #196]	; (800b800 <xPortStartScheduler+0x130>)
 800b73c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b73e:	4b31      	ldr	r3, [pc, #196]	; (800b804 <xPortStartScheduler+0x134>)
 800b740:	2207      	movs	r2, #7
 800b742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b744:	e009      	b.n	800b75a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b746:	4b2f      	ldr	r3, [pc, #188]	; (800b804 <xPortStartScheduler+0x134>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	3b01      	subs	r3, #1
 800b74c:	4a2d      	ldr	r2, [pc, #180]	; (800b804 <xPortStartScheduler+0x134>)
 800b74e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b750:	78fb      	ldrb	r3, [r7, #3]
 800b752:	b2db      	uxtb	r3, r3
 800b754:	005b      	lsls	r3, r3, #1
 800b756:	b2db      	uxtb	r3, r3
 800b758:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b75a:	78fb      	ldrb	r3, [r7, #3]
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b762:	2b80      	cmp	r3, #128	; 0x80
 800b764:	d0ef      	beq.n	800b746 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b766:	4b27      	ldr	r3, [pc, #156]	; (800b804 <xPortStartScheduler+0x134>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f1c3 0307 	rsb	r3, r3, #7
 800b76e:	2b04      	cmp	r3, #4
 800b770:	d00a      	beq.n	800b788 <xPortStartScheduler+0xb8>
	__asm volatile
 800b772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b776:	f383 8811 	msr	BASEPRI, r3
 800b77a:	f3bf 8f6f 	isb	sy
 800b77e:	f3bf 8f4f 	dsb	sy
 800b782:	60bb      	str	r3, [r7, #8]
}
 800b784:	bf00      	nop
 800b786:	e7fe      	b.n	800b786 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b788:	4b1e      	ldr	r3, [pc, #120]	; (800b804 <xPortStartScheduler+0x134>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	021b      	lsls	r3, r3, #8
 800b78e:	4a1d      	ldr	r2, [pc, #116]	; (800b804 <xPortStartScheduler+0x134>)
 800b790:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b792:	4b1c      	ldr	r3, [pc, #112]	; (800b804 <xPortStartScheduler+0x134>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b79a:	4a1a      	ldr	r2, [pc, #104]	; (800b804 <xPortStartScheduler+0x134>)
 800b79c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	b2da      	uxtb	r2, r3
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b7a6:	4b18      	ldr	r3, [pc, #96]	; (800b808 <xPortStartScheduler+0x138>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a17      	ldr	r2, [pc, #92]	; (800b808 <xPortStartScheduler+0x138>)
 800b7ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b7b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b7b2:	4b15      	ldr	r3, [pc, #84]	; (800b808 <xPortStartScheduler+0x138>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4a14      	ldr	r2, [pc, #80]	; (800b808 <xPortStartScheduler+0x138>)
 800b7b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b7bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b7be:	f000 f8dd 	bl	800b97c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b7c2:	4b12      	ldr	r3, [pc, #72]	; (800b80c <xPortStartScheduler+0x13c>)
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b7c8:	f000 f8fc 	bl	800b9c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b7cc:	4b10      	ldr	r3, [pc, #64]	; (800b810 <xPortStartScheduler+0x140>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a0f      	ldr	r2, [pc, #60]	; (800b810 <xPortStartScheduler+0x140>)
 800b7d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b7d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b7d8:	f7ff ff66 	bl	800b6a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b7dc:	f7ff f84c 	bl	800a878 <vTaskSwitchContext>
	prvTaskExitError();
 800b7e0:	f7ff ff22 	bl	800b628 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3718      	adds	r7, #24
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	e000ed00 	.word	0xe000ed00
 800b7f4:	410fc271 	.word	0x410fc271
 800b7f8:	410fc270 	.word	0x410fc270
 800b7fc:	e000e400 	.word	0xe000e400
 800b800:	200026b8 	.word	0x200026b8
 800b804:	200026bc 	.word	0x200026bc
 800b808:	e000ed20 	.word	0xe000ed20
 800b80c:	2000000c 	.word	0x2000000c
 800b810:	e000ef34 	.word	0xe000ef34

0800b814 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b814:	b480      	push	{r7}
 800b816:	b083      	sub	sp, #12
 800b818:	af00      	add	r7, sp, #0
	__asm volatile
 800b81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81e:	f383 8811 	msr	BASEPRI, r3
 800b822:	f3bf 8f6f 	isb	sy
 800b826:	f3bf 8f4f 	dsb	sy
 800b82a:	607b      	str	r3, [r7, #4]
}
 800b82c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b82e:	4b0f      	ldr	r3, [pc, #60]	; (800b86c <vPortEnterCritical+0x58>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	3301      	adds	r3, #1
 800b834:	4a0d      	ldr	r2, [pc, #52]	; (800b86c <vPortEnterCritical+0x58>)
 800b836:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b838:	4b0c      	ldr	r3, [pc, #48]	; (800b86c <vPortEnterCritical+0x58>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d10f      	bne.n	800b860 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b840:	4b0b      	ldr	r3, [pc, #44]	; (800b870 <vPortEnterCritical+0x5c>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	b2db      	uxtb	r3, r3
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00a      	beq.n	800b860 <vPortEnterCritical+0x4c>
	__asm volatile
 800b84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84e:	f383 8811 	msr	BASEPRI, r3
 800b852:	f3bf 8f6f 	isb	sy
 800b856:	f3bf 8f4f 	dsb	sy
 800b85a:	603b      	str	r3, [r7, #0]
}
 800b85c:	bf00      	nop
 800b85e:	e7fe      	b.n	800b85e <vPortEnterCritical+0x4a>
	}
}
 800b860:	bf00      	nop
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr
 800b86c:	2000000c 	.word	0x2000000c
 800b870:	e000ed04 	.word	0xe000ed04

0800b874 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b874:	b480      	push	{r7}
 800b876:	b083      	sub	sp, #12
 800b878:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b87a:	4b12      	ldr	r3, [pc, #72]	; (800b8c4 <vPortExitCritical+0x50>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d10a      	bne.n	800b898 <vPortExitCritical+0x24>
	__asm volatile
 800b882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b886:	f383 8811 	msr	BASEPRI, r3
 800b88a:	f3bf 8f6f 	isb	sy
 800b88e:	f3bf 8f4f 	dsb	sy
 800b892:	607b      	str	r3, [r7, #4]
}
 800b894:	bf00      	nop
 800b896:	e7fe      	b.n	800b896 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b898:	4b0a      	ldr	r3, [pc, #40]	; (800b8c4 <vPortExitCritical+0x50>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	3b01      	subs	r3, #1
 800b89e:	4a09      	ldr	r2, [pc, #36]	; (800b8c4 <vPortExitCritical+0x50>)
 800b8a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b8a2:	4b08      	ldr	r3, [pc, #32]	; (800b8c4 <vPortExitCritical+0x50>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d105      	bne.n	800b8b6 <vPortExitCritical+0x42>
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	f383 8811 	msr	BASEPRI, r3
}
 800b8b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b8b6:	bf00      	nop
 800b8b8:	370c      	adds	r7, #12
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	2000000c 	.word	0x2000000c
	...

0800b8d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b8d0:	f3ef 8009 	mrs	r0, PSP
 800b8d4:	f3bf 8f6f 	isb	sy
 800b8d8:	4b15      	ldr	r3, [pc, #84]	; (800b930 <pxCurrentTCBConst>)
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	f01e 0f10 	tst.w	lr, #16
 800b8e0:	bf08      	it	eq
 800b8e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b8e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ea:	6010      	str	r0, [r2, #0]
 800b8ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b8f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b8f4:	f380 8811 	msr	BASEPRI, r0
 800b8f8:	f3bf 8f4f 	dsb	sy
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f7fe ffba 	bl	800a878 <vTaskSwitchContext>
 800b904:	f04f 0000 	mov.w	r0, #0
 800b908:	f380 8811 	msr	BASEPRI, r0
 800b90c:	bc09      	pop	{r0, r3}
 800b90e:	6819      	ldr	r1, [r3, #0]
 800b910:	6808      	ldr	r0, [r1, #0]
 800b912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b916:	f01e 0f10 	tst.w	lr, #16
 800b91a:	bf08      	it	eq
 800b91c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b920:	f380 8809 	msr	PSP, r0
 800b924:	f3bf 8f6f 	isb	sy
 800b928:	4770      	bx	lr
 800b92a:	bf00      	nop
 800b92c:	f3af 8000 	nop.w

0800b930 <pxCurrentTCBConst>:
 800b930:	2000208c 	.word	0x2000208c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b934:	bf00      	nop
 800b936:	bf00      	nop

0800b938 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
	__asm volatile
 800b93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b942:	f383 8811 	msr	BASEPRI, r3
 800b946:	f3bf 8f6f 	isb	sy
 800b94a:	f3bf 8f4f 	dsb	sy
 800b94e:	607b      	str	r3, [r7, #4]
}
 800b950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b952:	f7fe fed7 	bl	800a704 <xTaskIncrementTick>
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d003      	beq.n	800b964 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b95c:	4b06      	ldr	r3, [pc, #24]	; (800b978 <xPortSysTickHandler+0x40>)
 800b95e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b962:	601a      	str	r2, [r3, #0]
 800b964:	2300      	movs	r3, #0
 800b966:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	f383 8811 	msr	BASEPRI, r3
}
 800b96e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b970:	bf00      	nop
 800b972:	3708      	adds	r7, #8
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}
 800b978:	e000ed04 	.word	0xe000ed04

0800b97c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b97c:	b480      	push	{r7}
 800b97e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b980:	4b0b      	ldr	r3, [pc, #44]	; (800b9b0 <vPortSetupTimerInterrupt+0x34>)
 800b982:	2200      	movs	r2, #0
 800b984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b986:	4b0b      	ldr	r3, [pc, #44]	; (800b9b4 <vPortSetupTimerInterrupt+0x38>)
 800b988:	2200      	movs	r2, #0
 800b98a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b98c:	4b0a      	ldr	r3, [pc, #40]	; (800b9b8 <vPortSetupTimerInterrupt+0x3c>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4a0a      	ldr	r2, [pc, #40]	; (800b9bc <vPortSetupTimerInterrupt+0x40>)
 800b992:	fba2 2303 	umull	r2, r3, r2, r3
 800b996:	099b      	lsrs	r3, r3, #6
 800b998:	4a09      	ldr	r2, [pc, #36]	; (800b9c0 <vPortSetupTimerInterrupt+0x44>)
 800b99a:	3b01      	subs	r3, #1
 800b99c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b99e:	4b04      	ldr	r3, [pc, #16]	; (800b9b0 <vPortSetupTimerInterrupt+0x34>)
 800b9a0:	2207      	movs	r2, #7
 800b9a2:	601a      	str	r2, [r3, #0]
}
 800b9a4:	bf00      	nop
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop
 800b9b0:	e000e010 	.word	0xe000e010
 800b9b4:	e000e018 	.word	0xe000e018
 800b9b8:	20000000 	.word	0x20000000
 800b9bc:	10624dd3 	.word	0x10624dd3
 800b9c0:	e000e014 	.word	0xe000e014

0800b9c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b9c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b9d4 <vPortEnableVFP+0x10>
 800b9c8:	6801      	ldr	r1, [r0, #0]
 800b9ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b9ce:	6001      	str	r1, [r0, #0]
 800b9d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b9d2:	bf00      	nop
 800b9d4:	e000ed88 	.word	0xe000ed88

0800b9d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b9d8:	b480      	push	{r7}
 800b9da:	b085      	sub	sp, #20
 800b9dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b9de:	f3ef 8305 	mrs	r3, IPSR
 800b9e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2b0f      	cmp	r3, #15
 800b9e8:	d914      	bls.n	800ba14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b9ea:	4a17      	ldr	r2, [pc, #92]	; (800ba48 <vPortValidateInterruptPriority+0x70>)
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	4413      	add	r3, r2
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b9f4:	4b15      	ldr	r3, [pc, #84]	; (800ba4c <vPortValidateInterruptPriority+0x74>)
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	7afa      	ldrb	r2, [r7, #11]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d20a      	bcs.n	800ba14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba02:	f383 8811 	msr	BASEPRI, r3
 800ba06:	f3bf 8f6f 	isb	sy
 800ba0a:	f3bf 8f4f 	dsb	sy
 800ba0e:	607b      	str	r3, [r7, #4]
}
 800ba10:	bf00      	nop
 800ba12:	e7fe      	b.n	800ba12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ba14:	4b0e      	ldr	r3, [pc, #56]	; (800ba50 <vPortValidateInterruptPriority+0x78>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ba1c:	4b0d      	ldr	r3, [pc, #52]	; (800ba54 <vPortValidateInterruptPriority+0x7c>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d90a      	bls.n	800ba3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ba24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba28:	f383 8811 	msr	BASEPRI, r3
 800ba2c:	f3bf 8f6f 	isb	sy
 800ba30:	f3bf 8f4f 	dsb	sy
 800ba34:	603b      	str	r3, [r7, #0]
}
 800ba36:	bf00      	nop
 800ba38:	e7fe      	b.n	800ba38 <vPortValidateInterruptPriority+0x60>
	}
 800ba3a:	bf00      	nop
 800ba3c:	3714      	adds	r7, #20
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba44:	4770      	bx	lr
 800ba46:	bf00      	nop
 800ba48:	e000e3f0 	.word	0xe000e3f0
 800ba4c:	200026b8 	.word	0x200026b8
 800ba50:	e000ed0c 	.word	0xe000ed0c
 800ba54:	200026bc 	.word	0x200026bc

0800ba58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b08a      	sub	sp, #40	; 0x28
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ba60:	2300      	movs	r3, #0
 800ba62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ba64:	f7fe fd92 	bl	800a58c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ba68:	4b5b      	ldr	r3, [pc, #364]	; (800bbd8 <pvPortMalloc+0x180>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d101      	bne.n	800ba74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ba70:	f000 f920 	bl	800bcb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ba74:	4b59      	ldr	r3, [pc, #356]	; (800bbdc <pvPortMalloc+0x184>)
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	4013      	ands	r3, r2
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	f040 8093 	bne.w	800bba8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d01d      	beq.n	800bac4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ba88:	2208      	movs	r2, #8
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f003 0307 	and.w	r3, r3, #7
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d014      	beq.n	800bac4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f023 0307 	bic.w	r3, r3, #7
 800baa0:	3308      	adds	r3, #8
 800baa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f003 0307 	and.w	r3, r3, #7
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d00a      	beq.n	800bac4 <pvPortMalloc+0x6c>
	__asm volatile
 800baae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab2:	f383 8811 	msr	BASEPRI, r3
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	617b      	str	r3, [r7, #20]
}
 800bac0:	bf00      	nop
 800bac2:	e7fe      	b.n	800bac2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d06e      	beq.n	800bba8 <pvPortMalloc+0x150>
 800baca:	4b45      	ldr	r3, [pc, #276]	; (800bbe0 <pvPortMalloc+0x188>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	687a      	ldr	r2, [r7, #4]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d869      	bhi.n	800bba8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bad4:	4b43      	ldr	r3, [pc, #268]	; (800bbe4 <pvPortMalloc+0x18c>)
 800bad6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bad8:	4b42      	ldr	r3, [pc, #264]	; (800bbe4 <pvPortMalloc+0x18c>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bade:	e004      	b.n	800baea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800baea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baec:	685b      	ldr	r3, [r3, #4]
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d903      	bls.n	800bafc <pvPortMalloc+0xa4>
 800baf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d1f1      	bne.n	800bae0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bafc:	4b36      	ldr	r3, [pc, #216]	; (800bbd8 <pvPortMalloc+0x180>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d050      	beq.n	800bba8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bb06:	6a3b      	ldr	r3, [r7, #32]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	2208      	movs	r2, #8
 800bb0c:	4413      	add	r3, r2
 800bb0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb12:	681a      	ldr	r2, [r3, #0]
 800bb14:	6a3b      	ldr	r3, [r7, #32]
 800bb16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1a:	685a      	ldr	r2, [r3, #4]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	1ad2      	subs	r2, r2, r3
 800bb20:	2308      	movs	r3, #8
 800bb22:	005b      	lsls	r3, r3, #1
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d91f      	bls.n	800bb68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bb28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb30:	69bb      	ldr	r3, [r7, #24]
 800bb32:	f003 0307 	and.w	r3, r3, #7
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d00a      	beq.n	800bb50 <pvPortMalloc+0xf8>
	__asm volatile
 800bb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3e:	f383 8811 	msr	BASEPRI, r3
 800bb42:	f3bf 8f6f 	isb	sy
 800bb46:	f3bf 8f4f 	dsb	sy
 800bb4a:	613b      	str	r3, [r7, #16]
}
 800bb4c:	bf00      	nop
 800bb4e:	e7fe      	b.n	800bb4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb52:	685a      	ldr	r2, [r3, #4]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	1ad2      	subs	r2, r2, r3
 800bb58:	69bb      	ldr	r3, [r7, #24]
 800bb5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bb62:	69b8      	ldr	r0, [r7, #24]
 800bb64:	f000 f908 	bl	800bd78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bb68:	4b1d      	ldr	r3, [pc, #116]	; (800bbe0 <pvPortMalloc+0x188>)
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	1ad3      	subs	r3, r2, r3
 800bb72:	4a1b      	ldr	r2, [pc, #108]	; (800bbe0 <pvPortMalloc+0x188>)
 800bb74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bb76:	4b1a      	ldr	r3, [pc, #104]	; (800bbe0 <pvPortMalloc+0x188>)
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	4b1b      	ldr	r3, [pc, #108]	; (800bbe8 <pvPortMalloc+0x190>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d203      	bcs.n	800bb8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bb82:	4b17      	ldr	r3, [pc, #92]	; (800bbe0 <pvPortMalloc+0x188>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4a18      	ldr	r2, [pc, #96]	; (800bbe8 <pvPortMalloc+0x190>)
 800bb88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8c:	685a      	ldr	r2, [r3, #4]
 800bb8e:	4b13      	ldr	r3, [pc, #76]	; (800bbdc <pvPortMalloc+0x184>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	431a      	orrs	r2, r3
 800bb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bb9e:	4b13      	ldr	r3, [pc, #76]	; (800bbec <pvPortMalloc+0x194>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	3301      	adds	r3, #1
 800bba4:	4a11      	ldr	r2, [pc, #68]	; (800bbec <pvPortMalloc+0x194>)
 800bba6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bba8:	f7fe fcfe 	bl	800a5a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	f003 0307 	and.w	r3, r3, #7
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00a      	beq.n	800bbcc <pvPortMalloc+0x174>
	__asm volatile
 800bbb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbba:	f383 8811 	msr	BASEPRI, r3
 800bbbe:	f3bf 8f6f 	isb	sy
 800bbc2:	f3bf 8f4f 	dsb	sy
 800bbc6:	60fb      	str	r3, [r7, #12]
}
 800bbc8:	bf00      	nop
 800bbca:	e7fe      	b.n	800bbca <pvPortMalloc+0x172>
	return pvReturn;
 800bbcc:	69fb      	ldr	r3, [r7, #28]
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3728      	adds	r7, #40	; 0x28
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	20003280 	.word	0x20003280
 800bbdc:	20003294 	.word	0x20003294
 800bbe0:	20003284 	.word	0x20003284
 800bbe4:	20003278 	.word	0x20003278
 800bbe8:	20003288 	.word	0x20003288
 800bbec:	2000328c 	.word	0x2000328c

0800bbf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b086      	sub	sp, #24
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d04d      	beq.n	800bc9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bc02:	2308      	movs	r3, #8
 800bc04:	425b      	negs	r3, r3
 800bc06:	697a      	ldr	r2, [r7, #20]
 800bc08:	4413      	add	r3, r2
 800bc0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	685a      	ldr	r2, [r3, #4]
 800bc14:	4b24      	ldr	r3, [pc, #144]	; (800bca8 <vPortFree+0xb8>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4013      	ands	r3, r2
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d10a      	bne.n	800bc34 <vPortFree+0x44>
	__asm volatile
 800bc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc22:	f383 8811 	msr	BASEPRI, r3
 800bc26:	f3bf 8f6f 	isb	sy
 800bc2a:	f3bf 8f4f 	dsb	sy
 800bc2e:	60fb      	str	r3, [r7, #12]
}
 800bc30:	bf00      	nop
 800bc32:	e7fe      	b.n	800bc32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d00a      	beq.n	800bc52 <vPortFree+0x62>
	__asm volatile
 800bc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc40:	f383 8811 	msr	BASEPRI, r3
 800bc44:	f3bf 8f6f 	isb	sy
 800bc48:	f3bf 8f4f 	dsb	sy
 800bc4c:	60bb      	str	r3, [r7, #8]
}
 800bc4e:	bf00      	nop
 800bc50:	e7fe      	b.n	800bc50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	685a      	ldr	r2, [r3, #4]
 800bc56:	4b14      	ldr	r3, [pc, #80]	; (800bca8 <vPortFree+0xb8>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	4013      	ands	r3, r2
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d01e      	beq.n	800bc9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d11a      	bne.n	800bc9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	685a      	ldr	r2, [r3, #4]
 800bc6c:	4b0e      	ldr	r3, [pc, #56]	; (800bca8 <vPortFree+0xb8>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	43db      	mvns	r3, r3
 800bc72:	401a      	ands	r2, r3
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bc78:	f7fe fc88 	bl	800a58c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	685a      	ldr	r2, [r3, #4]
 800bc80:	4b0a      	ldr	r3, [pc, #40]	; (800bcac <vPortFree+0xbc>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4413      	add	r3, r2
 800bc86:	4a09      	ldr	r2, [pc, #36]	; (800bcac <vPortFree+0xbc>)
 800bc88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bc8a:	6938      	ldr	r0, [r7, #16]
 800bc8c:	f000 f874 	bl	800bd78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bc90:	4b07      	ldr	r3, [pc, #28]	; (800bcb0 <vPortFree+0xc0>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	3301      	adds	r3, #1
 800bc96:	4a06      	ldr	r2, [pc, #24]	; (800bcb0 <vPortFree+0xc0>)
 800bc98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bc9a:	f7fe fc85 	bl	800a5a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bc9e:	bf00      	nop
 800bca0:	3718      	adds	r7, #24
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	20003294 	.word	0x20003294
 800bcac:	20003284 	.word	0x20003284
 800bcb0:	20003290 	.word	0x20003290

0800bcb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bcba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800bcbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bcc0:	4b27      	ldr	r3, [pc, #156]	; (800bd60 <prvHeapInit+0xac>)
 800bcc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f003 0307 	and.w	r3, r3, #7
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d00c      	beq.n	800bce8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	3307      	adds	r3, #7
 800bcd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f023 0307 	bic.w	r3, r3, #7
 800bcda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bcdc:	68ba      	ldr	r2, [r7, #8]
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	1ad3      	subs	r3, r2, r3
 800bce2:	4a1f      	ldr	r2, [pc, #124]	; (800bd60 <prvHeapInit+0xac>)
 800bce4:	4413      	add	r3, r2
 800bce6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bcec:	4a1d      	ldr	r2, [pc, #116]	; (800bd64 <prvHeapInit+0xb0>)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bcf2:	4b1c      	ldr	r3, [pc, #112]	; (800bd64 <prvHeapInit+0xb0>)
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	68ba      	ldr	r2, [r7, #8]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bd00:	2208      	movs	r2, #8
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	1a9b      	subs	r3, r3, r2
 800bd06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f023 0307 	bic.w	r3, r3, #7
 800bd0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	4a15      	ldr	r2, [pc, #84]	; (800bd68 <prvHeapInit+0xb4>)
 800bd14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bd16:	4b14      	ldr	r3, [pc, #80]	; (800bd68 <prvHeapInit+0xb4>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bd1e:	4b12      	ldr	r3, [pc, #72]	; (800bd68 <prvHeapInit+0xb4>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	2200      	movs	r2, #0
 800bd24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	68fa      	ldr	r2, [r7, #12]
 800bd2e:	1ad2      	subs	r2, r2, r3
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bd34:	4b0c      	ldr	r3, [pc, #48]	; (800bd68 <prvHeapInit+0xb4>)
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	4a0a      	ldr	r2, [pc, #40]	; (800bd6c <prvHeapInit+0xb8>)
 800bd42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	4a09      	ldr	r2, [pc, #36]	; (800bd70 <prvHeapInit+0xbc>)
 800bd4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bd4c:	4b09      	ldr	r3, [pc, #36]	; (800bd74 <prvHeapInit+0xc0>)
 800bd4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bd52:	601a      	str	r2, [r3, #0]
}
 800bd54:	bf00      	nop
 800bd56:	3714      	adds	r7, #20
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr
 800bd60:	200026c0 	.word	0x200026c0
 800bd64:	20003278 	.word	0x20003278
 800bd68:	20003280 	.word	0x20003280
 800bd6c:	20003288 	.word	0x20003288
 800bd70:	20003284 	.word	0x20003284
 800bd74:	20003294 	.word	0x20003294

0800bd78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b085      	sub	sp, #20
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bd80:	4b28      	ldr	r3, [pc, #160]	; (800be24 <prvInsertBlockIntoFreeList+0xac>)
 800bd82:	60fb      	str	r3, [r7, #12]
 800bd84:	e002      	b.n	800bd8c <prvInsertBlockIntoFreeList+0x14>
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	60fb      	str	r3, [r7, #12]
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d8f7      	bhi.n	800bd86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	68ba      	ldr	r2, [r7, #8]
 800bda0:	4413      	add	r3, r2
 800bda2:	687a      	ldr	r2, [r7, #4]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d108      	bne.n	800bdba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	685a      	ldr	r2, [r3, #4]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	441a      	add	r2, r3
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	68ba      	ldr	r2, [r7, #8]
 800bdc4:	441a      	add	r2, r3
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d118      	bne.n	800be00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681a      	ldr	r2, [r3, #0]
 800bdd2:	4b15      	ldr	r3, [pc, #84]	; (800be28 <prvInsertBlockIntoFreeList+0xb0>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d00d      	beq.n	800bdf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	685a      	ldr	r2, [r3, #4]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	441a      	add	r2, r3
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	601a      	str	r2, [r3, #0]
 800bdf4:	e008      	b.n	800be08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bdf6:	4b0c      	ldr	r3, [pc, #48]	; (800be28 <prvInsertBlockIntoFreeList+0xb0>)
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	601a      	str	r2, [r3, #0]
 800bdfe:	e003      	b.n	800be08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681a      	ldr	r2, [r3, #0]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800be08:	68fa      	ldr	r2, [r7, #12]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d002      	beq.n	800be16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	687a      	ldr	r2, [r7, #4]
 800be14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be16:	bf00      	nop
 800be18:	3714      	adds	r7, #20
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	20003278 	.word	0x20003278
 800be28:	20003280 	.word	0x20003280

0800be2c <__errno>:
 800be2c:	4b01      	ldr	r3, [pc, #4]	; (800be34 <__errno+0x8>)
 800be2e:	6818      	ldr	r0, [r3, #0]
 800be30:	4770      	bx	lr
 800be32:	bf00      	nop
 800be34:	20000010 	.word	0x20000010

0800be38 <std>:
 800be38:	2300      	movs	r3, #0
 800be3a:	b510      	push	{r4, lr}
 800be3c:	4604      	mov	r4, r0
 800be3e:	e9c0 3300 	strd	r3, r3, [r0]
 800be42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be46:	6083      	str	r3, [r0, #8]
 800be48:	8181      	strh	r1, [r0, #12]
 800be4a:	6643      	str	r3, [r0, #100]	; 0x64
 800be4c:	81c2      	strh	r2, [r0, #14]
 800be4e:	6183      	str	r3, [r0, #24]
 800be50:	4619      	mov	r1, r3
 800be52:	2208      	movs	r2, #8
 800be54:	305c      	adds	r0, #92	; 0x5c
 800be56:	f000 f933 	bl	800c0c0 <memset>
 800be5a:	4b05      	ldr	r3, [pc, #20]	; (800be70 <std+0x38>)
 800be5c:	6263      	str	r3, [r4, #36]	; 0x24
 800be5e:	4b05      	ldr	r3, [pc, #20]	; (800be74 <std+0x3c>)
 800be60:	62a3      	str	r3, [r4, #40]	; 0x28
 800be62:	4b05      	ldr	r3, [pc, #20]	; (800be78 <std+0x40>)
 800be64:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be66:	4b05      	ldr	r3, [pc, #20]	; (800be7c <std+0x44>)
 800be68:	6224      	str	r4, [r4, #32]
 800be6a:	6323      	str	r3, [r4, #48]	; 0x30
 800be6c:	bd10      	pop	{r4, pc}
 800be6e:	bf00      	nop
 800be70:	0800c4e1 	.word	0x0800c4e1
 800be74:	0800c503 	.word	0x0800c503
 800be78:	0800c53b 	.word	0x0800c53b
 800be7c:	0800c55f 	.word	0x0800c55f

0800be80 <_cleanup_r>:
 800be80:	4901      	ldr	r1, [pc, #4]	; (800be88 <_cleanup_r+0x8>)
 800be82:	f000 b8af 	b.w	800bfe4 <_fwalk_reent>
 800be86:	bf00      	nop
 800be88:	0800c9c5 	.word	0x0800c9c5

0800be8c <__sfmoreglue>:
 800be8c:	b570      	push	{r4, r5, r6, lr}
 800be8e:	2268      	movs	r2, #104	; 0x68
 800be90:	1e4d      	subs	r5, r1, #1
 800be92:	4355      	muls	r5, r2
 800be94:	460e      	mov	r6, r1
 800be96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800be9a:	f000 f985 	bl	800c1a8 <_malloc_r>
 800be9e:	4604      	mov	r4, r0
 800bea0:	b140      	cbz	r0, 800beb4 <__sfmoreglue+0x28>
 800bea2:	2100      	movs	r1, #0
 800bea4:	e9c0 1600 	strd	r1, r6, [r0]
 800bea8:	300c      	adds	r0, #12
 800beaa:	60a0      	str	r0, [r4, #8]
 800beac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800beb0:	f000 f906 	bl	800c0c0 <memset>
 800beb4:	4620      	mov	r0, r4
 800beb6:	bd70      	pop	{r4, r5, r6, pc}

0800beb8 <__sfp_lock_acquire>:
 800beb8:	4801      	ldr	r0, [pc, #4]	; (800bec0 <__sfp_lock_acquire+0x8>)
 800beba:	f000 b8d8 	b.w	800c06e <__retarget_lock_acquire_recursive>
 800bebe:	bf00      	nop
 800bec0:	20003299 	.word	0x20003299

0800bec4 <__sfp_lock_release>:
 800bec4:	4801      	ldr	r0, [pc, #4]	; (800becc <__sfp_lock_release+0x8>)
 800bec6:	f000 b8d3 	b.w	800c070 <__retarget_lock_release_recursive>
 800beca:	bf00      	nop
 800becc:	20003299 	.word	0x20003299

0800bed0 <__sinit_lock_acquire>:
 800bed0:	4801      	ldr	r0, [pc, #4]	; (800bed8 <__sinit_lock_acquire+0x8>)
 800bed2:	f000 b8cc 	b.w	800c06e <__retarget_lock_acquire_recursive>
 800bed6:	bf00      	nop
 800bed8:	2000329a 	.word	0x2000329a

0800bedc <__sinit_lock_release>:
 800bedc:	4801      	ldr	r0, [pc, #4]	; (800bee4 <__sinit_lock_release+0x8>)
 800bede:	f000 b8c7 	b.w	800c070 <__retarget_lock_release_recursive>
 800bee2:	bf00      	nop
 800bee4:	2000329a 	.word	0x2000329a

0800bee8 <__sinit>:
 800bee8:	b510      	push	{r4, lr}
 800beea:	4604      	mov	r4, r0
 800beec:	f7ff fff0 	bl	800bed0 <__sinit_lock_acquire>
 800bef0:	69a3      	ldr	r3, [r4, #24]
 800bef2:	b11b      	cbz	r3, 800befc <__sinit+0x14>
 800bef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bef8:	f7ff bff0 	b.w	800bedc <__sinit_lock_release>
 800befc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bf00:	6523      	str	r3, [r4, #80]	; 0x50
 800bf02:	4b13      	ldr	r3, [pc, #76]	; (800bf50 <__sinit+0x68>)
 800bf04:	4a13      	ldr	r2, [pc, #76]	; (800bf54 <__sinit+0x6c>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	62a2      	str	r2, [r4, #40]	; 0x28
 800bf0a:	42a3      	cmp	r3, r4
 800bf0c:	bf04      	itt	eq
 800bf0e:	2301      	moveq	r3, #1
 800bf10:	61a3      	streq	r3, [r4, #24]
 800bf12:	4620      	mov	r0, r4
 800bf14:	f000 f820 	bl	800bf58 <__sfp>
 800bf18:	6060      	str	r0, [r4, #4]
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	f000 f81c 	bl	800bf58 <__sfp>
 800bf20:	60a0      	str	r0, [r4, #8]
 800bf22:	4620      	mov	r0, r4
 800bf24:	f000 f818 	bl	800bf58 <__sfp>
 800bf28:	2200      	movs	r2, #0
 800bf2a:	60e0      	str	r0, [r4, #12]
 800bf2c:	2104      	movs	r1, #4
 800bf2e:	6860      	ldr	r0, [r4, #4]
 800bf30:	f7ff ff82 	bl	800be38 <std>
 800bf34:	68a0      	ldr	r0, [r4, #8]
 800bf36:	2201      	movs	r2, #1
 800bf38:	2109      	movs	r1, #9
 800bf3a:	f7ff ff7d 	bl	800be38 <std>
 800bf3e:	68e0      	ldr	r0, [r4, #12]
 800bf40:	2202      	movs	r2, #2
 800bf42:	2112      	movs	r1, #18
 800bf44:	f7ff ff78 	bl	800be38 <std>
 800bf48:	2301      	movs	r3, #1
 800bf4a:	61a3      	str	r3, [r4, #24]
 800bf4c:	e7d2      	b.n	800bef4 <__sinit+0xc>
 800bf4e:	bf00      	nop
 800bf50:	0800df94 	.word	0x0800df94
 800bf54:	0800be81 	.word	0x0800be81

0800bf58 <__sfp>:
 800bf58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf5a:	4607      	mov	r7, r0
 800bf5c:	f7ff ffac 	bl	800beb8 <__sfp_lock_acquire>
 800bf60:	4b1e      	ldr	r3, [pc, #120]	; (800bfdc <__sfp+0x84>)
 800bf62:	681e      	ldr	r6, [r3, #0]
 800bf64:	69b3      	ldr	r3, [r6, #24]
 800bf66:	b913      	cbnz	r3, 800bf6e <__sfp+0x16>
 800bf68:	4630      	mov	r0, r6
 800bf6a:	f7ff ffbd 	bl	800bee8 <__sinit>
 800bf6e:	3648      	adds	r6, #72	; 0x48
 800bf70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bf74:	3b01      	subs	r3, #1
 800bf76:	d503      	bpl.n	800bf80 <__sfp+0x28>
 800bf78:	6833      	ldr	r3, [r6, #0]
 800bf7a:	b30b      	cbz	r3, 800bfc0 <__sfp+0x68>
 800bf7c:	6836      	ldr	r6, [r6, #0]
 800bf7e:	e7f7      	b.n	800bf70 <__sfp+0x18>
 800bf80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf84:	b9d5      	cbnz	r5, 800bfbc <__sfp+0x64>
 800bf86:	4b16      	ldr	r3, [pc, #88]	; (800bfe0 <__sfp+0x88>)
 800bf88:	60e3      	str	r3, [r4, #12]
 800bf8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf8e:	6665      	str	r5, [r4, #100]	; 0x64
 800bf90:	f000 f86c 	bl	800c06c <__retarget_lock_init_recursive>
 800bf94:	f7ff ff96 	bl	800bec4 <__sfp_lock_release>
 800bf98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bf9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bfa0:	6025      	str	r5, [r4, #0]
 800bfa2:	61a5      	str	r5, [r4, #24]
 800bfa4:	2208      	movs	r2, #8
 800bfa6:	4629      	mov	r1, r5
 800bfa8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bfac:	f000 f888 	bl	800c0c0 <memset>
 800bfb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bfb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bfb8:	4620      	mov	r0, r4
 800bfba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfbc:	3468      	adds	r4, #104	; 0x68
 800bfbe:	e7d9      	b.n	800bf74 <__sfp+0x1c>
 800bfc0:	2104      	movs	r1, #4
 800bfc2:	4638      	mov	r0, r7
 800bfc4:	f7ff ff62 	bl	800be8c <__sfmoreglue>
 800bfc8:	4604      	mov	r4, r0
 800bfca:	6030      	str	r0, [r6, #0]
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	d1d5      	bne.n	800bf7c <__sfp+0x24>
 800bfd0:	f7ff ff78 	bl	800bec4 <__sfp_lock_release>
 800bfd4:	230c      	movs	r3, #12
 800bfd6:	603b      	str	r3, [r7, #0]
 800bfd8:	e7ee      	b.n	800bfb8 <__sfp+0x60>
 800bfda:	bf00      	nop
 800bfdc:	0800df94 	.word	0x0800df94
 800bfe0:	ffff0001 	.word	0xffff0001

0800bfe4 <_fwalk_reent>:
 800bfe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfe8:	4606      	mov	r6, r0
 800bfea:	4688      	mov	r8, r1
 800bfec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bff0:	2700      	movs	r7, #0
 800bff2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bff6:	f1b9 0901 	subs.w	r9, r9, #1
 800bffa:	d505      	bpl.n	800c008 <_fwalk_reent+0x24>
 800bffc:	6824      	ldr	r4, [r4, #0]
 800bffe:	2c00      	cmp	r4, #0
 800c000:	d1f7      	bne.n	800bff2 <_fwalk_reent+0xe>
 800c002:	4638      	mov	r0, r7
 800c004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c008:	89ab      	ldrh	r3, [r5, #12]
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d907      	bls.n	800c01e <_fwalk_reent+0x3a>
 800c00e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c012:	3301      	adds	r3, #1
 800c014:	d003      	beq.n	800c01e <_fwalk_reent+0x3a>
 800c016:	4629      	mov	r1, r5
 800c018:	4630      	mov	r0, r6
 800c01a:	47c0      	blx	r8
 800c01c:	4307      	orrs	r7, r0
 800c01e:	3568      	adds	r5, #104	; 0x68
 800c020:	e7e9      	b.n	800bff6 <_fwalk_reent+0x12>
	...

0800c024 <__libc_init_array>:
 800c024:	b570      	push	{r4, r5, r6, lr}
 800c026:	4d0d      	ldr	r5, [pc, #52]	; (800c05c <__libc_init_array+0x38>)
 800c028:	4c0d      	ldr	r4, [pc, #52]	; (800c060 <__libc_init_array+0x3c>)
 800c02a:	1b64      	subs	r4, r4, r5
 800c02c:	10a4      	asrs	r4, r4, #2
 800c02e:	2600      	movs	r6, #0
 800c030:	42a6      	cmp	r6, r4
 800c032:	d109      	bne.n	800c048 <__libc_init_array+0x24>
 800c034:	4d0b      	ldr	r5, [pc, #44]	; (800c064 <__libc_init_array+0x40>)
 800c036:	4c0c      	ldr	r4, [pc, #48]	; (800c068 <__libc_init_array+0x44>)
 800c038:	f001 fab2 	bl	800d5a0 <_init>
 800c03c:	1b64      	subs	r4, r4, r5
 800c03e:	10a4      	asrs	r4, r4, #2
 800c040:	2600      	movs	r6, #0
 800c042:	42a6      	cmp	r6, r4
 800c044:	d105      	bne.n	800c052 <__libc_init_array+0x2e>
 800c046:	bd70      	pop	{r4, r5, r6, pc}
 800c048:	f855 3b04 	ldr.w	r3, [r5], #4
 800c04c:	4798      	blx	r3
 800c04e:	3601      	adds	r6, #1
 800c050:	e7ee      	b.n	800c030 <__libc_init_array+0xc>
 800c052:	f855 3b04 	ldr.w	r3, [r5], #4
 800c056:	4798      	blx	r3
 800c058:	3601      	adds	r6, #1
 800c05a:	e7f2      	b.n	800c042 <__libc_init_array+0x1e>
 800c05c:	0800e084 	.word	0x0800e084
 800c060:	0800e084 	.word	0x0800e084
 800c064:	0800e084 	.word	0x0800e084
 800c068:	0800e088 	.word	0x0800e088

0800c06c <__retarget_lock_init_recursive>:
 800c06c:	4770      	bx	lr

0800c06e <__retarget_lock_acquire_recursive>:
 800c06e:	4770      	bx	lr

0800c070 <__retarget_lock_release_recursive>:
 800c070:	4770      	bx	lr
	...

0800c074 <malloc>:
 800c074:	4b02      	ldr	r3, [pc, #8]	; (800c080 <malloc+0xc>)
 800c076:	4601      	mov	r1, r0
 800c078:	6818      	ldr	r0, [r3, #0]
 800c07a:	f000 b895 	b.w	800c1a8 <_malloc_r>
 800c07e:	bf00      	nop
 800c080:	20000010 	.word	0x20000010

0800c084 <memcmp>:
 800c084:	b510      	push	{r4, lr}
 800c086:	3901      	subs	r1, #1
 800c088:	4402      	add	r2, r0
 800c08a:	4290      	cmp	r0, r2
 800c08c:	d101      	bne.n	800c092 <memcmp+0xe>
 800c08e:	2000      	movs	r0, #0
 800c090:	e005      	b.n	800c09e <memcmp+0x1a>
 800c092:	7803      	ldrb	r3, [r0, #0]
 800c094:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c098:	42a3      	cmp	r3, r4
 800c09a:	d001      	beq.n	800c0a0 <memcmp+0x1c>
 800c09c:	1b18      	subs	r0, r3, r4
 800c09e:	bd10      	pop	{r4, pc}
 800c0a0:	3001      	adds	r0, #1
 800c0a2:	e7f2      	b.n	800c08a <memcmp+0x6>

0800c0a4 <memcpy>:
 800c0a4:	440a      	add	r2, r1
 800c0a6:	4291      	cmp	r1, r2
 800c0a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0ac:	d100      	bne.n	800c0b0 <memcpy+0xc>
 800c0ae:	4770      	bx	lr
 800c0b0:	b510      	push	{r4, lr}
 800c0b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0ba:	4291      	cmp	r1, r2
 800c0bc:	d1f9      	bne.n	800c0b2 <memcpy+0xe>
 800c0be:	bd10      	pop	{r4, pc}

0800c0c0 <memset>:
 800c0c0:	4402      	add	r2, r0
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d100      	bne.n	800c0ca <memset+0xa>
 800c0c8:	4770      	bx	lr
 800c0ca:	f803 1b01 	strb.w	r1, [r3], #1
 800c0ce:	e7f9      	b.n	800c0c4 <memset+0x4>

0800c0d0 <_free_r>:
 800c0d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0d2:	2900      	cmp	r1, #0
 800c0d4:	d044      	beq.n	800c160 <_free_r+0x90>
 800c0d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0da:	9001      	str	r0, [sp, #4]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	f1a1 0404 	sub.w	r4, r1, #4
 800c0e2:	bfb8      	it	lt
 800c0e4:	18e4      	addlt	r4, r4, r3
 800c0e6:	f000 fd33 	bl	800cb50 <__malloc_lock>
 800c0ea:	4a1e      	ldr	r2, [pc, #120]	; (800c164 <_free_r+0x94>)
 800c0ec:	9801      	ldr	r0, [sp, #4]
 800c0ee:	6813      	ldr	r3, [r2, #0]
 800c0f0:	b933      	cbnz	r3, 800c100 <_free_r+0x30>
 800c0f2:	6063      	str	r3, [r4, #4]
 800c0f4:	6014      	str	r4, [r2, #0]
 800c0f6:	b003      	add	sp, #12
 800c0f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0fc:	f000 bd2e 	b.w	800cb5c <__malloc_unlock>
 800c100:	42a3      	cmp	r3, r4
 800c102:	d908      	bls.n	800c116 <_free_r+0x46>
 800c104:	6825      	ldr	r5, [r4, #0]
 800c106:	1961      	adds	r1, r4, r5
 800c108:	428b      	cmp	r3, r1
 800c10a:	bf01      	itttt	eq
 800c10c:	6819      	ldreq	r1, [r3, #0]
 800c10e:	685b      	ldreq	r3, [r3, #4]
 800c110:	1949      	addeq	r1, r1, r5
 800c112:	6021      	streq	r1, [r4, #0]
 800c114:	e7ed      	b.n	800c0f2 <_free_r+0x22>
 800c116:	461a      	mov	r2, r3
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	b10b      	cbz	r3, 800c120 <_free_r+0x50>
 800c11c:	42a3      	cmp	r3, r4
 800c11e:	d9fa      	bls.n	800c116 <_free_r+0x46>
 800c120:	6811      	ldr	r1, [r2, #0]
 800c122:	1855      	adds	r5, r2, r1
 800c124:	42a5      	cmp	r5, r4
 800c126:	d10b      	bne.n	800c140 <_free_r+0x70>
 800c128:	6824      	ldr	r4, [r4, #0]
 800c12a:	4421      	add	r1, r4
 800c12c:	1854      	adds	r4, r2, r1
 800c12e:	42a3      	cmp	r3, r4
 800c130:	6011      	str	r1, [r2, #0]
 800c132:	d1e0      	bne.n	800c0f6 <_free_r+0x26>
 800c134:	681c      	ldr	r4, [r3, #0]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	6053      	str	r3, [r2, #4]
 800c13a:	4421      	add	r1, r4
 800c13c:	6011      	str	r1, [r2, #0]
 800c13e:	e7da      	b.n	800c0f6 <_free_r+0x26>
 800c140:	d902      	bls.n	800c148 <_free_r+0x78>
 800c142:	230c      	movs	r3, #12
 800c144:	6003      	str	r3, [r0, #0]
 800c146:	e7d6      	b.n	800c0f6 <_free_r+0x26>
 800c148:	6825      	ldr	r5, [r4, #0]
 800c14a:	1961      	adds	r1, r4, r5
 800c14c:	428b      	cmp	r3, r1
 800c14e:	bf04      	itt	eq
 800c150:	6819      	ldreq	r1, [r3, #0]
 800c152:	685b      	ldreq	r3, [r3, #4]
 800c154:	6063      	str	r3, [r4, #4]
 800c156:	bf04      	itt	eq
 800c158:	1949      	addeq	r1, r1, r5
 800c15a:	6021      	streq	r1, [r4, #0]
 800c15c:	6054      	str	r4, [r2, #4]
 800c15e:	e7ca      	b.n	800c0f6 <_free_r+0x26>
 800c160:	b003      	add	sp, #12
 800c162:	bd30      	pop	{r4, r5, pc}
 800c164:	2000329c 	.word	0x2000329c

0800c168 <sbrk_aligned>:
 800c168:	b570      	push	{r4, r5, r6, lr}
 800c16a:	4e0e      	ldr	r6, [pc, #56]	; (800c1a4 <sbrk_aligned+0x3c>)
 800c16c:	460c      	mov	r4, r1
 800c16e:	6831      	ldr	r1, [r6, #0]
 800c170:	4605      	mov	r5, r0
 800c172:	b911      	cbnz	r1, 800c17a <sbrk_aligned+0x12>
 800c174:	f000 f984 	bl	800c480 <_sbrk_r>
 800c178:	6030      	str	r0, [r6, #0]
 800c17a:	4621      	mov	r1, r4
 800c17c:	4628      	mov	r0, r5
 800c17e:	f000 f97f 	bl	800c480 <_sbrk_r>
 800c182:	1c43      	adds	r3, r0, #1
 800c184:	d00a      	beq.n	800c19c <sbrk_aligned+0x34>
 800c186:	1cc4      	adds	r4, r0, #3
 800c188:	f024 0403 	bic.w	r4, r4, #3
 800c18c:	42a0      	cmp	r0, r4
 800c18e:	d007      	beq.n	800c1a0 <sbrk_aligned+0x38>
 800c190:	1a21      	subs	r1, r4, r0
 800c192:	4628      	mov	r0, r5
 800c194:	f000 f974 	bl	800c480 <_sbrk_r>
 800c198:	3001      	adds	r0, #1
 800c19a:	d101      	bne.n	800c1a0 <sbrk_aligned+0x38>
 800c19c:	f04f 34ff 	mov.w	r4, #4294967295
 800c1a0:	4620      	mov	r0, r4
 800c1a2:	bd70      	pop	{r4, r5, r6, pc}
 800c1a4:	200032a0 	.word	0x200032a0

0800c1a8 <_malloc_r>:
 800c1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ac:	1ccd      	adds	r5, r1, #3
 800c1ae:	f025 0503 	bic.w	r5, r5, #3
 800c1b2:	3508      	adds	r5, #8
 800c1b4:	2d0c      	cmp	r5, #12
 800c1b6:	bf38      	it	cc
 800c1b8:	250c      	movcc	r5, #12
 800c1ba:	2d00      	cmp	r5, #0
 800c1bc:	4607      	mov	r7, r0
 800c1be:	db01      	blt.n	800c1c4 <_malloc_r+0x1c>
 800c1c0:	42a9      	cmp	r1, r5
 800c1c2:	d905      	bls.n	800c1d0 <_malloc_r+0x28>
 800c1c4:	230c      	movs	r3, #12
 800c1c6:	603b      	str	r3, [r7, #0]
 800c1c8:	2600      	movs	r6, #0
 800c1ca:	4630      	mov	r0, r6
 800c1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1d0:	4e2e      	ldr	r6, [pc, #184]	; (800c28c <_malloc_r+0xe4>)
 800c1d2:	f000 fcbd 	bl	800cb50 <__malloc_lock>
 800c1d6:	6833      	ldr	r3, [r6, #0]
 800c1d8:	461c      	mov	r4, r3
 800c1da:	bb34      	cbnz	r4, 800c22a <_malloc_r+0x82>
 800c1dc:	4629      	mov	r1, r5
 800c1de:	4638      	mov	r0, r7
 800c1e0:	f7ff ffc2 	bl	800c168 <sbrk_aligned>
 800c1e4:	1c43      	adds	r3, r0, #1
 800c1e6:	4604      	mov	r4, r0
 800c1e8:	d14d      	bne.n	800c286 <_malloc_r+0xde>
 800c1ea:	6834      	ldr	r4, [r6, #0]
 800c1ec:	4626      	mov	r6, r4
 800c1ee:	2e00      	cmp	r6, #0
 800c1f0:	d140      	bne.n	800c274 <_malloc_r+0xcc>
 800c1f2:	6823      	ldr	r3, [r4, #0]
 800c1f4:	4631      	mov	r1, r6
 800c1f6:	4638      	mov	r0, r7
 800c1f8:	eb04 0803 	add.w	r8, r4, r3
 800c1fc:	f000 f940 	bl	800c480 <_sbrk_r>
 800c200:	4580      	cmp	r8, r0
 800c202:	d13a      	bne.n	800c27a <_malloc_r+0xd2>
 800c204:	6821      	ldr	r1, [r4, #0]
 800c206:	3503      	adds	r5, #3
 800c208:	1a6d      	subs	r5, r5, r1
 800c20a:	f025 0503 	bic.w	r5, r5, #3
 800c20e:	3508      	adds	r5, #8
 800c210:	2d0c      	cmp	r5, #12
 800c212:	bf38      	it	cc
 800c214:	250c      	movcc	r5, #12
 800c216:	4629      	mov	r1, r5
 800c218:	4638      	mov	r0, r7
 800c21a:	f7ff ffa5 	bl	800c168 <sbrk_aligned>
 800c21e:	3001      	adds	r0, #1
 800c220:	d02b      	beq.n	800c27a <_malloc_r+0xd2>
 800c222:	6823      	ldr	r3, [r4, #0]
 800c224:	442b      	add	r3, r5
 800c226:	6023      	str	r3, [r4, #0]
 800c228:	e00e      	b.n	800c248 <_malloc_r+0xa0>
 800c22a:	6822      	ldr	r2, [r4, #0]
 800c22c:	1b52      	subs	r2, r2, r5
 800c22e:	d41e      	bmi.n	800c26e <_malloc_r+0xc6>
 800c230:	2a0b      	cmp	r2, #11
 800c232:	d916      	bls.n	800c262 <_malloc_r+0xba>
 800c234:	1961      	adds	r1, r4, r5
 800c236:	42a3      	cmp	r3, r4
 800c238:	6025      	str	r5, [r4, #0]
 800c23a:	bf18      	it	ne
 800c23c:	6059      	strne	r1, [r3, #4]
 800c23e:	6863      	ldr	r3, [r4, #4]
 800c240:	bf08      	it	eq
 800c242:	6031      	streq	r1, [r6, #0]
 800c244:	5162      	str	r2, [r4, r5]
 800c246:	604b      	str	r3, [r1, #4]
 800c248:	4638      	mov	r0, r7
 800c24a:	f104 060b 	add.w	r6, r4, #11
 800c24e:	f000 fc85 	bl	800cb5c <__malloc_unlock>
 800c252:	f026 0607 	bic.w	r6, r6, #7
 800c256:	1d23      	adds	r3, r4, #4
 800c258:	1af2      	subs	r2, r6, r3
 800c25a:	d0b6      	beq.n	800c1ca <_malloc_r+0x22>
 800c25c:	1b9b      	subs	r3, r3, r6
 800c25e:	50a3      	str	r3, [r4, r2]
 800c260:	e7b3      	b.n	800c1ca <_malloc_r+0x22>
 800c262:	6862      	ldr	r2, [r4, #4]
 800c264:	42a3      	cmp	r3, r4
 800c266:	bf0c      	ite	eq
 800c268:	6032      	streq	r2, [r6, #0]
 800c26a:	605a      	strne	r2, [r3, #4]
 800c26c:	e7ec      	b.n	800c248 <_malloc_r+0xa0>
 800c26e:	4623      	mov	r3, r4
 800c270:	6864      	ldr	r4, [r4, #4]
 800c272:	e7b2      	b.n	800c1da <_malloc_r+0x32>
 800c274:	4634      	mov	r4, r6
 800c276:	6876      	ldr	r6, [r6, #4]
 800c278:	e7b9      	b.n	800c1ee <_malloc_r+0x46>
 800c27a:	230c      	movs	r3, #12
 800c27c:	603b      	str	r3, [r7, #0]
 800c27e:	4638      	mov	r0, r7
 800c280:	f000 fc6c 	bl	800cb5c <__malloc_unlock>
 800c284:	e7a1      	b.n	800c1ca <_malloc_r+0x22>
 800c286:	6025      	str	r5, [r4, #0]
 800c288:	e7de      	b.n	800c248 <_malloc_r+0xa0>
 800c28a:	bf00      	nop
 800c28c:	2000329c 	.word	0x2000329c

0800c290 <iprintf>:
 800c290:	b40f      	push	{r0, r1, r2, r3}
 800c292:	4b0a      	ldr	r3, [pc, #40]	; (800c2bc <iprintf+0x2c>)
 800c294:	b513      	push	{r0, r1, r4, lr}
 800c296:	681c      	ldr	r4, [r3, #0]
 800c298:	b124      	cbz	r4, 800c2a4 <iprintf+0x14>
 800c29a:	69a3      	ldr	r3, [r4, #24]
 800c29c:	b913      	cbnz	r3, 800c2a4 <iprintf+0x14>
 800c29e:	4620      	mov	r0, r4
 800c2a0:	f7ff fe22 	bl	800bee8 <__sinit>
 800c2a4:	ab05      	add	r3, sp, #20
 800c2a6:	9a04      	ldr	r2, [sp, #16]
 800c2a8:	68a1      	ldr	r1, [r4, #8]
 800c2aa:	9301      	str	r3, [sp, #4]
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	f000 fde1 	bl	800ce74 <_vfiprintf_r>
 800c2b2:	b002      	add	sp, #8
 800c2b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2b8:	b004      	add	sp, #16
 800c2ba:	4770      	bx	lr
 800c2bc:	20000010 	.word	0x20000010

0800c2c0 <_puts_r>:
 800c2c0:	b570      	push	{r4, r5, r6, lr}
 800c2c2:	460e      	mov	r6, r1
 800c2c4:	4605      	mov	r5, r0
 800c2c6:	b118      	cbz	r0, 800c2d0 <_puts_r+0x10>
 800c2c8:	6983      	ldr	r3, [r0, #24]
 800c2ca:	b90b      	cbnz	r3, 800c2d0 <_puts_r+0x10>
 800c2cc:	f7ff fe0c 	bl	800bee8 <__sinit>
 800c2d0:	69ab      	ldr	r3, [r5, #24]
 800c2d2:	68ac      	ldr	r4, [r5, #8]
 800c2d4:	b913      	cbnz	r3, 800c2dc <_puts_r+0x1c>
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	f7ff fe06 	bl	800bee8 <__sinit>
 800c2dc:	4b2c      	ldr	r3, [pc, #176]	; (800c390 <_puts_r+0xd0>)
 800c2de:	429c      	cmp	r4, r3
 800c2e0:	d120      	bne.n	800c324 <_puts_r+0x64>
 800c2e2:	686c      	ldr	r4, [r5, #4]
 800c2e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2e6:	07db      	lsls	r3, r3, #31
 800c2e8:	d405      	bmi.n	800c2f6 <_puts_r+0x36>
 800c2ea:	89a3      	ldrh	r3, [r4, #12]
 800c2ec:	0598      	lsls	r0, r3, #22
 800c2ee:	d402      	bmi.n	800c2f6 <_puts_r+0x36>
 800c2f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2f2:	f7ff febc 	bl	800c06e <__retarget_lock_acquire_recursive>
 800c2f6:	89a3      	ldrh	r3, [r4, #12]
 800c2f8:	0719      	lsls	r1, r3, #28
 800c2fa:	d51d      	bpl.n	800c338 <_puts_r+0x78>
 800c2fc:	6923      	ldr	r3, [r4, #16]
 800c2fe:	b1db      	cbz	r3, 800c338 <_puts_r+0x78>
 800c300:	3e01      	subs	r6, #1
 800c302:	68a3      	ldr	r3, [r4, #8]
 800c304:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c308:	3b01      	subs	r3, #1
 800c30a:	60a3      	str	r3, [r4, #8]
 800c30c:	bb39      	cbnz	r1, 800c35e <_puts_r+0x9e>
 800c30e:	2b00      	cmp	r3, #0
 800c310:	da38      	bge.n	800c384 <_puts_r+0xc4>
 800c312:	4622      	mov	r2, r4
 800c314:	210a      	movs	r1, #10
 800c316:	4628      	mov	r0, r5
 800c318:	f000 f9ce 	bl	800c6b8 <__swbuf_r>
 800c31c:	3001      	adds	r0, #1
 800c31e:	d011      	beq.n	800c344 <_puts_r+0x84>
 800c320:	250a      	movs	r5, #10
 800c322:	e011      	b.n	800c348 <_puts_r+0x88>
 800c324:	4b1b      	ldr	r3, [pc, #108]	; (800c394 <_puts_r+0xd4>)
 800c326:	429c      	cmp	r4, r3
 800c328:	d101      	bne.n	800c32e <_puts_r+0x6e>
 800c32a:	68ac      	ldr	r4, [r5, #8]
 800c32c:	e7da      	b.n	800c2e4 <_puts_r+0x24>
 800c32e:	4b1a      	ldr	r3, [pc, #104]	; (800c398 <_puts_r+0xd8>)
 800c330:	429c      	cmp	r4, r3
 800c332:	bf08      	it	eq
 800c334:	68ec      	ldreq	r4, [r5, #12]
 800c336:	e7d5      	b.n	800c2e4 <_puts_r+0x24>
 800c338:	4621      	mov	r1, r4
 800c33a:	4628      	mov	r0, r5
 800c33c:	f000 fa20 	bl	800c780 <__swsetup_r>
 800c340:	2800      	cmp	r0, #0
 800c342:	d0dd      	beq.n	800c300 <_puts_r+0x40>
 800c344:	f04f 35ff 	mov.w	r5, #4294967295
 800c348:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c34a:	07da      	lsls	r2, r3, #31
 800c34c:	d405      	bmi.n	800c35a <_puts_r+0x9a>
 800c34e:	89a3      	ldrh	r3, [r4, #12]
 800c350:	059b      	lsls	r3, r3, #22
 800c352:	d402      	bmi.n	800c35a <_puts_r+0x9a>
 800c354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c356:	f7ff fe8b 	bl	800c070 <__retarget_lock_release_recursive>
 800c35a:	4628      	mov	r0, r5
 800c35c:	bd70      	pop	{r4, r5, r6, pc}
 800c35e:	2b00      	cmp	r3, #0
 800c360:	da04      	bge.n	800c36c <_puts_r+0xac>
 800c362:	69a2      	ldr	r2, [r4, #24]
 800c364:	429a      	cmp	r2, r3
 800c366:	dc06      	bgt.n	800c376 <_puts_r+0xb6>
 800c368:	290a      	cmp	r1, #10
 800c36a:	d004      	beq.n	800c376 <_puts_r+0xb6>
 800c36c:	6823      	ldr	r3, [r4, #0]
 800c36e:	1c5a      	adds	r2, r3, #1
 800c370:	6022      	str	r2, [r4, #0]
 800c372:	7019      	strb	r1, [r3, #0]
 800c374:	e7c5      	b.n	800c302 <_puts_r+0x42>
 800c376:	4622      	mov	r2, r4
 800c378:	4628      	mov	r0, r5
 800c37a:	f000 f99d 	bl	800c6b8 <__swbuf_r>
 800c37e:	3001      	adds	r0, #1
 800c380:	d1bf      	bne.n	800c302 <_puts_r+0x42>
 800c382:	e7df      	b.n	800c344 <_puts_r+0x84>
 800c384:	6823      	ldr	r3, [r4, #0]
 800c386:	250a      	movs	r5, #10
 800c388:	1c5a      	adds	r2, r3, #1
 800c38a:	6022      	str	r2, [r4, #0]
 800c38c:	701d      	strb	r5, [r3, #0]
 800c38e:	e7db      	b.n	800c348 <_puts_r+0x88>
 800c390:	0800df54 	.word	0x0800df54
 800c394:	0800df74 	.word	0x0800df74
 800c398:	0800df34 	.word	0x0800df34

0800c39c <puts>:
 800c39c:	4b02      	ldr	r3, [pc, #8]	; (800c3a8 <puts+0xc>)
 800c39e:	4601      	mov	r1, r0
 800c3a0:	6818      	ldr	r0, [r3, #0]
 800c3a2:	f7ff bf8d 	b.w	800c2c0 <_puts_r>
 800c3a6:	bf00      	nop
 800c3a8:	20000010 	.word	0x20000010

0800c3ac <cleanup_glue>:
 800c3ac:	b538      	push	{r3, r4, r5, lr}
 800c3ae:	460c      	mov	r4, r1
 800c3b0:	6809      	ldr	r1, [r1, #0]
 800c3b2:	4605      	mov	r5, r0
 800c3b4:	b109      	cbz	r1, 800c3ba <cleanup_glue+0xe>
 800c3b6:	f7ff fff9 	bl	800c3ac <cleanup_glue>
 800c3ba:	4621      	mov	r1, r4
 800c3bc:	4628      	mov	r0, r5
 800c3be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3c2:	f7ff be85 	b.w	800c0d0 <_free_r>
	...

0800c3c8 <_reclaim_reent>:
 800c3c8:	4b2c      	ldr	r3, [pc, #176]	; (800c47c <_reclaim_reent+0xb4>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4283      	cmp	r3, r0
 800c3ce:	b570      	push	{r4, r5, r6, lr}
 800c3d0:	4604      	mov	r4, r0
 800c3d2:	d051      	beq.n	800c478 <_reclaim_reent+0xb0>
 800c3d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c3d6:	b143      	cbz	r3, 800c3ea <_reclaim_reent+0x22>
 800c3d8:	68db      	ldr	r3, [r3, #12]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d14a      	bne.n	800c474 <_reclaim_reent+0xac>
 800c3de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3e0:	6819      	ldr	r1, [r3, #0]
 800c3e2:	b111      	cbz	r1, 800c3ea <_reclaim_reent+0x22>
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	f7ff fe73 	bl	800c0d0 <_free_r>
 800c3ea:	6961      	ldr	r1, [r4, #20]
 800c3ec:	b111      	cbz	r1, 800c3f4 <_reclaim_reent+0x2c>
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	f7ff fe6e 	bl	800c0d0 <_free_r>
 800c3f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c3f6:	b111      	cbz	r1, 800c3fe <_reclaim_reent+0x36>
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	f7ff fe69 	bl	800c0d0 <_free_r>
 800c3fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c400:	b111      	cbz	r1, 800c408 <_reclaim_reent+0x40>
 800c402:	4620      	mov	r0, r4
 800c404:	f7ff fe64 	bl	800c0d0 <_free_r>
 800c408:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c40a:	b111      	cbz	r1, 800c412 <_reclaim_reent+0x4a>
 800c40c:	4620      	mov	r0, r4
 800c40e:	f7ff fe5f 	bl	800c0d0 <_free_r>
 800c412:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c414:	b111      	cbz	r1, 800c41c <_reclaim_reent+0x54>
 800c416:	4620      	mov	r0, r4
 800c418:	f7ff fe5a 	bl	800c0d0 <_free_r>
 800c41c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c41e:	b111      	cbz	r1, 800c426 <_reclaim_reent+0x5e>
 800c420:	4620      	mov	r0, r4
 800c422:	f7ff fe55 	bl	800c0d0 <_free_r>
 800c426:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c428:	b111      	cbz	r1, 800c430 <_reclaim_reent+0x68>
 800c42a:	4620      	mov	r0, r4
 800c42c:	f7ff fe50 	bl	800c0d0 <_free_r>
 800c430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c432:	b111      	cbz	r1, 800c43a <_reclaim_reent+0x72>
 800c434:	4620      	mov	r0, r4
 800c436:	f7ff fe4b 	bl	800c0d0 <_free_r>
 800c43a:	69a3      	ldr	r3, [r4, #24]
 800c43c:	b1e3      	cbz	r3, 800c478 <_reclaim_reent+0xb0>
 800c43e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c440:	4620      	mov	r0, r4
 800c442:	4798      	blx	r3
 800c444:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c446:	b1b9      	cbz	r1, 800c478 <_reclaim_reent+0xb0>
 800c448:	4620      	mov	r0, r4
 800c44a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c44e:	f7ff bfad 	b.w	800c3ac <cleanup_glue>
 800c452:	5949      	ldr	r1, [r1, r5]
 800c454:	b941      	cbnz	r1, 800c468 <_reclaim_reent+0xa0>
 800c456:	3504      	adds	r5, #4
 800c458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c45a:	2d80      	cmp	r5, #128	; 0x80
 800c45c:	68d9      	ldr	r1, [r3, #12]
 800c45e:	d1f8      	bne.n	800c452 <_reclaim_reent+0x8a>
 800c460:	4620      	mov	r0, r4
 800c462:	f7ff fe35 	bl	800c0d0 <_free_r>
 800c466:	e7ba      	b.n	800c3de <_reclaim_reent+0x16>
 800c468:	680e      	ldr	r6, [r1, #0]
 800c46a:	4620      	mov	r0, r4
 800c46c:	f7ff fe30 	bl	800c0d0 <_free_r>
 800c470:	4631      	mov	r1, r6
 800c472:	e7ef      	b.n	800c454 <_reclaim_reent+0x8c>
 800c474:	2500      	movs	r5, #0
 800c476:	e7ef      	b.n	800c458 <_reclaim_reent+0x90>
 800c478:	bd70      	pop	{r4, r5, r6, pc}
 800c47a:	bf00      	nop
 800c47c:	20000010 	.word	0x20000010

0800c480 <_sbrk_r>:
 800c480:	b538      	push	{r3, r4, r5, lr}
 800c482:	4d06      	ldr	r5, [pc, #24]	; (800c49c <_sbrk_r+0x1c>)
 800c484:	2300      	movs	r3, #0
 800c486:	4604      	mov	r4, r0
 800c488:	4608      	mov	r0, r1
 800c48a:	602b      	str	r3, [r5, #0]
 800c48c:	f7f5 f8d2 	bl	8001634 <_sbrk>
 800c490:	1c43      	adds	r3, r0, #1
 800c492:	d102      	bne.n	800c49a <_sbrk_r+0x1a>
 800c494:	682b      	ldr	r3, [r5, #0]
 800c496:	b103      	cbz	r3, 800c49a <_sbrk_r+0x1a>
 800c498:	6023      	str	r3, [r4, #0]
 800c49a:	bd38      	pop	{r3, r4, r5, pc}
 800c49c:	200032a4 	.word	0x200032a4

0800c4a0 <siprintf>:
 800c4a0:	b40e      	push	{r1, r2, r3}
 800c4a2:	b500      	push	{lr}
 800c4a4:	b09c      	sub	sp, #112	; 0x70
 800c4a6:	ab1d      	add	r3, sp, #116	; 0x74
 800c4a8:	9002      	str	r0, [sp, #8]
 800c4aa:	9006      	str	r0, [sp, #24]
 800c4ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c4b0:	4809      	ldr	r0, [pc, #36]	; (800c4d8 <siprintf+0x38>)
 800c4b2:	9107      	str	r1, [sp, #28]
 800c4b4:	9104      	str	r1, [sp, #16]
 800c4b6:	4909      	ldr	r1, [pc, #36]	; (800c4dc <siprintf+0x3c>)
 800c4b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4bc:	9105      	str	r1, [sp, #20]
 800c4be:	6800      	ldr	r0, [r0, #0]
 800c4c0:	9301      	str	r3, [sp, #4]
 800c4c2:	a902      	add	r1, sp, #8
 800c4c4:	f000 fbac 	bl	800cc20 <_svfiprintf_r>
 800c4c8:	9b02      	ldr	r3, [sp, #8]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	701a      	strb	r2, [r3, #0]
 800c4ce:	b01c      	add	sp, #112	; 0x70
 800c4d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4d4:	b003      	add	sp, #12
 800c4d6:	4770      	bx	lr
 800c4d8:	20000010 	.word	0x20000010
 800c4dc:	ffff0208 	.word	0xffff0208

0800c4e0 <__sread>:
 800c4e0:	b510      	push	{r4, lr}
 800c4e2:	460c      	mov	r4, r1
 800c4e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4e8:	f000 ff88 	bl	800d3fc <_read_r>
 800c4ec:	2800      	cmp	r0, #0
 800c4ee:	bfab      	itete	ge
 800c4f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c4f2:	89a3      	ldrhlt	r3, [r4, #12]
 800c4f4:	181b      	addge	r3, r3, r0
 800c4f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c4fa:	bfac      	ite	ge
 800c4fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800c4fe:	81a3      	strhlt	r3, [r4, #12]
 800c500:	bd10      	pop	{r4, pc}

0800c502 <__swrite>:
 800c502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c506:	461f      	mov	r7, r3
 800c508:	898b      	ldrh	r3, [r1, #12]
 800c50a:	05db      	lsls	r3, r3, #23
 800c50c:	4605      	mov	r5, r0
 800c50e:	460c      	mov	r4, r1
 800c510:	4616      	mov	r6, r2
 800c512:	d505      	bpl.n	800c520 <__swrite+0x1e>
 800c514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c518:	2302      	movs	r3, #2
 800c51a:	2200      	movs	r2, #0
 800c51c:	f000 faa0 	bl	800ca60 <_lseek_r>
 800c520:	89a3      	ldrh	r3, [r4, #12]
 800c522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c526:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c52a:	81a3      	strh	r3, [r4, #12]
 800c52c:	4632      	mov	r2, r6
 800c52e:	463b      	mov	r3, r7
 800c530:	4628      	mov	r0, r5
 800c532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c536:	f000 b911 	b.w	800c75c <_write_r>

0800c53a <__sseek>:
 800c53a:	b510      	push	{r4, lr}
 800c53c:	460c      	mov	r4, r1
 800c53e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c542:	f000 fa8d 	bl	800ca60 <_lseek_r>
 800c546:	1c43      	adds	r3, r0, #1
 800c548:	89a3      	ldrh	r3, [r4, #12]
 800c54a:	bf15      	itete	ne
 800c54c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c54e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c552:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c556:	81a3      	strheq	r3, [r4, #12]
 800c558:	bf18      	it	ne
 800c55a:	81a3      	strhne	r3, [r4, #12]
 800c55c:	bd10      	pop	{r4, pc}

0800c55e <__sclose>:
 800c55e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c562:	f000 b999 	b.w	800c898 <_close_r>

0800c566 <strcat>:
 800c566:	b510      	push	{r4, lr}
 800c568:	4602      	mov	r2, r0
 800c56a:	7814      	ldrb	r4, [r2, #0]
 800c56c:	4613      	mov	r3, r2
 800c56e:	3201      	adds	r2, #1
 800c570:	2c00      	cmp	r4, #0
 800c572:	d1fa      	bne.n	800c56a <strcat+0x4>
 800c574:	3b01      	subs	r3, #1
 800c576:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c57a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c57e:	2a00      	cmp	r2, #0
 800c580:	d1f9      	bne.n	800c576 <strcat+0x10>
 800c582:	bd10      	pop	{r4, pc}

0800c584 <strncmp>:
 800c584:	b510      	push	{r4, lr}
 800c586:	b17a      	cbz	r2, 800c5a8 <strncmp+0x24>
 800c588:	4603      	mov	r3, r0
 800c58a:	3901      	subs	r1, #1
 800c58c:	1884      	adds	r4, r0, r2
 800c58e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c592:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c596:	4290      	cmp	r0, r2
 800c598:	d101      	bne.n	800c59e <strncmp+0x1a>
 800c59a:	42a3      	cmp	r3, r4
 800c59c:	d101      	bne.n	800c5a2 <strncmp+0x1e>
 800c59e:	1a80      	subs	r0, r0, r2
 800c5a0:	bd10      	pop	{r4, pc}
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	d1f3      	bne.n	800c58e <strncmp+0xa>
 800c5a6:	e7fa      	b.n	800c59e <strncmp+0x1a>
 800c5a8:	4610      	mov	r0, r2
 800c5aa:	e7f9      	b.n	800c5a0 <strncmp+0x1c>

0800c5ac <strncpy>:
 800c5ac:	b510      	push	{r4, lr}
 800c5ae:	3901      	subs	r1, #1
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	b132      	cbz	r2, 800c5c2 <strncpy+0x16>
 800c5b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c5b8:	f803 4b01 	strb.w	r4, [r3], #1
 800c5bc:	3a01      	subs	r2, #1
 800c5be:	2c00      	cmp	r4, #0
 800c5c0:	d1f7      	bne.n	800c5b2 <strncpy+0x6>
 800c5c2:	441a      	add	r2, r3
 800c5c4:	2100      	movs	r1, #0
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d100      	bne.n	800c5cc <strncpy+0x20>
 800c5ca:	bd10      	pop	{r4, pc}
 800c5cc:	f803 1b01 	strb.w	r1, [r3], #1
 800c5d0:	e7f9      	b.n	800c5c6 <strncpy+0x1a>

0800c5d2 <strstr>:
 800c5d2:	780a      	ldrb	r2, [r1, #0]
 800c5d4:	b570      	push	{r4, r5, r6, lr}
 800c5d6:	b96a      	cbnz	r2, 800c5f4 <strstr+0x22>
 800c5d8:	bd70      	pop	{r4, r5, r6, pc}
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d109      	bne.n	800c5f2 <strstr+0x20>
 800c5de:	460c      	mov	r4, r1
 800c5e0:	4605      	mov	r5, r0
 800c5e2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d0f6      	beq.n	800c5d8 <strstr+0x6>
 800c5ea:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c5ee:	429e      	cmp	r6, r3
 800c5f0:	d0f7      	beq.n	800c5e2 <strstr+0x10>
 800c5f2:	3001      	adds	r0, #1
 800c5f4:	7803      	ldrb	r3, [r0, #0]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d1ef      	bne.n	800c5da <strstr+0x8>
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	e7ec      	b.n	800c5d8 <strstr+0x6>
	...

0800c600 <strtok>:
 800c600:	4b16      	ldr	r3, [pc, #88]	; (800c65c <strtok+0x5c>)
 800c602:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c604:	681e      	ldr	r6, [r3, #0]
 800c606:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800c608:	4605      	mov	r5, r0
 800c60a:	b9fc      	cbnz	r4, 800c64c <strtok+0x4c>
 800c60c:	2050      	movs	r0, #80	; 0x50
 800c60e:	9101      	str	r1, [sp, #4]
 800c610:	f7ff fd30 	bl	800c074 <malloc>
 800c614:	9901      	ldr	r1, [sp, #4]
 800c616:	65b0      	str	r0, [r6, #88]	; 0x58
 800c618:	4602      	mov	r2, r0
 800c61a:	b920      	cbnz	r0, 800c626 <strtok+0x26>
 800c61c:	4b10      	ldr	r3, [pc, #64]	; (800c660 <strtok+0x60>)
 800c61e:	4811      	ldr	r0, [pc, #68]	; (800c664 <strtok+0x64>)
 800c620:	2157      	movs	r1, #87	; 0x57
 800c622:	f000 f91b 	bl	800c85c <__assert_func>
 800c626:	e9c0 4400 	strd	r4, r4, [r0]
 800c62a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c62e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c632:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c636:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c63a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c63e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c642:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c646:	6184      	str	r4, [r0, #24]
 800c648:	7704      	strb	r4, [r0, #28]
 800c64a:	6244      	str	r4, [r0, #36]	; 0x24
 800c64c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800c64e:	2301      	movs	r3, #1
 800c650:	4628      	mov	r0, r5
 800c652:	b002      	add	sp, #8
 800c654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c658:	f000 b806 	b.w	800c668 <__strtok_r>
 800c65c:	20000010 	.word	0x20000010
 800c660:	0800df98 	.word	0x0800df98
 800c664:	0800dfaf 	.word	0x0800dfaf

0800c668 <__strtok_r>:
 800c668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c66a:	b908      	cbnz	r0, 800c670 <__strtok_r+0x8>
 800c66c:	6810      	ldr	r0, [r2, #0]
 800c66e:	b188      	cbz	r0, 800c694 <__strtok_r+0x2c>
 800c670:	4604      	mov	r4, r0
 800c672:	4620      	mov	r0, r4
 800c674:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c678:	460f      	mov	r7, r1
 800c67a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c67e:	b91e      	cbnz	r6, 800c688 <__strtok_r+0x20>
 800c680:	b965      	cbnz	r5, 800c69c <__strtok_r+0x34>
 800c682:	6015      	str	r5, [r2, #0]
 800c684:	4628      	mov	r0, r5
 800c686:	e005      	b.n	800c694 <__strtok_r+0x2c>
 800c688:	42b5      	cmp	r5, r6
 800c68a:	d1f6      	bne.n	800c67a <__strtok_r+0x12>
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d1f0      	bne.n	800c672 <__strtok_r+0xa>
 800c690:	6014      	str	r4, [r2, #0]
 800c692:	7003      	strb	r3, [r0, #0]
 800c694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c696:	461c      	mov	r4, r3
 800c698:	e00c      	b.n	800c6b4 <__strtok_r+0x4c>
 800c69a:	b915      	cbnz	r5, 800c6a2 <__strtok_r+0x3a>
 800c69c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c6a0:	460e      	mov	r6, r1
 800c6a2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c6a6:	42ab      	cmp	r3, r5
 800c6a8:	d1f7      	bne.n	800c69a <__strtok_r+0x32>
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d0f3      	beq.n	800c696 <__strtok_r+0x2e>
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c6b4:	6014      	str	r4, [r2, #0]
 800c6b6:	e7ed      	b.n	800c694 <__strtok_r+0x2c>

0800c6b8 <__swbuf_r>:
 800c6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ba:	460e      	mov	r6, r1
 800c6bc:	4614      	mov	r4, r2
 800c6be:	4605      	mov	r5, r0
 800c6c0:	b118      	cbz	r0, 800c6ca <__swbuf_r+0x12>
 800c6c2:	6983      	ldr	r3, [r0, #24]
 800c6c4:	b90b      	cbnz	r3, 800c6ca <__swbuf_r+0x12>
 800c6c6:	f7ff fc0f 	bl	800bee8 <__sinit>
 800c6ca:	4b21      	ldr	r3, [pc, #132]	; (800c750 <__swbuf_r+0x98>)
 800c6cc:	429c      	cmp	r4, r3
 800c6ce:	d12b      	bne.n	800c728 <__swbuf_r+0x70>
 800c6d0:	686c      	ldr	r4, [r5, #4]
 800c6d2:	69a3      	ldr	r3, [r4, #24]
 800c6d4:	60a3      	str	r3, [r4, #8]
 800c6d6:	89a3      	ldrh	r3, [r4, #12]
 800c6d8:	071a      	lsls	r2, r3, #28
 800c6da:	d52f      	bpl.n	800c73c <__swbuf_r+0x84>
 800c6dc:	6923      	ldr	r3, [r4, #16]
 800c6de:	b36b      	cbz	r3, 800c73c <__swbuf_r+0x84>
 800c6e0:	6923      	ldr	r3, [r4, #16]
 800c6e2:	6820      	ldr	r0, [r4, #0]
 800c6e4:	1ac0      	subs	r0, r0, r3
 800c6e6:	6963      	ldr	r3, [r4, #20]
 800c6e8:	b2f6      	uxtb	r6, r6
 800c6ea:	4283      	cmp	r3, r0
 800c6ec:	4637      	mov	r7, r6
 800c6ee:	dc04      	bgt.n	800c6fa <__swbuf_r+0x42>
 800c6f0:	4621      	mov	r1, r4
 800c6f2:	4628      	mov	r0, r5
 800c6f4:	f000 f966 	bl	800c9c4 <_fflush_r>
 800c6f8:	bb30      	cbnz	r0, 800c748 <__swbuf_r+0x90>
 800c6fa:	68a3      	ldr	r3, [r4, #8]
 800c6fc:	3b01      	subs	r3, #1
 800c6fe:	60a3      	str	r3, [r4, #8]
 800c700:	6823      	ldr	r3, [r4, #0]
 800c702:	1c5a      	adds	r2, r3, #1
 800c704:	6022      	str	r2, [r4, #0]
 800c706:	701e      	strb	r6, [r3, #0]
 800c708:	6963      	ldr	r3, [r4, #20]
 800c70a:	3001      	adds	r0, #1
 800c70c:	4283      	cmp	r3, r0
 800c70e:	d004      	beq.n	800c71a <__swbuf_r+0x62>
 800c710:	89a3      	ldrh	r3, [r4, #12]
 800c712:	07db      	lsls	r3, r3, #31
 800c714:	d506      	bpl.n	800c724 <__swbuf_r+0x6c>
 800c716:	2e0a      	cmp	r6, #10
 800c718:	d104      	bne.n	800c724 <__swbuf_r+0x6c>
 800c71a:	4621      	mov	r1, r4
 800c71c:	4628      	mov	r0, r5
 800c71e:	f000 f951 	bl	800c9c4 <_fflush_r>
 800c722:	b988      	cbnz	r0, 800c748 <__swbuf_r+0x90>
 800c724:	4638      	mov	r0, r7
 800c726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c728:	4b0a      	ldr	r3, [pc, #40]	; (800c754 <__swbuf_r+0x9c>)
 800c72a:	429c      	cmp	r4, r3
 800c72c:	d101      	bne.n	800c732 <__swbuf_r+0x7a>
 800c72e:	68ac      	ldr	r4, [r5, #8]
 800c730:	e7cf      	b.n	800c6d2 <__swbuf_r+0x1a>
 800c732:	4b09      	ldr	r3, [pc, #36]	; (800c758 <__swbuf_r+0xa0>)
 800c734:	429c      	cmp	r4, r3
 800c736:	bf08      	it	eq
 800c738:	68ec      	ldreq	r4, [r5, #12]
 800c73a:	e7ca      	b.n	800c6d2 <__swbuf_r+0x1a>
 800c73c:	4621      	mov	r1, r4
 800c73e:	4628      	mov	r0, r5
 800c740:	f000 f81e 	bl	800c780 <__swsetup_r>
 800c744:	2800      	cmp	r0, #0
 800c746:	d0cb      	beq.n	800c6e0 <__swbuf_r+0x28>
 800c748:	f04f 37ff 	mov.w	r7, #4294967295
 800c74c:	e7ea      	b.n	800c724 <__swbuf_r+0x6c>
 800c74e:	bf00      	nop
 800c750:	0800df54 	.word	0x0800df54
 800c754:	0800df74 	.word	0x0800df74
 800c758:	0800df34 	.word	0x0800df34

0800c75c <_write_r>:
 800c75c:	b538      	push	{r3, r4, r5, lr}
 800c75e:	4d07      	ldr	r5, [pc, #28]	; (800c77c <_write_r+0x20>)
 800c760:	4604      	mov	r4, r0
 800c762:	4608      	mov	r0, r1
 800c764:	4611      	mov	r1, r2
 800c766:	2200      	movs	r2, #0
 800c768:	602a      	str	r2, [r5, #0]
 800c76a:	461a      	mov	r2, r3
 800c76c:	f7f4 ff11 	bl	8001592 <_write>
 800c770:	1c43      	adds	r3, r0, #1
 800c772:	d102      	bne.n	800c77a <_write_r+0x1e>
 800c774:	682b      	ldr	r3, [r5, #0]
 800c776:	b103      	cbz	r3, 800c77a <_write_r+0x1e>
 800c778:	6023      	str	r3, [r4, #0]
 800c77a:	bd38      	pop	{r3, r4, r5, pc}
 800c77c:	200032a4 	.word	0x200032a4

0800c780 <__swsetup_r>:
 800c780:	4b32      	ldr	r3, [pc, #200]	; (800c84c <__swsetup_r+0xcc>)
 800c782:	b570      	push	{r4, r5, r6, lr}
 800c784:	681d      	ldr	r5, [r3, #0]
 800c786:	4606      	mov	r6, r0
 800c788:	460c      	mov	r4, r1
 800c78a:	b125      	cbz	r5, 800c796 <__swsetup_r+0x16>
 800c78c:	69ab      	ldr	r3, [r5, #24]
 800c78e:	b913      	cbnz	r3, 800c796 <__swsetup_r+0x16>
 800c790:	4628      	mov	r0, r5
 800c792:	f7ff fba9 	bl	800bee8 <__sinit>
 800c796:	4b2e      	ldr	r3, [pc, #184]	; (800c850 <__swsetup_r+0xd0>)
 800c798:	429c      	cmp	r4, r3
 800c79a:	d10f      	bne.n	800c7bc <__swsetup_r+0x3c>
 800c79c:	686c      	ldr	r4, [r5, #4]
 800c79e:	89a3      	ldrh	r3, [r4, #12]
 800c7a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c7a4:	0719      	lsls	r1, r3, #28
 800c7a6:	d42c      	bmi.n	800c802 <__swsetup_r+0x82>
 800c7a8:	06dd      	lsls	r5, r3, #27
 800c7aa:	d411      	bmi.n	800c7d0 <__swsetup_r+0x50>
 800c7ac:	2309      	movs	r3, #9
 800c7ae:	6033      	str	r3, [r6, #0]
 800c7b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c7b4:	81a3      	strh	r3, [r4, #12]
 800c7b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ba:	e03e      	b.n	800c83a <__swsetup_r+0xba>
 800c7bc:	4b25      	ldr	r3, [pc, #148]	; (800c854 <__swsetup_r+0xd4>)
 800c7be:	429c      	cmp	r4, r3
 800c7c0:	d101      	bne.n	800c7c6 <__swsetup_r+0x46>
 800c7c2:	68ac      	ldr	r4, [r5, #8]
 800c7c4:	e7eb      	b.n	800c79e <__swsetup_r+0x1e>
 800c7c6:	4b24      	ldr	r3, [pc, #144]	; (800c858 <__swsetup_r+0xd8>)
 800c7c8:	429c      	cmp	r4, r3
 800c7ca:	bf08      	it	eq
 800c7cc:	68ec      	ldreq	r4, [r5, #12]
 800c7ce:	e7e6      	b.n	800c79e <__swsetup_r+0x1e>
 800c7d0:	0758      	lsls	r0, r3, #29
 800c7d2:	d512      	bpl.n	800c7fa <__swsetup_r+0x7a>
 800c7d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7d6:	b141      	cbz	r1, 800c7ea <__swsetup_r+0x6a>
 800c7d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7dc:	4299      	cmp	r1, r3
 800c7de:	d002      	beq.n	800c7e6 <__swsetup_r+0x66>
 800c7e0:	4630      	mov	r0, r6
 800c7e2:	f7ff fc75 	bl	800c0d0 <_free_r>
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	6363      	str	r3, [r4, #52]	; 0x34
 800c7ea:	89a3      	ldrh	r3, [r4, #12]
 800c7ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c7f0:	81a3      	strh	r3, [r4, #12]
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	6063      	str	r3, [r4, #4]
 800c7f6:	6923      	ldr	r3, [r4, #16]
 800c7f8:	6023      	str	r3, [r4, #0]
 800c7fa:	89a3      	ldrh	r3, [r4, #12]
 800c7fc:	f043 0308 	orr.w	r3, r3, #8
 800c800:	81a3      	strh	r3, [r4, #12]
 800c802:	6923      	ldr	r3, [r4, #16]
 800c804:	b94b      	cbnz	r3, 800c81a <__swsetup_r+0x9a>
 800c806:	89a3      	ldrh	r3, [r4, #12]
 800c808:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c80c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c810:	d003      	beq.n	800c81a <__swsetup_r+0x9a>
 800c812:	4621      	mov	r1, r4
 800c814:	4630      	mov	r0, r6
 800c816:	f000 f95b 	bl	800cad0 <__smakebuf_r>
 800c81a:	89a0      	ldrh	r0, [r4, #12]
 800c81c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c820:	f010 0301 	ands.w	r3, r0, #1
 800c824:	d00a      	beq.n	800c83c <__swsetup_r+0xbc>
 800c826:	2300      	movs	r3, #0
 800c828:	60a3      	str	r3, [r4, #8]
 800c82a:	6963      	ldr	r3, [r4, #20]
 800c82c:	425b      	negs	r3, r3
 800c82e:	61a3      	str	r3, [r4, #24]
 800c830:	6923      	ldr	r3, [r4, #16]
 800c832:	b943      	cbnz	r3, 800c846 <__swsetup_r+0xc6>
 800c834:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c838:	d1ba      	bne.n	800c7b0 <__swsetup_r+0x30>
 800c83a:	bd70      	pop	{r4, r5, r6, pc}
 800c83c:	0781      	lsls	r1, r0, #30
 800c83e:	bf58      	it	pl
 800c840:	6963      	ldrpl	r3, [r4, #20]
 800c842:	60a3      	str	r3, [r4, #8]
 800c844:	e7f4      	b.n	800c830 <__swsetup_r+0xb0>
 800c846:	2000      	movs	r0, #0
 800c848:	e7f7      	b.n	800c83a <__swsetup_r+0xba>
 800c84a:	bf00      	nop
 800c84c:	20000010 	.word	0x20000010
 800c850:	0800df54 	.word	0x0800df54
 800c854:	0800df74 	.word	0x0800df74
 800c858:	0800df34 	.word	0x0800df34

0800c85c <__assert_func>:
 800c85c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c85e:	4614      	mov	r4, r2
 800c860:	461a      	mov	r2, r3
 800c862:	4b09      	ldr	r3, [pc, #36]	; (800c888 <__assert_func+0x2c>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4605      	mov	r5, r0
 800c868:	68d8      	ldr	r0, [r3, #12]
 800c86a:	b14c      	cbz	r4, 800c880 <__assert_func+0x24>
 800c86c:	4b07      	ldr	r3, [pc, #28]	; (800c88c <__assert_func+0x30>)
 800c86e:	9100      	str	r1, [sp, #0]
 800c870:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c874:	4906      	ldr	r1, [pc, #24]	; (800c890 <__assert_func+0x34>)
 800c876:	462b      	mov	r3, r5
 800c878:	f000 f8e0 	bl	800ca3c <fiprintf>
 800c87c:	f000 fdd0 	bl	800d420 <abort>
 800c880:	4b04      	ldr	r3, [pc, #16]	; (800c894 <__assert_func+0x38>)
 800c882:	461c      	mov	r4, r3
 800c884:	e7f3      	b.n	800c86e <__assert_func+0x12>
 800c886:	bf00      	nop
 800c888:	20000010 	.word	0x20000010
 800c88c:	0800e00c 	.word	0x0800e00c
 800c890:	0800e019 	.word	0x0800e019
 800c894:	0800e047 	.word	0x0800e047

0800c898 <_close_r>:
 800c898:	b538      	push	{r3, r4, r5, lr}
 800c89a:	4d06      	ldr	r5, [pc, #24]	; (800c8b4 <_close_r+0x1c>)
 800c89c:	2300      	movs	r3, #0
 800c89e:	4604      	mov	r4, r0
 800c8a0:	4608      	mov	r0, r1
 800c8a2:	602b      	str	r3, [r5, #0]
 800c8a4:	f7f4 fe91 	bl	80015ca <_close>
 800c8a8:	1c43      	adds	r3, r0, #1
 800c8aa:	d102      	bne.n	800c8b2 <_close_r+0x1a>
 800c8ac:	682b      	ldr	r3, [r5, #0]
 800c8ae:	b103      	cbz	r3, 800c8b2 <_close_r+0x1a>
 800c8b0:	6023      	str	r3, [r4, #0]
 800c8b2:	bd38      	pop	{r3, r4, r5, pc}
 800c8b4:	200032a4 	.word	0x200032a4

0800c8b8 <__sflush_r>:
 800c8b8:	898a      	ldrh	r2, [r1, #12]
 800c8ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8be:	4605      	mov	r5, r0
 800c8c0:	0710      	lsls	r0, r2, #28
 800c8c2:	460c      	mov	r4, r1
 800c8c4:	d458      	bmi.n	800c978 <__sflush_r+0xc0>
 800c8c6:	684b      	ldr	r3, [r1, #4]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	dc05      	bgt.n	800c8d8 <__sflush_r+0x20>
 800c8cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	dc02      	bgt.n	800c8d8 <__sflush_r+0x20>
 800c8d2:	2000      	movs	r0, #0
 800c8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8da:	2e00      	cmp	r6, #0
 800c8dc:	d0f9      	beq.n	800c8d2 <__sflush_r+0x1a>
 800c8de:	2300      	movs	r3, #0
 800c8e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c8e4:	682f      	ldr	r7, [r5, #0]
 800c8e6:	602b      	str	r3, [r5, #0]
 800c8e8:	d032      	beq.n	800c950 <__sflush_r+0x98>
 800c8ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c8ec:	89a3      	ldrh	r3, [r4, #12]
 800c8ee:	075a      	lsls	r2, r3, #29
 800c8f0:	d505      	bpl.n	800c8fe <__sflush_r+0x46>
 800c8f2:	6863      	ldr	r3, [r4, #4]
 800c8f4:	1ac0      	subs	r0, r0, r3
 800c8f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c8f8:	b10b      	cbz	r3, 800c8fe <__sflush_r+0x46>
 800c8fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c8fc:	1ac0      	subs	r0, r0, r3
 800c8fe:	2300      	movs	r3, #0
 800c900:	4602      	mov	r2, r0
 800c902:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c904:	6a21      	ldr	r1, [r4, #32]
 800c906:	4628      	mov	r0, r5
 800c908:	47b0      	blx	r6
 800c90a:	1c43      	adds	r3, r0, #1
 800c90c:	89a3      	ldrh	r3, [r4, #12]
 800c90e:	d106      	bne.n	800c91e <__sflush_r+0x66>
 800c910:	6829      	ldr	r1, [r5, #0]
 800c912:	291d      	cmp	r1, #29
 800c914:	d82c      	bhi.n	800c970 <__sflush_r+0xb8>
 800c916:	4a2a      	ldr	r2, [pc, #168]	; (800c9c0 <__sflush_r+0x108>)
 800c918:	40ca      	lsrs	r2, r1
 800c91a:	07d6      	lsls	r6, r2, #31
 800c91c:	d528      	bpl.n	800c970 <__sflush_r+0xb8>
 800c91e:	2200      	movs	r2, #0
 800c920:	6062      	str	r2, [r4, #4]
 800c922:	04d9      	lsls	r1, r3, #19
 800c924:	6922      	ldr	r2, [r4, #16]
 800c926:	6022      	str	r2, [r4, #0]
 800c928:	d504      	bpl.n	800c934 <__sflush_r+0x7c>
 800c92a:	1c42      	adds	r2, r0, #1
 800c92c:	d101      	bne.n	800c932 <__sflush_r+0x7a>
 800c92e:	682b      	ldr	r3, [r5, #0]
 800c930:	b903      	cbnz	r3, 800c934 <__sflush_r+0x7c>
 800c932:	6560      	str	r0, [r4, #84]	; 0x54
 800c934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c936:	602f      	str	r7, [r5, #0]
 800c938:	2900      	cmp	r1, #0
 800c93a:	d0ca      	beq.n	800c8d2 <__sflush_r+0x1a>
 800c93c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c940:	4299      	cmp	r1, r3
 800c942:	d002      	beq.n	800c94a <__sflush_r+0x92>
 800c944:	4628      	mov	r0, r5
 800c946:	f7ff fbc3 	bl	800c0d0 <_free_r>
 800c94a:	2000      	movs	r0, #0
 800c94c:	6360      	str	r0, [r4, #52]	; 0x34
 800c94e:	e7c1      	b.n	800c8d4 <__sflush_r+0x1c>
 800c950:	6a21      	ldr	r1, [r4, #32]
 800c952:	2301      	movs	r3, #1
 800c954:	4628      	mov	r0, r5
 800c956:	47b0      	blx	r6
 800c958:	1c41      	adds	r1, r0, #1
 800c95a:	d1c7      	bne.n	800c8ec <__sflush_r+0x34>
 800c95c:	682b      	ldr	r3, [r5, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d0c4      	beq.n	800c8ec <__sflush_r+0x34>
 800c962:	2b1d      	cmp	r3, #29
 800c964:	d001      	beq.n	800c96a <__sflush_r+0xb2>
 800c966:	2b16      	cmp	r3, #22
 800c968:	d101      	bne.n	800c96e <__sflush_r+0xb6>
 800c96a:	602f      	str	r7, [r5, #0]
 800c96c:	e7b1      	b.n	800c8d2 <__sflush_r+0x1a>
 800c96e:	89a3      	ldrh	r3, [r4, #12]
 800c970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c974:	81a3      	strh	r3, [r4, #12]
 800c976:	e7ad      	b.n	800c8d4 <__sflush_r+0x1c>
 800c978:	690f      	ldr	r7, [r1, #16]
 800c97a:	2f00      	cmp	r7, #0
 800c97c:	d0a9      	beq.n	800c8d2 <__sflush_r+0x1a>
 800c97e:	0793      	lsls	r3, r2, #30
 800c980:	680e      	ldr	r6, [r1, #0]
 800c982:	bf08      	it	eq
 800c984:	694b      	ldreq	r3, [r1, #20]
 800c986:	600f      	str	r7, [r1, #0]
 800c988:	bf18      	it	ne
 800c98a:	2300      	movne	r3, #0
 800c98c:	eba6 0807 	sub.w	r8, r6, r7
 800c990:	608b      	str	r3, [r1, #8]
 800c992:	f1b8 0f00 	cmp.w	r8, #0
 800c996:	dd9c      	ble.n	800c8d2 <__sflush_r+0x1a>
 800c998:	6a21      	ldr	r1, [r4, #32]
 800c99a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c99c:	4643      	mov	r3, r8
 800c99e:	463a      	mov	r2, r7
 800c9a0:	4628      	mov	r0, r5
 800c9a2:	47b0      	blx	r6
 800c9a4:	2800      	cmp	r0, #0
 800c9a6:	dc06      	bgt.n	800c9b6 <__sflush_r+0xfe>
 800c9a8:	89a3      	ldrh	r3, [r4, #12]
 800c9aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9ae:	81a3      	strh	r3, [r4, #12]
 800c9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b4:	e78e      	b.n	800c8d4 <__sflush_r+0x1c>
 800c9b6:	4407      	add	r7, r0
 800c9b8:	eba8 0800 	sub.w	r8, r8, r0
 800c9bc:	e7e9      	b.n	800c992 <__sflush_r+0xda>
 800c9be:	bf00      	nop
 800c9c0:	20400001 	.word	0x20400001

0800c9c4 <_fflush_r>:
 800c9c4:	b538      	push	{r3, r4, r5, lr}
 800c9c6:	690b      	ldr	r3, [r1, #16]
 800c9c8:	4605      	mov	r5, r0
 800c9ca:	460c      	mov	r4, r1
 800c9cc:	b913      	cbnz	r3, 800c9d4 <_fflush_r+0x10>
 800c9ce:	2500      	movs	r5, #0
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	bd38      	pop	{r3, r4, r5, pc}
 800c9d4:	b118      	cbz	r0, 800c9de <_fflush_r+0x1a>
 800c9d6:	6983      	ldr	r3, [r0, #24]
 800c9d8:	b90b      	cbnz	r3, 800c9de <_fflush_r+0x1a>
 800c9da:	f7ff fa85 	bl	800bee8 <__sinit>
 800c9de:	4b14      	ldr	r3, [pc, #80]	; (800ca30 <_fflush_r+0x6c>)
 800c9e0:	429c      	cmp	r4, r3
 800c9e2:	d11b      	bne.n	800ca1c <_fflush_r+0x58>
 800c9e4:	686c      	ldr	r4, [r5, #4]
 800c9e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d0ef      	beq.n	800c9ce <_fflush_r+0xa>
 800c9ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c9f0:	07d0      	lsls	r0, r2, #31
 800c9f2:	d404      	bmi.n	800c9fe <_fflush_r+0x3a>
 800c9f4:	0599      	lsls	r1, r3, #22
 800c9f6:	d402      	bmi.n	800c9fe <_fflush_r+0x3a>
 800c9f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9fa:	f7ff fb38 	bl	800c06e <__retarget_lock_acquire_recursive>
 800c9fe:	4628      	mov	r0, r5
 800ca00:	4621      	mov	r1, r4
 800ca02:	f7ff ff59 	bl	800c8b8 <__sflush_r>
 800ca06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca08:	07da      	lsls	r2, r3, #31
 800ca0a:	4605      	mov	r5, r0
 800ca0c:	d4e0      	bmi.n	800c9d0 <_fflush_r+0xc>
 800ca0e:	89a3      	ldrh	r3, [r4, #12]
 800ca10:	059b      	lsls	r3, r3, #22
 800ca12:	d4dd      	bmi.n	800c9d0 <_fflush_r+0xc>
 800ca14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca16:	f7ff fb2b 	bl	800c070 <__retarget_lock_release_recursive>
 800ca1a:	e7d9      	b.n	800c9d0 <_fflush_r+0xc>
 800ca1c:	4b05      	ldr	r3, [pc, #20]	; (800ca34 <_fflush_r+0x70>)
 800ca1e:	429c      	cmp	r4, r3
 800ca20:	d101      	bne.n	800ca26 <_fflush_r+0x62>
 800ca22:	68ac      	ldr	r4, [r5, #8]
 800ca24:	e7df      	b.n	800c9e6 <_fflush_r+0x22>
 800ca26:	4b04      	ldr	r3, [pc, #16]	; (800ca38 <_fflush_r+0x74>)
 800ca28:	429c      	cmp	r4, r3
 800ca2a:	bf08      	it	eq
 800ca2c:	68ec      	ldreq	r4, [r5, #12]
 800ca2e:	e7da      	b.n	800c9e6 <_fflush_r+0x22>
 800ca30:	0800df54 	.word	0x0800df54
 800ca34:	0800df74 	.word	0x0800df74
 800ca38:	0800df34 	.word	0x0800df34

0800ca3c <fiprintf>:
 800ca3c:	b40e      	push	{r1, r2, r3}
 800ca3e:	b503      	push	{r0, r1, lr}
 800ca40:	4601      	mov	r1, r0
 800ca42:	ab03      	add	r3, sp, #12
 800ca44:	4805      	ldr	r0, [pc, #20]	; (800ca5c <fiprintf+0x20>)
 800ca46:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca4a:	6800      	ldr	r0, [r0, #0]
 800ca4c:	9301      	str	r3, [sp, #4]
 800ca4e:	f000 fa11 	bl	800ce74 <_vfiprintf_r>
 800ca52:	b002      	add	sp, #8
 800ca54:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca58:	b003      	add	sp, #12
 800ca5a:	4770      	bx	lr
 800ca5c:	20000010 	.word	0x20000010

0800ca60 <_lseek_r>:
 800ca60:	b538      	push	{r3, r4, r5, lr}
 800ca62:	4d07      	ldr	r5, [pc, #28]	; (800ca80 <_lseek_r+0x20>)
 800ca64:	4604      	mov	r4, r0
 800ca66:	4608      	mov	r0, r1
 800ca68:	4611      	mov	r1, r2
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	602a      	str	r2, [r5, #0]
 800ca6e:	461a      	mov	r2, r3
 800ca70:	f7f4 fdd2 	bl	8001618 <_lseek>
 800ca74:	1c43      	adds	r3, r0, #1
 800ca76:	d102      	bne.n	800ca7e <_lseek_r+0x1e>
 800ca78:	682b      	ldr	r3, [r5, #0]
 800ca7a:	b103      	cbz	r3, 800ca7e <_lseek_r+0x1e>
 800ca7c:	6023      	str	r3, [r4, #0]
 800ca7e:	bd38      	pop	{r3, r4, r5, pc}
 800ca80:	200032a4 	.word	0x200032a4

0800ca84 <__swhatbuf_r>:
 800ca84:	b570      	push	{r4, r5, r6, lr}
 800ca86:	460e      	mov	r6, r1
 800ca88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca8c:	2900      	cmp	r1, #0
 800ca8e:	b096      	sub	sp, #88	; 0x58
 800ca90:	4614      	mov	r4, r2
 800ca92:	461d      	mov	r5, r3
 800ca94:	da08      	bge.n	800caa8 <__swhatbuf_r+0x24>
 800ca96:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	602a      	str	r2, [r5, #0]
 800ca9e:	061a      	lsls	r2, r3, #24
 800caa0:	d410      	bmi.n	800cac4 <__swhatbuf_r+0x40>
 800caa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800caa6:	e00e      	b.n	800cac6 <__swhatbuf_r+0x42>
 800caa8:	466a      	mov	r2, sp
 800caaa:	f000 fcc1 	bl	800d430 <_fstat_r>
 800caae:	2800      	cmp	r0, #0
 800cab0:	dbf1      	blt.n	800ca96 <__swhatbuf_r+0x12>
 800cab2:	9a01      	ldr	r2, [sp, #4]
 800cab4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cab8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cabc:	425a      	negs	r2, r3
 800cabe:	415a      	adcs	r2, r3
 800cac0:	602a      	str	r2, [r5, #0]
 800cac2:	e7ee      	b.n	800caa2 <__swhatbuf_r+0x1e>
 800cac4:	2340      	movs	r3, #64	; 0x40
 800cac6:	2000      	movs	r0, #0
 800cac8:	6023      	str	r3, [r4, #0]
 800caca:	b016      	add	sp, #88	; 0x58
 800cacc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cad0 <__smakebuf_r>:
 800cad0:	898b      	ldrh	r3, [r1, #12]
 800cad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cad4:	079d      	lsls	r5, r3, #30
 800cad6:	4606      	mov	r6, r0
 800cad8:	460c      	mov	r4, r1
 800cada:	d507      	bpl.n	800caec <__smakebuf_r+0x1c>
 800cadc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cae0:	6023      	str	r3, [r4, #0]
 800cae2:	6123      	str	r3, [r4, #16]
 800cae4:	2301      	movs	r3, #1
 800cae6:	6163      	str	r3, [r4, #20]
 800cae8:	b002      	add	sp, #8
 800caea:	bd70      	pop	{r4, r5, r6, pc}
 800caec:	ab01      	add	r3, sp, #4
 800caee:	466a      	mov	r2, sp
 800caf0:	f7ff ffc8 	bl	800ca84 <__swhatbuf_r>
 800caf4:	9900      	ldr	r1, [sp, #0]
 800caf6:	4605      	mov	r5, r0
 800caf8:	4630      	mov	r0, r6
 800cafa:	f7ff fb55 	bl	800c1a8 <_malloc_r>
 800cafe:	b948      	cbnz	r0, 800cb14 <__smakebuf_r+0x44>
 800cb00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb04:	059a      	lsls	r2, r3, #22
 800cb06:	d4ef      	bmi.n	800cae8 <__smakebuf_r+0x18>
 800cb08:	f023 0303 	bic.w	r3, r3, #3
 800cb0c:	f043 0302 	orr.w	r3, r3, #2
 800cb10:	81a3      	strh	r3, [r4, #12]
 800cb12:	e7e3      	b.n	800cadc <__smakebuf_r+0xc>
 800cb14:	4b0d      	ldr	r3, [pc, #52]	; (800cb4c <__smakebuf_r+0x7c>)
 800cb16:	62b3      	str	r3, [r6, #40]	; 0x28
 800cb18:	89a3      	ldrh	r3, [r4, #12]
 800cb1a:	6020      	str	r0, [r4, #0]
 800cb1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb20:	81a3      	strh	r3, [r4, #12]
 800cb22:	9b00      	ldr	r3, [sp, #0]
 800cb24:	6163      	str	r3, [r4, #20]
 800cb26:	9b01      	ldr	r3, [sp, #4]
 800cb28:	6120      	str	r0, [r4, #16]
 800cb2a:	b15b      	cbz	r3, 800cb44 <__smakebuf_r+0x74>
 800cb2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb30:	4630      	mov	r0, r6
 800cb32:	f000 fc8f 	bl	800d454 <_isatty_r>
 800cb36:	b128      	cbz	r0, 800cb44 <__smakebuf_r+0x74>
 800cb38:	89a3      	ldrh	r3, [r4, #12]
 800cb3a:	f023 0303 	bic.w	r3, r3, #3
 800cb3e:	f043 0301 	orr.w	r3, r3, #1
 800cb42:	81a3      	strh	r3, [r4, #12]
 800cb44:	89a0      	ldrh	r0, [r4, #12]
 800cb46:	4305      	orrs	r5, r0
 800cb48:	81a5      	strh	r5, [r4, #12]
 800cb4a:	e7cd      	b.n	800cae8 <__smakebuf_r+0x18>
 800cb4c:	0800be81 	.word	0x0800be81

0800cb50 <__malloc_lock>:
 800cb50:	4801      	ldr	r0, [pc, #4]	; (800cb58 <__malloc_lock+0x8>)
 800cb52:	f7ff ba8c 	b.w	800c06e <__retarget_lock_acquire_recursive>
 800cb56:	bf00      	nop
 800cb58:	20003298 	.word	0x20003298

0800cb5c <__malloc_unlock>:
 800cb5c:	4801      	ldr	r0, [pc, #4]	; (800cb64 <__malloc_unlock+0x8>)
 800cb5e:	f7ff ba87 	b.w	800c070 <__retarget_lock_release_recursive>
 800cb62:	bf00      	nop
 800cb64:	20003298 	.word	0x20003298

0800cb68 <__ssputs_r>:
 800cb68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb6c:	688e      	ldr	r6, [r1, #8]
 800cb6e:	429e      	cmp	r6, r3
 800cb70:	4682      	mov	sl, r0
 800cb72:	460c      	mov	r4, r1
 800cb74:	4690      	mov	r8, r2
 800cb76:	461f      	mov	r7, r3
 800cb78:	d838      	bhi.n	800cbec <__ssputs_r+0x84>
 800cb7a:	898a      	ldrh	r2, [r1, #12]
 800cb7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb80:	d032      	beq.n	800cbe8 <__ssputs_r+0x80>
 800cb82:	6825      	ldr	r5, [r4, #0]
 800cb84:	6909      	ldr	r1, [r1, #16]
 800cb86:	eba5 0901 	sub.w	r9, r5, r1
 800cb8a:	6965      	ldr	r5, [r4, #20]
 800cb8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb94:	3301      	adds	r3, #1
 800cb96:	444b      	add	r3, r9
 800cb98:	106d      	asrs	r5, r5, #1
 800cb9a:	429d      	cmp	r5, r3
 800cb9c:	bf38      	it	cc
 800cb9e:	461d      	movcc	r5, r3
 800cba0:	0553      	lsls	r3, r2, #21
 800cba2:	d531      	bpl.n	800cc08 <__ssputs_r+0xa0>
 800cba4:	4629      	mov	r1, r5
 800cba6:	f7ff faff 	bl	800c1a8 <_malloc_r>
 800cbaa:	4606      	mov	r6, r0
 800cbac:	b950      	cbnz	r0, 800cbc4 <__ssputs_r+0x5c>
 800cbae:	230c      	movs	r3, #12
 800cbb0:	f8ca 3000 	str.w	r3, [sl]
 800cbb4:	89a3      	ldrh	r3, [r4, #12]
 800cbb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbba:	81a3      	strh	r3, [r4, #12]
 800cbbc:	f04f 30ff 	mov.w	r0, #4294967295
 800cbc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbc4:	6921      	ldr	r1, [r4, #16]
 800cbc6:	464a      	mov	r2, r9
 800cbc8:	f7ff fa6c 	bl	800c0a4 <memcpy>
 800cbcc:	89a3      	ldrh	r3, [r4, #12]
 800cbce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cbd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbd6:	81a3      	strh	r3, [r4, #12]
 800cbd8:	6126      	str	r6, [r4, #16]
 800cbda:	6165      	str	r5, [r4, #20]
 800cbdc:	444e      	add	r6, r9
 800cbde:	eba5 0509 	sub.w	r5, r5, r9
 800cbe2:	6026      	str	r6, [r4, #0]
 800cbe4:	60a5      	str	r5, [r4, #8]
 800cbe6:	463e      	mov	r6, r7
 800cbe8:	42be      	cmp	r6, r7
 800cbea:	d900      	bls.n	800cbee <__ssputs_r+0x86>
 800cbec:	463e      	mov	r6, r7
 800cbee:	6820      	ldr	r0, [r4, #0]
 800cbf0:	4632      	mov	r2, r6
 800cbf2:	4641      	mov	r1, r8
 800cbf4:	f000 fc3e 	bl	800d474 <memmove>
 800cbf8:	68a3      	ldr	r3, [r4, #8]
 800cbfa:	1b9b      	subs	r3, r3, r6
 800cbfc:	60a3      	str	r3, [r4, #8]
 800cbfe:	6823      	ldr	r3, [r4, #0]
 800cc00:	4433      	add	r3, r6
 800cc02:	6023      	str	r3, [r4, #0]
 800cc04:	2000      	movs	r0, #0
 800cc06:	e7db      	b.n	800cbc0 <__ssputs_r+0x58>
 800cc08:	462a      	mov	r2, r5
 800cc0a:	f000 fc4d 	bl	800d4a8 <_realloc_r>
 800cc0e:	4606      	mov	r6, r0
 800cc10:	2800      	cmp	r0, #0
 800cc12:	d1e1      	bne.n	800cbd8 <__ssputs_r+0x70>
 800cc14:	6921      	ldr	r1, [r4, #16]
 800cc16:	4650      	mov	r0, sl
 800cc18:	f7ff fa5a 	bl	800c0d0 <_free_r>
 800cc1c:	e7c7      	b.n	800cbae <__ssputs_r+0x46>
	...

0800cc20 <_svfiprintf_r>:
 800cc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc24:	4698      	mov	r8, r3
 800cc26:	898b      	ldrh	r3, [r1, #12]
 800cc28:	061b      	lsls	r3, r3, #24
 800cc2a:	b09d      	sub	sp, #116	; 0x74
 800cc2c:	4607      	mov	r7, r0
 800cc2e:	460d      	mov	r5, r1
 800cc30:	4614      	mov	r4, r2
 800cc32:	d50e      	bpl.n	800cc52 <_svfiprintf_r+0x32>
 800cc34:	690b      	ldr	r3, [r1, #16]
 800cc36:	b963      	cbnz	r3, 800cc52 <_svfiprintf_r+0x32>
 800cc38:	2140      	movs	r1, #64	; 0x40
 800cc3a:	f7ff fab5 	bl	800c1a8 <_malloc_r>
 800cc3e:	6028      	str	r0, [r5, #0]
 800cc40:	6128      	str	r0, [r5, #16]
 800cc42:	b920      	cbnz	r0, 800cc4e <_svfiprintf_r+0x2e>
 800cc44:	230c      	movs	r3, #12
 800cc46:	603b      	str	r3, [r7, #0]
 800cc48:	f04f 30ff 	mov.w	r0, #4294967295
 800cc4c:	e0d1      	b.n	800cdf2 <_svfiprintf_r+0x1d2>
 800cc4e:	2340      	movs	r3, #64	; 0x40
 800cc50:	616b      	str	r3, [r5, #20]
 800cc52:	2300      	movs	r3, #0
 800cc54:	9309      	str	r3, [sp, #36]	; 0x24
 800cc56:	2320      	movs	r3, #32
 800cc58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc60:	2330      	movs	r3, #48	; 0x30
 800cc62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ce0c <_svfiprintf_r+0x1ec>
 800cc66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc6a:	f04f 0901 	mov.w	r9, #1
 800cc6e:	4623      	mov	r3, r4
 800cc70:	469a      	mov	sl, r3
 800cc72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc76:	b10a      	cbz	r2, 800cc7c <_svfiprintf_r+0x5c>
 800cc78:	2a25      	cmp	r2, #37	; 0x25
 800cc7a:	d1f9      	bne.n	800cc70 <_svfiprintf_r+0x50>
 800cc7c:	ebba 0b04 	subs.w	fp, sl, r4
 800cc80:	d00b      	beq.n	800cc9a <_svfiprintf_r+0x7a>
 800cc82:	465b      	mov	r3, fp
 800cc84:	4622      	mov	r2, r4
 800cc86:	4629      	mov	r1, r5
 800cc88:	4638      	mov	r0, r7
 800cc8a:	f7ff ff6d 	bl	800cb68 <__ssputs_r>
 800cc8e:	3001      	adds	r0, #1
 800cc90:	f000 80aa 	beq.w	800cde8 <_svfiprintf_r+0x1c8>
 800cc94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc96:	445a      	add	r2, fp
 800cc98:	9209      	str	r2, [sp, #36]	; 0x24
 800cc9a:	f89a 3000 	ldrb.w	r3, [sl]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	f000 80a2 	beq.w	800cde8 <_svfiprintf_r+0x1c8>
 800cca4:	2300      	movs	r3, #0
 800cca6:	f04f 32ff 	mov.w	r2, #4294967295
 800ccaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccae:	f10a 0a01 	add.w	sl, sl, #1
 800ccb2:	9304      	str	r3, [sp, #16]
 800ccb4:	9307      	str	r3, [sp, #28]
 800ccb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccba:	931a      	str	r3, [sp, #104]	; 0x68
 800ccbc:	4654      	mov	r4, sl
 800ccbe:	2205      	movs	r2, #5
 800ccc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccc4:	4851      	ldr	r0, [pc, #324]	; (800ce0c <_svfiprintf_r+0x1ec>)
 800ccc6:	f7f3 fa8b 	bl	80001e0 <memchr>
 800ccca:	9a04      	ldr	r2, [sp, #16]
 800cccc:	b9d8      	cbnz	r0, 800cd06 <_svfiprintf_r+0xe6>
 800ccce:	06d0      	lsls	r0, r2, #27
 800ccd0:	bf44      	itt	mi
 800ccd2:	2320      	movmi	r3, #32
 800ccd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccd8:	0711      	lsls	r1, r2, #28
 800ccda:	bf44      	itt	mi
 800ccdc:	232b      	movmi	r3, #43	; 0x2b
 800ccde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cce2:	f89a 3000 	ldrb.w	r3, [sl]
 800cce6:	2b2a      	cmp	r3, #42	; 0x2a
 800cce8:	d015      	beq.n	800cd16 <_svfiprintf_r+0xf6>
 800ccea:	9a07      	ldr	r2, [sp, #28]
 800ccec:	4654      	mov	r4, sl
 800ccee:	2000      	movs	r0, #0
 800ccf0:	f04f 0c0a 	mov.w	ip, #10
 800ccf4:	4621      	mov	r1, r4
 800ccf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccfa:	3b30      	subs	r3, #48	; 0x30
 800ccfc:	2b09      	cmp	r3, #9
 800ccfe:	d94e      	bls.n	800cd9e <_svfiprintf_r+0x17e>
 800cd00:	b1b0      	cbz	r0, 800cd30 <_svfiprintf_r+0x110>
 800cd02:	9207      	str	r2, [sp, #28]
 800cd04:	e014      	b.n	800cd30 <_svfiprintf_r+0x110>
 800cd06:	eba0 0308 	sub.w	r3, r0, r8
 800cd0a:	fa09 f303 	lsl.w	r3, r9, r3
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	9304      	str	r3, [sp, #16]
 800cd12:	46a2      	mov	sl, r4
 800cd14:	e7d2      	b.n	800ccbc <_svfiprintf_r+0x9c>
 800cd16:	9b03      	ldr	r3, [sp, #12]
 800cd18:	1d19      	adds	r1, r3, #4
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	9103      	str	r1, [sp, #12]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	bfbb      	ittet	lt
 800cd22:	425b      	neglt	r3, r3
 800cd24:	f042 0202 	orrlt.w	r2, r2, #2
 800cd28:	9307      	strge	r3, [sp, #28]
 800cd2a:	9307      	strlt	r3, [sp, #28]
 800cd2c:	bfb8      	it	lt
 800cd2e:	9204      	strlt	r2, [sp, #16]
 800cd30:	7823      	ldrb	r3, [r4, #0]
 800cd32:	2b2e      	cmp	r3, #46	; 0x2e
 800cd34:	d10c      	bne.n	800cd50 <_svfiprintf_r+0x130>
 800cd36:	7863      	ldrb	r3, [r4, #1]
 800cd38:	2b2a      	cmp	r3, #42	; 0x2a
 800cd3a:	d135      	bne.n	800cda8 <_svfiprintf_r+0x188>
 800cd3c:	9b03      	ldr	r3, [sp, #12]
 800cd3e:	1d1a      	adds	r2, r3, #4
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	9203      	str	r2, [sp, #12]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	bfb8      	it	lt
 800cd48:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd4c:	3402      	adds	r4, #2
 800cd4e:	9305      	str	r3, [sp, #20]
 800cd50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ce1c <_svfiprintf_r+0x1fc>
 800cd54:	7821      	ldrb	r1, [r4, #0]
 800cd56:	2203      	movs	r2, #3
 800cd58:	4650      	mov	r0, sl
 800cd5a:	f7f3 fa41 	bl	80001e0 <memchr>
 800cd5e:	b140      	cbz	r0, 800cd72 <_svfiprintf_r+0x152>
 800cd60:	2340      	movs	r3, #64	; 0x40
 800cd62:	eba0 000a 	sub.w	r0, r0, sl
 800cd66:	fa03 f000 	lsl.w	r0, r3, r0
 800cd6a:	9b04      	ldr	r3, [sp, #16]
 800cd6c:	4303      	orrs	r3, r0
 800cd6e:	3401      	adds	r4, #1
 800cd70:	9304      	str	r3, [sp, #16]
 800cd72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd76:	4826      	ldr	r0, [pc, #152]	; (800ce10 <_svfiprintf_r+0x1f0>)
 800cd78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd7c:	2206      	movs	r2, #6
 800cd7e:	f7f3 fa2f 	bl	80001e0 <memchr>
 800cd82:	2800      	cmp	r0, #0
 800cd84:	d038      	beq.n	800cdf8 <_svfiprintf_r+0x1d8>
 800cd86:	4b23      	ldr	r3, [pc, #140]	; (800ce14 <_svfiprintf_r+0x1f4>)
 800cd88:	bb1b      	cbnz	r3, 800cdd2 <_svfiprintf_r+0x1b2>
 800cd8a:	9b03      	ldr	r3, [sp, #12]
 800cd8c:	3307      	adds	r3, #7
 800cd8e:	f023 0307 	bic.w	r3, r3, #7
 800cd92:	3308      	adds	r3, #8
 800cd94:	9303      	str	r3, [sp, #12]
 800cd96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd98:	4433      	add	r3, r6
 800cd9a:	9309      	str	r3, [sp, #36]	; 0x24
 800cd9c:	e767      	b.n	800cc6e <_svfiprintf_r+0x4e>
 800cd9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cda2:	460c      	mov	r4, r1
 800cda4:	2001      	movs	r0, #1
 800cda6:	e7a5      	b.n	800ccf4 <_svfiprintf_r+0xd4>
 800cda8:	2300      	movs	r3, #0
 800cdaa:	3401      	adds	r4, #1
 800cdac:	9305      	str	r3, [sp, #20]
 800cdae:	4619      	mov	r1, r3
 800cdb0:	f04f 0c0a 	mov.w	ip, #10
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdba:	3a30      	subs	r2, #48	; 0x30
 800cdbc:	2a09      	cmp	r2, #9
 800cdbe:	d903      	bls.n	800cdc8 <_svfiprintf_r+0x1a8>
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d0c5      	beq.n	800cd50 <_svfiprintf_r+0x130>
 800cdc4:	9105      	str	r1, [sp, #20]
 800cdc6:	e7c3      	b.n	800cd50 <_svfiprintf_r+0x130>
 800cdc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdcc:	4604      	mov	r4, r0
 800cdce:	2301      	movs	r3, #1
 800cdd0:	e7f0      	b.n	800cdb4 <_svfiprintf_r+0x194>
 800cdd2:	ab03      	add	r3, sp, #12
 800cdd4:	9300      	str	r3, [sp, #0]
 800cdd6:	462a      	mov	r2, r5
 800cdd8:	4b0f      	ldr	r3, [pc, #60]	; (800ce18 <_svfiprintf_r+0x1f8>)
 800cdda:	a904      	add	r1, sp, #16
 800cddc:	4638      	mov	r0, r7
 800cdde:	f3af 8000 	nop.w
 800cde2:	1c42      	adds	r2, r0, #1
 800cde4:	4606      	mov	r6, r0
 800cde6:	d1d6      	bne.n	800cd96 <_svfiprintf_r+0x176>
 800cde8:	89ab      	ldrh	r3, [r5, #12]
 800cdea:	065b      	lsls	r3, r3, #25
 800cdec:	f53f af2c 	bmi.w	800cc48 <_svfiprintf_r+0x28>
 800cdf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cdf2:	b01d      	add	sp, #116	; 0x74
 800cdf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdf8:	ab03      	add	r3, sp, #12
 800cdfa:	9300      	str	r3, [sp, #0]
 800cdfc:	462a      	mov	r2, r5
 800cdfe:	4b06      	ldr	r3, [pc, #24]	; (800ce18 <_svfiprintf_r+0x1f8>)
 800ce00:	a904      	add	r1, sp, #16
 800ce02:	4638      	mov	r0, r7
 800ce04:	f000 f9d4 	bl	800d1b0 <_printf_i>
 800ce08:	e7eb      	b.n	800cde2 <_svfiprintf_r+0x1c2>
 800ce0a:	bf00      	nop
 800ce0c:	0800e048 	.word	0x0800e048
 800ce10:	0800e052 	.word	0x0800e052
 800ce14:	00000000 	.word	0x00000000
 800ce18:	0800cb69 	.word	0x0800cb69
 800ce1c:	0800e04e 	.word	0x0800e04e

0800ce20 <__sfputc_r>:
 800ce20:	6893      	ldr	r3, [r2, #8]
 800ce22:	3b01      	subs	r3, #1
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	b410      	push	{r4}
 800ce28:	6093      	str	r3, [r2, #8]
 800ce2a:	da08      	bge.n	800ce3e <__sfputc_r+0x1e>
 800ce2c:	6994      	ldr	r4, [r2, #24]
 800ce2e:	42a3      	cmp	r3, r4
 800ce30:	db01      	blt.n	800ce36 <__sfputc_r+0x16>
 800ce32:	290a      	cmp	r1, #10
 800ce34:	d103      	bne.n	800ce3e <__sfputc_r+0x1e>
 800ce36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce3a:	f7ff bc3d 	b.w	800c6b8 <__swbuf_r>
 800ce3e:	6813      	ldr	r3, [r2, #0]
 800ce40:	1c58      	adds	r0, r3, #1
 800ce42:	6010      	str	r0, [r2, #0]
 800ce44:	7019      	strb	r1, [r3, #0]
 800ce46:	4608      	mov	r0, r1
 800ce48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce4c:	4770      	bx	lr

0800ce4e <__sfputs_r>:
 800ce4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce50:	4606      	mov	r6, r0
 800ce52:	460f      	mov	r7, r1
 800ce54:	4614      	mov	r4, r2
 800ce56:	18d5      	adds	r5, r2, r3
 800ce58:	42ac      	cmp	r4, r5
 800ce5a:	d101      	bne.n	800ce60 <__sfputs_r+0x12>
 800ce5c:	2000      	movs	r0, #0
 800ce5e:	e007      	b.n	800ce70 <__sfputs_r+0x22>
 800ce60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce64:	463a      	mov	r2, r7
 800ce66:	4630      	mov	r0, r6
 800ce68:	f7ff ffda 	bl	800ce20 <__sfputc_r>
 800ce6c:	1c43      	adds	r3, r0, #1
 800ce6e:	d1f3      	bne.n	800ce58 <__sfputs_r+0xa>
 800ce70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ce74 <_vfiprintf_r>:
 800ce74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce78:	460d      	mov	r5, r1
 800ce7a:	b09d      	sub	sp, #116	; 0x74
 800ce7c:	4614      	mov	r4, r2
 800ce7e:	4698      	mov	r8, r3
 800ce80:	4606      	mov	r6, r0
 800ce82:	b118      	cbz	r0, 800ce8c <_vfiprintf_r+0x18>
 800ce84:	6983      	ldr	r3, [r0, #24]
 800ce86:	b90b      	cbnz	r3, 800ce8c <_vfiprintf_r+0x18>
 800ce88:	f7ff f82e 	bl	800bee8 <__sinit>
 800ce8c:	4b89      	ldr	r3, [pc, #548]	; (800d0b4 <_vfiprintf_r+0x240>)
 800ce8e:	429d      	cmp	r5, r3
 800ce90:	d11b      	bne.n	800ceca <_vfiprintf_r+0x56>
 800ce92:	6875      	ldr	r5, [r6, #4]
 800ce94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce96:	07d9      	lsls	r1, r3, #31
 800ce98:	d405      	bmi.n	800cea6 <_vfiprintf_r+0x32>
 800ce9a:	89ab      	ldrh	r3, [r5, #12]
 800ce9c:	059a      	lsls	r2, r3, #22
 800ce9e:	d402      	bmi.n	800cea6 <_vfiprintf_r+0x32>
 800cea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cea2:	f7ff f8e4 	bl	800c06e <__retarget_lock_acquire_recursive>
 800cea6:	89ab      	ldrh	r3, [r5, #12]
 800cea8:	071b      	lsls	r3, r3, #28
 800ceaa:	d501      	bpl.n	800ceb0 <_vfiprintf_r+0x3c>
 800ceac:	692b      	ldr	r3, [r5, #16]
 800ceae:	b9eb      	cbnz	r3, 800ceec <_vfiprintf_r+0x78>
 800ceb0:	4629      	mov	r1, r5
 800ceb2:	4630      	mov	r0, r6
 800ceb4:	f7ff fc64 	bl	800c780 <__swsetup_r>
 800ceb8:	b1c0      	cbz	r0, 800ceec <_vfiprintf_r+0x78>
 800ceba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cebc:	07dc      	lsls	r4, r3, #31
 800cebe:	d50e      	bpl.n	800cede <_vfiprintf_r+0x6a>
 800cec0:	f04f 30ff 	mov.w	r0, #4294967295
 800cec4:	b01d      	add	sp, #116	; 0x74
 800cec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceca:	4b7b      	ldr	r3, [pc, #492]	; (800d0b8 <_vfiprintf_r+0x244>)
 800cecc:	429d      	cmp	r5, r3
 800cece:	d101      	bne.n	800ced4 <_vfiprintf_r+0x60>
 800ced0:	68b5      	ldr	r5, [r6, #8]
 800ced2:	e7df      	b.n	800ce94 <_vfiprintf_r+0x20>
 800ced4:	4b79      	ldr	r3, [pc, #484]	; (800d0bc <_vfiprintf_r+0x248>)
 800ced6:	429d      	cmp	r5, r3
 800ced8:	bf08      	it	eq
 800ceda:	68f5      	ldreq	r5, [r6, #12]
 800cedc:	e7da      	b.n	800ce94 <_vfiprintf_r+0x20>
 800cede:	89ab      	ldrh	r3, [r5, #12]
 800cee0:	0598      	lsls	r0, r3, #22
 800cee2:	d4ed      	bmi.n	800cec0 <_vfiprintf_r+0x4c>
 800cee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cee6:	f7ff f8c3 	bl	800c070 <__retarget_lock_release_recursive>
 800ceea:	e7e9      	b.n	800cec0 <_vfiprintf_r+0x4c>
 800ceec:	2300      	movs	r3, #0
 800ceee:	9309      	str	r3, [sp, #36]	; 0x24
 800cef0:	2320      	movs	r3, #32
 800cef2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cef6:	f8cd 800c 	str.w	r8, [sp, #12]
 800cefa:	2330      	movs	r3, #48	; 0x30
 800cefc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d0c0 <_vfiprintf_r+0x24c>
 800cf00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf04:	f04f 0901 	mov.w	r9, #1
 800cf08:	4623      	mov	r3, r4
 800cf0a:	469a      	mov	sl, r3
 800cf0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf10:	b10a      	cbz	r2, 800cf16 <_vfiprintf_r+0xa2>
 800cf12:	2a25      	cmp	r2, #37	; 0x25
 800cf14:	d1f9      	bne.n	800cf0a <_vfiprintf_r+0x96>
 800cf16:	ebba 0b04 	subs.w	fp, sl, r4
 800cf1a:	d00b      	beq.n	800cf34 <_vfiprintf_r+0xc0>
 800cf1c:	465b      	mov	r3, fp
 800cf1e:	4622      	mov	r2, r4
 800cf20:	4629      	mov	r1, r5
 800cf22:	4630      	mov	r0, r6
 800cf24:	f7ff ff93 	bl	800ce4e <__sfputs_r>
 800cf28:	3001      	adds	r0, #1
 800cf2a:	f000 80aa 	beq.w	800d082 <_vfiprintf_r+0x20e>
 800cf2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf30:	445a      	add	r2, fp
 800cf32:	9209      	str	r2, [sp, #36]	; 0x24
 800cf34:	f89a 3000 	ldrb.w	r3, [sl]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	f000 80a2 	beq.w	800d082 <_vfiprintf_r+0x20e>
 800cf3e:	2300      	movs	r3, #0
 800cf40:	f04f 32ff 	mov.w	r2, #4294967295
 800cf44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf48:	f10a 0a01 	add.w	sl, sl, #1
 800cf4c:	9304      	str	r3, [sp, #16]
 800cf4e:	9307      	str	r3, [sp, #28]
 800cf50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf54:	931a      	str	r3, [sp, #104]	; 0x68
 800cf56:	4654      	mov	r4, sl
 800cf58:	2205      	movs	r2, #5
 800cf5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf5e:	4858      	ldr	r0, [pc, #352]	; (800d0c0 <_vfiprintf_r+0x24c>)
 800cf60:	f7f3 f93e 	bl	80001e0 <memchr>
 800cf64:	9a04      	ldr	r2, [sp, #16]
 800cf66:	b9d8      	cbnz	r0, 800cfa0 <_vfiprintf_r+0x12c>
 800cf68:	06d1      	lsls	r1, r2, #27
 800cf6a:	bf44      	itt	mi
 800cf6c:	2320      	movmi	r3, #32
 800cf6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf72:	0713      	lsls	r3, r2, #28
 800cf74:	bf44      	itt	mi
 800cf76:	232b      	movmi	r3, #43	; 0x2b
 800cf78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf7c:	f89a 3000 	ldrb.w	r3, [sl]
 800cf80:	2b2a      	cmp	r3, #42	; 0x2a
 800cf82:	d015      	beq.n	800cfb0 <_vfiprintf_r+0x13c>
 800cf84:	9a07      	ldr	r2, [sp, #28]
 800cf86:	4654      	mov	r4, sl
 800cf88:	2000      	movs	r0, #0
 800cf8a:	f04f 0c0a 	mov.w	ip, #10
 800cf8e:	4621      	mov	r1, r4
 800cf90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf94:	3b30      	subs	r3, #48	; 0x30
 800cf96:	2b09      	cmp	r3, #9
 800cf98:	d94e      	bls.n	800d038 <_vfiprintf_r+0x1c4>
 800cf9a:	b1b0      	cbz	r0, 800cfca <_vfiprintf_r+0x156>
 800cf9c:	9207      	str	r2, [sp, #28]
 800cf9e:	e014      	b.n	800cfca <_vfiprintf_r+0x156>
 800cfa0:	eba0 0308 	sub.w	r3, r0, r8
 800cfa4:	fa09 f303 	lsl.w	r3, r9, r3
 800cfa8:	4313      	orrs	r3, r2
 800cfaa:	9304      	str	r3, [sp, #16]
 800cfac:	46a2      	mov	sl, r4
 800cfae:	e7d2      	b.n	800cf56 <_vfiprintf_r+0xe2>
 800cfb0:	9b03      	ldr	r3, [sp, #12]
 800cfb2:	1d19      	adds	r1, r3, #4
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	9103      	str	r1, [sp, #12]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	bfbb      	ittet	lt
 800cfbc:	425b      	neglt	r3, r3
 800cfbe:	f042 0202 	orrlt.w	r2, r2, #2
 800cfc2:	9307      	strge	r3, [sp, #28]
 800cfc4:	9307      	strlt	r3, [sp, #28]
 800cfc6:	bfb8      	it	lt
 800cfc8:	9204      	strlt	r2, [sp, #16]
 800cfca:	7823      	ldrb	r3, [r4, #0]
 800cfcc:	2b2e      	cmp	r3, #46	; 0x2e
 800cfce:	d10c      	bne.n	800cfea <_vfiprintf_r+0x176>
 800cfd0:	7863      	ldrb	r3, [r4, #1]
 800cfd2:	2b2a      	cmp	r3, #42	; 0x2a
 800cfd4:	d135      	bne.n	800d042 <_vfiprintf_r+0x1ce>
 800cfd6:	9b03      	ldr	r3, [sp, #12]
 800cfd8:	1d1a      	adds	r2, r3, #4
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	9203      	str	r2, [sp, #12]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	bfb8      	it	lt
 800cfe2:	f04f 33ff 	movlt.w	r3, #4294967295
 800cfe6:	3402      	adds	r4, #2
 800cfe8:	9305      	str	r3, [sp, #20]
 800cfea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d0d0 <_vfiprintf_r+0x25c>
 800cfee:	7821      	ldrb	r1, [r4, #0]
 800cff0:	2203      	movs	r2, #3
 800cff2:	4650      	mov	r0, sl
 800cff4:	f7f3 f8f4 	bl	80001e0 <memchr>
 800cff8:	b140      	cbz	r0, 800d00c <_vfiprintf_r+0x198>
 800cffa:	2340      	movs	r3, #64	; 0x40
 800cffc:	eba0 000a 	sub.w	r0, r0, sl
 800d000:	fa03 f000 	lsl.w	r0, r3, r0
 800d004:	9b04      	ldr	r3, [sp, #16]
 800d006:	4303      	orrs	r3, r0
 800d008:	3401      	adds	r4, #1
 800d00a:	9304      	str	r3, [sp, #16]
 800d00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d010:	482c      	ldr	r0, [pc, #176]	; (800d0c4 <_vfiprintf_r+0x250>)
 800d012:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d016:	2206      	movs	r2, #6
 800d018:	f7f3 f8e2 	bl	80001e0 <memchr>
 800d01c:	2800      	cmp	r0, #0
 800d01e:	d03f      	beq.n	800d0a0 <_vfiprintf_r+0x22c>
 800d020:	4b29      	ldr	r3, [pc, #164]	; (800d0c8 <_vfiprintf_r+0x254>)
 800d022:	bb1b      	cbnz	r3, 800d06c <_vfiprintf_r+0x1f8>
 800d024:	9b03      	ldr	r3, [sp, #12]
 800d026:	3307      	adds	r3, #7
 800d028:	f023 0307 	bic.w	r3, r3, #7
 800d02c:	3308      	adds	r3, #8
 800d02e:	9303      	str	r3, [sp, #12]
 800d030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d032:	443b      	add	r3, r7
 800d034:	9309      	str	r3, [sp, #36]	; 0x24
 800d036:	e767      	b.n	800cf08 <_vfiprintf_r+0x94>
 800d038:	fb0c 3202 	mla	r2, ip, r2, r3
 800d03c:	460c      	mov	r4, r1
 800d03e:	2001      	movs	r0, #1
 800d040:	e7a5      	b.n	800cf8e <_vfiprintf_r+0x11a>
 800d042:	2300      	movs	r3, #0
 800d044:	3401      	adds	r4, #1
 800d046:	9305      	str	r3, [sp, #20]
 800d048:	4619      	mov	r1, r3
 800d04a:	f04f 0c0a 	mov.w	ip, #10
 800d04e:	4620      	mov	r0, r4
 800d050:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d054:	3a30      	subs	r2, #48	; 0x30
 800d056:	2a09      	cmp	r2, #9
 800d058:	d903      	bls.n	800d062 <_vfiprintf_r+0x1ee>
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d0c5      	beq.n	800cfea <_vfiprintf_r+0x176>
 800d05e:	9105      	str	r1, [sp, #20]
 800d060:	e7c3      	b.n	800cfea <_vfiprintf_r+0x176>
 800d062:	fb0c 2101 	mla	r1, ip, r1, r2
 800d066:	4604      	mov	r4, r0
 800d068:	2301      	movs	r3, #1
 800d06a:	e7f0      	b.n	800d04e <_vfiprintf_r+0x1da>
 800d06c:	ab03      	add	r3, sp, #12
 800d06e:	9300      	str	r3, [sp, #0]
 800d070:	462a      	mov	r2, r5
 800d072:	4b16      	ldr	r3, [pc, #88]	; (800d0cc <_vfiprintf_r+0x258>)
 800d074:	a904      	add	r1, sp, #16
 800d076:	4630      	mov	r0, r6
 800d078:	f3af 8000 	nop.w
 800d07c:	4607      	mov	r7, r0
 800d07e:	1c78      	adds	r0, r7, #1
 800d080:	d1d6      	bne.n	800d030 <_vfiprintf_r+0x1bc>
 800d082:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d084:	07d9      	lsls	r1, r3, #31
 800d086:	d405      	bmi.n	800d094 <_vfiprintf_r+0x220>
 800d088:	89ab      	ldrh	r3, [r5, #12]
 800d08a:	059a      	lsls	r2, r3, #22
 800d08c:	d402      	bmi.n	800d094 <_vfiprintf_r+0x220>
 800d08e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d090:	f7fe ffee 	bl	800c070 <__retarget_lock_release_recursive>
 800d094:	89ab      	ldrh	r3, [r5, #12]
 800d096:	065b      	lsls	r3, r3, #25
 800d098:	f53f af12 	bmi.w	800cec0 <_vfiprintf_r+0x4c>
 800d09c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d09e:	e711      	b.n	800cec4 <_vfiprintf_r+0x50>
 800d0a0:	ab03      	add	r3, sp, #12
 800d0a2:	9300      	str	r3, [sp, #0]
 800d0a4:	462a      	mov	r2, r5
 800d0a6:	4b09      	ldr	r3, [pc, #36]	; (800d0cc <_vfiprintf_r+0x258>)
 800d0a8:	a904      	add	r1, sp, #16
 800d0aa:	4630      	mov	r0, r6
 800d0ac:	f000 f880 	bl	800d1b0 <_printf_i>
 800d0b0:	e7e4      	b.n	800d07c <_vfiprintf_r+0x208>
 800d0b2:	bf00      	nop
 800d0b4:	0800df54 	.word	0x0800df54
 800d0b8:	0800df74 	.word	0x0800df74
 800d0bc:	0800df34 	.word	0x0800df34
 800d0c0:	0800e048 	.word	0x0800e048
 800d0c4:	0800e052 	.word	0x0800e052
 800d0c8:	00000000 	.word	0x00000000
 800d0cc:	0800ce4f 	.word	0x0800ce4f
 800d0d0:	0800e04e 	.word	0x0800e04e

0800d0d4 <_printf_common>:
 800d0d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0d8:	4616      	mov	r6, r2
 800d0da:	4699      	mov	r9, r3
 800d0dc:	688a      	ldr	r2, [r1, #8]
 800d0de:	690b      	ldr	r3, [r1, #16]
 800d0e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	bfb8      	it	lt
 800d0e8:	4613      	movlt	r3, r2
 800d0ea:	6033      	str	r3, [r6, #0]
 800d0ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d0f0:	4607      	mov	r7, r0
 800d0f2:	460c      	mov	r4, r1
 800d0f4:	b10a      	cbz	r2, 800d0fa <_printf_common+0x26>
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	6033      	str	r3, [r6, #0]
 800d0fa:	6823      	ldr	r3, [r4, #0]
 800d0fc:	0699      	lsls	r1, r3, #26
 800d0fe:	bf42      	ittt	mi
 800d100:	6833      	ldrmi	r3, [r6, #0]
 800d102:	3302      	addmi	r3, #2
 800d104:	6033      	strmi	r3, [r6, #0]
 800d106:	6825      	ldr	r5, [r4, #0]
 800d108:	f015 0506 	ands.w	r5, r5, #6
 800d10c:	d106      	bne.n	800d11c <_printf_common+0x48>
 800d10e:	f104 0a19 	add.w	sl, r4, #25
 800d112:	68e3      	ldr	r3, [r4, #12]
 800d114:	6832      	ldr	r2, [r6, #0]
 800d116:	1a9b      	subs	r3, r3, r2
 800d118:	42ab      	cmp	r3, r5
 800d11a:	dc26      	bgt.n	800d16a <_printf_common+0x96>
 800d11c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d120:	1e13      	subs	r3, r2, #0
 800d122:	6822      	ldr	r2, [r4, #0]
 800d124:	bf18      	it	ne
 800d126:	2301      	movne	r3, #1
 800d128:	0692      	lsls	r2, r2, #26
 800d12a:	d42b      	bmi.n	800d184 <_printf_common+0xb0>
 800d12c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d130:	4649      	mov	r1, r9
 800d132:	4638      	mov	r0, r7
 800d134:	47c0      	blx	r8
 800d136:	3001      	adds	r0, #1
 800d138:	d01e      	beq.n	800d178 <_printf_common+0xa4>
 800d13a:	6823      	ldr	r3, [r4, #0]
 800d13c:	68e5      	ldr	r5, [r4, #12]
 800d13e:	6832      	ldr	r2, [r6, #0]
 800d140:	f003 0306 	and.w	r3, r3, #6
 800d144:	2b04      	cmp	r3, #4
 800d146:	bf08      	it	eq
 800d148:	1aad      	subeq	r5, r5, r2
 800d14a:	68a3      	ldr	r3, [r4, #8]
 800d14c:	6922      	ldr	r2, [r4, #16]
 800d14e:	bf0c      	ite	eq
 800d150:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d154:	2500      	movne	r5, #0
 800d156:	4293      	cmp	r3, r2
 800d158:	bfc4      	itt	gt
 800d15a:	1a9b      	subgt	r3, r3, r2
 800d15c:	18ed      	addgt	r5, r5, r3
 800d15e:	2600      	movs	r6, #0
 800d160:	341a      	adds	r4, #26
 800d162:	42b5      	cmp	r5, r6
 800d164:	d11a      	bne.n	800d19c <_printf_common+0xc8>
 800d166:	2000      	movs	r0, #0
 800d168:	e008      	b.n	800d17c <_printf_common+0xa8>
 800d16a:	2301      	movs	r3, #1
 800d16c:	4652      	mov	r2, sl
 800d16e:	4649      	mov	r1, r9
 800d170:	4638      	mov	r0, r7
 800d172:	47c0      	blx	r8
 800d174:	3001      	adds	r0, #1
 800d176:	d103      	bne.n	800d180 <_printf_common+0xac>
 800d178:	f04f 30ff 	mov.w	r0, #4294967295
 800d17c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d180:	3501      	adds	r5, #1
 800d182:	e7c6      	b.n	800d112 <_printf_common+0x3e>
 800d184:	18e1      	adds	r1, r4, r3
 800d186:	1c5a      	adds	r2, r3, #1
 800d188:	2030      	movs	r0, #48	; 0x30
 800d18a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d18e:	4422      	add	r2, r4
 800d190:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d194:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d198:	3302      	adds	r3, #2
 800d19a:	e7c7      	b.n	800d12c <_printf_common+0x58>
 800d19c:	2301      	movs	r3, #1
 800d19e:	4622      	mov	r2, r4
 800d1a0:	4649      	mov	r1, r9
 800d1a2:	4638      	mov	r0, r7
 800d1a4:	47c0      	blx	r8
 800d1a6:	3001      	adds	r0, #1
 800d1a8:	d0e6      	beq.n	800d178 <_printf_common+0xa4>
 800d1aa:	3601      	adds	r6, #1
 800d1ac:	e7d9      	b.n	800d162 <_printf_common+0x8e>
	...

0800d1b0 <_printf_i>:
 800d1b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d1b4:	7e0f      	ldrb	r7, [r1, #24]
 800d1b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d1b8:	2f78      	cmp	r7, #120	; 0x78
 800d1ba:	4691      	mov	r9, r2
 800d1bc:	4680      	mov	r8, r0
 800d1be:	460c      	mov	r4, r1
 800d1c0:	469a      	mov	sl, r3
 800d1c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d1c6:	d807      	bhi.n	800d1d8 <_printf_i+0x28>
 800d1c8:	2f62      	cmp	r7, #98	; 0x62
 800d1ca:	d80a      	bhi.n	800d1e2 <_printf_i+0x32>
 800d1cc:	2f00      	cmp	r7, #0
 800d1ce:	f000 80d8 	beq.w	800d382 <_printf_i+0x1d2>
 800d1d2:	2f58      	cmp	r7, #88	; 0x58
 800d1d4:	f000 80a3 	beq.w	800d31e <_printf_i+0x16e>
 800d1d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d1e0:	e03a      	b.n	800d258 <_printf_i+0xa8>
 800d1e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d1e6:	2b15      	cmp	r3, #21
 800d1e8:	d8f6      	bhi.n	800d1d8 <_printf_i+0x28>
 800d1ea:	a101      	add	r1, pc, #4	; (adr r1, 800d1f0 <_printf_i+0x40>)
 800d1ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d1f0:	0800d249 	.word	0x0800d249
 800d1f4:	0800d25d 	.word	0x0800d25d
 800d1f8:	0800d1d9 	.word	0x0800d1d9
 800d1fc:	0800d1d9 	.word	0x0800d1d9
 800d200:	0800d1d9 	.word	0x0800d1d9
 800d204:	0800d1d9 	.word	0x0800d1d9
 800d208:	0800d25d 	.word	0x0800d25d
 800d20c:	0800d1d9 	.word	0x0800d1d9
 800d210:	0800d1d9 	.word	0x0800d1d9
 800d214:	0800d1d9 	.word	0x0800d1d9
 800d218:	0800d1d9 	.word	0x0800d1d9
 800d21c:	0800d369 	.word	0x0800d369
 800d220:	0800d28d 	.word	0x0800d28d
 800d224:	0800d34b 	.word	0x0800d34b
 800d228:	0800d1d9 	.word	0x0800d1d9
 800d22c:	0800d1d9 	.word	0x0800d1d9
 800d230:	0800d38b 	.word	0x0800d38b
 800d234:	0800d1d9 	.word	0x0800d1d9
 800d238:	0800d28d 	.word	0x0800d28d
 800d23c:	0800d1d9 	.word	0x0800d1d9
 800d240:	0800d1d9 	.word	0x0800d1d9
 800d244:	0800d353 	.word	0x0800d353
 800d248:	682b      	ldr	r3, [r5, #0]
 800d24a:	1d1a      	adds	r2, r3, #4
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	602a      	str	r2, [r5, #0]
 800d250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d254:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d258:	2301      	movs	r3, #1
 800d25a:	e0a3      	b.n	800d3a4 <_printf_i+0x1f4>
 800d25c:	6820      	ldr	r0, [r4, #0]
 800d25e:	6829      	ldr	r1, [r5, #0]
 800d260:	0606      	lsls	r6, r0, #24
 800d262:	f101 0304 	add.w	r3, r1, #4
 800d266:	d50a      	bpl.n	800d27e <_printf_i+0xce>
 800d268:	680e      	ldr	r6, [r1, #0]
 800d26a:	602b      	str	r3, [r5, #0]
 800d26c:	2e00      	cmp	r6, #0
 800d26e:	da03      	bge.n	800d278 <_printf_i+0xc8>
 800d270:	232d      	movs	r3, #45	; 0x2d
 800d272:	4276      	negs	r6, r6
 800d274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d278:	485e      	ldr	r0, [pc, #376]	; (800d3f4 <_printf_i+0x244>)
 800d27a:	230a      	movs	r3, #10
 800d27c:	e019      	b.n	800d2b2 <_printf_i+0x102>
 800d27e:	680e      	ldr	r6, [r1, #0]
 800d280:	602b      	str	r3, [r5, #0]
 800d282:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d286:	bf18      	it	ne
 800d288:	b236      	sxthne	r6, r6
 800d28a:	e7ef      	b.n	800d26c <_printf_i+0xbc>
 800d28c:	682b      	ldr	r3, [r5, #0]
 800d28e:	6820      	ldr	r0, [r4, #0]
 800d290:	1d19      	adds	r1, r3, #4
 800d292:	6029      	str	r1, [r5, #0]
 800d294:	0601      	lsls	r1, r0, #24
 800d296:	d501      	bpl.n	800d29c <_printf_i+0xec>
 800d298:	681e      	ldr	r6, [r3, #0]
 800d29a:	e002      	b.n	800d2a2 <_printf_i+0xf2>
 800d29c:	0646      	lsls	r6, r0, #25
 800d29e:	d5fb      	bpl.n	800d298 <_printf_i+0xe8>
 800d2a0:	881e      	ldrh	r6, [r3, #0]
 800d2a2:	4854      	ldr	r0, [pc, #336]	; (800d3f4 <_printf_i+0x244>)
 800d2a4:	2f6f      	cmp	r7, #111	; 0x6f
 800d2a6:	bf0c      	ite	eq
 800d2a8:	2308      	moveq	r3, #8
 800d2aa:	230a      	movne	r3, #10
 800d2ac:	2100      	movs	r1, #0
 800d2ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d2b2:	6865      	ldr	r5, [r4, #4]
 800d2b4:	60a5      	str	r5, [r4, #8]
 800d2b6:	2d00      	cmp	r5, #0
 800d2b8:	bfa2      	ittt	ge
 800d2ba:	6821      	ldrge	r1, [r4, #0]
 800d2bc:	f021 0104 	bicge.w	r1, r1, #4
 800d2c0:	6021      	strge	r1, [r4, #0]
 800d2c2:	b90e      	cbnz	r6, 800d2c8 <_printf_i+0x118>
 800d2c4:	2d00      	cmp	r5, #0
 800d2c6:	d04d      	beq.n	800d364 <_printf_i+0x1b4>
 800d2c8:	4615      	mov	r5, r2
 800d2ca:	fbb6 f1f3 	udiv	r1, r6, r3
 800d2ce:	fb03 6711 	mls	r7, r3, r1, r6
 800d2d2:	5dc7      	ldrb	r7, [r0, r7]
 800d2d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d2d8:	4637      	mov	r7, r6
 800d2da:	42bb      	cmp	r3, r7
 800d2dc:	460e      	mov	r6, r1
 800d2de:	d9f4      	bls.n	800d2ca <_printf_i+0x11a>
 800d2e0:	2b08      	cmp	r3, #8
 800d2e2:	d10b      	bne.n	800d2fc <_printf_i+0x14c>
 800d2e4:	6823      	ldr	r3, [r4, #0]
 800d2e6:	07de      	lsls	r6, r3, #31
 800d2e8:	d508      	bpl.n	800d2fc <_printf_i+0x14c>
 800d2ea:	6923      	ldr	r3, [r4, #16]
 800d2ec:	6861      	ldr	r1, [r4, #4]
 800d2ee:	4299      	cmp	r1, r3
 800d2f0:	bfde      	ittt	le
 800d2f2:	2330      	movle	r3, #48	; 0x30
 800d2f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d2f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d2fc:	1b52      	subs	r2, r2, r5
 800d2fe:	6122      	str	r2, [r4, #16]
 800d300:	f8cd a000 	str.w	sl, [sp]
 800d304:	464b      	mov	r3, r9
 800d306:	aa03      	add	r2, sp, #12
 800d308:	4621      	mov	r1, r4
 800d30a:	4640      	mov	r0, r8
 800d30c:	f7ff fee2 	bl	800d0d4 <_printf_common>
 800d310:	3001      	adds	r0, #1
 800d312:	d14c      	bne.n	800d3ae <_printf_i+0x1fe>
 800d314:	f04f 30ff 	mov.w	r0, #4294967295
 800d318:	b004      	add	sp, #16
 800d31a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d31e:	4835      	ldr	r0, [pc, #212]	; (800d3f4 <_printf_i+0x244>)
 800d320:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d324:	6829      	ldr	r1, [r5, #0]
 800d326:	6823      	ldr	r3, [r4, #0]
 800d328:	f851 6b04 	ldr.w	r6, [r1], #4
 800d32c:	6029      	str	r1, [r5, #0]
 800d32e:	061d      	lsls	r5, r3, #24
 800d330:	d514      	bpl.n	800d35c <_printf_i+0x1ac>
 800d332:	07df      	lsls	r7, r3, #31
 800d334:	bf44      	itt	mi
 800d336:	f043 0320 	orrmi.w	r3, r3, #32
 800d33a:	6023      	strmi	r3, [r4, #0]
 800d33c:	b91e      	cbnz	r6, 800d346 <_printf_i+0x196>
 800d33e:	6823      	ldr	r3, [r4, #0]
 800d340:	f023 0320 	bic.w	r3, r3, #32
 800d344:	6023      	str	r3, [r4, #0]
 800d346:	2310      	movs	r3, #16
 800d348:	e7b0      	b.n	800d2ac <_printf_i+0xfc>
 800d34a:	6823      	ldr	r3, [r4, #0]
 800d34c:	f043 0320 	orr.w	r3, r3, #32
 800d350:	6023      	str	r3, [r4, #0]
 800d352:	2378      	movs	r3, #120	; 0x78
 800d354:	4828      	ldr	r0, [pc, #160]	; (800d3f8 <_printf_i+0x248>)
 800d356:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d35a:	e7e3      	b.n	800d324 <_printf_i+0x174>
 800d35c:	0659      	lsls	r1, r3, #25
 800d35e:	bf48      	it	mi
 800d360:	b2b6      	uxthmi	r6, r6
 800d362:	e7e6      	b.n	800d332 <_printf_i+0x182>
 800d364:	4615      	mov	r5, r2
 800d366:	e7bb      	b.n	800d2e0 <_printf_i+0x130>
 800d368:	682b      	ldr	r3, [r5, #0]
 800d36a:	6826      	ldr	r6, [r4, #0]
 800d36c:	6961      	ldr	r1, [r4, #20]
 800d36e:	1d18      	adds	r0, r3, #4
 800d370:	6028      	str	r0, [r5, #0]
 800d372:	0635      	lsls	r5, r6, #24
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	d501      	bpl.n	800d37c <_printf_i+0x1cc>
 800d378:	6019      	str	r1, [r3, #0]
 800d37a:	e002      	b.n	800d382 <_printf_i+0x1d2>
 800d37c:	0670      	lsls	r0, r6, #25
 800d37e:	d5fb      	bpl.n	800d378 <_printf_i+0x1c8>
 800d380:	8019      	strh	r1, [r3, #0]
 800d382:	2300      	movs	r3, #0
 800d384:	6123      	str	r3, [r4, #16]
 800d386:	4615      	mov	r5, r2
 800d388:	e7ba      	b.n	800d300 <_printf_i+0x150>
 800d38a:	682b      	ldr	r3, [r5, #0]
 800d38c:	1d1a      	adds	r2, r3, #4
 800d38e:	602a      	str	r2, [r5, #0]
 800d390:	681d      	ldr	r5, [r3, #0]
 800d392:	6862      	ldr	r2, [r4, #4]
 800d394:	2100      	movs	r1, #0
 800d396:	4628      	mov	r0, r5
 800d398:	f7f2 ff22 	bl	80001e0 <memchr>
 800d39c:	b108      	cbz	r0, 800d3a2 <_printf_i+0x1f2>
 800d39e:	1b40      	subs	r0, r0, r5
 800d3a0:	6060      	str	r0, [r4, #4]
 800d3a2:	6863      	ldr	r3, [r4, #4]
 800d3a4:	6123      	str	r3, [r4, #16]
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3ac:	e7a8      	b.n	800d300 <_printf_i+0x150>
 800d3ae:	6923      	ldr	r3, [r4, #16]
 800d3b0:	462a      	mov	r2, r5
 800d3b2:	4649      	mov	r1, r9
 800d3b4:	4640      	mov	r0, r8
 800d3b6:	47d0      	blx	sl
 800d3b8:	3001      	adds	r0, #1
 800d3ba:	d0ab      	beq.n	800d314 <_printf_i+0x164>
 800d3bc:	6823      	ldr	r3, [r4, #0]
 800d3be:	079b      	lsls	r3, r3, #30
 800d3c0:	d413      	bmi.n	800d3ea <_printf_i+0x23a>
 800d3c2:	68e0      	ldr	r0, [r4, #12]
 800d3c4:	9b03      	ldr	r3, [sp, #12]
 800d3c6:	4298      	cmp	r0, r3
 800d3c8:	bfb8      	it	lt
 800d3ca:	4618      	movlt	r0, r3
 800d3cc:	e7a4      	b.n	800d318 <_printf_i+0x168>
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	4632      	mov	r2, r6
 800d3d2:	4649      	mov	r1, r9
 800d3d4:	4640      	mov	r0, r8
 800d3d6:	47d0      	blx	sl
 800d3d8:	3001      	adds	r0, #1
 800d3da:	d09b      	beq.n	800d314 <_printf_i+0x164>
 800d3dc:	3501      	adds	r5, #1
 800d3de:	68e3      	ldr	r3, [r4, #12]
 800d3e0:	9903      	ldr	r1, [sp, #12]
 800d3e2:	1a5b      	subs	r3, r3, r1
 800d3e4:	42ab      	cmp	r3, r5
 800d3e6:	dcf2      	bgt.n	800d3ce <_printf_i+0x21e>
 800d3e8:	e7eb      	b.n	800d3c2 <_printf_i+0x212>
 800d3ea:	2500      	movs	r5, #0
 800d3ec:	f104 0619 	add.w	r6, r4, #25
 800d3f0:	e7f5      	b.n	800d3de <_printf_i+0x22e>
 800d3f2:	bf00      	nop
 800d3f4:	0800e059 	.word	0x0800e059
 800d3f8:	0800e06a 	.word	0x0800e06a

0800d3fc <_read_r>:
 800d3fc:	b538      	push	{r3, r4, r5, lr}
 800d3fe:	4d07      	ldr	r5, [pc, #28]	; (800d41c <_read_r+0x20>)
 800d400:	4604      	mov	r4, r0
 800d402:	4608      	mov	r0, r1
 800d404:	4611      	mov	r1, r2
 800d406:	2200      	movs	r2, #0
 800d408:	602a      	str	r2, [r5, #0]
 800d40a:	461a      	mov	r2, r3
 800d40c:	f7f4 f8a4 	bl	8001558 <_read>
 800d410:	1c43      	adds	r3, r0, #1
 800d412:	d102      	bne.n	800d41a <_read_r+0x1e>
 800d414:	682b      	ldr	r3, [r5, #0]
 800d416:	b103      	cbz	r3, 800d41a <_read_r+0x1e>
 800d418:	6023      	str	r3, [r4, #0]
 800d41a:	bd38      	pop	{r3, r4, r5, pc}
 800d41c:	200032a4 	.word	0x200032a4

0800d420 <abort>:
 800d420:	b508      	push	{r3, lr}
 800d422:	2006      	movs	r0, #6
 800d424:	f000 f898 	bl	800d558 <raise>
 800d428:	2001      	movs	r0, #1
 800d42a:	f7f4 f88b 	bl	8001544 <_exit>
	...

0800d430 <_fstat_r>:
 800d430:	b538      	push	{r3, r4, r5, lr}
 800d432:	4d07      	ldr	r5, [pc, #28]	; (800d450 <_fstat_r+0x20>)
 800d434:	2300      	movs	r3, #0
 800d436:	4604      	mov	r4, r0
 800d438:	4608      	mov	r0, r1
 800d43a:	4611      	mov	r1, r2
 800d43c:	602b      	str	r3, [r5, #0]
 800d43e:	f7f4 f8d0 	bl	80015e2 <_fstat>
 800d442:	1c43      	adds	r3, r0, #1
 800d444:	d102      	bne.n	800d44c <_fstat_r+0x1c>
 800d446:	682b      	ldr	r3, [r5, #0]
 800d448:	b103      	cbz	r3, 800d44c <_fstat_r+0x1c>
 800d44a:	6023      	str	r3, [r4, #0]
 800d44c:	bd38      	pop	{r3, r4, r5, pc}
 800d44e:	bf00      	nop
 800d450:	200032a4 	.word	0x200032a4

0800d454 <_isatty_r>:
 800d454:	b538      	push	{r3, r4, r5, lr}
 800d456:	4d06      	ldr	r5, [pc, #24]	; (800d470 <_isatty_r+0x1c>)
 800d458:	2300      	movs	r3, #0
 800d45a:	4604      	mov	r4, r0
 800d45c:	4608      	mov	r0, r1
 800d45e:	602b      	str	r3, [r5, #0]
 800d460:	f7f4 f8cf 	bl	8001602 <_isatty>
 800d464:	1c43      	adds	r3, r0, #1
 800d466:	d102      	bne.n	800d46e <_isatty_r+0x1a>
 800d468:	682b      	ldr	r3, [r5, #0]
 800d46a:	b103      	cbz	r3, 800d46e <_isatty_r+0x1a>
 800d46c:	6023      	str	r3, [r4, #0]
 800d46e:	bd38      	pop	{r3, r4, r5, pc}
 800d470:	200032a4 	.word	0x200032a4

0800d474 <memmove>:
 800d474:	4288      	cmp	r0, r1
 800d476:	b510      	push	{r4, lr}
 800d478:	eb01 0402 	add.w	r4, r1, r2
 800d47c:	d902      	bls.n	800d484 <memmove+0x10>
 800d47e:	4284      	cmp	r4, r0
 800d480:	4623      	mov	r3, r4
 800d482:	d807      	bhi.n	800d494 <memmove+0x20>
 800d484:	1e43      	subs	r3, r0, #1
 800d486:	42a1      	cmp	r1, r4
 800d488:	d008      	beq.n	800d49c <memmove+0x28>
 800d48a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d48e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d492:	e7f8      	b.n	800d486 <memmove+0x12>
 800d494:	4402      	add	r2, r0
 800d496:	4601      	mov	r1, r0
 800d498:	428a      	cmp	r2, r1
 800d49a:	d100      	bne.n	800d49e <memmove+0x2a>
 800d49c:	bd10      	pop	{r4, pc}
 800d49e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d4a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d4a6:	e7f7      	b.n	800d498 <memmove+0x24>

0800d4a8 <_realloc_r>:
 800d4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ac:	4680      	mov	r8, r0
 800d4ae:	4614      	mov	r4, r2
 800d4b0:	460e      	mov	r6, r1
 800d4b2:	b921      	cbnz	r1, 800d4be <_realloc_r+0x16>
 800d4b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4b8:	4611      	mov	r1, r2
 800d4ba:	f7fe be75 	b.w	800c1a8 <_malloc_r>
 800d4be:	b92a      	cbnz	r2, 800d4cc <_realloc_r+0x24>
 800d4c0:	f7fe fe06 	bl	800c0d0 <_free_r>
 800d4c4:	4625      	mov	r5, r4
 800d4c6:	4628      	mov	r0, r5
 800d4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4cc:	f000 f860 	bl	800d590 <_malloc_usable_size_r>
 800d4d0:	4284      	cmp	r4, r0
 800d4d2:	4607      	mov	r7, r0
 800d4d4:	d802      	bhi.n	800d4dc <_realloc_r+0x34>
 800d4d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d4da:	d812      	bhi.n	800d502 <_realloc_r+0x5a>
 800d4dc:	4621      	mov	r1, r4
 800d4de:	4640      	mov	r0, r8
 800d4e0:	f7fe fe62 	bl	800c1a8 <_malloc_r>
 800d4e4:	4605      	mov	r5, r0
 800d4e6:	2800      	cmp	r0, #0
 800d4e8:	d0ed      	beq.n	800d4c6 <_realloc_r+0x1e>
 800d4ea:	42bc      	cmp	r4, r7
 800d4ec:	4622      	mov	r2, r4
 800d4ee:	4631      	mov	r1, r6
 800d4f0:	bf28      	it	cs
 800d4f2:	463a      	movcs	r2, r7
 800d4f4:	f7fe fdd6 	bl	800c0a4 <memcpy>
 800d4f8:	4631      	mov	r1, r6
 800d4fa:	4640      	mov	r0, r8
 800d4fc:	f7fe fde8 	bl	800c0d0 <_free_r>
 800d500:	e7e1      	b.n	800d4c6 <_realloc_r+0x1e>
 800d502:	4635      	mov	r5, r6
 800d504:	e7df      	b.n	800d4c6 <_realloc_r+0x1e>

0800d506 <_raise_r>:
 800d506:	291f      	cmp	r1, #31
 800d508:	b538      	push	{r3, r4, r5, lr}
 800d50a:	4604      	mov	r4, r0
 800d50c:	460d      	mov	r5, r1
 800d50e:	d904      	bls.n	800d51a <_raise_r+0x14>
 800d510:	2316      	movs	r3, #22
 800d512:	6003      	str	r3, [r0, #0]
 800d514:	f04f 30ff 	mov.w	r0, #4294967295
 800d518:	bd38      	pop	{r3, r4, r5, pc}
 800d51a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d51c:	b112      	cbz	r2, 800d524 <_raise_r+0x1e>
 800d51e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d522:	b94b      	cbnz	r3, 800d538 <_raise_r+0x32>
 800d524:	4620      	mov	r0, r4
 800d526:	f000 f831 	bl	800d58c <_getpid_r>
 800d52a:	462a      	mov	r2, r5
 800d52c:	4601      	mov	r1, r0
 800d52e:	4620      	mov	r0, r4
 800d530:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d534:	f000 b818 	b.w	800d568 <_kill_r>
 800d538:	2b01      	cmp	r3, #1
 800d53a:	d00a      	beq.n	800d552 <_raise_r+0x4c>
 800d53c:	1c59      	adds	r1, r3, #1
 800d53e:	d103      	bne.n	800d548 <_raise_r+0x42>
 800d540:	2316      	movs	r3, #22
 800d542:	6003      	str	r3, [r0, #0]
 800d544:	2001      	movs	r0, #1
 800d546:	e7e7      	b.n	800d518 <_raise_r+0x12>
 800d548:	2400      	movs	r4, #0
 800d54a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d54e:	4628      	mov	r0, r5
 800d550:	4798      	blx	r3
 800d552:	2000      	movs	r0, #0
 800d554:	e7e0      	b.n	800d518 <_raise_r+0x12>
	...

0800d558 <raise>:
 800d558:	4b02      	ldr	r3, [pc, #8]	; (800d564 <raise+0xc>)
 800d55a:	4601      	mov	r1, r0
 800d55c:	6818      	ldr	r0, [r3, #0]
 800d55e:	f7ff bfd2 	b.w	800d506 <_raise_r>
 800d562:	bf00      	nop
 800d564:	20000010 	.word	0x20000010

0800d568 <_kill_r>:
 800d568:	b538      	push	{r3, r4, r5, lr}
 800d56a:	4d07      	ldr	r5, [pc, #28]	; (800d588 <_kill_r+0x20>)
 800d56c:	2300      	movs	r3, #0
 800d56e:	4604      	mov	r4, r0
 800d570:	4608      	mov	r0, r1
 800d572:	4611      	mov	r1, r2
 800d574:	602b      	str	r3, [r5, #0]
 800d576:	f7f3 ffd5 	bl	8001524 <_kill>
 800d57a:	1c43      	adds	r3, r0, #1
 800d57c:	d102      	bne.n	800d584 <_kill_r+0x1c>
 800d57e:	682b      	ldr	r3, [r5, #0]
 800d580:	b103      	cbz	r3, 800d584 <_kill_r+0x1c>
 800d582:	6023      	str	r3, [r4, #0]
 800d584:	bd38      	pop	{r3, r4, r5, pc}
 800d586:	bf00      	nop
 800d588:	200032a4 	.word	0x200032a4

0800d58c <_getpid_r>:
 800d58c:	f7f3 bfc2 	b.w	8001514 <_getpid>

0800d590 <_malloc_usable_size_r>:
 800d590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d594:	1f18      	subs	r0, r3, #4
 800d596:	2b00      	cmp	r3, #0
 800d598:	bfbc      	itt	lt
 800d59a:	580b      	ldrlt	r3, [r1, r0]
 800d59c:	18c0      	addlt	r0, r0, r3
 800d59e:	4770      	bx	lr

0800d5a0 <_init>:
 800d5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5a2:	bf00      	nop
 800d5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5a6:	bc08      	pop	{r3}
 800d5a8:	469e      	mov	lr, r3
 800d5aa:	4770      	bx	lr

0800d5ac <_fini>:
 800d5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ae:	bf00      	nop
 800d5b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5b2:	bc08      	pop	{r3}
 800d5b4:	469e      	mov	lr, r3
 800d5b6:	4770      	bx	lr
