
STM32TFG-WIFI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a58  0800e468  0800e468  0001e468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eec0  0800eec0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800eec0  0800eec0  0001eec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eec8  0800eec8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eec8  0800eec8  0001eec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eecc  0800eecc  0001eecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800eed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000334c  20000074  0800ef44  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200033c0  0800ef44  000233c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032054  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006121  00000000  00000000  000520f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002938  00000000  00000000  00058220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000026d0  00000000  00000000  0005ab58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ebb9  00000000  00000000  0005d228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000303c3  00000000  00000000  0008bde1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d25a  00000000  00000000  000bc1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c93fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bcfc  00000000  00000000  001c9450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e450 	.word	0x0800e450

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800e450 	.word	0x0800e450

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <S_SendInstructionStruct>:
	xSemaphoreGive(xSemaphoreSerialHandle);
	//Libero la memoria reservada por malloc
	free(pMov);
}

void S_SendInstructionStruct(MovementInstruction_t *pMov) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	//Transformo la instruccion a una cadena
	char *s_mov;
	I_MovementInstruction_toString(pMov, &s_mov);
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	4619      	mov	r1, r3
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f000 f904 	bl	80007a0 <I_MovementInstruction_toString>
	//Reservo el puerto serie
	while (xSemaphoreTake(xSemaphoreSerialHandle, portMAX_DELAY) != pdTRUE)
 8000598:	bf00      	nop
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <S_SendInstructionStruct+0x48>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f04f 31ff 	mov.w	r1, #4294967295
 80005a2:	4618      	mov	r0, r3
 80005a4:	f00a f902 	bl	800a7ac <xQueueSemaphoreTake>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d1f5      	bne.n	800059a <S_SendInstructionStruct+0x16>
		;
	//Envio el struct por el puerto serie
	printf("%s\n", s_mov);
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f00c fe4b 	bl	800d24c <puts>
	//Devuelvo el control del puerto serie
	xSemaphoreGive(xSemaphoreSerialHandle);
 80005b6:	4b05      	ldr	r3, [pc, #20]	; (80005cc <S_SendInstructionStruct+0x48>)
 80005b8:	6818      	ldr	r0, [r3, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	2200      	movs	r2, #0
 80005be:	2100      	movs	r1, #0
 80005c0:	f009 fdee 	bl	800a1a0 <xQueueGenericSend>
}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000094 	.word	0x20000094

080005d0 <__io_putchar>:
#include "SerialTask.h"

PUTCHAR_PROTOTYPE {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	// Transmits character ch over UART1 and UART4
	while (HAL_OK != HAL_UART_Transmit_IT(&huart1, (uint8_t*) &ch, 1)) {
 80005d8:	bf00      	nop
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	480a      	ldr	r0, [pc, #40]	; (800060c <__io_putchar+0x3c>)
 80005e2:	f005 ff2b 	bl	800643c <HAL_UART_Transmit_IT>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d1f6      	bne.n	80005da <__io_putchar+0xa>
		// Wait for transmit to finish
		;
	}
	while (HAL_OK != HAL_UART_Transmit_IT(&huart4, (uint8_t*) &ch, 1)) {
 80005ec:	bf00      	nop
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2201      	movs	r2, #1
 80005f2:	4619      	mov	r1, r3
 80005f4:	4806      	ldr	r0, [pc, #24]	; (8000610 <__io_putchar+0x40>)
 80005f6:	f005 ff21 	bl	800643c <HAL_UART_Transmit_IT>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1f6      	bne.n	80005ee <__io_putchar+0x1e>
		// Wait for transmit to finish
		;
	}
	return ch;
 8000600:	687b      	ldr	r3, [r7, #4]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000254 	.word	0x20000254
 8000610:	200001d0 	.word	0x200001d0

08000614 <serialRxTask>:

int printTransmision = 0;

void serialRxTask(void *parg) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	uint8_t ins = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	73fb      	strb	r3, [r7, #15]
	uint8_t time = 20;
 8000620:	2314      	movs	r3, #20
 8000622:	737b      	strb	r3, [r7, #13]
	uint8_t i = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	73bb      	strb	r3, [r7, #14]

	printf("rxtask");
 8000628:	4818      	ldr	r0, [pc, #96]	; (800068c <serialRxTask+0x78>)
 800062a:	f00c fd89 	bl	800d140 <iprintf>

	while (i < 25) {
 800062e:	e024      	b.n	800067a <serialRxTask+0x66>
		// Allocate memory for a MovementInstruction_t struct
		MovementInstruction_t *pMov = malloc(sizeof(MovementInstruction_t));
 8000630:	2002      	movs	r0, #2
 8000632:	f00c fc6f 	bl	800cf14 <malloc>
 8000636:	4603      	mov	r3, r0
 8000638:	60bb      	str	r3, [r7, #8]
		// Create the struct to be sent to the queue
		I_CreateInstructionStruct(ins, time, pMov);
 800063a:	7b79      	ldrb	r1, [r7, #13]
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	4618      	mov	r0, r3
 8000642:	f000 f8cb 	bl	80007dc <I_CreateInstructionStruct>
		// Send the struct to the queue
		xQueueSend(instructionQueueHandle, pMov, 1);
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <serialRxTask+0x7c>)
 8000648:	6818      	ldr	r0, [r3, #0]
 800064a:	2300      	movs	r3, #0
 800064c:	2201      	movs	r2, #1
 800064e:	68b9      	ldr	r1, [r7, #8]
 8000650:	f009 fda6 	bl	800a1a0 <xQueueGenericSend>
		// Delay for 1 second
		vTaskDelay(1000);
 8000654:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000658:	f00a fd40 	bl	800b0dc <vTaskDelay>
		// Free the memory of the MovementInstruction_t struct
		free(pMov);
 800065c:	68b8      	ldr	r0, [r7, #8]
 800065e:	f00c fc61 	bl	800cf24 <free>
		// Update the instruction to be sent
		ins = (ins + 1) % I_NUM_INSTRUCTIONS;
 8000662:	7bfb      	ldrb	r3, [r7, #15]
 8000664:	3301      	adds	r3, #1
 8000666:	2205      	movs	r2, #5
 8000668:	fb93 f1f2 	sdiv	r1, r3, r2
 800066c:	fb01 f202 	mul.w	r2, r1, r2
 8000670:	1a9b      	subs	r3, r3, r2
 8000672:	73fb      	strb	r3, [r7, #15]
		i++;
 8000674:	7bbb      	ldrb	r3, [r7, #14]
 8000676:	3301      	adds	r3, #1
 8000678:	73bb      	strb	r3, [r7, #14]
	while (i < 25) {
 800067a:	7bbb      	ldrb	r3, [r7, #14]
 800067c:	2b18      	cmp	r3, #24
 800067e:	d9d7      	bls.n	8000630 <serialRxTask+0x1c>
	}
}
 8000680:	bf00      	nop
 8000682:	bf00      	nop
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	0800e468 	.word	0x0800e468
 8000690:	20000098 	.word	0x20000098

08000694 <serialTxTask>:

void serialTxTask(void *parg) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	while (1) {
		MovementInstruction_t pMov;
		// Receive the instruction from the queue
		xQueueReceive(instructionQueueHandle, &pMov, portMAX_DELAY);
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <serialTxTask+0x2c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f107 010c 	add.w	r1, r7, #12
 80006a4:	f04f 32ff 	mov.w	r2, #4294967295
 80006a8:	4618      	mov	r0, r3
 80006aa:	f009 ff9f 	bl	800a5ec <xQueueReceive>
		// Send the instruction over the serial port
		S_SendInstructionStruct(&pMov);
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff66 	bl	8000584 <S_SendInstructionStruct>
		// Wait for the duration of the instruction
		vTaskDelay(50);
 80006b8:	2032      	movs	r0, #50	; 0x32
 80006ba:	f00a fd0f 	bl	800b0dc <vTaskDelay>
	while (1) {
 80006be:	e7ed      	b.n	800069c <serialTxTask+0x8>
 80006c0:	20000098 	.word	0x20000098

080006c4 <WebServerTask>:
	}
}

void WebServerTask(void *pArg) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	wifi_server();
 80006cc:	f001 f960 	bl	8001990 <wifi_server>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <CreateSerialObjects>:

void CreateSerialObjects() {
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	// Create a queue with 16 elements, each element has a size of 1 byte
	instructionQueueHandle = xQueueCreate(16, 1);
 80006dc:	2200      	movs	r2, #0
 80006de:	2101      	movs	r1, #1
 80006e0:	2010      	movs	r0, #16
 80006e2:	f009 fc95 	bl	800a010 <xQueueGenericCreate>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4a01      	ldr	r2, [pc, #4]	; (80006f0 <CreateSerialObjects+0x18>)
 80006ea:	6013      	str	r3, [r2, #0]
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000098 	.word	0x20000098

080006f4 <CreateSerialTask>:

void CreateSerialTask() {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af02      	add	r7, sp, #8
	xTaskCreate(WebServerTask, "TareaWebServer", 256, NULL, 2, NULL);
 80006fa:	2300      	movs	r3, #0
 80006fc:	9301      	str	r3, [sp, #4]
 80006fe:	2302      	movs	r3, #2
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	2300      	movs	r3, #0
 8000704:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000708:	490e      	ldr	r1, [pc, #56]	; (8000744 <CreateSerialTask+0x50>)
 800070a:	480f      	ldr	r0, [pc, #60]	; (8000748 <CreateSerialTask+0x54>)
 800070c:	f00a fb8b 	bl	800ae26 <xTaskCreate>
	xTaskCreate(serialTxTask, "serialTxTask", 256, NULL, 1, NULL);
 8000710:	2300      	movs	r3, #0
 8000712:	9301      	str	r3, [sp, #4]
 8000714:	2301      	movs	r3, #1
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2300      	movs	r3, #0
 800071a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800071e:	490b      	ldr	r1, [pc, #44]	; (800074c <CreateSerialTask+0x58>)
 8000720:	480b      	ldr	r0, [pc, #44]	; (8000750 <CreateSerialTask+0x5c>)
 8000722:	f00a fb80 	bl	800ae26 <xTaskCreate>
	xTaskCreate(serialRxTask, "serialRxTask", 256, NULL, 1, NULL);
 8000726:	2300      	movs	r3, #0
 8000728:	9301      	str	r3, [sp, #4]
 800072a:	2301      	movs	r3, #1
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	2300      	movs	r3, #0
 8000730:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000734:	4907      	ldr	r1, [pc, #28]	; (8000754 <CreateSerialTask+0x60>)
 8000736:	4808      	ldr	r0, [pc, #32]	; (8000758 <CreateSerialTask+0x64>)
 8000738:	f00a fb75 	bl	800ae26 <xTaskCreate>
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	0800e470 	.word	0x0800e470
 8000748:	080006c5 	.word	0x080006c5
 800074c:	0800e480 	.word	0x0800e480
 8000750:	08000695 	.word	0x08000695
 8000754:	0800e490 	.word	0x0800e490
 8000758:	08000615 	.word	0x08000615

0800075c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	static signed long xHigherPriorityTaskWoken = pdFALSE;

	// Give the semaphore to indicate that the transmission has finished
	xSemaphoreGiveFromISR(xSemaphoreSerialHandle, xHigherPriorityTaskWoken);
 8000764:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <HAL_UART_TxCpltCallback+0x38>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0b      	ldr	r2, [pc, #44]	; (8000798 <HAL_UART_TxCpltCallback+0x3c>)
 800076a:	6812      	ldr	r2, [r2, #0]
 800076c:	4611      	mov	r1, r2
 800076e:	4618      	mov	r0, r3
 8000770:	f009 feaf 	bl	800a4d2 <xQueueGiveFromISR>
	// Yield to higher priority task if necessary
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <HAL_UART_TxCpltCallback+0x3c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d007      	beq.n	800078c <HAL_UART_TxCpltCallback+0x30>
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <HAL_UART_TxCpltCallback+0x40>)
 800077e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	f3bf 8f4f 	dsb	sy
 8000788:	f3bf 8f6f 	isb	sy
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000094 	.word	0x20000094
 8000798:	20000090 	.word	0x20000090
 800079c:	e000ed04 	.word	0xe000ed04

080007a0 <I_MovementInstruction_toString>:
 *      Author: josec
 */

#include "generalTypes.h"

void I_MovementInstruction_toString(MovementInstruction_t *pMovIns, char **buf) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]

	char *s = (char*) malloc(NUM_CHARS_PER_INSTRUCTION);
 80007aa:	2307      	movs	r3, #7
 80007ac:	4618      	mov	r0, r3
 80007ae:	f00c fbb1 	bl	800cf14 <malloc>
 80007b2:	4603      	mov	r3, r0
 80007b4:	60fb      	str	r3, [r7, #12]

	sprintf(s, "%d %d", pMovIns->instruction, pMovIns->duration);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	461a      	mov	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	785b      	ldrb	r3, [r3, #1]
 80007c0:	4905      	ldr	r1, [pc, #20]	; (80007d8 <I_MovementInstruction_toString+0x38>)
 80007c2:	68f8      	ldr	r0, [r7, #12]
 80007c4:	f00c fdc4 	bl	800d350 <siprintf>

	*buf = s;
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	68fa      	ldr	r2, [r7, #12]
 80007cc:	601a      	str	r2, [r3, #0]
}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	0800e4a0 	.word	0x0800e4a0

080007dc <I_CreateInstructionStruct>:

uint8_t I_CreateInstructionStruct(uint8_t instCode, uint8_t time,
		MovementInstruction_t *pMovOut) {
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	603a      	str	r2, [r7, #0]
 80007e6:	71fb      	strb	r3, [r7, #7]
 80007e8:	460b      	mov	r3, r1
 80007ea:	71bb      	strb	r3, [r7, #6]
	// Comprueba que todos los parametros sean correctos
	if (instCode < I_NUM_INSTRUCTIONS) {
 80007ec:	2205      	movs	r2, #5
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d20e      	bcs.n	8000812 <I_CreateInstructionStruct+0x36>
		if (time < I_MAX_TIME_EXECUTION) {
 80007f4:	2264      	movs	r2, #100	; 0x64
 80007f6:	79bb      	ldrb	r3, [r7, #6]
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d208      	bcs.n	800080e <I_CreateInstructionStruct+0x32>
			if (pMovOut != NULL) {
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d005      	beq.n	800080e <I_CreateInstructionStruct+0x32>
				pMovOut->instruction = instCode;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	79fa      	ldrb	r2, [r7, #7]
 8000806:	701a      	strb	r2, [r3, #0]
				pMovOut->duration = time;
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	79ba      	ldrb	r2, [r7, #6]
 800080c:	705a      	strb	r2, [r3, #1]
			}
		}
		return 1;
 800080e:	2301      	movs	r3, #1
 8000810:	e006      	b.n	8000820 <I_CreateInstructionStruct+0x44>
	}
	// Si no devuelve una instruccion NOPE
	else {
		pMovOut->instruction = I_NOPE;
 8000812:	2200      	movs	r2, #0
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	701a      	strb	r2, [r3, #0]
		pMovOut->duration = I_MAX_TIME_EXECUTION;
 8000818:	2264      	movs	r2, #100	; 0x64
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	705a      	strb	r2, [r3, #1]
		return 0;
 800081e:	2300      	movs	r3, #0
	}
}
 8000820:	4618      	mov	r0, r3
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000830:	f001 fb57 	bl	8001ee2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000834:	f000 f85c 	bl	80008f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000838:	f000 fa26 	bl	8000c88 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800083c:	f000 f8ba 	bl	80009b4 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000840:	f000 f8f0 	bl	8000a24 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000844:	f000 f92e 	bl	8000aa4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000848:	f000 f952 	bl	8000af0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800084c:	f000 f9be 	bl	8000bcc <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000850:	f000 f9ec 	bl	8000c2c <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8000854:	f000 f98a 	bl	8000b6c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000858:	f009 f83a 	bl	80098d0 <osKernelInitialize>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of xSemaphoreSerial */
  xSemaphoreSerialHandle = osSemaphoreNew(1, 1, &xSemaphoreSerial_attributes);
 800085c:	4a17      	ldr	r2, [pc, #92]	; (80008bc <main+0x90>)
 800085e:	2101      	movs	r1, #1
 8000860:	2001      	movs	r0, #1
 8000862:	f009 f911 	bl	8009a88 <osSemaphoreNew>
 8000866:	4603      	mov	r3, r0
 8000868:	4a15      	ldr	r2, [pc, #84]	; (80008c0 <main+0x94>)
 800086a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
	/* add semaphores, ... */
	CreateSerialObjects();
 800086c:	f7ff ff34 	bl	80006d8 <CreateSerialObjects>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of instructionQueue */
  instructionQueueHandle = osMessageQueueNew (100, sizeof(MovementInstruction_t), &instructionQueue_attributes);
 8000870:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <main+0x98>)
 8000872:	2102      	movs	r1, #2
 8000874:	2064      	movs	r0, #100	; 0x64
 8000876:	f009 f990 	bl	8009b9a <osMessageQueueNew>
 800087a:	4603      	mov	r3, r0
 800087c:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <main+0x9c>)
 800087e:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of RxTask */
  RxTaskHandle = osThreadNew(serialRxTask, NULL, &RxTask_attributes);
 8000880:	4a12      	ldr	r2, [pc, #72]	; (80008cc <main+0xa0>)
 8000882:	2100      	movs	r1, #0
 8000884:	4812      	ldr	r0, [pc, #72]	; (80008d0 <main+0xa4>)
 8000886:	f009 f86d 	bl	8009964 <osThreadNew>
 800088a:	4603      	mov	r3, r0
 800088c:	4a11      	ldr	r2, [pc, #68]	; (80008d4 <main+0xa8>)
 800088e:	6013      	str	r3, [r2, #0]

  /* creation of TxTask */
  TxTaskHandle = osThreadNew(serialTxTask, NULL, &TxTask_attributes);
 8000890:	4a11      	ldr	r2, [pc, #68]	; (80008d8 <main+0xac>)
 8000892:	2100      	movs	r1, #0
 8000894:	4811      	ldr	r0, [pc, #68]	; (80008dc <main+0xb0>)
 8000896:	f009 f865 	bl	8009964 <osThreadNew>
 800089a:	4603      	mov	r3, r0
 800089c:	4a10      	ldr	r2, [pc, #64]	; (80008e0 <main+0xb4>)
 800089e:	6013      	str	r3, [r2, #0]

  /* creation of WebServerTask */
  WebServerTaskHandle = osThreadNew(WebServerTask, NULL, &WebServerTask_attributes);
 80008a0:	4a10      	ldr	r2, [pc, #64]	; (80008e4 <main+0xb8>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	4810      	ldr	r0, [pc, #64]	; (80008e8 <main+0xbc>)
 80008a6:	f009 f85d 	bl	8009964 <osThreadNew>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <main+0xc0>)
 80008ae:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	CreateSerialTask();
 80008b0:	f7ff ff20 	bl	80006f4 <CreateSerialTask>
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008b4:	f009 f830 	bl	8009918 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80008b8:	e7fe      	b.n	80008b8 <main+0x8c>
 80008ba:	bf00      	nop
 80008bc:	0800ed20 	.word	0x0800ed20
 80008c0:	20000094 	.word	0x20000094
 80008c4:	0800ed08 	.word	0x0800ed08
 80008c8:	20000098 	.word	0x20000098
 80008cc:	0800ec9c 	.word	0x0800ec9c
 80008d0:	08000615 	.word	0x08000615
 80008d4:	200007e4 	.word	0x200007e4
 80008d8:	0800ecc0 	.word	0x0800ecc0
 80008dc:	08000695 	.word	0x08000695
 80008e0:	200007e8 	.word	0x200007e8
 80008e4:	0800ece4 	.word	0x0800ece4
 80008e8:	080006c5 	.word	0x080006c5
 80008ec:	200007ec 	.word	0x200007ec

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b096      	sub	sp, #88	; 0x58
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	2244      	movs	r2, #68	; 0x44
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f00c fb36 	bl	800cf70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	463b      	mov	r3, r7
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000912:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000916:	f002 fb21 	bl	8002f5c <HAL_PWREx_ControlVoltageScaling>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000920:	f000 fb66 	bl	8000ff0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000924:	f002 fafc 	bl	8002f20 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000928:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <SystemClock_Config+0xc0>)
 800092a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800092e:	4a20      	ldr	r2, [pc, #128]	; (80009b0 <SystemClock_Config+0xc0>)
 8000930:	f023 0318 	bic.w	r3, r3, #24
 8000934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000938:	2314      	movs	r3, #20
 800093a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800093c:	2301      	movs	r3, #1
 800093e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000940:	2301      	movs	r3, #1
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000948:	2360      	movs	r3, #96	; 0x60
 800094a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094c:	2302      	movs	r3, #2
 800094e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000950:	2301      	movs	r3, #1
 8000952:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000954:	2301      	movs	r3, #1
 8000956:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000958:	2328      	movs	r3, #40	; 0x28
 800095a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800095c:	2307      	movs	r3, #7
 800095e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000960:	2302      	movs	r3, #2
 8000962:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000964:	2302      	movs	r3, #2
 8000966:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4618      	mov	r0, r3
 800096e:	f002 fc17 	bl	80031a0 <HAL_RCC_OscConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000978:	f000 fb3a 	bl	8000ff0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097c:	230f      	movs	r3, #15
 800097e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000980:	2303      	movs	r3, #3
 8000982:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000990:	463b      	mov	r3, r7
 8000992:	2104      	movs	r1, #4
 8000994:	4618      	mov	r0, r3
 8000996:	f002 ffdf 	bl	8003958 <HAL_RCC_ClockConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009a0:	f000 fb26 	bl	8000ff0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80009a4:	f003 fd18 	bl	80043d8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80009a8:	bf00      	nop
 80009aa:	3758      	adds	r7, #88	; 0x58
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40021000 	.word	0x40021000

080009b4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 80009ba:	4a19      	ldr	r2, [pc, #100]	; (8000a20 <MX_DFSDM1_Init+0x6c>)
 80009bc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80009c4:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 80009cc:	2202      	movs	r2, #2
 80009ce:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 80009d8:	2200      	movs	r2, #0
 80009da:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 80009de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009e2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80009e4:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 80009ec:	2204      	movs	r2, #4
 80009ee:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 8000a0a:	f001 fba9 	bl	8002160 <HAL_DFSDM_ChannelInit>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000a14:	f000 faec 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2000009c 	.word	0x2000009c
 8000a20:	40016020 	.word	0x40016020

08000a24 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_I2C2_Init+0x74>)
 8000a2a:	4a1c      	ldr	r2, [pc, #112]	; (8000a9c <MX_I2C2_Init+0x78>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_I2C2_Init+0x74>)
 8000a30:	4a1b      	ldr	r2, [pc, #108]	; (8000aa0 <MX_I2C2_Init+0x7c>)
 8000a32:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_I2C2_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_I2C2_Init+0x74>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_I2C2_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_I2C2_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_I2C2_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_I2C2_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_I2C2_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a5e:	480e      	ldr	r0, [pc, #56]	; (8000a98 <MX_I2C2_Init+0x74>)
 8000a60:	f001 fff0 	bl	8002a44 <HAL_I2C_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a6a:	f000 fac1 	bl	8000ff0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4809      	ldr	r0, [pc, #36]	; (8000a98 <MX_I2C2_Init+0x74>)
 8000a72:	f002 f876 	bl	8002b62 <HAL_I2CEx_ConfigAnalogFilter>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a7c:	f000 fab8 	bl	8000ff0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a80:	2100      	movs	r1, #0
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_I2C2_Init+0x74>)
 8000a84:	f002 f8b8 	bl	8002bf8 <HAL_I2CEx_ConfigDigitalFilter>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a8e:	f000 faaf 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200000d4 	.word	0x200000d4
 8000a9c:	40005800 	.word	0x40005800
 8000aa0:	10909cec 	.word	0x10909cec

08000aa4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_QUADSPI_Init+0x44>)
 8000aaa:	4a10      	ldr	r2, [pc, #64]	; (8000aec <MX_QUADSPI_Init+0x48>)
 8000aac:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_QUADSPI_Init+0x44>)
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_QUADSPI_Init+0x44>)
 8000ab6:	2204      	movs	r2, #4
 8000ab8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_QUADSPI_Init+0x44>)
 8000abc:	2210      	movs	r2, #16
 8000abe:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_QUADSPI_Init+0x44>)
 8000ac2:	2217      	movs	r2, #23
 8000ac4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_QUADSPI_Init+0x44>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_QUADSPI_Init+0x44>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_QUADSPI_Init+0x44>)
 8000ad4:	f002 faa8 	bl	8003028 <HAL_QSPI_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000ade:	f000 fa87 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000128 	.word	0x20000128
 8000aec:	a0001000 	.word	0xa0001000

08000af0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000af6:	4a1c      	ldr	r2, [pc, #112]	; (8000b68 <MX_SPI3_Init+0x78>)
 8000af8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000afc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b00:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000b0a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b0e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000b1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b22:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000b3e:	2207      	movs	r2, #7
 8000b40:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000b4a:	2208      	movs	r2, #8
 8000b4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000b50:	f003 fe24 	bl	800479c <HAL_SPI_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000b5a:	f000 fa49 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	2000016c 	.word	0x2000016c
 8000b68:	40003c00 	.word	0x40003c00

08000b6c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_UART4_Init+0x58>)
 8000b72:	4a15      	ldr	r2, [pc, #84]	; (8000bc8 <MX_UART4_Init+0x5c>)
 8000b74:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <MX_UART4_Init+0x58>)
 8000b78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b7c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_UART4_Init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_UART4_Init+0x58>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_UART4_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_UART4_Init+0x58>)
 8000b92:	220c      	movs	r2, #12
 8000b94:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_UART4_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_UART4_Init+0x58>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_UART4_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_UART4_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_UART4_Init+0x58>)
 8000bb0:	f005 fbf6 	bl	80063a0 <HAL_UART_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000bba:	f000 fa19 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200001d0 	.word	0x200001d0
 8000bc8:	40004c00 	.word	0x40004c00

08000bcc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_USART1_UART_Init+0x58>)
 8000bd2:	4a15      	ldr	r2, [pc, #84]	; (8000c28 <MX_USART1_UART_Init+0x5c>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <MX_USART1_UART_Init+0x58>)
 8000bd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_USART1_UART_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_USART1_UART_Init+0x58>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_USART1_UART_Init+0x58>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_USART1_UART_Init+0x58>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <MX_USART1_UART_Init+0x58>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_USART1_UART_Init+0x58>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_USART1_UART_Init+0x58>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_USART1_UART_Init+0x58>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_USART1_UART_Init+0x58>)
 8000c10:	f005 fbc6 	bl	80063a0 <HAL_UART_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c1a:	f000 f9e9 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000254 	.word	0x20000254
 8000c28:	40013800 	.word	0x40013800

08000c2c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c36:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c3a:	2206      	movs	r2, #6
 8000c3c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c40:	2202      	movs	r2, #2
 8000c42:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c46:	2202      	movs	r2, #2
 8000c48:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c70:	f002 f80e 	bl	8002c90 <HAL_PCD_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c7a:	f000 f9b9 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200002d8 	.word	0x200002d8

08000c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c9e:	4bbc      	ldr	r3, [pc, #752]	; (8000f90 <MX_GPIO_Init+0x308>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	4abb      	ldr	r2, [pc, #748]	; (8000f90 <MX_GPIO_Init+0x308>)
 8000ca4:	f043 0310 	orr.w	r3, r3, #16
 8000ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000caa:	4bb9      	ldr	r3, [pc, #740]	; (8000f90 <MX_GPIO_Init+0x308>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cae:	f003 0310 	and.w	r3, r3, #16
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb6:	4bb6      	ldr	r3, [pc, #728]	; (8000f90 <MX_GPIO_Init+0x308>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cba:	4ab5      	ldr	r2, [pc, #724]	; (8000f90 <MX_GPIO_Init+0x308>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc2:	4bb3      	ldr	r3, [pc, #716]	; (8000f90 <MX_GPIO_Init+0x308>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4bb0      	ldr	r3, [pc, #704]	; (8000f90 <MX_GPIO_Init+0x308>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	4aaf      	ldr	r2, [pc, #700]	; (8000f90 <MX_GPIO_Init+0x308>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cda:	4bad      	ldr	r3, [pc, #692]	; (8000f90 <MX_GPIO_Init+0x308>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	4baa      	ldr	r3, [pc, #680]	; (8000f90 <MX_GPIO_Init+0x308>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	4aa9      	ldr	r2, [pc, #676]	; (8000f90 <MX_GPIO_Init+0x308>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf2:	4ba7      	ldr	r3, [pc, #668]	; (8000f90 <MX_GPIO_Init+0x308>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfe:	4ba4      	ldr	r3, [pc, #656]	; (8000f90 <MX_GPIO_Init+0x308>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	4aa3      	ldr	r2, [pc, #652]	; (8000f90 <MX_GPIO_Init+0x308>)
 8000d04:	f043 0308 	orr.w	r3, r3, #8
 8000d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0a:	4ba1      	ldr	r3, [pc, #644]	; (8000f90 <MX_GPIO_Init+0x308>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0e:	f003 0308 	and.w	r3, r3, #8
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000d1c:	489d      	ldr	r0, [pc, #628]	; (8000f94 <MX_GPIO_Init+0x30c>)
 8000d1e:	f001 fe61 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	f248 1104 	movw	r1, #33028	; 0x8104
 8000d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2c:	f001 fe5a 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000d30:	2200      	movs	r2, #0
 8000d32:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000d36:	4898      	ldr	r0, [pc, #608]	; (8000f98 <MX_GPIO_Init+0x310>)
 8000d38:	f001 fe54 	bl	80029e4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f241 0181 	movw	r1, #4225	; 0x1081
 8000d42:	4896      	ldr	r0, [pc, #600]	; (8000f9c <MX_GPIO_Init+0x314>)
 8000d44:	f001 fe4e 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d4e:	4893      	ldr	r0, [pc, #588]	; (8000f9c <MX_GPIO_Init+0x314>)
 8000d50:	f001 fe48 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000d5a:	4891      	ldr	r0, [pc, #580]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000d5c:	f001 fe42 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	2120      	movs	r1, #32
 8000d64:	488c      	ldr	r0, [pc, #560]	; (8000f98 <MX_GPIO_Init+0x310>)
 8000d66:	f001 fe3d 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	4889      	ldr	r0, [pc, #548]	; (8000f94 <MX_GPIO_Init+0x30c>)
 8000d70:	f001 fe38 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000d74:	f240 1315 	movw	r3, #277	; 0x115
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4881      	ldr	r0, [pc, #516]	; (8000f94 <MX_GPIO_Init+0x30c>)
 8000d8e:	f001 fb73 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000d92:	236a      	movs	r3, #106	; 0x6a
 8000d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d96:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	487b      	ldr	r0, [pc, #492]	; (8000f94 <MX_GPIO_Init+0x30c>)
 8000da8:	f001 fb66 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000dac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000db2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4877      	ldr	r0, [pc, #476]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000dc4:	f001 fb58 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000dc8:	233f      	movs	r3, #63	; 0x3f
 8000dca:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dcc:	230b      	movs	r3, #11
 8000dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4871      	ldr	r0, [pc, #452]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000ddc:	f001 fb4c 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000de0:	f248 1304 	movw	r3, #33028	; 0x8104
 8000de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfc:	f001 fb3c 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000e00:	2308      	movs	r3, #8
 8000e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e10:	2301      	movs	r3, #1
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e1e:	f001 fb2b 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000e22:	23e0      	movs	r3, #224	; 0xe0
 8000e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e32:	2305      	movs	r3, #5
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e40:	f001 fb1a 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000e44:	2301      	movs	r3, #1
 8000e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e48:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	484f      	ldr	r0, [pc, #316]	; (8000f98 <MX_GPIO_Init+0x310>)
 8000e5a:	f001 fb0d 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e62:	230b      	movs	r3, #11
 8000e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4849      	ldr	r0, [pc, #292]	; (8000f98 <MX_GPIO_Init+0x310>)
 8000e72:	f001 fb01 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e76:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000e7a:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4842      	ldr	r0, [pc, #264]	; (8000f98 <MX_GPIO_Init+0x310>)
 8000e90:	f001 faf2 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000e94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ea6:	2307      	movs	r3, #7
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	483a      	ldr	r0, [pc, #232]	; (8000f9c <MX_GPIO_Init+0x314>)
 8000eb2:	f001 fae1 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000eb6:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000eba:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ebc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4833      	ldr	r0, [pc, #204]	; (8000f9c <MX_GPIO_Init+0x314>)
 8000ece:	f001 fad3 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000ed2:	f243 0381 	movw	r3, #12417	; 0x3081
 8000ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	482c      	ldr	r0, [pc, #176]	; (8000f9c <MX_GPIO_Init+0x314>)
 8000eec:	f001 fac4 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000ef0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	4825      	ldr	r0, [pc, #148]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000f0a:	f001 fab5 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000f0e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f14:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	481e      	ldr	r0, [pc, #120]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000f26:	f001 faa7 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4815      	ldr	r0, [pc, #84]	; (8000f9c <MX_GPIO_Init+0x314>)
 8000f46:	f001 fa97 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PD5 PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|GPIO_PIN_5|PMOD_UART2_RX_Pin;
 8000f4a:	2378      	movs	r3, #120	; 0x78
 8000f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f56:	2303      	movs	r3, #3
 8000f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	480d      	ldr	r0, [pc, #52]	; (8000f9c <MX_GPIO_Init+0x314>)
 8000f66:	f001 fa87 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000f6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f70:	2312      	movs	r3, #18
 8000f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	4804      	ldr	r0, [pc, #16]	; (8000f98 <MX_GPIO_Init+0x310>)
 8000f88:	f001 fa76 	bl	8002478 <HAL_GPIO_Init>
 8000f8c:	e00a      	b.n	8000fa4 <MX_GPIO_Init+0x31c>
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000
 8000f94:	48001000 	.word	0x48001000
 8000f98:	48000400 	.word	0x48000400
 8000f9c:	48000c00 	.word	0x48000c00
 8000fa0:	48000800 	.word	0x48000800

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2105      	movs	r1, #5
 8000fa8:	2017      	movs	r0, #23
 8000faa:	f001 f8af 	bl	800210c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fae:	2017      	movs	r0, #23
 8000fb0:	f001 f8c8 	bl	8002144 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2105      	movs	r1, #5
 8000fb8:	2028      	movs	r0, #40	; 0x28
 8000fba:	f001 f8a7 	bl	800210c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fbe:	2028      	movs	r0, #40	; 0x28
 8000fc0:	f001 f8c0 	bl	8002144 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fc4:	bf00      	nop
 8000fc6:	3728      	adds	r7, #40	; 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d101      	bne.n	8000fe2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fde:	f000 ff99 	bl	8001f14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40000800 	.word	0x40000800

08000ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff4:	b672      	cpsid	i
}
 8000ff6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ff8:	e7fe      	b.n	8000ff8 <Error_Handler+0x8>
	...

08000ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <HAL_MspInit+0x4c>)
 8001004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001006:	4a10      	ldr	r2, [pc, #64]	; (8001048 <HAL_MspInit+0x4c>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6613      	str	r3, [r2, #96]	; 0x60
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_MspInit+0x4c>)
 8001010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <HAL_MspInit+0x4c>)
 800101c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <HAL_MspInit+0x4c>)
 8001020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001024:	6593      	str	r3, [r2, #88]	; 0x58
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <HAL_MspInit+0x4c>)
 8001028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	210f      	movs	r1, #15
 8001036:	f06f 0001 	mvn.w	r0, #1
 800103a:	f001 f867 	bl	800210c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000

0800104c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b0ac      	sub	sp, #176	; 0xb0
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2288      	movs	r2, #136	; 0x88
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f00b ff7f 	bl	800cf70 <memset>
  if(DFSDM1_Init == 0)
 8001072:	4b25      	ldr	r3, [pc, #148]	; (8001108 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d142      	bne.n	8001100 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800107a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800107e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001080:	2300      	movs	r3, #0
 8001082:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4618      	mov	r0, r3
 800108c:	f002 feba 	bl	8003e04 <HAL_RCCEx_PeriphCLKConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001096:	f7ff ffab 	bl	8000ff0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800109a:	4b1c      	ldr	r3, [pc, #112]	; (800110c <HAL_DFSDM_ChannelMspInit+0xc0>)
 800109c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109e:	4a1b      	ldr	r2, [pc, #108]	; (800110c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010a4:	6613      	str	r3, [r2, #96]	; 0x60
 80010a6:	4b19      	ldr	r3, [pc, #100]	; (800110c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010b2:	4b16      	ldr	r3, [pc, #88]	; (800110c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	4a15      	ldr	r2, [pc, #84]	; (800110c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010b8:	f043 0310 	orr.w	r3, r3, #16
 80010bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010be:	4b13      	ldr	r3, [pc, #76]	; (800110c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	f003 0310 	and.w	r3, r3, #16
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80010ca:	f44f 7320 	mov.w	r3, #640	; 0x280
 80010ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80010e4:	2306      	movs	r3, #6
 80010e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010ee:	4619      	mov	r1, r3
 80010f0:	4807      	ldr	r0, [pc, #28]	; (8001110 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80010f2:	f001 f9c1 	bl	8002478 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80010f6:	4b04      	ldr	r3, [pc, #16]	; (8001108 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	4a02      	ldr	r2, [pc, #8]	; (8001108 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010fe:	6013      	str	r3, [r2, #0]
  }

}
 8001100:	bf00      	nop
 8001102:	37b0      	adds	r7, #176	; 0xb0
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200007f0 	.word	0x200007f0
 800110c:	40021000 	.word	0x40021000
 8001110:	48001000 	.word	0x48001000

08001114 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b0ac      	sub	sp, #176	; 0xb0
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2288      	movs	r2, #136	; 0x88
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f00b ff1b 	bl	800cf70 <memset>
  if(hi2c->Instance==I2C2)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a21      	ldr	r2, [pc, #132]	; (80011c4 <HAL_I2C_MspInit+0xb0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d13b      	bne.n	80011bc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001148:	2300      	movs	r3, #0
 800114a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4618      	mov	r0, r3
 8001152:	f002 fe57 	bl	8003e04 <HAL_RCCEx_PeriphCLKConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800115c:	f7ff ff48 	bl	8000ff0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_I2C_MspInit+0xb4>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001164:	4a18      	ldr	r2, [pc, #96]	; (80011c8 <HAL_I2C_MspInit+0xb4>)
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <HAL_I2C_MspInit+0xb4>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001178:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800117c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001180:	2312      	movs	r3, #18
 8001182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001186:	2301      	movs	r3, #1
 8001188:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001192:	2304      	movs	r3, #4
 8001194:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001198:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800119c:	4619      	mov	r1, r3
 800119e:	480b      	ldr	r0, [pc, #44]	; (80011cc <HAL_I2C_MspInit+0xb8>)
 80011a0:	f001 f96a 	bl	8002478 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <HAL_I2C_MspInit+0xb4>)
 80011a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a8:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <HAL_I2C_MspInit+0xb4>)
 80011aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011ae:	6593      	str	r3, [r2, #88]	; 0x58
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_I2C_MspInit+0xb4>)
 80011b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011bc:	bf00      	nop
 80011be:	37b0      	adds	r7, #176	; 0xb0
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40005800 	.word	0x40005800
 80011c8:	40021000 	.word	0x40021000
 80011cc:	48000400 	.word	0x48000400

080011d0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a17      	ldr	r2, [pc, #92]	; (800124c <HAL_QSPI_MspInit+0x7c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d128      	bne.n	8001244 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <HAL_QSPI_MspInit+0x80>)
 80011f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011f6:	4a16      	ldr	r2, [pc, #88]	; (8001250 <HAL_QSPI_MspInit+0x80>)
 80011f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011fc:	6513      	str	r3, [r2, #80]	; 0x50
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <HAL_QSPI_MspInit+0x80>)
 8001200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_QSPI_MspInit+0x80>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	4a10      	ldr	r2, [pc, #64]	; (8001250 <HAL_QSPI_MspInit+0x80>)
 8001210:	f043 0310 	orr.w	r3, r3, #16
 8001214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <HAL_QSPI_MspInit+0x80>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	f003 0310 	and.w	r3, r3, #16
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001222:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001226:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001230:	2303      	movs	r3, #3
 8001232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001234:	230a      	movs	r3, #10
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <HAL_QSPI_MspInit+0x84>)
 8001240:	f001 f91a 	bl	8002478 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001244:	bf00      	nop
 8001246:	3728      	adds	r7, #40	; 0x28
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	a0001000 	.word	0xa0001000
 8001250:	40021000 	.word	0x40021000
 8001254:	48001000 	.word	0x48001000

08001258 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a17      	ldr	r2, [pc, #92]	; (80012d4 <HAL_SPI_MspInit+0x7c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d128      	bne.n	80012cc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <HAL_SPI_MspInit+0x80>)
 800127c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127e:	4a16      	ldr	r2, [pc, #88]	; (80012d8 <HAL_SPI_MspInit+0x80>)
 8001280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001284:	6593      	str	r3, [r2, #88]	; 0x58
 8001286:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <HAL_SPI_MspInit+0x80>)
 8001288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <HAL_SPI_MspInit+0x80>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	4a10      	ldr	r2, [pc, #64]	; (80012d8 <HAL_SPI_MspInit+0x80>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_SPI_MspInit+0x80>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80012aa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012bc:	2306      	movs	r3, #6
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <HAL_SPI_MspInit+0x84>)
 80012c8:	f001 f8d6 	bl	8002478 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012cc:	bf00      	nop
 80012ce:	3728      	adds	r7, #40	; 0x28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40003c00 	.word	0x40003c00
 80012d8:	40021000 	.word	0x40021000
 80012dc:	48000800 	.word	0x48000800

080012e0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a08      	ldr	r2, [pc, #32]	; (8001310 <HAL_SPI_MspDeInit+0x30>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d10a      	bne.n	8001308 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_SPI_MspDeInit+0x34>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	4a07      	ldr	r2, [pc, #28]	; (8001314 <HAL_SPI_MspDeInit+0x34>)
 80012f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80012fc:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 80012fe:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <HAL_SPI_MspDeInit+0x38>)
 8001304:	f001 fa62 	bl	80027cc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40003c00 	.word	0x40003c00
 8001314:	40021000 	.word	0x40021000
 8001318:	48000800 	.word	0x48000800

0800131c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b0ae      	sub	sp, #184	; 0xb8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	2288      	movs	r2, #136	; 0x88
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f00b fe17 	bl	800cf70 <memset>
  if(huart->Instance==UART4)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a4a      	ldr	r2, [pc, #296]	; (8001470 <HAL_UART_MspInit+0x154>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d144      	bne.n	80013d6 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800134c:	2308      	movs	r3, #8
 800134e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001350:	2300      	movs	r3, #0
 8001352:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4618      	mov	r0, r3
 800135a:	f002 fd53 	bl	8003e04 <HAL_RCCEx_PeriphCLKConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001364:	f7ff fe44 	bl	8000ff0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001368:	4b42      	ldr	r3, [pc, #264]	; (8001474 <HAL_UART_MspInit+0x158>)
 800136a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136c:	4a41      	ldr	r2, [pc, #260]	; (8001474 <HAL_UART_MspInit+0x158>)
 800136e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001372:	6593      	str	r3, [r2, #88]	; 0x58
 8001374:	4b3f      	ldr	r3, [pc, #252]	; (8001474 <HAL_UART_MspInit+0x158>)
 8001376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001378:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800137c:	61bb      	str	r3, [r7, #24]
 800137e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001380:	4b3c      	ldr	r3, [pc, #240]	; (8001474 <HAL_UART_MspInit+0x158>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001384:	4a3b      	ldr	r2, [pc, #236]	; (8001474 <HAL_UART_MspInit+0x158>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138c:	4b39      	ldr	r3, [pc, #228]	; (8001474 <HAL_UART_MspInit+0x158>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001398:	2303      	movs	r3, #3
 800139a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80013b0:	2308      	movs	r3, #8
 80013b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013ba:	4619      	mov	r1, r3
 80013bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c0:	f001 f85a 	bl	8002478 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2105      	movs	r1, #5
 80013c8:	2034      	movs	r0, #52	; 0x34
 80013ca:	f000 fe9f 	bl	800210c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80013ce:	2034      	movs	r0, #52	; 0x34
 80013d0:	f000 feb8 	bl	8002144 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013d4:	e047      	b.n	8001466 <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART1)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a27      	ldr	r2, [pc, #156]	; (8001478 <HAL_UART_MspInit+0x15c>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d142      	bne.n	8001466 <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013e4:	2300      	movs	r3, #0
 80013e6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	4618      	mov	r0, r3
 80013ee:	f002 fd09 	bl	8003e04 <HAL_RCCEx_PeriphCLKConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80013f8:	f7ff fdfa 	bl	8000ff0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <HAL_UART_MspInit+0x158>)
 80013fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001400:	4a1c      	ldr	r2, [pc, #112]	; (8001474 <HAL_UART_MspInit+0x158>)
 8001402:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001406:	6613      	str	r3, [r2, #96]	; 0x60
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <HAL_UART_MspInit+0x158>)
 800140a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800140c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_UART_MspInit+0x158>)
 8001416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001418:	4a16      	ldr	r2, [pc, #88]	; (8001474 <HAL_UART_MspInit+0x158>)
 800141a:	f043 0302 	orr.w	r3, r3, #2
 800141e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <HAL_UART_MspInit+0x158>)
 8001422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800142c:	23c0      	movs	r3, #192	; 0xc0
 800142e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001444:	2307      	movs	r3, #7
 8001446:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800144e:	4619      	mov	r1, r3
 8001450:	480a      	ldr	r0, [pc, #40]	; (800147c <HAL_UART_MspInit+0x160>)
 8001452:	f001 f811 	bl	8002478 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2105      	movs	r1, #5
 800145a:	2025      	movs	r0, #37	; 0x25
 800145c:	f000 fe56 	bl	800210c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001460:	2025      	movs	r0, #37	; 0x25
 8001462:	f000 fe6f 	bl	8002144 <HAL_NVIC_EnableIRQ>
}
 8001466:	bf00      	nop
 8001468:	37b8      	adds	r7, #184	; 0xb8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40004c00 	.word	0x40004c00
 8001474:	40021000 	.word	0x40021000
 8001478:	40013800 	.word	0x40013800
 800147c:	48000400 	.word	0x48000400

08001480 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b0ac      	sub	sp, #176	; 0xb0
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2288      	movs	r2, #136	; 0x88
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f00b fd65 	bl	800cf70 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014ae:	d17c      	bne.n	80015aa <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80014b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80014b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80014ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80014be:	2301      	movs	r3, #1
 80014c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80014c2:	2301      	movs	r3, #1
 80014c4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80014c6:	2318      	movs	r3, #24
 80014c8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80014ca:	2307      	movs	r3, #7
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80014ce:	2302      	movs	r3, #2
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80014d2:	2302      	movs	r3, #2
 80014d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80014d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014da:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4618      	mov	r0, r3
 80014e2:	f002 fc8f 	bl	8003e04 <HAL_RCCEx_PeriphCLKConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80014ec:	f7ff fd80 	bl	8000ff0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f0:	4b30      	ldr	r3, [pc, #192]	; (80015b4 <HAL_PCD_MspInit+0x134>)
 80014f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f4:	4a2f      	ldr	r2, [pc, #188]	; (80015b4 <HAL_PCD_MspInit+0x134>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fc:	4b2d      	ldr	r3, [pc, #180]	; (80015b4 <HAL_PCD_MspInit+0x134>)
 80014fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800150c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800151c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001520:	4619      	mov	r1, r3
 8001522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001526:	f000 ffa7 	bl	8002478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800152a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800152e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153e:	2303      	movs	r3, #3
 8001540:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001544:	230a      	movs	r3, #10
 8001546:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800154e:	4619      	mov	r1, r3
 8001550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001554:	f000 ff90 	bl	8002478 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001558:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <HAL_PCD_MspInit+0x134>)
 800155a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155c:	4a15      	ldr	r2, [pc, #84]	; (80015b4 <HAL_PCD_MspInit+0x134>)
 800155e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001562:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <HAL_PCD_MspInit+0x134>)
 8001566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001570:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <HAL_PCD_MspInit+0x134>)
 8001572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d114      	bne.n	80015a6 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800157c:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <HAL_PCD_MspInit+0x134>)
 800157e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001580:	4a0c      	ldr	r2, [pc, #48]	; (80015b4 <HAL_PCD_MspInit+0x134>)
 8001582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001586:	6593      	str	r3, [r2, #88]	; 0x58
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <HAL_PCD_MspInit+0x134>)
 800158a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001594:	f001 fd38 	bl	8003008 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_PCD_MspInit+0x134>)
 800159a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159c:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <HAL_PCD_MspInit+0x134>)
 800159e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a2:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80015a4:	e001      	b.n	80015aa <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80015a6:	f001 fd2f 	bl	8003008 <HAL_PWREx_EnableVddUSB>
}
 80015aa:	bf00      	nop
 80015ac:	37b0      	adds	r7, #176	; 0xb0
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000

080015b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08e      	sub	sp, #56	; 0x38
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80015c6:	4b34      	ldr	r3, [pc, #208]	; (8001698 <HAL_InitTick+0xe0>)
 80015c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ca:	4a33      	ldr	r2, [pc, #204]	; (8001698 <HAL_InitTick+0xe0>)
 80015cc:	f043 0304 	orr.w	r3, r3, #4
 80015d0:	6593      	str	r3, [r2, #88]	; 0x58
 80015d2:	4b31      	ldr	r3, [pc, #196]	; (8001698 <HAL_InitTick+0xe0>)
 80015d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015de:	f107 0210 	add.w	r2, r7, #16
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f002 fb79 	bl	8003ce0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d103      	bne.n	8001600 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015f8:	f002 fb46 	bl	8003c88 <HAL_RCC_GetPCLK1Freq>
 80015fc:	6378      	str	r0, [r7, #52]	; 0x34
 80015fe:	e004      	b.n	800160a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001600:	f002 fb42 	bl	8003c88 <HAL_RCC_GetPCLK1Freq>
 8001604:	4603      	mov	r3, r0
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800160a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800160c:	4a23      	ldr	r2, [pc, #140]	; (800169c <HAL_InitTick+0xe4>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	0c9b      	lsrs	r3, r3, #18
 8001614:	3b01      	subs	r3, #1
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001618:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <HAL_InitTick+0xe8>)
 800161a:	4a22      	ldr	r2, [pc, #136]	; (80016a4 <HAL_InitTick+0xec>)
 800161c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <HAL_InitTick+0xe8>)
 8001620:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001624:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001626:	4a1e      	ldr	r2, [pc, #120]	; (80016a0 <HAL_InitTick+0xe8>)
 8001628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800162c:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <HAL_InitTick+0xe8>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001632:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <HAL_InitTick+0xe8>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001638:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <HAL_InitTick+0xe8>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800163e:	4818      	ldr	r0, [pc, #96]	; (80016a0 <HAL_InitTick+0xe8>)
 8001640:	f004 fbdd 	bl	8005dfe <HAL_TIM_Base_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800164a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800164e:	2b00      	cmp	r3, #0
 8001650:	d11b      	bne.n	800168a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001652:	4813      	ldr	r0, [pc, #76]	; (80016a0 <HAL_InitTick+0xe8>)
 8001654:	f004 fc34 	bl	8005ec0 <HAL_TIM_Base_Start_IT>
 8001658:	4603      	mov	r3, r0
 800165a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800165e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001662:	2b00      	cmp	r3, #0
 8001664:	d111      	bne.n	800168a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001666:	201e      	movs	r0, #30
 8001668:	f000 fd6c 	bl	8002144 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b0f      	cmp	r3, #15
 8001670:	d808      	bhi.n	8001684 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001672:	2200      	movs	r2, #0
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	201e      	movs	r0, #30
 8001678:	f000 fd48 	bl	800210c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800167c:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <HAL_InitTick+0xf0>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	e002      	b.n	800168a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800168a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800168e:	4618      	mov	r0, r3
 8001690:	3738      	adds	r7, #56	; 0x38
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000
 800169c:	431bde83 	.word	0x431bde83
 80016a0:	200007f4 	.word	0x200007f4
 80016a4:	40000800 	.word	0x40000800
 80016a8:	20000004 	.word	0x20000004

080016ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <NMI_Handler+0x4>

080016b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <MemManage_Handler+0x4>

080016be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <BusFault_Handler+0x4>

080016c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <UsageFault_Handler+0x4>

080016ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80016dc:	2020      	movs	r0, #32
 80016de:	f001 f999 	bl	8002a14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80016e2:	2040      	movs	r0, #64	; 0x40
 80016e4:	f001 f996 	bl	8002a14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80016e8:	2080      	movs	r0, #128	; 0x80
 80016ea:	f001 f993 	bl	8002a14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80016ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016f2:	f001 f98f 	bl	8002a14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <TIM4_IRQHandler+0x10>)
 8001702:	f004 fc4d 	bl	8005fa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200007f4 	.word	0x200007f4

08001710 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <USART1_IRQHandler+0x10>)
 8001716:	f004 feff 	bl	8006518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000254 	.word	0x20000254

08001724 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001728:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800172c:	f001 f972 	bl	8002a14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001730:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001734:	f001 f96e 	bl	8002a14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001738:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800173c:	f001 f96a 	bl	8002a14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001740:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001744:	f001 f966 	bl	8002a14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001748:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800174c:	f001 f962 	bl	8002a14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}

08001754 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001758:	4802      	ldr	r0, [pc, #8]	; (8001764 <UART4_IRQHandler+0x10>)
 800175a:	f004 fedd 	bl	8006518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200001d0 	.word	0x200001d0

08001768 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
	return 1;
 800176c:	2301      	movs	r3, #1
}
 800176e:	4618      	mov	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <_kill>:

int _kill(int pid, int sig)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001782:	f00b faa3 	bl	800cccc <__errno>
 8001786:	4603      	mov	r3, r0
 8001788:	2216      	movs	r2, #22
 800178a:	601a      	str	r2, [r3, #0]
	return -1;
 800178c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001790:	4618      	mov	r0, r3
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <_exit>:

void _exit (int status)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017a0:	f04f 31ff 	mov.w	r1, #4294967295
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ffe7 	bl	8001778 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017aa:	e7fe      	b.n	80017aa <_exit+0x12>

080017ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	e00a      	b.n	80017d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017be:	f3af 8000 	nop.w
 80017c2:	4601      	mov	r1, r0
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	1c5a      	adds	r2, r3, #1
 80017c8:	60ba      	str	r2, [r7, #8]
 80017ca:	b2ca      	uxtb	r2, r1
 80017cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	3301      	adds	r3, #1
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	429a      	cmp	r2, r3
 80017da:	dbf0      	blt.n	80017be <_read+0x12>
	}

return len;
 80017dc:	687b      	ldr	r3, [r7, #4]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b086      	sub	sp, #24
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	60f8      	str	r0, [r7, #12]
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	e009      	b.n	800180c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	60ba      	str	r2, [r7, #8]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe fee5 	bl	80005d0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	3301      	adds	r3, #1
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	429a      	cmp	r2, r3
 8001812:	dbf1      	blt.n	80017f8 <_write+0x12>
	}
	return len;
 8001814:	687b      	ldr	r3, [r7, #4]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <_close>:

int _close(int file)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
	return -1;
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
}
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001846:	605a      	str	r2, [r3, #4]
	return 0;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <_isatty>:

int _isatty(int file)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
	return 1;
 800185e:	2301      	movs	r3, #1
}
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
	return 0;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001890:	4a14      	ldr	r2, [pc, #80]	; (80018e4 <_sbrk+0x5c>)
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <_sbrk+0x60>)
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800189c:	4b13      	ldr	r3, [pc, #76]	; (80018ec <_sbrk+0x64>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d102      	bne.n	80018aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <_sbrk+0x64>)
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <_sbrk+0x68>)
 80018a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <_sbrk+0x64>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d207      	bcs.n	80018c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018b8:	f00b fa08 	bl	800cccc <__errno>
 80018bc:	4603      	mov	r3, r0
 80018be:	220c      	movs	r2, #12
 80018c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018c2:	f04f 33ff 	mov.w	r3, #4294967295
 80018c6:	e009      	b.n	80018dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ce:	4b07      	ldr	r3, [pc, #28]	; (80018ec <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	4a05      	ldr	r2, [pc, #20]	; (80018ec <_sbrk+0x64>)
 80018d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018da:	68fb      	ldr	r3, [r7, #12]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20018000 	.word	0x20018000
 80018e8:	00000400 	.word	0x00000400
 80018ec:	20000840 	.word	0x20000840
 80018f0:	200033c0 	.word	0x200033c0

080018f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <SystemInit+0x20>)
 80018fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fe:	4a05      	ldr	r2, [pc, #20]	; (8001914 <SystemInit+0x20>)
 8001900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <wifi_start>:
static WIFI_Status_t SendWebPage(uint8_t ledIsOn, uint8_t temperature);
static int wifi_start(void);
static int wifi_connect(void);
static bool WebServerProcess(void);

static int wifi_start(void) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
	uint8_t MAC_Addr[6];

	/*Initialize and use WIFI module */
	if (WIFI_Init() == WIFI_STATUS_OK) {
 800191e:	f007 fe2d 	bl	800957c <WIFI_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d109      	bne.n	800193c <wifi_start+0x24>
		//LOG(("ES-WIFI Initialized.\n\r"));
		if (WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK) {
 8001928:	463b      	mov	r3, r7
 800192a:	4618      	mov	r0, r3
 800192c:	f007 fe74 	bl	8009618 <WIFI_GetMAC_Address>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d005      	beq.n	8001942 <wifi_start+0x2a>
			 MAC_Addr[3],
			 MAC_Addr[4],
			 MAC_Addr[5]));*/
		} else {
			//LOG(("> ERROR : CANNOT get MAC address\n\r"));
			return -1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
 800193a:	e003      	b.n	8001944 <wifi_start+0x2c>
		}
	} else {
		return -1;
 800193c:	f04f 33ff 	mov.w	r3, #4294967295
 8001940:	e000      	b.n	8001944 <wifi_start+0x2c>
	}
	return 0;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <wifi_connect>:

int wifi_connect(void) {
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0

	wifi_start();
 8001950:	f7ff ffe2 	bl	8001918 <wifi_start>

	//LOG(("\nConnecting to %s , %s\n\r",SSID,PASSWORD));
	if (WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK) {
 8001954:	2203      	movs	r2, #3
 8001956:	490b      	ldr	r1, [pc, #44]	; (8001984 <wifi_connect+0x38>)
 8001958:	480b      	ldr	r0, [pc, #44]	; (8001988 <wifi_connect+0x3c>)
 800195a:	f007 fe3b 	bl	80095d4 <WIFI_Connect>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d108      	bne.n	8001976 <wifi_connect+0x2a>
		if (WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK) {
 8001964:	4809      	ldr	r0, [pc, #36]	; (800198c <wifi_connect+0x40>)
 8001966:	f007 fe6d 	bl	8009644 <WIFI_GetIP_Address>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <wifi_connect+0x30>
			 IP_Addr[1],
			 IP_Addr[2],
			 IP_Addr[3]));*/
		} else {
			//LOG((" ERROR : es-wifi module CANNOT get IP address\n\r"));
			return -1;
 8001970:	f04f 33ff 	mov.w	r3, #4294967295
 8001974:	e003      	b.n	800197e <wifi_connect+0x32>
		}
	} else {
		//LOG(("ERROR : es-wifi module NOT connected\n\r"));
		return -1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
 800197a:	e000      	b.n	800197e <wifi_connect+0x32>
	}
	return 0;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	0800e4f0 	.word	0x0800e4f0
 8001988:	0800e508 	.word	0x0800e508
 800198c:	20000c44 	.word	0x20000c44

08001990 <wifi_server>:

int wifi_server(void) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af02      	add	r7, sp, #8
	bool StopServer = false;
 8001996:	2300      	movs	r3, #0
 8001998:	73fb      	strb	r3, [r7, #15]

	//LOG(("\nRunning HTML Server test\n\r"));
	if (wifi_connect() != 0)
 800199a:	f7ff ffd7 	bl	800194c <wifi_connect>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d002      	beq.n	80019aa <wifi_server+0x1a>
		return -1;
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295
 80019a8:	e02c      	b.n	8001a04 <wifi_server+0x74>

	if (WIFI_STATUS_OK
			!= WIFI_StartServer(SOCKET, WIFI_TCP_PROTOCOL, 1, "", PORT)) {
 80019aa:	2350      	movs	r3, #80	; 0x50
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <wifi_server+0x7c>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	2100      	movs	r1, #0
 80019b4:	2000      	movs	r0, #0
 80019b6:	f007 fe61 	bl	800967c <WIFI_StartServer>

	do {
		uint8_t RemoteIP[4];
		uint16_t RemotePort;

		while (WIFI_STATUS_OK
 80019ba:	e002      	b.n	80019c2 <wifi_server+0x32>
				!= WIFI_WaitServerConnection(SOCKET, 100, RemoteIP, &RemotePort)) {
			//LOG(("Waiting connection to  %d.%d.%d.%d\n\r",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
			//LOG(("\rIDLE\n"));
			vTaskDelay(10);
 80019bc:	200a      	movs	r0, #10
 80019be:	f009 fb8d 	bl	800b0dc <vTaskDelay>
				!= WIFI_WaitServerConnection(SOCKET, 100, RemoteIP, &RemotePort)) {
 80019c2:	1dbb      	adds	r3, r7, #6
 80019c4:	f107 0208 	add.w	r2, r7, #8
 80019c8:	2164      	movs	r1, #100	; 0x64
 80019ca:	2000      	movs	r0, #0
 80019cc:	f007 fe86 	bl	80096dc <WIFI_WaitServerConnection>
 80019d0:	4603      	mov	r3, r0
		while (WIFI_STATUS_OK
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f2      	bne.n	80019bc <wifi_server+0x2c>
		}

		//LOG(("Client connected %d.%d.%d.%d:%d\n\r",RemoteIP[0],RemoteIP[1],RemoteIP[2],RemoteIP[3],RemotePort));

		StopServer = WebServerProcess();
 80019d6:	f000 f81b 	bl	8001a10 <WebServerProcess>
 80019da:	4603      	mov	r3, r0
 80019dc:	73fb      	strb	r3, [r7, #15]

		if (WIFI_CloseServerConnection(SOCKET) != WIFI_STATUS_OK) {
 80019de:	2000      	movs	r0, #0
 80019e0:	f007 fec0 	bl	8009764 <WIFI_CloseServerConnection>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d002      	beq.n	80019f0 <wifi_server+0x60>
			//LOG(("ERROR: failed to close current Server connection\n\r"));
			//LOG(("\n\r"));
			return -1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
 80019ee:	e009      	b.n	8001a04 <wifi_server+0x74>
		}
	} while (StopServer == false);
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	f083 0301 	eor.w	r3, r3, #1
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1e2      	bne.n	80019c2 <wifi_server+0x32>

	if (WIFI_STATUS_OK != WIFI_StopServer(SOCKET)) {
 80019fc:	2000      	movs	r0, #0
 80019fe:	f007 fec7 	bl	8009790 <WIFI_StopServer>
		//LOG(("ERROR: Cannot stop server.\n\r"));
		//LOG(("\n\r"));
	}

	//LOG(("Server is stop\n\r"));
	return 0;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	0800e518 	.word	0x0800e518

08001a10 <WebServerProcess>:

static bool WebServerProcess(void) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af02      	add	r7, sp, #8
	uint8_t LedState = 1;
 8001a16:	2301      	movs	r3, #1
 8001a18:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	uint16_t respLen;
	static uint8_t resp[1024];
	bool stopserver = false;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	71bb      	strb	r3, [r7, #6]

	if (WIFI_STATUS_OK == WIFI_ReceiveData(SOCKET, resp, 1000, &respLen,
 8001a1e:	1cbb      	adds	r3, r7, #2
 8001a20:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a24:	9200      	str	r2, [sp, #0]
 8001a26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a2a:	492f      	ldr	r1, [pc, #188]	; (8001ae8 <WebServerProcess+0xd8>)
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f007 fee9 	bl	8009804 <WIFI_ReceiveData>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d151      	bne.n	8001adc <WebServerProcess+0xcc>
	WIFI_READ_TIMEOUT)) {
		//LOG(("get %d byte from server\n\r",respLen));

		if (respLen > 0) {
 8001a38:	887b      	ldrh	r3, [r7, #2]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d04e      	beq.n	8001adc <WebServerProcess+0xcc>
			if (strstr((char*) resp, "GET")) /* GET: put web page */
 8001a3e:	492b      	ldr	r1, [pc, #172]	; (8001aec <WebServerProcess+0xdc>)
 8001a40:	4829      	ldr	r0, [pc, #164]	; (8001ae8 <WebServerProcess+0xd8>)
 8001a42:	f00b fd1e 	bl	800d482 <strstr>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <WebServerProcess+0x4a>
			{
				//temp = (int) GetSensores(); //BSP_TSENSOR_ReadTemp();
				if (SendWebPage(LedState, temp) != WIFI_STATUS_OK) {
 8001a4c:	797a      	ldrb	r2, [r7, #5]
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	4611      	mov	r1, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 f85a 	bl	8001b0c <SendWebPage>
 8001a58:	e040      	b.n	8001adc <WebServerProcess+0xcc>
					//LOG(("> ERROR : Cannot send web page\n\r"));
				} else {
					//LOG(("Send page after  GET command\n\r"));
				}
			} else if (strstr((char*) resp, "POST"))/* POST: received info */
 8001a5a:	4925      	ldr	r1, [pc, #148]	; (8001af0 <WebServerProcess+0xe0>)
 8001a5c:	4822      	ldr	r0, [pc, #136]	; (8001ae8 <WebServerProcess+0xd8>)
 8001a5e:	f00b fd10 	bl	800d482 <strstr>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d039      	beq.n	8001adc <WebServerProcess+0xcc>
			{
				//LOG(("Post request\n\r"));

				if (strstr((char*) resp, "radio")) {
 8001a68:	4922      	ldr	r1, [pc, #136]	; (8001af4 <WebServerProcess+0xe4>)
 8001a6a:	481f      	ldr	r0, [pc, #124]	; (8001ae8 <WebServerProcess+0xd8>)
 8001a6c:	f00b fd09 	bl	800d482 <strstr>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d012      	beq.n	8001a9c <WebServerProcess+0x8c>
					if (strstr((char*) resp, "radio=0")) {
 8001a76:	4920      	ldr	r1, [pc, #128]	; (8001af8 <WebServerProcess+0xe8>)
 8001a78:	481b      	ldr	r0, [pc, #108]	; (8001ae8 <WebServerProcess+0xd8>)
 8001a7a:	f00b fd02 	bl	800d482 <strstr>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d002      	beq.n	8001a8a <WebServerProcess+0x7a>
						LedState = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	71fb      	strb	r3, [r7, #7]
 8001a88:	e008      	b.n	8001a9c <WebServerProcess+0x8c>
						//EncolarLED(LedState);
					} else if (strstr((char*) resp, "radio=1")) {
 8001a8a:	491c      	ldr	r1, [pc, #112]	; (8001afc <WebServerProcess+0xec>)
 8001a8c:	4816      	ldr	r0, [pc, #88]	; (8001ae8 <WebServerProcess+0xd8>)
 8001a8e:	f00b fcf8 	bl	800d482 <strstr>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <WebServerProcess+0x8c>
						LedState = 1;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	71fb      	strb	r3, [r7, #7]
						//EncolarLED(LedState);
					}
					//temp = (int) GetSensores(); //BSP_TSENSOR_ReadTemp();
				}
				if (strstr((char*) resp, "stop_server")) {
 8001a9c:	4918      	ldr	r1, [pc, #96]	; (8001b00 <WebServerProcess+0xf0>)
 8001a9e:	4812      	ldr	r0, [pc, #72]	; (8001ae8 <WebServerProcess+0xd8>)
 8001aa0:	f00b fcef 	bl	800d482 <strstr>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d012      	beq.n	8001ad0 <WebServerProcess+0xc0>
					if (strstr((char*) resp, "stop_server=0")) {
 8001aaa:	4916      	ldr	r1, [pc, #88]	; (8001b04 <WebServerProcess+0xf4>)
 8001aac:	480e      	ldr	r0, [pc, #56]	; (8001ae8 <WebServerProcess+0xd8>)
 8001aae:	f00b fce8 	bl	800d482 <strstr>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d002      	beq.n	8001abe <WebServerProcess+0xae>
						stopserver = false;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	71bb      	strb	r3, [r7, #6]
 8001abc:	e008      	b.n	8001ad0 <WebServerProcess+0xc0>
					} else if (strstr((char*) resp, "stop_server=1")) {
 8001abe:	4912      	ldr	r1, [pc, #72]	; (8001b08 <WebServerProcess+0xf8>)
 8001ac0:	4809      	ldr	r0, [pc, #36]	; (8001ae8 <WebServerProcess+0xd8>)
 8001ac2:	f00b fcde 	bl	800d482 <strstr>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <WebServerProcess+0xc0>
						stopserver = true;
 8001acc:	2301      	movs	r3, #1
 8001ace:	71bb      	strb	r3, [r7, #6]
					}
				}
				//temp = (int) GetSensores(); //BSP_TSENSOR_ReadTemp();
				if (SendWebPage(LedState, temp) != WIFI_STATUS_OK) {
 8001ad0:	797a      	ldrb	r2, [r7, #5]
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 f818 	bl	8001b0c <SendWebPage>
			}
		}
	} else {
		//LOG(("Client close connection\n\r"));
	}
	return stopserver;
 8001adc:	79bb      	ldrb	r3, [r7, #6]

}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000c48 	.word	0x20000c48
 8001aec:	0800e51c 	.word	0x0800e51c
 8001af0:	0800e520 	.word	0x0800e520
 8001af4:	0800e528 	.word	0x0800e528
 8001af8:	0800e530 	.word	0x0800e530
 8001afc:	0800e538 	.word	0x0800e538
 8001b00:	0800e540 	.word	0x0800e540
 8001b04:	0800e54c 	.word	0x0800e54c
 8001b08:	0800e55c 	.word	0x0800e55c

08001b0c <SendWebPage>:
/**
 * @brief  Send HTML page
 * @param  None
 * @retval None
 */
static WIFI_Status_t SendWebPage(uint8_t ledIsOn, uint8_t temperature) {
 8001b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b0e:	b093      	sub	sp, #76	; 0x4c
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	4603      	mov	r3, r0
 8001b14:	460a      	mov	r2, r1
 8001b16:	71fb      	strb	r3, [r7, #7]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	71bb      	strb	r3, [r7, #6]
	uint8_t temp[50];
	uint16_t SentDataLength;
	WIFI_Status_t ret;

	/* construct web page content */
	strcpy((char*) http,
 8001b1c:	4abc      	ldr	r2, [pc, #752]	; (8001e10 <SendWebPage+0x304>)
 8001b1e:	4bbd      	ldr	r3, [pc, #756]	; (8001e14 <SendWebPage+0x308>)
 8001b20:	4614      	mov	r4, r2
 8001b22:	461d      	mov	r5, r3
 8001b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b30:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b34:	c407      	stmia	r4!, {r0, r1, r2}
 8001b36:	8023      	strh	r3, [r4, #0]
 8001b38:	3402      	adds	r4, #2
 8001b3a:	0c1b      	lsrs	r3, r3, #16
 8001b3c:	7023      	strb	r3, [r4, #0]
			(char*) "HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n");
	strcat((char*) http, (char*) "<html>\r\n<body>\r\n");
 8001b3e:	48b4      	ldr	r0, [pc, #720]	; (8001e10 <SendWebPage+0x304>)
 8001b40:	f7fe fb46 	bl	80001d0 <strlen>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	4bb1      	ldr	r3, [pc, #708]	; (8001e10 <SendWebPage+0x304>)
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4ab2      	ldr	r2, [pc, #712]	; (8001e18 <SendWebPage+0x30c>)
 8001b4e:	461d      	mov	r5, r3
 8001b50:	4614      	mov	r4, r2
 8001b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b54:	6028      	str	r0, [r5, #0]
 8001b56:	6069      	str	r1, [r5, #4]
 8001b58:	60aa      	str	r2, [r5, #8]
 8001b5a:	60eb      	str	r3, [r5, #12]
 8001b5c:	7823      	ldrb	r3, [r4, #0]
 8001b5e:	742b      	strb	r3, [r5, #16]
	strcat((char*) http, (char*) "<title>STM32 Web Server</title>\r\n");
 8001b60:	48ab      	ldr	r0, [pc, #684]	; (8001e10 <SendWebPage+0x304>)
 8001b62:	f7fe fb35 	bl	80001d0 <strlen>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4ba9      	ldr	r3, [pc, #676]	; (8001e10 <SendWebPage+0x304>)
 8001b6c:	4413      	add	r3, r2
 8001b6e:	4aab      	ldr	r2, [pc, #684]	; (8001e1c <SendWebPage+0x310>)
 8001b70:	4614      	mov	r4, r2
 8001b72:	469c      	mov	ip, r3
 8001b74:	f104 0e20 	add.w	lr, r4, #32
 8001b78:	4665      	mov	r5, ip
 8001b7a:	4626      	mov	r6, r4
 8001b7c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b7e:	6028      	str	r0, [r5, #0]
 8001b80:	6069      	str	r1, [r5, #4]
 8001b82:	60aa      	str	r2, [r5, #8]
 8001b84:	60eb      	str	r3, [r5, #12]
 8001b86:	3410      	adds	r4, #16
 8001b88:	f10c 0c10 	add.w	ip, ip, #16
 8001b8c:	4574      	cmp	r4, lr
 8001b8e:	d1f3      	bne.n	8001b78 <SendWebPage+0x6c>
 8001b90:	4662      	mov	r2, ip
 8001b92:	4623      	mov	r3, r4
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	8013      	strh	r3, [r2, #0]
	strcat((char*) http,
 8001b98:	489d      	ldr	r0, [pc, #628]	; (8001e10 <SendWebPage+0x304>)
 8001b9a:	f7fe fb19 	bl	80001d0 <strlen>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b9b      	ldr	r3, [pc, #620]	; (8001e10 <SendWebPage+0x304>)
 8001ba4:	4413      	add	r3, r2
 8001ba6:	4a9e      	ldr	r2, [pc, #632]	; (8001e20 <SendWebPage+0x314>)
 8001ba8:	4614      	mov	r4, r2
 8001baa:	469c      	mov	ip, r3
 8001bac:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001bb0:	4665      	mov	r5, ip
 8001bb2:	4626      	mov	r6, r4
 8001bb4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001bb6:	6028      	str	r0, [r5, #0]
 8001bb8:	6069      	str	r1, [r5, #4]
 8001bba:	60aa      	str	r2, [r5, #8]
 8001bbc:	60eb      	str	r3, [r5, #12]
 8001bbe:	3410      	adds	r4, #16
 8001bc0:	f10c 0c10 	add.w	ip, ip, #16
 8001bc4:	4574      	cmp	r4, lr
 8001bc6:	d1f3      	bne.n	8001bb0 <SendWebPage+0xa4>
 8001bc8:	4665      	mov	r5, ip
 8001bca:	4623      	mov	r3, r4
 8001bcc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001bce:	6028      	str	r0, [r5, #0]
 8001bd0:	6069      	str	r1, [r5, #4]
 8001bd2:	60aa      	str	r2, [r5, #8]
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	732b      	strb	r3, [r5, #12]
			(char*) "<h2>InventekSys : Web Server using Es-Wifi with STM32</h2>\r\n");
	strcat((char*) http, (char*) "<br /><hr>\r\n");
 8001bd8:	488d      	ldr	r0, [pc, #564]	; (8001e10 <SendWebPage+0x304>)
 8001bda:	f7fe faf9 	bl	80001d0 <strlen>
 8001bde:	4603      	mov	r3, r0
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b8b      	ldr	r3, [pc, #556]	; (8001e10 <SendWebPage+0x304>)
 8001be4:	4413      	add	r3, r2
 8001be6:	4a8f      	ldr	r2, [pc, #572]	; (8001e24 <SendWebPage+0x318>)
 8001be8:	461c      	mov	r4, r3
 8001bea:	4613      	mov	r3, r2
 8001bec:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001bee:	6020      	str	r0, [r4, #0]
 8001bf0:	6061      	str	r1, [r4, #4]
 8001bf2:	60a2      	str	r2, [r4, #8]
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	7323      	strb	r3, [r4, #12]
	strcat((char*) http,
 8001bf8:	4885      	ldr	r0, [pc, #532]	; (8001e10 <SendWebPage+0x304>)
 8001bfa:	f7fe fae9 	bl	80001d0 <strlen>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b83      	ldr	r3, [pc, #524]	; (8001e10 <SendWebPage+0x304>)
 8001c04:	4413      	add	r3, r2
 8001c06:	4a88      	ldr	r2, [pc, #544]	; (8001e28 <SendWebPage+0x31c>)
 8001c08:	4614      	mov	r4, r2
 8001c0a:	469c      	mov	ip, r3
 8001c0c:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8001c10:	4665      	mov	r5, ip
 8001c12:	4626      	mov	r6, r4
 8001c14:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c16:	6028      	str	r0, [r5, #0]
 8001c18:	6069      	str	r1, [r5, #4]
 8001c1a:	60aa      	str	r2, [r5, #8]
 8001c1c:	60eb      	str	r3, [r5, #12]
 8001c1e:	3410      	adds	r4, #16
 8001c20:	f10c 0c10 	add.w	ip, ip, #16
 8001c24:	4574      	cmp	r4, lr
 8001c26:	d1f3      	bne.n	8001c10 <SendWebPage+0x104>
			(char*) "<p><form method=\"POST\"><strong>Temp: <input type=\"text\" value=\"");
	sprintf((char*) temp, "%d", temperature);
 8001c28:	79ba      	ldrb	r2, [r7, #6]
 8001c2a:	f107 030c 	add.w	r3, r7, #12
 8001c2e:	497f      	ldr	r1, [pc, #508]	; (8001e2c <SendWebPage+0x320>)
 8001c30:	4618      	mov	r0, r3
 8001c32:	f00b fb8d 	bl	800d350 <siprintf>
	strcat((char*) http, (char*) temp);
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4874      	ldr	r0, [pc, #464]	; (8001e10 <SendWebPage+0x304>)
 8001c3e:	f00b fbea 	bl	800d416 <strcat>
	strcat((char*) http, (char*) "\"> <sup>O</sup>C");
 8001c42:	4873      	ldr	r0, [pc, #460]	; (8001e10 <SendWebPage+0x304>)
 8001c44:	f7fe fac4 	bl	80001d0 <strlen>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4b70      	ldr	r3, [pc, #448]	; (8001e10 <SendWebPage+0x304>)
 8001c4e:	4413      	add	r3, r2
 8001c50:	4a77      	ldr	r2, [pc, #476]	; (8001e30 <SendWebPage+0x324>)
 8001c52:	461d      	mov	r5, r3
 8001c54:	4614      	mov	r4, r2
 8001c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c58:	6028      	str	r0, [r5, #0]
 8001c5a:	6069      	str	r1, [r5, #4]
 8001c5c:	60aa      	str	r2, [r5, #8]
 8001c5e:	60eb      	str	r3, [r5, #12]
 8001c60:	7823      	ldrb	r3, [r4, #0]
 8001c62:	742b      	strb	r3, [r5, #16]

	if (ledIsOn) {
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d040      	beq.n	8001cec <SendWebPage+0x1e0>
		strcat((char*) http,
 8001c6a:	4869      	ldr	r0, [pc, #420]	; (8001e10 <SendWebPage+0x304>)
 8001c6c:	f7fe fab0 	bl	80001d0 <strlen>
 8001c70:	4603      	mov	r3, r0
 8001c72:	461a      	mov	r2, r3
 8001c74:	4b66      	ldr	r3, [pc, #408]	; (8001e10 <SendWebPage+0x304>)
 8001c76:	4413      	add	r3, r2
 8001c78:	4a6e      	ldr	r2, [pc, #440]	; (8001e34 <SendWebPage+0x328>)
 8001c7a:	4614      	mov	r4, r2
 8001c7c:	469c      	mov	ip, r3
 8001c7e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001c82:	4665      	mov	r5, ip
 8001c84:	4626      	mov	r6, r4
 8001c86:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c88:	6028      	str	r0, [r5, #0]
 8001c8a:	6069      	str	r1, [r5, #4]
 8001c8c:	60aa      	str	r2, [r5, #8]
 8001c8e:	60eb      	str	r3, [r5, #12]
 8001c90:	3410      	adds	r4, #16
 8001c92:	f10c 0c10 	add.w	ip, ip, #16
 8001c96:	4574      	cmp	r4, lr
 8001c98:	d1f3      	bne.n	8001c82 <SendWebPage+0x176>
 8001c9a:	4663      	mov	r3, ip
 8001c9c:	4622      	mov	r2, r4
 8001c9e:	6810      	ldr	r0, [r2, #0]
 8001ca0:	6018      	str	r0, [r3, #0]
 8001ca2:	8891      	ldrh	r1, [r2, #4]
 8001ca4:	7992      	ldrb	r2, [r2, #6]
 8001ca6:	8099      	strh	r1, [r3, #4]
 8001ca8:	719a      	strb	r2, [r3, #6]
				(char*) "<p><input type=\"radio\" name=\"radio\" value=\"0\" >LED off");
		strcat((char*) http,
 8001caa:	4859      	ldr	r0, [pc, #356]	; (8001e10 <SendWebPage+0x304>)
 8001cac:	f7fe fa90 	bl	80001d0 <strlen>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b56      	ldr	r3, [pc, #344]	; (8001e10 <SendWebPage+0x304>)
 8001cb6:	4413      	add	r3, r2
 8001cb8:	4a5f      	ldr	r2, [pc, #380]	; (8001e38 <SendWebPage+0x32c>)
 8001cba:	4614      	mov	r4, r2
 8001cbc:	469c      	mov	ip, r3
 8001cbe:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001cc2:	4665      	mov	r5, ip
 8001cc4:	4626      	mov	r6, r4
 8001cc6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001cc8:	6028      	str	r0, [r5, #0]
 8001cca:	6069      	str	r1, [r5, #4]
 8001ccc:	60aa      	str	r2, [r5, #8]
 8001cce:	60eb      	str	r3, [r5, #12]
 8001cd0:	3410      	adds	r4, #16
 8001cd2:	f10c 0c10 	add.w	ip, ip, #16
 8001cd6:	4574      	cmp	r4, lr
 8001cd8:	d1f3      	bne.n	8001cc2 <SendWebPage+0x1b6>
 8001cda:	4665      	mov	r5, ip
 8001cdc:	4623      	mov	r3, r4
 8001cde:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001ce0:	6028      	str	r0, [r5, #0]
 8001ce2:	6069      	str	r1, [r5, #4]
 8001ce4:	60aa      	str	r2, [r5, #8]
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	81ab      	strh	r3, [r5, #12]
 8001cea:	e03f      	b.n	8001d6c <SendWebPage+0x260>
				(char*) "<br><input type=\"radio\" name=\"radio\" value=\"1\" checked>LED on");
	} else {
		strcat((char*) http,
 8001cec:	4848      	ldr	r0, [pc, #288]	; (8001e10 <SendWebPage+0x304>)
 8001cee:	f7fe fa6f 	bl	80001d0 <strlen>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b46      	ldr	r3, [pc, #280]	; (8001e10 <SendWebPage+0x304>)
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4a50      	ldr	r2, [pc, #320]	; (8001e3c <SendWebPage+0x330>)
 8001cfc:	4614      	mov	r4, r2
 8001cfe:	469c      	mov	ip, r3
 8001d00:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001d04:	4665      	mov	r5, ip
 8001d06:	4626      	mov	r6, r4
 8001d08:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d0a:	6028      	str	r0, [r5, #0]
 8001d0c:	6069      	str	r1, [r5, #4]
 8001d0e:	60aa      	str	r2, [r5, #8]
 8001d10:	60eb      	str	r3, [r5, #12]
 8001d12:	3410      	adds	r4, #16
 8001d14:	f10c 0c10 	add.w	ip, ip, #16
 8001d18:	4574      	cmp	r4, lr
 8001d1a:	d1f3      	bne.n	8001d04 <SendWebPage+0x1f8>
 8001d1c:	4665      	mov	r5, ip
 8001d1e:	4623      	mov	r3, r4
 8001d20:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001d22:	6028      	str	r0, [r5, #0]
 8001d24:	6069      	str	r1, [r5, #4]
 8001d26:	60aa      	str	r2, [r5, #8]
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	81ab      	strh	r3, [r5, #12]
				(char*) "<p><input type=\"radio\" name=\"radio\" value=\"0\" checked>LED off");
		strcat((char*) http,
 8001d2c:	4838      	ldr	r0, [pc, #224]	; (8001e10 <SendWebPage+0x304>)
 8001d2e:	f7fe fa4f 	bl	80001d0 <strlen>
 8001d32:	4603      	mov	r3, r0
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b36      	ldr	r3, [pc, #216]	; (8001e10 <SendWebPage+0x304>)
 8001d38:	4413      	add	r3, r2
 8001d3a:	4a41      	ldr	r2, [pc, #260]	; (8001e40 <SendWebPage+0x334>)
 8001d3c:	4614      	mov	r4, r2
 8001d3e:	469c      	mov	ip, r3
 8001d40:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001d44:	4665      	mov	r5, ip
 8001d46:	4626      	mov	r6, r4
 8001d48:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d4a:	6028      	str	r0, [r5, #0]
 8001d4c:	6069      	str	r1, [r5, #4]
 8001d4e:	60aa      	str	r2, [r5, #8]
 8001d50:	60eb      	str	r3, [r5, #12]
 8001d52:	3410      	adds	r4, #16
 8001d54:	f10c 0c10 	add.w	ip, ip, #16
 8001d58:	4574      	cmp	r4, lr
 8001d5a:	d1f3      	bne.n	8001d44 <SendWebPage+0x238>
 8001d5c:	4663      	mov	r3, ip
 8001d5e:	4622      	mov	r2, r4
 8001d60:	6810      	ldr	r0, [r2, #0]
 8001d62:	6018      	str	r0, [r3, #0]
 8001d64:	8891      	ldrh	r1, [r2, #4]
 8001d66:	7992      	ldrb	r2, [r2, #6]
 8001d68:	8099      	strh	r1, [r3, #4]
 8001d6a:	719a      	strb	r2, [r3, #6]
				(char*) "<br><input type=\"radio\" name=\"radio\" value=\"1\" >LED on");
	}

	strcat((char*) http,
 8001d6c:	4828      	ldr	r0, [pc, #160]	; (8001e10 <SendWebPage+0x304>)
 8001d6e:	f7fe fa2f 	bl	80001d0 <strlen>
 8001d72:	4603      	mov	r3, r0
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <SendWebPage+0x304>)
 8001d78:	4413      	add	r3, r2
 8001d7a:	4a32      	ldr	r2, [pc, #200]	; (8001e44 <SendWebPage+0x338>)
 8001d7c:	4614      	mov	r4, r2
 8001d7e:	469c      	mov	ip, r3
 8001d80:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001d84:	4665      	mov	r5, ip
 8001d86:	4626      	mov	r6, r4
 8001d88:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d8a:	6028      	str	r0, [r5, #0]
 8001d8c:	6069      	str	r1, [r5, #4]
 8001d8e:	60aa      	str	r2, [r5, #8]
 8001d90:	60eb      	str	r3, [r5, #12]
 8001d92:	3410      	adds	r4, #16
 8001d94:	f10c 0c10 	add.w	ip, ip, #16
 8001d98:	4574      	cmp	r4, lr
 8001d9a:	d1f3      	bne.n	8001d84 <SendWebPage+0x278>
			(char*) "</strong><p><input type=\"submit\"></form></span>");
	strcat((char*) http, (char*) "</body>\r\n</html>\r\n");
 8001d9c:	481c      	ldr	r0, [pc, #112]	; (8001e10 <SendWebPage+0x304>)
 8001d9e:	f7fe fa17 	bl	80001d0 <strlen>
 8001da2:	4603      	mov	r3, r0
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <SendWebPage+0x304>)
 8001da8:	4413      	add	r3, r2
 8001daa:	4a27      	ldr	r2, [pc, #156]	; (8001e48 <SendWebPage+0x33c>)
 8001dac:	461d      	mov	r5, r3
 8001dae:	4614      	mov	r4, r2
 8001db0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001db2:	6028      	str	r0, [r5, #0]
 8001db4:	6069      	str	r1, [r5, #4]
 8001db6:	60aa      	str	r2, [r5, #8]
 8001db8:	60eb      	str	r3, [r5, #12]
 8001dba:	8823      	ldrh	r3, [r4, #0]
 8001dbc:	78a2      	ldrb	r2, [r4, #2]
 8001dbe:	822b      	strh	r3, [r5, #16]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	74ab      	strb	r3, [r5, #18]

	ret = WIFI_SendData(0, (uint8_t*) http, strlen((char*) http),
 8001dc4:	4812      	ldr	r0, [pc, #72]	; (8001e10 <SendWebPage+0x304>)
 8001dc6:	f7fe fa03 	bl	80001d0 <strlen>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	f107 030a 	add.w	r3, r7, #10
 8001dd2:	f242 7110 	movw	r1, #10000	; 0x2710
 8001dd6:	9100      	str	r1, [sp, #0]
 8001dd8:	490d      	ldr	r1, [pc, #52]	; (8001e10 <SendWebPage+0x304>)
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f007 fcf0 	bl	80097c0 <WIFI_SendData>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			&SentDataLength, WIFI_WRITE_TIMEOUT);

	if ((ret == WIFI_STATUS_OK) && (SentDataLength != strlen((char*) http))) {
 8001de6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10a      	bne.n	8001e04 <SendWebPage+0x2f8>
 8001dee:	897b      	ldrh	r3, [r7, #10]
 8001df0:	461c      	mov	r4, r3
 8001df2:	4807      	ldr	r0, [pc, #28]	; (8001e10 <SendWebPage+0x304>)
 8001df4:	f7fe f9ec 	bl	80001d0 <strlen>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	429c      	cmp	r4, r3
 8001dfc:	d002      	beq.n	8001e04 <SendWebPage+0x2f8>
		ret = WIFI_STATUS_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	return ret;
 8001e04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3744      	adds	r7, #68	; 0x44
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e10:	20000844 	.word	0x20000844
 8001e14:	0800e56c 	.word	0x0800e56c
 8001e18:	0800e5ac 	.word	0x0800e5ac
 8001e1c:	0800e5c0 	.word	0x0800e5c0
 8001e20:	0800e5e4 	.word	0x0800e5e4
 8001e24:	0800e624 	.word	0x0800e624
 8001e28:	0800e634 	.word	0x0800e634
 8001e2c:	0800e674 	.word	0x0800e674
 8001e30:	0800e678 	.word	0x0800e678
 8001e34:	0800e68c 	.word	0x0800e68c
 8001e38:	0800e6c4 	.word	0x0800e6c4
 8001e3c:	0800e704 	.word	0x0800e704
 8001e40:	0800e744 	.word	0x0800e744
 8001e44:	0800e77c 	.word	0x0800e77c
 8001e48:	0800e7ac 	.word	0x0800e7ac

08001e4c <EXTI1_IRQHandler>:
/**
 * @brief  This function handles external lines 1interrupt request.
 * @param  None
 * @retval None
 */
void EXTI1_IRQHandler(void) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001e50:	2002      	movs	r0, #2
 8001e52:	f000 fddf 	bl	8002a14 <HAL_GPIO_EXTI_IRQHandler>
	portYIELD_FROM_ISR(pdFALSE);
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_GPIO_EXTI_Callback>:
/**
 * @brief  EXTI line detection callback.
 * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8001e64:	88fb      	ldrh	r3, [r7, #6]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d102      	bne.n	8001e70 <HAL_GPIO_EXTI_Callback+0x16>
	case (GPIO_PIN_1): {
		SPI_WIFI_ISR();
 8001e6a:	f007 fb77 	bl	800955c <SPI_WIFI_ISR>
		break;
 8001e6e:	e000      	b.n	8001e72 <HAL_GPIO_EXTI_Callback+0x18>
	}
	default: {
		break;
 8001e70:	bf00      	nop
	}
	}
	portYIELD_FROM_ISR(pdFALSE);
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <SPI3_IRQHandler>:
 * @brief  SPI3 line detection callback.
 * @param  None
 * @retval None
 */
extern SPI_HandleTypeDef hspi;
void SPI3_IRQHandler(void) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
	HAL_SPI_IRQHandler(&hspi);
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <SPI3_IRQHandler+0x10>)
 8001e82:	f003 fa87 	bl	8005394 <HAL_SPI_IRQHandler>
	portYIELD_FROM_ISR(pdFALSE);
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20001074 	.word	0x20001074

08001e90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e94:	f7ff fd2e 	bl	80018f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e98:	480c      	ldr	r0, [pc, #48]	; (8001ecc <LoopForever+0x6>)
  ldr r1, =_edata
 8001e9a:	490d      	ldr	r1, [pc, #52]	; (8001ed0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ed4 <LoopForever+0xe>)
  movs r3, #0
 8001e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea0:	e002      	b.n	8001ea8 <LoopCopyDataInit>

08001ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea6:	3304      	adds	r3, #4

08001ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eac:	d3f9      	bcc.n	8001ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eae:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001eb0:	4c0a      	ldr	r4, [pc, #40]	; (8001edc <LoopForever+0x16>)
  movs r3, #0
 8001eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb4:	e001      	b.n	8001eba <LoopFillZerobss>

08001eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb8:	3204      	adds	r2, #4

08001eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ebc:	d3fb      	bcc.n	8001eb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ebe:	f00b f801 	bl	800cec4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ec2:	f7fe fcb3 	bl	800082c <main>

08001ec6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ec6:	e7fe      	b.n	8001ec6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ec8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001ed4:	0800eed0 	.word	0x0800eed0
  ldr r2, =_sbss
 8001ed8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001edc:	200033c0 	.word	0x200033c0

08001ee0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ee0:	e7fe      	b.n	8001ee0 <ADC1_2_IRQHandler>

08001ee2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eec:	2003      	movs	r0, #3
 8001eee:	f000 f902 	bl	80020f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ef2:	200f      	movs	r0, #15
 8001ef4:	f7ff fb60 	bl	80015b8 <HAL_InitTick>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d002      	beq.n	8001f04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	71fb      	strb	r3, [r7, #7]
 8001f02:	e001      	b.n	8001f08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f04:	f7ff f87a 	bl	8000ffc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f08:	79fb      	ldrb	r3, [r7, #7]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_IncTick+0x20>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_IncTick+0x24>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <HAL_IncTick+0x24>)
 8001f26:	6013      	str	r3, [r2, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000008 	.word	0x20000008
 8001f38:	20001048 	.word	0x20001048

08001f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <HAL_GetTick+0x14>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20001048 	.word	0x20001048

08001f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f5c:	f7ff ffee 	bl	8001f3c <HAL_GetTick>
 8001f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6c:	d005      	beq.n	8001f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <HAL_Delay+0x44>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4413      	add	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f7a:	bf00      	nop
 8001f7c:	f7ff ffde 	bl	8001f3c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d8f7      	bhi.n	8001f7c <HAL_Delay+0x28>
  {
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000008 	.word	0x20000008

08001f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fce:	4a04      	ldr	r2, [pc, #16]	; (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	60d3      	str	r3, [r2, #12]
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe8:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <__NVIC_GetPriorityGrouping+0x18>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	f003 0307 	and.w	r3, r3, #7
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	2b00      	cmp	r3, #0
 8002010:	db0b      	blt.n	800202a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	f003 021f 	and.w	r2, r3, #31
 8002018:	4907      	ldr	r1, [pc, #28]	; (8002038 <__NVIC_EnableIRQ+0x38>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	2001      	movs	r0, #1
 8002022:	fa00 f202 	lsl.w	r2, r0, r2
 8002026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000e100 	.word	0xe000e100

0800203c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	6039      	str	r1, [r7, #0]
 8002046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204c:	2b00      	cmp	r3, #0
 800204e:	db0a      	blt.n	8002066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	b2da      	uxtb	r2, r3
 8002054:	490c      	ldr	r1, [pc, #48]	; (8002088 <__NVIC_SetPriority+0x4c>)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	0112      	lsls	r2, r2, #4
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	440b      	add	r3, r1
 8002060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002064:	e00a      	b.n	800207c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4908      	ldr	r1, [pc, #32]	; (800208c <__NVIC_SetPriority+0x50>)
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	3b04      	subs	r3, #4
 8002074:	0112      	lsls	r2, r2, #4
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	440b      	add	r3, r1
 800207a:	761a      	strb	r2, [r3, #24]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000e100 	.word	0xe000e100
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	; 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f1c3 0307 	rsb	r3, r3, #7
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	bf28      	it	cs
 80020ae:	2304      	movcs	r3, #4
 80020b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3304      	adds	r3, #4
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d902      	bls.n	80020c0 <NVIC_EncodePriority+0x30>
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3b03      	subs	r3, #3
 80020be:	e000      	b.n	80020c2 <NVIC_EncodePriority+0x32>
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	f04f 32ff 	mov.w	r2, #4294967295
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43da      	mvns	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	401a      	ands	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d8:	f04f 31ff 	mov.w	r1, #4294967295
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	43d9      	mvns	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	4313      	orrs	r3, r2
         );
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3724      	adds	r7, #36	; 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff ff4c 	bl	8001f9c <__NVIC_SetPriorityGrouping>
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
 8002118:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800211e:	f7ff ff61 	bl	8001fe4 <__NVIC_GetPriorityGrouping>
 8002122:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	68b9      	ldr	r1, [r7, #8]
 8002128:	6978      	ldr	r0, [r7, #20]
 800212a:	f7ff ffb1 	bl	8002090 <NVIC_EncodePriority>
 800212e:	4602      	mov	r2, r0
 8002130:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002134:	4611      	mov	r1, r2
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff ff80 	bl	800203c <__NVIC_SetPriority>
}
 800213c:	bf00      	nop
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff ff54 	bl	8002000 <__NVIC_EnableIRQ>
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e0ac      	b.n	80022cc <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f8b2 	bl	80022e0 <DFSDM_GetChannelFromInstance>
 800217c:	4603      	mov	r3, r0
 800217e:	4a55      	ldr	r2, [pc, #340]	; (80022d4 <HAL_DFSDM_ChannelInit+0x174>)
 8002180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e09f      	b.n	80022cc <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7fe ff5d 	bl	800104c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002192:	4b51      	ldr	r3, [pc, #324]	; (80022d8 <HAL_DFSDM_ChannelInit+0x178>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	3301      	adds	r3, #1
 8002198:	4a4f      	ldr	r2, [pc, #316]	; (80022d8 <HAL_DFSDM_ChannelInit+0x178>)
 800219a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800219c:	4b4e      	ldr	r3, [pc, #312]	; (80022d8 <HAL_DFSDM_ChannelInit+0x178>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d125      	bne.n	80021f0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80021a4:	4b4d      	ldr	r3, [pc, #308]	; (80022dc <HAL_DFSDM_ChannelInit+0x17c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a4c      	ldr	r2, [pc, #304]	; (80022dc <HAL_DFSDM_ChannelInit+0x17c>)
 80021aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021ae:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80021b0:	4b4a      	ldr	r3, [pc, #296]	; (80022dc <HAL_DFSDM_ChannelInit+0x17c>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	4948      	ldr	r1, [pc, #288]	; (80022dc <HAL_DFSDM_ChannelInit+0x17c>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80021be:	4b47      	ldr	r3, [pc, #284]	; (80022dc <HAL_DFSDM_ChannelInit+0x17c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a46      	ldr	r2, [pc, #280]	; (80022dc <HAL_DFSDM_ChannelInit+0x17c>)
 80021c4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80021c8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	791b      	ldrb	r3, [r3, #4]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d108      	bne.n	80021e4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80021d2:	4b42      	ldr	r3, [pc, #264]	; (80022dc <HAL_DFSDM_ChannelInit+0x17c>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	3b01      	subs	r3, #1
 80021dc:	041b      	lsls	r3, r3, #16
 80021de:	493f      	ldr	r1, [pc, #252]	; (80022dc <HAL_DFSDM_ChannelInit+0x17c>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80021e4:	4b3d      	ldr	r3, [pc, #244]	; (80022dc <HAL_DFSDM_ChannelInit+0x17c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a3c      	ldr	r2, [pc, #240]	; (80022dc <HAL_DFSDM_ChannelInit+0x17c>)
 80021ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021ee:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80021fe:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6819      	ldr	r1, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800220e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002214:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 020f 	bic.w	r2, r2, #15
 800222c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6819      	ldr	r1, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002254:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6899      	ldr	r1, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002264:	3b01      	subs	r3, #1
 8002266:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f002 0207 	and.w	r2, r2, #7
 8002280:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6859      	ldr	r1, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022ac:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f810 	bl	80022e0 <DFSDM_GetChannelFromInstance>
 80022c0:	4602      	mov	r2, r0
 80022c2:	4904      	ldr	r1, [pc, #16]	; (80022d4 <HAL_DFSDM_ChannelInit+0x174>)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20001050 	.word	0x20001050
 80022d8:	2000104c 	.word	0x2000104c
 80022dc:	40016000 	.word	0x40016000

080022e0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a1c      	ldr	r2, [pc, #112]	; (800235c <DFSDM_GetChannelFromInstance+0x7c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d102      	bne.n	80022f6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e02b      	b.n	800234e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a19      	ldr	r2, [pc, #100]	; (8002360 <DFSDM_GetChannelFromInstance+0x80>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d102      	bne.n	8002304 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80022fe:	2301      	movs	r3, #1
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	e024      	b.n	800234e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a17      	ldr	r2, [pc, #92]	; (8002364 <DFSDM_GetChannelFromInstance+0x84>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d102      	bne.n	8002312 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800230c:	2302      	movs	r3, #2
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	e01d      	b.n	800234e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a14      	ldr	r2, [pc, #80]	; (8002368 <DFSDM_GetChannelFromInstance+0x88>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d102      	bne.n	8002320 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800231a:	2304      	movs	r3, #4
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	e016      	b.n	800234e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a12      	ldr	r2, [pc, #72]	; (800236c <DFSDM_GetChannelFromInstance+0x8c>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d102      	bne.n	800232e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002328:	2305      	movs	r3, #5
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	e00f      	b.n	800234e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a0f      	ldr	r2, [pc, #60]	; (8002370 <DFSDM_GetChannelFromInstance+0x90>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d102      	bne.n	800233c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002336:	2306      	movs	r3, #6
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	e008      	b.n	800234e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a0d      	ldr	r2, [pc, #52]	; (8002374 <DFSDM_GetChannelFromInstance+0x94>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d102      	bne.n	800234a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002344:	2307      	movs	r3, #7
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	e001      	b.n	800234e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800234a:	2303      	movs	r3, #3
 800234c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800234e:	68fb      	ldr	r3, [r7, #12]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	40016000 	.word	0x40016000
 8002360:	40016020 	.word	0x40016020
 8002364:	40016040 	.word	0x40016040
 8002368:	40016080 	.word	0x40016080
 800236c:	400160a0 	.word	0x400160a0
 8002370:	400160c0 	.word	0x400160c0
 8002374:	400160e0 	.word	0x400160e0

08002378 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d008      	beq.n	80023a2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2204      	movs	r2, #4
 8002394:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e022      	b.n	80023e8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 020e 	bic.w	r2, r2, #14
 80023b0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0201 	bic.w	r2, r2, #1
 80023c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	f003 021c 	and.w	r2, r3, #28
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	2101      	movs	r1, #1
 80023d0:	fa01 f202 	lsl.w	r2, r1, r2
 80023d4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d005      	beq.n	8002418 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2204      	movs	r2, #4
 8002410:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	73fb      	strb	r3, [r7, #15]
 8002416:	e029      	b.n	800246c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 020e 	bic.w	r2, r2, #14
 8002426:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0201 	bic.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243c:	f003 021c 	and.w	r2, r3, #28
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	2101      	movs	r1, #1
 8002446:	fa01 f202 	lsl.w	r2, r1, r2
 800244a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	4798      	blx	r3
    }
  }
  return status;
 800246c:	7bfb      	ldrb	r3, [r7, #15]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002478:	b480      	push	{r7}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002486:	e17f      	b.n	8002788 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	2101      	movs	r1, #1
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	fa01 f303 	lsl.w	r3, r1, r3
 8002494:	4013      	ands	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 8171 	beq.w	8002782 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d005      	beq.n	80024b8 <HAL_GPIO_Init+0x40>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d130      	bne.n	800251a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	2203      	movs	r2, #3
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024ee:	2201      	movs	r2, #1
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4013      	ands	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	f003 0201 	and.w	r2, r3, #1
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	2b03      	cmp	r3, #3
 8002524:	d118      	bne.n	8002558 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800252c:	2201      	movs	r2, #1
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	08db      	lsrs	r3, r3, #3
 8002542:	f003 0201 	and.w	r2, r3, #1
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	2b03      	cmp	r3, #3
 8002562:	d017      	beq.n	8002594 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	2203      	movs	r2, #3
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d123      	bne.n	80025e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	08da      	lsrs	r2, r3, #3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3208      	adds	r2, #8
 80025a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	220f      	movs	r2, #15
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4013      	ands	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	08da      	lsrs	r2, r3, #3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3208      	adds	r2, #8
 80025e2:	6939      	ldr	r1, [r7, #16]
 80025e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	2203      	movs	r2, #3
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0203 	and.w	r2, r3, #3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80ac 	beq.w	8002782 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262a:	4b5f      	ldr	r3, [pc, #380]	; (80027a8 <HAL_GPIO_Init+0x330>)
 800262c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262e:	4a5e      	ldr	r2, [pc, #376]	; (80027a8 <HAL_GPIO_Init+0x330>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6613      	str	r3, [r2, #96]	; 0x60
 8002636:	4b5c      	ldr	r3, [pc, #368]	; (80027a8 <HAL_GPIO_Init+0x330>)
 8002638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002642:	4a5a      	ldr	r2, [pc, #360]	; (80027ac <HAL_GPIO_Init+0x334>)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	089b      	lsrs	r3, r3, #2
 8002648:	3302      	adds	r3, #2
 800264a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	220f      	movs	r2, #15
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4013      	ands	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800266c:	d025      	beq.n	80026ba <HAL_GPIO_Init+0x242>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a4f      	ldr	r2, [pc, #316]	; (80027b0 <HAL_GPIO_Init+0x338>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d01f      	beq.n	80026b6 <HAL_GPIO_Init+0x23e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a4e      	ldr	r2, [pc, #312]	; (80027b4 <HAL_GPIO_Init+0x33c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d019      	beq.n	80026b2 <HAL_GPIO_Init+0x23a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a4d      	ldr	r2, [pc, #308]	; (80027b8 <HAL_GPIO_Init+0x340>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d013      	beq.n	80026ae <HAL_GPIO_Init+0x236>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4c      	ldr	r2, [pc, #304]	; (80027bc <HAL_GPIO_Init+0x344>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d00d      	beq.n	80026aa <HAL_GPIO_Init+0x232>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a4b      	ldr	r2, [pc, #300]	; (80027c0 <HAL_GPIO_Init+0x348>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d007      	beq.n	80026a6 <HAL_GPIO_Init+0x22e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4a      	ldr	r2, [pc, #296]	; (80027c4 <HAL_GPIO_Init+0x34c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d101      	bne.n	80026a2 <HAL_GPIO_Init+0x22a>
 800269e:	2306      	movs	r3, #6
 80026a0:	e00c      	b.n	80026bc <HAL_GPIO_Init+0x244>
 80026a2:	2307      	movs	r3, #7
 80026a4:	e00a      	b.n	80026bc <HAL_GPIO_Init+0x244>
 80026a6:	2305      	movs	r3, #5
 80026a8:	e008      	b.n	80026bc <HAL_GPIO_Init+0x244>
 80026aa:	2304      	movs	r3, #4
 80026ac:	e006      	b.n	80026bc <HAL_GPIO_Init+0x244>
 80026ae:	2303      	movs	r3, #3
 80026b0:	e004      	b.n	80026bc <HAL_GPIO_Init+0x244>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e002      	b.n	80026bc <HAL_GPIO_Init+0x244>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <HAL_GPIO_Init+0x244>
 80026ba:	2300      	movs	r3, #0
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	f002 0203 	and.w	r2, r2, #3
 80026c2:	0092      	lsls	r2, r2, #2
 80026c4:	4093      	lsls	r3, r2
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026cc:	4937      	ldr	r1, [pc, #220]	; (80027ac <HAL_GPIO_Init+0x334>)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	089b      	lsrs	r3, r3, #2
 80026d2:	3302      	adds	r3, #2
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026da:	4b3b      	ldr	r3, [pc, #236]	; (80027c8 <HAL_GPIO_Init+0x350>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4013      	ands	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026fe:	4a32      	ldr	r2, [pc, #200]	; (80027c8 <HAL_GPIO_Init+0x350>)
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002704:	4b30      	ldr	r3, [pc, #192]	; (80027c8 <HAL_GPIO_Init+0x350>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	43db      	mvns	r3, r3
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002728:	4a27      	ldr	r2, [pc, #156]	; (80027c8 <HAL_GPIO_Init+0x350>)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800272e:	4b26      	ldr	r3, [pc, #152]	; (80027c8 <HAL_GPIO_Init+0x350>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	43db      	mvns	r3, r3
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4313      	orrs	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002752:	4a1d      	ldr	r2, [pc, #116]	; (80027c8 <HAL_GPIO_Init+0x350>)
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002758:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <HAL_GPIO_Init+0x350>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	43db      	mvns	r3, r3
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4013      	ands	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800277c:	4a12      	ldr	r2, [pc, #72]	; (80027c8 <HAL_GPIO_Init+0x350>)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	3301      	adds	r3, #1
 8002786:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	fa22 f303 	lsr.w	r3, r2, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	f47f ae78 	bne.w	8002488 <HAL_GPIO_Init+0x10>
  }
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	371c      	adds	r7, #28
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000
 80027ac:	40010000 	.word	0x40010000
 80027b0:	48000400 	.word	0x48000400
 80027b4:	48000800 	.word	0x48000800
 80027b8:	48000c00 	.word	0x48000c00
 80027bc:	48001000 	.word	0x48001000
 80027c0:	48001400 	.word	0x48001400
 80027c4:	48001800 	.word	0x48001800
 80027c8:	40010400 	.word	0x40010400

080027cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80027da:	e0cd      	b.n	8002978 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80027dc:	2201      	movs	r2, #1
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	4013      	ands	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80c0 	beq.w	8002972 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80027f2:	4a68      	ldr	r2, [pc, #416]	; (8002994 <HAL_GPIO_DeInit+0x1c8>)
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	089b      	lsrs	r3, r3, #2
 80027f8:	3302      	adds	r3, #2
 80027fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fe:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	220f      	movs	r2, #15
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4013      	ands	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800281a:	d025      	beq.n	8002868 <HAL_GPIO_DeInit+0x9c>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a5e      	ldr	r2, [pc, #376]	; (8002998 <HAL_GPIO_DeInit+0x1cc>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d01f      	beq.n	8002864 <HAL_GPIO_DeInit+0x98>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a5d      	ldr	r2, [pc, #372]	; (800299c <HAL_GPIO_DeInit+0x1d0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d019      	beq.n	8002860 <HAL_GPIO_DeInit+0x94>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a5c      	ldr	r2, [pc, #368]	; (80029a0 <HAL_GPIO_DeInit+0x1d4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d013      	beq.n	800285c <HAL_GPIO_DeInit+0x90>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a5b      	ldr	r2, [pc, #364]	; (80029a4 <HAL_GPIO_DeInit+0x1d8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d00d      	beq.n	8002858 <HAL_GPIO_DeInit+0x8c>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a5a      	ldr	r2, [pc, #360]	; (80029a8 <HAL_GPIO_DeInit+0x1dc>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d007      	beq.n	8002854 <HAL_GPIO_DeInit+0x88>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a59      	ldr	r2, [pc, #356]	; (80029ac <HAL_GPIO_DeInit+0x1e0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d101      	bne.n	8002850 <HAL_GPIO_DeInit+0x84>
 800284c:	2306      	movs	r3, #6
 800284e:	e00c      	b.n	800286a <HAL_GPIO_DeInit+0x9e>
 8002850:	2307      	movs	r3, #7
 8002852:	e00a      	b.n	800286a <HAL_GPIO_DeInit+0x9e>
 8002854:	2305      	movs	r3, #5
 8002856:	e008      	b.n	800286a <HAL_GPIO_DeInit+0x9e>
 8002858:	2304      	movs	r3, #4
 800285a:	e006      	b.n	800286a <HAL_GPIO_DeInit+0x9e>
 800285c:	2303      	movs	r3, #3
 800285e:	e004      	b.n	800286a <HAL_GPIO_DeInit+0x9e>
 8002860:	2302      	movs	r3, #2
 8002862:	e002      	b.n	800286a <HAL_GPIO_DeInit+0x9e>
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <HAL_GPIO_DeInit+0x9e>
 8002868:	2300      	movs	r3, #0
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	f002 0203 	and.w	r2, r2, #3
 8002870:	0092      	lsls	r2, r2, #2
 8002872:	4093      	lsls	r3, r2
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	429a      	cmp	r2, r3
 8002878:	d132      	bne.n	80028e0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800287a:	4b4d      	ldr	r3, [pc, #308]	; (80029b0 <HAL_GPIO_DeInit+0x1e4>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	43db      	mvns	r3, r3
 8002882:	494b      	ldr	r1, [pc, #300]	; (80029b0 <HAL_GPIO_DeInit+0x1e4>)
 8002884:	4013      	ands	r3, r2
 8002886:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002888:	4b49      	ldr	r3, [pc, #292]	; (80029b0 <HAL_GPIO_DeInit+0x1e4>)
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	43db      	mvns	r3, r3
 8002890:	4947      	ldr	r1, [pc, #284]	; (80029b0 <HAL_GPIO_DeInit+0x1e4>)
 8002892:	4013      	ands	r3, r2
 8002894:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002896:	4b46      	ldr	r3, [pc, #280]	; (80029b0 <HAL_GPIO_DeInit+0x1e4>)
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	43db      	mvns	r3, r3
 800289e:	4944      	ldr	r1, [pc, #272]	; (80029b0 <HAL_GPIO_DeInit+0x1e4>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80028a4:	4b42      	ldr	r3, [pc, #264]	; (80029b0 <HAL_GPIO_DeInit+0x1e4>)
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	4940      	ldr	r1, [pc, #256]	; (80029b0 <HAL_GPIO_DeInit+0x1e4>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	220f      	movs	r2, #15
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80028c2:	4a34      	ldr	r2, [pc, #208]	; (8002994 <HAL_GPIO_DeInit+0x1c8>)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	3302      	adds	r3, #2
 80028ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	43da      	mvns	r2, r3
 80028d2:	4830      	ldr	r0, [pc, #192]	; (8002994 <HAL_GPIO_DeInit+0x1c8>)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	089b      	lsrs	r3, r3, #2
 80028d8:	400a      	ands	r2, r1
 80028da:	3302      	adds	r3, #2
 80028dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	2103      	movs	r1, #3
 80028ea:	fa01 f303 	lsl.w	r3, r1, r3
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	08da      	lsrs	r2, r3, #3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3208      	adds	r2, #8
 80028fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	220f      	movs	r2, #15
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	08d2      	lsrs	r2, r2, #3
 8002914:	4019      	ands	r1, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3208      	adds	r2, #8
 800291a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	2103      	movs	r1, #3
 8002928:	fa01 f303 	lsl.w	r3, r1, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	401a      	ands	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	2101      	movs	r1, #1
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	fa01 f303 	lsl.w	r3, r1, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	401a      	ands	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	2103      	movs	r1, #3
 8002952:	fa01 f303 	lsl.w	r3, r1, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	401a      	ands	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002962:	2101      	movs	r1, #1
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	fa01 f303 	lsl.w	r3, r1, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	401a      	ands	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	3301      	adds	r3, #1
 8002976:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	f47f af2b 	bne.w	80027dc <HAL_GPIO_DeInit+0x10>
  }
}
 8002986:	bf00      	nop
 8002988:	bf00      	nop
 800298a:	371c      	adds	r7, #28
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	40010000 	.word	0x40010000
 8002998:	48000400 	.word	0x48000400
 800299c:	48000800 	.word	0x48000800
 80029a0:	48000c00 	.word	0x48000c00
 80029a4:	48001000 	.word	0x48001000
 80029a8:	48001400 	.word	0x48001400
 80029ac:	48001800 	.word	0x48001800
 80029b0:	40010400 	.word	0x40010400

080029b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	887b      	ldrh	r3, [r7, #2]
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
 80029d0:	e001      	b.n	80029d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029d2:	2300      	movs	r3, #0
 80029d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	807b      	strh	r3, [r7, #2]
 80029f0:	4613      	mov	r3, r2
 80029f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029f4:	787b      	ldrb	r3, [r7, #1]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029fa:	887a      	ldrh	r2, [r7, #2]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a00:	e002      	b.n	8002a08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a02:	887a      	ldrh	r2, [r7, #2]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a1e:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a20:	695a      	ldr	r2, [r3, #20]
 8002a22:	88fb      	ldrh	r3, [r7, #6]
 8002a24:	4013      	ands	r3, r2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d006      	beq.n	8002a38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a2a:	4a05      	ldr	r2, [pc, #20]	; (8002a40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a30:	88fb      	ldrh	r3, [r7, #6]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fa11 	bl	8001e5a <HAL_GPIO_EXTI_Callback>
  }
}
 8002a38:	bf00      	nop
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40010400 	.word	0x40010400

08002a44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e081      	b.n	8002b5a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fe fb52 	bl	8001114 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2224      	movs	r2, #36	; 0x24
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aa4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d107      	bne.n	8002abe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	e006      	b.n	8002acc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002aca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d104      	bne.n	8002ade <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002adc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002af0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691a      	ldr	r2, [r3, #16]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	69d9      	ldr	r1, [r3, #28]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1a      	ldr	r2, [r3, #32]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2220      	movs	r2, #32
 8002b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b20      	cmp	r3, #32
 8002b76:	d138      	bne.n	8002bea <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d101      	bne.n	8002b86 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b82:	2302      	movs	r3, #2
 8002b84:	e032      	b.n	8002bec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2224      	movs	r2, #36	; 0x24
 8002b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0201 	bic.w	r2, r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bb4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6819      	ldr	r1, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 0201 	orr.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	e000      	b.n	8002bec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bea:	2302      	movs	r3, #2
  }
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	d139      	bne.n	8002c82 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e033      	b.n	8002c84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2224      	movs	r2, #36	; 0x24
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c4a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	021b      	lsls	r3, r3, #8
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f042 0201 	orr.w	r2, r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2220      	movs	r2, #32
 8002c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e000      	b.n	8002c84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c82:	2302      	movs	r3, #2
  }
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c92:	b08f      	sub	sp, #60	; 0x3c
 8002c94:	af0a      	add	r7, sp, #40	; 0x28
 8002c96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e116      	b.n	8002ed0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d106      	bne.n	8002cc2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7fe fbdf 	bl	8001480 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d102      	bne.n	8002cdc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f004 fd0d 	bl	8007700 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	603b      	str	r3, [r7, #0]
 8002cec:	687e      	ldr	r6, [r7, #4]
 8002cee:	466d      	mov	r5, sp
 8002cf0:	f106 0410 	add.w	r4, r6, #16
 8002cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d00:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d04:	1d33      	adds	r3, r6, #4
 8002d06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d08:	6838      	ldr	r0, [r7, #0]
 8002d0a:	f004 fccd 	bl	80076a8 <USB_CoreInit>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0d7      	b.n	8002ed0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2100      	movs	r1, #0
 8002d26:	4618      	mov	r0, r3
 8002d28:	f004 fcfb 	bl	8007722 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	73fb      	strb	r3, [r7, #15]
 8002d30:	e04a      	b.n	8002dc8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d32:	7bfa      	ldrb	r2, [r7, #15]
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	333d      	adds	r3, #61	; 0x3d
 8002d42:	2201      	movs	r2, #1
 8002d44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d46:	7bfa      	ldrb	r2, [r7, #15]
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	333c      	adds	r3, #60	; 0x3c
 8002d56:	7bfa      	ldrb	r2, [r7, #15]
 8002d58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d5a:	7bfa      	ldrb	r2, [r7, #15]
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
 8002d5e:	b298      	uxth	r0, r3
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	3344      	adds	r3, #68	; 0x44
 8002d6e:	4602      	mov	r2, r0
 8002d70:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d72:	7bfa      	ldrb	r2, [r7, #15]
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	440b      	add	r3, r1
 8002d80:	3340      	adds	r3, #64	; 0x40
 8002d82:	2200      	movs	r2, #0
 8002d84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d86:	7bfa      	ldrb	r2, [r7, #15]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	4413      	add	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	3348      	adds	r3, #72	; 0x48
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d9a:	7bfa      	ldrb	r2, [r7, #15]
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4413      	add	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	334c      	adds	r3, #76	; 0x4c
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002dae:	7bfa      	ldrb	r2, [r7, #15]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	4413      	add	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	440b      	add	r3, r1
 8002dbc:	3354      	adds	r3, #84	; 0x54
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
 8002dc8:	7bfa      	ldrb	r2, [r7, #15]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d3af      	bcc.n	8002d32 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	73fb      	strb	r3, [r7, #15]
 8002dd6:	e044      	b.n	8002e62 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002dd8:	7bfa      	ldrb	r2, [r7, #15]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002dee:	7bfa      	ldrb	r2, [r7, #15]
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	4413      	add	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002e00:	7bfa      	ldrb	r2, [r7, #15]
 8002e02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e04:	7bfa      	ldrb	r2, [r7, #15]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e16:	2200      	movs	r2, #0
 8002e18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e1a:	7bfa      	ldrb	r2, [r7, #15]
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e30:	7bfa      	ldrb	r2, [r7, #15]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e46:	7bfa      	ldrb	r2, [r7, #15]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4413      	add	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	73fb      	strb	r3, [r7, #15]
 8002e62:	7bfa      	ldrb	r2, [r7, #15]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d3b5      	bcc.n	8002dd8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	603b      	str	r3, [r7, #0]
 8002e72:	687e      	ldr	r6, [r7, #4]
 8002e74:	466d      	mov	r5, sp
 8002e76:	f106 0410 	add.w	r4, r6, #16
 8002e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e86:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e8a:	1d33      	adds	r3, r6, #4
 8002e8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e8e:	6838      	ldr	r0, [r7, #0]
 8002e90:	f004 fc94 	bl	80077bc <USB_DevInit>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d005      	beq.n	8002ea6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e014      	b.n	8002ed0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d102      	bne.n	8002ec4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f80a 	bl	8002ed8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f004 fe40 	bl	8007b4e <USB_DevDisconnect>

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ed8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	f043 0303 	orr.w	r3, r3, #3
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f24:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a04      	ldr	r2, [pc, #16]	; (8002f3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2e:	6013      	str	r3, [r2, #0]
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40007000 	.word	0x40007000

08002f40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f44:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40007000 	.word	0x40007000

08002f5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f6a:	d130      	bne.n	8002fce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f6c:	4b23      	ldr	r3, [pc, #140]	; (8002ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f78:	d038      	beq.n	8002fec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f7a:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f82:	4a1e      	ldr	r2, [pc, #120]	; (8002ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f88:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f8a:	4b1d      	ldr	r3, [pc, #116]	; (8003000 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2232      	movs	r2, #50	; 0x32
 8002f90:	fb02 f303 	mul.w	r3, r2, r3
 8002f94:	4a1b      	ldr	r2, [pc, #108]	; (8003004 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f96:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9a:	0c9b      	lsrs	r3, r3, #18
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fa0:	e002      	b.n	8002fa8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fa8:	4b14      	ldr	r3, [pc, #80]	; (8002ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb4:	d102      	bne.n	8002fbc <HAL_PWREx_ControlVoltageScaling+0x60>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f2      	bne.n	8002fa2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fbc:	4b0f      	ldr	r3, [pc, #60]	; (8002ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc8:	d110      	bne.n	8002fec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e00f      	b.n	8002fee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fce:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fda:	d007      	beq.n	8002fec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fdc:	4b07      	ldr	r3, [pc, #28]	; (8002ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fe4:	4a05      	ldr	r2, [pc, #20]	; (8002ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40007000 	.word	0x40007000
 8003000:	20000000 	.word	0x20000000
 8003004:	431bde83 	.word	0x431bde83

08003008 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <HAL_PWREx_EnableVddUSB+0x1c>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	4a04      	ldr	r2, [pc, #16]	; (8003024 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003016:	6053      	str	r3, [r2, #4]
}
 8003018:	bf00      	nop
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40007000 	.word	0x40007000

08003028 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af02      	add	r7, sp, #8
 800302e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003030:	f7fe ff84 	bl	8001f3c <HAL_GetTick>
 8003034:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e063      	b.n	8003108 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10b      	bne.n	8003064 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7fe f8bb 	bl	80011d0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800305a:	f241 3188 	movw	r1, #5000	; 0x1388
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f858 	bl	8003114 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	3b01      	subs	r3, #1
 8003074:	021a      	lsls	r2, r3, #8
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	2120      	movs	r1, #32
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f850 	bl	8003130 <QSPI_WaitFlagStateUntilTimeout>
 8003090:	4603      	mov	r3, r0
 8003092:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003094:	7afb      	ldrb	r3, [r7, #11]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d131      	bne.n	80030fe <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80030a4:	f023 0310 	bic.w	r3, r3, #16
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6852      	ldr	r2, [r2, #4]
 80030ac:	0611      	lsls	r1, r2, #24
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68d2      	ldr	r2, [r2, #12]
 80030b2:	4311      	orrs	r1, r2
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	430b      	orrs	r3, r1
 80030ba:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	4b13      	ldr	r3, [pc, #76]	; (8003110 <HAL_QSPI_Init+0xe8>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6912      	ldr	r2, [r2, #16]
 80030ca:	0411      	lsls	r1, r2, #16
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6952      	ldr	r2, [r2, #20]
 80030d0:	4311      	orrs	r1, r2
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6992      	ldr	r2, [r2, #24]
 80030d6:	4311      	orrs	r1, r2
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	430b      	orrs	r3, r1
 80030de:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003106:	7afb      	ldrb	r3, [r7, #11]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	ffe0f8fe 	.word	0xffe0f8fe

08003114 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	4613      	mov	r3, r2
 800313e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003140:	e01a      	b.n	8003178 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003148:	d016      	beq.n	8003178 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314a:	f7fe fef7 	bl	8001f3c <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	429a      	cmp	r2, r3
 8003158:	d302      	bcc.n	8003160 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10b      	bne.n	8003178 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2204      	movs	r2, #4
 8003164:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316c:	f043 0201 	orr.w	r2, r3, #1
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e00e      	b.n	8003196 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	4013      	ands	r3, r2
 8003182:	2b00      	cmp	r3, #0
 8003184:	bf14      	ite	ne
 8003186:	2301      	movne	r3, #1
 8003188:	2300      	moveq	r3, #0
 800318a:	b2db      	uxtb	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	429a      	cmp	r2, r3
 8003192:	d1d6      	bne.n	8003142 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e3ca      	b.n	8003948 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031b2:	4b97      	ldr	r3, [pc, #604]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031bc:	4b94      	ldr	r3, [pc, #592]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80e4 	beq.w	800339c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d007      	beq.n	80031ea <HAL_RCC_OscConfig+0x4a>
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	2b0c      	cmp	r3, #12
 80031de:	f040 808b 	bne.w	80032f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	f040 8087 	bne.w	80032f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031ea:	4b89      	ldr	r3, [pc, #548]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d005      	beq.n	8003202 <HAL_RCC_OscConfig+0x62>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e3a2      	b.n	8003948 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1a      	ldr	r2, [r3, #32]
 8003206:	4b82      	ldr	r3, [pc, #520]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d004      	beq.n	800321c <HAL_RCC_OscConfig+0x7c>
 8003212:	4b7f      	ldr	r3, [pc, #508]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800321a:	e005      	b.n	8003228 <HAL_RCC_OscConfig+0x88>
 800321c:	4b7c      	ldr	r3, [pc, #496]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 800321e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003222:	091b      	lsrs	r3, r3, #4
 8003224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003228:	4293      	cmp	r3, r2
 800322a:	d223      	bcs.n	8003274 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	4618      	mov	r0, r3
 8003232:	f000 fd87 	bl	8003d44 <RCC_SetFlashLatencyFromMSIRange>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e383      	b.n	8003948 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003240:	4b73      	ldr	r3, [pc, #460]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a72      	ldr	r2, [pc, #456]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 8003246:	f043 0308 	orr.w	r3, r3, #8
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	4b70      	ldr	r3, [pc, #448]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	496d      	ldr	r1, [pc, #436]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 800325a:	4313      	orrs	r3, r2
 800325c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800325e:	4b6c      	ldr	r3, [pc, #432]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	021b      	lsls	r3, r3, #8
 800326c:	4968      	ldr	r1, [pc, #416]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 800326e:	4313      	orrs	r3, r2
 8003270:	604b      	str	r3, [r1, #4]
 8003272:	e025      	b.n	80032c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003274:	4b66      	ldr	r3, [pc, #408]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a65      	ldr	r2, [pc, #404]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 800327a:	f043 0308 	orr.w	r3, r3, #8
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	4b63      	ldr	r3, [pc, #396]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	4960      	ldr	r1, [pc, #384]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003292:	4b5f      	ldr	r3, [pc, #380]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	021b      	lsls	r3, r3, #8
 80032a0:	495b      	ldr	r1, [pc, #364]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d109      	bne.n	80032c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fd47 	bl	8003d44 <RCC_SetFlashLatencyFromMSIRange>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e343      	b.n	8003948 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032c0:	f000 fc4a 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 80032c4:	4602      	mov	r2, r0
 80032c6:	4b52      	ldr	r3, [pc, #328]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	091b      	lsrs	r3, r3, #4
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	4950      	ldr	r1, [pc, #320]	; (8003414 <HAL_RCC_OscConfig+0x274>)
 80032d2:	5ccb      	ldrb	r3, [r1, r3]
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	fa22 f303 	lsr.w	r3, r2, r3
 80032dc:	4a4e      	ldr	r2, [pc, #312]	; (8003418 <HAL_RCC_OscConfig+0x278>)
 80032de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032e0:	4b4e      	ldr	r3, [pc, #312]	; (800341c <HAL_RCC_OscConfig+0x27c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fe f967 	bl	80015b8 <HAL_InitTick>
 80032ea:	4603      	mov	r3, r0
 80032ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d052      	beq.n	800339a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	e327      	b.n	8003948 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d032      	beq.n	8003366 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003300:	4b43      	ldr	r3, [pc, #268]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a42      	ldr	r2, [pc, #264]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 8003306:	f043 0301 	orr.w	r3, r3, #1
 800330a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800330c:	f7fe fe16 	bl	8001f3c <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003314:	f7fe fe12 	bl	8001f3c <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e310      	b.n	8003948 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003326:	4b3a      	ldr	r3, [pc, #232]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003332:	4b37      	ldr	r3, [pc, #220]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a36      	ldr	r2, [pc, #216]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 8003338:	f043 0308 	orr.w	r3, r3, #8
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	4b34      	ldr	r3, [pc, #208]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	4931      	ldr	r1, [pc, #196]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 800334c:	4313      	orrs	r3, r2
 800334e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003350:	4b2f      	ldr	r3, [pc, #188]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	021b      	lsls	r3, r3, #8
 800335e:	492c      	ldr	r1, [pc, #176]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 8003360:	4313      	orrs	r3, r2
 8003362:	604b      	str	r3, [r1, #4]
 8003364:	e01a      	b.n	800339c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003366:	4b2a      	ldr	r3, [pc, #168]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a29      	ldr	r2, [pc, #164]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 800336c:	f023 0301 	bic.w	r3, r3, #1
 8003370:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003372:	f7fe fde3 	bl	8001f3c <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800337a:	f7fe fddf 	bl	8001f3c <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e2dd      	b.n	8003948 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800338c:	4b20      	ldr	r3, [pc, #128]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1f0      	bne.n	800337a <HAL_RCC_OscConfig+0x1da>
 8003398:	e000      	b.n	800339c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800339a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d074      	beq.n	8003492 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d005      	beq.n	80033ba <HAL_RCC_OscConfig+0x21a>
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	2b0c      	cmp	r3, #12
 80033b2:	d10e      	bne.n	80033d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	d10b      	bne.n	80033d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ba:	4b15      	ldr	r3, [pc, #84]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d064      	beq.n	8003490 <HAL_RCC_OscConfig+0x2f0>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d160      	bne.n	8003490 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e2ba      	b.n	8003948 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033da:	d106      	bne.n	80033ea <HAL_RCC_OscConfig+0x24a>
 80033dc:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a0b      	ldr	r2, [pc, #44]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 80033e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	e026      	b.n	8003438 <HAL_RCC_OscConfig+0x298>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f2:	d115      	bne.n	8003420 <HAL_RCC_OscConfig+0x280>
 80033f4:	4b06      	ldr	r3, [pc, #24]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a05      	ldr	r2, [pc, #20]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 80033fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	4b03      	ldr	r3, [pc, #12]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a02      	ldr	r2, [pc, #8]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 8003406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	e014      	b.n	8003438 <HAL_RCC_OscConfig+0x298>
 800340e:	bf00      	nop
 8003410:	40021000 	.word	0x40021000
 8003414:	0800ed30 	.word	0x0800ed30
 8003418:	20000000 	.word	0x20000000
 800341c:	20000004 	.word	0x20000004
 8003420:	4ba0      	ldr	r3, [pc, #640]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a9f      	ldr	r2, [pc, #636]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 8003426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	4b9d      	ldr	r3, [pc, #628]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a9c      	ldr	r2, [pc, #624]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 8003432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d013      	beq.n	8003468 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fe fd7c 	bl	8001f3c <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003448:	f7fe fd78 	bl	8001f3c <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b64      	cmp	r3, #100	; 0x64
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e276      	b.n	8003948 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800345a:	4b92      	ldr	r3, [pc, #584]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0x2a8>
 8003466:	e014      	b.n	8003492 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fe fd68 	bl	8001f3c <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003470:	f7fe fd64 	bl	8001f3c <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b64      	cmp	r3, #100	; 0x64
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e262      	b.n	8003948 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003482:	4b88      	ldr	r3, [pc, #544]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x2d0>
 800348e:	e000      	b.n	8003492 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d060      	beq.n	8003560 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d005      	beq.n	80034b0 <HAL_RCC_OscConfig+0x310>
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	2b0c      	cmp	r3, #12
 80034a8:	d119      	bne.n	80034de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d116      	bne.n	80034de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034b0:	4b7c      	ldr	r3, [pc, #496]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d005      	beq.n	80034c8 <HAL_RCC_OscConfig+0x328>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e23f      	b.n	8003948 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c8:	4b76      	ldr	r3, [pc, #472]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	061b      	lsls	r3, r3, #24
 80034d6:	4973      	ldr	r1, [pc, #460]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034dc:	e040      	b.n	8003560 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d023      	beq.n	800352e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e6:	4b6f      	ldr	r3, [pc, #444]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a6e      	ldr	r2, [pc, #440]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 80034ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f2:	f7fe fd23 	bl	8001f3c <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034fa:	f7fe fd1f 	bl	8001f3c <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e21d      	b.n	8003948 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800350c:	4b65      	ldr	r3, [pc, #404]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f0      	beq.n	80034fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003518:	4b62      	ldr	r3, [pc, #392]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	061b      	lsls	r3, r3, #24
 8003526:	495f      	ldr	r1, [pc, #380]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 8003528:	4313      	orrs	r3, r2
 800352a:	604b      	str	r3, [r1, #4]
 800352c:	e018      	b.n	8003560 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800352e:	4b5d      	ldr	r3, [pc, #372]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a5c      	ldr	r2, [pc, #368]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 8003534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353a:	f7fe fcff 	bl	8001f3c <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003542:	f7fe fcfb 	bl	8001f3c <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e1f9      	b.n	8003948 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003554:	4b53      	ldr	r3, [pc, #332]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1f0      	bne.n	8003542 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b00      	cmp	r3, #0
 800356a:	d03c      	beq.n	80035e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d01c      	beq.n	80035ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003574:	4b4b      	ldr	r3, [pc, #300]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 8003576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800357a:	4a4a      	ldr	r2, [pc, #296]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003584:	f7fe fcda 	bl	8001f3c <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800358c:	f7fe fcd6 	bl	8001f3c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e1d4      	b.n	8003948 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800359e:	4b41      	ldr	r3, [pc, #260]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 80035a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0ef      	beq.n	800358c <HAL_RCC_OscConfig+0x3ec>
 80035ac:	e01b      	b.n	80035e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ae:	4b3d      	ldr	r3, [pc, #244]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 80035b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b4:	4a3b      	ldr	r2, [pc, #236]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 80035b6:	f023 0301 	bic.w	r3, r3, #1
 80035ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035be:	f7fe fcbd 	bl	8001f3c <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c6:	f7fe fcb9 	bl	8001f3c <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e1b7      	b.n	8003948 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035d8:	4b32      	ldr	r3, [pc, #200]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 80035da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1ef      	bne.n	80035c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 80a6 	beq.w	8003740 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f4:	2300      	movs	r3, #0
 80035f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035f8:	4b2a      	ldr	r3, [pc, #168]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 80035fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10d      	bne.n	8003620 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003604:	4b27      	ldr	r3, [pc, #156]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 8003606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003608:	4a26      	ldr	r2, [pc, #152]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 800360a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800360e:	6593      	str	r3, [r2, #88]	; 0x58
 8003610:	4b24      	ldr	r3, [pc, #144]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 8003612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800361c:	2301      	movs	r3, #1
 800361e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003620:	4b21      	ldr	r3, [pc, #132]	; (80036a8 <HAL_RCC_OscConfig+0x508>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003628:	2b00      	cmp	r3, #0
 800362a:	d118      	bne.n	800365e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800362c:	4b1e      	ldr	r3, [pc, #120]	; (80036a8 <HAL_RCC_OscConfig+0x508>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a1d      	ldr	r2, [pc, #116]	; (80036a8 <HAL_RCC_OscConfig+0x508>)
 8003632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003636:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003638:	f7fe fc80 	bl	8001f3c <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003640:	f7fe fc7c 	bl	8001f3c <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e17a      	b.n	8003948 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003652:	4b15      	ldr	r3, [pc, #84]	; (80036a8 <HAL_RCC_OscConfig+0x508>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d108      	bne.n	8003678 <HAL_RCC_OscConfig+0x4d8>
 8003666:	4b0f      	ldr	r3, [pc, #60]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 8003668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366c:	4a0d      	ldr	r2, [pc, #52]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003676:	e029      	b.n	80036cc <HAL_RCC_OscConfig+0x52c>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b05      	cmp	r3, #5
 800367e:	d115      	bne.n	80036ac <HAL_RCC_OscConfig+0x50c>
 8003680:	4b08      	ldr	r3, [pc, #32]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 8003682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003686:	4a07      	ldr	r2, [pc, #28]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 8003688:	f043 0304 	orr.w	r3, r3, #4
 800368c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003690:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003696:	4a03      	ldr	r2, [pc, #12]	; (80036a4 <HAL_RCC_OscConfig+0x504>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036a0:	e014      	b.n	80036cc <HAL_RCC_OscConfig+0x52c>
 80036a2:	bf00      	nop
 80036a4:	40021000 	.word	0x40021000
 80036a8:	40007000 	.word	0x40007000
 80036ac:	4b9c      	ldr	r3, [pc, #624]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 80036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b2:	4a9b      	ldr	r2, [pc, #620]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036bc:	4b98      	ldr	r3, [pc, #608]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 80036be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c2:	4a97      	ldr	r2, [pc, #604]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 80036c4:	f023 0304 	bic.w	r3, r3, #4
 80036c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d016      	beq.n	8003702 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d4:	f7fe fc32 	bl	8001f3c <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036da:	e00a      	b.n	80036f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036dc:	f7fe fc2e 	bl	8001f3c <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e12a      	b.n	8003948 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036f2:	4b8b      	ldr	r3, [pc, #556]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 80036f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0ed      	beq.n	80036dc <HAL_RCC_OscConfig+0x53c>
 8003700:	e015      	b.n	800372e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003702:	f7fe fc1b 	bl	8001f3c <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003708:	e00a      	b.n	8003720 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370a:	f7fe fc17 	bl	8001f3c <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	f241 3288 	movw	r2, #5000	; 0x1388
 8003718:	4293      	cmp	r3, r2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e113      	b.n	8003948 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003720:	4b7f      	ldr	r3, [pc, #508]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 8003722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1ed      	bne.n	800370a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800372e:	7ffb      	ldrb	r3, [r7, #31]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d105      	bne.n	8003740 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003734:	4b7a      	ldr	r3, [pc, #488]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 8003736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003738:	4a79      	ldr	r2, [pc, #484]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 800373a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800373e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 80fe 	beq.w	8003946 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374e:	2b02      	cmp	r3, #2
 8003750:	f040 80d0 	bne.w	80038f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003754:	4b72      	ldr	r3, [pc, #456]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f003 0203 	and.w	r2, r3, #3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	429a      	cmp	r2, r3
 8003766:	d130      	bne.n	80037ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	3b01      	subs	r3, #1
 8003774:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003776:	429a      	cmp	r2, r3
 8003778:	d127      	bne.n	80037ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003784:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003786:	429a      	cmp	r2, r3
 8003788:	d11f      	bne.n	80037ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003794:	2a07      	cmp	r2, #7
 8003796:	bf14      	ite	ne
 8003798:	2201      	movne	r2, #1
 800379a:	2200      	moveq	r2, #0
 800379c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800379e:	4293      	cmp	r3, r2
 80037a0:	d113      	bne.n	80037ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ac:	085b      	lsrs	r3, r3, #1
 80037ae:	3b01      	subs	r3, #1
 80037b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d109      	bne.n	80037ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	085b      	lsrs	r3, r3, #1
 80037c2:	3b01      	subs	r3, #1
 80037c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d06e      	beq.n	80038a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	2b0c      	cmp	r3, #12
 80037ce:	d069      	beq.n	80038a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80037d0:	4b53      	ldr	r3, [pc, #332]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d105      	bne.n	80037e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80037dc:	4b50      	ldr	r3, [pc, #320]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0ad      	b.n	8003948 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037ec:	4b4c      	ldr	r3, [pc, #304]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a4b      	ldr	r2, [pc, #300]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 80037f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037f8:	f7fe fba0 	bl	8001f3c <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003800:	f7fe fb9c 	bl	8001f3c <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e09a      	b.n	8003948 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003812:	4b43      	ldr	r3, [pc, #268]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f0      	bne.n	8003800 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800381e:	4b40      	ldr	r3, [pc, #256]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	4b40      	ldr	r3, [pc, #256]	; (8003924 <HAL_RCC_OscConfig+0x784>)
 8003824:	4013      	ands	r3, r2
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800382e:	3a01      	subs	r2, #1
 8003830:	0112      	lsls	r2, r2, #4
 8003832:	4311      	orrs	r1, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003838:	0212      	lsls	r2, r2, #8
 800383a:	4311      	orrs	r1, r2
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003840:	0852      	lsrs	r2, r2, #1
 8003842:	3a01      	subs	r2, #1
 8003844:	0552      	lsls	r2, r2, #21
 8003846:	4311      	orrs	r1, r2
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800384c:	0852      	lsrs	r2, r2, #1
 800384e:	3a01      	subs	r2, #1
 8003850:	0652      	lsls	r2, r2, #25
 8003852:	4311      	orrs	r1, r2
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003858:	0912      	lsrs	r2, r2, #4
 800385a:	0452      	lsls	r2, r2, #17
 800385c:	430a      	orrs	r2, r1
 800385e:	4930      	ldr	r1, [pc, #192]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 8003860:	4313      	orrs	r3, r2
 8003862:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003864:	4b2e      	ldr	r3, [pc, #184]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a2d      	ldr	r2, [pc, #180]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 800386a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800386e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003870:	4b2b      	ldr	r3, [pc, #172]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4a2a      	ldr	r2, [pc, #168]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 8003876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800387a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800387c:	f7fe fb5e 	bl	8001f3c <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003884:	f7fe fb5a 	bl	8001f3c <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e058      	b.n	8003948 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003896:	4b22      	ldr	r3, [pc, #136]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f0      	beq.n	8003884 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038a2:	e050      	b.n	8003946 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e04f      	b.n	8003948 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a8:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d148      	bne.n	8003946 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038b4:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a19      	ldr	r2, [pc, #100]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 80038ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038c0:	4b17      	ldr	r3, [pc, #92]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	4a16      	ldr	r2, [pc, #88]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 80038c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038cc:	f7fe fb36 	bl	8001f3c <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d4:	f7fe fb32 	bl	8001f3c <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e030      	b.n	8003948 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038e6:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCC_OscConfig+0x734>
 80038f2:	e028      	b.n	8003946 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	2b0c      	cmp	r3, #12
 80038f8:	d023      	beq.n	8003942 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038fa:	4b09      	ldr	r3, [pc, #36]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a08      	ldr	r2, [pc, #32]	; (8003920 <HAL_RCC_OscConfig+0x780>)
 8003900:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003906:	f7fe fb19 	bl	8001f3c <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800390c:	e00c      	b.n	8003928 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390e:	f7fe fb15 	bl	8001f3c <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d905      	bls.n	8003928 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e013      	b.n	8003948 <HAL_RCC_OscConfig+0x7a8>
 8003920:	40021000 	.word	0x40021000
 8003924:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003928:	4b09      	ldr	r3, [pc, #36]	; (8003950 <HAL_RCC_OscConfig+0x7b0>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1ec      	bne.n	800390e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003934:	4b06      	ldr	r3, [pc, #24]	; (8003950 <HAL_RCC_OscConfig+0x7b0>)
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	4905      	ldr	r1, [pc, #20]	; (8003950 <HAL_RCC_OscConfig+0x7b0>)
 800393a:	4b06      	ldr	r3, [pc, #24]	; (8003954 <HAL_RCC_OscConfig+0x7b4>)
 800393c:	4013      	ands	r3, r2
 800393e:	60cb      	str	r3, [r1, #12]
 8003940:	e001      	b.n	8003946 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3720      	adds	r7, #32
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40021000 	.word	0x40021000
 8003954:	feeefffc 	.word	0xfeeefffc

08003958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e0e7      	b.n	8003b3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800396c:	4b75      	ldr	r3, [pc, #468]	; (8003b44 <HAL_RCC_ClockConfig+0x1ec>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d910      	bls.n	800399c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397a:	4b72      	ldr	r3, [pc, #456]	; (8003b44 <HAL_RCC_ClockConfig+0x1ec>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f023 0207 	bic.w	r2, r3, #7
 8003982:	4970      	ldr	r1, [pc, #448]	; (8003b44 <HAL_RCC_ClockConfig+0x1ec>)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	4313      	orrs	r3, r2
 8003988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800398a:	4b6e      	ldr	r3, [pc, #440]	; (8003b44 <HAL_RCC_ClockConfig+0x1ec>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d001      	beq.n	800399c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e0cf      	b.n	8003b3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d010      	beq.n	80039ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	4b66      	ldr	r3, [pc, #408]	; (8003b48 <HAL_RCC_ClockConfig+0x1f0>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d908      	bls.n	80039ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b8:	4b63      	ldr	r3, [pc, #396]	; (8003b48 <HAL_RCC_ClockConfig+0x1f0>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	4960      	ldr	r1, [pc, #384]	; (8003b48 <HAL_RCC_ClockConfig+0x1f0>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d04c      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d107      	bne.n	80039ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039de:	4b5a      	ldr	r3, [pc, #360]	; (8003b48 <HAL_RCC_ClockConfig+0x1f0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d121      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e0a6      	b.n	8003b3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d107      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039f6:	4b54      	ldr	r3, [pc, #336]	; (8003b48 <HAL_RCC_ClockConfig+0x1f0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d115      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e09a      	b.n	8003b3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d107      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a0e:	4b4e      	ldr	r3, [pc, #312]	; (8003b48 <HAL_RCC_ClockConfig+0x1f0>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e08e      	b.n	8003b3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a1e:	4b4a      	ldr	r3, [pc, #296]	; (8003b48 <HAL_RCC_ClockConfig+0x1f0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e086      	b.n	8003b3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a2e:	4b46      	ldr	r3, [pc, #280]	; (8003b48 <HAL_RCC_ClockConfig+0x1f0>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f023 0203 	bic.w	r2, r3, #3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	4943      	ldr	r1, [pc, #268]	; (8003b48 <HAL_RCC_ClockConfig+0x1f0>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a40:	f7fe fa7c 	bl	8001f3c <HAL_GetTick>
 8003a44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a46:	e00a      	b.n	8003a5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a48:	f7fe fa78 	bl	8001f3c <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e06e      	b.n	8003b3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5e:	4b3a      	ldr	r3, [pc, #232]	; (8003b48 <HAL_RCC_ClockConfig+0x1f0>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 020c 	and.w	r2, r3, #12
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d1eb      	bne.n	8003a48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d010      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	4b31      	ldr	r3, [pc, #196]	; (8003b48 <HAL_RCC_ClockConfig+0x1f0>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d208      	bcs.n	8003a9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a8c:	4b2e      	ldr	r3, [pc, #184]	; (8003b48 <HAL_RCC_ClockConfig+0x1f0>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	492b      	ldr	r1, [pc, #172]	; (8003b48 <HAL_RCC_ClockConfig+0x1f0>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a9e:	4b29      	ldr	r3, [pc, #164]	; (8003b44 <HAL_RCC_ClockConfig+0x1ec>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d210      	bcs.n	8003ace <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aac:	4b25      	ldr	r3, [pc, #148]	; (8003b44 <HAL_RCC_ClockConfig+0x1ec>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f023 0207 	bic.w	r2, r3, #7
 8003ab4:	4923      	ldr	r1, [pc, #140]	; (8003b44 <HAL_RCC_ClockConfig+0x1ec>)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003abc:	4b21      	ldr	r3, [pc, #132]	; (8003b44 <HAL_RCC_ClockConfig+0x1ec>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d001      	beq.n	8003ace <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e036      	b.n	8003b3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d008      	beq.n	8003aec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ada:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <HAL_RCC_ClockConfig+0x1f0>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	4918      	ldr	r1, [pc, #96]	; (8003b48 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0308 	and.w	r3, r3, #8
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d009      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003af8:	4b13      	ldr	r3, [pc, #76]	; (8003b48 <HAL_RCC_ClockConfig+0x1f0>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	4910      	ldr	r1, [pc, #64]	; (8003b48 <HAL_RCC_ClockConfig+0x1f0>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b0c:	f000 f824 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 8003b10:	4602      	mov	r2, r0
 8003b12:	4b0d      	ldr	r3, [pc, #52]	; (8003b48 <HAL_RCC_ClockConfig+0x1f0>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	091b      	lsrs	r3, r3, #4
 8003b18:	f003 030f 	and.w	r3, r3, #15
 8003b1c:	490b      	ldr	r1, [pc, #44]	; (8003b4c <HAL_RCC_ClockConfig+0x1f4>)
 8003b1e:	5ccb      	ldrb	r3, [r1, r3]
 8003b20:	f003 031f 	and.w	r3, r3, #31
 8003b24:	fa22 f303 	lsr.w	r3, r2, r3
 8003b28:	4a09      	ldr	r2, [pc, #36]	; (8003b50 <HAL_RCC_ClockConfig+0x1f8>)
 8003b2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b2c:	4b09      	ldr	r3, [pc, #36]	; (8003b54 <HAL_RCC_ClockConfig+0x1fc>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fd fd41 	bl	80015b8 <HAL_InitTick>
 8003b36:	4603      	mov	r3, r0
 8003b38:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b3a:	7afb      	ldrb	r3, [r7, #11]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40022000 	.word	0x40022000
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	0800ed30 	.word	0x0800ed30
 8003b50:	20000000 	.word	0x20000000
 8003b54:	20000004 	.word	0x20000004

08003b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b089      	sub	sp, #36	; 0x24
 8003b5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61fb      	str	r3, [r7, #28]
 8003b62:	2300      	movs	r3, #0
 8003b64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b66:	4b3e      	ldr	r3, [pc, #248]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
 8003b6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b70:	4b3b      	ldr	r3, [pc, #236]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f003 0303 	and.w	r3, r3, #3
 8003b78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <HAL_RCC_GetSysClockFreq+0x34>
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	2b0c      	cmp	r3, #12
 8003b84:	d121      	bne.n	8003bca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d11e      	bne.n	8003bca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b8c:	4b34      	ldr	r3, [pc, #208]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0308 	and.w	r3, r3, #8
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d107      	bne.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b98:	4b31      	ldr	r3, [pc, #196]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b9e:	0a1b      	lsrs	r3, r3, #8
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	61fb      	str	r3, [r7, #28]
 8003ba6:	e005      	b.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ba8:	4b2d      	ldr	r3, [pc, #180]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	091b      	lsrs	r3, r3, #4
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003bb4:	4a2b      	ldr	r2, [pc, #172]	; (8003c64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10d      	bne.n	8003be0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bc8:	e00a      	b.n	8003be0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d102      	bne.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bd0:	4b25      	ldr	r3, [pc, #148]	; (8003c68 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bd2:	61bb      	str	r3, [r7, #24]
 8003bd4:	e004      	b.n	8003be0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d101      	bne.n	8003be0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bdc:	4b23      	ldr	r3, [pc, #140]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x114>)
 8003bde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	2b0c      	cmp	r3, #12
 8003be4:	d134      	bne.n	8003c50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003be6:	4b1e      	ldr	r3, [pc, #120]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d003      	beq.n	8003bfe <HAL_RCC_GetSysClockFreq+0xa6>
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2b03      	cmp	r3, #3
 8003bfa:	d003      	beq.n	8003c04 <HAL_RCC_GetSysClockFreq+0xac>
 8003bfc:	e005      	b.n	8003c0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003bfe:	4b1a      	ldr	r3, [pc, #104]	; (8003c68 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c00:	617b      	str	r3, [r7, #20]
      break;
 8003c02:	e005      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c04:	4b19      	ldr	r3, [pc, #100]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x114>)
 8003c06:	617b      	str	r3, [r7, #20]
      break;
 8003c08:	e002      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	617b      	str	r3, [r7, #20]
      break;
 8003c0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c10:	4b13      	ldr	r3, [pc, #76]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c1e:	4b10      	ldr	r3, [pc, #64]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	0a1b      	lsrs	r3, r3, #8
 8003c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	fb03 f202 	mul.w	r2, r3, r2
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c36:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	0e5b      	lsrs	r3, r3, #25
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	3301      	adds	r3, #1
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c50:	69bb      	ldr	r3, [r7, #24]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3724      	adds	r7, #36	; 0x24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40021000 	.word	0x40021000
 8003c64:	0800ed48 	.word	0x0800ed48
 8003c68:	00f42400 	.word	0x00f42400
 8003c6c:	007a1200 	.word	0x007a1200

08003c70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c74:	4b03      	ldr	r3, [pc, #12]	; (8003c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c76:	681b      	ldr	r3, [r3, #0]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	20000000 	.word	0x20000000

08003c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c8c:	f7ff fff0 	bl	8003c70 <HAL_RCC_GetHCLKFreq>
 8003c90:	4602      	mov	r2, r0
 8003c92:	4b06      	ldr	r3, [pc, #24]	; (8003cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	0a1b      	lsrs	r3, r3, #8
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	4904      	ldr	r1, [pc, #16]	; (8003cb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	0800ed40 	.word	0x0800ed40

08003cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003cb8:	f7ff ffda 	bl	8003c70 <HAL_RCC_GetHCLKFreq>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	0adb      	lsrs	r3, r3, #11
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	4904      	ldr	r1, [pc, #16]	; (8003cdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cca:	5ccb      	ldrb	r3, [r1, r3]
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	0800ed40 	.word	0x0800ed40

08003ce0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	220f      	movs	r2, #15
 8003cee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003cf0:	4b12      	ldr	r3, [pc, #72]	; (8003d3c <HAL_RCC_GetClockConfig+0x5c>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 0203 	and.w	r2, r3, #3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003cfc:	4b0f      	ldr	r3, [pc, #60]	; (8003d3c <HAL_RCC_GetClockConfig+0x5c>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003d08:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <HAL_RCC_GetClockConfig+0x5c>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003d14:	4b09      	ldr	r3, [pc, #36]	; (8003d3c <HAL_RCC_GetClockConfig+0x5c>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	08db      	lsrs	r3, r3, #3
 8003d1a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003d22:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <HAL_RCC_GetClockConfig+0x60>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0207 	and.w	r2, r3, #7
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	601a      	str	r2, [r3, #0]
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	40022000 	.word	0x40022000

08003d44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d50:	4b2a      	ldr	r3, [pc, #168]	; (8003dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d5c:	f7ff f8f0 	bl	8002f40 <HAL_PWREx_GetVoltageRange>
 8003d60:	6178      	str	r0, [r7, #20]
 8003d62:	e014      	b.n	8003d8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d64:	4b25      	ldr	r3, [pc, #148]	; (8003dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d68:	4a24      	ldr	r2, [pc, #144]	; (8003dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	6593      	str	r3, [r2, #88]	; 0x58
 8003d70:	4b22      	ldr	r3, [pc, #136]	; (8003dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d7c:	f7ff f8e0 	bl	8002f40 <HAL_PWREx_GetVoltageRange>
 8003d80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d82:	4b1e      	ldr	r3, [pc, #120]	; (8003dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d86:	4a1d      	ldr	r2, [pc, #116]	; (8003dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d94:	d10b      	bne.n	8003dae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b80      	cmp	r3, #128	; 0x80
 8003d9a:	d919      	bls.n	8003dd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2ba0      	cmp	r3, #160	; 0xa0
 8003da0:	d902      	bls.n	8003da8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003da2:	2302      	movs	r3, #2
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	e013      	b.n	8003dd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003da8:	2301      	movs	r3, #1
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	e010      	b.n	8003dd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b80      	cmp	r3, #128	; 0x80
 8003db2:	d902      	bls.n	8003dba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003db4:	2303      	movs	r3, #3
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	e00a      	b.n	8003dd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b80      	cmp	r3, #128	; 0x80
 8003dbe:	d102      	bne.n	8003dc6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	e004      	b.n	8003dd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b70      	cmp	r3, #112	; 0x70
 8003dca:	d101      	bne.n	8003dd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dcc:	2301      	movs	r3, #1
 8003dce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f023 0207 	bic.w	r2, r3, #7
 8003dd8:	4909      	ldr	r1, [pc, #36]	; (8003e00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003de0:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d001      	beq.n	8003df2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	40022000 	.word	0x40022000

08003e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e10:	2300      	movs	r3, #0
 8003e12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d041      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e28:	d02a      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e2a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e2e:	d824      	bhi.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e34:	d008      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e3a:	d81e      	bhi.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e44:	d010      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e46:	e018      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e48:	4b86      	ldr	r3, [pc, #536]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4a85      	ldr	r2, [pc, #532]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e52:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e54:	e015      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3304      	adds	r3, #4
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 facb 	bl	80043f8 <RCCEx_PLLSAI1_Config>
 8003e62:	4603      	mov	r3, r0
 8003e64:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e66:	e00c      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3320      	adds	r3, #32
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fbb6 	bl	80045e0 <RCCEx_PLLSAI2_Config>
 8003e74:	4603      	mov	r3, r0
 8003e76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e78:	e003      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	74fb      	strb	r3, [r7, #19]
      break;
 8003e7e:	e000      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003e80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e82:	7cfb      	ldrb	r3, [r7, #19]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10b      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e88:	4b76      	ldr	r3, [pc, #472]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e96:	4973      	ldr	r1, [pc, #460]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e9e:	e001      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea0:	7cfb      	ldrb	r3, [r7, #19]
 8003ea2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d041      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eb4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003eb8:	d02a      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003eba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ebe:	d824      	bhi.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ec0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ec4:	d008      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ec6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003eca:	d81e      	bhi.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ed4:	d010      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ed6:	e018      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ed8:	4b62      	ldr	r3, [pc, #392]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	4a61      	ldr	r2, [pc, #388]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ee4:	e015      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3304      	adds	r3, #4
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fa83 	bl	80043f8 <RCCEx_PLLSAI1_Config>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ef6:	e00c      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3320      	adds	r3, #32
 8003efc:	2100      	movs	r1, #0
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fb6e 	bl	80045e0 <RCCEx_PLLSAI2_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f08:	e003      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	74fb      	strb	r3, [r7, #19]
      break;
 8003f0e:	e000      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f12:	7cfb      	ldrb	r3, [r7, #19]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10b      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f18:	4b52      	ldr	r3, [pc, #328]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f26:	494f      	ldr	r1, [pc, #316]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f2e:	e001      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f30:	7cfb      	ldrb	r3, [r7, #19]
 8003f32:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 80a0 	beq.w	8004082 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f42:	2300      	movs	r3, #0
 8003f44:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f46:	4b47      	ldr	r3, [pc, #284]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003f56:	2300      	movs	r3, #0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00d      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f5c:	4b41      	ldr	r3, [pc, #260]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f60:	4a40      	ldr	r2, [pc, #256]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f66:	6593      	str	r3, [r2, #88]	; 0x58
 8003f68:	4b3e      	ldr	r3, [pc, #248]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f70:	60bb      	str	r3, [r7, #8]
 8003f72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f74:	2301      	movs	r3, #1
 8003f76:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f78:	4b3b      	ldr	r3, [pc, #236]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a3a      	ldr	r2, [pc, #232]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f84:	f7fd ffda 	bl	8001f3c <HAL_GetTick>
 8003f88:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f8a:	e009      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f8c:	f7fd ffd6 	bl	8001f3c <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d902      	bls.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	74fb      	strb	r3, [r7, #19]
        break;
 8003f9e:	e005      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fa0:	4b31      	ldr	r3, [pc, #196]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0ef      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003fac:	7cfb      	ldrb	r3, [r7, #19]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d15c      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fb2:	4b2c      	ldr	r3, [pc, #176]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fbc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d01f      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d019      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fd0:	4b24      	ldr	r3, [pc, #144]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fdc:	4b21      	ldr	r3, [pc, #132]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe2:	4a20      	ldr	r2, [pc, #128]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fec:	4b1d      	ldr	r3, [pc, #116]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff2:	4a1c      	ldr	r2, [pc, #112]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ffc:	4a19      	ldr	r2, [pc, #100]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d016      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400e:	f7fd ff95 	bl	8001f3c <HAL_GetTick>
 8004012:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004014:	e00b      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004016:	f7fd ff91 	bl	8001f3c <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	f241 3288 	movw	r2, #5000	; 0x1388
 8004024:	4293      	cmp	r3, r2
 8004026:	d902      	bls.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	74fb      	strb	r3, [r7, #19]
            break;
 800402c:	e006      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800402e:	4b0d      	ldr	r3, [pc, #52]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0ec      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800403c:	7cfb      	ldrb	r3, [r7, #19]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10c      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004042:	4b08      	ldr	r3, [pc, #32]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004048:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004052:	4904      	ldr	r1, [pc, #16]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800405a:	e009      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800405c:	7cfb      	ldrb	r3, [r7, #19]
 800405e:	74bb      	strb	r3, [r7, #18]
 8004060:	e006      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004062:	bf00      	nop
 8004064:	40021000 	.word	0x40021000
 8004068:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800406c:	7cfb      	ldrb	r3, [r7, #19]
 800406e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004070:	7c7b      	ldrb	r3, [r7, #17]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d105      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004076:	4b9e      	ldr	r3, [pc, #632]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407a:	4a9d      	ldr	r2, [pc, #628]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004080:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800408e:	4b98      	ldr	r3, [pc, #608]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004094:	f023 0203 	bic.w	r2, r3, #3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	4994      	ldr	r1, [pc, #592]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040b0:	4b8f      	ldr	r3, [pc, #572]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b6:	f023 020c 	bic.w	r2, r3, #12
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	498c      	ldr	r1, [pc, #560]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040d2:	4b87      	ldr	r3, [pc, #540]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e0:	4983      	ldr	r1, [pc, #524]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0308 	and.w	r3, r3, #8
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040f4:	4b7e      	ldr	r3, [pc, #504]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004102:	497b      	ldr	r1, [pc, #492]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0310 	and.w	r3, r3, #16
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004116:	4b76      	ldr	r3, [pc, #472]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004124:	4972      	ldr	r1, [pc, #456]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0320 	and.w	r3, r3, #32
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004138:	4b6d      	ldr	r3, [pc, #436]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004146:	496a      	ldr	r1, [pc, #424]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800415a:	4b65      	ldr	r3, [pc, #404]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004160:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004168:	4961      	ldr	r1, [pc, #388]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800417c:	4b5c      	ldr	r3, [pc, #368]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004182:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800418a:	4959      	ldr	r1, [pc, #356]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800419e:	4b54      	ldr	r3, [pc, #336]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ac:	4950      	ldr	r1, [pc, #320]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041c0:	4b4b      	ldr	r3, [pc, #300]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ce:	4948      	ldr	r1, [pc, #288]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041e2:	4b43      	ldr	r3, [pc, #268]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f0:	493f      	ldr	r1, [pc, #252]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d028      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004204:	4b3a      	ldr	r3, [pc, #232]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004212:	4937      	ldr	r1, [pc, #220]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800421e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004222:	d106      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004224:	4b32      	ldr	r3, [pc, #200]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	4a31      	ldr	r2, [pc, #196]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800422e:	60d3      	str	r3, [r2, #12]
 8004230:	e011      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004236:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800423a:	d10c      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3304      	adds	r3, #4
 8004240:	2101      	movs	r1, #1
 8004242:	4618      	mov	r0, r3
 8004244:	f000 f8d8 	bl	80043f8 <RCCEx_PLLSAI1_Config>
 8004248:	4603      	mov	r3, r0
 800424a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800424c:	7cfb      	ldrb	r3, [r7, #19]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004252:	7cfb      	ldrb	r3, [r7, #19]
 8004254:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d028      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004262:	4b23      	ldr	r3, [pc, #140]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004268:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004270:	491f      	ldr	r1, [pc, #124]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004280:	d106      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004282:	4b1b      	ldr	r3, [pc, #108]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	4a1a      	ldr	r2, [pc, #104]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004288:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800428c:	60d3      	str	r3, [r2, #12]
 800428e:	e011      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004294:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004298:	d10c      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	3304      	adds	r3, #4
 800429e:	2101      	movs	r1, #1
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 f8a9 	bl	80043f8 <RCCEx_PLLSAI1_Config>
 80042a6:	4603      	mov	r3, r0
 80042a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042aa:	7cfb      	ldrb	r3, [r7, #19]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80042b0:	7cfb      	ldrb	r3, [r7, #19]
 80042b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d02b      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042c0:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ce:	4908      	ldr	r1, [pc, #32]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042de:	d109      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042e0:	4b03      	ldr	r3, [pc, #12]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	4a02      	ldr	r2, [pc, #8]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ea:	60d3      	str	r3, [r2, #12]
 80042ec:	e014      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80042ee:	bf00      	nop
 80042f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042fc:	d10c      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3304      	adds	r3, #4
 8004302:	2101      	movs	r1, #1
 8004304:	4618      	mov	r0, r3
 8004306:	f000 f877 	bl	80043f8 <RCCEx_PLLSAI1_Config>
 800430a:	4603      	mov	r3, r0
 800430c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800430e:	7cfb      	ldrb	r3, [r7, #19]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004314:	7cfb      	ldrb	r3, [r7, #19]
 8004316:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d02f      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004324:	4b2b      	ldr	r3, [pc, #172]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004332:	4928      	ldr	r1, [pc, #160]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004334:	4313      	orrs	r3, r2
 8004336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800433e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004342:	d10d      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3304      	adds	r3, #4
 8004348:	2102      	movs	r1, #2
 800434a:	4618      	mov	r0, r3
 800434c:	f000 f854 	bl	80043f8 <RCCEx_PLLSAI1_Config>
 8004350:	4603      	mov	r3, r0
 8004352:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004354:	7cfb      	ldrb	r3, [r7, #19]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d014      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800435a:	7cfb      	ldrb	r3, [r7, #19]
 800435c:	74bb      	strb	r3, [r7, #18]
 800435e:	e011      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004368:	d10c      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	3320      	adds	r3, #32
 800436e:	2102      	movs	r1, #2
 8004370:	4618      	mov	r0, r3
 8004372:	f000 f935 	bl	80045e0 <RCCEx_PLLSAI2_Config>
 8004376:	4603      	mov	r3, r0
 8004378:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800437a:	7cfb      	ldrb	r3, [r7, #19]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004380:	7cfb      	ldrb	r3, [r7, #19]
 8004382:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00a      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004390:	4b10      	ldr	r3, [pc, #64]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004396:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800439e:	490d      	ldr	r1, [pc, #52]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00b      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043b2:	4b08      	ldr	r3, [pc, #32]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043c2:	4904      	ldr	r1, [pc, #16]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40021000 	.word	0x40021000

080043d8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80043dc:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a04      	ldr	r2, [pc, #16]	; (80043f4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80043e2:	f043 0304 	orr.w	r3, r3, #4
 80043e6:	6013      	str	r3, [r2, #0]
}
 80043e8:	bf00      	nop
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40021000 	.word	0x40021000

080043f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004406:	4b75      	ldr	r3, [pc, #468]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d018      	beq.n	8004444 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004412:	4b72      	ldr	r3, [pc, #456]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f003 0203 	and.w	r2, r3, #3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d10d      	bne.n	800443e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
       ||
 8004426:	2b00      	cmp	r3, #0
 8004428:	d009      	beq.n	800443e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800442a:	4b6c      	ldr	r3, [pc, #432]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	091b      	lsrs	r3, r3, #4
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
       ||
 800443a:	429a      	cmp	r2, r3
 800443c:	d047      	beq.n	80044ce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	73fb      	strb	r3, [r7, #15]
 8004442:	e044      	b.n	80044ce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b03      	cmp	r3, #3
 800444a:	d018      	beq.n	800447e <RCCEx_PLLSAI1_Config+0x86>
 800444c:	2b03      	cmp	r3, #3
 800444e:	d825      	bhi.n	800449c <RCCEx_PLLSAI1_Config+0xa4>
 8004450:	2b01      	cmp	r3, #1
 8004452:	d002      	beq.n	800445a <RCCEx_PLLSAI1_Config+0x62>
 8004454:	2b02      	cmp	r3, #2
 8004456:	d009      	beq.n	800446c <RCCEx_PLLSAI1_Config+0x74>
 8004458:	e020      	b.n	800449c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800445a:	4b60      	ldr	r3, [pc, #384]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d11d      	bne.n	80044a2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800446a:	e01a      	b.n	80044a2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800446c:	4b5b      	ldr	r3, [pc, #364]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004474:	2b00      	cmp	r3, #0
 8004476:	d116      	bne.n	80044a6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800447c:	e013      	b.n	80044a6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800447e:	4b57      	ldr	r3, [pc, #348]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10f      	bne.n	80044aa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800448a:	4b54      	ldr	r3, [pc, #336]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d109      	bne.n	80044aa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800449a:	e006      	b.n	80044aa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	73fb      	strb	r3, [r7, #15]
      break;
 80044a0:	e004      	b.n	80044ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044a2:	bf00      	nop
 80044a4:	e002      	b.n	80044ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044a6:	bf00      	nop
 80044a8:	e000      	b.n	80044ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10d      	bne.n	80044ce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044b2:	4b4a      	ldr	r3, [pc, #296]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6819      	ldr	r1, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	430b      	orrs	r3, r1
 80044c8:	4944      	ldr	r1, [pc, #272]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044ce:	7bfb      	ldrb	r3, [r7, #15]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d17d      	bne.n	80045d0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044d4:	4b41      	ldr	r3, [pc, #260]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a40      	ldr	r2, [pc, #256]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044e0:	f7fd fd2c 	bl	8001f3c <HAL_GetTick>
 80044e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044e6:	e009      	b.n	80044fc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044e8:	f7fd fd28 	bl	8001f3c <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d902      	bls.n	80044fc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	73fb      	strb	r3, [r7, #15]
        break;
 80044fa:	e005      	b.n	8004508 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044fc:	4b37      	ldr	r3, [pc, #220]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1ef      	bne.n	80044e8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004508:	7bfb      	ldrb	r3, [r7, #15]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d160      	bne.n	80045d0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d111      	bne.n	8004538 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004514:	4b31      	ldr	r3, [pc, #196]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800451c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6892      	ldr	r2, [r2, #8]
 8004524:	0211      	lsls	r1, r2, #8
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	68d2      	ldr	r2, [r2, #12]
 800452a:	0912      	lsrs	r2, r2, #4
 800452c:	0452      	lsls	r2, r2, #17
 800452e:	430a      	orrs	r2, r1
 8004530:	492a      	ldr	r1, [pc, #168]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004532:	4313      	orrs	r3, r2
 8004534:	610b      	str	r3, [r1, #16]
 8004536:	e027      	b.n	8004588 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d112      	bne.n	8004564 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800453e:	4b27      	ldr	r3, [pc, #156]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004546:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6892      	ldr	r2, [r2, #8]
 800454e:	0211      	lsls	r1, r2, #8
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6912      	ldr	r2, [r2, #16]
 8004554:	0852      	lsrs	r2, r2, #1
 8004556:	3a01      	subs	r2, #1
 8004558:	0552      	lsls	r2, r2, #21
 800455a:	430a      	orrs	r2, r1
 800455c:	491f      	ldr	r1, [pc, #124]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800455e:	4313      	orrs	r3, r2
 8004560:	610b      	str	r3, [r1, #16]
 8004562:	e011      	b.n	8004588 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004564:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800456c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6892      	ldr	r2, [r2, #8]
 8004574:	0211      	lsls	r1, r2, #8
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6952      	ldr	r2, [r2, #20]
 800457a:	0852      	lsrs	r2, r2, #1
 800457c:	3a01      	subs	r2, #1
 800457e:	0652      	lsls	r2, r2, #25
 8004580:	430a      	orrs	r2, r1
 8004582:	4916      	ldr	r1, [pc, #88]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004584:	4313      	orrs	r3, r2
 8004586:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004588:	4b14      	ldr	r3, [pc, #80]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a13      	ldr	r2, [pc, #76]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800458e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004592:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004594:	f7fd fcd2 	bl	8001f3c <HAL_GetTick>
 8004598:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800459a:	e009      	b.n	80045b0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800459c:	f7fd fcce 	bl	8001f3c <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d902      	bls.n	80045b0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	73fb      	strb	r3, [r7, #15]
          break;
 80045ae:	e005      	b.n	80045bc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045b0:	4b0a      	ldr	r3, [pc, #40]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0ef      	beq.n	800459c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d106      	bne.n	80045d0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045c2:	4b06      	ldr	r3, [pc, #24]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	4904      	ldr	r1, [pc, #16]	; (80045dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40021000 	.word	0x40021000

080045e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045ee:	4b6a      	ldr	r3, [pc, #424]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d018      	beq.n	800462c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80045fa:	4b67      	ldr	r3, [pc, #412]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f003 0203 	and.w	r2, r3, #3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d10d      	bne.n	8004626 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
       ||
 800460e:	2b00      	cmp	r3, #0
 8004610:	d009      	beq.n	8004626 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004612:	4b61      	ldr	r3, [pc, #388]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	091b      	lsrs	r3, r3, #4
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
       ||
 8004622:	429a      	cmp	r2, r3
 8004624:	d047      	beq.n	80046b6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	73fb      	strb	r3, [r7, #15]
 800462a:	e044      	b.n	80046b6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b03      	cmp	r3, #3
 8004632:	d018      	beq.n	8004666 <RCCEx_PLLSAI2_Config+0x86>
 8004634:	2b03      	cmp	r3, #3
 8004636:	d825      	bhi.n	8004684 <RCCEx_PLLSAI2_Config+0xa4>
 8004638:	2b01      	cmp	r3, #1
 800463a:	d002      	beq.n	8004642 <RCCEx_PLLSAI2_Config+0x62>
 800463c:	2b02      	cmp	r3, #2
 800463e:	d009      	beq.n	8004654 <RCCEx_PLLSAI2_Config+0x74>
 8004640:	e020      	b.n	8004684 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004642:	4b55      	ldr	r3, [pc, #340]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d11d      	bne.n	800468a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004652:	e01a      	b.n	800468a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004654:	4b50      	ldr	r3, [pc, #320]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465c:	2b00      	cmp	r3, #0
 800465e:	d116      	bne.n	800468e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004664:	e013      	b.n	800468e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004666:	4b4c      	ldr	r3, [pc, #304]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10f      	bne.n	8004692 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004672:	4b49      	ldr	r3, [pc, #292]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d109      	bne.n	8004692 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004682:	e006      	b.n	8004692 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	73fb      	strb	r3, [r7, #15]
      break;
 8004688:	e004      	b.n	8004694 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800468a:	bf00      	nop
 800468c:	e002      	b.n	8004694 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800468e:	bf00      	nop
 8004690:	e000      	b.n	8004694 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004692:	bf00      	nop
    }

    if(status == HAL_OK)
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10d      	bne.n	80046b6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800469a:	4b3f      	ldr	r3, [pc, #252]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6819      	ldr	r1, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	430b      	orrs	r3, r1
 80046b0:	4939      	ldr	r1, [pc, #228]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d167      	bne.n	800478c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046bc:	4b36      	ldr	r3, [pc, #216]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a35      	ldr	r2, [pc, #212]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c8:	f7fd fc38 	bl	8001f3c <HAL_GetTick>
 80046cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046ce:	e009      	b.n	80046e4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046d0:	f7fd fc34 	bl	8001f3c <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d902      	bls.n	80046e4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	73fb      	strb	r3, [r7, #15]
        break;
 80046e2:	e005      	b.n	80046f0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046e4:	4b2c      	ldr	r3, [pc, #176]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1ef      	bne.n	80046d0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d14a      	bne.n	800478c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d111      	bne.n	8004720 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046fc:	4b26      	ldr	r3, [pc, #152]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6892      	ldr	r2, [r2, #8]
 800470c:	0211      	lsls	r1, r2, #8
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	68d2      	ldr	r2, [r2, #12]
 8004712:	0912      	lsrs	r2, r2, #4
 8004714:	0452      	lsls	r2, r2, #17
 8004716:	430a      	orrs	r2, r1
 8004718:	491f      	ldr	r1, [pc, #124]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 800471a:	4313      	orrs	r3, r2
 800471c:	614b      	str	r3, [r1, #20]
 800471e:	e011      	b.n	8004744 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004720:	4b1d      	ldr	r3, [pc, #116]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004728:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6892      	ldr	r2, [r2, #8]
 8004730:	0211      	lsls	r1, r2, #8
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6912      	ldr	r2, [r2, #16]
 8004736:	0852      	lsrs	r2, r2, #1
 8004738:	3a01      	subs	r2, #1
 800473a:	0652      	lsls	r2, r2, #25
 800473c:	430a      	orrs	r2, r1
 800473e:	4916      	ldr	r1, [pc, #88]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004740:	4313      	orrs	r3, r2
 8004742:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004744:	4b14      	ldr	r3, [pc, #80]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a13      	ldr	r2, [pc, #76]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 800474a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004750:	f7fd fbf4 	bl	8001f3c <HAL_GetTick>
 8004754:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004756:	e009      	b.n	800476c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004758:	f7fd fbf0 	bl	8001f3c <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d902      	bls.n	800476c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	73fb      	strb	r3, [r7, #15]
          break;
 800476a:	e005      	b.n	8004778 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800476c:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0ef      	beq.n	8004758 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004780:	695a      	ldr	r2, [r3, #20]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	4904      	ldr	r1, [pc, #16]	; (8004798 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004788:	4313      	orrs	r3, r2
 800478a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800478c:	7bfb      	ldrb	r3, [r7, #15]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40021000 	.word	0x40021000

0800479c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e095      	b.n	80048da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d108      	bne.n	80047c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047be:	d009      	beq.n	80047d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	61da      	str	r2, [r3, #28]
 80047c6:	e005      	b.n	80047d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fc fd32 	bl	8001258 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800480a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004814:	d902      	bls.n	800481c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	e002      	b.n	8004822 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800481c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004820:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800482a:	d007      	beq.n	800483c <HAL_SPI_Init+0xa0>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004834:	d002      	beq.n	800483c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487e:	ea42 0103 	orr.w	r1, r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004886:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	0c1b      	lsrs	r3, r3, #16
 8004898:	f003 0204 	and.w	r2, r3, #4
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	f003 0310 	and.w	r3, r3, #16
 80048a4:	431a      	orrs	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80048b8:	ea42 0103 	orr.w	r1, r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b082      	sub	sp, #8
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e01a      	b.n	800492a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800490a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7fc fce7 	bl	80012e0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b088      	sub	sp, #32
 8004936:	af02      	add	r7, sp, #8
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	603b      	str	r3, [r7, #0]
 800493e:	4613      	mov	r3, r2
 8004940:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800494e:	d112      	bne.n	8004976 <HAL_SPI_Receive+0x44>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10e      	bne.n	8004976 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2204      	movs	r2, #4
 800495c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004960:	88fa      	ldrh	r2, [r7, #6]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	4613      	mov	r3, r2
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	68b9      	ldr	r1, [r7, #8]
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 f910 	bl	8004b92 <HAL_SPI_TransmitReceive>
 8004972:	4603      	mov	r3, r0
 8004974:	e109      	b.n	8004b8a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800497c:	2b01      	cmp	r3, #1
 800497e:	d101      	bne.n	8004984 <HAL_SPI_Receive+0x52>
 8004980:	2302      	movs	r3, #2
 8004982:	e102      	b.n	8004b8a <HAL_SPI_Receive+0x258>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800498c:	f7fd fad6 	bl	8001f3c <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b01      	cmp	r3, #1
 800499c:	d002      	beq.n	80049a4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800499e:	2302      	movs	r3, #2
 80049a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049a2:	e0e9      	b.n	8004b78 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <HAL_SPI_Receive+0x7e>
 80049aa:	88fb      	ldrh	r3, [r7, #6]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d102      	bne.n	80049b6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049b4:	e0e0      	b.n	8004b78 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2204      	movs	r2, #4
 80049ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	88fa      	ldrh	r2, [r7, #6]
 80049ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	88fa      	ldrh	r2, [r7, #6]
 80049d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a00:	d908      	bls.n	8004a14 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a10:	605a      	str	r2, [r3, #4]
 8004a12:	e007      	b.n	8004a24 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a22:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a2c:	d10f      	bne.n	8004a4e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a4c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a58:	2b40      	cmp	r3, #64	; 0x40
 8004a5a:	d007      	beq.n	8004a6c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a6a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a74:	d867      	bhi.n	8004b46 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004a76:	e030      	b.n	8004ada <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d117      	bne.n	8004ab6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f103 020c 	add.w	r2, r3, #12
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	7812      	ldrb	r2, [r2, #0]
 8004a94:	b2d2      	uxtb	r2, r2
 8004a96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004ab4:	e011      	b.n	8004ada <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ab6:	f7fd fa41 	bl	8001f3c <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d803      	bhi.n	8004ace <HAL_SPI_Receive+0x19c>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004acc:	d102      	bne.n	8004ad4 <HAL_SPI_Receive+0x1a2>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d102      	bne.n	8004ada <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004ad8:	e04e      	b.n	8004b78 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1c8      	bne.n	8004a78 <HAL_SPI_Receive+0x146>
 8004ae6:	e034      	b.n	8004b52 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d115      	bne.n	8004b22 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b00:	b292      	uxth	r2, r2
 8004b02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	1c9a      	adds	r2, r3, #2
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004b20:	e011      	b.n	8004b46 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b22:	f7fd fa0b 	bl	8001f3c <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d803      	bhi.n	8004b3a <HAL_SPI_Receive+0x208>
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b38:	d102      	bne.n	8004b40 <HAL_SPI_Receive+0x20e>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d102      	bne.n	8004b46 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b44:	e018      	b.n	8004b78 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1ca      	bne.n	8004ae8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	6839      	ldr	r1, [r7, #0]
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f001 f802 	bl	8005b60 <SPI_EndRxTransaction>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d002      	beq.n	8004b68 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2220      	movs	r2, #32
 8004b66:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	75fb      	strb	r3, [r7, #23]
 8004b74:	e000      	b.n	8004b78 <HAL_SPI_Receive+0x246>
  }

error :
 8004b76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b08a      	sub	sp, #40	; 0x28
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	60f8      	str	r0, [r7, #12]
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	607a      	str	r2, [r7, #4]
 8004b9e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_SPI_TransmitReceive+0x26>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e1fb      	b.n	8004fb0 <HAL_SPI_TransmitReceive+0x41e>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bc0:	f7fd f9bc 	bl	8001f3c <HAL_GetTick>
 8004bc4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bcc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004bd4:	887b      	ldrh	r3, [r7, #2]
 8004bd6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004bd8:	887b      	ldrh	r3, [r7, #2]
 8004bda:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bdc:	7efb      	ldrb	r3, [r7, #27]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d00e      	beq.n	8004c00 <HAL_SPI_TransmitReceive+0x6e>
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004be8:	d106      	bne.n	8004bf8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d102      	bne.n	8004bf8 <HAL_SPI_TransmitReceive+0x66>
 8004bf2:	7efb      	ldrb	r3, [r7, #27]
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	d003      	beq.n	8004c00 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004bfe:	e1cd      	b.n	8004f9c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d005      	beq.n	8004c12 <HAL_SPI_TransmitReceive+0x80>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <HAL_SPI_TransmitReceive+0x80>
 8004c0c:	887b      	ldrh	r3, [r7, #2]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d103      	bne.n	8004c1a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004c18:	e1c0      	b.n	8004f9c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d003      	beq.n	8004c2e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2205      	movs	r2, #5
 8004c2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	887a      	ldrh	r2, [r7, #2]
 8004c3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	887a      	ldrh	r2, [r7, #2]
 8004c46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	887a      	ldrh	r2, [r7, #2]
 8004c54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	887a      	ldrh	r2, [r7, #2]
 8004c5a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c70:	d802      	bhi.n	8004c78 <HAL_SPI_TransmitReceive+0xe6>
 8004c72:	8a3b      	ldrh	r3, [r7, #16]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d908      	bls.n	8004c8a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c86:	605a      	str	r2, [r3, #4]
 8004c88:	e007      	b.n	8004c9a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c98:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca4:	2b40      	cmp	r3, #64	; 0x40
 8004ca6:	d007      	beq.n	8004cb8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cc0:	d97c      	bls.n	8004dbc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <HAL_SPI_TransmitReceive+0x13e>
 8004cca:	8a7b      	ldrh	r3, [r7, #18]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d169      	bne.n	8004da4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd4:	881a      	ldrh	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce0:	1c9a      	adds	r2, r3, #2
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cf4:	e056      	b.n	8004da4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d11b      	bne.n	8004d3c <HAL_SPI_TransmitReceive+0x1aa>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d016      	beq.n	8004d3c <HAL_SPI_TransmitReceive+0x1aa>
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d113      	bne.n	8004d3c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d18:	881a      	ldrh	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d24:	1c9a      	adds	r2, r3, #2
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d11c      	bne.n	8004d84 <HAL_SPI_TransmitReceive+0x1f2>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d016      	beq.n	8004d84 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68da      	ldr	r2, [r3, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d60:	b292      	uxth	r2, r2
 8004d62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d68:	1c9a      	adds	r2, r3, #2
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d80:	2301      	movs	r3, #1
 8004d82:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d84:	f7fd f8da 	bl	8001f3c <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d807      	bhi.n	8004da4 <HAL_SPI_TransmitReceive+0x212>
 8004d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9a:	d003      	beq.n	8004da4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004da2:	e0fb      	b.n	8004f9c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1a3      	bne.n	8004cf6 <HAL_SPI_TransmitReceive+0x164>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d19d      	bne.n	8004cf6 <HAL_SPI_TransmitReceive+0x164>
 8004dba:	e0df      	b.n	8004f7c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d003      	beq.n	8004dcc <HAL_SPI_TransmitReceive+0x23a>
 8004dc4:	8a7b      	ldrh	r3, [r7, #18]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	f040 80cb 	bne.w	8004f62 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d912      	bls.n	8004dfc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dda:	881a      	ldrh	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de6:	1c9a      	adds	r2, r3, #2
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	3b02      	subs	r3, #2
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dfa:	e0b2      	b.n	8004f62 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	330c      	adds	r3, #12
 8004e06:	7812      	ldrb	r2, [r2, #0]
 8004e08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e22:	e09e      	b.n	8004f62 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d134      	bne.n	8004e9c <HAL_SPI_TransmitReceive+0x30a>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d02f      	beq.n	8004e9c <HAL_SPI_TransmitReceive+0x30a>
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d12c      	bne.n	8004e9c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d912      	bls.n	8004e72 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e50:	881a      	ldrh	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5c:	1c9a      	adds	r2, r3, #2
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	3b02      	subs	r3, #2
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e70:	e012      	b.n	8004e98 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	330c      	adds	r3, #12
 8004e7c:	7812      	ldrb	r2, [r2, #0]
 8004e7e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d148      	bne.n	8004f3c <HAL_SPI_TransmitReceive+0x3aa>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d042      	beq.n	8004f3c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d923      	bls.n	8004f0a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68da      	ldr	r2, [r3, #12]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ecc:	b292      	uxth	r2, r2
 8004ece:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed4:	1c9a      	adds	r2, r3, #2
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	3b02      	subs	r3, #2
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d81f      	bhi.n	8004f38 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f06:	605a      	str	r2, [r3, #4]
 8004f08:	e016      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f103 020c 	add.w	r2, r3, #12
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	7812      	ldrb	r2, [r2, #0]
 8004f18:	b2d2      	uxtb	r2, r2
 8004f1a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f3c:	f7fc fffe 	bl	8001f3c <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d803      	bhi.n	8004f54 <HAL_SPI_TransmitReceive+0x3c2>
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f52:	d102      	bne.n	8004f5a <HAL_SPI_TransmitReceive+0x3c8>
 8004f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d103      	bne.n	8004f62 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004f60:	e01c      	b.n	8004f9c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f47f af5b 	bne.w	8004e24 <HAL_SPI_TransmitReceive+0x292>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f47f af54 	bne.w	8004e24 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f7c:	69fa      	ldr	r2, [r7, #28]
 8004f7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 fe45 	bl	8005c10 <SPI_EndRxTxTransaction>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d006      	beq.n	8004f9a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2220      	movs	r2, #32
 8004f96:	661a      	str	r2, [r3, #96]	; 0x60
 8004f98:	e000      	b.n	8004f9c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004f9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004fac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3728      	adds	r7, #40	; 0x28
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d101      	bne.n	8004fd8 <HAL_SPI_Transmit_IT+0x20>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	e072      	b.n	80050be <HAL_SPI_Transmit_IT+0x106>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <HAL_SPI_Transmit_IT+0x34>
 8004fe6:	88fb      	ldrh	r3, [r7, #6]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d102      	bne.n	8004ff2 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ff0:	e060      	b.n	80050b4 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d002      	beq.n	8005004 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004ffe:	2302      	movs	r3, #2
 8005000:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005002:	e057      	b.n	80050b4 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2203      	movs	r2, #3
 8005008:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	88fa      	ldrh	r2, [r7, #6]
 800501c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	88fa      	ldrh	r2, [r7, #6]
 8005022:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005048:	d903      	bls.n	8005052 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4a1f      	ldr	r2, [pc, #124]	; (80050cc <HAL_SPI_Transmit_IT+0x114>)
 800504e:	651a      	str	r2, [r3, #80]	; 0x50
 8005050:	e002      	b.n	8005058 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4a1e      	ldr	r2, [pc, #120]	; (80050d0 <HAL_SPI_Transmit_IT+0x118>)
 8005056:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005060:	d10f      	bne.n	8005082 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005070:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005080:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8005090:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509c:	2b40      	cmp	r3, #64	; 0x40
 800509e:	d008      	beq.n	80050b2 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	e000      	b.n	80050b4 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 80050b2:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80050bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	371c      	adds	r7, #28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	080058df 	.word	0x080058df
 80050d0:	08005899 	.word	0x08005899

080050d4 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	4613      	mov	r3, r2
 80050e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d110      	bne.n	8005110 <HAL_SPI_Receive_IT+0x3c>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050f6:	d10b      	bne.n	8005110 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2204      	movs	r2, #4
 80050fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8005100:	88fb      	ldrh	r3, [r7, #6]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	68b9      	ldr	r1, [r7, #8]
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 f894 	bl	8005234 <HAL_SPI_TransmitReceive_IT>
 800510c:	4603      	mov	r3, r0
 800510e:	e089      	b.n	8005224 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005116:	2b01      	cmp	r3, #1
 8005118:	d101      	bne.n	800511e <HAL_SPI_Receive_IT+0x4a>
 800511a:	2302      	movs	r3, #2
 800511c:	e082      	b.n	8005224 <HAL_SPI_Receive_IT+0x150>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b01      	cmp	r3, #1
 8005130:	d002      	beq.n	8005138 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8005132:	2302      	movs	r3, #2
 8005134:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005136:	e070      	b.n	800521a <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <HAL_SPI_Receive_IT+0x70>
 800513e:	88fb      	ldrh	r3, [r7, #6]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d102      	bne.n	800514a <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005148:	e067      	b.n	800521a <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2204      	movs	r2, #4
 800514e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	88fa      	ldrh	r2, [r7, #6]
 8005162:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	88fa      	ldrh	r2, [r7, #6]
 800516a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800518e:	d90b      	bls.n	80051a8 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800519e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4a22      	ldr	r2, [pc, #136]	; (800522c <HAL_SPI_Receive_IT+0x158>)
 80051a4:	64da      	str	r2, [r3, #76]	; 0x4c
 80051a6:	e00a      	b.n	80051be <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051b6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4a1d      	ldr	r2, [pc, #116]	; (8005230 <HAL_SPI_Receive_IT+0x15c>)
 80051bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051c6:	d10f      	bne.n	80051e8 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051e6:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80051f6:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005202:	2b40      	cmp	r3, #64	; 0x40
 8005204:	d008      	beq.n	8005218 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	e000      	b.n	800521a <HAL_SPI_Receive_IT+0x146>
  }

error :
 8005218:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005222:	7dfb      	ldrb	r3, [r7, #23]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3718      	adds	r7, #24
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	0800584d 	.word	0x0800584d
 8005230:	080057fd 	.word	0x080057fd

08005234 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005242:	2300      	movs	r3, #0
 8005244:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800524c:	2b01      	cmp	r3, #1
 800524e:	d101      	bne.n	8005254 <HAL_SPI_TransmitReceive_IT+0x20>
 8005250:	2302      	movs	r3, #2
 8005252:	e091      	b.n	8005378 <HAL_SPI_TransmitReceive_IT+0x144>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005262:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800526a:	7dbb      	ldrb	r3, [r7, #22]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d00d      	beq.n	800528c <HAL_SPI_TransmitReceive_IT+0x58>
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005276:	d106      	bne.n	8005286 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d102      	bne.n	8005286 <HAL_SPI_TransmitReceive_IT+0x52>
 8005280:	7dbb      	ldrb	r3, [r7, #22]
 8005282:	2b04      	cmp	r3, #4
 8005284:	d002      	beq.n	800528c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8005286:	2302      	movs	r3, #2
 8005288:	75fb      	strb	r3, [r7, #23]
    goto error;
 800528a:	e070      	b.n	800536e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d005      	beq.n	800529e <HAL_SPI_TransmitReceive_IT+0x6a>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <HAL_SPI_TransmitReceive_IT+0x6a>
 8005298:	887b      	ldrh	r3, [r7, #2]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d102      	bne.n	80052a4 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052a2:	e064      	b.n	800536e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	d003      	beq.n	80052b8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2205      	movs	r2, #5
 80052b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	887a      	ldrh	r2, [r7, #2]
 80052c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	887a      	ldrh	r2, [r7, #2]
 80052ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	887a      	ldrh	r2, [r7, #2]
 80052da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	887a      	ldrh	r2, [r7, #2]
 80052e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052ee:	d906      	bls.n	80052fe <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4a24      	ldr	r2, [pc, #144]	; (8005384 <HAL_SPI_TransmitReceive_IT+0x150>)
 80052f4:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4a23      	ldr	r2, [pc, #140]	; (8005388 <HAL_SPI_TransmitReceive_IT+0x154>)
 80052fa:	651a      	str	r2, [r3, #80]	; 0x50
 80052fc:	e005      	b.n	800530a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4a22      	ldr	r2, [pc, #136]	; (800538c <HAL_SPI_TransmitReceive_IT+0x158>)
 8005302:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4a22      	ldr	r2, [pc, #136]	; (8005390 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8005308:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005312:	d802      	bhi.n	800531a <HAL_SPI_TransmitReceive_IT+0xe6>
 8005314:	887b      	ldrh	r3, [r7, #2]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d908      	bls.n	800532c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005328:	605a      	str	r2, [r3, #4]
 800532a:	e007      	b.n	800533c <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800533a:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800534a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005356:	2b40      	cmp	r3, #64	; 0x40
 8005358:	d008      	beq.n	800536c <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	e000      	b.n	800536e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 800536c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005376:	7dfb      	ldrb	r3, [r7, #23]
}
 8005378:	4618      	mov	r0, r3
 800537a:	371c      	adds	r7, #28
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	08005737 	.word	0x08005737
 8005388:	0800579d 	.word	0x0800579d
 800538c:	080055e7 	.word	0x080055e7
 8005390:	080056a5 	.word	0x080056a5

08005394 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	099b      	lsrs	r3, r3, #6
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10f      	bne.n	80053d8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	099b      	lsrs	r3, r3, #6
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d004      	beq.n	80053d8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	4798      	blx	r3
    return;
 80053d6:	e0d7      	b.n	8005588 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	085b      	lsrs	r3, r3, #1
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00a      	beq.n	80053fa <HAL_SPI_IRQHandler+0x66>
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	09db      	lsrs	r3, r3, #7
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d004      	beq.n	80053fa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	4798      	blx	r3
    return;
 80053f8:	e0c6      	b.n	8005588 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	095b      	lsrs	r3, r3, #5
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10c      	bne.n	8005420 <HAL_SPI_IRQHandler+0x8c>
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	099b      	lsrs	r3, r3, #6
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d106      	bne.n	8005420 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	0a1b      	lsrs	r3, r3, #8
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	f000 80b4 	beq.w	8005588 <HAL_SPI_IRQHandler+0x1f4>
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	095b      	lsrs	r3, r3, #5
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 80ad 	beq.w	8005588 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	099b      	lsrs	r3, r3, #6
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d023      	beq.n	8005482 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b03      	cmp	r3, #3
 8005444:	d011      	beq.n	800546a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800544a:	f043 0204 	orr.w	r2, r3, #4
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005452:	2300      	movs	r3, #0
 8005454:	617b      	str	r3, [r7, #20]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	617b      	str	r3, [r7, #20]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	617b      	str	r3, [r7, #20]
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	e00b      	b.n	8005482 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800546a:	2300      	movs	r3, #0
 800546c:	613b      	str	r3, [r7, #16]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	613b      	str	r3, [r7, #16]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	613b      	str	r3, [r7, #16]
 800547e:	693b      	ldr	r3, [r7, #16]
        return;
 8005480:	e082      	b.n	8005588 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	095b      	lsrs	r3, r3, #5
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d014      	beq.n	80054b8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005492:	f043 0201 	orr.w	r2, r3, #1
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	0a1b      	lsrs	r3, r3, #8
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00c      	beq.n	80054de <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054c8:	f043 0208 	orr.w	r2, r3, #8
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80054d0:	2300      	movs	r3, #0
 80054d2:	60bb      	str	r3, [r7, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	60bb      	str	r3, [r7, #8]
 80054dc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d04f      	beq.n	8005586 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054f4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d104      	bne.n	8005512 <HAL_SPI_IRQHandler+0x17e>
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d034      	beq.n	800557c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 0203 	bic.w	r2, r2, #3
 8005520:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005526:	2b00      	cmp	r3, #0
 8005528:	d011      	beq.n	800554e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552e:	4a18      	ldr	r2, [pc, #96]	; (8005590 <HAL_SPI_IRQHandler+0x1fc>)
 8005530:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005536:	4618      	mov	r0, r3
 8005538:	f7fc ff5c 	bl	80023f4 <HAL_DMA_Abort_IT>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d005      	beq.n	800554e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005546:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005552:	2b00      	cmp	r3, #0
 8005554:	d016      	beq.n	8005584 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555a:	4a0d      	ldr	r2, [pc, #52]	; (8005590 <HAL_SPI_IRQHandler+0x1fc>)
 800555c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005562:	4618      	mov	r0, r3
 8005564:	f7fc ff46 	bl	80023f4 <HAL_DMA_Abort_IT>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005572:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800557a:	e003      	b.n	8005584 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f813 	bl	80055a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005582:	e000      	b.n	8005586 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005584:	bf00      	nop
    return;
 8005586:	bf00      	nop
  }
}
 8005588:	3720      	adds	r7, #32
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	080055bd 	.word	0x080055bd

08005594 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f7ff ffe5 	bl	80055a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80055de:	bf00      	nop
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b082      	sub	sp, #8
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d923      	bls.n	8005642 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68da      	ldr	r2, [r3, #12]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005604:	b292      	uxth	r2, r2
 8005606:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560c:	1c9a      	adds	r2, r3, #2
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005618:	b29b      	uxth	r3, r3
 800561a:	3b02      	subs	r3, #2
 800561c:	b29a      	uxth	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800562a:	b29b      	uxth	r3, r3
 800562c:	2b01      	cmp	r3, #1
 800562e:	d11f      	bne.n	8005670 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800563e:	605a      	str	r2, [r3, #4]
 8005640:	e016      	b.n	8005670 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f103 020c 	add.w	r2, r3, #12
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564e:	7812      	ldrb	r2, [r2, #0]
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005664:	b29b      	uxth	r3, r3
 8005666:	3b01      	subs	r3, #1
 8005668:	b29a      	uxth	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005676:	b29b      	uxth	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10f      	bne.n	800569c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800568a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d102      	bne.n	800569c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fb00 	bl	8005c9c <SPI_CloseRxTx_ISR>
    }
  }
}
 800569c:	bf00      	nop
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d912      	bls.n	80056dc <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ba:	881a      	ldrh	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c6:	1c9a      	adds	r2, r3, #2
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	3b02      	subs	r3, #2
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056da:	e012      	b.n	8005702 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	330c      	adds	r3, #12
 80056e6:	7812      	ldrb	r2, [r2, #0]
 80056e8:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	3b01      	subs	r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005706:	b29b      	uxth	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d110      	bne.n	800572e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800571a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005722:	b29b      	uxth	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	d102      	bne.n	800572e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fab7 	bl	8005c9c <SPI_CloseRxTx_ISR>
    }
  }
}
 800572e:	bf00      	nop
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b082      	sub	sp, #8
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68da      	ldr	r2, [r3, #12]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	b292      	uxth	r2, r2
 800574a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005750:	1c9a      	adds	r2, r3, #2
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800575c:	b29b      	uxth	r3, r3
 800575e:	3b01      	subs	r3, #1
 8005760:	b29a      	uxth	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800576e:	b29b      	uxth	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10f      	bne.n	8005794 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005782:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005788:	b29b      	uxth	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d102      	bne.n	8005794 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fa84 	bl	8005c9c <SPI_CloseRxTx_ISR>
    }
  }
}
 8005794:	bf00      	nop
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a8:	881a      	ldrh	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b4:	1c9a      	adds	r2, r3, #2
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057be:	b29b      	uxth	r3, r3
 80057c0:	3b01      	subs	r3, #1
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d110      	bne.n	80057f4 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057e0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d102      	bne.n	80057f4 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fa54 	bl	8005c9c <SPI_CloseRxTx_ISR>
    }
  }
}
 80057f4:	bf00      	nop
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f103 020c 	add.w	r2, r3, #12
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005810:	7812      	ldrb	r2, [r2, #0]
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005826:	b29b      	uxth	r3, r3
 8005828:	3b01      	subs	r3, #1
 800582a:	b29a      	uxth	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d102      	bne.n	8005844 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fa6e 	bl	8005d20 <SPI_CloseRx_ISR>
  }
}
 8005844:	bf00      	nop
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68da      	ldr	r2, [r3, #12]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	b292      	uxth	r2, r2
 8005860:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	1c9a      	adds	r2, r3, #2
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005872:	b29b      	uxth	r3, r3
 8005874:	3b01      	subs	r3, #1
 8005876:	b29a      	uxth	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005884:	b29b      	uxth	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d102      	bne.n	8005890 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fa48 	bl	8005d20 <SPI_CloseRx_ISR>
  }
}
 8005890:	bf00      	nop
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	330c      	adds	r3, #12
 80058aa:	7812      	ldrb	r2, [r2, #0]
 80058ac:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058bc:	b29b      	uxth	r3, r3
 80058be:	3b01      	subs	r3, #1
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d102      	bne.n	80058d6 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 fa55 	bl	8005d80 <SPI_CloseTx_ISR>
  }
}
 80058d6:	bf00      	nop
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b082      	sub	sp, #8
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ea:	881a      	ldrh	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f6:	1c9a      	adds	r2, r3, #2
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005900:	b29b      	uxth	r3, r3
 8005902:	3b01      	subs	r3, #1
 8005904:	b29a      	uxth	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800590e:	b29b      	uxth	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d102      	bne.n	800591a <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fa33 	bl	8005d80 <SPI_CloseTx_ISR>
  }
}
 800591a:	bf00      	nop
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b088      	sub	sp, #32
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	603b      	str	r3, [r7, #0]
 8005930:	4613      	mov	r3, r2
 8005932:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005934:	f7fc fb02 	bl	8001f3c <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593c:	1a9b      	subs	r3, r3, r2
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	4413      	add	r3, r2
 8005942:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005944:	f7fc fafa 	bl	8001f3c <HAL_GetTick>
 8005948:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800594a:	4b39      	ldr	r3, [pc, #228]	; (8005a30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	015b      	lsls	r3, r3, #5
 8005950:	0d1b      	lsrs	r3, r3, #20
 8005952:	69fa      	ldr	r2, [r7, #28]
 8005954:	fb02 f303 	mul.w	r3, r2, r3
 8005958:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800595a:	e054      	b.n	8005a06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005962:	d050      	beq.n	8005a06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005964:	f7fc faea 	bl	8001f3c <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	69fa      	ldr	r2, [r7, #28]
 8005970:	429a      	cmp	r2, r3
 8005972:	d902      	bls.n	800597a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d13d      	bne.n	80059f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005988:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005992:	d111      	bne.n	80059b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800599c:	d004      	beq.n	80059a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059a6:	d107      	bne.n	80059b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059c0:	d10f      	bne.n	80059e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e017      	b.n	8005a26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	bf0c      	ite	eq
 8005a16:	2301      	moveq	r3, #1
 8005a18:	2300      	movne	r3, #0
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	79fb      	ldrb	r3, [r7, #7]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d19b      	bne.n	800595c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3720      	adds	r7, #32
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20000000 	.word	0x20000000

08005a34 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08a      	sub	sp, #40	; 0x28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
 8005a40:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005a46:	f7fc fa79 	bl	8001f3c <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4e:	1a9b      	subs	r3, r3, r2
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	4413      	add	r3, r2
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005a56:	f7fc fa71 	bl	8001f3c <HAL_GetTick>
 8005a5a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	330c      	adds	r3, #12
 8005a62:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a64:	4b3d      	ldr	r3, [pc, #244]	; (8005b5c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	00da      	lsls	r2, r3, #3
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	0d1b      	lsrs	r3, r3, #20
 8005a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a76:	fb02 f303 	mul.w	r3, r2, r3
 8005a7a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005a7c:	e060      	b.n	8005b40 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a84:	d107      	bne.n	8005a96 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d104      	bne.n	8005a96 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005a94:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9c:	d050      	beq.n	8005b40 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a9e:	f7fc fa4d 	bl	8001f3c <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d902      	bls.n	8005ab4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d13d      	bne.n	8005b30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ac2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005acc:	d111      	bne.n	8005af2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ad6:	d004      	beq.n	8005ae2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae0:	d107      	bne.n	8005af2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005af0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005afa:	d10f      	bne.n	8005b1c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e010      	b.n	8005b52 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689a      	ldr	r2, [r3, #8]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d196      	bne.n	8005a7e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3728      	adds	r7, #40	; 0x28
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20000000 	.word	0x20000000

08005b60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af02      	add	r7, sp, #8
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b74:	d111      	bne.n	8005b9a <SPI_EndRxTransaction+0x3a>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b7e:	d004      	beq.n	8005b8a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b88:	d107      	bne.n	8005b9a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b98:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2180      	movs	r1, #128	; 0x80
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f7ff febd 	bl	8005924 <SPI_WaitFlagStateUntilTimeout>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d007      	beq.n	8005bc0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb4:	f043 0220 	orr.w	r2, r3, #32
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e023      	b.n	8005c08 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bc8:	d11d      	bne.n	8005c06 <SPI_EndRxTransaction+0xa6>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bd2:	d004      	beq.n	8005bde <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bdc:	d113      	bne.n	8005c06 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f7ff ff22 	bl	8005a34 <SPI_WaitFifoStateUntilTimeout>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d007      	beq.n	8005c06 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bfa:	f043 0220 	orr.w	r2, r3, #32
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e000      	b.n	8005c08 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af02      	add	r7, sp, #8
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f7ff ff03 	bl	8005a34 <SPI_WaitFifoStateUntilTimeout>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d007      	beq.n	8005c44 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c38:	f043 0220 	orr.w	r2, r3, #32
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e027      	b.n	8005c94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	2180      	movs	r1, #128	; 0x80
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f7ff fe68 	bl	8005924 <SPI_WaitFlagStateUntilTimeout>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d007      	beq.n	8005c6a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c5e:	f043 0220 	orr.w	r2, r3, #32
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e014      	b.n	8005c94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f7ff fedc 	bl	8005a34 <SPI_WaitFifoStateUntilTimeout>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d007      	beq.n	8005c92 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c86:	f043 0220 	orr.w	r2, r3, #32
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e000      	b.n	8005c94 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ca4:	f7fc f94a 	bl	8001f3c <HAL_GetTick>
 8005ca8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0220 	bic.w	r2, r2, #32
 8005cb8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	2164      	movs	r1, #100	; 0x64
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7ff ffa6 	bl	8005c10 <SPI_EndRxTxTransaction>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d005      	beq.n	8005cd6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cce:	f043 0220 	orr.w	r2, r3, #32
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d115      	bne.n	8005d0a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	d107      	bne.n	8005cfa <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f003 fc0a 	bl	800950c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005cf8:	e00e      	b.n	8005d18 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7ff fc46 	bl	8005594 <HAL_SPI_TxRxCpltCallback>
}
 8005d08:	e006      	b.n	8005d18 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7ff fc48 	bl	80055a8 <HAL_SPI_ErrorCallback>
}
 8005d18:	bf00      	nop
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d36:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8005d38:	f7fc f900 	bl	8001f3c <HAL_GetTick>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	461a      	mov	r2, r3
 8005d40:	2164      	movs	r1, #100	; 0x64
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7ff ff0c 	bl	8005b60 <SPI_EndRxTransaction>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d005      	beq.n	8005d5a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d52:	f043 0220 	orr.w	r2, r3, #32
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d103      	bne.n	8005d72 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f003 fbce 	bl	800950c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005d70:	e002      	b.n	8005d78 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7ff fc18 	bl	80055a8 <HAL_SPI_ErrorCallback>
}
 8005d78:	bf00      	nop
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d88:	f7fc f8d8 	bl	8001f3c <HAL_GetTick>
 8005d8c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d9c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	2164      	movs	r1, #100	; 0x64
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7ff ff34 	bl	8005c10 <SPI_EndRxTxTransaction>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d005      	beq.n	8005dba <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005db2:	f043 0220 	orr.w	r2, r3, #32
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10a      	bne.n	8005dd8 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60bb      	str	r3, [r7, #8]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	60bb      	str	r3, [r7, #8]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	60bb      	str	r3, [r7, #8]
 8005dd6:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d003      	beq.n	8005df0 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff fbdd 	bl	80055a8 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005dee:	e002      	b.n	8005df6 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f003 fb9f 	bl	8009534 <HAL_SPI_TxCpltCallback>
}
 8005df6:	bf00      	nop
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b082      	sub	sp, #8
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e049      	b.n	8005ea4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d106      	bne.n	8005e2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f841 	bl	8005eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2202      	movs	r2, #2
 8005e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3304      	adds	r3, #4
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	4610      	mov	r0, r2
 8005e3e:	f000 f9f7 	bl	8006230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d001      	beq.n	8005ed8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e04f      	b.n	8005f78 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68da      	ldr	r2, [r3, #12]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0201 	orr.w	r2, r2, #1
 8005eee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a23      	ldr	r2, [pc, #140]	; (8005f84 <HAL_TIM_Base_Start_IT+0xc4>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d01d      	beq.n	8005f36 <HAL_TIM_Base_Start_IT+0x76>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f02:	d018      	beq.n	8005f36 <HAL_TIM_Base_Start_IT+0x76>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a1f      	ldr	r2, [pc, #124]	; (8005f88 <HAL_TIM_Base_Start_IT+0xc8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d013      	beq.n	8005f36 <HAL_TIM_Base_Start_IT+0x76>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a1e      	ldr	r2, [pc, #120]	; (8005f8c <HAL_TIM_Base_Start_IT+0xcc>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d00e      	beq.n	8005f36 <HAL_TIM_Base_Start_IT+0x76>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a1c      	ldr	r2, [pc, #112]	; (8005f90 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d009      	beq.n	8005f36 <HAL_TIM_Base_Start_IT+0x76>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a1b      	ldr	r2, [pc, #108]	; (8005f94 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d004      	beq.n	8005f36 <HAL_TIM_Base_Start_IT+0x76>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a19      	ldr	r2, [pc, #100]	; (8005f98 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d115      	bne.n	8005f62 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	4b17      	ldr	r3, [pc, #92]	; (8005f9c <HAL_TIM_Base_Start_IT+0xdc>)
 8005f3e:	4013      	ands	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b06      	cmp	r3, #6
 8005f46:	d015      	beq.n	8005f74 <HAL_TIM_Base_Start_IT+0xb4>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f4e:	d011      	beq.n	8005f74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 0201 	orr.w	r2, r2, #1
 8005f5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f60:	e008      	b.n	8005f74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f042 0201 	orr.w	r2, r2, #1
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	e000      	b.n	8005f76 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	40012c00 	.word	0x40012c00
 8005f88:	40000400 	.word	0x40000400
 8005f8c:	40000800 	.word	0x40000800
 8005f90:	40000c00 	.word	0x40000c00
 8005f94:	40013400 	.word	0x40013400
 8005f98:	40014000 	.word	0x40014000
 8005f9c:	00010007 	.word	0x00010007

08005fa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d122      	bne.n	8005ffc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d11b      	bne.n	8005ffc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f06f 0202 	mvn.w	r2, #2
 8005fcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	f003 0303 	and.w	r3, r3, #3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f905 	bl	80061f2 <HAL_TIM_IC_CaptureCallback>
 8005fe8:	e005      	b.n	8005ff6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f8f7 	bl	80061de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f908 	bl	8006206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	f003 0304 	and.w	r3, r3, #4
 8006006:	2b04      	cmp	r3, #4
 8006008:	d122      	bne.n	8006050 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	f003 0304 	and.w	r3, r3, #4
 8006014:	2b04      	cmp	r3, #4
 8006016:	d11b      	bne.n	8006050 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f06f 0204 	mvn.w	r2, #4
 8006020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2202      	movs	r2, #2
 8006026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f8db 	bl	80061f2 <HAL_TIM_IC_CaptureCallback>
 800603c:	e005      	b.n	800604a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f8cd 	bl	80061de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f8de 	bl	8006206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f003 0308 	and.w	r3, r3, #8
 800605a:	2b08      	cmp	r3, #8
 800605c:	d122      	bne.n	80060a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f003 0308 	and.w	r3, r3, #8
 8006068:	2b08      	cmp	r3, #8
 800606a:	d11b      	bne.n	80060a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f06f 0208 	mvn.w	r2, #8
 8006074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2204      	movs	r2, #4
 800607a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	f003 0303 	and.w	r3, r3, #3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f8b1 	bl	80061f2 <HAL_TIM_IC_CaptureCallback>
 8006090:	e005      	b.n	800609e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f8a3 	bl	80061de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f8b4 	bl	8006206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f003 0310 	and.w	r3, r3, #16
 80060ae:	2b10      	cmp	r3, #16
 80060b0:	d122      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f003 0310 	and.w	r3, r3, #16
 80060bc:	2b10      	cmp	r3, #16
 80060be:	d11b      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f06f 0210 	mvn.w	r2, #16
 80060c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2208      	movs	r2, #8
 80060ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f887 	bl	80061f2 <HAL_TIM_IC_CaptureCallback>
 80060e4:	e005      	b.n	80060f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f879 	bl	80061de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f88a 	bl	8006206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b01      	cmp	r3, #1
 8006104:	d10e      	bne.n	8006124 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b01      	cmp	r3, #1
 8006112:	d107      	bne.n	8006124 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f06f 0201 	mvn.w	r2, #1
 800611c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7fa ff54 	bl	8000fcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612e:	2b80      	cmp	r3, #128	; 0x80
 8006130:	d10e      	bne.n	8006150 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800613c:	2b80      	cmp	r3, #128	; 0x80
 800613e:	d107      	bne.n	8006150 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f914 	bl	8006378 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800615a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800615e:	d10e      	bne.n	800617e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616a:	2b80      	cmp	r3, #128	; 0x80
 800616c:	d107      	bne.n	800617e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 f907 	bl	800638c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006188:	2b40      	cmp	r3, #64	; 0x40
 800618a:	d10e      	bne.n	80061aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006196:	2b40      	cmp	r3, #64	; 0x40
 8006198:	d107      	bne.n	80061aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f838 	bl	800621a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	f003 0320 	and.w	r3, r3, #32
 80061b4:	2b20      	cmp	r3, #32
 80061b6:	d10e      	bne.n	80061d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	f003 0320 	and.w	r3, r3, #32
 80061c2:	2b20      	cmp	r3, #32
 80061c4:	d107      	bne.n	80061d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f06f 0220 	mvn.w	r2, #32
 80061ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f8c7 	bl	8006364 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061d6:	bf00      	nop
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061de:	b480      	push	{r7}
 80061e0:	b083      	sub	sp, #12
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061e6:	bf00      	nop
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061fa:	bf00      	nop
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006222:	bf00      	nop
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
	...

08006230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a40      	ldr	r2, [pc, #256]	; (8006344 <TIM_Base_SetConfig+0x114>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d013      	beq.n	8006270 <TIM_Base_SetConfig+0x40>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800624e:	d00f      	beq.n	8006270 <TIM_Base_SetConfig+0x40>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a3d      	ldr	r2, [pc, #244]	; (8006348 <TIM_Base_SetConfig+0x118>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d00b      	beq.n	8006270 <TIM_Base_SetConfig+0x40>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a3c      	ldr	r2, [pc, #240]	; (800634c <TIM_Base_SetConfig+0x11c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d007      	beq.n	8006270 <TIM_Base_SetConfig+0x40>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a3b      	ldr	r2, [pc, #236]	; (8006350 <TIM_Base_SetConfig+0x120>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d003      	beq.n	8006270 <TIM_Base_SetConfig+0x40>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a3a      	ldr	r2, [pc, #232]	; (8006354 <TIM_Base_SetConfig+0x124>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d108      	bne.n	8006282 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a2f      	ldr	r2, [pc, #188]	; (8006344 <TIM_Base_SetConfig+0x114>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d01f      	beq.n	80062ca <TIM_Base_SetConfig+0x9a>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006290:	d01b      	beq.n	80062ca <TIM_Base_SetConfig+0x9a>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a2c      	ldr	r2, [pc, #176]	; (8006348 <TIM_Base_SetConfig+0x118>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d017      	beq.n	80062ca <TIM_Base_SetConfig+0x9a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a2b      	ldr	r2, [pc, #172]	; (800634c <TIM_Base_SetConfig+0x11c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d013      	beq.n	80062ca <TIM_Base_SetConfig+0x9a>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a2a      	ldr	r2, [pc, #168]	; (8006350 <TIM_Base_SetConfig+0x120>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d00f      	beq.n	80062ca <TIM_Base_SetConfig+0x9a>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a29      	ldr	r2, [pc, #164]	; (8006354 <TIM_Base_SetConfig+0x124>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d00b      	beq.n	80062ca <TIM_Base_SetConfig+0x9a>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a28      	ldr	r2, [pc, #160]	; (8006358 <TIM_Base_SetConfig+0x128>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d007      	beq.n	80062ca <TIM_Base_SetConfig+0x9a>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a27      	ldr	r2, [pc, #156]	; (800635c <TIM_Base_SetConfig+0x12c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d003      	beq.n	80062ca <TIM_Base_SetConfig+0x9a>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a26      	ldr	r2, [pc, #152]	; (8006360 <TIM_Base_SetConfig+0x130>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d108      	bne.n	80062dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	4313      	orrs	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a10      	ldr	r2, [pc, #64]	; (8006344 <TIM_Base_SetConfig+0x114>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d00f      	beq.n	8006328 <TIM_Base_SetConfig+0xf8>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a12      	ldr	r2, [pc, #72]	; (8006354 <TIM_Base_SetConfig+0x124>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d00b      	beq.n	8006328 <TIM_Base_SetConfig+0xf8>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a11      	ldr	r2, [pc, #68]	; (8006358 <TIM_Base_SetConfig+0x128>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d007      	beq.n	8006328 <TIM_Base_SetConfig+0xf8>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a10      	ldr	r2, [pc, #64]	; (800635c <TIM_Base_SetConfig+0x12c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d003      	beq.n	8006328 <TIM_Base_SetConfig+0xf8>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a0f      	ldr	r2, [pc, #60]	; (8006360 <TIM_Base_SetConfig+0x130>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d103      	bne.n	8006330 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	691a      	ldr	r2, [r3, #16]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	615a      	str	r2, [r3, #20]
}
 8006336:	bf00      	nop
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	40012c00 	.word	0x40012c00
 8006348:	40000400 	.word	0x40000400
 800634c:	40000800 	.word	0x40000800
 8006350:	40000c00 	.word	0x40000c00
 8006354:	40013400 	.word	0x40013400
 8006358:	40014000 	.word	0x40014000
 800635c:	40014400 	.word	0x40014400
 8006360:	40014800 	.word	0x40014800

08006364 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e040      	b.n	8006434 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d106      	bne.n	80063c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7fa ffaa 	bl	800131c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2224      	movs	r2, #36	; 0x24
 80063cc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 0201 	bic.w	r2, r2, #1
 80063dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fb92 	bl	8006b08 <UART_SetConfig>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d101      	bne.n	80063ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e022      	b.n	8006434 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fe3e 	bl	8007078 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800640a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800641a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0201 	orr.w	r2, r2, #1
 800642a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fec5 	bl	80071bc <UART_CheckIdleState>
 8006432:	4603      	mov	r3, r0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800643c:	b480      	push	{r7}
 800643e:	b08b      	sub	sp, #44	; 0x2c
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	4613      	mov	r3, r2
 8006448:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800644e:	2b20      	cmp	r3, #32
 8006450:	d156      	bne.n	8006500 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <HAL_UART_Transmit_IT+0x22>
 8006458:	88fb      	ldrh	r3, [r7, #6]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e04f      	b.n	8006502 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006468:	2b01      	cmp	r3, #1
 800646a:	d101      	bne.n	8006470 <HAL_UART_Transmit_IT+0x34>
 800646c:	2302      	movs	r3, #2
 800646e:	e048      	b.n	8006502 <HAL_UART_Transmit_IT+0xc6>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	88fa      	ldrh	r2, [r7, #6]
 8006482:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	88fa      	ldrh	r2, [r7, #6]
 800648a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2221      	movs	r2, #33	; 0x21
 80064a0:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064aa:	d107      	bne.n	80064bc <HAL_UART_Transmit_IT+0x80>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d103      	bne.n	80064bc <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	4a16      	ldr	r2, [pc, #88]	; (8006510 <HAL_UART_Transmit_IT+0xd4>)
 80064b8:	669a      	str	r2, [r3, #104]	; 0x68
 80064ba:	e002      	b.n	80064c2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4a15      	ldr	r2, [pc, #84]	; (8006514 <HAL_UART_Transmit_IT+0xd8>)
 80064c0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	e853 3f00 	ldrex	r3, [r3]
 80064d6:	613b      	str	r3, [r7, #16]
   return(result);
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064de:	627b      	str	r3, [r7, #36]	; 0x24
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	461a      	mov	r2, r3
 80064e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e8:	623b      	str	r3, [r7, #32]
 80064ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ec:	69f9      	ldr	r1, [r7, #28]
 80064ee:	6a3a      	ldr	r2, [r7, #32]
 80064f0:	e841 2300 	strex	r3, r2, [r1]
 80064f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1e6      	bne.n	80064ca <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	e000      	b.n	8006502 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006500:	2302      	movs	r3, #2
  }
}
 8006502:	4618      	mov	r0, r3
 8006504:	372c      	adds	r7, #44	; 0x2c
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	08007581 	.word	0x08007581
 8006514:	080074c9 	.word	0x080074c9

08006518 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b0ba      	sub	sp, #232	; 0xe8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800653e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006542:	f640 030f 	movw	r3, #2063	; 0x80f
 8006546:	4013      	ands	r3, r2
 8006548:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800654c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006550:	2b00      	cmp	r3, #0
 8006552:	d115      	bne.n	8006580 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006558:	f003 0320 	and.w	r3, r3, #32
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00f      	beq.n	8006580 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006564:	f003 0320 	and.w	r3, r3, #32
 8006568:	2b00      	cmp	r3, #0
 800656a:	d009      	beq.n	8006580 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 82a6 	beq.w	8006ac2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	4798      	blx	r3
      }
      return;
 800657e:	e2a0      	b.n	8006ac2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006580:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 8117 	beq.w	80067b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800658a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d106      	bne.n	80065a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006596:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800659a:	4b85      	ldr	r3, [pc, #532]	; (80067b0 <HAL_UART_IRQHandler+0x298>)
 800659c:	4013      	ands	r3, r2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f000 810a 	beq.w	80067b8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d011      	beq.n	80065d4 <HAL_UART_IRQHandler+0xbc>
 80065b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00b      	beq.n	80065d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2201      	movs	r2, #1
 80065c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065ca:	f043 0201 	orr.w	r2, r3, #1
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d011      	beq.n	8006604 <HAL_UART_IRQHandler+0xec>
 80065e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00b      	beq.n	8006604 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2202      	movs	r2, #2
 80065f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065fa:	f043 0204 	orr.w	r2, r3, #4
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	d011      	beq.n	8006634 <HAL_UART_IRQHandler+0x11c>
 8006610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00b      	beq.n	8006634 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2204      	movs	r2, #4
 8006622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800662a:	f043 0202 	orr.w	r2, r3, #2
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006638:	f003 0308 	and.w	r3, r3, #8
 800663c:	2b00      	cmp	r3, #0
 800663e:	d017      	beq.n	8006670 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006644:	f003 0320 	and.w	r3, r3, #32
 8006648:	2b00      	cmp	r3, #0
 800664a:	d105      	bne.n	8006658 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800664c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006650:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00b      	beq.n	8006670 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2208      	movs	r2, #8
 800665e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006666:	f043 0208 	orr.w	r2, r3, #8
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006678:	2b00      	cmp	r3, #0
 800667a:	d012      	beq.n	80066a2 <HAL_UART_IRQHandler+0x18a>
 800667c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006680:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00c      	beq.n	80066a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006690:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006698:	f043 0220 	orr.w	r2, r3, #32
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 820c 	beq.w	8006ac6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80066ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b2:	f003 0320 	and.w	r3, r3, #32
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00d      	beq.n	80066d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066be:	f003 0320 	and.w	r3, r3, #32
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d007      	beq.n	80066d6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ea:	2b40      	cmp	r3, #64	; 0x40
 80066ec:	d005      	beq.n	80066fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80066ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d04f      	beq.n	800679a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fe6b 	bl	80073d6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670a:	2b40      	cmp	r3, #64	; 0x40
 800670c:	d141      	bne.n	8006792 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	3308      	adds	r3, #8
 8006714:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006718:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006724:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800672c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	3308      	adds	r3, #8
 8006736:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800673a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800673e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006742:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006746:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800674a:	e841 2300 	strex	r3, r2, [r1]
 800674e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006752:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1d9      	bne.n	800670e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675e:	2b00      	cmp	r3, #0
 8006760:	d013      	beq.n	800678a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006766:	4a13      	ldr	r2, [pc, #76]	; (80067b4 <HAL_UART_IRQHandler+0x29c>)
 8006768:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676e:	4618      	mov	r0, r3
 8006770:	f7fb fe40 	bl	80023f4 <HAL_DMA_Abort_IT>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d017      	beq.n	80067aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006784:	4610      	mov	r0, r2
 8006786:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006788:	e00f      	b.n	80067aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f9a6 	bl	8006adc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006790:	e00b      	b.n	80067aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f9a2 	bl	8006adc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006798:	e007      	b.n	80067aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f99e 	bl	8006adc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80067a8:	e18d      	b.n	8006ac6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067aa:	bf00      	nop
    return;
 80067ac:	e18b      	b.n	8006ac6 <HAL_UART_IRQHandler+0x5ae>
 80067ae:	bf00      	nop
 80067b0:	04000120 	.word	0x04000120
 80067b4:	0800749d 	.word	0x0800749d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067bc:	2b01      	cmp	r3, #1
 80067be:	f040 8146 	bne.w	8006a4e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80067c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067c6:	f003 0310 	and.w	r3, r3, #16
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f000 813f 	beq.w	8006a4e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80067d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067d4:	f003 0310 	and.w	r3, r3, #16
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 8138 	beq.w	8006a4e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2210      	movs	r2, #16
 80067e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f0:	2b40      	cmp	r3, #64	; 0x40
 80067f2:	f040 80b4 	bne.w	800695e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006802:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 815f 	beq.w	8006aca <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006812:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006816:	429a      	cmp	r2, r3
 8006818:	f080 8157 	bcs.w	8006aca <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006822:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b00      	cmp	r3, #0
 8006834:	f040 8085 	bne.w	8006942 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006840:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006844:	e853 3f00 	ldrex	r3, [r3]
 8006848:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800684c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006854:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	461a      	mov	r2, r3
 800685e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006862:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006866:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800686e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006872:	e841 2300 	strex	r3, r2, [r1]
 8006876:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800687a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1da      	bne.n	8006838 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3308      	adds	r3, #8
 8006888:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800688c:	e853 3f00 	ldrex	r3, [r3]
 8006890:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006894:	f023 0301 	bic.w	r3, r3, #1
 8006898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	3308      	adds	r3, #8
 80068a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068b2:	e841 2300 	strex	r3, r2, [r1]
 80068b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80068b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1e1      	bne.n	8006882 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3308      	adds	r3, #8
 80068c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068c8:	e853 3f00 	ldrex	r3, [r3]
 80068cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80068ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3308      	adds	r3, #8
 80068de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068ea:	e841 2300 	strex	r3, r2, [r1]
 80068ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80068f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1e3      	bne.n	80068be <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2220      	movs	r2, #32
 80068fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800690a:	e853 3f00 	ldrex	r3, [r3]
 800690e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006912:	f023 0310 	bic.w	r3, r3, #16
 8006916:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	461a      	mov	r2, r3
 8006920:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006924:	65bb      	str	r3, [r7, #88]	; 0x58
 8006926:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006928:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800692a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800692c:	e841 2300 	strex	r3, r2, [r1]
 8006930:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1e4      	bne.n	8006902 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693c:	4618      	mov	r0, r3
 800693e:	f7fb fd1b 	bl	8002378 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800694e:	b29b      	uxth	r3, r3
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	b29b      	uxth	r3, r3
 8006954:	4619      	mov	r1, r3
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f8ca 	bl	8006af0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800695c:	e0b5      	b.n	8006aca <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800696a:	b29b      	uxth	r3, r3
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006978:	b29b      	uxth	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 80a7 	beq.w	8006ace <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006980:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 80a2 	beq.w	8006ace <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006992:	e853 3f00 	ldrex	r3, [r3]
 8006996:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800699e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069ac:	647b      	str	r3, [r7, #68]	; 0x44
 80069ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069b4:	e841 2300 	strex	r3, r2, [r1]
 80069b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1e4      	bne.n	800698a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3308      	adds	r3, #8
 80069c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ca:	e853 3f00 	ldrex	r3, [r3]
 80069ce:	623b      	str	r3, [r7, #32]
   return(result);
 80069d0:	6a3b      	ldr	r3, [r7, #32]
 80069d2:	f023 0301 	bic.w	r3, r3, #1
 80069d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3308      	adds	r3, #8
 80069e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80069e4:	633a      	str	r2, [r7, #48]	; 0x30
 80069e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ec:	e841 2300 	strex	r3, r2, [r1]
 80069f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1e3      	bne.n	80069c0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2220      	movs	r2, #32
 80069fc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	e853 3f00 	ldrex	r3, [r3]
 8006a16:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f023 0310 	bic.w	r3, r3, #16
 8006a1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	461a      	mov	r2, r3
 8006a28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a2c:	61fb      	str	r3, [r7, #28]
 8006a2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a30:	69b9      	ldr	r1, [r7, #24]
 8006a32:	69fa      	ldr	r2, [r7, #28]
 8006a34:	e841 2300 	strex	r3, r2, [r1]
 8006a38:	617b      	str	r3, [r7, #20]
   return(result);
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1e4      	bne.n	8006a0a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a44:	4619      	mov	r1, r3
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f852 	bl	8006af0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a4c:	e03f      	b.n	8006ace <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00e      	beq.n	8006a78 <HAL_UART_IRQHandler+0x560>
 8006a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d008      	beq.n	8006a78 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fe0f 	bl	8007694 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a76:	e02d      	b.n	8006ad4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00e      	beq.n	8006aa2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d008      	beq.n	8006aa2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d01c      	beq.n	8006ad2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	4798      	blx	r3
    }
    return;
 8006aa0:	e017      	b.n	8006ad2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d012      	beq.n	8006ad4 <HAL_UART_IRQHandler+0x5bc>
 8006aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00c      	beq.n	8006ad4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fdc0 	bl	8007640 <UART_EndTransmit_IT>
    return;
 8006ac0:	e008      	b.n	8006ad4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006ac2:	bf00      	nop
 8006ac4:	e006      	b.n	8006ad4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006ac6:	bf00      	nop
 8006ac8:	e004      	b.n	8006ad4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006aca:	bf00      	nop
 8006acc:	e002      	b.n	8006ad4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006ace:	bf00      	nop
 8006ad0:	e000      	b.n	8006ad4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006ad2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006ad4:	37e8      	adds	r7, #232	; 0xe8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop

08006adc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	460b      	mov	r3, r1
 8006afa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b0c:	b08a      	sub	sp, #40	; 0x28
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	431a      	orrs	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	431a      	orrs	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	4ba4      	ldr	r3, [pc, #656]	; (8006dc8 <UART_SetConfig+0x2c0>)
 8006b38:	4013      	ands	r3, r2
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	6812      	ldr	r2, [r2, #0]
 8006b3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b40:	430b      	orrs	r3, r1
 8006b42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	68da      	ldr	r2, [r3, #12]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a99      	ldr	r2, [pc, #612]	; (8006dcc <UART_SetConfig+0x2c4>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d004      	beq.n	8006b74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b70:	4313      	orrs	r3, r2
 8006b72:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b84:	430a      	orrs	r2, r1
 8006b86:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a90      	ldr	r2, [pc, #576]	; (8006dd0 <UART_SetConfig+0x2c8>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d126      	bne.n	8006be0 <UART_SetConfig+0xd8>
 8006b92:	4b90      	ldr	r3, [pc, #576]	; (8006dd4 <UART_SetConfig+0x2cc>)
 8006b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b98:	f003 0303 	and.w	r3, r3, #3
 8006b9c:	2b03      	cmp	r3, #3
 8006b9e:	d81b      	bhi.n	8006bd8 <UART_SetConfig+0xd0>
 8006ba0:	a201      	add	r2, pc, #4	; (adr r2, 8006ba8 <UART_SetConfig+0xa0>)
 8006ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba6:	bf00      	nop
 8006ba8:	08006bb9 	.word	0x08006bb9
 8006bac:	08006bc9 	.word	0x08006bc9
 8006bb0:	08006bc1 	.word	0x08006bc1
 8006bb4:	08006bd1 	.word	0x08006bd1
 8006bb8:	2301      	movs	r3, #1
 8006bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bbe:	e116      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bc6:	e112      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006bc8:	2304      	movs	r3, #4
 8006bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bce:	e10e      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006bd0:	2308      	movs	r3, #8
 8006bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bd6:	e10a      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006bd8:	2310      	movs	r3, #16
 8006bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bde:	e106      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a7c      	ldr	r2, [pc, #496]	; (8006dd8 <UART_SetConfig+0x2d0>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d138      	bne.n	8006c5c <UART_SetConfig+0x154>
 8006bea:	4b7a      	ldr	r3, [pc, #488]	; (8006dd4 <UART_SetConfig+0x2cc>)
 8006bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf0:	f003 030c 	and.w	r3, r3, #12
 8006bf4:	2b0c      	cmp	r3, #12
 8006bf6:	d82d      	bhi.n	8006c54 <UART_SetConfig+0x14c>
 8006bf8:	a201      	add	r2, pc, #4	; (adr r2, 8006c00 <UART_SetConfig+0xf8>)
 8006bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfe:	bf00      	nop
 8006c00:	08006c35 	.word	0x08006c35
 8006c04:	08006c55 	.word	0x08006c55
 8006c08:	08006c55 	.word	0x08006c55
 8006c0c:	08006c55 	.word	0x08006c55
 8006c10:	08006c45 	.word	0x08006c45
 8006c14:	08006c55 	.word	0x08006c55
 8006c18:	08006c55 	.word	0x08006c55
 8006c1c:	08006c55 	.word	0x08006c55
 8006c20:	08006c3d 	.word	0x08006c3d
 8006c24:	08006c55 	.word	0x08006c55
 8006c28:	08006c55 	.word	0x08006c55
 8006c2c:	08006c55 	.word	0x08006c55
 8006c30:	08006c4d 	.word	0x08006c4d
 8006c34:	2300      	movs	r3, #0
 8006c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c3a:	e0d8      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c42:	e0d4      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006c44:	2304      	movs	r3, #4
 8006c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c4a:	e0d0      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006c4c:	2308      	movs	r3, #8
 8006c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c52:	e0cc      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006c54:	2310      	movs	r3, #16
 8006c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c5a:	e0c8      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a5e      	ldr	r2, [pc, #376]	; (8006ddc <UART_SetConfig+0x2d4>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d125      	bne.n	8006cb2 <UART_SetConfig+0x1aa>
 8006c66:	4b5b      	ldr	r3, [pc, #364]	; (8006dd4 <UART_SetConfig+0x2cc>)
 8006c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c70:	2b30      	cmp	r3, #48	; 0x30
 8006c72:	d016      	beq.n	8006ca2 <UART_SetConfig+0x19a>
 8006c74:	2b30      	cmp	r3, #48	; 0x30
 8006c76:	d818      	bhi.n	8006caa <UART_SetConfig+0x1a2>
 8006c78:	2b20      	cmp	r3, #32
 8006c7a:	d00a      	beq.n	8006c92 <UART_SetConfig+0x18a>
 8006c7c:	2b20      	cmp	r3, #32
 8006c7e:	d814      	bhi.n	8006caa <UART_SetConfig+0x1a2>
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <UART_SetConfig+0x182>
 8006c84:	2b10      	cmp	r3, #16
 8006c86:	d008      	beq.n	8006c9a <UART_SetConfig+0x192>
 8006c88:	e00f      	b.n	8006caa <UART_SetConfig+0x1a2>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c90:	e0ad      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006c92:	2302      	movs	r3, #2
 8006c94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c98:	e0a9      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006c9a:	2304      	movs	r3, #4
 8006c9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ca0:	e0a5      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006ca2:	2308      	movs	r3, #8
 8006ca4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ca8:	e0a1      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006caa:	2310      	movs	r3, #16
 8006cac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cb0:	e09d      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a4a      	ldr	r2, [pc, #296]	; (8006de0 <UART_SetConfig+0x2d8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d125      	bne.n	8006d08 <UART_SetConfig+0x200>
 8006cbc:	4b45      	ldr	r3, [pc, #276]	; (8006dd4 <UART_SetConfig+0x2cc>)
 8006cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006cc6:	2bc0      	cmp	r3, #192	; 0xc0
 8006cc8:	d016      	beq.n	8006cf8 <UART_SetConfig+0x1f0>
 8006cca:	2bc0      	cmp	r3, #192	; 0xc0
 8006ccc:	d818      	bhi.n	8006d00 <UART_SetConfig+0x1f8>
 8006cce:	2b80      	cmp	r3, #128	; 0x80
 8006cd0:	d00a      	beq.n	8006ce8 <UART_SetConfig+0x1e0>
 8006cd2:	2b80      	cmp	r3, #128	; 0x80
 8006cd4:	d814      	bhi.n	8006d00 <UART_SetConfig+0x1f8>
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d002      	beq.n	8006ce0 <UART_SetConfig+0x1d8>
 8006cda:	2b40      	cmp	r3, #64	; 0x40
 8006cdc:	d008      	beq.n	8006cf0 <UART_SetConfig+0x1e8>
 8006cde:	e00f      	b.n	8006d00 <UART_SetConfig+0x1f8>
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ce6:	e082      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cee:	e07e      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006cf0:	2304      	movs	r3, #4
 8006cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cf6:	e07a      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006cf8:	2308      	movs	r3, #8
 8006cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cfe:	e076      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006d00:	2310      	movs	r3, #16
 8006d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d06:	e072      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a35      	ldr	r2, [pc, #212]	; (8006de4 <UART_SetConfig+0x2dc>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d12a      	bne.n	8006d68 <UART_SetConfig+0x260>
 8006d12:	4b30      	ldr	r3, [pc, #192]	; (8006dd4 <UART_SetConfig+0x2cc>)
 8006d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d20:	d01a      	beq.n	8006d58 <UART_SetConfig+0x250>
 8006d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d26:	d81b      	bhi.n	8006d60 <UART_SetConfig+0x258>
 8006d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d2c:	d00c      	beq.n	8006d48 <UART_SetConfig+0x240>
 8006d2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d32:	d815      	bhi.n	8006d60 <UART_SetConfig+0x258>
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d003      	beq.n	8006d40 <UART_SetConfig+0x238>
 8006d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d3c:	d008      	beq.n	8006d50 <UART_SetConfig+0x248>
 8006d3e:	e00f      	b.n	8006d60 <UART_SetConfig+0x258>
 8006d40:	2300      	movs	r3, #0
 8006d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d46:	e052      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d4e:	e04e      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006d50:	2304      	movs	r3, #4
 8006d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d56:	e04a      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006d58:	2308      	movs	r3, #8
 8006d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d5e:	e046      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006d60:	2310      	movs	r3, #16
 8006d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d66:	e042      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a17      	ldr	r2, [pc, #92]	; (8006dcc <UART_SetConfig+0x2c4>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d13a      	bne.n	8006de8 <UART_SetConfig+0x2e0>
 8006d72:	4b18      	ldr	r3, [pc, #96]	; (8006dd4 <UART_SetConfig+0x2cc>)
 8006d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d80:	d01a      	beq.n	8006db8 <UART_SetConfig+0x2b0>
 8006d82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d86:	d81b      	bhi.n	8006dc0 <UART_SetConfig+0x2b8>
 8006d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d8c:	d00c      	beq.n	8006da8 <UART_SetConfig+0x2a0>
 8006d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d92:	d815      	bhi.n	8006dc0 <UART_SetConfig+0x2b8>
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d003      	beq.n	8006da0 <UART_SetConfig+0x298>
 8006d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d9c:	d008      	beq.n	8006db0 <UART_SetConfig+0x2a8>
 8006d9e:	e00f      	b.n	8006dc0 <UART_SetConfig+0x2b8>
 8006da0:	2300      	movs	r3, #0
 8006da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006da6:	e022      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006da8:	2302      	movs	r3, #2
 8006daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dae:	e01e      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006db0:	2304      	movs	r3, #4
 8006db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006db6:	e01a      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006db8:	2308      	movs	r3, #8
 8006dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dbe:	e016      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006dc0:	2310      	movs	r3, #16
 8006dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dc6:	e012      	b.n	8006dee <UART_SetConfig+0x2e6>
 8006dc8:	efff69f3 	.word	0xefff69f3
 8006dcc:	40008000 	.word	0x40008000
 8006dd0:	40013800 	.word	0x40013800
 8006dd4:	40021000 	.word	0x40021000
 8006dd8:	40004400 	.word	0x40004400
 8006ddc:	40004800 	.word	0x40004800
 8006de0:	40004c00 	.word	0x40004c00
 8006de4:	40005000 	.word	0x40005000
 8006de8:	2310      	movs	r3, #16
 8006dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a9f      	ldr	r2, [pc, #636]	; (8007070 <UART_SetConfig+0x568>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d17a      	bne.n	8006eee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006df8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006dfc:	2b08      	cmp	r3, #8
 8006dfe:	d824      	bhi.n	8006e4a <UART_SetConfig+0x342>
 8006e00:	a201      	add	r2, pc, #4	; (adr r2, 8006e08 <UART_SetConfig+0x300>)
 8006e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e06:	bf00      	nop
 8006e08:	08006e2d 	.word	0x08006e2d
 8006e0c:	08006e4b 	.word	0x08006e4b
 8006e10:	08006e35 	.word	0x08006e35
 8006e14:	08006e4b 	.word	0x08006e4b
 8006e18:	08006e3b 	.word	0x08006e3b
 8006e1c:	08006e4b 	.word	0x08006e4b
 8006e20:	08006e4b 	.word	0x08006e4b
 8006e24:	08006e4b 	.word	0x08006e4b
 8006e28:	08006e43 	.word	0x08006e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e2c:	f7fc ff2c 	bl	8003c88 <HAL_RCC_GetPCLK1Freq>
 8006e30:	61f8      	str	r0, [r7, #28]
        break;
 8006e32:	e010      	b.n	8006e56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e34:	4b8f      	ldr	r3, [pc, #572]	; (8007074 <UART_SetConfig+0x56c>)
 8006e36:	61fb      	str	r3, [r7, #28]
        break;
 8006e38:	e00d      	b.n	8006e56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e3a:	f7fc fe8d 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 8006e3e:	61f8      	str	r0, [r7, #28]
        break;
 8006e40:	e009      	b.n	8006e56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e46:	61fb      	str	r3, [r7, #28]
        break;
 8006e48:	e005      	b.n	8006e56 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 80fb 	beq.w	8007054 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	4613      	mov	r3, r2
 8006e64:	005b      	lsls	r3, r3, #1
 8006e66:	4413      	add	r3, r2
 8006e68:	69fa      	ldr	r2, [r7, #28]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d305      	bcc.n	8006e7a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e74:	69fa      	ldr	r2, [r7, #28]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d903      	bls.n	8006e82 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e80:	e0e8      	b.n	8007054 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	2200      	movs	r2, #0
 8006e86:	461c      	mov	r4, r3
 8006e88:	4615      	mov	r5, r2
 8006e8a:	f04f 0200 	mov.w	r2, #0
 8006e8e:	f04f 0300 	mov.w	r3, #0
 8006e92:	022b      	lsls	r3, r5, #8
 8006e94:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006e98:	0222      	lsls	r2, r4, #8
 8006e9a:	68f9      	ldr	r1, [r7, #12]
 8006e9c:	6849      	ldr	r1, [r1, #4]
 8006e9e:	0849      	lsrs	r1, r1, #1
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	4688      	mov	r8, r1
 8006ea4:	4681      	mov	r9, r0
 8006ea6:	eb12 0a08 	adds.w	sl, r2, r8
 8006eaa:	eb43 0b09 	adc.w	fp, r3, r9
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	603b      	str	r3, [r7, #0]
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ebc:	4650      	mov	r0, sl
 8006ebe:	4659      	mov	r1, fp
 8006ec0:	f7f9 f9de 	bl	8000280 <__aeabi_uldivmod>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	4613      	mov	r3, r2
 8006eca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ed2:	d308      	bcc.n	8006ee6 <UART_SetConfig+0x3de>
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eda:	d204      	bcs.n	8006ee6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	60da      	str	r2, [r3, #12]
 8006ee4:	e0b6      	b.n	8007054 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006eec:	e0b2      	b.n	8007054 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ef6:	d15e      	bne.n	8006fb6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006ef8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006efc:	2b08      	cmp	r3, #8
 8006efe:	d828      	bhi.n	8006f52 <UART_SetConfig+0x44a>
 8006f00:	a201      	add	r2, pc, #4	; (adr r2, 8006f08 <UART_SetConfig+0x400>)
 8006f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f06:	bf00      	nop
 8006f08:	08006f2d 	.word	0x08006f2d
 8006f0c:	08006f35 	.word	0x08006f35
 8006f10:	08006f3d 	.word	0x08006f3d
 8006f14:	08006f53 	.word	0x08006f53
 8006f18:	08006f43 	.word	0x08006f43
 8006f1c:	08006f53 	.word	0x08006f53
 8006f20:	08006f53 	.word	0x08006f53
 8006f24:	08006f53 	.word	0x08006f53
 8006f28:	08006f4b 	.word	0x08006f4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f2c:	f7fc feac 	bl	8003c88 <HAL_RCC_GetPCLK1Freq>
 8006f30:	61f8      	str	r0, [r7, #28]
        break;
 8006f32:	e014      	b.n	8006f5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f34:	f7fc febe 	bl	8003cb4 <HAL_RCC_GetPCLK2Freq>
 8006f38:	61f8      	str	r0, [r7, #28]
        break;
 8006f3a:	e010      	b.n	8006f5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f3c:	4b4d      	ldr	r3, [pc, #308]	; (8007074 <UART_SetConfig+0x56c>)
 8006f3e:	61fb      	str	r3, [r7, #28]
        break;
 8006f40:	e00d      	b.n	8006f5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f42:	f7fc fe09 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 8006f46:	61f8      	str	r0, [r7, #28]
        break;
 8006f48:	e009      	b.n	8006f5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f4e:	61fb      	str	r3, [r7, #28]
        break;
 8006f50:	e005      	b.n	8006f5e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006f5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d077      	beq.n	8007054 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	005a      	lsls	r2, r3, #1
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	085b      	lsrs	r3, r3, #1
 8006f6e:	441a      	add	r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f78:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	2b0f      	cmp	r3, #15
 8006f7e:	d916      	bls.n	8006fae <UART_SetConfig+0x4a6>
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f86:	d212      	bcs.n	8006fae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	f023 030f 	bic.w	r3, r3, #15
 8006f90:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	085b      	lsrs	r3, r3, #1
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	f003 0307 	and.w	r3, r3, #7
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	8afb      	ldrh	r3, [r7, #22]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	8afa      	ldrh	r2, [r7, #22]
 8006faa:	60da      	str	r2, [r3, #12]
 8006fac:	e052      	b.n	8007054 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006fb4:	e04e      	b.n	8007054 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fba:	2b08      	cmp	r3, #8
 8006fbc:	d827      	bhi.n	800700e <UART_SetConfig+0x506>
 8006fbe:	a201      	add	r2, pc, #4	; (adr r2, 8006fc4 <UART_SetConfig+0x4bc>)
 8006fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc4:	08006fe9 	.word	0x08006fe9
 8006fc8:	08006ff1 	.word	0x08006ff1
 8006fcc:	08006ff9 	.word	0x08006ff9
 8006fd0:	0800700f 	.word	0x0800700f
 8006fd4:	08006fff 	.word	0x08006fff
 8006fd8:	0800700f 	.word	0x0800700f
 8006fdc:	0800700f 	.word	0x0800700f
 8006fe0:	0800700f 	.word	0x0800700f
 8006fe4:	08007007 	.word	0x08007007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fe8:	f7fc fe4e 	bl	8003c88 <HAL_RCC_GetPCLK1Freq>
 8006fec:	61f8      	str	r0, [r7, #28]
        break;
 8006fee:	e014      	b.n	800701a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ff0:	f7fc fe60 	bl	8003cb4 <HAL_RCC_GetPCLK2Freq>
 8006ff4:	61f8      	str	r0, [r7, #28]
        break;
 8006ff6:	e010      	b.n	800701a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ff8:	4b1e      	ldr	r3, [pc, #120]	; (8007074 <UART_SetConfig+0x56c>)
 8006ffa:	61fb      	str	r3, [r7, #28]
        break;
 8006ffc:	e00d      	b.n	800701a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ffe:	f7fc fdab 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 8007002:	61f8      	str	r0, [r7, #28]
        break;
 8007004:	e009      	b.n	800701a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800700a:	61fb      	str	r3, [r7, #28]
        break;
 800700c:	e005      	b.n	800701a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007018:	bf00      	nop
    }

    if (pclk != 0U)
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d019      	beq.n	8007054 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	085a      	lsrs	r2, r3, #1
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	441a      	add	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007032:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	2b0f      	cmp	r3, #15
 8007038:	d909      	bls.n	800704e <UART_SetConfig+0x546>
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007040:	d205      	bcs.n	800704e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	b29a      	uxth	r2, r3
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	60da      	str	r2, [r3, #12]
 800704c:	e002      	b.n	8007054 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007060:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007064:	4618      	mov	r0, r3
 8007066:	3728      	adds	r7, #40	; 0x28
 8007068:	46bd      	mov	sp, r7
 800706a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800706e:	bf00      	nop
 8007070:	40008000 	.word	0x40008000
 8007074:	00f42400 	.word	0x00f42400

08007078 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00a      	beq.n	80070a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a6:	f003 0302 	and.w	r3, r3, #2
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00a      	beq.n	80070c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	430a      	orrs	r2, r1
 80070c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c8:	f003 0304 	and.w	r3, r3, #4
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00a      	beq.n	80070e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ea:	f003 0308 	and.w	r3, r3, #8
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00a      	beq.n	8007108 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	430a      	orrs	r2, r1
 8007106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	f003 0310 	and.w	r3, r3, #16
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00a      	beq.n	800712a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	430a      	orrs	r2, r1
 8007128:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712e:	f003 0320 	and.w	r3, r3, #32
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00a      	beq.n	800714c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	430a      	orrs	r2, r1
 800714a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007154:	2b00      	cmp	r3, #0
 8007156:	d01a      	beq.n	800718e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007176:	d10a      	bne.n	800718e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	430a      	orrs	r2, r1
 800718c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00a      	beq.n	80071b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	430a      	orrs	r2, r1
 80071ae:	605a      	str	r2, [r3, #4]
  }
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af02      	add	r7, sp, #8
 80071c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071cc:	f7fa feb6 	bl	8001f3c <HAL_GetTick>
 80071d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0308 	and.w	r3, r3, #8
 80071dc:	2b08      	cmp	r3, #8
 80071de:	d10e      	bne.n	80071fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f82d 	bl	800724e <UART_WaitOnFlagUntilTimeout>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e023      	b.n	8007246 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 0304 	and.w	r3, r3, #4
 8007208:	2b04      	cmp	r3, #4
 800720a:	d10e      	bne.n	800722a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800720c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f817 	bl	800724e <UART_WaitOnFlagUntilTimeout>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e00d      	b.n	8007246 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2220      	movs	r2, #32
 800722e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2220      	movs	r2, #32
 8007234:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b09c      	sub	sp, #112	; 0x70
 8007252:	af00      	add	r7, sp, #0
 8007254:	60f8      	str	r0, [r7, #12]
 8007256:	60b9      	str	r1, [r7, #8]
 8007258:	603b      	str	r3, [r7, #0]
 800725a:	4613      	mov	r3, r2
 800725c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800725e:	e0a5      	b.n	80073ac <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007266:	f000 80a1 	beq.w	80073ac <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800726a:	f7fa fe67 	bl	8001f3c <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007276:	429a      	cmp	r2, r3
 8007278:	d302      	bcc.n	8007280 <UART_WaitOnFlagUntilTimeout+0x32>
 800727a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800727c:	2b00      	cmp	r3, #0
 800727e:	d13e      	bne.n	80072fe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007288:	e853 3f00 	ldrex	r3, [r3]
 800728c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800728e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007290:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007294:	667b      	str	r3, [r7, #100]	; 0x64
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	461a      	mov	r2, r3
 800729c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800729e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072a0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072a6:	e841 2300 	strex	r3, r2, [r1]
 80072aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80072ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1e6      	bne.n	8007280 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	3308      	adds	r3, #8
 80072b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072bc:	e853 3f00 	ldrex	r3, [r3]
 80072c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c4:	f023 0301 	bic.w	r3, r3, #1
 80072c8:	663b      	str	r3, [r7, #96]	; 0x60
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	3308      	adds	r3, #8
 80072d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80072d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072da:	e841 2300 	strex	r3, r2, [r1]
 80072de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80072e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1e5      	bne.n	80072b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2220      	movs	r2, #32
 80072ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2220      	movs	r2, #32
 80072f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e067      	b.n	80073ce <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0304 	and.w	r3, r3, #4
 8007308:	2b00      	cmp	r3, #0
 800730a:	d04f      	beq.n	80073ac <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800731a:	d147      	bne.n	80073ac <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007324:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732e:	e853 3f00 	ldrex	r3, [r3]
 8007332:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007336:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800733a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	461a      	mov	r2, r3
 8007342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007344:	637b      	str	r3, [r7, #52]	; 0x34
 8007346:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007348:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800734a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800734c:	e841 2300 	strex	r3, r2, [r1]
 8007350:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1e6      	bne.n	8007326 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	3308      	adds	r3, #8
 800735e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	e853 3f00 	ldrex	r3, [r3]
 8007366:	613b      	str	r3, [r7, #16]
   return(result);
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	f023 0301 	bic.w	r3, r3, #1
 800736e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	3308      	adds	r3, #8
 8007376:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007378:	623a      	str	r2, [r7, #32]
 800737a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737c:	69f9      	ldr	r1, [r7, #28]
 800737e:	6a3a      	ldr	r2, [r7, #32]
 8007380:	e841 2300 	strex	r3, r2, [r1]
 8007384:	61bb      	str	r3, [r7, #24]
   return(result);
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1e5      	bne.n	8007358 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2220      	movs	r2, #32
 8007390:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2220      	movs	r2, #32
 8007396:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2220      	movs	r2, #32
 800739c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e010      	b.n	80073ce <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	69da      	ldr	r2, [r3, #28]
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	4013      	ands	r3, r2
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	bf0c      	ite	eq
 80073bc:	2301      	moveq	r3, #1
 80073be:	2300      	movne	r3, #0
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	461a      	mov	r2, r3
 80073c4:	79fb      	ldrb	r3, [r7, #7]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	f43f af4a 	beq.w	8007260 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3770      	adds	r7, #112	; 0x70
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073d6:	b480      	push	{r7}
 80073d8:	b095      	sub	sp, #84	; 0x54
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e6:	e853 3f00 	ldrex	r3, [r3]
 80073ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	461a      	mov	r2, r3
 80073fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073fc:	643b      	str	r3, [r7, #64]	; 0x40
 80073fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007400:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007402:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007404:	e841 2300 	strex	r3, r2, [r1]
 8007408:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800740a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1e6      	bne.n	80073de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	3308      	adds	r3, #8
 8007416:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007418:	6a3b      	ldr	r3, [r7, #32]
 800741a:	e853 3f00 	ldrex	r3, [r3]
 800741e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	f023 0301 	bic.w	r3, r3, #1
 8007426:	64bb      	str	r3, [r7, #72]	; 0x48
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3308      	adds	r3, #8
 800742e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007430:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007432:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007434:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007438:	e841 2300 	strex	r3, r2, [r1]
 800743c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1e5      	bne.n	8007410 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007448:	2b01      	cmp	r3, #1
 800744a:	d118      	bne.n	800747e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	e853 3f00 	ldrex	r3, [r3]
 8007458:	60bb      	str	r3, [r7, #8]
   return(result);
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	f023 0310 	bic.w	r3, r3, #16
 8007460:	647b      	str	r3, [r7, #68]	; 0x44
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	461a      	mov	r2, r3
 8007468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800746a:	61bb      	str	r3, [r7, #24]
 800746c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746e:	6979      	ldr	r1, [r7, #20]
 8007470:	69ba      	ldr	r2, [r7, #24]
 8007472:	e841 2300 	strex	r3, r2, [r1]
 8007476:	613b      	str	r3, [r7, #16]
   return(result);
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1e6      	bne.n	800744c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2220      	movs	r2, #32
 8007482:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007490:	bf00      	nop
 8007492:	3754      	adds	r7, #84	; 0x54
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f7ff fb0e 	bl	8006adc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074c0:	bf00      	nop
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b08f      	sub	sp, #60	; 0x3c
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074d4:	2b21      	cmp	r3, #33	; 0x21
 80074d6:	d14d      	bne.n	8007574 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80074de:	b29b      	uxth	r3, r3
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d132      	bne.n	800754a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ea:	6a3b      	ldr	r3, [r7, #32]
 80074ec:	e853 3f00 	ldrex	r3, [r3]
 80074f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074f8:	637b      	str	r3, [r7, #52]	; 0x34
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	461a      	mov	r2, r3
 8007500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007504:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e6      	bne.n	80074e4 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	e853 3f00 	ldrex	r3, [r3]
 8007522:	60bb      	str	r3, [r7, #8]
   return(result);
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800752a:	633b      	str	r3, [r7, #48]	; 0x30
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	461a      	mov	r2, r3
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	61bb      	str	r3, [r7, #24]
 8007536:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007538:	6979      	ldr	r1, [r7, #20]
 800753a:	69ba      	ldr	r2, [r7, #24]
 800753c:	e841 2300 	strex	r3, r2, [r1]
 8007540:	613b      	str	r3, [r7, #16]
   return(result);
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1e6      	bne.n	8007516 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007548:	e014      	b.n	8007574 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800754e:	781a      	ldrb	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	b292      	uxth	r2, r2
 8007556:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800755c:	1c5a      	adds	r2, r3, #1
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007568:	b29b      	uxth	r3, r3
 800756a:	3b01      	subs	r3, #1
 800756c:	b29a      	uxth	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007574:	bf00      	nop
 8007576:	373c      	adds	r7, #60	; 0x3c
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007580:	b480      	push	{r7}
 8007582:	b091      	sub	sp, #68	; 0x44
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800758c:	2b21      	cmp	r3, #33	; 0x21
 800758e:	d151      	bne.n	8007634 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007596:	b29b      	uxth	r3, r3
 8007598:	2b00      	cmp	r3, #0
 800759a:	d132      	bne.n	8007602 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a4:	e853 3f00 	ldrex	r3, [r3]
 80075a8:	623b      	str	r3, [r7, #32]
   return(result);
 80075aa:	6a3b      	ldr	r3, [r7, #32]
 80075ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	461a      	mov	r2, r3
 80075b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ba:	633b      	str	r3, [r7, #48]	; 0x30
 80075bc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075c2:	e841 2300 	strex	r3, r2, [r1]
 80075c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1e6      	bne.n	800759c <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	e853 3f00 	ldrex	r3, [r3]
 80075da:	60fb      	str	r3, [r7, #12]
   return(result);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075e2:	637b      	str	r3, [r7, #52]	; 0x34
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	461a      	mov	r2, r3
 80075ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ec:	61fb      	str	r3, [r7, #28]
 80075ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f0:	69b9      	ldr	r1, [r7, #24]
 80075f2:	69fa      	ldr	r2, [r7, #28]
 80075f4:	e841 2300 	strex	r3, r2, [r1]
 80075f8:	617b      	str	r3, [r7, #20]
   return(result);
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1e6      	bne.n	80075ce <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007600:	e018      	b.n	8007634 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007606:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800760a:	881a      	ldrh	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007614:	b292      	uxth	r2, r2
 8007616:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800761c:	1c9a      	adds	r2, r3, #2
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007628:	b29b      	uxth	r3, r3
 800762a:	3b01      	subs	r3, #1
 800762c:	b29a      	uxth	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007634:	bf00      	nop
 8007636:	3744      	adds	r7, #68	; 0x44
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b088      	sub	sp, #32
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	e853 3f00 	ldrex	r3, [r3]
 8007654:	60bb      	str	r3, [r7, #8]
   return(result);
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800765c:	61fb      	str	r3, [r7, #28]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	461a      	mov	r2, r3
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	61bb      	str	r3, [r7, #24]
 8007668:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766a:	6979      	ldr	r1, [r7, #20]
 800766c:	69ba      	ldr	r2, [r7, #24]
 800766e:	e841 2300 	strex	r3, r2, [r1]
 8007672:	613b      	str	r3, [r7, #16]
   return(result);
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1e6      	bne.n	8007648 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2220      	movs	r2, #32
 800767e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7f9 f868 	bl	800075c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800768c:	bf00      	nop
 800768e:	3720      	adds	r7, #32
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076a8:	b084      	sub	sp, #16
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b084      	sub	sp, #16
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	f107 001c 	add.w	r0, r7, #28
 80076b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fa70 	bl	8007bac <USB_CoreReset>
 80076cc:	4603      	mov	r3, r0
 80076ce:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80076d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d106      	bne.n	80076e4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	639a      	str	r2, [r3, #56]	; 0x38
 80076e2:	e005      	b.n	80076f0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076fc:	b004      	add	sp, #16
 80076fe:	4770      	bx	lr

08007700 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f023 0201 	bic.w	r2, r3, #1
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr

08007722 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b084      	sub	sp, #16
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
 800772a:	460b      	mov	r3, r1
 800772c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800772e:	2300      	movs	r3, #0
 8007730:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800773e:	78fb      	ldrb	r3, [r7, #3]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d115      	bne.n	8007770 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007750:	2001      	movs	r0, #1
 8007752:	f7fa fbff 	bl	8001f54 <HAL_Delay>
      ms++;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	3301      	adds	r3, #1
 800775a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fa17 	bl	8007b90 <USB_GetMode>
 8007762:	4603      	mov	r3, r0
 8007764:	2b01      	cmp	r3, #1
 8007766:	d01e      	beq.n	80077a6 <USB_SetCurrentMode+0x84>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2b31      	cmp	r3, #49	; 0x31
 800776c:	d9f0      	bls.n	8007750 <USB_SetCurrentMode+0x2e>
 800776e:	e01a      	b.n	80077a6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007770:	78fb      	ldrb	r3, [r7, #3]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d115      	bne.n	80077a2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007782:	2001      	movs	r0, #1
 8007784:	f7fa fbe6 	bl	8001f54 <HAL_Delay>
      ms++;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	3301      	adds	r3, #1
 800778c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f9fe 	bl	8007b90 <USB_GetMode>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d005      	beq.n	80077a6 <USB_SetCurrentMode+0x84>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2b31      	cmp	r3, #49	; 0x31
 800779e:	d9f0      	bls.n	8007782 <USB_SetCurrentMode+0x60>
 80077a0:	e001      	b.n	80077a6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e005      	b.n	80077b2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2b32      	cmp	r3, #50	; 0x32
 80077aa:	d101      	bne.n	80077b0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e000      	b.n	80077b2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077bc:	b084      	sub	sp, #16
 80077be:	b580      	push	{r7, lr}
 80077c0:	b086      	sub	sp, #24
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80077ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80077d6:	2300      	movs	r3, #0
 80077d8:	613b      	str	r3, [r7, #16]
 80077da:	e009      	b.n	80077f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	3340      	adds	r3, #64	; 0x40
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	2200      	movs	r2, #0
 80077e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	3301      	adds	r3, #1
 80077ee:	613b      	str	r3, [r7, #16]
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	2b0e      	cmp	r3, #14
 80077f4:	d9f2      	bls.n	80077dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80077f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d11c      	bne.n	8007836 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800780a:	f043 0302 	orr.w	r3, r3, #2
 800780e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007814:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	e005      	b.n	8007842 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007848:	461a      	mov	r2, r3
 800784a:	2300      	movs	r3, #0
 800784c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007854:	4619      	mov	r1, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800785c:	461a      	mov	r2, r3
 800785e:	680b      	ldr	r3, [r1, #0]
 8007860:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007862:	2103      	movs	r1, #3
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f959 	bl	8007b1c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800786a:	2110      	movs	r1, #16
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f8f1 	bl	8007a54 <USB_FlushTxFifo>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d001      	beq.n	800787c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f91d 	bl	8007abc <USB_FlushRxFifo>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007892:	461a      	mov	r2, r3
 8007894:	2300      	movs	r3, #0
 8007896:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800789e:	461a      	mov	r2, r3
 80078a0:	2300      	movs	r3, #0
 80078a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078aa:	461a      	mov	r2, r3
 80078ac:	2300      	movs	r3, #0
 80078ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078b0:	2300      	movs	r3, #0
 80078b2:	613b      	str	r3, [r7, #16]
 80078b4:	e043      	b.n	800793e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	015a      	lsls	r2, r3, #5
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	4413      	add	r3, r2
 80078be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078cc:	d118      	bne.n	8007900 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10a      	bne.n	80078ea <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	015a      	lsls	r2, r3, #5
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e0:	461a      	mov	r2, r3
 80078e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80078e6:	6013      	str	r3, [r2, #0]
 80078e8:	e013      	b.n	8007912 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	015a      	lsls	r2, r3, #5
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	4413      	add	r3, r2
 80078f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f6:	461a      	mov	r2, r3
 80078f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80078fc:	6013      	str	r3, [r2, #0]
 80078fe:	e008      	b.n	8007912 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	015a      	lsls	r2, r3, #5
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	4413      	add	r3, r2
 8007908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800790c:	461a      	mov	r2, r3
 800790e:	2300      	movs	r3, #0
 8007910:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	015a      	lsls	r2, r3, #5
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	4413      	add	r3, r2
 800791a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800791e:	461a      	mov	r2, r3
 8007920:	2300      	movs	r3, #0
 8007922:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	4413      	add	r3, r2
 800792c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007930:	461a      	mov	r2, r3
 8007932:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007936:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	3301      	adds	r3, #1
 800793c:	613b      	str	r3, [r7, #16]
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	429a      	cmp	r2, r3
 8007944:	d3b7      	bcc.n	80078b6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007946:	2300      	movs	r3, #0
 8007948:	613b      	str	r3, [r7, #16]
 800794a:	e043      	b.n	80079d4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	015a      	lsls	r2, r3, #5
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4413      	add	r3, r2
 8007954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800795e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007962:	d118      	bne.n	8007996 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10a      	bne.n	8007980 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	015a      	lsls	r2, r3, #5
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	4413      	add	r3, r2
 8007972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007976:	461a      	mov	r2, r3
 8007978:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800797c:	6013      	str	r3, [r2, #0]
 800797e:	e013      	b.n	80079a8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	015a      	lsls	r2, r3, #5
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4413      	add	r3, r2
 8007988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800798c:	461a      	mov	r2, r3
 800798e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007992:	6013      	str	r3, [r2, #0]
 8007994:	e008      	b.n	80079a8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	4413      	add	r3, r2
 800799e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a2:	461a      	mov	r2, r3
 80079a4:	2300      	movs	r3, #0
 80079a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	015a      	lsls	r2, r3, #5
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	4413      	add	r3, r2
 80079b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b4:	461a      	mov	r2, r3
 80079b6:	2300      	movs	r3, #0
 80079b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	015a      	lsls	r2, r3, #5
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c6:	461a      	mov	r2, r3
 80079c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	3301      	adds	r3, #1
 80079d2:	613b      	str	r3, [r7, #16]
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d3b7      	bcc.n	800794c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80079fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	f043 0210 	orr.w	r2, r3, #16
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	699a      	ldr	r2, [r3, #24]
 8007a0e:	4b10      	ldr	r3, [pc, #64]	; (8007a50 <USB_DevInit+0x294>)
 8007a10:	4313      	orrs	r3, r2
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d005      	beq.n	8007a28 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	f043 0208 	orr.w	r2, r3, #8
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d107      	bne.n	8007a3e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a36:	f043 0304 	orr.w	r3, r3, #4
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3718      	adds	r7, #24
 8007a44:	46bd      	mov	sp, r7
 8007a46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a4a:	b004      	add	sp, #16
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	803c3800 	.word	0x803c3800

08007a54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	3301      	adds	r3, #1
 8007a66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4a13      	ldr	r2, [pc, #76]	; (8007ab8 <USB_FlushTxFifo+0x64>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d901      	bls.n	8007a74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e01b      	b.n	8007aac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	daf2      	bge.n	8007a62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	019b      	lsls	r3, r3, #6
 8007a84:	f043 0220 	orr.w	r2, r3, #32
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	4a08      	ldr	r2, [pc, #32]	; (8007ab8 <USB_FlushTxFifo+0x64>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d901      	bls.n	8007a9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e006      	b.n	8007aac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	f003 0320 	and.w	r3, r3, #32
 8007aa6:	2b20      	cmp	r3, #32
 8007aa8:	d0f0      	beq.n	8007a8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3714      	adds	r7, #20
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr
 8007ab8:	00030d40 	.word	0x00030d40

08007abc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	3301      	adds	r3, #1
 8007acc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	4a11      	ldr	r2, [pc, #68]	; (8007b18 <USB_FlushRxFifo+0x5c>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d901      	bls.n	8007ada <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	e018      	b.n	8007b0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	daf2      	bge.n	8007ac8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2210      	movs	r2, #16
 8007aea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	3301      	adds	r3, #1
 8007af0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	4a08      	ldr	r2, [pc, #32]	; (8007b18 <USB_FlushRxFifo+0x5c>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d901      	bls.n	8007afe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e006      	b.n	8007b0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	f003 0310 	and.w	r3, r3, #16
 8007b06:	2b10      	cmp	r3, #16
 8007b08:	d0f0      	beq.n	8007aec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3714      	adds	r7, #20
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	00030d40 	.word	0x00030d40

08007b1c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	460b      	mov	r3, r1
 8007b26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	78fb      	ldrb	r3, [r7, #3]
 8007b36:	68f9      	ldr	r1, [r7, #12]
 8007b38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b085      	sub	sp, #20
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b68:	f023 0303 	bic.w	r3, r3, #3
 8007b6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b7c:	f043 0302 	orr.w	r3, r3, #2
 8007b80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	695b      	ldr	r3, [r3, #20]
 8007b9c:	f003 0301 	and.w	r3, r3, #1
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	4a13      	ldr	r2, [pc, #76]	; (8007c10 <USB_CoreReset+0x64>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d901      	bls.n	8007bca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e01b      	b.n	8007c02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	daf2      	bge.n	8007bb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	f043 0201 	orr.w	r2, r3, #1
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3301      	adds	r3, #1
 8007be6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4a09      	ldr	r2, [pc, #36]	; (8007c10 <USB_CoreReset+0x64>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d901      	bls.n	8007bf4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e006      	b.n	8007c02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	f003 0301 	and.w	r3, r3, #1
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d0f0      	beq.n	8007be2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3714      	adds	r7, #20
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	00030d40 	.word	0x00030d40

08007c14 <Hex2Num>:
 * @brief  Convert char in Hex format to integer.
 * @param  a: character to convert
 * @retval integer value.
 */

static uint8_t Hex2Num(char a) {
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	71fb      	strb	r3, [r7, #7]
	if (a >= '0' && a <= '9') { /* Char is num */
 8007c1e:	79fb      	ldrb	r3, [r7, #7]
 8007c20:	2b2f      	cmp	r3, #47	; 0x2f
 8007c22:	d906      	bls.n	8007c32 <Hex2Num+0x1e>
 8007c24:	79fb      	ldrb	r3, [r7, #7]
 8007c26:	2b39      	cmp	r3, #57	; 0x39
 8007c28:	d803      	bhi.n	8007c32 <Hex2Num+0x1e>
		return a - '0';
 8007c2a:	79fb      	ldrb	r3, [r7, #7]
 8007c2c:	3b30      	subs	r3, #48	; 0x30
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	e014      	b.n	8007c5c <Hex2Num+0x48>
	} else if (a >= 'a' && a <= 'f') { /* Char is lowercase character A - Z (hex) */
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	2b60      	cmp	r3, #96	; 0x60
 8007c36:	d906      	bls.n	8007c46 <Hex2Num+0x32>
 8007c38:	79fb      	ldrb	r3, [r7, #7]
 8007c3a:	2b66      	cmp	r3, #102	; 0x66
 8007c3c:	d803      	bhi.n	8007c46 <Hex2Num+0x32>
		return (a - 'a') + 10;
 8007c3e:	79fb      	ldrb	r3, [r7, #7]
 8007c40:	3b57      	subs	r3, #87	; 0x57
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	e00a      	b.n	8007c5c <Hex2Num+0x48>
	} else if (a >= 'A' && a <= 'F') { /* Char is uppercase character A - Z (hex) */
 8007c46:	79fb      	ldrb	r3, [r7, #7]
 8007c48:	2b40      	cmp	r3, #64	; 0x40
 8007c4a:	d906      	bls.n	8007c5a <Hex2Num+0x46>
 8007c4c:	79fb      	ldrb	r3, [r7, #7]
 8007c4e:	2b46      	cmp	r3, #70	; 0x46
 8007c50:	d803      	bhi.n	8007c5a <Hex2Num+0x46>
		return (a - 'A') + 10;
 8007c52:	79fb      	ldrb	r3, [r7, #7]
 8007c54:	3b37      	subs	r3, #55	; 0x37
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	e000      	b.n	8007c5c <Hex2Num+0x48>
	}

	return 0;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <ParseHexNumber>:
 * @brief  Extract a hex number from a string.
 * @param  ptr: pointer to string
 * @param  cnt: pointer to the number of parsed digit
 * @retval Hex value.
 */
static uint32_t ParseHexNumber(char *ptr, uint8_t *cnt) {
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
	uint32_t sum = 0;
 8007c72:	2300      	movs	r3, #0
 8007c74:	60fb      	str	r3, [r7, #12]
	uint8_t i = 0;
 8007c76:	2300      	movs	r3, #0
 8007c78:	72fb      	strb	r3, [r7, #11]

	while (CHARISHEXNUM(*ptr)) { /* Parse number */
 8007c7a:	e012      	b.n	8007ca2 <ParseHexNumber+0x3a>
		sum <<= 4;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	011b      	lsls	r3, r3, #4
 8007c80:	60fb      	str	r3, [r7, #12]
		sum += Hex2Num(*ptr);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7ff ffc4 	bl	8007c14 <Hex2Num>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	461a      	mov	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	4413      	add	r3, r2
 8007c94:	60fb      	str	r3, [r7, #12]
		ptr++;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	607b      	str	r3, [r7, #4]
		i++;
 8007c9c:	7afb      	ldrb	r3, [r7, #11]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	72fb      	strb	r3, [r7, #11]
	while (CHARISHEXNUM(*ptr)) { /* Parse number */
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	2b2f      	cmp	r3, #47	; 0x2f
 8007ca8:	d903      	bls.n	8007cb2 <ParseHexNumber+0x4a>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	2b39      	cmp	r3, #57	; 0x39
 8007cb0:	d9e4      	bls.n	8007c7c <ParseHexNumber+0x14>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	2b60      	cmp	r3, #96	; 0x60
 8007cb8:	d903      	bls.n	8007cc2 <ParseHexNumber+0x5a>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	2b66      	cmp	r3, #102	; 0x66
 8007cc0:	d9dc      	bls.n	8007c7c <ParseHexNumber+0x14>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	2b40      	cmp	r3, #64	; 0x40
 8007cc8:	d903      	bls.n	8007cd2 <ParseHexNumber+0x6a>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	2b46      	cmp	r3, #70	; 0x46
 8007cd0:	d9d4      	bls.n	8007c7c <ParseHexNumber+0x14>
	}

	if (cnt != NULL) { /* Save number of characters used for number */
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d002      	beq.n	8007cde <ParseHexNumber+0x76>
		*cnt = i;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	7afa      	ldrb	r2, [r7, #11]
 8007cdc:	701a      	strb	r2, [r3, #0]
	}
	return sum; /* Return number */
 8007cde:	68fb      	ldr	r3, [r7, #12]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <ParseNumber>:
 * @brief  Parses and returns number from string.
 * @param  ptr: pointer to string
 * @param  cnt: pointer to the number of parsed digit
 * @retval integer value.
 */
static int32_t ParseNumber(char *ptr, uint8_t *cnt) {
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
	uint8_t minus = 0, i = 0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	73fb      	strb	r3, [r7, #15]
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	73bb      	strb	r3, [r7, #14]
	int32_t sum = 0;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	60bb      	str	r3, [r7, #8]

	if (*ptr == '-') { /* Check for minus character */
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	2b2d      	cmp	r3, #45	; 0x2d
 8007d04:	d119      	bne.n	8007d3a <ParseNumber+0x52>
		minus = 1;
 8007d06:	2301      	movs	r3, #1
 8007d08:	73fb      	strb	r3, [r7, #15]
		ptr++;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	607b      	str	r3, [r7, #4]
		i++;
 8007d10:	7bbb      	ldrb	r3, [r7, #14]
 8007d12:	3301      	adds	r3, #1
 8007d14:	73bb      	strb	r3, [r7, #14]
	}
	while (CHARISNUM(*ptr)) { /* Parse number */
 8007d16:	e010      	b.n	8007d3a <ParseNumber+0x52>
		sum = 10 * sum + CHAR2NUM(*ptr);
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	005b      	lsls	r3, r3, #1
 8007d22:	461a      	mov	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	3b30      	subs	r3, #48	; 0x30
 8007d2a:	4413      	add	r3, r2
 8007d2c:	60bb      	str	r3, [r7, #8]
		ptr++;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	3301      	adds	r3, #1
 8007d32:	607b      	str	r3, [r7, #4]
		i++;
 8007d34:	7bbb      	ldrb	r3, [r7, #14]
 8007d36:	3301      	adds	r3, #1
 8007d38:	73bb      	strb	r3, [r7, #14]
	while (CHARISNUM(*ptr)) { /* Parse number */
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	2b2f      	cmp	r3, #47	; 0x2f
 8007d40:	d903      	bls.n	8007d4a <ParseNumber+0x62>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	2b39      	cmp	r3, #57	; 0x39
 8007d48:	d9e6      	bls.n	8007d18 <ParseNumber+0x30>
	}
	if (cnt != NULL) { /* Save number of characters used for number */
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d002      	beq.n	8007d56 <ParseNumber+0x6e>
		*cnt = i;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	7bba      	ldrb	r2, [r7, #14]
 8007d54:	701a      	strb	r2, [r3, #0]
	}
	if (minus) { /* Minus detected */
 8007d56:	7bfb      	ldrb	r3, [r7, #15]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d002      	beq.n	8007d62 <ParseNumber+0x7a>
		return 0 - sum;
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	425b      	negs	r3, r3
 8007d60:	e000      	b.n	8007d64 <ParseNumber+0x7c>
	}
	return sum; /* Return number */
 8007d62:	68bb      	ldr	r3, [r7, #8]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3714      	adds	r7, #20
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <ParseMAC>:
 * @brief  Parses and returns MAC address.
 * @param  ptr: pointer to string
 * @param  arr: pointer to MAC array
 * @retval None.
 */
static void ParseMAC(char *ptr, uint8_t *arr) {
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
	uint8_t hexnum = 0, hexcnt;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	73fb      	strb	r3, [r7, #15]

	while (*ptr) {
 8007d7e:	e019      	b.n	8007db4 <ParseMAC+0x44>
		hexcnt = 1;
 8007d80:	2301      	movs	r3, #1
 8007d82:	73bb      	strb	r3, [r7, #14]
		if (*ptr != ':') {
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b3a      	cmp	r3, #58	; 0x3a
 8007d8a:	d00e      	beq.n	8007daa <ParseMAC+0x3a>
			arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8007d8c:	f107 030e 	add.w	r3, r7, #14
 8007d90:	4619      	mov	r1, r3
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7ff ff68 	bl	8007c68 <ParseHexNumber>
 8007d98:	4601      	mov	r1, r0
 8007d9a:	7bfb      	ldrb	r3, [r7, #15]
 8007d9c:	1c5a      	adds	r2, r3, #1
 8007d9e:	73fa      	strb	r2, [r7, #15]
 8007da0:	461a      	mov	r2, r3
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	4413      	add	r3, r2
 8007da6:	b2ca      	uxtb	r2, r1
 8007da8:	701a      	strb	r2, [r3, #0]
		}
		ptr = ptr + hexcnt;
 8007daa:	7bbb      	ldrb	r3, [r7, #14]
 8007dac:	461a      	mov	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4413      	add	r3, r2
 8007db2:	607b      	str	r3, [r7, #4]
	while (*ptr) {
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1e1      	bne.n	8007d80 <ParseMAC+0x10>
	}
}
 8007dbc:	bf00      	nop
 8007dbe:	bf00      	nop
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <ParseIP>:
 * @brief  Parses and returns IP address.
 * @param  ptr: pointer to string
 * @param  arr: pointer to IP array
 * @retval None.
 */
static void ParseIP(char *ptr, uint8_t *arr) {
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b084      	sub	sp, #16
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	6039      	str	r1, [r7, #0]
	uint8_t hexnum = 0, hexcnt;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	73fb      	strb	r3, [r7, #15]

	while (*ptr) {
 8007dd4:	e019      	b.n	8007e0a <ParseIP+0x44>
		hexcnt = 1;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	73bb      	strb	r3, [r7, #14]
		if (*ptr != '.') {
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	2b2e      	cmp	r3, #46	; 0x2e
 8007de0:	d00e      	beq.n	8007e00 <ParseIP+0x3a>
			arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8007de2:	f107 030e 	add.w	r3, r7, #14
 8007de6:	4619      	mov	r1, r3
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7ff ff7d 	bl	8007ce8 <ParseNumber>
 8007dee:	4601      	mov	r1, r0
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
 8007df2:	1c5a      	adds	r2, r3, #1
 8007df4:	73fa      	strb	r2, [r7, #15]
 8007df6:	461a      	mov	r2, r3
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	b2ca      	uxtb	r2, r1
 8007dfe:	701a      	strb	r2, [r3, #0]
		}
		ptr = ptr + hexcnt;
 8007e00:	7bbb      	ldrb	r3, [r7, #14]
 8007e02:	461a      	mov	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4413      	add	r3, r2
 8007e08:	607b      	str	r3, [r7, #4]
	while (*ptr) {
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1e1      	bne.n	8007dd6 <ParseIP+0x10>
	}
}
 8007e12:	bf00      	nop
 8007e14:	bf00      	nop
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <AT_ParseInfo>:
 * @brief  Parses ES module informations and save them in the handle.
 * @param  Obj: pointer to module handle
 * @param  ptr: pointer to string
 * @retval None.
 */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata) {
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
	char *ptr;
	uint8_t num = 0;
 8007e26:	2300      	movs	r3, #0
 8007e28:	72fb      	strb	r3, [r7, #11]

	ptr = strtok((char*) pdata + 2, ",");
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	3302      	adds	r3, #2
 8007e2e:	4934      	ldr	r1, [pc, #208]	; (8007f00 <AT_ParseInfo+0xe4>)
 8007e30:	4618      	mov	r0, r3
 8007e32:	f005 fb3d 	bl	800d4b0 <strtok>
 8007e36:	60f8      	str	r0, [r7, #12]

	while (ptr != NULL) {
 8007e38:	e05a      	b.n	8007ef0 <AT_ParseInfo+0xd4>
		switch (num++) {
 8007e3a:	7afb      	ldrb	r3, [r7, #11]
 8007e3c:	1c5a      	adds	r2, r3, #1
 8007e3e:	72fa      	strb	r2, [r7, #11]
 8007e40:	2b06      	cmp	r3, #6
 8007e42:	d84f      	bhi.n	8007ee4 <AT_ParseInfo+0xc8>
 8007e44:	a201      	add	r2, pc, #4	; (adr r2, 8007e4c <AT_ParseInfo+0x30>)
 8007e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4a:	bf00      	nop
 8007e4c:	08007e69 	.word	0x08007e69
 8007e50:	08007e77 	.word	0x08007e77
 8007e54:	08007e87 	.word	0x08007e87
 8007e58:	08007e97 	.word	0x08007e97
 8007e5c:	08007ea7 	.word	0x08007ea7
 8007e60:	08007eb7 	.word	0x08007eb7
 8007e64:	08007ecb 	.word	0x08007ecb
		case 0:
			strncpy((char*) Obj->Product_ID, ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	68f9      	ldr	r1, [r7, #12]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f005 faf4 	bl	800d45c <strncpy>
			break;
 8007e74:	e037      	b.n	8007ee6 <AT_ParseInfo+0xca>

		case 1:
			strncpy((char*) Obj->FW_Rev, ptr, ES_WIFI_FW_REV_SIZE);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	3320      	adds	r3, #32
 8007e7a:	2218      	movs	r2, #24
 8007e7c:	68f9      	ldr	r1, [r7, #12]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f005 faec 	bl	800d45c <strncpy>
			break;
 8007e84:	e02f      	b.n	8007ee6 <AT_ParseInfo+0xca>

		case 2:
			strncpy((char*) Obj->API_Rev, ptr, ES_WIFI_API_REV_SIZE);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	3338      	adds	r3, #56	; 0x38
 8007e8a:	2210      	movs	r2, #16
 8007e8c:	68f9      	ldr	r1, [r7, #12]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f005 fae4 	bl	800d45c <strncpy>
			break;
 8007e94:	e027      	b.n	8007ee6 <AT_ParseInfo+0xca>

		case 3:
			strncpy((char*) Obj->Stack_Rev, ptr, ES_WIFI_STACK_REV_SIZE);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	3348      	adds	r3, #72	; 0x48
 8007e9a:	2210      	movs	r2, #16
 8007e9c:	68f9      	ldr	r1, [r7, #12]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f005 fadc 	bl	800d45c <strncpy>
			break;
 8007ea4:	e01f      	b.n	8007ee6 <AT_ParseInfo+0xca>

		case 4:
			strncpy((char*) Obj->RTOS_Rev, ptr, ES_WIFI_RTOS_REV_SIZE);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	3358      	adds	r3, #88	; 0x58
 8007eaa:	2210      	movs	r2, #16
 8007eac:	68f9      	ldr	r1, [r7, #12]
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f005 fad4 	bl	800d45c <strncpy>
			break;
 8007eb4:	e017      	b.n	8007ee6 <AT_ParseInfo+0xca>

		case 5:
			Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f7ff ff15 	bl	8007ce8 <ParseNumber>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8007ec8:	e00d      	b.n	8007ee6 <AT_ParseInfo+0xca>

		case 6:
			ptr = strtok(ptr, "\r");
 8007eca:	490e      	ldr	r1, [pc, #56]	; (8007f04 <AT_ParseInfo+0xe8>)
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f005 faef 	bl	800d4b0 <strtok>
 8007ed2:	60f8      	str	r0, [r7, #12]
			strncpy((char*) Obj->Product_Name, ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	3368      	adds	r3, #104	; 0x68
 8007ed8:	2220      	movs	r2, #32
 8007eda:	68f9      	ldr	r1, [r7, #12]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f005 fabd 	bl	800d45c <strncpy>
			break;
 8007ee2:	e000      	b.n	8007ee6 <AT_ParseInfo+0xca>

		default:
			break;
 8007ee4:	bf00      	nop
		}
		ptr = strtok(NULL, ",");
 8007ee6:	4906      	ldr	r1, [pc, #24]	; (8007f00 <AT_ParseInfo+0xe4>)
 8007ee8:	2000      	movs	r0, #0
 8007eea:	f005 fae1 	bl	800d4b0 <strtok>
 8007eee:	60f8      	str	r0, [r7, #12]
	while (ptr != NULL) {
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1a1      	bne.n	8007e3a <AT_ParseInfo+0x1e>
	}
}
 8007ef6:	bf00      	nop
 8007ef8:	bf00      	nop
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	0800e7f0 	.word	0x0800e7f0
 8007f04:	0800e7f4 	.word	0x0800e7f4

08007f08 <AT_ParseConnSettings>:
 * @brief  Parses WIFI connection settings.
 * @param  NetSettings: settings
 * @param  pdata: pointer to data
 * @retval None.
 */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings) {
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
	uint8_t num = 0;
 8007f12:	2300      	movs	r3, #0
 8007f14:	73fb      	strb	r3, [r7, #15]
	char *ptr;

	ptr = strtok(pdata + 2, ",");
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	3302      	adds	r3, #2
 8007f1a:	4952      	ldr	r1, [pc, #328]	; (8008064 <AT_ParseConnSettings+0x15c>)
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f005 fac7 	bl	800d4b0 <strtok>
 8007f22:	60b8      	str	r0, [r7, #8]

	while (ptr != NULL) {
 8007f24:	e095      	b.n	8008052 <AT_ParseConnSettings+0x14a>
		switch (num++) {
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
 8007f28:	1c5a      	adds	r2, r3, #1
 8007f2a:	73fa      	strb	r2, [r7, #15]
 8007f2c:	2b0b      	cmp	r3, #11
 8007f2e:	d87f      	bhi.n	8008030 <AT_ParseConnSettings+0x128>
 8007f30:	a201      	add	r2, pc, #4	; (adr r2, 8007f38 <AT_ParseConnSettings+0x30>)
 8007f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f36:	bf00      	nop
 8007f38:	08007f69 	.word	0x08007f69
 8007f3c:	08007f77 	.word	0x08007f77
 8007f40:	08007f87 	.word	0x08007f87
 8007f44:	08007f9b 	.word	0x08007f9b
 8007f48:	08007faf 	.word	0x08007faf
 8007f4c:	08007fc3 	.word	0x08007fc3
 8007f50:	08007fd1 	.word	0x08007fd1
 8007f54:	08007fdf 	.word	0x08007fdf
 8007f58:	08007fed 	.word	0x08007fed
 8007f5c:	08007ffb 	.word	0x08007ffb
 8007f60:	08008009 	.word	0x08008009
 8007f64:	0800801d 	.word	0x0800801d
		case 0:
			strncpy((char*) NetSettings->SSID, ptr,
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	2221      	movs	r2, #33	; 0x21
 8007f6c:	68b9      	ldr	r1, [r7, #8]
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f005 fa74 	bl	800d45c <strncpy>
			ES_WIFI_MAX_SSID_NAME_SIZE + 1);
			break;
 8007f74:	e05d      	b.n	8008032 <AT_ParseConnSettings+0x12a>

		case 1:
			strncpy((char*) NetSettings->pswd, ptr,
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	3321      	adds	r3, #33	; 0x21
 8007f7a:	2221      	movs	r2, #33	; 0x21
 8007f7c:	68b9      	ldr	r1, [r7, #8]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f005 fa6c 	bl	800d45c <strncpy>
			ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
			break;
 8007f84:	e055      	b.n	8008032 <AT_ParseConnSettings+0x12a>

		case 2:
			NetSettings->Security = (ES_WIFI_SecurityType_t) ParseNumber(ptr,
 8007f86:	2100      	movs	r1, #0
 8007f88:	68b8      	ldr	r0, [r7, #8]
 8007f8a:	f7ff fead 	bl	8007ce8 <ParseNumber>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			NULL);
			break;
 8007f98:	e04b      	b.n	8008032 <AT_ParseConnSettings+0x12a>

		case 3:
			NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	68b8      	ldr	r0, [r7, #8]
 8007f9e:	f7ff fea3 	bl	8007ce8 <ParseNumber>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	b2da      	uxtb	r2, r3
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
			break;
 8007fac:	e041      	b.n	8008032 <AT_ParseConnSettings+0x12a>

		case 4:
			NetSettings->IP_Ver = (ES_WIFI_IPVer_t) ParseNumber(ptr, NULL);
 8007fae:	2100      	movs	r1, #0
 8007fb0:	68b8      	ldr	r0, [r7, #8]
 8007fb2:	f7ff fe99 	bl	8007ce8 <ParseNumber>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			break;
 8007fc0:	e037      	b.n	8008032 <AT_ParseConnSettings+0x12a>

		case 5:
			ParseIP(ptr, NetSettings->IP_Addr);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	3348      	adds	r3, #72	; 0x48
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	68b8      	ldr	r0, [r7, #8]
 8007fca:	f7ff fefc 	bl	8007dc6 <ParseIP>
			break;
 8007fce:	e030      	b.n	8008032 <AT_ParseConnSettings+0x12a>

		case 6:
			ParseIP(ptr, NetSettings->IP_Mask);
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	334c      	adds	r3, #76	; 0x4c
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	68b8      	ldr	r0, [r7, #8]
 8007fd8:	f7ff fef5 	bl	8007dc6 <ParseIP>
			break;
 8007fdc:	e029      	b.n	8008032 <AT_ParseConnSettings+0x12a>

		case 7:
			ParseIP(ptr, NetSettings->Gateway_Addr);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	3350      	adds	r3, #80	; 0x50
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	68b8      	ldr	r0, [r7, #8]
 8007fe6:	f7ff feee 	bl	8007dc6 <ParseIP>
			break;
 8007fea:	e022      	b.n	8008032 <AT_ParseConnSettings+0x12a>

		case 8:
			ParseIP(ptr, NetSettings->DNS1);
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	3354      	adds	r3, #84	; 0x54
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	68b8      	ldr	r0, [r7, #8]
 8007ff4:	f7ff fee7 	bl	8007dc6 <ParseIP>
			break;
 8007ff8:	e01b      	b.n	8008032 <AT_ParseConnSettings+0x12a>

		case 9:
			ParseIP(ptr, NetSettings->DNS2);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	3358      	adds	r3, #88	; 0x58
 8007ffe:	4619      	mov	r1, r3
 8008000:	68b8      	ldr	r0, [r7, #8]
 8008002:	f7ff fee0 	bl	8007dc6 <ParseIP>
			break;
 8008006:	e014      	b.n	8008032 <AT_ParseConnSettings+0x12a>

		case 10:
			NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8008008:	2100      	movs	r1, #0
 800800a:	68b8      	ldr	r0, [r7, #8]
 800800c:	f7ff fe6c 	bl	8007ce8 <ParseNumber>
 8008010:	4603      	mov	r3, r0
 8008012:	b2da      	uxtb	r2, r3
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			break;
 800801a:	e00a      	b.n	8008032 <AT_ParseConnSettings+0x12a>

		case 11:
			NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 800801c:	2100      	movs	r1, #0
 800801e:	68b8      	ldr	r0, [r7, #8]
 8008020:	f7ff fe62 	bl	8007ce8 <ParseNumber>
 8008024:	4603      	mov	r3, r0
 8008026:	b2da      	uxtb	r2, r3
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			break;
 800802e:	e000      	b.n	8008032 <AT_ParseConnSettings+0x12a>

		default:
			break;
 8008030:	bf00      	nop
		}
		ptr = strtok(NULL, ",");
 8008032:	490c      	ldr	r1, [pc, #48]	; (8008064 <AT_ParseConnSettings+0x15c>)
 8008034:	2000      	movs	r0, #0
 8008036:	f005 fa3b 	bl	800d4b0 <strtok>
 800803a:	60b8      	str	r0, [r7, #8]
		if ((ptr != NULL) && (ptr[-1] == ',')) { /* Ignore empty fields */
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d007      	beq.n	8008052 <AT_ParseConnSettings+0x14a>
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	3b01      	subs	r3, #1
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	2b2c      	cmp	r3, #44	; 0x2c
 800804a:	d102      	bne.n	8008052 <AT_ParseConnSettings+0x14a>
			num++;
 800804c:	7bfb      	ldrb	r3, [r7, #15]
 800804e:	3301      	adds	r3, #1
 8008050:	73fb      	strb	r3, [r7, #15]
	while (ptr != NULL) {
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	2b00      	cmp	r3, #0
 8008056:	f47f af66 	bne.w	8007f26 <AT_ParseConnSettings+0x1e>
		}
	}
}
 800805a:	bf00      	nop
 800805c:	bf00      	nop
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	0800e7f0 	.word	0x0800e7f0

08008068 <AT_ParseIsConnected>:
 * @brief  Parses the connection status
 * @param  pdata: pointer to data
 * @param  isConnected: pointer to result
 * @retval None.
 */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected) {
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
	*isConnected = (pdata[2] == '1') ? 1 : 0;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	3302      	adds	r3, #2
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	2b31      	cmp	r3, #49	; 0x31
 800807a:	bf0c      	ite	eq
 800807c:	2301      	moveq	r3, #1
 800807e:	2300      	movne	r3, #0
 8008080:	b2db      	uxtb	r3, r3
 8008082:	461a      	mov	r2, r3
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	701a      	strb	r2, [r3, #0]
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <AT_ExecuteCommand>:
 * @param  cmd: pointer to command string
 * @param  pdata: pointer to returned data
 * @retval Operation Status.
 */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t *cmd,
		uint8_t *pdata) {
 8008094:	b590      	push	{r4, r7, lr}
 8008096:	b087      	sub	sp, #28
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
	int ret = 0;
 80080a0:	2300      	movs	r3, #0
 80080a2:	613b      	str	r3, [r7, #16]
	int16_t recv_len = 0;
 80080a4:	2300      	movs	r3, #0
 80080a6:	82fb      	strh	r3, [r7, #22]
	LOCK_WIFI();

	ret = Obj->fops.IO_Send(cmd, strlen((char*) cmd), Obj->Timeout);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 80080ae:	68b8      	ldr	r0, [r7, #8]
 80080b0:	f7f8 f88e 	bl	80001d0 <strlen>
 80080b4:	4603      	mov	r3, r0
 80080b6:	b299      	uxth	r1, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80080be:	461a      	mov	r2, r3
 80080c0:	68b8      	ldr	r0, [r7, #8]
 80080c2:	47a0      	blx	r4
 80080c4:	4603      	mov	r3, r0
 80080c6:	613b      	str	r3, [r7, #16]

	if (ret > 0) {
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	dd3e      	ble.n	800814c <AT_ExecuteCommand+0xb8>
		recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 80080da:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	4798      	blx	r3
 80080e2:	4603      	mov	r3, r0
 80080e4:	82fb      	strh	r3, [r7, #22]
		if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE)) {
 80080e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	dd27      	ble.n	800813e <AT_ExecuteCommand+0xaa>
 80080ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80080f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80080f6:	dc22      	bgt.n	800813e <AT_ExecuteCommand+0xaa>
			if (recv_len == ES_WIFI_DATA_SIZE) {
 80080f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80080fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008100:	d105      	bne.n	800810e <AT_ExecuteCommand+0x7a>
				// ES_WIFI_DATA_SIZE maybe too small !!
				recv_len--;
 8008102:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008106:	b29b      	uxth	r3, r3
 8008108:	3b01      	subs	r3, #1
 800810a:	b29b      	uxth	r3, r3
 800810c:	82fb      	strh	r3, [r7, #22]
			}
			*(pdata + recv_len) = 0;
 800810e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	4413      	add	r3, r2
 8008116:	2200      	movs	r2, #0
 8008118:	701a      	strb	r2, [r3, #0]
			if (strstr((char*) pdata, AT_OK_STRING)) {
 800811a:	490f      	ldr	r1, [pc, #60]	; (8008158 <AT_ExecuteCommand+0xc4>)
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f005 f9b0 	bl	800d482 <strstr>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d001      	beq.n	800812c <AT_ExecuteCommand+0x98>
				UNLOCK_WIFI();
				return ES_WIFI_STATUS_OK;
 8008128:	2300      	movs	r3, #0
 800812a:	e010      	b.n	800814e <AT_ExecuteCommand+0xba>
			} else if (strstr((char*) pdata, AT_ERROR_STRING)) {
 800812c:	490b      	ldr	r1, [pc, #44]	; (800815c <AT_ExecuteCommand+0xc8>)
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f005 f9a7 	bl	800d482 <strstr>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d001      	beq.n	800813e <AT_ExecuteCommand+0xaa>
				UNLOCK_WIFI();
				return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800813a:	2305      	movs	r3, #5
 800813c:	e007      	b.n	800814e <AT_ExecuteCommand+0xba>
			}
		}
		if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER) {
 800813e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008142:	f113 0f04 	cmn.w	r3, #4
 8008146:	d101      	bne.n	800814c <AT_ExecuteCommand+0xb8>
			UNLOCK_WIFI();
			return ES_WIFI_STATUS_MODULE_CRASH;
 8008148:	2306      	movs	r3, #6
 800814a:	e000      	b.n	800814e <AT_ExecuteCommand+0xba>
		}
	}UNLOCK_WIFI();
	return ES_WIFI_STATUS_IO_ERROR;
 800814c:	2304      	movs	r3, #4
}
 800814e:	4618      	mov	r0, r3
 8008150:	371c      	adds	r7, #28
 8008152:	46bd      	mov	sp, r7
 8008154:	bd90      	pop	{r4, r7, pc}
 8008156:	bf00      	nop
 8008158:	0800e804 	.word	0x0800e804
 800815c:	0800e810 	.word	0x0800e810

08008160 <AT_RequestSendData>:
 * @param  pdata: pointer to returned data
 * @retval Operation Status.
 */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t *cmd,
		uint8_t *pcmd_data, uint16_t len, uint8_t *pdata) {
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
 800816c:	807b      	strh	r3, [r7, #2]
	int16_t send_len = 0;
 800816e:	2300      	movs	r3, #0
 8008170:	82fb      	strh	r3, [r7, #22]
	int16_t recv_len = 0;
 8008172:	2300      	movs	r3, #0
 8008174:	82bb      	strh	r3, [r7, #20]
	uint16_t cmd_len = 0;
 8008176:	2300      	movs	r3, #0
 8008178:	827b      	strh	r3, [r7, #18]
	uint16_t n;

	LOCK_WIFI();
	cmd_len = strlen((char*) cmd);
 800817a:	68b8      	ldr	r0, [r7, #8]
 800817c:	f7f8 f828 	bl	80001d0 <strlen>
 8008180:	4603      	mov	r3, r0
 8008182:	827b      	strh	r3, [r7, #18]

	/* can send only even number of byte on first send */
	if (cmd_len & 1)
 8008184:	8a7b      	ldrh	r3, [r7, #18]
 8008186:	f003 0301 	and.w	r3, r3, #1
 800818a:	2b00      	cmp	r3, #0
 800818c:	d001      	beq.n	8008192 <AT_RequestSendData+0x32>
		return ES_WIFI_STATUS_ERROR;
 800818e:	2302      	movs	r3, #2
 8008190:	e053      	b.n	800823a <AT_RequestSendData+0xda>
	n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800819e:	8a79      	ldrh	r1, [r7, #18]
 80081a0:	68b8      	ldr	r0, [r7, #8]
 80081a2:	4798      	blx	r3
 80081a4:	4603      	mov	r3, r0
 80081a6:	823b      	strh	r3, [r7, #16]
	if (n == cmd_len) {
 80081a8:	8a3a      	ldrh	r2, [r7, #16]
 80081aa:	8a7b      	ldrh	r3, [r7, #18]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d143      	bne.n	8008238 <AT_RequestSendData+0xd8>
		send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 80081bc:	8879      	ldrh	r1, [r7, #2]
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	4798      	blx	r3
 80081c2:	4603      	mov	r3, r0
 80081c4:	82fb      	strh	r3, [r7, #22]
		if (send_len == len) {
 80081c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80081ca:	887b      	ldrh	r3, [r7, #2]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d131      	bne.n	8008234 <AT_RequestSendData+0xd4>
			recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 80081dc:	2100      	movs	r1, #0
 80081de:	6a38      	ldr	r0, [r7, #32]
 80081e0:	4798      	blx	r3
 80081e2:	4603      	mov	r3, r0
 80081e4:	82bb      	strh	r3, [r7, #20]
			if (recv_len > 0) {
 80081e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	dd19      	ble.n	8008222 <AT_RequestSendData+0xc2>
				*(pdata + recv_len) = 0;
 80081ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80081f2:	6a3a      	ldr	r2, [r7, #32]
 80081f4:	4413      	add	r3, r2
 80081f6:	2200      	movs	r2, #0
 80081f8:	701a      	strb	r2, [r3, #0]
				if (strstr((char*) pdata, AT_OK_STRING)) {
 80081fa:	4912      	ldr	r1, [pc, #72]	; (8008244 <AT_RequestSendData+0xe4>)
 80081fc:	6a38      	ldr	r0, [r7, #32]
 80081fe:	f005 f940 	bl	800d482 <strstr>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d001      	beq.n	800820c <AT_RequestSendData+0xac>
					UNLOCK_WIFI();
					return ES_WIFI_STATUS_OK;
 8008208:	2300      	movs	r3, #0
 800820a:	e016      	b.n	800823a <AT_RequestSendData+0xda>
				} else if (strstr((char*) pdata, AT_ERROR_STRING)) {
 800820c:	490e      	ldr	r1, [pc, #56]	; (8008248 <AT_RequestSendData+0xe8>)
 800820e:	6a38      	ldr	r0, [r7, #32]
 8008210:	f005 f937 	bl	800d482 <strstr>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d001      	beq.n	800821e <AT_RequestSendData+0xbe>
					UNLOCK_WIFI();
					return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800821a:	2305      	movs	r3, #5
 800821c:	e00d      	b.n	800823a <AT_RequestSendData+0xda>
				} else {
					UNLOCK_WIFI();
					return ES_WIFI_STATUS_ERROR;
 800821e:	2302      	movs	r3, #2
 8008220:	e00b      	b.n	800823a <AT_RequestSendData+0xda>
				}
			}UNLOCK_WIFI();
			if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER) {
 8008222:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008226:	f113 0f04 	cmn.w	r3, #4
 800822a:	d101      	bne.n	8008230 <AT_RequestSendData+0xd0>
				return ES_WIFI_STATUS_MODULE_CRASH;
 800822c:	2306      	movs	r3, #6
 800822e:	e004      	b.n	800823a <AT_RequestSendData+0xda>
			}
			return ES_WIFI_STATUS_ERROR;
 8008230:	2302      	movs	r3, #2
 8008232:	e002      	b.n	800823a <AT_RequestSendData+0xda>
		} else {
			return ES_WIFI_STATUS_ERROR;
 8008234:	2302      	movs	r3, #2
 8008236:	e000      	b.n	800823a <AT_RequestSendData+0xda>
		}
	}
	return ES_WIFI_STATUS_IO_ERROR;
 8008238:	2304      	movs	r3, #4
}
 800823a:	4618      	mov	r0, r3
 800823c:	3718      	adds	r7, #24
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	0800e804 	.word	0x0800e804
 8008248:	0800e810 	.word	0x0800e810

0800824c <AT_RequestReceiveData>:
 * @param  Reqlen : requested Data length.
 * @param  ReadData : pointer to received data length.
 * @retval Operation Status.
 */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj,
		uint8_t *cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData) {
 800824c:	b590      	push	{r4, r7, lr}
 800824e:	b087      	sub	sp, #28
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
 8008258:	807b      	strh	r3, [r7, #2]
	int len;
	uint8_t *p = Obj->CmdData;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008260:	613b      	str	r3, [r7, #16]

	LOCK_WIFI();
	if (Obj->fops.IO_Send(cmd, strlen((char*) cmd), Obj->Timeout) > 0) {
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8008268:	68b8      	ldr	r0, [r7, #8]
 800826a:	f7f7 ffb1 	bl	80001d0 <strlen>
 800826e:	4603      	mov	r3, r0
 8008270:	b299      	uxth	r1, r3
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8008278:	461a      	mov	r2, r3
 800827a:	68b8      	ldr	r0, [r7, #8]
 800827c:	47a0      	blx	r4
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	dd6f      	ble.n	8008364 <AT_RequestReceiveData+0x118>
		len = Obj->fops.IO_Receive(p, 0, Obj->Timeout);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8008290:	2100      	movs	r1, #0
 8008292:	6938      	ldr	r0, [r7, #16]
 8008294:	4798      	blx	r3
 8008296:	4603      	mov	r3, r0
 8008298:	617b      	str	r3, [r7, #20]
		if ((p[0] != '\r') || (p[1] != '\n')) {
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	2b0d      	cmp	r3, #13
 80082a0:	d104      	bne.n	80082ac <AT_RequestReceiveData+0x60>
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	3301      	adds	r3, #1
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	2b0a      	cmp	r3, #10
 80082aa:	d001      	beq.n	80082b0 <AT_RequestReceiveData+0x64>
			return ES_WIFI_STATUS_IO_ERROR;
 80082ac:	2304      	movs	r3, #4
 80082ae:	e05a      	b.n	8008366 <AT_RequestReceiveData+0x11a>
		}
		len -= 2;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	3b02      	subs	r3, #2
 80082b4:	617b      	str	r3, [r7, #20]
		p += 2;
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	3302      	adds	r3, #2
 80082ba:	613b      	str	r3, [r7, #16]
		if (len >= AT_OK_STRING_LEN) {
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	2b07      	cmp	r3, #7
 80082c0:	d94a      	bls.n	8008358 <AT_RequestReceiveData+0x10c>
			while (len && (p[len - 1] == 0x15))
 80082c2:	e002      	b.n	80082ca <AT_RequestReceiveData+0x7e>
				len--;
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	3b01      	subs	r3, #1
 80082c8:	617b      	str	r3, [r7, #20]
			while (len && (p[len - 1] == 0x15))
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d006      	beq.n	80082de <AT_RequestReceiveData+0x92>
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	3b01      	subs	r3, #1
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	4413      	add	r3, r2
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	2b15      	cmp	r3, #21
 80082dc:	d0f2      	beq.n	80082c4 <AT_RequestReceiveData+0x78>
			p[len] = '\0';
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	4413      	add	r3, r2
 80082e4:	2200      	movs	r2, #0
 80082e6:	701a      	strb	r2, [r3, #0]
			if (strstr((char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING)) {
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	3b08      	subs	r3, #8
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	4413      	add	r3, r2
 80082f0:	491f      	ldr	r1, [pc, #124]	; (8008370 <AT_RequestReceiveData+0x124>)
 80082f2:	4618      	mov	r0, r3
 80082f4:	f005 f8c5 	bl	800d482 <strstr>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d016      	beq.n	800832c <AT_RequestReceiveData+0xe0>
				*ReadData = len - AT_OK_STRING_LEN;
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	b29b      	uxth	r3, r3
 8008302:	3b08      	subs	r3, #8
 8008304:	b29a      	uxth	r2, r3
 8008306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008308:	801a      	strh	r2, [r3, #0]
				if (*ReadData > Reqlen) {
 800830a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	887a      	ldrh	r2, [r7, #2]
 8008310:	429a      	cmp	r2, r3
 8008312:	d202      	bcs.n	800831a <AT_RequestReceiveData+0xce>
					*ReadData = Reqlen;
 8008314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008316:	887a      	ldrh	r2, [r7, #2]
 8008318:	801a      	strh	r2, [r3, #0]
				}
				memcpy(pdata, p, *ReadData);
 800831a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831c:	881b      	ldrh	r3, [r3, #0]
 800831e:	461a      	mov	r2, r3
 8008320:	6939      	ldr	r1, [r7, #16]
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f004 fe16 	bl	800cf54 <memcpy>
				UNLOCK_WIFI();
				return ES_WIFI_STATUS_OK;
 8008328:	2300      	movs	r3, #0
 800832a:	e01c      	b.n	8008366 <AT_RequestReceiveData+0x11a>
			} else if (memcmp((char*) p + len - AT_DELIMETER_LEN,
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	3b04      	subs	r3, #4
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	4413      	add	r3, r2
 8008334:	2204      	movs	r2, #4
 8008336:	490f      	ldr	r1, [pc, #60]	; (8008374 <AT_RequestReceiveData+0x128>)
 8008338:	4618      	mov	r0, r3
 800833a:	f004 fdfb 	bl	800cf34 <memcmp>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d104      	bne.n	800834e <AT_RequestReceiveData+0x102>
			AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0) {
				*ReadData = 0;
 8008344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008346:	2200      	movs	r2, #0
 8008348:	801a      	strh	r2, [r3, #0]
				UNLOCK_WIFI();
				return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800834a:	2305      	movs	r3, #5
 800834c:	e00b      	b.n	8008366 <AT_RequestReceiveData+0x11a>
			}

			UNLOCK_WIFI();
			*ReadData = 0;
 800834e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008350:	2200      	movs	r2, #0
 8008352:	801a      	strh	r2, [r3, #0]
			return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8008354:	2305      	movs	r3, #5
 8008356:	e006      	b.n	8008366 <AT_RequestReceiveData+0x11a>
		}
		if (len == ES_WIFI_ERROR_STUFFING_FOREVER) {
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	f113 0f04 	cmn.w	r3, #4
 800835e:	d101      	bne.n	8008364 <AT_RequestReceiveData+0x118>
			UNLOCK_WIFI();
			return ES_WIFI_STATUS_MODULE_CRASH;
 8008360:	2306      	movs	r3, #6
 8008362:	e000      	b.n	8008366 <AT_RequestReceiveData+0x11a>
		}
	}UNLOCK_WIFI();
	return ES_WIFI_STATUS_IO_ERROR;
 8008364:	2304      	movs	r3, #4
}
 8008366:	4618      	mov	r0, r3
 8008368:	371c      	adds	r7, #28
 800836a:	46bd      	mov	sp, r7
 800836c:	bd90      	pop	{r4, r7, pc}
 800836e:	bf00      	nop
 8008370:	0800e804 	.word	0x0800e804
 8008374:	0800e818 	.word	0x0800e818

08008378 <ES_WIFI_Init>:
/**
 * @brief  Initialize WIFI module.
 * @param  Obj: pointer to module handle
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj) {
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
	ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8008380:	2302      	movs	r3, #2
 8008382:	73fb      	strb	r3, [r7, #15]

	LOCK_WIFI();

	Obj->Timeout = ES_WIFI_TIMEOUT;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f247 5230 	movw	r2, #30000	; 0x7530
 800838a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

	if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0) {
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008394:	2000      	movs	r0, #0
 8008396:	4798      	blx	r3
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d113      	bne.n	80083c6 <ES_WIFI_Init+0x4e>
		ret = AT_ExecuteCommand(Obj, (uint8_t*) "I?\r\n", Obj->CmdData);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80083a4:	461a      	mov	r2, r3
 80083a6:	490a      	ldr	r1, [pc, #40]	; (80083d0 <ES_WIFI_Init+0x58>)
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7ff fe73 	bl	8008094 <AT_ExecuteCommand>
 80083ae:	4603      	mov	r3, r0
 80083b0:	73fb      	strb	r3, [r7, #15]

		if (ret == ES_WIFI_STATUS_OK) {
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d106      	bne.n	80083c6 <ES_WIFI_Init+0x4e>
			AT_ParseInfo(Obj, Obj->CmdData);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80083be:	4619      	mov	r1, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f7ff fd2b 	bl	8007e1c <AT_ParseInfo>
		}
	}UNLOCK_WIFI();
	return ret;
 80083c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3710      	adds	r7, #16
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	0800e820 	.word	0x0800e820

080083d4 <ES_WIFI_RegisterBusIO>:
 * @param  Obj: pointer to module handle
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj,
		IO_Init_Func IO_Init, IO_DeInit_Func IO_DeInit, IO_Delay_Func IO_Delay,
		IO_Send_Func IO_Send, IO_Receive_Func IO_Receive) {
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
 80083e0:	603b      	str	r3, [r7, #0]
	if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive) {
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00b      	beq.n	8008400 <ES_WIFI_RegisterBusIO+0x2c>
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d008      	beq.n	8008400 <ES_WIFI_RegisterBusIO+0x2c>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d005      	beq.n	8008400 <ES_WIFI_RegisterBusIO+0x2c>
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d002      	beq.n	8008400 <ES_WIFI_RegisterBusIO+0x2c>
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d101      	bne.n	8008404 <ES_WIFI_RegisterBusIO+0x30>
		return ES_WIFI_STATUS_ERROR;
 8008400:	2302      	movs	r3, #2
 8008402:	e014      	b.n	800842e <ES_WIFI_RegisterBusIO+0x5a>
	}

	Obj->fops.IO_Init = IO_Init;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	Obj->fops.IO_DeInit = IO_DeInit;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	Obj->fops.IO_Send = IO_Send;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	69ba      	ldr	r2, [r7, #24]
 8008418:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	Obj->fops.IO_Receive = IO_Receive;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	69fa      	ldr	r2, [r7, #28]
 8008420:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	Obj->fops.IO_Delay = IO_Delay;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	return ES_WIFI_STATUS_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3714      	adds	r7, #20
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
	...

0800843c <ES_WIFI_Connect>:
 * @param  Password: the Access point password.
 * @param  SecType: Security type.
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
		const char *Password, ES_WIFI_SecurityType_t SecType) {
 800843c:	b580      	push	{r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
 8008448:	70fb      	strb	r3, [r7, #3]
	ES_WIFI_Status_t ret;
	LOCK_WIFI();

	sprintf((char*) Obj->CmdData, "C1=%s\r", SSID);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	4932      	ldr	r1, [pc, #200]	; (800851c <ES_WIFI_Connect+0xe0>)
 8008454:	4618      	mov	r0, r3
 8008456:	f004 ff7b 	bl	800d350 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008466:	461a      	mov	r2, r3
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f7ff fe13 	bl	8008094 <AT_ExecuteCommand>
 800846e:	4603      	mov	r3, r0
 8008470:	75fb      	strb	r3, [r7, #23]
	if (ret == ES_WIFI_STATUS_OK) {
 8008472:	7dfb      	ldrb	r3, [r7, #23]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d14b      	bne.n	8008510 <ES_WIFI_Connect+0xd4>
		sprintf((char*) Obj->CmdData, "C2=%s\r", Password);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	4927      	ldr	r1, [pc, #156]	; (8008520 <ES_WIFI_Connect+0xe4>)
 8008482:	4618      	mov	r0, r3
 8008484:	f004 ff64 	bl	800d350 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008494:	461a      	mov	r2, r3
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f7ff fdfc 	bl	8008094 <AT_ExecuteCommand>
 800849c:	4603      	mov	r3, r0
 800849e:	75fb      	strb	r3, [r7, #23]

		if (ret == ES_WIFI_STATUS_OK) {
 80084a0:	7dfb      	ldrb	r3, [r7, #23]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d134      	bne.n	8008510 <ES_WIFI_Connect+0xd4>
			Obj->Security = SecType;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	78fa      	ldrb	r2, [r7, #3]
 80084aa:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
			sprintf((char*) Obj->CmdData, "C3=%d\r", (uint8_t) SecType);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80084b4:	78fa      	ldrb	r2, [r7, #3]
 80084b6:	491b      	ldr	r1, [pc, #108]	; (8008524 <ES_WIFI_Connect+0xe8>)
 80084b8:	4618      	mov	r0, r3
 80084ba:	f004 ff49 	bl	800d350 <siprintf>
			ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80084ca:	461a      	mov	r2, r3
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f7ff fde1 	bl	8008094 <AT_ExecuteCommand>
 80084d2:	4603      	mov	r3, r0
 80084d4:	75fb      	strb	r3, [r7, #23]

			if (ret == ES_WIFI_STATUS_OK) {
 80084d6:	7dfb      	ldrb	r3, [r7, #23]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d119      	bne.n	8008510 <ES_WIFI_Connect+0xd4>
				sprintf((char*) Obj->CmdData, "C0\r");
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80084e2:	4911      	ldr	r1, [pc, #68]	; (8008528 <ES_WIFI_Connect+0xec>)
 80084e4:	4618      	mov	r0, r3
 80084e6:	f004 ff33 	bl	800d350 <siprintf>
				ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80084f6:	461a      	mov	r2, r3
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f7ff fdcb 	bl	8008094 <AT_ExecuteCommand>
 80084fe:	4603      	mov	r3, r0
 8008500:	75fb      	strb	r3, [r7, #23]
				if (ret == ES_WIFI_STATUS_OK) {
 8008502:	7dfb      	ldrb	r3, [r7, #23]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d103      	bne.n	8008510 <ES_WIFI_Connect+0xd4>
					Obj->NetSettings.IsConnected = 1;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
				}
			}
		}
	}UNLOCK_WIFI();
	return ret;
 8008510:	7dfb      	ldrb	r3, [r7, #23]
}
 8008512:	4618      	mov	r0, r3
 8008514:	3718      	adds	r7, #24
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	0800e838 	.word	0x0800e838
 8008520:	0800e840 	.word	0x0800e840
 8008524:	0800e848 	.word	0x0800e848
 8008528:	0800e850 	.word	0x0800e850

0800852c <ES_WIFI_IsConnected>:

/**
 * @brief  Check whether the module is connected to an access point.
 * @retval Operation Status.
 */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj) {
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
	ES_WIFI_Status_t ret;
	LOCK_WIFI();

	sprintf((char*) Obj->CmdData, "CS\r");
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800853a:	4911      	ldr	r1, [pc, #68]	; (8008580 <ES_WIFI_IsConnected+0x54>)
 800853c:	4618      	mov	r0, r3
 800853e:	f004 ff07 	bl	800d350 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800854e:	461a      	mov	r2, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f7ff fd9f 	bl	8008094 <AT_ExecuteCommand>
 8008556:	4603      	mov	r3, r0
 8008558:	73fb      	strb	r3, [r7, #15]
	if (ret == ES_WIFI_STATUS_OK) {
 800855a:	7bfb      	ldrb	r3, [r7, #15]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d108      	bne.n	8008572 <ES_WIFI_IsConnected+0x46>
		AT_ParseIsConnected((char*) Obj->CmdData,
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	33d2      	adds	r3, #210	; 0xd2
 800856a:	4619      	mov	r1, r3
 800856c:	4610      	mov	r0, r2
 800856e:	f7ff fd7b 	bl	8008068 <AT_ParseIsConnected>
				&(Obj->NetSettings.IsConnected));
	}UNLOCK_WIFI();
	return Obj->NetSettings.IsConnected;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	0800e854 	.word	0x0800e854

08008584 <ES_WIFI_GetNetworkSettings>:
 * @brief  Return network settings.
 * @param  Obj: pointer to module handle
 * @param  Pointer to network setting structure.
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj) {
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
	ES_WIFI_Status_t ret;
	LOCK_WIFI();

	sprintf((char*) Obj->CmdData, "C?\r");
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008592:	4910      	ldr	r1, [pc, #64]	; (80085d4 <ES_WIFI_GetNetworkSettings+0x50>)
 8008594:	4618      	mov	r0, r3
 8008596:	f004 fedb 	bl	800d350 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80085a6:	461a      	mov	r2, r3
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f7ff fd73 	bl	8008094 <AT_ExecuteCommand>
 80085ae:	4603      	mov	r3, r0
 80085b0:	73fb      	strb	r3, [r7, #15]

	if (ret == ES_WIFI_STATUS_OK) {
 80085b2:	7bfb      	ldrb	r3, [r7, #15]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d108      	bne.n	80085ca <ES_WIFI_GetNetworkSettings+0x46>
		AT_ParseConnSettings((char*) Obj->CmdData, &Obj->NetSettings);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f503 7294 	add.w	r2, r3, #296	; 0x128
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	338d      	adds	r3, #141	; 0x8d
 80085c2:	4619      	mov	r1, r3
 80085c4:	4610      	mov	r0, r2
 80085c6:	f7ff fc9f 	bl	8007f08 <AT_ParseConnSettings>
	}

	UNLOCK_WIFI();
	return ret;
 80085ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	0800e85c 	.word	0x0800e85c

080085d8 <ES_WIFI_GetMACAddress>:
 * @brief  retrn the MAC address of the es module.
 * @param  Obj: pointer to module handle
 * @param  mac: pointer to the MAC address array.
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac) {
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
	ES_WIFI_Status_t ret;
	char *ptr;
	LOCK_WIFI();

	sprintf((char*) Obj->CmdData, "Z5\r");
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80085e8:	4912      	ldr	r1, [pc, #72]	; (8008634 <ES_WIFI_GetMACAddress+0x5c>)
 80085ea:	4618      	mov	r0, r3
 80085ec:	f004 feb0 	bl	800d350 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80085fc:	461a      	mov	r2, r3
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f7ff fd48 	bl	8008094 <AT_ExecuteCommand>
 8008604:	4603      	mov	r3, r0
 8008606:	73fb      	strb	r3, [r7, #15]
	if (ret == ES_WIFI_STATUS_OK) {
 8008608:	7bfb      	ldrb	r3, [r7, #15]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10c      	bne.n	8008628 <ES_WIFI_GetMACAddress+0x50>
		ptr = strtok((char*) (Obj->CmdData + 2), "\r\n");
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008614:	3302      	adds	r3, #2
 8008616:	4908      	ldr	r1, [pc, #32]	; (8008638 <ES_WIFI_GetMACAddress+0x60>)
 8008618:	4618      	mov	r0, r3
 800861a:	f004 ff49 	bl	800d4b0 <strtok>
 800861e:	60b8      	str	r0, [r7, #8]
		ParseMAC(ptr, mac);
 8008620:	6839      	ldr	r1, [r7, #0]
 8008622:	68b8      	ldr	r0, [r7, #8]
 8008624:	f7ff fba4 	bl	8007d70 <ParseMAC>
	}UNLOCK_WIFI();
	return ret;
 8008628:	7bfb      	ldrb	r3, [r7, #15]
}
 800862a:	4618      	mov	r0, r3
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	0800e8b8 	.word	0x0800e8b8
 8008638:	0800e8bc 	.word	0x0800e8bc

0800863c <ES_WIFI_StartServerSingleConn>:
 * @param  Obj: pointer to module handle
 * @param  conn: pointer to the connection structure
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj,
		ES_WIFI_Conn_t *conn) {
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
	ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8008646:	2300      	movs	r3, #0
 8008648:	73fb      	strb	r3, [r7, #15]
	LOCK_WIFI();

	sprintf((char*) Obj->CmdData, "P0=%d\r", conn->Number);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	785b      	ldrb	r3, [r3, #1]
 8008654:	461a      	mov	r2, r3
 8008656:	4949      	ldr	r1, [pc, #292]	; (800877c <ES_WIFI_StartServerSingleConn+0x140>)
 8008658:	f004 fe7a 	bl	800d350 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008668:	461a      	mov	r2, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7ff fd12 	bl	8008094 <AT_ExecuteCommand>
 8008670:	4603      	mov	r3, r0
 8008672:	73fb      	strb	r3, [r7, #15]
	if (ret != ES_WIFI_STATUS_OK) {
 8008674:	7bfb      	ldrb	r3, [r7, #15]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <ES_WIFI_StartServerSingleConn+0x42>
		UNLOCK_WIFI();
		return ret;
 800867a:	7bfb      	ldrb	r3, [r7, #15]
 800867c:	e079      	b.n	8008772 <ES_WIFI_StartServerSingleConn+0x136>
	}

	if ((conn->Type != ES_WIFI_UDP_CONNECTION)
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	2b01      	cmp	r3, #1
 8008684:	d016      	beq.n	80086b4 <ES_WIFI_StartServerSingleConn+0x78>
			&& (conn->Type != ES_WIFI_UDP_LITE_CONNECTION)) {
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	2b02      	cmp	r3, #2
 800868c:	d012      	beq.n	80086b4 <ES_WIFI_StartServerSingleConn+0x78>
		sprintf((char*) Obj->CmdData, "PK=1,3000\r");
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008694:	493a      	ldr	r1, [pc, #232]	; (8008780 <ES_WIFI_StartServerSingleConn+0x144>)
 8008696:	4618      	mov	r0, r3
 8008698:	f004 fe5a 	bl	800d350 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80086a8:	461a      	mov	r2, r3
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f7ff fcf2 	bl	8008094 <AT_ExecuteCommand>
 80086b0:	4603      	mov	r3, r0
 80086b2:	73fb      	strb	r3, [r7, #15]
	}

	if (ret == ES_WIFI_STATUS_OK) {
 80086b4:	7bfb      	ldrb	r3, [r7, #15]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d15a      	bne.n	8008770 <ES_WIFI_StartServerSingleConn+0x134>
		sprintf((char*) Obj->CmdData, "P1=%d\r", conn->Type);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	461a      	mov	r2, r3
 80086c6:	492f      	ldr	r1, [pc, #188]	; (8008784 <ES_WIFI_StartServerSingleConn+0x148>)
 80086c8:	f004 fe42 	bl	800d350 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80086d8:	461a      	mov	r2, r3
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7ff fcda 	bl	8008094 <AT_ExecuteCommand>
 80086e0:	4603      	mov	r3, r0
 80086e2:	73fb      	strb	r3, [r7, #15]
		if (ret == ES_WIFI_STATUS_OK) {
 80086e4:	7bfb      	ldrb	r3, [r7, #15]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d142      	bne.n	8008770 <ES_WIFI_StartServerSingleConn+0x134>
			sprintf((char*) Obj->CmdData, "P8=%d\r", conn->Backlog);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	7c1b      	ldrb	r3, [r3, #16]
 80086f4:	461a      	mov	r2, r3
 80086f6:	4924      	ldr	r1, [pc, #144]	; (8008788 <ES_WIFI_StartServerSingleConn+0x14c>)
 80086f8:	f004 fe2a 	bl	800d350 <siprintf>
			ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008708:	461a      	mov	r2, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7ff fcc2 	bl	8008094 <AT_ExecuteCommand>
 8008710:	4603      	mov	r3, r0
 8008712:	73fb      	strb	r3, [r7, #15]
			if (ret == ES_WIFI_STATUS_OK) {
 8008714:	7bfb      	ldrb	r3, [r7, #15]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d12a      	bne.n	8008770 <ES_WIFI_StartServerSingleConn+0x134>
				sprintf((char*) Obj->CmdData, "P2=%d\r", conn->LocalPort);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	889b      	ldrh	r3, [r3, #4]
 8008724:	461a      	mov	r2, r3
 8008726:	4919      	ldr	r1, [pc, #100]	; (800878c <ES_WIFI_StartServerSingleConn+0x150>)
 8008728:	f004 fe12 	bl	800d350 <siprintf>
				ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008738:	461a      	mov	r2, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7ff fcaa 	bl	8008094 <AT_ExecuteCommand>
 8008740:	4603      	mov	r3, r0
 8008742:	73fb      	strb	r3, [r7, #15]
				if (ret == ES_WIFI_STATUS_OK) {
 8008744:	7bfb      	ldrb	r3, [r7, #15]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d112      	bne.n	8008770 <ES_WIFI_StartServerSingleConn+0x134>
					// multi accept mode
					sprintf((char*) Obj->CmdData, "P5=11\r");
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008750:	490f      	ldr	r1, [pc, #60]	; (8008790 <ES_WIFI_StartServerSingleConn+0x154>)
 8008752:	4618      	mov	r0, r3
 8008754:	f004 fdfc 	bl	800d350 <siprintf>
					ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008764:	461a      	mov	r2, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7ff fc94 	bl	8008094 <AT_ExecuteCommand>
 800876c:	4603      	mov	r3, r0
 800876e:	73fb      	strb	r3, [r7, #15]
#endif
				}
			}
		}
	}UNLOCK_WIFI();
	return ret;
 8008770:	7bfb      	ldrb	r3, [r7, #15]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	0800e920 	.word	0x0800e920
 8008780:	0800e968 	.word	0x0800e968
 8008784:	0800e928 	.word	0x0800e928
 8008788:	0800e974 	.word	0x0800e974
 800878c:	0800e930 	.word	0x0800e930
 8008790:	0800e97c 	.word	0x0800e97c

08008794 <ES_WIFI_WaitServerConnection>:
 * @param  Obj: pointer to module handle
 * @param  conn: pointer to the connection structure
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj,
		uint32_t timeout, ES_WIFI_Conn_t *conn) {
 8008794:	b580      	push	{r7, lr}
 8008796:	b08a      	sub	sp, #40	; 0x28
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
	ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 80087a0:	2300      	movs	r3, #0
 80087a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t t;
	uint32_t tlast;
	uint32_t tstart;
	char *ptr;

	tstart = HAL_GetTick();
 80087a6:	f7f9 fbc9 	bl	8001f3c <HAL_GetTick>
 80087aa:	6278      	str	r0, [r7, #36]	; 0x24
	tlast = tstart + timeout;
 80087ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	4413      	add	r3, r2
 80087b2:	61fb      	str	r3, [r7, #28]
	if (tlast < tstart) {
 80087b4:	69fa      	ldr	r2, [r7, #28]
 80087b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d201      	bcs.n	80087c0 <ES_WIFI_WaitServerConnection+0x2c>
		tstart = 0;
 80087bc:	2300      	movs	r3, #0
 80087be:	627b      	str	r3, [r7, #36]	; 0x24
	}

	do {
#if (ES_WIFI_USE_UART == 0)
		// mandatory to flush MR async messages
		memset(Obj->CmdData, 0, sizeof(Obj->CmdData));
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80087c6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80087ca:	2100      	movs	r1, #0
 80087cc:	4618      	mov	r0, r3
 80087ce:	f004 fbcf 	bl	800cf70 <memset>
		sprintf((char*) Obj->CmdData, "MR\r");
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80087d8:	4972      	ldr	r1, [pc, #456]	; (80089a4 <ES_WIFI_WaitServerConnection+0x210>)
 80087da:	4618      	mov	r0, r3
 80087dc:	f004 fdb8 	bl	800d350 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80087ec:	461a      	mov	r2, r3
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f7ff fc50 	bl	8008094 <AT_ExecuteCommand>
 80087f4:	4603      	mov	r3, r0
 80087f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (ret == ES_WIFI_STATUS_OK) {
 80087fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d136      	bne.n	8008870 <ES_WIFI_WaitServerConnection+0xdc>
			if ((strstr((char*) Obj->CmdData, "[SOMA]"))
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008808:	4967      	ldr	r1, [pc, #412]	; (80089a8 <ES_WIFI_WaitServerConnection+0x214>)
 800880a:	4618      	mov	r0, r3
 800880c:	f004 fe39 	bl	800d482 <strstr>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d03b      	beq.n	800888e <ES_WIFI_WaitServerConnection+0xfa>
					&& (strstr((char*) Obj->CmdData, "[EOMA]"))) {
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800881c:	4963      	ldr	r1, [pc, #396]	; (80089ac <ES_WIFI_WaitServerConnection+0x218>)
 800881e:	4618      	mov	r0, r3
 8008820:	f004 fe2f 	bl	800d482 <strstr>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d031      	beq.n	800888e <ES_WIFI_WaitServerConnection+0xfa>
				if (strstr((char*) Obj->CmdData, "Accepted")) {
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008830:	495f      	ldr	r1, [pc, #380]	; (80089b0 <ES_WIFI_WaitServerConnection+0x21c>)
 8008832:	4618      	mov	r0, r3
 8008834:	f004 fe25 	bl	800d482 <strstr>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d127      	bne.n	800888e <ES_WIFI_WaitServerConnection+0xfa>
					//printf("SOMA Accepted\n");
				} else if (!strstr((char*) Obj->CmdData, "[SOMA][EOMA]")) {
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008844:	495b      	ldr	r1, [pc, #364]	; (80089b4 <ES_WIFI_WaitServerConnection+0x220>)
 8008846:	4618      	mov	r0, r3
 8008848:	f004 fe1b 	bl	800d482 <strstr>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d11d      	bne.n	800888e <ES_WIFI_WaitServerConnection+0xfa>
					DEBUG("Bad MR stntax msg %s\n", Obj->CmdData)
 8008852:	f240 62c9 	movw	r2, #1737	; 0x6c9
 8008856:	4958      	ldr	r1, [pc, #352]	; (80089b8 <ES_WIFI_WaitServerConnection+0x224>)
 8008858:	4858      	ldr	r0, [pc, #352]	; (80089bc <ES_WIFI_WaitServerConnection+0x228>)
 800885a:	f004 fc71 	bl	800d140 <iprintf>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008864:	4619      	mov	r1, r3
 8008866:	4856      	ldr	r0, [pc, #344]	; (80089c0 <ES_WIFI_WaitServerConnection+0x22c>)
 8008868:	f004 fc6a 	bl	800d140 <iprintf>
					;
					UNLOCK_WIFI();
					return ES_WIFI_STATUS_ERROR;
 800886c:	2302      	movs	r3, #2
 800886e:	e095      	b.n	800899c <ES_WIFI_WaitServerConnection+0x208>
				}
			}
		} else {
			DEBUG("MR command failed %s\n", Obj->CmdData)
 8008870:	f44f 62da 	mov.w	r2, #1744	; 0x6d0
 8008874:	4950      	ldr	r1, [pc, #320]	; (80089b8 <ES_WIFI_WaitServerConnection+0x224>)
 8008876:	4851      	ldr	r0, [pc, #324]	; (80089bc <ES_WIFI_WaitServerConnection+0x228>)
 8008878:	f004 fc62 	bl	800d140 <iprintf>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008882:	4619      	mov	r1, r3
 8008884:	484f      	ldr	r0, [pc, #316]	; (80089c4 <ES_WIFI_WaitServerConnection+0x230>)
 8008886:	f004 fc5b 	bl	800d140 <iprintf>
			;
			UNLOCK_WIFI();
			return ES_WIFI_STATUS_ERROR;
 800888a:	2302      	movs	r3, #2
 800888c:	e086      	b.n	800899c <ES_WIFI_WaitServerConnection+0x208>
		}
#endif

		memset(Obj->CmdData, 0, sizeof(Obj->CmdData));
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008894:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008898:	2100      	movs	r1, #0
 800889a:	4618      	mov	r0, r3
 800889c:	f004 fb68 	bl	800cf70 <memset>
		sprintf((char*) Obj->CmdData, "P?\r");
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80088a6:	4948      	ldr	r1, [pc, #288]	; (80089c8 <ES_WIFI_WaitServerConnection+0x234>)
 80088a8:	4618      	mov	r0, r3
 80088aa:	f004 fd51 	bl	800d350 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80088ba:	461a      	mov	r2, r3
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f7ff fbe9 	bl	8008094 <AT_ExecuteCommand>
 80088c2:	4603      	mov	r3, r0
 80088c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (ret == ES_WIFI_STATUS_OK) {
 80088c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d13f      	bne.n	8008950 <ES_WIFI_WaitServerConnection+0x1bc>
			if (strncmp((char*) Obj->CmdData, "\r\n0,0.0.0.0,", 12) != 0) {
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80088d6:	220c      	movs	r2, #12
 80088d8:	493c      	ldr	r1, [pc, #240]	; (80089cc <ES_WIFI_WaitServerConnection+0x238>)
 80088da:	4618      	mov	r0, r3
 80088dc:	f004 fdaa 	bl	800d434 <strncmp>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d043      	beq.n	800896e <ES_WIFI_WaitServerConnection+0x1da>
				ptr = strtok((char*) Obj->CmdData + 2, ",");
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80088ec:	3302      	adds	r3, #2
 80088ee:	4938      	ldr	r1, [pc, #224]	; (80089d0 <ES_WIFI_WaitServerConnection+0x23c>)
 80088f0:	4618      	mov	r0, r3
 80088f2:	f004 fddd 	bl	800d4b0 <strtok>
 80088f6:	6178      	str	r0, [r7, #20]
				ptr = strtok(0, ","); //port
 80088f8:	4935      	ldr	r1, [pc, #212]	; (80089d0 <ES_WIFI_WaitServerConnection+0x23c>)
 80088fa:	2000      	movs	r0, #0
 80088fc:	f004 fdd8 	bl	800d4b0 <strtok>
 8008900:	6178      	str	r0, [r7, #20]
				ParseIP((char*) ptr, conn->RemoteIP);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	3306      	adds	r3, #6
 8008906:	4619      	mov	r1, r3
 8008908:	6978      	ldr	r0, [r7, #20]
 800890a:	f7ff fa5c 	bl	8007dc6 <ParseIP>
				ptr = strtok(0, ","); //port
 800890e:	4930      	ldr	r1, [pc, #192]	; (80089d0 <ES_WIFI_WaitServerConnection+0x23c>)
 8008910:	2000      	movs	r0, #0
 8008912:	f004 fdcd 	bl	800d4b0 <strtok>
 8008916:	6178      	str	r0, [r7, #20]
				conn->LocalPort = ParseNumber(ptr, 0);
 8008918:	2100      	movs	r1, #0
 800891a:	6978      	ldr	r0, [r7, #20]
 800891c:	f7ff f9e4 	bl	8007ce8 <ParseNumber>
 8008920:	4603      	mov	r3, r0
 8008922:	b29a      	uxth	r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	809a      	strh	r2, [r3, #4]
				ptr = strtok(0, ","); //ip
 8008928:	4929      	ldr	r1, [pc, #164]	; (80089d0 <ES_WIFI_WaitServerConnection+0x23c>)
 800892a:	2000      	movs	r0, #0
 800892c:	f004 fdc0 	bl	800d4b0 <strtok>
 8008930:	6178      	str	r0, [r7, #20]
				ptr = strtok(0, ","); //remote port
 8008932:	4927      	ldr	r1, [pc, #156]	; (80089d0 <ES_WIFI_WaitServerConnection+0x23c>)
 8008934:	2000      	movs	r0, #0
 8008936:	f004 fdbb 	bl	800d4b0 <strtok>
 800893a:	6178      	str	r0, [r7, #20]
				conn->RemotePort = ParseNumber(ptr, 0);
 800893c:	2100      	movs	r1, #0
 800893e:	6978      	ldr	r0, [r7, #20]
 8008940:	f7ff f9d2 	bl	8007ce8 <ParseNumber>
 8008944:	4603      	mov	r3, r0
 8008946:	b29a      	uxth	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	805a      	strh	r2, [r3, #2]
				UNLOCK_WIFI();
				return ES_WIFI_STATUS_OK;
 800894c:	2300      	movs	r3, #0
 800894e:	e025      	b.n	800899c <ES_WIFI_WaitServerConnection+0x208>
			}
		} else {
			DEBUG("P? command failed %s\n", Obj->CmdData)
 8008950:	f44f 62dd 	mov.w	r2, #1768	; 0x6e8
 8008954:	4918      	ldr	r1, [pc, #96]	; (80089b8 <ES_WIFI_WaitServerConnection+0x224>)
 8008956:	4819      	ldr	r0, [pc, #100]	; (80089bc <ES_WIFI_WaitServerConnection+0x228>)
 8008958:	f004 fbf2 	bl	800d140 <iprintf>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008962:	4619      	mov	r1, r3
 8008964:	481b      	ldr	r0, [pc, #108]	; (80089d4 <ES_WIFI_WaitServerConnection+0x240>)
 8008966:	f004 fbeb 	bl	800d140 <iprintf>
			;
			UNLOCK_WIFI();
			return ES_WIFI_STATUS_ERROR;
 800896a:	2302      	movs	r3, #2
 800896c:	e016      	b.n	800899c <ES_WIFI_WaitServerConnection+0x208>
		}

		UNLOCK_WIFI();
		Obj->fops.IO_Delay(100);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008974:	2064      	movs	r0, #100	; 0x64
 8008976:	4798      	blx	r3
		LOCK_WIFI();
		t = HAL_GetTick();
 8008978:	f7f9 fae0 	bl	8001f3c <HAL_GetTick>
 800897c:	61b8      	str	r0, [r7, #24]
	} while ((timeout == 0) || ((t < tlast) || (t < tstart)));
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	2b00      	cmp	r3, #0
 8008982:	f43f af1d 	beq.w	80087c0 <ES_WIFI_WaitServerConnection+0x2c>
 8008986:	69ba      	ldr	r2, [r7, #24]
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	429a      	cmp	r2, r3
 800898c:	f4ff af18 	bcc.w	80087c0 <ES_WIFI_WaitServerConnection+0x2c>
 8008990:	69ba      	ldr	r2, [r7, #24]
 8008992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008994:	429a      	cmp	r2, r3
 8008996:	f4ff af13 	bcc.w	80087c0 <ES_WIFI_WaitServerConnection+0x2c>
	return ES_WIFI_STATUS_TIMEOUT;
 800899a:	2303      	movs	r3, #3
}
 800899c:	4618      	mov	r0, r3
 800899e:	3728      	adds	r7, #40	; 0x28
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	0800e830 	.word	0x0800e830
 80089a8:	0800e984 	.word	0x0800e984
 80089ac:	0800e98c 	.word	0x0800e98c
 80089b0:	0800e994 	.word	0x0800e994
 80089b4:	0800e9a0 	.word	0x0800e9a0
 80089b8:	0800e9b0 	.word	0x0800e9b0
 80089bc:	0800e9cc 	.word	0x0800e9cc
 80089c0:	0800e9d4 	.word	0x0800e9d4
 80089c4:	0800e9ec 	.word	0x0800e9ec
 80089c8:	0800ea04 	.word	0x0800ea04
 80089cc:	0800ea08 	.word	0x0800ea08
 80089d0:	0800e7f0 	.word	0x0800e7f0
 80089d4:	0800ea18 	.word	0x0800ea18

080089d8 <ES_WIFI_CloseServerConnection>:
 * @brief  Close current server connection.
 * @param  Obj: pointer to module handle
 * @param  socket:  server socket
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, int socket) {
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
	ES_WIFI_Status_t ret;
	LOCK_WIFI();
	sprintf((char*) Obj->CmdData, "P0=%d\r", socket);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80089e8:	683a      	ldr	r2, [r7, #0]
 80089ea:	4925      	ldr	r1, [pc, #148]	; (8008a80 <ES_WIFI_CloseServerConnection+0xa8>)
 80089ec:	4618      	mov	r0, r3
 80089ee:	f004 fcaf 	bl	800d350 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80089fe:	461a      	mov	r2, r3
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f7ff fb47 	bl	8008094 <AT_ExecuteCommand>
 8008a06:	4603      	mov	r3, r0
 8008a08:	73fb      	strb	r3, [r7, #15]
	if (ret != ES_WIFI_STATUS_OK) {
 8008a0a:	7bfb      	ldrb	r3, [r7, #15]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00e      	beq.n	8008a2e <ES_WIFI_CloseServerConnection+0x56>
		DEBUG(" Can not select socket %s\n", Obj->CmdData)
 8008a10:	f240 7202 	movw	r2, #1794	; 0x702
 8008a14:	491b      	ldr	r1, [pc, #108]	; (8008a84 <ES_WIFI_CloseServerConnection+0xac>)
 8008a16:	481c      	ldr	r0, [pc, #112]	; (8008a88 <ES_WIFI_CloseServerConnection+0xb0>)
 8008a18:	f004 fb92 	bl	800d140 <iprintf>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008a22:	4619      	mov	r1, r3
 8008a24:	4819      	ldr	r0, [pc, #100]	; (8008a8c <ES_WIFI_CloseServerConnection+0xb4>)
 8008a26:	f004 fb8b 	bl	800d140 <iprintf>
		;
		UNLOCK_WIFI();
		return ret;
 8008a2a:	7bfb      	ldrb	r3, [r7, #15]
 8008a2c:	e023      	b.n	8008a76 <ES_WIFI_CloseServerConnection+0x9e>
	}

	sprintf((char*) Obj->CmdData, "P5=10\r");
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008a34:	4916      	ldr	r1, [pc, #88]	; (8008a90 <ES_WIFI_CloseServerConnection+0xb8>)
 8008a36:	4618      	mov	r0, r3
 8008a38:	f004 fc8a 	bl	800d350 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008a48:	461a      	mov	r2, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7ff fb22 	bl	8008094 <AT_ExecuteCommand>
 8008a50:	4603      	mov	r3, r0
 8008a52:	73fb      	strb	r3, [r7, #15]
	if (ret != ES_WIFI_STATUS_OK) {
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00c      	beq.n	8008a74 <ES_WIFI_CloseServerConnection+0x9c>
		DEBUG(" Open next failed %s\n", Obj->CmdData)
 8008a5a:	f240 720b 	movw	r2, #1803	; 0x70b
 8008a5e:	4909      	ldr	r1, [pc, #36]	; (8008a84 <ES_WIFI_CloseServerConnection+0xac>)
 8008a60:	4809      	ldr	r0, [pc, #36]	; (8008a88 <ES_WIFI_CloseServerConnection+0xb0>)
 8008a62:	f004 fb6d 	bl	800d140 <iprintf>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	4809      	ldr	r0, [pc, #36]	; (8008a94 <ES_WIFI_CloseServerConnection+0xbc>)
 8008a70:	f004 fb66 	bl	800d140 <iprintf>
		;
	}

	UNLOCK_WIFI();
	return ret;
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	0800e920 	.word	0x0800e920
 8008a84:	0800e9b0 	.word	0x0800e9b0
 8008a88:	0800e9cc 	.word	0x0800e9cc
 8008a8c:	0800ea30 	.word	0x0800ea30
 8008a90:	0800ea4c 	.word	0x0800ea4c
 8008a94:	0800ea54 	.word	0x0800ea54

08008a98 <ES_WIFI_StopServerSingleConn>:
/**
 * @brief  Stop a Server.
 * @param  Obj: pointer to module handle
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, int socket) {
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
	ES_WIFI_Status_t ret;
	LOCK_WIFI();
	sprintf((char*) Obj->CmdData, "P0=%d\r", socket);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008aa8:	683a      	ldr	r2, [r7, #0]
 8008aaa:	4926      	ldr	r1, [pc, #152]	; (8008b44 <ES_WIFI_StopServerSingleConn+0xac>)
 8008aac:	4618      	mov	r0, r3
 8008aae:	f004 fc4f 	bl	800d350 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008abe:	461a      	mov	r2, r3
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f7ff fae7 	bl	8008094 <AT_ExecuteCommand>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	73fb      	strb	r3, [r7, #15]
	if (ret != ES_WIFI_STATUS_OK) {
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00e      	beq.n	8008aee <ES_WIFI_StopServerSingleConn+0x56>
		DEBUG("Selecting socket failed: %s\n", Obj->CmdData)
 8008ad0:	f240 721e 	movw	r2, #1822	; 0x71e
 8008ad4:	491c      	ldr	r1, [pc, #112]	; (8008b48 <ES_WIFI_StopServerSingleConn+0xb0>)
 8008ad6:	481d      	ldr	r0, [pc, #116]	; (8008b4c <ES_WIFI_StopServerSingleConn+0xb4>)
 8008ad8:	f004 fb32 	bl	800d140 <iprintf>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	481a      	ldr	r0, [pc, #104]	; (8008b50 <ES_WIFI_StopServerSingleConn+0xb8>)
 8008ae6:	f004 fb2b 	bl	800d140 <iprintf>
		;
		UNLOCK_WIFI();
		return ret;
 8008aea:	7bfb      	ldrb	r3, [r7, #15]
 8008aec:	e025      	b.n	8008b3a <ES_WIFI_StopServerSingleConn+0xa2>
	}

	sprintf((char*) Obj->CmdData, "P5=0\r");
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008af4:	4917      	ldr	r1, [pc, #92]	; (8008b54 <ES_WIFI_StopServerSingleConn+0xbc>)
 8008af6:	4618      	mov	r0, r3
 8008af8:	f004 fc2a 	bl	800d350 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008b08:	461a      	mov	r2, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f7ff fac2 	bl	8008094 <AT_ExecuteCommand>
 8008b10:	4603      	mov	r3, r0
 8008b12:	73fb      	strb	r3, [r7, #15]
	if (ret != ES_WIFI_STATUS_OK) {
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00e      	beq.n	8008b38 <ES_WIFI_StopServerSingleConn+0xa0>
		DEBUG("Stopping server failed %s\n", Obj->CmdData)
 8008b1a:	f240 7227 	movw	r2, #1831	; 0x727
 8008b1e:	490a      	ldr	r1, [pc, #40]	; (8008b48 <ES_WIFI_StopServerSingleConn+0xb0>)
 8008b20:	480a      	ldr	r0, [pc, #40]	; (8008b4c <ES_WIFI_StopServerSingleConn+0xb4>)
 8008b22:	f004 fb0d 	bl	800d140 <iprintf>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	480a      	ldr	r0, [pc, #40]	; (8008b58 <ES_WIFI_StopServerSingleConn+0xc0>)
 8008b30:	f004 fb06 	bl	800d140 <iprintf>
		;
		UNLOCK_WIFI();
		return ret;
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
 8008b36:	e000      	b.n	8008b3a <ES_WIFI_StopServerSingleConn+0xa2>
	}

	UNLOCK_WIFI();
	return ret;
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	0800e920 	.word	0x0800e920
 8008b48:	0800e9b0 	.word	0x0800e9b0
 8008b4c:	0800e9cc 	.word	0x0800e9cc
 8008b50:	0800ea6c 	.word	0x0800ea6c
 8008b54:	0800ea8c 	.word	0x0800ea8c
 8008b58:	0800ea94 	.word	0x0800ea94

08008b5c <ES_WIFI_SendData>:
 * @param  pdata: pointer to data
 * @param  len : length of the data to be sent
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
		uint8_t *pdata, uint16_t Reqlen, uint16_t *SentLen, uint32_t Timeout) {
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b088      	sub	sp, #32
 8008b60:	af02      	add	r7, sp, #8
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	607a      	str	r2, [r7, #4]
 8008b66:	461a      	mov	r2, r3
 8008b68:	460b      	mov	r3, r1
 8008b6a:	72fb      	strb	r3, [r7, #11]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	813b      	strh	r3, [r7, #8]
	uint32_t wkgTimeOut;

	ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8008b70:	2302      	movs	r3, #2
 8008b72:	74fb      	strb	r3, [r7, #19]

	if (Timeout == 0) {
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d102      	bne.n	8008b80 <ES_WIFI_SendData+0x24>
		wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	617b      	str	r3, [r7, #20]
 8008b7e:	e001      	b.n	8008b84 <ES_WIFI_SendData+0x28>
	} else {
		wkgTimeOut = Timeout;
 8008b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b82:	617b      	str	r3, [r7, #20]
	}

	LOCK_WIFI();
	if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 8008b84:	893b      	ldrh	r3, [r7, #8]
 8008b86:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8008b8a:	d302      	bcc.n	8008b92 <ES_WIFI_SendData+0x36>
		Reqlen = ES_WIFI_PAYLOAD_SIZE;
 8008b8c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008b90:	813b      	strh	r3, [r7, #8]

	*SentLen = Reqlen;
 8008b92:	6a3b      	ldr	r3, [r7, #32]
 8008b94:	893a      	ldrh	r2, [r7, #8]
 8008b96:	801a      	strh	r2, [r3, #0]
	sprintf((char*) Obj->CmdData, "P0=%d\r", Socket);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008b9e:	7afa      	ldrb	r2, [r7, #11]
 8008ba0:	4942      	ldr	r1, [pc, #264]	; (8008cac <ES_WIFI_SendData+0x150>)
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f004 fbd4 	bl	800d350 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f7ff fa6c 	bl	8008094 <AT_ExecuteCommand>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	74fb      	strb	r3, [r7, #19]
	if (ret == ES_WIFI_STATUS_OK) {
 8008bc0:	7cfb      	ldrb	r3, [r7, #19]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d15e      	bne.n	8008c84 <ES_WIFI_SendData+0x128>
		sprintf((char*) Obj->CmdData, "S2=%lu\r", wkgTimeOut);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008bcc:	697a      	ldr	r2, [r7, #20]
 8008bce:	4938      	ldr	r1, [pc, #224]	; (8008cb0 <ES_WIFI_SendData+0x154>)
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f004 fbbd 	bl	800d350 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008be2:	461a      	mov	r2, r3
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f7ff fa55 	bl	8008094 <AT_ExecuteCommand>
 8008bea:	4603      	mov	r3, r0
 8008bec:	74fb      	strb	r3, [r7, #19]

		if (ret == ES_WIFI_STATUS_OK) {
 8008bee:	7cfb      	ldrb	r3, [r7, #19]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d13d      	bne.n	8008c70 <ES_WIFI_SendData+0x114>
			sprintf((char*) Obj->CmdData, "S3=%04d\r", Reqlen);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008bfa:	893a      	ldrh	r2, [r7, #8]
 8008bfc:	492d      	ldr	r1, [pc, #180]	; (8008cb4 <ES_WIFI_SendData+0x158>)
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f004 fba6 	bl	800d350 <siprintf>
			ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen,
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f503 7194 	add.w	r1, r3, #296	; 0x128
					Obj->CmdData);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f503 7394 	add.w	r3, r3, #296	; 0x128
			ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen,
 8008c10:	893a      	ldrh	r2, [r7, #8]
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	4613      	mov	r3, r2
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f7ff faa1 	bl	8008160 <AT_RequestSendData>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	74fb      	strb	r3, [r7, #19]

			if (ret == ES_WIFI_STATUS_OK) {
 8008c22:	7cfb      	ldrb	r3, [r7, #19]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d119      	bne.n	8008c5c <ES_WIFI_SendData+0x100>
				if (strstr((char*) Obj->CmdData, "-1\r\n")) {
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008c2e:	4922      	ldr	r1, [pc, #136]	; (8008cb8 <ES_WIFI_SendData+0x15c>)
 8008c30:	4618      	mov	r0, r3
 8008c32:	f004 fc26 	bl	800d482 <strstr>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d02c      	beq.n	8008c96 <ES_WIFI_SendData+0x13a>
					DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData)
 8008c3c:	f240 72c7 	movw	r2, #1991	; 0x7c7
 8008c40:	491e      	ldr	r1, [pc, #120]	; (8008cbc <ES_WIFI_SendData+0x160>)
 8008c42:	481f      	ldr	r0, [pc, #124]	; (8008cc0 <ES_WIFI_SendData+0x164>)
 8008c44:	f004 fa7c 	bl	800d140 <iprintf>
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008c4e:	4619      	mov	r1, r3
 8008c50:	481c      	ldr	r0, [pc, #112]	; (8008cc4 <ES_WIFI_SendData+0x168>)
 8008c52:	f004 fa75 	bl	800d140 <iprintf>
					;
					ret = ES_WIFI_STATUS_ERROR;
 8008c56:	2302      	movs	r3, #2
 8008c58:	74fb      	strb	r3, [r7, #19]
 8008c5a:	e01c      	b.n	8008c96 <ES_WIFI_SendData+0x13a>
				}
			} else {
				DEBUG("Send Data command failed\n")
 8008c5c:	f240 72cc 	movw	r2, #1996	; 0x7cc
 8008c60:	4916      	ldr	r1, [pc, #88]	; (8008cbc <ES_WIFI_SendData+0x160>)
 8008c62:	4817      	ldr	r0, [pc, #92]	; (8008cc0 <ES_WIFI_SendData+0x164>)
 8008c64:	f004 fa6c 	bl	800d140 <iprintf>
 8008c68:	4817      	ldr	r0, [pc, #92]	; (8008cc8 <ES_WIFI_SendData+0x16c>)
 8008c6a:	f004 faef 	bl	800d24c <puts>
 8008c6e:	e012      	b.n	8008c96 <ES_WIFI_SendData+0x13a>
				;
			}
		} else {
			DEBUG("S2 command failed\n")
 8008c70:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008c74:	4911      	ldr	r1, [pc, #68]	; (8008cbc <ES_WIFI_SendData+0x160>)
 8008c76:	4812      	ldr	r0, [pc, #72]	; (8008cc0 <ES_WIFI_SendData+0x164>)
 8008c78:	f004 fa62 	bl	800d140 <iprintf>
 8008c7c:	4813      	ldr	r0, [pc, #76]	; (8008ccc <ES_WIFI_SendData+0x170>)
 8008c7e:	f004 fae5 	bl	800d24c <puts>
 8008c82:	e008      	b.n	8008c96 <ES_WIFI_SendData+0x13a>
			;
		}
	} else {
		DEBUG("P0 command failed\n")
 8008c84:	f240 72d4 	movw	r2, #2004	; 0x7d4
 8008c88:	490c      	ldr	r1, [pc, #48]	; (8008cbc <ES_WIFI_SendData+0x160>)
 8008c8a:	480d      	ldr	r0, [pc, #52]	; (8008cc0 <ES_WIFI_SendData+0x164>)
 8008c8c:	f004 fa58 	bl	800d140 <iprintf>
 8008c90:	480f      	ldr	r0, [pc, #60]	; (8008cd0 <ES_WIFI_SendData+0x174>)
 8008c92:	f004 fadb 	bl	800d24c <puts>
		;
	}

	if (ret == ES_WIFI_STATUS_ERROR) {
 8008c96:	7cfb      	ldrb	r3, [r7, #19]
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d102      	bne.n	8008ca2 <ES_WIFI_SendData+0x146>
		*SentLen = 0;
 8008c9c:	6a3b      	ldr	r3, [r7, #32]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	801a      	strh	r2, [r3, #0]
	}UNLOCK_WIFI();
	return ret;
 8008ca2:	7cfb      	ldrb	r3, [r7, #19]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3718      	adds	r7, #24
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	0800e920 	.word	0x0800e920
 8008cb0:	0800ead8 	.word	0x0800ead8
 8008cb4:	0800eae0 	.word	0x0800eae0
 8008cb8:	0800eaec 	.word	0x0800eaec
 8008cbc:	0800e9b0 	.word	0x0800e9b0
 8008cc0:	0800e9cc 	.word	0x0800e9cc
 8008cc4:	0800eaf4 	.word	0x0800eaf4
 8008cc8:	0800eb10 	.word	0x0800eb10
 8008ccc:	0800eb2c 	.word	0x0800eb2c
 8008cd0:	0800eb40 	.word	0x0800eb40

08008cd4 <ES_WIFI_ReceiveData>:
 * @param  len : pointer to the length of the data to be received
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket,
		uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen,
		uint32_t Timeout) {
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b088      	sub	sp, #32
 8008cd8:	af02      	add	r7, sp, #8
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	607a      	str	r2, [r7, #4]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	72fb      	strb	r3, [r7, #11]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	813b      	strh	r3, [r7, #8]
	uint32_t wkgTimeOut;

	ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8008ce8:	2302      	movs	r3, #2
 8008cea:	74fb      	strb	r3, [r7, #19]

	if (Timeout == 0) {
 8008cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d102      	bne.n	8008cf8 <ES_WIFI_ReceiveData+0x24>
		wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	617b      	str	r3, [r7, #20]
 8008cf6:	e001      	b.n	8008cfc <ES_WIFI_ReceiveData+0x28>
	} else {
		wkgTimeOut = Timeout;
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfa:	617b      	str	r3, [r7, #20]
	}

	LOCK_WIFI();

	if (Reqlen <= ES_WIFI_PAYLOAD_SIZE) {
 8008cfc:	893b      	ldrh	r3, [r7, #8]
 8008cfe:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8008d02:	f200 808b 	bhi.w	8008e1c <ES_WIFI_ReceiveData+0x148>
		sprintf((char*) Obj->CmdData, "P0=%d\r", Socket);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008d0c:	7afa      	ldrb	r2, [r7, #11]
 8008d0e:	4946      	ldr	r1, [pc, #280]	; (8008e28 <ES_WIFI_ReceiveData+0x154>)
 8008d10:	4618      	mov	r0, r3
 8008d12:	f004 fb1d 	bl	800d350 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008d22:	461a      	mov	r2, r3
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f7ff f9b5 	bl	8008094 <AT_ExecuteCommand>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	74fb      	strb	r3, [r7, #19]

		if (ret == ES_WIFI_STATUS_OK) {
 8008d2e:	7cfb      	ldrb	r3, [r7, #19]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d165      	bne.n	8008e00 <ES_WIFI_ReceiveData+0x12c>
			sprintf((char*) Obj->CmdData, "R1=%d\r", Reqlen);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008d3a:	893a      	ldrh	r2, [r7, #8]
 8008d3c:	493b      	ldr	r1, [pc, #236]	; (8008e2c <ES_WIFI_ReceiveData+0x158>)
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f004 fb06 	bl	800d350 <siprintf>
			ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008d50:	461a      	mov	r2, r3
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f7ff f99e 	bl	8008094 <AT_ExecuteCommand>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	74fb      	strb	r3, [r7, #19]
			if (ret == ES_WIFI_STATUS_OK) {
 8008d5c:	7cfb      	ldrb	r3, [r7, #19]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d141      	bne.n	8008de6 <ES_WIFI_ReceiveData+0x112>
				sprintf((char*) Obj->CmdData, "R2=%lu\r", wkgTimeOut);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	4931      	ldr	r1, [pc, #196]	; (8008e30 <ES_WIFI_ReceiveData+0x15c>)
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f004 faef 	bl	800d350 <siprintf>
				ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008d7e:	461a      	mov	r2, r3
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	f7ff f987 	bl	8008094 <AT_ExecuteCommand>
 8008d86:	4603      	mov	r3, r0
 8008d88:	74fb      	strb	r3, [r7, #19]
				if (ret == ES_WIFI_STATUS_OK) {
 8008d8a:	7cfb      	ldrb	r3, [r7, #19]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d120      	bne.n	8008dd2 <ES_WIFI_ReceiveData+0xfe>
					sprintf((char*) Obj->CmdData, "R0\r");
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008d96:	4927      	ldr	r1, [pc, #156]	; (8008e34 <ES_WIFI_ReceiveData+0x160>)
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f004 fad9 	bl	800d350 <siprintf>
					ret = AT_RequestReceiveData(Obj, Obj->CmdData,
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008da4:	893a      	ldrh	r2, [r7, #8]
 8008da6:	6a3b      	ldr	r3, [r7, #32]
 8008da8:	9300      	str	r3, [sp, #0]
 8008daa:	4613      	mov	r3, r2
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f7ff fa4c 	bl	800824c <AT_RequestReceiveData>
 8008db4:	4603      	mov	r3, r0
 8008db6:	74fb      	strb	r3, [r7, #19]
							(char*) pdata, Reqlen, Receivedlen);
					if (ret != ES_WIFI_STATUS_OK) {
 8008db8:	7cfb      	ldrb	r3, [r7, #19]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d02e      	beq.n	8008e1c <ES_WIFI_ReceiveData+0x148>
						DEBUG("AT_RequestReceiveData  failed\n")
 8008dbe:	f44f 6205 	mov.w	r2, #2128	; 0x850
 8008dc2:	491d      	ldr	r1, [pc, #116]	; (8008e38 <ES_WIFI_ReceiveData+0x164>)
 8008dc4:	481d      	ldr	r0, [pc, #116]	; (8008e3c <ES_WIFI_ReceiveData+0x168>)
 8008dc6:	f004 f9bb 	bl	800d140 <iprintf>
 8008dca:	481d      	ldr	r0, [pc, #116]	; (8008e40 <ES_WIFI_ReceiveData+0x16c>)
 8008dcc:	f004 fa3e 	bl	800d24c <puts>
 8008dd0:	e024      	b.n	8008e1c <ES_WIFI_ReceiveData+0x148>
						;
					}
				} else {
					DEBUG("setting timeout failed\n")
 8008dd2:	f640 0254 	movw	r2, #2132	; 0x854
 8008dd6:	4918      	ldr	r1, [pc, #96]	; (8008e38 <ES_WIFI_ReceiveData+0x164>)
 8008dd8:	4818      	ldr	r0, [pc, #96]	; (8008e3c <ES_WIFI_ReceiveData+0x168>)
 8008dda:	f004 f9b1 	bl	800d140 <iprintf>
 8008dde:	4819      	ldr	r0, [pc, #100]	; (8008e44 <ES_WIFI_ReceiveData+0x170>)
 8008de0:	f004 fa34 	bl	800d24c <puts>
 8008de4:	e01a      	b.n	8008e1c <ES_WIFI_ReceiveData+0x148>
					;
				}
			} else {
				DEBUG("setting requested len failed\n")
 8008de6:	f640 0258 	movw	r2, #2136	; 0x858
 8008dea:	4913      	ldr	r1, [pc, #76]	; (8008e38 <ES_WIFI_ReceiveData+0x164>)
 8008dec:	4813      	ldr	r0, [pc, #76]	; (8008e3c <ES_WIFI_ReceiveData+0x168>)
 8008dee:	f004 f9a7 	bl	800d140 <iprintf>
 8008df2:	4815      	ldr	r0, [pc, #84]	; (8008e48 <ES_WIFI_ReceiveData+0x174>)
 8008df4:	f004 fa2a 	bl	800d24c <puts>
				;
				*Receivedlen = 0;
 8008df8:	6a3b      	ldr	r3, [r7, #32]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	801a      	strh	r2, [r3, #0]
 8008dfe:	e00d      	b.n	8008e1c <ES_WIFI_ReceiveData+0x148>
			}
		} else {
			DEBUG("setting socket for read failed\n")
 8008e00:	f640 025d 	movw	r2, #2141	; 0x85d
 8008e04:	490c      	ldr	r1, [pc, #48]	; (8008e38 <ES_WIFI_ReceiveData+0x164>)
 8008e06:	480d      	ldr	r0, [pc, #52]	; (8008e3c <ES_WIFI_ReceiveData+0x168>)
 8008e08:	f004 f99a 	bl	800d140 <iprintf>
 8008e0c:	480f      	ldr	r0, [pc, #60]	; (8008e4c <ES_WIFI_ReceiveData+0x178>)
 8008e0e:	f004 fa1d 	bl	800d24c <puts>
			;
			issue15++;
 8008e12:	4b0f      	ldr	r3, [pc, #60]	; (8008e50 <ES_WIFI_ReceiveData+0x17c>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3301      	adds	r3, #1
 8008e18:	4a0d      	ldr	r2, [pc, #52]	; (8008e50 <ES_WIFI_ReceiveData+0x17c>)
 8008e1a:	6013      	str	r3, [r2, #0]
		}
	}UNLOCK_WIFI();
	return ret;
 8008e1c:	7cfb      	ldrb	r3, [r7, #19]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3718      	adds	r7, #24
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	0800e920 	.word	0x0800e920
 8008e2c:	0800eb64 	.word	0x0800eb64
 8008e30:	0800eb6c 	.word	0x0800eb6c
 8008e34:	0800eb74 	.word	0x0800eb74
 8008e38:	0800e9b0 	.word	0x0800e9b0
 8008e3c:	0800e9cc 	.word	0x0800e9cc
 8008e40:	0800eb78 	.word	0x0800eb78
 8008e44:	0800eb98 	.word	0x0800eb98
 8008e48:	0800ebb0 	.word	0x0800ebb0
 8008e4c:	0800ebd0 	.word	0x0800ebd0
 8008e50:	20001070 	.word	0x20001070

08008e54 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b08c      	sub	sp, #48	; 0x30
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8008e5c:	4b57      	ldr	r3, [pc, #348]	; (8008fbc <SPI_WIFI_MspInit+0x168>)
 8008e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e60:	4a56      	ldr	r2, [pc, #344]	; (8008fbc <SPI_WIFI_MspInit+0x168>)
 8008e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e66:	6593      	str	r3, [r2, #88]	; 0x58
 8008e68:	4b54      	ldr	r3, [pc, #336]	; (8008fbc <SPI_WIFI_MspInit+0x168>)
 8008e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e70:	61bb      	str	r3, [r7, #24]
 8008e72:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e74:	4b51      	ldr	r3, [pc, #324]	; (8008fbc <SPI_WIFI_MspInit+0x168>)
 8008e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e78:	4a50      	ldr	r2, [pc, #320]	; (8008fbc <SPI_WIFI_MspInit+0x168>)
 8008e7a:	f043 0302 	orr.w	r3, r3, #2
 8008e7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e80:	4b4e      	ldr	r3, [pc, #312]	; (8008fbc <SPI_WIFI_MspInit+0x168>)
 8008e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e84:	f003 0302 	and.w	r3, r3, #2
 8008e88:	617b      	str	r3, [r7, #20]
 8008e8a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e8c:	4b4b      	ldr	r3, [pc, #300]	; (8008fbc <SPI_WIFI_MspInit+0x168>)
 8008e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e90:	4a4a      	ldr	r2, [pc, #296]	; (8008fbc <SPI_WIFI_MspInit+0x168>)
 8008e92:	f043 0304 	orr.w	r3, r3, #4
 8008e96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e98:	4b48      	ldr	r3, [pc, #288]	; (8008fbc <SPI_WIFI_MspInit+0x168>)
 8008e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e9c:	f003 0304 	and.w	r3, r3, #4
 8008ea0:	613b      	str	r3, [r7, #16]
 8008ea2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008ea4:	4b45      	ldr	r3, [pc, #276]	; (8008fbc <SPI_WIFI_MspInit+0x168>)
 8008ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ea8:	4a44      	ldr	r2, [pc, #272]	; (8008fbc <SPI_WIFI_MspInit+0x168>)
 8008eaa:	f043 0310 	orr.w	r3, r3, #16
 8008eae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008eb0:	4b42      	ldr	r3, [pc, #264]	; (8008fbc <SPI_WIFI_MspInit+0x168>)
 8008eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eb4:	f003 0310 	and.w	r3, r3, #16
 8008eb8:	60fb      	str	r3, [r7, #12]
 8008eba:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008ec2:	483f      	ldr	r0, [pc, #252]	; (8008fc0 <SPI_WIFI_MspInit+0x16c>)
 8008ec4:	f7f9 fd8e 	bl	80029e4 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8008ec8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ecc:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8008eda:	f107 031c 	add.w	r3, r7, #28
 8008ede:	4619      	mov	r1, r3
 8008ee0:	4837      	ldr	r0, [pc, #220]	; (8008fc0 <SPI_WIFI_MspInit+0x16c>)
 8008ee2:	f7f9 fac9 	bl	8002478 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8008ee6:	2302      	movs	r3, #2
 8008ee8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8008eea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8008eee:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8008ef8:	f107 031c 	add.w	r3, r7, #28
 8008efc:	4619      	mov	r1, r3
 8008efe:	4831      	ldr	r0, [pc, #196]	; (8008fc4 <SPI_WIFI_MspInit+0x170>)
 8008f00:	f7f9 faba 	bl	8002478 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8008f04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f08:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8008f12:	2300      	movs	r3, #0
 8008f14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 8008f16:	2300      	movs	r3, #0
 8008f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8008f1a:	f107 031c 	add.w	r3, r7, #28
 8008f1e:	4619      	mov	r1, r3
 8008f20:	4828      	ldr	r0, [pc, #160]	; (8008fc4 <SPI_WIFI_MspInit+0x170>)
 8008f22:	f7f9 faa9 	bl	8002478 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8008f26:	2201      	movs	r2, #1
 8008f28:	2101      	movs	r1, #1
 8008f2a:	4826      	ldr	r0, [pc, #152]	; (8008fc4 <SPI_WIFI_MspInit+0x170>)
 8008f2c:	f7f9 fd5a 	bl	80029e4 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8008f30:	2301      	movs	r3, #1
 8008f32:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8008f34:	2301      	movs	r3, #1
 8008f36:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8008f40:	f107 031c 	add.w	r3, r7, #28
 8008f44:	4619      	mov	r1, r3
 8008f46:	481f      	ldr	r0, [pc, #124]	; (8008fc4 <SPI_WIFI_MspInit+0x170>)
 8008f48:	f7f9 fa96 	bl	8002478 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8008f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f50:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8008f52:	2302      	movs	r3, #2
 8008f54:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008f56:	2300      	movs	r3, #0
 8008f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8008f5e:	2306      	movs	r3, #6
 8008f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8008f62:	f107 031c 	add.w	r3, r7, #28
 8008f66:	4619      	mov	r1, r3
 8008f68:	4817      	ldr	r0, [pc, #92]	; (8008fc8 <SPI_WIFI_MspInit+0x174>)
 8008f6a:	f7f9 fa85 	bl	8002478 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8008f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f72:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8008f74:	2302      	movs	r3, #2
 8008f76:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8008f80:	2306      	movs	r3, #6
 8008f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8008f84:	f107 031c 	add.w	r3, r7, #28
 8008f88:	4619      	mov	r1, r3
 8008f8a:	480f      	ldr	r0, [pc, #60]	; (8008fc8 <SPI_WIFI_MspInit+0x174>)
 8008f8c:	f7f9 fa74 	bl	8002478 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8008f90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f94:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8008f96:	2302      	movs	r3, #2
 8008f98:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8008fa2:	2306      	movs	r3, #6
 8008fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8008fa6:	f107 031c 	add.w	r3, r7, #28
 8008faa:	4619      	mov	r1, r3
 8008fac:	4806      	ldr	r0, [pc, #24]	; (8008fc8 <SPI_WIFI_MspInit+0x174>)
 8008fae:	f7f9 fa63 	bl	8002478 <HAL_GPIO_Init>
}
 8008fb2:	bf00      	nop
 8008fb4:	3730      	adds	r7, #48	; 0x30
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	40021000 	.word	0x40021000
 8008fc0:	48000400 	.word	0x48000400
 8008fc4:	48001000 	.word	0x48001000
 8008fc8:	48000800 	.word	0x48000800

08008fcc <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 8008fda:	88fb      	ldrh	r3, [r7, #6]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d145      	bne.n	800906c <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8008fe0:	4b27      	ldr	r3, [pc, #156]	; (8009080 <SPI_WIFI_Init+0xb4>)
 8008fe2:	4a28      	ldr	r2, [pc, #160]	; (8009084 <SPI_WIFI_Init+0xb8>)
 8008fe4:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8008fe6:	4826      	ldr	r0, [pc, #152]	; (8009080 <SPI_WIFI_Init+0xb4>)
 8008fe8:	f7ff ff34 	bl	8008e54 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8008fec:	4b24      	ldr	r3, [pc, #144]	; (8009080 <SPI_WIFI_Init+0xb4>)
 8008fee:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008ff2:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8008ff4:	4b22      	ldr	r3, [pc, #136]	; (8009080 <SPI_WIFI_Init+0xb4>)
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8008ffa:	4b21      	ldr	r3, [pc, #132]	; (8009080 <SPI_WIFI_Init+0xb4>)
 8008ffc:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8009000:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8009002:	4b1f      	ldr	r3, [pc, #124]	; (8009080 <SPI_WIFI_Init+0xb4>)
 8009004:	2200      	movs	r2, #0
 8009006:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8009008:	4b1d      	ldr	r3, [pc, #116]	; (8009080 <SPI_WIFI_Init+0xb4>)
 800900a:	2200      	movs	r2, #0
 800900c:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 800900e:	4b1c      	ldr	r3, [pc, #112]	; (8009080 <SPI_WIFI_Init+0xb4>)
 8009010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009014:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8009016:	4b1a      	ldr	r3, [pc, #104]	; (8009080 <SPI_WIFI_Init+0xb4>)
 8009018:	2210      	movs	r2, #16
 800901a:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800901c:	4b18      	ldr	r3, [pc, #96]	; (8009080 <SPI_WIFI_Init+0xb4>)
 800901e:	2200      	movs	r2, #0
 8009020:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8009022:	4b17      	ldr	r3, [pc, #92]	; (8009080 <SPI_WIFI_Init+0xb4>)
 8009024:	2200      	movs	r2, #0
 8009026:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8009028:	4b15      	ldr	r3, [pc, #84]	; (8009080 <SPI_WIFI_Init+0xb4>)
 800902a:	2200      	movs	r2, #0
 800902c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 800902e:	4b14      	ldr	r3, [pc, #80]	; (8009080 <SPI_WIFI_Init+0xb4>)
 8009030:	2200      	movs	r2, #0
 8009032:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8009034:	4812      	ldr	r0, [pc, #72]	; (8009080 <SPI_WIFI_Init+0xb4>)
 8009036:	f7fb fbb1 	bl	800479c <HAL_SPI_Init>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d002      	beq.n	8009046 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8009040:	f04f 33ff 	mov.w	r3, #4294967295
 8009044:	e018      	b.n	8009078 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8009046:	2200      	movs	r2, #0
 8009048:	2100      	movs	r1, #0
 800904a:	2007      	movs	r0, #7
 800904c:	f7f9 f85e 	bl	800210c <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8009050:	2007      	movs	r0, #7
 8009052:	f7f9 f877 	bl	8002144 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8009056:	2200      	movs	r2, #0
 8009058:	2100      	movs	r1, #0
 800905a:	2033      	movs	r0, #51	; 0x33
 800905c:	f7f9 f856 	bl	800210c <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8009060:	2033      	movs	r0, #51	; 0x33
 8009062:	f7f9 f86f 	bl	8002144 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8009066:	200a      	movs	r0, #10
 8009068:	f000 f9fe 	bl	8009468 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 800906c:	f000 f80c 	bl	8009088 <SPI_WIFI_ResetModule>
 8009070:	4603      	mov	r3, r0
 8009072:	73fb      	strb	r3, [r7, #15]

  return rc;
 8009074:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	20001074 	.word	0x20001074
 8009084:	40003c00 	.word	0x40003c00

08009088 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800908e:	f7f8 ff55 	bl	8001f3c <HAL_GetTick>
 8009092:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8009094:	2300      	movs	r3, #0
 8009096:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8009098:	2200      	movs	r2, #0
 800909a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800909e:	4830      	ldr	r0, [pc, #192]	; (8009160 <SPI_WIFI_ResetModule+0xd8>)
 80090a0:	f7f9 fca0 	bl	80029e4 <HAL_GPIO_WritePin>
 80090a4:	200a      	movs	r0, #10
 80090a6:	f7f8 ff55 	bl	8001f54 <HAL_Delay>
 80090aa:	2201      	movs	r2, #1
 80090ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80090b0:	482b      	ldr	r0, [pc, #172]	; (8009160 <SPI_WIFI_ResetModule+0xd8>)
 80090b2:	f7f9 fc97 	bl	80029e4 <HAL_GPIO_WritePin>
 80090b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80090ba:	f7f8 ff4b 	bl	8001f54 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 80090be:	2200      	movs	r2, #0
 80090c0:	2101      	movs	r1, #1
 80090c2:	4827      	ldr	r0, [pc, #156]	; (8009160 <SPI_WIFI_ResetModule+0xd8>)
 80090c4:	f7f9 fc8e 	bl	80029e4 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80090c8:	200f      	movs	r0, #15
 80090ca:	f000 f9cd 	bl	8009468 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 80090ce:	e020      	b.n	8009112 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 80090d0:	7bfb      	ldrb	r3, [r7, #15]
 80090d2:	463a      	mov	r2, r7
 80090d4:	18d1      	adds	r1, r2, r3
 80090d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80090da:	2201      	movs	r2, #1
 80090dc:	4821      	ldr	r0, [pc, #132]	; (8009164 <SPI_WIFI_ResetModule+0xdc>)
 80090de:	f7fb fc28 	bl	8004932 <HAL_SPI_Receive>
 80090e2:	4603      	mov	r3, r0
 80090e4:	71fb      	strb	r3, [r7, #7]
    count += 2;
 80090e6:	7bfb      	ldrb	r3, [r7, #15]
 80090e8:	3302      	adds	r3, #2
 80090ea:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 80090ec:	f7f8 ff26 	bl	8001f3c <HAL_GetTick>
 80090f0:	4602      	mov	r2, r0
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	1ad3      	subs	r3, r2, r3
 80090f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090fa:	d202      	bcs.n	8009102 <SPI_WIFI_ResetModule+0x7a>
 80090fc:	79fb      	ldrb	r3, [r7, #7]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d007      	beq.n	8009112 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 8009102:	2201      	movs	r2, #1
 8009104:	2101      	movs	r1, #1
 8009106:	4816      	ldr	r0, [pc, #88]	; (8009160 <SPI_WIFI_ResetModule+0xd8>)
 8009108:	f7f9 fc6c 	bl	80029e4 <HAL_GPIO_WritePin>
      return -1;
 800910c:	f04f 33ff 	mov.w	r3, #4294967295
 8009110:	e021      	b.n	8009156 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8009112:	2102      	movs	r1, #2
 8009114:	4812      	ldr	r0, [pc, #72]	; (8009160 <SPI_WIFI_ResetModule+0xd8>)
 8009116:	f7f9 fc4d 	bl	80029b4 <HAL_GPIO_ReadPin>
 800911a:	4603      	mov	r3, r0
 800911c:	2b01      	cmp	r3, #1
 800911e:	d0d7      	beq.n	80090d0 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 8009120:	2201      	movs	r2, #1
 8009122:	2101      	movs	r1, #1
 8009124:	480e      	ldr	r0, [pc, #56]	; (8009160 <SPI_WIFI_ResetModule+0xd8>)
 8009126:	f7f9 fc5d 	bl	80029e4 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800912a:	783b      	ldrb	r3, [r7, #0]
 800912c:	2b15      	cmp	r3, #21
 800912e:	d10e      	bne.n	800914e <SPI_WIFI_ResetModule+0xc6>
 8009130:	787b      	ldrb	r3, [r7, #1]
 8009132:	2b15      	cmp	r3, #21
 8009134:	d10b      	bne.n	800914e <SPI_WIFI_ResetModule+0xc6>
 8009136:	78bb      	ldrb	r3, [r7, #2]
 8009138:	2b0d      	cmp	r3, #13
 800913a:	d108      	bne.n	800914e <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800913c:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800913e:	2b0a      	cmp	r3, #10
 8009140:	d105      	bne.n	800914e <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8009142:	793b      	ldrb	r3, [r7, #4]
 8009144:	2b3e      	cmp	r3, #62	; 0x3e
 8009146:	d102      	bne.n	800914e <SPI_WIFI_ResetModule+0xc6>
 8009148:	797b      	ldrb	r3, [r7, #5]
 800914a:	2b20      	cmp	r3, #32
 800914c:	d002      	beq.n	8009154 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 800914e:	f04f 33ff 	mov.w	r3, #4294967295
 8009152:	e000      	b.n	8009156 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	48001000 	.word	0x48001000
 8009164:	20001074 	.word	0x20001074

08009168 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 800916c:	4802      	ldr	r0, [pc, #8]	; (8009178 <SPI_WIFI_DeInit+0x10>)
 800916e:	f7fb fbb8 	bl	80048e2 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	bd80      	pop	{r7, pc}
 8009178:	20001074 	.word	0x20001074

0800917c <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8009184:	f7f8 feda 	bl	8001f3c <HAL_GetTick>
 8009188:	4603      	mov	r3, r0
 800918a:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 800918c:	e00a      	b.n	80091a4 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800918e:	f7f8 fed5 	bl	8001f3c <HAL_GetTick>
 8009192:	4602      	mov	r2, r0
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	1ad2      	subs	r2, r2, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	429a      	cmp	r2, r3
 800919c:	d902      	bls.n	80091a4 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800919e:	f04f 33ff 	mov.w	r3, #4294967295
 80091a2:	e007      	b.n	80091b4 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 80091a4:	2102      	movs	r1, #2
 80091a6:	4805      	ldr	r0, [pc, #20]	; (80091bc <wait_cmddata_rdy_high+0x40>)
 80091a8:	f7f9 fc04 	bl	80029b4 <HAL_GPIO_ReadPin>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d1ed      	bne.n	800918e <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3710      	adds	r7, #16
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	48001000 	.word	0x48001000

080091c0 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80091c8:	f7f8 feb8 	bl	8001f3c <HAL_GetTick>
 80091cc:	4603      	mov	r3, r0
 80091ce:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 80091d0:	e00a      	b.n	80091e8 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80091d2:	f7f8 feb3 	bl	8001f3c <HAL_GetTick>
 80091d6:	4602      	mov	r2, r0
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	1ad2      	subs	r2, r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d902      	bls.n	80091e8 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 80091e2:	f04f 33ff 	mov.w	r3, #4294967295
 80091e6:	e004      	b.n	80091f2 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 80091e8:	4b04      	ldr	r3, [pc, #16]	; (80091fc <wait_cmddata_rdy_rising_event+0x3c>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d0f0      	beq.n	80091d2 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 80091f0:	2300      	movs	r3, #0
#endif
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	200010e0 	.word	0x200010e0

08009200 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8009208:	f7f8 fe98 	bl	8001f3c <HAL_GetTick>
 800920c:	4603      	mov	r3, r0
 800920e:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 8009210:	e00a      	b.n	8009228 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8009212:	f7f8 fe93 	bl	8001f3c <HAL_GetTick>
 8009216:	4602      	mov	r2, r0
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	1ad2      	subs	r2, r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	429a      	cmp	r2, r3
 8009220:	d902      	bls.n	8009228 <wait_spi_rx_event+0x28>
    {
      return -1;
 8009222:	f04f 33ff 	mov.w	r3, #4294967295
 8009226:	e004      	b.n	8009232 <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 8009228:	4b04      	ldr	r3, [pc, #16]	; (800923c <wait_spi_rx_event+0x3c>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d0f0      	beq.n	8009212 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8009230:	2300      	movs	r3, #0
#endif
}
 8009232:	4618      	mov	r0, r3
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	200010d8 	.word	0x200010d8

08009240 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8009248:	f7f8 fe78 	bl	8001f3c <HAL_GetTick>
 800924c:	4603      	mov	r3, r0
 800924e:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 8009250:	e00a      	b.n	8009268 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8009252:	f7f8 fe73 	bl	8001f3c <HAL_GetTick>
 8009256:	4602      	mov	r2, r0
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	1ad2      	subs	r2, r2, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	429a      	cmp	r2, r3
 8009260:	d902      	bls.n	8009268 <wait_spi_tx_event+0x28>
    {
      return -1;
 8009262:	f04f 33ff 	mov.w	r3, #4294967295
 8009266:	e004      	b.n	8009272 <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 8009268:	4b04      	ldr	r3, [pc, #16]	; (800927c <wait_spi_tx_event+0x3c>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d0f0      	beq.n	8009252 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8009270:	2300      	movs	r3, #0
#endif
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	200010dc 	.word	0x200010dc

08009280 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	460b      	mov	r3, r1
 800928a:	607a      	str	r2, [r7, #4]
 800928c:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800928e:	2300      	movs	r3, #0
 8009290:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 8009292:	2201      	movs	r2, #1
 8009294:	2101      	movs	r1, #1
 8009296:	4834      	ldr	r0, [pc, #208]	; (8009368 <SPI_WIFI_ReceiveData+0xe8>)
 8009298:	f7f9 fba4 	bl	80029e4 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 800929c:	2003      	movs	r0, #3
 800929e:	f000 f8e3 	bl	8009468 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7ff ff8b 	bl	80091c0 <wait_cmddata_rdy_rising_event>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	da02      	bge.n	80092b6 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 80092b0:	f06f 0302 	mvn.w	r3, #2
 80092b4:	e054      	b.n	8009360 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 80092b6:	2200      	movs	r2, #0
 80092b8:	2101      	movs	r1, #1
 80092ba:	482b      	ldr	r0, [pc, #172]	; (8009368 <SPI_WIFI_ReceiveData+0xe8>)
 80092bc:	f7f9 fb92 	bl	80029e4 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80092c0:	200f      	movs	r0, #15
 80092c2:	f000 f8d1 	bl	8009468 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 80092c6:	e03d      	b.n	8009344 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 80092c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80092cc:	897b      	ldrh	r3, [r7, #10]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	db02      	blt.n	80092d8 <SPI_WIFI_ReceiveData+0x58>
 80092d2:	897b      	ldrh	r3, [r7, #10]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d13c      	bne.n	8009352 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 80092d8:	4b24      	ldr	r3, [pc, #144]	; (800936c <SPI_WIFI_ReceiveData+0xec>)
 80092da:	2201      	movs	r2, #1
 80092dc:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 80092de:	f107 0314 	add.w	r3, r7, #20
 80092e2:	2201      	movs	r2, #1
 80092e4:	4619      	mov	r1, r3
 80092e6:	4822      	ldr	r0, [pc, #136]	; (8009370 <SPI_WIFI_ReceiveData+0xf0>)
 80092e8:	f7fb fef4 	bl	80050d4 <HAL_SPI_Receive_IT>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d007      	beq.n	8009302 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 80092f2:	2201      	movs	r2, #1
 80092f4:	2101      	movs	r1, #1
 80092f6:	481c      	ldr	r0, [pc, #112]	; (8009368 <SPI_WIFI_ReceiveData+0xe8>)
 80092f8:	f7f9 fb74 	bl	80029e4 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 80092fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009300:	e02e      	b.n	8009360 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4618      	mov	r0, r3
 8009306:	f7ff ff7b 	bl	8009200 <wait_spi_rx_event>

      pData[0] = tmp[0];
 800930a:	7d3a      	ldrb	r2, [r7, #20]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	3301      	adds	r3, #1
 8009314:	7d7a      	ldrb	r2, [r7, #21]
 8009316:	701a      	strb	r2, [r3, #0]
      length += 2;
 8009318:	8afb      	ldrh	r3, [r7, #22]
 800931a:	3302      	adds	r3, #2
 800931c:	b29b      	uxth	r3, r3
 800931e:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	3302      	adds	r3, #2
 8009324:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8009326:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800932a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800932e:	db09      	blt.n	8009344 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8009330:	2201      	movs	r2, #1
 8009332:	2101      	movs	r1, #1
 8009334:	480c      	ldr	r0, [pc, #48]	; (8009368 <SPI_WIFI_ReceiveData+0xe8>)
 8009336:	f7f9 fb55 	bl	80029e4 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 800933a:	f7ff fea5 	bl	8009088 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800933e:	f06f 0303 	mvn.w	r3, #3
 8009342:	e00d      	b.n	8009360 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8009344:	2102      	movs	r1, #2
 8009346:	4808      	ldr	r0, [pc, #32]	; (8009368 <SPI_WIFI_ReceiveData+0xe8>)
 8009348:	f7f9 fb34 	bl	80029b4 <HAL_GPIO_ReadPin>
 800934c:	4603      	mov	r3, r0
 800934e:	2b01      	cmp	r3, #1
 8009350:	d0ba      	beq.n	80092c8 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8009352:	2201      	movs	r2, #1
 8009354:	2101      	movs	r1, #1
 8009356:	4804      	ldr	r0, [pc, #16]	; (8009368 <SPI_WIFI_ReceiveData+0xe8>)
 8009358:	f7f9 fb44 	bl	80029e4 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 800935c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8009360:	4618      	mov	r0, r3
 8009362:	3718      	adds	r7, #24
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	48001000 	.word	0x48001000
 800936c:	200010d8 	.word	0x200010d8
 8009370:	20001074 	.word	0x20001074

08009374 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b086      	sub	sp, #24
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	460b      	mov	r3, r1
 800937e:	607a      	str	r2, [r7, #4]
 8009380:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4618      	mov	r0, r3
 8009386:	f7ff fef9 	bl	800917c <wait_cmddata_rdy_high>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	da02      	bge.n	8009396 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8009390:	f04f 33ff 	mov.w	r3, #4294967295
 8009394:	e04f      	b.n	8009436 <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 8009396:	4b2a      	ldr	r3, [pc, #168]	; (8009440 <SPI_WIFI_SendData+0xcc>)
 8009398:	2201      	movs	r2, #1
 800939a:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800939c:	2200      	movs	r2, #0
 800939e:	2101      	movs	r1, #1
 80093a0:	4828      	ldr	r0, [pc, #160]	; (8009444 <SPI_WIFI_SendData+0xd0>)
 80093a2:	f7f9 fb1f 	bl	80029e4 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80093a6:	200f      	movs	r0, #15
 80093a8:	f000 f85e 	bl	8009468 <SPI_WIFI_DelayUs>
  if (len > 1)
 80093ac:	897b      	ldrh	r3, [r7, #10]
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d919      	bls.n	80093e6 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 80093b2:	4b25      	ldr	r3, [pc, #148]	; (8009448 <SPI_WIFI_SendData+0xd4>)
 80093b4:	2201      	movs	r2, #1
 80093b6:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 80093b8:	897b      	ldrh	r3, [r7, #10]
 80093ba:	085b      	lsrs	r3, r3, #1
 80093bc:	b29b      	uxth	r3, r3
 80093be:	461a      	mov	r2, r3
 80093c0:	68f9      	ldr	r1, [r7, #12]
 80093c2:	4822      	ldr	r0, [pc, #136]	; (800944c <SPI_WIFI_SendData+0xd8>)
 80093c4:	f7fb fdf8 	bl	8004fb8 <HAL_SPI_Transmit_IT>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d007      	beq.n	80093de <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 80093ce:	2201      	movs	r2, #1
 80093d0:	2101      	movs	r1, #1
 80093d2:	481c      	ldr	r0, [pc, #112]	; (8009444 <SPI_WIFI_SendData+0xd0>)
 80093d4:	f7f9 fb06 	bl	80029e4 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80093d8:	f04f 33ff 	mov.w	r3, #4294967295
 80093dc:	e02b      	b.n	8009436 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7ff ff2d 	bl	8009240 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 80093e6:	897b      	ldrh	r3, [r7, #10]
 80093e8:	f003 0301 	and.w	r3, r3, #1
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d020      	beq.n	8009432 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 80093f0:	897b      	ldrh	r3, [r7, #10]
 80093f2:	3b01      	subs	r3, #1
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	4413      	add	r3, r2
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 80093fc:	230a      	movs	r3, #10
 80093fe:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8009400:	4b11      	ldr	r3, [pc, #68]	; (8009448 <SPI_WIFI_SendData+0xd4>)
 8009402:	2201      	movs	r2, #1
 8009404:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8009406:	f107 0314 	add.w	r3, r7, #20
 800940a:	2201      	movs	r2, #1
 800940c:	4619      	mov	r1, r3
 800940e:	480f      	ldr	r0, [pc, #60]	; (800944c <SPI_WIFI_SendData+0xd8>)
 8009410:	f7fb fdd2 	bl	8004fb8 <HAL_SPI_Transmit_IT>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d007      	beq.n	800942a <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 800941a:	2201      	movs	r2, #1
 800941c:	2101      	movs	r1, #1
 800941e:	4809      	ldr	r0, [pc, #36]	; (8009444 <SPI_WIFI_SendData+0xd0>)
 8009420:	f7f9 fae0 	bl	80029e4 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8009424:	f04f 33ff 	mov.w	r3, #4294967295
 8009428:	e005      	b.n	8009436 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4618      	mov	r0, r3
 800942e:	f7ff ff07 	bl	8009240 <wait_spi_tx_event>
    
  }
  return len;
 8009432:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3718      	adds	r7, #24
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	200010e0 	.word	0x200010e0
 8009444:	48001000 	.word	0x48001000
 8009448:	200010dc 	.word	0x200010dc
 800944c:	20001074 	.word	0x20001074

08009450 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7f8 fd7b 	bl	8001f54 <HAL_Delay>
}
 800945e:	bf00      	nop
 8009460:	3708      	adds	r7, #8
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
	...

08009468 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8009470:	2300      	movs	r3, #0
 8009472:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8009474:	2300      	movs	r3, #0
 8009476:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8009478:	4b20      	ldr	r3, [pc, #128]	; (80094fc <SPI_WIFI_DelayUs+0x94>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d122      	bne.n	80094c6 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8009480:	4b1f      	ldr	r3, [pc, #124]	; (8009500 <SPI_WIFI_DelayUs+0x98>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a1f      	ldr	r2, [pc, #124]	; (8009504 <SPI_WIFI_DelayUs+0x9c>)
 8009486:	fba2 2303 	umull	r2, r3, r2, r3
 800948a:	099b      	lsrs	r3, r3, #6
 800948c:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 800948e:	2300      	movs	r3, #0
 8009490:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8009496:	f7f8 fd51 	bl	8001f3c <HAL_GetTick>
 800949a:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 800949c:	e002      	b.n	80094a4 <SPI_WIFI_DelayUs+0x3c>
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	3b01      	subs	r3, #1
 80094a2:	60bb      	str	r3, [r7, #8]
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1f9      	bne.n	800949e <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 80094aa:	f7f8 fd47 	bl	8001f3c <HAL_GetTick>
 80094ae:	4602      	mov	r2, r0
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	4a11      	ldr	r2, [pc, #68]	; (80094fc <SPI_WIFI_DelayUs+0x94>)
 80094b6:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 80094b8:	4b10      	ldr	r3, [pc, #64]	; (80094fc <SPI_WIFI_DelayUs+0x94>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d102      	bne.n	80094c6 <SPI_WIFI_DelayUs+0x5e>
 80094c0:	4b0e      	ldr	r3, [pc, #56]	; (80094fc <SPI_WIFI_DelayUs+0x94>)
 80094c2:	2201      	movs	r2, #1
 80094c4:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 80094c6:	4b0e      	ldr	r3, [pc, #56]	; (8009500 <SPI_WIFI_DelayUs+0x98>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a0f      	ldr	r2, [pc, #60]	; (8009508 <SPI_WIFI_DelayUs+0xa0>)
 80094cc:	fba2 2303 	umull	r2, r3, r2, r3
 80094d0:	0c9a      	lsrs	r2, r3, #18
 80094d2:	4b0a      	ldr	r3, [pc, #40]	; (80094fc <SPI_WIFI_DelayUs+0x94>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80094da:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	697a      	ldr	r2, [r7, #20]
 80094e0:	fb02 f303 	mul.w	r3, r2, r3
 80094e4:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 80094e6:	e002      	b.n	80094ee <SPI_WIFI_DelayUs+0x86>
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	3b01      	subs	r3, #1
 80094ec:	60bb      	str	r3, [r7, #8]
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d1f9      	bne.n	80094e8 <SPI_WIFI_DelayUs+0x80>
  return;
 80094f4:	bf00      	nop
}
 80094f6:	3718      	adds	r7, #24
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	200010e4 	.word	0x200010e4
 8009500:	20000000 	.word	0x20000000
 8009504:	10624dd3 	.word	0x10624dd3
 8009508:	431bde83 	.word	0x431bde83

0800950c <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8009514:	4b06      	ldr	r3, [pc, #24]	; (8009530 <HAL_SPI_RxCpltCallback+0x24>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d002      	beq.n	8009522 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 800951c:	4b04      	ldr	r3, [pc, #16]	; (8009530 <HAL_SPI_RxCpltCallback+0x24>)
 800951e:	2200      	movs	r2, #0
 8009520:	601a      	str	r2, [r3, #0]
  }
}
 8009522:	bf00      	nop
 8009524:	370c      	adds	r7, #12
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	200010d8 	.word	0x200010d8

08009534 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 800953c:	4b06      	ldr	r3, [pc, #24]	; (8009558 <HAL_SPI_TxCpltCallback+0x24>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d002      	beq.n	800954a <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8009544:	4b04      	ldr	r3, [pc, #16]	; (8009558 <HAL_SPI_TxCpltCallback+0x24>)
 8009546:	2200      	movs	r2, #0
 8009548:	601a      	str	r2, [r3, #0]
  }
}
 800954a:	bf00      	nop
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	200010dc 	.word	0x200010dc

0800955c <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 800955c:	b480      	push	{r7}
 800955e:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8009560:	4b05      	ldr	r3, [pc, #20]	; (8009578 <SPI_WIFI_ISR+0x1c>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b01      	cmp	r3, #1
 8009566:	d102      	bne.n	800956e <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8009568:	4b03      	ldr	r3, [pc, #12]	; (8009578 <SPI_WIFI_ISR+0x1c>)
 800956a:	2200      	movs	r2, #0
 800956c:	601a      	str	r2, [r3, #0]
   }
}
 800956e:	bf00      	nop
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr
 8009578:	200010e0 	.word	0x200010e0

0800957c <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8009586:	4b0d      	ldr	r3, [pc, #52]	; (80095bc <WIFI_Init+0x40>)
 8009588:	9301      	str	r3, [sp, #4]
 800958a:	4b0d      	ldr	r3, [pc, #52]	; (80095c0 <WIFI_Init+0x44>)
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	4b0d      	ldr	r3, [pc, #52]	; (80095c4 <WIFI_Init+0x48>)
 8009590:	4a0d      	ldr	r2, [pc, #52]	; (80095c8 <WIFI_Init+0x4c>)
 8009592:	490e      	ldr	r1, [pc, #56]	; (80095cc <WIFI_Init+0x50>)
 8009594:	480e      	ldr	r0, [pc, #56]	; (80095d0 <WIFI_Init+0x54>)
 8009596:	f7fe ff1d 	bl	80083d4 <ES_WIFI_RegisterBusIO>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d107      	bne.n	80095b0 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80095a0:	480b      	ldr	r0, [pc, #44]	; (80095d0 <WIFI_Init+0x54>)
 80095a2:	f7fe fee9 	bl	8008378 <ES_WIFI_Init>
 80095a6:	4603      	mov	r3, r0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d101      	bne.n	80095b0 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 80095ac:	2300      	movs	r3, #0
 80095ae:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 80095b0:	79fb      	ldrb	r3, [r7, #7]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	08009281 	.word	0x08009281
 80095c0:	08009375 	.word	0x08009375
 80095c4:	08009451 	.word	0x08009451
 80095c8:	08009169 	.word	0x08009169
 80095cc:	08008fcd 	.word	0x08008fcd
 80095d0:	200010e8 	.word	0x200010e8

080095d4 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b086      	sub	sp, #24
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	4613      	mov	r3, r2
 80095e0:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 80095e6:	79fb      	ldrb	r3, [r7, #7]
 80095e8:	68ba      	ldr	r2, [r7, #8]
 80095ea:	68f9      	ldr	r1, [r7, #12]
 80095ec:	4809      	ldr	r0, [pc, #36]	; (8009614 <WIFI_Connect+0x40>)
 80095ee:	f7fe ff25 	bl	800843c <ES_WIFI_Connect>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d107      	bne.n	8009608 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80095f8:	4806      	ldr	r0, [pc, #24]	; (8009614 <WIFI_Connect+0x40>)
 80095fa:	f7fe ffc3 	bl	8008584 <ES_WIFI_GetNetworkSettings>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d101      	bne.n	8009608 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8009604:	2300      	movs	r3, #0
 8009606:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8009608:	7dfb      	ldrb	r3, [r7, #23]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3718      	adds	r7, #24
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	200010e8 	.word	0x200010e8

08009618 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009620:	2301      	movs	r3, #1
 8009622:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8009624:	6879      	ldr	r1, [r7, #4]
 8009626:	4806      	ldr	r0, [pc, #24]	; (8009640 <WIFI_GetMAC_Address+0x28>)
 8009628:	f7fe ffd6 	bl	80085d8 <ES_WIFI_GetMACAddress>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d101      	bne.n	8009636 <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 8009632:	2300      	movs	r3, #0
 8009634:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8009636:	7bfb      	ldrb	r3, [r7, #15]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3710      	adds	r7, #16
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	200010e8 	.word	0x200010e8

08009644 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8009650:	4809      	ldr	r0, [pc, #36]	; (8009678 <WIFI_GetIP_Address+0x34>)
 8009652:	f7fe ff6b 	bl	800852c <ES_WIFI_IsConnected>
 8009656:	4603      	mov	r3, r0
 8009658:	2b01      	cmp	r3, #1
 800965a:	d107      	bne.n	800966c <WIFI_GetIP_Address+0x28>
 800965c:	4b06      	ldr	r3, [pc, #24]	; (8009678 <WIFI_GetIP_Address+0x34>)
 800965e:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 8009662:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 8009668:	2300      	movs	r3, #0
 800966a:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800966c:	7bfb      	ldrb	r3, [r7, #15]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	200010e8 	.word	0x200010e8

0800967c <WIFI_StartServer>:
  * @param  name : name of the connection
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, uint16_t backlog ,const char *name, uint16_t port)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b08a      	sub	sp, #40	; 0x28
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	607b      	str	r3, [r7, #4]
 8009686:	460b      	mov	r3, r1
 8009688:	72fb      	strb	r3, [r7, #11]
 800968a:	4613      	mov	r3, r2
 800968c:	813b      	strh	r3, [r7, #8]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	b2db      	uxtb	r3, r3
 8009698:	747b      	strb	r3, [r7, #17]
  conn.LocalPort = port;
 800969a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800969c:	82bb      	strh	r3, [r7, #20]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800969e:	7afb      	ldrb	r3, [r7, #11]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	bf14      	ite	ne
 80096a4:	2301      	movne	r3, #1
 80096a6:	2300      	moveq	r3, #0
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	743b      	strb	r3, [r7, #16]
  conn.Backlog = backlog;
 80096ac:	893b      	ldrh	r3, [r7, #8]
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	f887 3020 	strb.w	r3, [r7, #32]
  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 80096b4:	f107 0310 	add.w	r3, r7, #16
 80096b8:	4619      	mov	r1, r3
 80096ba:	4807      	ldr	r0, [pc, #28]	; (80096d8 <WIFI_StartServer+0x5c>)
 80096bc:	f7fe ffbe 	bl	800863c <ES_WIFI_StartServerSingleConn>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d102      	bne.n	80096cc <WIFI_StartServer+0x50>
  {
    ret = WIFI_STATUS_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 80096cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3728      	adds	r7, #40	; 0x28
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	200010e8 	.word	0x200010e8

080096dc <WIFI_WaitServerConnection>:
  * @brief  Wait for a client connection to the server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_WaitServerConnection(int socket,uint32_t Timeout,uint8_t *RemoteIp,uint16_t *RemotePort)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b08a      	sub	sp, #40	; 0x28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	607a      	str	r2, [r7, #4]
 80096e8:	603b      	str	r3, [r7, #0]
  ES_WIFI_Conn_t conn;
  ES_WIFI_Status_t ret;
  
  conn.Number = socket;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	747b      	strb	r3, [r7, #17]

  ret = ES_WIFI_WaitServerConnection(&EsWifiObj,Timeout,&conn);
 80096f0:	f107 0310 	add.w	r3, r7, #16
 80096f4:	461a      	mov	r2, r3
 80096f6:	68b9      	ldr	r1, [r7, #8]
 80096f8:	4819      	ldr	r0, [pc, #100]	; (8009760 <WIFI_WaitServerConnection+0x84>)
 80096fa:	f7ff f84b 	bl	8008794 <ES_WIFI_WaitServerConnection>
 80096fe:	4603      	mov	r3, r0
 8009700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ES_WIFI_STATUS_OK == ret)
 8009704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009708:	2b00      	cmp	r3, #0
 800970a:	d10f      	bne.n	800972c <WIFI_WaitServerConnection+0x50>
  {
    if (RemotePort) *RemotePort=conn.RemotePort;
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d002      	beq.n	8009718 <WIFI_WaitServerConnection+0x3c>
 8009712:	8a7a      	ldrh	r2, [r7, #18]
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	801a      	strh	r2, [r3, #0]
    if (RemoteIp)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d004      	beq.n	8009728 <WIFI_WaitServerConnection+0x4c>
 800971e:	f8d7 3016 	ldr.w	r3, [r7, #22]
 8009722:	461a      	mov	r2, r3
    {
      memcpy(RemoteIp,conn.RemoteIP,sizeof(conn.RemoteIP));
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	601a      	str	r2, [r3, #0]
    }
    return  WIFI_STATUS_OK;
 8009728:	2300      	movs	r3, #0
 800972a:	e014      	b.n	8009756 <WIFI_WaitServerConnection+0x7a>
  }
  
  if (ES_WIFI_STATUS_TIMEOUT ==ret)
 800972c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009730:	2b03      	cmp	r3, #3
 8009732:	d10f      	bne.n	8009754 <WIFI_WaitServerConnection+0x78>
  {
    if (RemotePort) *RemotePort=0;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d002      	beq.n	8009740 <WIFI_WaitServerConnection+0x64>
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	2200      	movs	r2, #0
 800973e:	801a      	strh	r2, [r3, #0]
    if (RemoteIp)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d004      	beq.n	8009750 <WIFI_WaitServerConnection+0x74>
    {
      memset(RemoteIp,0,sizeof(conn.RemoteIP));
 8009746:	2204      	movs	r2, #4
 8009748:	2100      	movs	r1, #0
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f003 fc10 	bl	800cf70 <memset>
    }
    return  WIFI_STATUS_TIMEOUT;
 8009750:	2305      	movs	r3, #5
 8009752:	e000      	b.n	8009756 <WIFI_WaitServerConnection+0x7a>
  }

  return WIFI_STATUS_ERROR;
 8009754:	2301      	movs	r3, #1
}
 8009756:	4618      	mov	r0, r3
 8009758:	3728      	adds	r7, #40	; 0x28
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	200010e8 	.word	0x200010e8

08009764 <WIFI_CloseServerConnection>:
/**
  * @brief  Close current connection from a client  to the server
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseServerConnection(int socket)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	73fb      	strb	r3, [r7, #15]
  if (ES_WIFI_STATUS_OK == ES_WIFI_CloseServerConnection(&EsWifiObj,socket))
 8009770:	6879      	ldr	r1, [r7, #4]
 8009772:	4806      	ldr	r0, [pc, #24]	; (800978c <WIFI_CloseServerConnection+0x28>)
 8009774:	f7ff f930 	bl	80089d8 <ES_WIFI_CloseServerConnection>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d101      	bne.n	8009782 <WIFI_CloseServerConnection+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800977e:	2300      	movs	r3, #0
 8009780:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8009782:	7bfb      	ldrb	r3, [r7, #15]
}
 8009784:	4618      	mov	r0, r3
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	200010e8 	.word	0x200010e8

08009790 <WIFI_StopServer>:
  * @brief  Stop a server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_StopServer(uint32_t socket)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_StopServerSingleConn(&EsWifiObj,socket)== ES_WIFI_STATUS_OK)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4619      	mov	r1, r3
 80097a0:	4806      	ldr	r0, [pc, #24]	; (80097bc <WIFI_StopServer+0x2c>)
 80097a2:	f7ff f979 	bl	8008a98 <ES_WIFI_StopServerSingleConn>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d101      	bne.n	80097b0 <WIFI_StopServer+0x20>
  {
    ret = WIFI_STATUS_OK;
 80097ac:	2300      	movs	r3, #0
 80097ae:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	200010e8 	.word	0x200010e8

080097c0 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b088      	sub	sp, #32
 80097c4:	af02      	add	r7, sp, #8
 80097c6:	60b9      	str	r1, [r7, #8]
 80097c8:	607b      	str	r3, [r7, #4]
 80097ca:	4603      	mov	r3, r0
 80097cc:	73fb      	strb	r3, [r7, #15]
 80097ce:	4613      	mov	r3, r2
 80097d0:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80097d6:	89ba      	ldrh	r2, [r7, #12]
 80097d8:	7bf9      	ldrb	r1, [r7, #15]
 80097da:	6a3b      	ldr	r3, [r7, #32]
 80097dc:	9301      	str	r3, [sp, #4]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	9300      	str	r3, [sp, #0]
 80097e2:	4613      	mov	r3, r2
 80097e4:	68ba      	ldr	r2, [r7, #8]
 80097e6:	4806      	ldr	r0, [pc, #24]	; (8009800 <WIFI_SendData+0x40>)
 80097e8:	f7ff f9b8 	bl	8008b5c <ES_WIFI_SendData>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d101      	bne.n	80097f6 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 80097f2:	2300      	movs	r3, #0
 80097f4:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 80097f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3718      	adds	r7, #24
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	200010e8 	.word	0x200010e8

08009804 <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b088      	sub	sp, #32
 8009808:	af02      	add	r7, sp, #8
 800980a:	60b9      	str	r1, [r7, #8]
 800980c:	607b      	str	r3, [r7, #4]
 800980e:	4603      	mov	r3, r0
 8009810:	73fb      	strb	r3, [r7, #15]
 8009812:	4613      	mov	r3, r2
 8009814:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800981a:	89ba      	ldrh	r2, [r7, #12]
 800981c:	7bf9      	ldrb	r1, [r7, #15]
 800981e:	6a3b      	ldr	r3, [r7, #32]
 8009820:	9301      	str	r3, [sp, #4]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	4613      	mov	r3, r2
 8009828:	68ba      	ldr	r2, [r7, #8]
 800982a:	4806      	ldr	r0, [pc, #24]	; (8009844 <WIFI_ReceiveData+0x40>)
 800982c:	f7ff fa52 	bl	8008cd4 <ES_WIFI_ReceiveData>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d101      	bne.n	800983a <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 800983a:	7dfb      	ldrb	r3, [r7, #23]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3718      	adds	r7, #24
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	200010e8 	.word	0x200010e8

08009848 <__NVIC_SetPriority>:
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	4603      	mov	r3, r0
 8009850:	6039      	str	r1, [r7, #0]
 8009852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009858:	2b00      	cmp	r3, #0
 800985a:	db0a      	blt.n	8009872 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	b2da      	uxtb	r2, r3
 8009860:	490c      	ldr	r1, [pc, #48]	; (8009894 <__NVIC_SetPriority+0x4c>)
 8009862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009866:	0112      	lsls	r2, r2, #4
 8009868:	b2d2      	uxtb	r2, r2
 800986a:	440b      	add	r3, r1
 800986c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009870:	e00a      	b.n	8009888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	b2da      	uxtb	r2, r3
 8009876:	4908      	ldr	r1, [pc, #32]	; (8009898 <__NVIC_SetPriority+0x50>)
 8009878:	79fb      	ldrb	r3, [r7, #7]
 800987a:	f003 030f 	and.w	r3, r3, #15
 800987e:	3b04      	subs	r3, #4
 8009880:	0112      	lsls	r2, r2, #4
 8009882:	b2d2      	uxtb	r2, r2
 8009884:	440b      	add	r3, r1
 8009886:	761a      	strb	r2, [r3, #24]
}
 8009888:	bf00      	nop
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr
 8009894:	e000e100 	.word	0xe000e100
 8009898:	e000ed00 	.word	0xe000ed00

0800989c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800989c:	b580      	push	{r7, lr}
 800989e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80098a0:	4b05      	ldr	r3, [pc, #20]	; (80098b8 <SysTick_Handler+0x1c>)
 80098a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80098a4:	f002 f8aa 	bl	800b9fc <xTaskGetSchedulerState>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d001      	beq.n	80098b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80098ae:	f002 ff93 	bl	800c7d8 <xPortSysTickHandler>
  }
}
 80098b2:	bf00      	nop
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	e000e010 	.word	0xe000e010

080098bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80098bc:	b580      	push	{r7, lr}
 80098be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80098c0:	2100      	movs	r1, #0
 80098c2:	f06f 0004 	mvn.w	r0, #4
 80098c6:	f7ff ffbf 	bl	8009848 <__NVIC_SetPriority>
#endif
}
 80098ca:	bf00      	nop
 80098cc:	bd80      	pop	{r7, pc}
	...

080098d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098d6:	f3ef 8305 	mrs	r3, IPSR
 80098da:	603b      	str	r3, [r7, #0]
  return(result);
 80098dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d003      	beq.n	80098ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80098e2:	f06f 0305 	mvn.w	r3, #5
 80098e6:	607b      	str	r3, [r7, #4]
 80098e8:	e00c      	b.n	8009904 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80098ea:	4b0a      	ldr	r3, [pc, #40]	; (8009914 <osKernelInitialize+0x44>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d105      	bne.n	80098fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80098f2:	4b08      	ldr	r3, [pc, #32]	; (8009914 <osKernelInitialize+0x44>)
 80098f4:	2201      	movs	r2, #1
 80098f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80098f8:	2300      	movs	r3, #0
 80098fa:	607b      	str	r3, [r7, #4]
 80098fc:	e002      	b.n	8009904 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80098fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009902:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009904:	687b      	ldr	r3, [r7, #4]
}
 8009906:	4618      	mov	r0, r3
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	200019e8 	.word	0x200019e8

08009918 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800991e:	f3ef 8305 	mrs	r3, IPSR
 8009922:	603b      	str	r3, [r7, #0]
  return(result);
 8009924:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009926:	2b00      	cmp	r3, #0
 8009928:	d003      	beq.n	8009932 <osKernelStart+0x1a>
    stat = osErrorISR;
 800992a:	f06f 0305 	mvn.w	r3, #5
 800992e:	607b      	str	r3, [r7, #4]
 8009930:	e010      	b.n	8009954 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009932:	4b0b      	ldr	r3, [pc, #44]	; (8009960 <osKernelStart+0x48>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2b01      	cmp	r3, #1
 8009938:	d109      	bne.n	800994e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800993a:	f7ff ffbf 	bl	80098bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800993e:	4b08      	ldr	r3, [pc, #32]	; (8009960 <osKernelStart+0x48>)
 8009940:	2202      	movs	r2, #2
 8009942:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009944:	f001 fbfe 	bl	800b144 <vTaskStartScheduler>
      stat = osOK;
 8009948:	2300      	movs	r3, #0
 800994a:	607b      	str	r3, [r7, #4]
 800994c:	e002      	b.n	8009954 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800994e:	f04f 33ff 	mov.w	r3, #4294967295
 8009952:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009954:	687b      	ldr	r3, [r7, #4]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3708      	adds	r7, #8
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	200019e8 	.word	0x200019e8

08009964 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009964:	b580      	push	{r7, lr}
 8009966:	b08e      	sub	sp, #56	; 0x38
 8009968:	af04      	add	r7, sp, #16
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009970:	2300      	movs	r3, #0
 8009972:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009974:	f3ef 8305 	mrs	r3, IPSR
 8009978:	617b      	str	r3, [r7, #20]
  return(result);
 800997a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800997c:	2b00      	cmp	r3, #0
 800997e:	d17e      	bne.n	8009a7e <osThreadNew+0x11a>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d07b      	beq.n	8009a7e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009986:	2380      	movs	r3, #128	; 0x80
 8009988:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800998a:	2318      	movs	r3, #24
 800998c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800998e:	2300      	movs	r3, #0
 8009990:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009992:	f04f 33ff 	mov.w	r3, #4294967295
 8009996:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d045      	beq.n	8009a2a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d002      	beq.n	80099ac <osThreadNew+0x48>
        name = attr->name;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d002      	beq.n	80099ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	699b      	ldr	r3, [r3, #24]
 80099b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d008      	beq.n	80099d2 <osThreadNew+0x6e>
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	2b38      	cmp	r3, #56	; 0x38
 80099c4:	d805      	bhi.n	80099d2 <osThreadNew+0x6e>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	f003 0301 	and.w	r3, r3, #1
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d001      	beq.n	80099d6 <osThreadNew+0x72>
        return (NULL);
 80099d2:	2300      	movs	r3, #0
 80099d4:	e054      	b.n	8009a80 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	695b      	ldr	r3, [r3, #20]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d003      	beq.n	80099e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	695b      	ldr	r3, [r3, #20]
 80099e2:	089b      	lsrs	r3, r3, #2
 80099e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00e      	beq.n	8009a0c <osThreadNew+0xa8>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	2bbb      	cmp	r3, #187	; 0xbb
 80099f4:	d90a      	bls.n	8009a0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d006      	beq.n	8009a0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	695b      	ldr	r3, [r3, #20]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d002      	beq.n	8009a0c <osThreadNew+0xa8>
        mem = 1;
 8009a06:	2301      	movs	r3, #1
 8009a08:	61bb      	str	r3, [r7, #24]
 8009a0a:	e010      	b.n	8009a2e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10c      	bne.n	8009a2e <osThreadNew+0xca>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d108      	bne.n	8009a2e <osThreadNew+0xca>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d104      	bne.n	8009a2e <osThreadNew+0xca>
          mem = 0;
 8009a24:	2300      	movs	r3, #0
 8009a26:	61bb      	str	r3, [r7, #24]
 8009a28:	e001      	b.n	8009a2e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d110      	bne.n	8009a56 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a3c:	9202      	str	r2, [sp, #8]
 8009a3e:	9301      	str	r3, [sp, #4]
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	6a3a      	ldr	r2, [r7, #32]
 8009a48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	f001 f98e 	bl	800ad6c <xTaskCreateStatic>
 8009a50:	4603      	mov	r3, r0
 8009a52:	613b      	str	r3, [r7, #16]
 8009a54:	e013      	b.n	8009a7e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d110      	bne.n	8009a7e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009a5c:	6a3b      	ldr	r3, [r7, #32]
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	f107 0310 	add.w	r3, r7, #16
 8009a64:	9301      	str	r3, [sp, #4]
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	9300      	str	r3, [sp, #0]
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f001 f9d9 	bl	800ae26 <xTaskCreate>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d001      	beq.n	8009a7e <osThreadNew+0x11a>
            hTask = NULL;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009a7e:	693b      	ldr	r3, [r7, #16]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3728      	adds	r7, #40	; 0x28
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b08a      	sub	sp, #40	; 0x28
 8009a8c:	af02      	add	r7, sp, #8
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009a94:	2300      	movs	r3, #0
 8009a96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a98:	f3ef 8305 	mrs	r3, IPSR
 8009a9c:	613b      	str	r3, [r7, #16]
  return(result);
 8009a9e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d175      	bne.n	8009b90 <osSemaphoreNew+0x108>
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d072      	beq.n	8009b90 <osSemaphoreNew+0x108>
 8009aaa:	68ba      	ldr	r2, [r7, #8]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d86e      	bhi.n	8009b90 <osSemaphoreNew+0x108>
    mem = -1;
 8009ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ab6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d015      	beq.n	8009aea <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d006      	beq.n	8009ad4 <osSemaphoreNew+0x4c>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	2b4f      	cmp	r3, #79	; 0x4f
 8009acc:	d902      	bls.n	8009ad4 <osSemaphoreNew+0x4c>
        mem = 1;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	61bb      	str	r3, [r7, #24]
 8009ad2:	e00c      	b.n	8009aee <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d108      	bne.n	8009aee <osSemaphoreNew+0x66>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d104      	bne.n	8009aee <osSemaphoreNew+0x66>
          mem = 0;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	61bb      	str	r3, [r7, #24]
 8009ae8:	e001      	b.n	8009aee <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009aea:	2300      	movs	r3, #0
 8009aec:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af4:	d04c      	beq.n	8009b90 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d128      	bne.n	8009b4e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d10a      	bne.n	8009b18 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	2203      	movs	r2, #3
 8009b08:	9200      	str	r2, [sp, #0]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	2001      	movs	r0, #1
 8009b10:	f000 fa06 	bl	8009f20 <xQueueGenericCreateStatic>
 8009b14:	61f8      	str	r0, [r7, #28]
 8009b16:	e005      	b.n	8009b24 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009b18:	2203      	movs	r2, #3
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	2001      	movs	r0, #1
 8009b1e:	f000 fa77 	bl	800a010 <xQueueGenericCreate>
 8009b22:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d022      	beq.n	8009b70 <osSemaphoreNew+0xe8>
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d01f      	beq.n	8009b70 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009b30:	2300      	movs	r3, #0
 8009b32:	2200      	movs	r2, #0
 8009b34:	2100      	movs	r1, #0
 8009b36:	69f8      	ldr	r0, [r7, #28]
 8009b38:	f000 fb32 	bl	800a1a0 <xQueueGenericSend>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d016      	beq.n	8009b70 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009b42:	69f8      	ldr	r0, [r7, #28]
 8009b44:	f000 ff3e 	bl	800a9c4 <vQueueDelete>
            hSemaphore = NULL;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	61fb      	str	r3, [r7, #28]
 8009b4c:	e010      	b.n	8009b70 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d108      	bne.n	8009b66 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	461a      	mov	r2, r3
 8009b5a:	68b9      	ldr	r1, [r7, #8]
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	f000 fab4 	bl	800a0ca <xQueueCreateCountingSemaphoreStatic>
 8009b62:	61f8      	str	r0, [r7, #28]
 8009b64:	e004      	b.n	8009b70 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009b66:	68b9      	ldr	r1, [r7, #8]
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f000 fae5 	bl	800a138 <xQueueCreateCountingSemaphore>
 8009b6e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00c      	beq.n	8009b90 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d003      	beq.n	8009b84 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	617b      	str	r3, [r7, #20]
 8009b82:	e001      	b.n	8009b88 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009b84:	2300      	movs	r3, #0
 8009b86:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009b88:	6979      	ldr	r1, [r7, #20]
 8009b8a:	69f8      	ldr	r0, [r7, #28]
 8009b8c:	f001 f866 	bl	800ac5c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009b90:	69fb      	ldr	r3, [r7, #28]
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3720      	adds	r7, #32
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b08a      	sub	sp, #40	; 0x28
 8009b9e:	af02      	add	r7, sp, #8
 8009ba0:	60f8      	str	r0, [r7, #12]
 8009ba2:	60b9      	str	r1, [r7, #8]
 8009ba4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009baa:	f3ef 8305 	mrs	r3, IPSR
 8009bae:	613b      	str	r3, [r7, #16]
  return(result);
 8009bb0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d15f      	bne.n	8009c76 <osMessageQueueNew+0xdc>
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d05c      	beq.n	8009c76 <osMessageQueueNew+0xdc>
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d059      	beq.n	8009c76 <osMessageQueueNew+0xdc>
    mem = -1;
 8009bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8009bc6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d029      	beq.n	8009c22 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d012      	beq.n	8009bfc <osMessageQueueNew+0x62>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	2b4f      	cmp	r3, #79	; 0x4f
 8009bdc:	d90e      	bls.n	8009bfc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00a      	beq.n	8009bfc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	695a      	ldr	r2, [r3, #20]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	68b9      	ldr	r1, [r7, #8]
 8009bee:	fb01 f303 	mul.w	r3, r1, r3
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d302      	bcc.n	8009bfc <osMessageQueueNew+0x62>
        mem = 1;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	61bb      	str	r3, [r7, #24]
 8009bfa:	e014      	b.n	8009c26 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d110      	bne.n	8009c26 <osMessageQueueNew+0x8c>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d10c      	bne.n	8009c26 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d108      	bne.n	8009c26 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	695b      	ldr	r3, [r3, #20]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d104      	bne.n	8009c26 <osMessageQueueNew+0x8c>
          mem = 0;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	61bb      	str	r3, [r7, #24]
 8009c20:	e001      	b.n	8009c26 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009c22:	2300      	movs	r3, #0
 8009c24:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d10b      	bne.n	8009c44 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	691a      	ldr	r2, [r3, #16]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	2100      	movs	r1, #0
 8009c36:	9100      	str	r1, [sp, #0]
 8009c38:	68b9      	ldr	r1, [r7, #8]
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f000 f970 	bl	8009f20 <xQueueGenericCreateStatic>
 8009c40:	61f8      	str	r0, [r7, #28]
 8009c42:	e008      	b.n	8009c56 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d105      	bne.n	8009c56 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	68b9      	ldr	r1, [r7, #8]
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f000 f9de 	bl	800a010 <xQueueGenericCreate>
 8009c54:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00c      	beq.n	8009c76 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d003      	beq.n	8009c6a <osMessageQueueNew+0xd0>
        name = attr->name;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	617b      	str	r3, [r7, #20]
 8009c68:	e001      	b.n	8009c6e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009c6e:	6979      	ldr	r1, [r7, #20]
 8009c70:	69f8      	ldr	r0, [r7, #28]
 8009c72:	f000 fff3 	bl	800ac5c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009c76:	69fb      	ldr	r3, [r7, #28]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3720      	adds	r7, #32
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009c80:	b480      	push	{r7}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	4a07      	ldr	r2, [pc, #28]	; (8009cac <vApplicationGetIdleTaskMemory+0x2c>)
 8009c90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	4a06      	ldr	r2, [pc, #24]	; (8009cb0 <vApplicationGetIdleTaskMemory+0x30>)
 8009c96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2280      	movs	r2, #128	; 0x80
 8009c9c:	601a      	str	r2, [r3, #0]
}
 8009c9e:	bf00      	nop
 8009ca0:	3714      	adds	r7, #20
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	200019ec 	.word	0x200019ec
 8009cb0:	20001aa8 	.word	0x20001aa8

08009cb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	4a07      	ldr	r2, [pc, #28]	; (8009ce0 <vApplicationGetTimerTaskMemory+0x2c>)
 8009cc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	4a06      	ldr	r2, [pc, #24]	; (8009ce4 <vApplicationGetTimerTaskMemory+0x30>)
 8009cca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009cd2:	601a      	str	r2, [r3, #0]
}
 8009cd4:	bf00      	nop
 8009cd6:	3714      	adds	r7, #20
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr
 8009ce0:	20001ca8 	.word	0x20001ca8
 8009ce4:	20001d64 	.word	0x20001d64

08009ce8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f103 0208 	add.w	r2, r3, #8
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8009d00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f103 0208 	add.w	r2, r3, #8
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f103 0208 	add.w	r2, r3, #8
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009d1c:	bf00      	nop
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009d36:	bf00      	nop
 8009d38:	370c      	adds	r7, #12
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr

08009d42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d42:	b480      	push	{r7}
 8009d44:	b085      	sub	sp, #20
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
 8009d4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	689a      	ldr	r2, [r3, #8]
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	683a      	ldr	r2, [r7, #0]
 8009d66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	683a      	ldr	r2, [r7, #0]
 8009d6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	1c5a      	adds	r2, r3, #1
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	601a      	str	r2, [r3, #0]
}
 8009d7e:	bf00      	nop
 8009d80:	3714      	adds	r7, #20
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr

08009d8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d8a:	b480      	push	{r7}
 8009d8c:	b085      	sub	sp, #20
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
 8009d92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da0:	d103      	bne.n	8009daa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	60fb      	str	r3, [r7, #12]
 8009da8:	e00c      	b.n	8009dc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	3308      	adds	r3, #8
 8009dae:	60fb      	str	r3, [r7, #12]
 8009db0:	e002      	b.n	8009db8 <vListInsert+0x2e>
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	60fb      	str	r3, [r7, #12]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	68ba      	ldr	r2, [r7, #8]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d2f6      	bcs.n	8009db2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	683a      	ldr	r2, [r7, #0]
 8009dde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	1c5a      	adds	r2, r3, #1
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	601a      	str	r2, [r3, #0]
}
 8009df0:	bf00      	nop
 8009df2:	3714      	adds	r7, #20
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	691b      	ldr	r3, [r3, #16]
 8009e08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	6892      	ldr	r2, [r2, #8]
 8009e12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	6852      	ldr	r2, [r2, #4]
 8009e1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d103      	bne.n	8009e30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	689a      	ldr	r2, [r3, #8]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	1e5a      	subs	r2, r3, #1
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d10a      	bne.n	8009e7a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009e76:	bf00      	nop
 8009e78:	e7fe      	b.n	8009e78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009e7a:	f002 fc1b 	bl	800c6b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e86:	68f9      	ldr	r1, [r7, #12]
 8009e88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e8a:	fb01 f303 	mul.w	r3, r1, r3
 8009e8e:	441a      	add	r2, r3
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eaa:	3b01      	subs	r3, #1
 8009eac:	68f9      	ldr	r1, [r7, #12]
 8009eae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009eb0:	fb01 f303 	mul.w	r3, r1, r3
 8009eb4:	441a      	add	r2, r3
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	22ff      	movs	r2, #255	; 0xff
 8009ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	22ff      	movs	r2, #255	; 0xff
 8009ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d114      	bne.n	8009efa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	691b      	ldr	r3, [r3, #16]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d01a      	beq.n	8009f0e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	3310      	adds	r3, #16
 8009edc:	4618      	mov	r0, r3
 8009ede:	f001 fbcb 	bl	800b678 <xTaskRemoveFromEventList>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d012      	beq.n	8009f0e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009ee8:	4b0c      	ldr	r3, [pc, #48]	; (8009f1c <xQueueGenericReset+0xcc>)
 8009eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eee:	601a      	str	r2, [r3, #0]
 8009ef0:	f3bf 8f4f 	dsb	sy
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	e009      	b.n	8009f0e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	3310      	adds	r3, #16
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7ff fef2 	bl	8009ce8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	3324      	adds	r3, #36	; 0x24
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7ff feed 	bl	8009ce8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009f0e:	f002 fc01 	bl	800c714 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009f12:	2301      	movs	r3, #1
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3710      	adds	r7, #16
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	e000ed04 	.word	0xe000ed04

08009f20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b08e      	sub	sp, #56	; 0x38
 8009f24:	af02      	add	r7, sp, #8
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
 8009f2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d10a      	bne.n	8009f4a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f38:	f383 8811 	msr	BASEPRI, r3
 8009f3c:	f3bf 8f6f 	isb	sy
 8009f40:	f3bf 8f4f 	dsb	sy
 8009f44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f46:	bf00      	nop
 8009f48:	e7fe      	b.n	8009f48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d10a      	bne.n	8009f66 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f54:	f383 8811 	msr	BASEPRI, r3
 8009f58:	f3bf 8f6f 	isb	sy
 8009f5c:	f3bf 8f4f 	dsb	sy
 8009f60:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f62:	bf00      	nop
 8009f64:	e7fe      	b.n	8009f64 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <xQueueGenericCreateStatic+0x52>
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d001      	beq.n	8009f76 <xQueueGenericCreateStatic+0x56>
 8009f72:	2301      	movs	r3, #1
 8009f74:	e000      	b.n	8009f78 <xQueueGenericCreateStatic+0x58>
 8009f76:	2300      	movs	r3, #0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d10a      	bne.n	8009f92 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f80:	f383 8811 	msr	BASEPRI, r3
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	623b      	str	r3, [r7, #32]
}
 8009f8e:	bf00      	nop
 8009f90:	e7fe      	b.n	8009f90 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d102      	bne.n	8009f9e <xQueueGenericCreateStatic+0x7e>
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d101      	bne.n	8009fa2 <xQueueGenericCreateStatic+0x82>
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e000      	b.n	8009fa4 <xQueueGenericCreateStatic+0x84>
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d10a      	bne.n	8009fbe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fac:	f383 8811 	msr	BASEPRI, r3
 8009fb0:	f3bf 8f6f 	isb	sy
 8009fb4:	f3bf 8f4f 	dsb	sy
 8009fb8:	61fb      	str	r3, [r7, #28]
}
 8009fba:	bf00      	nop
 8009fbc:	e7fe      	b.n	8009fbc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009fbe:	2350      	movs	r3, #80	; 0x50
 8009fc0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	2b50      	cmp	r3, #80	; 0x50
 8009fc6:	d00a      	beq.n	8009fde <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fcc:	f383 8811 	msr	BASEPRI, r3
 8009fd0:	f3bf 8f6f 	isb	sy
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	61bb      	str	r3, [r7, #24]
}
 8009fda:	bf00      	nop
 8009fdc:	e7fe      	b.n	8009fdc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009fde:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00d      	beq.n	800a006 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ff2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff8:	9300      	str	r3, [sp, #0]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	68b9      	ldr	r1, [r7, #8]
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f000 f83f 	bl	800a084 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a008:	4618      	mov	r0, r3
 800a00a:	3730      	adds	r7, #48	; 0x30
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a010:	b580      	push	{r7, lr}
 800a012:	b08a      	sub	sp, #40	; 0x28
 800a014:	af02      	add	r7, sp, #8
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	4613      	mov	r3, r2
 800a01c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d10a      	bne.n	800a03a <xQueueGenericCreate+0x2a>
	__asm volatile
 800a024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a028:	f383 8811 	msr	BASEPRI, r3
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	613b      	str	r3, [r7, #16]
}
 800a036:	bf00      	nop
 800a038:	e7fe      	b.n	800a038 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	68ba      	ldr	r2, [r7, #8]
 800a03e:	fb02 f303 	mul.w	r3, r2, r3
 800a042:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	3350      	adds	r3, #80	; 0x50
 800a048:	4618      	mov	r0, r3
 800a04a:	f002 fc55 	bl	800c8f8 <pvPortMalloc>
 800a04e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a050:	69bb      	ldr	r3, [r7, #24]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d011      	beq.n	800a07a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	3350      	adds	r3, #80	; 0x50
 800a05e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	2200      	movs	r2, #0
 800a064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a068:	79fa      	ldrb	r2, [r7, #7]
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	9300      	str	r3, [sp, #0]
 800a06e:	4613      	mov	r3, r2
 800a070:	697a      	ldr	r2, [r7, #20]
 800a072:	68b9      	ldr	r1, [r7, #8]
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f000 f805 	bl	800a084 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a07a:	69bb      	ldr	r3, [r7, #24]
	}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3720      	adds	r7, #32
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	607a      	str	r2, [r7, #4]
 800a090:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d103      	bne.n	800a0a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a098:	69bb      	ldr	r3, [r7, #24]
 800a09a:	69ba      	ldr	r2, [r7, #24]
 800a09c:	601a      	str	r2, [r3, #0]
 800a09e:	e002      	b.n	800a0a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	68ba      	ldr	r2, [r7, #8]
 800a0b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a0b2:	2101      	movs	r1, #1
 800a0b4:	69b8      	ldr	r0, [r7, #24]
 800a0b6:	f7ff fecb 	bl	8009e50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	78fa      	ldrb	r2, [r7, #3]
 800a0be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a0c2:	bf00      	nop
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b08a      	sub	sp, #40	; 0x28
 800a0ce:	af02      	add	r7, sp, #8
 800a0d0:	60f8      	str	r0, [r7, #12]
 800a0d2:	60b9      	str	r1, [r7, #8]
 800a0d4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10a      	bne.n	800a0f2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e0:	f383 8811 	msr	BASEPRI, r3
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	61bb      	str	r3, [r7, #24]
}
 800a0ee:	bf00      	nop
 800a0f0:	e7fe      	b.n	800a0f0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d90a      	bls.n	800a110 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fe:	f383 8811 	msr	BASEPRI, r3
 800a102:	f3bf 8f6f 	isb	sy
 800a106:	f3bf 8f4f 	dsb	sy
 800a10a:	617b      	str	r3, [r7, #20]
}
 800a10c:	bf00      	nop
 800a10e:	e7fe      	b.n	800a10e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a110:	2302      	movs	r3, #2
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	2100      	movs	r1, #0
 800a11a:	68f8      	ldr	r0, [r7, #12]
 800a11c:	f7ff ff00 	bl	8009f20 <xQueueGenericCreateStatic>
 800a120:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d002      	beq.n	800a12e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	68ba      	ldr	r2, [r7, #8]
 800a12c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a12e:	69fb      	ldr	r3, [r7, #28]
	}
 800a130:	4618      	mov	r0, r3
 800a132:	3720      	adds	r7, #32
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b086      	sub	sp, #24
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d10a      	bne.n	800a15e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14c:	f383 8811 	msr	BASEPRI, r3
 800a150:	f3bf 8f6f 	isb	sy
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	613b      	str	r3, [r7, #16]
}
 800a15a:	bf00      	nop
 800a15c:	e7fe      	b.n	800a15c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a15e:	683a      	ldr	r2, [r7, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	429a      	cmp	r2, r3
 800a164:	d90a      	bls.n	800a17c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16a:	f383 8811 	msr	BASEPRI, r3
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	60fb      	str	r3, [r7, #12]
}
 800a178:	bf00      	nop
 800a17a:	e7fe      	b.n	800a17a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a17c:	2202      	movs	r2, #2
 800a17e:	2100      	movs	r1, #0
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f7ff ff45 	bl	800a010 <xQueueGenericCreate>
 800a186:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d002      	beq.n	800a194 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	683a      	ldr	r2, [r7, #0]
 800a192:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a194:	697b      	ldr	r3, [r7, #20]
	}
 800a196:	4618      	mov	r0, r3
 800a198:	3718      	adds	r7, #24
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
	...

0800a1a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b08e      	sub	sp, #56	; 0x38
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]
 800a1ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10a      	bne.n	800a1d2 <xQueueGenericSend+0x32>
	__asm volatile
 800a1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c0:	f383 8811 	msr	BASEPRI, r3
 800a1c4:	f3bf 8f6f 	isb	sy
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a1ce:	bf00      	nop
 800a1d0:	e7fe      	b.n	800a1d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d103      	bne.n	800a1e0 <xQueueGenericSend+0x40>
 800a1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d101      	bne.n	800a1e4 <xQueueGenericSend+0x44>
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e000      	b.n	800a1e6 <xQueueGenericSend+0x46>
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d10a      	bne.n	800a200 <xQueueGenericSend+0x60>
	__asm volatile
 800a1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ee:	f383 8811 	msr	BASEPRI, r3
 800a1f2:	f3bf 8f6f 	isb	sy
 800a1f6:	f3bf 8f4f 	dsb	sy
 800a1fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a1fc:	bf00      	nop
 800a1fe:	e7fe      	b.n	800a1fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	2b02      	cmp	r3, #2
 800a204:	d103      	bne.n	800a20e <xQueueGenericSend+0x6e>
 800a206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d101      	bne.n	800a212 <xQueueGenericSend+0x72>
 800a20e:	2301      	movs	r3, #1
 800a210:	e000      	b.n	800a214 <xQueueGenericSend+0x74>
 800a212:	2300      	movs	r3, #0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10a      	bne.n	800a22e <xQueueGenericSend+0x8e>
	__asm volatile
 800a218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21c:	f383 8811 	msr	BASEPRI, r3
 800a220:	f3bf 8f6f 	isb	sy
 800a224:	f3bf 8f4f 	dsb	sy
 800a228:	623b      	str	r3, [r7, #32]
}
 800a22a:	bf00      	nop
 800a22c:	e7fe      	b.n	800a22c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a22e:	f001 fbe5 	bl	800b9fc <xTaskGetSchedulerState>
 800a232:	4603      	mov	r3, r0
 800a234:	2b00      	cmp	r3, #0
 800a236:	d102      	bne.n	800a23e <xQueueGenericSend+0x9e>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d101      	bne.n	800a242 <xQueueGenericSend+0xa2>
 800a23e:	2301      	movs	r3, #1
 800a240:	e000      	b.n	800a244 <xQueueGenericSend+0xa4>
 800a242:	2300      	movs	r3, #0
 800a244:	2b00      	cmp	r3, #0
 800a246:	d10a      	bne.n	800a25e <xQueueGenericSend+0xbe>
	__asm volatile
 800a248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24c:	f383 8811 	msr	BASEPRI, r3
 800a250:	f3bf 8f6f 	isb	sy
 800a254:	f3bf 8f4f 	dsb	sy
 800a258:	61fb      	str	r3, [r7, #28]
}
 800a25a:	bf00      	nop
 800a25c:	e7fe      	b.n	800a25c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a25e:	f002 fa29 	bl	800c6b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d302      	bcc.n	800a274 <xQueueGenericSend+0xd4>
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	2b02      	cmp	r3, #2
 800a272:	d129      	bne.n	800a2c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a274:	683a      	ldr	r2, [r7, #0]
 800a276:	68b9      	ldr	r1, [r7, #8]
 800a278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a27a:	f000 fbde 	bl	800aa3a <prvCopyDataToQueue>
 800a27e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a284:	2b00      	cmp	r3, #0
 800a286:	d010      	beq.n	800a2aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28a:	3324      	adds	r3, #36	; 0x24
 800a28c:	4618      	mov	r0, r3
 800a28e:	f001 f9f3 	bl	800b678 <xTaskRemoveFromEventList>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d013      	beq.n	800a2c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a298:	4b3f      	ldr	r3, [pc, #252]	; (800a398 <xQueueGenericSend+0x1f8>)
 800a29a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a29e:	601a      	str	r2, [r3, #0]
 800a2a0:	f3bf 8f4f 	dsb	sy
 800a2a4:	f3bf 8f6f 	isb	sy
 800a2a8:	e00a      	b.n	800a2c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d007      	beq.n	800a2c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a2b0:	4b39      	ldr	r3, [pc, #228]	; (800a398 <xQueueGenericSend+0x1f8>)
 800a2b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2b6:	601a      	str	r2, [r3, #0]
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a2c0:	f002 fa28 	bl	800c714 <vPortExitCritical>
				return pdPASS;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e063      	b.n	800a390 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d103      	bne.n	800a2d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a2ce:	f002 fa21 	bl	800c714 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	e05c      	b.n	800a390 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d106      	bne.n	800a2ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2dc:	f107 0314 	add.w	r3, r7, #20
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f001 fa2d 	bl	800b740 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a2ea:	f002 fa13 	bl	800c714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a2ee:	f000 ff99 	bl	800b224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2f2:	f002 f9df 	bl	800c6b4 <vPortEnterCritical>
 800a2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2fc:	b25b      	sxtb	r3, r3
 800a2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a302:	d103      	bne.n	800a30c <xQueueGenericSend+0x16c>
 800a304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a306:	2200      	movs	r2, #0
 800a308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a312:	b25b      	sxtb	r3, r3
 800a314:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a318:	d103      	bne.n	800a322 <xQueueGenericSend+0x182>
 800a31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31c:	2200      	movs	r2, #0
 800a31e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a322:	f002 f9f7 	bl	800c714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a326:	1d3a      	adds	r2, r7, #4
 800a328:	f107 0314 	add.w	r3, r7, #20
 800a32c:	4611      	mov	r1, r2
 800a32e:	4618      	mov	r0, r3
 800a330:	f001 fa1c 	bl	800b76c <xTaskCheckForTimeOut>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d124      	bne.n	800a384 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a33a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a33c:	f000 fc75 	bl	800ac2a <prvIsQueueFull>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d018      	beq.n	800a378 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a348:	3310      	adds	r3, #16
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	4611      	mov	r1, r2
 800a34e:	4618      	mov	r0, r3
 800a350:	f001 f942 	bl	800b5d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a356:	f000 fc00 	bl	800ab5a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a35a:	f000 ff71 	bl	800b240 <xTaskResumeAll>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	f47f af7c 	bne.w	800a25e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a366:	4b0c      	ldr	r3, [pc, #48]	; (800a398 <xQueueGenericSend+0x1f8>)
 800a368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a36c:	601a      	str	r2, [r3, #0]
 800a36e:	f3bf 8f4f 	dsb	sy
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	e772      	b.n	800a25e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a378:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a37a:	f000 fbee 	bl	800ab5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a37e:	f000 ff5f 	bl	800b240 <xTaskResumeAll>
 800a382:	e76c      	b.n	800a25e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a384:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a386:	f000 fbe8 	bl	800ab5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a38a:	f000 ff59 	bl	800b240 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a38e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a390:	4618      	mov	r0, r3
 800a392:	3738      	adds	r7, #56	; 0x38
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	e000ed04 	.word	0xe000ed04

0800a39c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b090      	sub	sp, #64	; 0x40
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
 800a3a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d10a      	bne.n	800a3ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b8:	f383 8811 	msr	BASEPRI, r3
 800a3bc:	f3bf 8f6f 	isb	sy
 800a3c0:	f3bf 8f4f 	dsb	sy
 800a3c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a3c6:	bf00      	nop
 800a3c8:	e7fe      	b.n	800a3c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d103      	bne.n	800a3d8 <xQueueGenericSendFromISR+0x3c>
 800a3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d101      	bne.n	800a3dc <xQueueGenericSendFromISR+0x40>
 800a3d8:	2301      	movs	r3, #1
 800a3da:	e000      	b.n	800a3de <xQueueGenericSendFromISR+0x42>
 800a3dc:	2300      	movs	r3, #0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d10a      	bne.n	800a3f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e6:	f383 8811 	msr	BASEPRI, r3
 800a3ea:	f3bf 8f6f 	isb	sy
 800a3ee:	f3bf 8f4f 	dsb	sy
 800a3f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a3f4:	bf00      	nop
 800a3f6:	e7fe      	b.n	800a3f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d103      	bne.n	800a406 <xQueueGenericSendFromISR+0x6a>
 800a3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a402:	2b01      	cmp	r3, #1
 800a404:	d101      	bne.n	800a40a <xQueueGenericSendFromISR+0x6e>
 800a406:	2301      	movs	r3, #1
 800a408:	e000      	b.n	800a40c <xQueueGenericSendFromISR+0x70>
 800a40a:	2300      	movs	r3, #0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d10a      	bne.n	800a426 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a414:	f383 8811 	msr	BASEPRI, r3
 800a418:	f3bf 8f6f 	isb	sy
 800a41c:	f3bf 8f4f 	dsb	sy
 800a420:	623b      	str	r3, [r7, #32]
}
 800a422:	bf00      	nop
 800a424:	e7fe      	b.n	800a424 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a426:	f002 fa27 	bl	800c878 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a42a:	f3ef 8211 	mrs	r2, BASEPRI
 800a42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a432:	f383 8811 	msr	BASEPRI, r3
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	61fa      	str	r2, [r7, #28]
 800a440:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a442:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a444:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a44e:	429a      	cmp	r2, r3
 800a450:	d302      	bcc.n	800a458 <xQueueGenericSendFromISR+0xbc>
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2b02      	cmp	r3, #2
 800a456:	d12f      	bne.n	800a4b8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a45e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a466:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a468:	683a      	ldr	r2, [r7, #0]
 800a46a:	68b9      	ldr	r1, [r7, #8]
 800a46c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a46e:	f000 fae4 	bl	800aa3a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a472:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a47a:	d112      	bne.n	800a4a2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a480:	2b00      	cmp	r3, #0
 800a482:	d016      	beq.n	800a4b2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a486:	3324      	adds	r3, #36	; 0x24
 800a488:	4618      	mov	r0, r3
 800a48a:	f001 f8f5 	bl	800b678 <xTaskRemoveFromEventList>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d00e      	beq.n	800a4b2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00b      	beq.n	800a4b2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2201      	movs	r2, #1
 800a49e:	601a      	str	r2, [r3, #0]
 800a4a0:	e007      	b.n	800a4b2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a4a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	b25a      	sxtb	r2, r3
 800a4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a4b6:	e001      	b.n	800a4bc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4be:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a4c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a4c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3740      	adds	r7, #64	; 0x40
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b08e      	sub	sp, #56	; 0x38
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d10a      	bne.n	800a4fc <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	623b      	str	r3, [r7, #32]
}
 800a4f8:	bf00      	nop
 800a4fa:	e7fe      	b.n	800a4fa <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a500:	2b00      	cmp	r3, #0
 800a502:	d00a      	beq.n	800a51a <xQueueGiveFromISR+0x48>
	__asm volatile
 800a504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a508:	f383 8811 	msr	BASEPRI, r3
 800a50c:	f3bf 8f6f 	isb	sy
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	61fb      	str	r3, [r7, #28]
}
 800a516:	bf00      	nop
 800a518:	e7fe      	b.n	800a518 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d103      	bne.n	800a52a <xQueueGiveFromISR+0x58>
 800a522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d101      	bne.n	800a52e <xQueueGiveFromISR+0x5c>
 800a52a:	2301      	movs	r3, #1
 800a52c:	e000      	b.n	800a530 <xQueueGiveFromISR+0x5e>
 800a52e:	2300      	movs	r3, #0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d10a      	bne.n	800a54a <xQueueGiveFromISR+0x78>
	__asm volatile
 800a534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a538:	f383 8811 	msr	BASEPRI, r3
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	61bb      	str	r3, [r7, #24]
}
 800a546:	bf00      	nop
 800a548:	e7fe      	b.n	800a548 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a54a:	f002 f995 	bl	800c878 <vPortValidateInterruptPriority>
	__asm volatile
 800a54e:	f3ef 8211 	mrs	r2, BASEPRI
 800a552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a556:	f383 8811 	msr	BASEPRI, r3
 800a55a:	f3bf 8f6f 	isb	sy
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	617a      	str	r2, [r7, #20]
 800a564:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a566:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a568:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a56e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a576:	429a      	cmp	r2, r3
 800a578:	d22b      	bcs.n	800a5d2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a586:	1c5a      	adds	r2, r3, #1
 800a588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a58c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a590:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a594:	d112      	bne.n	800a5bc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d016      	beq.n	800a5cc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a0:	3324      	adds	r3, #36	; 0x24
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f001 f868 	bl	800b678 <xTaskRemoveFromEventList>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d00e      	beq.n	800a5cc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00b      	beq.n	800a5cc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	601a      	str	r2, [r3, #0]
 800a5ba:	e007      	b.n	800a5cc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a5bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	b25a      	sxtb	r2, r3
 800a5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	637b      	str	r3, [r7, #52]	; 0x34
 800a5d0:	e001      	b.n	800a5d6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	637b      	str	r3, [r7, #52]	; 0x34
 800a5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f383 8811 	msr	BASEPRI, r3
}
 800a5e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a5e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3738      	adds	r7, #56	; 0x38
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b08c      	sub	sp, #48	; 0x30
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	60b9      	str	r1, [r7, #8]
 800a5f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a602:	2b00      	cmp	r3, #0
 800a604:	d10a      	bne.n	800a61c <xQueueReceive+0x30>
	__asm volatile
 800a606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60a:	f383 8811 	msr	BASEPRI, r3
 800a60e:	f3bf 8f6f 	isb	sy
 800a612:	f3bf 8f4f 	dsb	sy
 800a616:	623b      	str	r3, [r7, #32]
}
 800a618:	bf00      	nop
 800a61a:	e7fe      	b.n	800a61a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d103      	bne.n	800a62a <xQueueReceive+0x3e>
 800a622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a626:	2b00      	cmp	r3, #0
 800a628:	d101      	bne.n	800a62e <xQueueReceive+0x42>
 800a62a:	2301      	movs	r3, #1
 800a62c:	e000      	b.n	800a630 <xQueueReceive+0x44>
 800a62e:	2300      	movs	r3, #0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d10a      	bne.n	800a64a <xQueueReceive+0x5e>
	__asm volatile
 800a634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a638:	f383 8811 	msr	BASEPRI, r3
 800a63c:	f3bf 8f6f 	isb	sy
 800a640:	f3bf 8f4f 	dsb	sy
 800a644:	61fb      	str	r3, [r7, #28]
}
 800a646:	bf00      	nop
 800a648:	e7fe      	b.n	800a648 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a64a:	f001 f9d7 	bl	800b9fc <xTaskGetSchedulerState>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d102      	bne.n	800a65a <xQueueReceive+0x6e>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d101      	bne.n	800a65e <xQueueReceive+0x72>
 800a65a:	2301      	movs	r3, #1
 800a65c:	e000      	b.n	800a660 <xQueueReceive+0x74>
 800a65e:	2300      	movs	r3, #0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d10a      	bne.n	800a67a <xQueueReceive+0x8e>
	__asm volatile
 800a664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a668:	f383 8811 	msr	BASEPRI, r3
 800a66c:	f3bf 8f6f 	isb	sy
 800a670:	f3bf 8f4f 	dsb	sy
 800a674:	61bb      	str	r3, [r7, #24]
}
 800a676:	bf00      	nop
 800a678:	e7fe      	b.n	800a678 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a67a:	f002 f81b 	bl	800c6b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a682:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a686:	2b00      	cmp	r3, #0
 800a688:	d01f      	beq.n	800a6ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a68a:	68b9      	ldr	r1, [r7, #8]
 800a68c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a68e:	f000 fa3e 	bl	800ab0e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a694:	1e5a      	subs	r2, r3, #1
 800a696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a698:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69c:	691b      	ldr	r3, [r3, #16]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d00f      	beq.n	800a6c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a4:	3310      	adds	r3, #16
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f000 ffe6 	bl	800b678 <xTaskRemoveFromEventList>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d007      	beq.n	800a6c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a6b2:	4b3d      	ldr	r3, [pc, #244]	; (800a7a8 <xQueueReceive+0x1bc>)
 800a6b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6b8:	601a      	str	r2, [r3, #0]
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a6c2:	f002 f827 	bl	800c714 <vPortExitCritical>
				return pdPASS;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e069      	b.n	800a79e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d103      	bne.n	800a6d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6d0:	f002 f820 	bl	800c714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	e062      	b.n	800a79e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d106      	bne.n	800a6ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6de:	f107 0310 	add.w	r3, r7, #16
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f001 f82c 	bl	800b740 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6ec:	f002 f812 	bl	800c714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6f0:	f000 fd98 	bl	800b224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6f4:	f001 ffde 	bl	800c6b4 <vPortEnterCritical>
 800a6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6fe:	b25b      	sxtb	r3, r3
 800a700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a704:	d103      	bne.n	800a70e <xQueueReceive+0x122>
 800a706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a708:	2200      	movs	r2, #0
 800a70a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a710:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a714:	b25b      	sxtb	r3, r3
 800a716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a71a:	d103      	bne.n	800a724 <xQueueReceive+0x138>
 800a71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71e:	2200      	movs	r2, #0
 800a720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a724:	f001 fff6 	bl	800c714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a728:	1d3a      	adds	r2, r7, #4
 800a72a:	f107 0310 	add.w	r3, r7, #16
 800a72e:	4611      	mov	r1, r2
 800a730:	4618      	mov	r0, r3
 800a732:	f001 f81b 	bl	800b76c <xTaskCheckForTimeOut>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d123      	bne.n	800a784 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a73c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a73e:	f000 fa5e 	bl	800abfe <prvIsQueueEmpty>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d017      	beq.n	800a778 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74a:	3324      	adds	r3, #36	; 0x24
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	4611      	mov	r1, r2
 800a750:	4618      	mov	r0, r3
 800a752:	f000 ff41 	bl	800b5d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a756:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a758:	f000 f9ff 	bl	800ab5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a75c:	f000 fd70 	bl	800b240 <xTaskResumeAll>
 800a760:	4603      	mov	r3, r0
 800a762:	2b00      	cmp	r3, #0
 800a764:	d189      	bne.n	800a67a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a766:	4b10      	ldr	r3, [pc, #64]	; (800a7a8 <xQueueReceive+0x1bc>)
 800a768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a76c:	601a      	str	r2, [r3, #0]
 800a76e:	f3bf 8f4f 	dsb	sy
 800a772:	f3bf 8f6f 	isb	sy
 800a776:	e780      	b.n	800a67a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a77a:	f000 f9ee 	bl	800ab5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a77e:	f000 fd5f 	bl	800b240 <xTaskResumeAll>
 800a782:	e77a      	b.n	800a67a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a786:	f000 f9e8 	bl	800ab5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a78a:	f000 fd59 	bl	800b240 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a78e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a790:	f000 fa35 	bl	800abfe <prvIsQueueEmpty>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	f43f af6f 	beq.w	800a67a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a79c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3730      	adds	r7, #48	; 0x30
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	e000ed04 	.word	0xe000ed04

0800a7ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b08e      	sub	sp, #56	; 0x38
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d10a      	bne.n	800a7de <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7cc:	f383 8811 	msr	BASEPRI, r3
 800a7d0:	f3bf 8f6f 	isb	sy
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	623b      	str	r3, [r7, #32]
}
 800a7da:	bf00      	nop
 800a7dc:	e7fe      	b.n	800a7dc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00a      	beq.n	800a7fc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ea:	f383 8811 	msr	BASEPRI, r3
 800a7ee:	f3bf 8f6f 	isb	sy
 800a7f2:	f3bf 8f4f 	dsb	sy
 800a7f6:	61fb      	str	r3, [r7, #28]
}
 800a7f8:	bf00      	nop
 800a7fa:	e7fe      	b.n	800a7fa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7fc:	f001 f8fe 	bl	800b9fc <xTaskGetSchedulerState>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d102      	bne.n	800a80c <xQueueSemaphoreTake+0x60>
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d101      	bne.n	800a810 <xQueueSemaphoreTake+0x64>
 800a80c:	2301      	movs	r3, #1
 800a80e:	e000      	b.n	800a812 <xQueueSemaphoreTake+0x66>
 800a810:	2300      	movs	r3, #0
 800a812:	2b00      	cmp	r3, #0
 800a814:	d10a      	bne.n	800a82c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81a:	f383 8811 	msr	BASEPRI, r3
 800a81e:	f3bf 8f6f 	isb	sy
 800a822:	f3bf 8f4f 	dsb	sy
 800a826:	61bb      	str	r3, [r7, #24]
}
 800a828:	bf00      	nop
 800a82a:	e7fe      	b.n	800a82a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a82c:	f001 ff42 	bl	800c6b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a834:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d024      	beq.n	800a886 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83e:	1e5a      	subs	r2, r3, #1
 800a840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a842:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d104      	bne.n	800a856 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a84c:	f001 fa4c 	bl	800bce8 <pvTaskIncrementMutexHeldCount>
 800a850:	4602      	mov	r2, r0
 800a852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a854:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a858:	691b      	ldr	r3, [r3, #16]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00f      	beq.n	800a87e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a860:	3310      	adds	r3, #16
 800a862:	4618      	mov	r0, r3
 800a864:	f000 ff08 	bl	800b678 <xTaskRemoveFromEventList>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d007      	beq.n	800a87e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a86e:	4b54      	ldr	r3, [pc, #336]	; (800a9c0 <xQueueSemaphoreTake+0x214>)
 800a870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a874:	601a      	str	r2, [r3, #0]
 800a876:	f3bf 8f4f 	dsb	sy
 800a87a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a87e:	f001 ff49 	bl	800c714 <vPortExitCritical>
				return pdPASS;
 800a882:	2301      	movs	r3, #1
 800a884:	e097      	b.n	800a9b6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d111      	bne.n	800a8b0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00a      	beq.n	800a8a8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a896:	f383 8811 	msr	BASEPRI, r3
 800a89a:	f3bf 8f6f 	isb	sy
 800a89e:	f3bf 8f4f 	dsb	sy
 800a8a2:	617b      	str	r3, [r7, #20]
}
 800a8a4:	bf00      	nop
 800a8a6:	e7fe      	b.n	800a8a6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a8a8:	f001 ff34 	bl	800c714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	e082      	b.n	800a9b6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d106      	bne.n	800a8c4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a8b6:	f107 030c 	add.w	r3, r7, #12
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f000 ff40 	bl	800b740 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a8c4:	f001 ff26 	bl	800c714 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a8c8:	f000 fcac 	bl	800b224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8cc:	f001 fef2 	bl	800c6b4 <vPortEnterCritical>
 800a8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8d6:	b25b      	sxtb	r3, r3
 800a8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8dc:	d103      	bne.n	800a8e6 <xQueueSemaphoreTake+0x13a>
 800a8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8ec:	b25b      	sxtb	r3, r3
 800a8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f2:	d103      	bne.n	800a8fc <xQueueSemaphoreTake+0x150>
 800a8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8fc:	f001 ff0a 	bl	800c714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a900:	463a      	mov	r2, r7
 800a902:	f107 030c 	add.w	r3, r7, #12
 800a906:	4611      	mov	r1, r2
 800a908:	4618      	mov	r0, r3
 800a90a:	f000 ff2f 	bl	800b76c <xTaskCheckForTimeOut>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d132      	bne.n	800a97a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a914:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a916:	f000 f972 	bl	800abfe <prvIsQueueEmpty>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d026      	beq.n	800a96e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d109      	bne.n	800a93c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a928:	f001 fec4 	bl	800c6b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	4618      	mov	r0, r3
 800a932:	f001 f881 	bl	800ba38 <xTaskPriorityInherit>
 800a936:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a938:	f001 feec 	bl	800c714 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a93e:	3324      	adds	r3, #36	; 0x24
 800a940:	683a      	ldr	r2, [r7, #0]
 800a942:	4611      	mov	r1, r2
 800a944:	4618      	mov	r0, r3
 800a946:	f000 fe47 	bl	800b5d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a94a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a94c:	f000 f905 	bl	800ab5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a950:	f000 fc76 	bl	800b240 <xTaskResumeAll>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	f47f af68 	bne.w	800a82c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a95c:	4b18      	ldr	r3, [pc, #96]	; (800a9c0 <xQueueSemaphoreTake+0x214>)
 800a95e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a962:	601a      	str	r2, [r3, #0]
 800a964:	f3bf 8f4f 	dsb	sy
 800a968:	f3bf 8f6f 	isb	sy
 800a96c:	e75e      	b.n	800a82c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a96e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a970:	f000 f8f3 	bl	800ab5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a974:	f000 fc64 	bl	800b240 <xTaskResumeAll>
 800a978:	e758      	b.n	800a82c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a97a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a97c:	f000 f8ed 	bl	800ab5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a980:	f000 fc5e 	bl	800b240 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a984:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a986:	f000 f93a 	bl	800abfe <prvIsQueueEmpty>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f43f af4d 	beq.w	800a82c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00d      	beq.n	800a9b4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a998:	f001 fe8c 	bl	800c6b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a99c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a99e:	f000 f834 	bl	800aa0a <prvGetDisinheritPriorityAfterTimeout>
 800a9a2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f001 f91a 	bl	800bbe4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a9b0:	f001 feb0 	bl	800c714 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a9b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3738      	adds	r7, #56	; 0x38
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	e000ed04 	.word	0xe000ed04

0800a9c4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d10a      	bne.n	800a9ec <vQueueDelete+0x28>
	__asm volatile
 800a9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9da:	f383 8811 	msr	BASEPRI, r3
 800a9de:	f3bf 8f6f 	isb	sy
 800a9e2:	f3bf 8f4f 	dsb	sy
 800a9e6:	60bb      	str	r3, [r7, #8]
}
 800a9e8:	bf00      	nop
 800a9ea:	e7fe      	b.n	800a9ea <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a9ec:	68f8      	ldr	r0, [r7, #12]
 800a9ee:	f000 f95f 	bl	800acb0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d102      	bne.n	800aa02 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f002 f847 	bl	800ca90 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800aa02:	bf00      	nop
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aa0a:	b480      	push	{r7}
 800aa0c:	b085      	sub	sp, #20
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d006      	beq.n	800aa28 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800aa24:	60fb      	str	r3, [r7, #12]
 800aa26:	e001      	b.n	800aa2c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
	}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3714      	adds	r7, #20
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr

0800aa3a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b086      	sub	sp, #24
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	60f8      	str	r0, [r7, #12]
 800aa42:	60b9      	str	r1, [r7, #8]
 800aa44:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aa46:	2300      	movs	r3, #0
 800aa48:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa4e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d10d      	bne.n	800aa74 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d14d      	bne.n	800aafc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	4618      	mov	r0, r3
 800aa66:	f001 f84f 	bl	800bb08 <xTaskPriorityDisinherit>
 800aa6a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	609a      	str	r2, [r3, #8]
 800aa72:	e043      	b.n	800aafc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d119      	bne.n	800aaae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6858      	ldr	r0, [r3, #4]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa82:	461a      	mov	r2, r3
 800aa84:	68b9      	ldr	r1, [r7, #8]
 800aa86:	f002 fa65 	bl	800cf54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	685a      	ldr	r2, [r3, #4]
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa92:	441a      	add	r2, r3
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	685a      	ldr	r2, [r3, #4]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	689b      	ldr	r3, [r3, #8]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d32b      	bcc.n	800aafc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	605a      	str	r2, [r3, #4]
 800aaac:	e026      	b.n	800aafc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	68d8      	ldr	r0, [r3, #12]
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab6:	461a      	mov	r2, r3
 800aab8:	68b9      	ldr	r1, [r7, #8]
 800aaba:	f002 fa4b 	bl	800cf54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	68da      	ldr	r2, [r3, #12]
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac6:	425b      	negs	r3, r3
 800aac8:	441a      	add	r2, r3
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	68da      	ldr	r2, [r3, #12]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d207      	bcs.n	800aaea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	689a      	ldr	r2, [r3, #8]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae2:	425b      	negs	r3, r3
 800aae4:	441a      	add	r2, r3
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	d105      	bne.n	800aafc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d002      	beq.n	800aafc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	3b01      	subs	r3, #1
 800aafa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	1c5a      	adds	r2, r3, #1
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ab04:	697b      	ldr	r3, [r7, #20]
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3718      	adds	r7, #24
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}

0800ab0e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ab0e:	b580      	push	{r7, lr}
 800ab10:	b082      	sub	sp, #8
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
 800ab16:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d018      	beq.n	800ab52 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	68da      	ldr	r2, [r3, #12]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab28:	441a      	add	r2, r3
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	68da      	ldr	r2, [r3, #12]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	689b      	ldr	r3, [r3, #8]
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d303      	bcc.n	800ab42 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	68d9      	ldr	r1, [r3, #12]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	6838      	ldr	r0, [r7, #0]
 800ab4e:	f002 fa01 	bl	800cf54 <memcpy>
	}
}
 800ab52:	bf00      	nop
 800ab54:	3708      	adds	r7, #8
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b084      	sub	sp, #16
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ab62:	f001 fda7 	bl	800c6b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab6c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab6e:	e011      	b.n	800ab94 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d012      	beq.n	800ab9e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	3324      	adds	r3, #36	; 0x24
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f000 fd7b 	bl	800b678 <xTaskRemoveFromEventList>
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d001      	beq.n	800ab8c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ab88:	f000 fe52 	bl	800b830 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ab8c:	7bfb      	ldrb	r3, [r7, #15]
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	dce9      	bgt.n	800ab70 <prvUnlockQueue+0x16>
 800ab9c:	e000      	b.n	800aba0 <prvUnlockQueue+0x46>
					break;
 800ab9e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	22ff      	movs	r2, #255	; 0xff
 800aba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aba8:	f001 fdb4 	bl	800c714 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800abac:	f001 fd82 	bl	800c6b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abb6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800abb8:	e011      	b.n	800abde <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	691b      	ldr	r3, [r3, #16]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d012      	beq.n	800abe8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	3310      	adds	r3, #16
 800abc6:	4618      	mov	r0, r3
 800abc8:	f000 fd56 	bl	800b678 <xTaskRemoveFromEventList>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d001      	beq.n	800abd6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800abd2:	f000 fe2d 	bl	800b830 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800abd6:	7bbb      	ldrb	r3, [r7, #14]
 800abd8:	3b01      	subs	r3, #1
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800abde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	dce9      	bgt.n	800abba <prvUnlockQueue+0x60>
 800abe6:	e000      	b.n	800abea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800abe8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	22ff      	movs	r2, #255	; 0xff
 800abee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800abf2:	f001 fd8f 	bl	800c714 <vPortExitCritical>
}
 800abf6:	bf00      	nop
 800abf8:	3710      	adds	r7, #16
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}

0800abfe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800abfe:	b580      	push	{r7, lr}
 800ac00:	b084      	sub	sp, #16
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac06:	f001 fd55 	bl	800c6b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d102      	bne.n	800ac18 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ac12:	2301      	movs	r3, #1
 800ac14:	60fb      	str	r3, [r7, #12]
 800ac16:	e001      	b.n	800ac1c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac1c:	f001 fd7a 	bl	800c714 <vPortExitCritical>

	return xReturn;
 800ac20:	68fb      	ldr	r3, [r7, #12]
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3710      	adds	r7, #16
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b084      	sub	sp, #16
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac32:	f001 fd3f 	bl	800c6b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d102      	bne.n	800ac48 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ac42:	2301      	movs	r3, #1
 800ac44:	60fb      	str	r3, [r7, #12]
 800ac46:	e001      	b.n	800ac4c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac4c:	f001 fd62 	bl	800c714 <vPortExitCritical>

	return xReturn;
 800ac50:	68fb      	ldr	r3, [r7, #12]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
	...

0800ac5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b085      	sub	sp, #20
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac66:	2300      	movs	r3, #0
 800ac68:	60fb      	str	r3, [r7, #12]
 800ac6a:	e014      	b.n	800ac96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ac6c:	4a0f      	ldr	r2, [pc, #60]	; (800acac <vQueueAddToRegistry+0x50>)
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10b      	bne.n	800ac90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ac78:	490c      	ldr	r1, [pc, #48]	; (800acac <vQueueAddToRegistry+0x50>)
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	683a      	ldr	r2, [r7, #0]
 800ac7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ac82:	4a0a      	ldr	r2, [pc, #40]	; (800acac <vQueueAddToRegistry+0x50>)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	00db      	lsls	r3, r3, #3
 800ac88:	4413      	add	r3, r2
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ac8e:	e006      	b.n	800ac9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	3301      	adds	r3, #1
 800ac94:	60fb      	str	r3, [r7, #12]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2b07      	cmp	r3, #7
 800ac9a:	d9e7      	bls.n	800ac6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ac9c:	bf00      	nop
 800ac9e:	bf00      	nop
 800aca0:	3714      	adds	r7, #20
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop
 800acac:	20002164 	.word	0x20002164

0800acb0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800acb0:	b480      	push	{r7}
 800acb2:	b085      	sub	sp, #20
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800acb8:	2300      	movs	r3, #0
 800acba:	60fb      	str	r3, [r7, #12]
 800acbc:	e016      	b.n	800acec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800acbe:	4a10      	ldr	r2, [pc, #64]	; (800ad00 <vQueueUnregisterQueue+0x50>)
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	00db      	lsls	r3, r3, #3
 800acc4:	4413      	add	r3, r2
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	429a      	cmp	r2, r3
 800accc:	d10b      	bne.n	800ace6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800acce:	4a0c      	ldr	r2, [pc, #48]	; (800ad00 <vQueueUnregisterQueue+0x50>)
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2100      	movs	r1, #0
 800acd4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800acd8:	4a09      	ldr	r2, [pc, #36]	; (800ad00 <vQueueUnregisterQueue+0x50>)
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	00db      	lsls	r3, r3, #3
 800acde:	4413      	add	r3, r2
 800ace0:	2200      	movs	r2, #0
 800ace2:	605a      	str	r2, [r3, #4]
				break;
 800ace4:	e006      	b.n	800acf4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	3301      	adds	r3, #1
 800acea:	60fb      	str	r3, [r7, #12]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2b07      	cmp	r3, #7
 800acf0:	d9e5      	bls.n	800acbe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800acf2:	bf00      	nop
 800acf4:	bf00      	nop
 800acf6:	3714      	adds	r7, #20
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr
 800ad00:	20002164 	.word	0x20002164

0800ad04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b086      	sub	sp, #24
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	60b9      	str	r1, [r7, #8]
 800ad0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ad14:	f001 fcce 	bl	800c6b4 <vPortEnterCritical>
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad1e:	b25b      	sxtb	r3, r3
 800ad20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad24:	d103      	bne.n	800ad2e <vQueueWaitForMessageRestricted+0x2a>
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad34:	b25b      	sxtb	r3, r3
 800ad36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad3a:	d103      	bne.n	800ad44 <vQueueWaitForMessageRestricted+0x40>
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad44:	f001 fce6 	bl	800c714 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d106      	bne.n	800ad5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	3324      	adds	r3, #36	; 0x24
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	68b9      	ldr	r1, [r7, #8]
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f000 fc61 	bl	800b620 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ad5e:	6978      	ldr	r0, [r7, #20]
 800ad60:	f7ff fefb 	bl	800ab5a <prvUnlockQueue>
	}
 800ad64:	bf00      	nop
 800ad66:	3718      	adds	r7, #24
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b08e      	sub	sp, #56	; 0x38
 800ad70:	af04      	add	r7, sp, #16
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	607a      	str	r2, [r7, #4]
 800ad78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ad7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d10a      	bne.n	800ad96 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ad80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad84:	f383 8811 	msr	BASEPRI, r3
 800ad88:	f3bf 8f6f 	isb	sy
 800ad8c:	f3bf 8f4f 	dsb	sy
 800ad90:	623b      	str	r3, [r7, #32]
}
 800ad92:	bf00      	nop
 800ad94:	e7fe      	b.n	800ad94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ad96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10a      	bne.n	800adb2 <xTaskCreateStatic+0x46>
	__asm volatile
 800ad9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada0:	f383 8811 	msr	BASEPRI, r3
 800ada4:	f3bf 8f6f 	isb	sy
 800ada8:	f3bf 8f4f 	dsb	sy
 800adac:	61fb      	str	r3, [r7, #28]
}
 800adae:	bf00      	nop
 800adb0:	e7fe      	b.n	800adb0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800adb2:	23bc      	movs	r3, #188	; 0xbc
 800adb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	2bbc      	cmp	r3, #188	; 0xbc
 800adba:	d00a      	beq.n	800add2 <xTaskCreateStatic+0x66>
	__asm volatile
 800adbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc0:	f383 8811 	msr	BASEPRI, r3
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	61bb      	str	r3, [r7, #24]
}
 800adce:	bf00      	nop
 800add0:	e7fe      	b.n	800add0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800add2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800add4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add6:	2b00      	cmp	r3, #0
 800add8:	d01e      	beq.n	800ae18 <xTaskCreateStatic+0xac>
 800adda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800addc:	2b00      	cmp	r3, #0
 800adde:	d01b      	beq.n	800ae18 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ade0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ade4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ade8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800adea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adec:	2202      	movs	r2, #2
 800adee:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800adf2:	2300      	movs	r3, #0
 800adf4:	9303      	str	r3, [sp, #12]
 800adf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf8:	9302      	str	r3, [sp, #8]
 800adfa:	f107 0314 	add.w	r3, r7, #20
 800adfe:	9301      	str	r3, [sp, #4]
 800ae00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae02:	9300      	str	r3, [sp, #0]
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	68b9      	ldr	r1, [r7, #8]
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f000 f850 	bl	800aeb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae12:	f000 f8f3 	bl	800affc <prvAddNewTaskToReadyList>
 800ae16:	e001      	b.n	800ae1c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ae1c:	697b      	ldr	r3, [r7, #20]
	}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3728      	adds	r7, #40	; 0x28
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ae26:	b580      	push	{r7, lr}
 800ae28:	b08c      	sub	sp, #48	; 0x30
 800ae2a:	af04      	add	r7, sp, #16
 800ae2c:	60f8      	str	r0, [r7, #12]
 800ae2e:	60b9      	str	r1, [r7, #8]
 800ae30:	603b      	str	r3, [r7, #0]
 800ae32:	4613      	mov	r3, r2
 800ae34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ae36:	88fb      	ldrh	r3, [r7, #6]
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f001 fd5c 	bl	800c8f8 <pvPortMalloc>
 800ae40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00e      	beq.n	800ae66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ae48:	20bc      	movs	r0, #188	; 0xbc
 800ae4a:	f001 fd55 	bl	800c8f8 <pvPortMalloc>
 800ae4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d003      	beq.n	800ae5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	697a      	ldr	r2, [r7, #20]
 800ae5a:	631a      	str	r2, [r3, #48]	; 0x30
 800ae5c:	e005      	b.n	800ae6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ae5e:	6978      	ldr	r0, [r7, #20]
 800ae60:	f001 fe16 	bl	800ca90 <vPortFree>
 800ae64:	e001      	b.n	800ae6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ae66:	2300      	movs	r3, #0
 800ae68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d017      	beq.n	800aea0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae78:	88fa      	ldrh	r2, [r7, #6]
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	9303      	str	r3, [sp, #12]
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	9302      	str	r3, [sp, #8]
 800ae82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae84:	9301      	str	r3, [sp, #4]
 800ae86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	68b9      	ldr	r1, [r7, #8]
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	f000 f80e 	bl	800aeb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae94:	69f8      	ldr	r0, [r7, #28]
 800ae96:	f000 f8b1 	bl	800affc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	61bb      	str	r3, [r7, #24]
 800ae9e:	e002      	b.n	800aea6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aea0:	f04f 33ff 	mov.w	r3, #4294967295
 800aea4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aea6:	69bb      	ldr	r3, [r7, #24]
	}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3720      	adds	r7, #32
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b088      	sub	sp, #32
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]
 800aebc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	461a      	mov	r2, r3
 800aec8:	21a5      	movs	r1, #165	; 0xa5
 800aeca:	f002 f851 	bl	800cf70 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aed8:	3b01      	subs	r3, #1
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	4413      	add	r3, r2
 800aede:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	f023 0307 	bic.w	r3, r3, #7
 800aee6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	f003 0307 	and.w	r3, r3, #7
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d00a      	beq.n	800af08 <prvInitialiseNewTask+0x58>
	__asm volatile
 800aef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef6:	f383 8811 	msr	BASEPRI, r3
 800aefa:	f3bf 8f6f 	isb	sy
 800aefe:	f3bf 8f4f 	dsb	sy
 800af02:	617b      	str	r3, [r7, #20]
}
 800af04:	bf00      	nop
 800af06:	e7fe      	b.n	800af06 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d01f      	beq.n	800af4e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af0e:	2300      	movs	r3, #0
 800af10:	61fb      	str	r3, [r7, #28]
 800af12:	e012      	b.n	800af3a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af14:	68ba      	ldr	r2, [r7, #8]
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	4413      	add	r3, r2
 800af1a:	7819      	ldrb	r1, [r3, #0]
 800af1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	4413      	add	r3, r2
 800af22:	3334      	adds	r3, #52	; 0x34
 800af24:	460a      	mov	r2, r1
 800af26:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	69fb      	ldr	r3, [r7, #28]
 800af2c:	4413      	add	r3, r2
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d006      	beq.n	800af42 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	3301      	adds	r3, #1
 800af38:	61fb      	str	r3, [r7, #28]
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	2b0f      	cmp	r3, #15
 800af3e:	d9e9      	bls.n	800af14 <prvInitialiseNewTask+0x64>
 800af40:	e000      	b.n	800af44 <prvInitialiseNewTask+0x94>
			{
				break;
 800af42:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800af44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af46:	2200      	movs	r2, #0
 800af48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af4c:	e003      	b.n	800af56 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800af4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af50:	2200      	movs	r2, #0
 800af52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800af56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af58:	2b37      	cmp	r3, #55	; 0x37
 800af5a:	d901      	bls.n	800af60 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af5c:	2337      	movs	r3, #55	; 0x37
 800af5e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af64:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af6a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800af6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6e:	2200      	movs	r2, #0
 800af70:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af74:	3304      	adds	r3, #4
 800af76:	4618      	mov	r0, r3
 800af78:	f7fe fed6 	bl	8009d28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7e:	3318      	adds	r3, #24
 800af80:	4618      	mov	r0, r3
 800af82:	f7fe fed1 	bl	8009d28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800af92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af9a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800af9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9e:	2200      	movs	r2, #0
 800afa0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800afa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa6:	2200      	movs	r2, #0
 800afa8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800afac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afae:	3354      	adds	r3, #84	; 0x54
 800afb0:	2260      	movs	r2, #96	; 0x60
 800afb2:	2100      	movs	r1, #0
 800afb4:	4618      	mov	r0, r3
 800afb6:	f001 ffdb 	bl	800cf70 <memset>
 800afba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afbc:	4a0c      	ldr	r2, [pc, #48]	; (800aff0 <prvInitialiseNewTask+0x140>)
 800afbe:	659a      	str	r2, [r3, #88]	; 0x58
 800afc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc2:	4a0c      	ldr	r2, [pc, #48]	; (800aff4 <prvInitialiseNewTask+0x144>)
 800afc4:	65da      	str	r2, [r3, #92]	; 0x5c
 800afc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc8:	4a0b      	ldr	r2, [pc, #44]	; (800aff8 <prvInitialiseNewTask+0x148>)
 800afca:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800afcc:	683a      	ldr	r2, [r7, #0]
 800afce:	68f9      	ldr	r1, [r7, #12]
 800afd0:	69b8      	ldr	r0, [r7, #24]
 800afd2:	f001 fa3f 	bl	800c454 <pxPortInitialiseStack>
 800afd6:	4602      	mov	r2, r0
 800afd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afda:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800afdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d002      	beq.n	800afe8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800afe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afe6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afe8:	bf00      	nop
 800afea:	3720      	adds	r7, #32
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	0800ed98 	.word	0x0800ed98
 800aff4:	0800edb8 	.word	0x0800edb8
 800aff8:	0800ed78 	.word	0x0800ed78

0800affc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b004:	f001 fb56 	bl	800c6b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b008:	4b2d      	ldr	r3, [pc, #180]	; (800b0c0 <prvAddNewTaskToReadyList+0xc4>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	3301      	adds	r3, #1
 800b00e:	4a2c      	ldr	r2, [pc, #176]	; (800b0c0 <prvAddNewTaskToReadyList+0xc4>)
 800b010:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b012:	4b2c      	ldr	r3, [pc, #176]	; (800b0c4 <prvAddNewTaskToReadyList+0xc8>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d109      	bne.n	800b02e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b01a:	4a2a      	ldr	r2, [pc, #168]	; (800b0c4 <prvAddNewTaskToReadyList+0xc8>)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b020:	4b27      	ldr	r3, [pc, #156]	; (800b0c0 <prvAddNewTaskToReadyList+0xc4>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2b01      	cmp	r3, #1
 800b026:	d110      	bne.n	800b04a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b028:	f000 fc26 	bl	800b878 <prvInitialiseTaskLists>
 800b02c:	e00d      	b.n	800b04a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b02e:	4b26      	ldr	r3, [pc, #152]	; (800b0c8 <prvAddNewTaskToReadyList+0xcc>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d109      	bne.n	800b04a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b036:	4b23      	ldr	r3, [pc, #140]	; (800b0c4 <prvAddNewTaskToReadyList+0xc8>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b040:	429a      	cmp	r2, r3
 800b042:	d802      	bhi.n	800b04a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b044:	4a1f      	ldr	r2, [pc, #124]	; (800b0c4 <prvAddNewTaskToReadyList+0xc8>)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b04a:	4b20      	ldr	r3, [pc, #128]	; (800b0cc <prvAddNewTaskToReadyList+0xd0>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	3301      	adds	r3, #1
 800b050:	4a1e      	ldr	r2, [pc, #120]	; (800b0cc <prvAddNewTaskToReadyList+0xd0>)
 800b052:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b054:	4b1d      	ldr	r3, [pc, #116]	; (800b0cc <prvAddNewTaskToReadyList+0xd0>)
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b060:	4b1b      	ldr	r3, [pc, #108]	; (800b0d0 <prvAddNewTaskToReadyList+0xd4>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	429a      	cmp	r2, r3
 800b066:	d903      	bls.n	800b070 <prvAddNewTaskToReadyList+0x74>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b06c:	4a18      	ldr	r2, [pc, #96]	; (800b0d0 <prvAddNewTaskToReadyList+0xd4>)
 800b06e:	6013      	str	r3, [r2, #0]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b074:	4613      	mov	r3, r2
 800b076:	009b      	lsls	r3, r3, #2
 800b078:	4413      	add	r3, r2
 800b07a:	009b      	lsls	r3, r3, #2
 800b07c:	4a15      	ldr	r2, [pc, #84]	; (800b0d4 <prvAddNewTaskToReadyList+0xd8>)
 800b07e:	441a      	add	r2, r3
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	3304      	adds	r3, #4
 800b084:	4619      	mov	r1, r3
 800b086:	4610      	mov	r0, r2
 800b088:	f7fe fe5b 	bl	8009d42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b08c:	f001 fb42 	bl	800c714 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b090:	4b0d      	ldr	r3, [pc, #52]	; (800b0c8 <prvAddNewTaskToReadyList+0xcc>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00e      	beq.n	800b0b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b098:	4b0a      	ldr	r3, [pc, #40]	; (800b0c4 <prvAddNewTaskToReadyList+0xc8>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d207      	bcs.n	800b0b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b0a6:	4b0c      	ldr	r3, [pc, #48]	; (800b0d8 <prvAddNewTaskToReadyList+0xdc>)
 800b0a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0ac:	601a      	str	r2, [r3, #0]
 800b0ae:	f3bf 8f4f 	dsb	sy
 800b0b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0b6:	bf00      	nop
 800b0b8:	3708      	adds	r7, #8
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	20002678 	.word	0x20002678
 800b0c4:	200021a4 	.word	0x200021a4
 800b0c8:	20002684 	.word	0x20002684
 800b0cc:	20002694 	.word	0x20002694
 800b0d0:	20002680 	.word	0x20002680
 800b0d4:	200021a8 	.word	0x200021a8
 800b0d8:	e000ed04 	.word	0xe000ed04

0800b0dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d017      	beq.n	800b11e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b0ee:	4b13      	ldr	r3, [pc, #76]	; (800b13c <vTaskDelay+0x60>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d00a      	beq.n	800b10c <vTaskDelay+0x30>
	__asm volatile
 800b0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fa:	f383 8811 	msr	BASEPRI, r3
 800b0fe:	f3bf 8f6f 	isb	sy
 800b102:	f3bf 8f4f 	dsb	sy
 800b106:	60bb      	str	r3, [r7, #8]
}
 800b108:	bf00      	nop
 800b10a:	e7fe      	b.n	800b10a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b10c:	f000 f88a 	bl	800b224 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b110:	2100      	movs	r1, #0
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 fdfc 	bl	800bd10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b118:	f000 f892 	bl	800b240 <xTaskResumeAll>
 800b11c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d107      	bne.n	800b134 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b124:	4b06      	ldr	r3, [pc, #24]	; (800b140 <vTaskDelay+0x64>)
 800b126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b12a:	601a      	str	r2, [r3, #0]
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b134:	bf00      	nop
 800b136:	3710      	adds	r7, #16
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	200026a0 	.word	0x200026a0
 800b140:	e000ed04 	.word	0xe000ed04

0800b144 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b08a      	sub	sp, #40	; 0x28
 800b148:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b14a:	2300      	movs	r3, #0
 800b14c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b14e:	2300      	movs	r3, #0
 800b150:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b152:	463a      	mov	r2, r7
 800b154:	1d39      	adds	r1, r7, #4
 800b156:	f107 0308 	add.w	r3, r7, #8
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7fe fd90 	bl	8009c80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b160:	6839      	ldr	r1, [r7, #0]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	68ba      	ldr	r2, [r7, #8]
 800b166:	9202      	str	r2, [sp, #8]
 800b168:	9301      	str	r3, [sp, #4]
 800b16a:	2300      	movs	r3, #0
 800b16c:	9300      	str	r3, [sp, #0]
 800b16e:	2300      	movs	r3, #0
 800b170:	460a      	mov	r2, r1
 800b172:	4924      	ldr	r1, [pc, #144]	; (800b204 <vTaskStartScheduler+0xc0>)
 800b174:	4824      	ldr	r0, [pc, #144]	; (800b208 <vTaskStartScheduler+0xc4>)
 800b176:	f7ff fdf9 	bl	800ad6c <xTaskCreateStatic>
 800b17a:	4603      	mov	r3, r0
 800b17c:	4a23      	ldr	r2, [pc, #140]	; (800b20c <vTaskStartScheduler+0xc8>)
 800b17e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b180:	4b22      	ldr	r3, [pc, #136]	; (800b20c <vTaskStartScheduler+0xc8>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d002      	beq.n	800b18e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b188:	2301      	movs	r3, #1
 800b18a:	617b      	str	r3, [r7, #20]
 800b18c:	e001      	b.n	800b192 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b18e:	2300      	movs	r3, #0
 800b190:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	2b01      	cmp	r3, #1
 800b196:	d102      	bne.n	800b19e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b198:	f000 fe0e 	bl	800bdb8 <xTimerCreateTimerTask>
 800b19c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d11b      	bne.n	800b1dc <vTaskStartScheduler+0x98>
	__asm volatile
 800b1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a8:	f383 8811 	msr	BASEPRI, r3
 800b1ac:	f3bf 8f6f 	isb	sy
 800b1b0:	f3bf 8f4f 	dsb	sy
 800b1b4:	613b      	str	r3, [r7, #16]
}
 800b1b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b1b8:	4b15      	ldr	r3, [pc, #84]	; (800b210 <vTaskStartScheduler+0xcc>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	3354      	adds	r3, #84	; 0x54
 800b1be:	4a15      	ldr	r2, [pc, #84]	; (800b214 <vTaskStartScheduler+0xd0>)
 800b1c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b1c2:	4b15      	ldr	r3, [pc, #84]	; (800b218 <vTaskStartScheduler+0xd4>)
 800b1c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b1ca:	4b14      	ldr	r3, [pc, #80]	; (800b21c <vTaskStartScheduler+0xd8>)
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b1d0:	4b13      	ldr	r3, [pc, #76]	; (800b220 <vTaskStartScheduler+0xdc>)
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b1d6:	f001 f9cb 	bl	800c570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b1da:	e00e      	b.n	800b1fa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e2:	d10a      	bne.n	800b1fa <vTaskStartScheduler+0xb6>
	__asm volatile
 800b1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e8:	f383 8811 	msr	BASEPRI, r3
 800b1ec:	f3bf 8f6f 	isb	sy
 800b1f0:	f3bf 8f4f 	dsb	sy
 800b1f4:	60fb      	str	r3, [r7, #12]
}
 800b1f6:	bf00      	nop
 800b1f8:	e7fe      	b.n	800b1f8 <vTaskStartScheduler+0xb4>
}
 800b1fa:	bf00      	nop
 800b1fc:	3718      	adds	r7, #24
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	0800ec84 	.word	0x0800ec84
 800b208:	0800b849 	.word	0x0800b849
 800b20c:	2000269c 	.word	0x2000269c
 800b210:	200021a4 	.word	0x200021a4
 800b214:	20000010 	.word	0x20000010
 800b218:	20002698 	.word	0x20002698
 800b21c:	20002684 	.word	0x20002684
 800b220:	2000267c 	.word	0x2000267c

0800b224 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b224:	b480      	push	{r7}
 800b226:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b228:	4b04      	ldr	r3, [pc, #16]	; (800b23c <vTaskSuspendAll+0x18>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	3301      	adds	r3, #1
 800b22e:	4a03      	ldr	r2, [pc, #12]	; (800b23c <vTaskSuspendAll+0x18>)
 800b230:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b232:	bf00      	nop
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr
 800b23c:	200026a0 	.word	0x200026a0

0800b240 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b246:	2300      	movs	r3, #0
 800b248:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b24a:	2300      	movs	r3, #0
 800b24c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b24e:	4b42      	ldr	r3, [pc, #264]	; (800b358 <xTaskResumeAll+0x118>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d10a      	bne.n	800b26c <xTaskResumeAll+0x2c>
	__asm volatile
 800b256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25a:	f383 8811 	msr	BASEPRI, r3
 800b25e:	f3bf 8f6f 	isb	sy
 800b262:	f3bf 8f4f 	dsb	sy
 800b266:	603b      	str	r3, [r7, #0]
}
 800b268:	bf00      	nop
 800b26a:	e7fe      	b.n	800b26a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b26c:	f001 fa22 	bl	800c6b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b270:	4b39      	ldr	r3, [pc, #228]	; (800b358 <xTaskResumeAll+0x118>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	3b01      	subs	r3, #1
 800b276:	4a38      	ldr	r2, [pc, #224]	; (800b358 <xTaskResumeAll+0x118>)
 800b278:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b27a:	4b37      	ldr	r3, [pc, #220]	; (800b358 <xTaskResumeAll+0x118>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d162      	bne.n	800b348 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b282:	4b36      	ldr	r3, [pc, #216]	; (800b35c <xTaskResumeAll+0x11c>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d05e      	beq.n	800b348 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b28a:	e02f      	b.n	800b2ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b28c:	4b34      	ldr	r3, [pc, #208]	; (800b360 <xTaskResumeAll+0x120>)
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	68db      	ldr	r3, [r3, #12]
 800b292:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	3318      	adds	r3, #24
 800b298:	4618      	mov	r0, r3
 800b29a:	f7fe fdaf 	bl	8009dfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	3304      	adds	r3, #4
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7fe fdaa 	bl	8009dfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ac:	4b2d      	ldr	r3, [pc, #180]	; (800b364 <xTaskResumeAll+0x124>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d903      	bls.n	800b2bc <xTaskResumeAll+0x7c>
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b8:	4a2a      	ldr	r2, [pc, #168]	; (800b364 <xTaskResumeAll+0x124>)
 800b2ba:	6013      	str	r3, [r2, #0]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c0:	4613      	mov	r3, r2
 800b2c2:	009b      	lsls	r3, r3, #2
 800b2c4:	4413      	add	r3, r2
 800b2c6:	009b      	lsls	r3, r3, #2
 800b2c8:	4a27      	ldr	r2, [pc, #156]	; (800b368 <xTaskResumeAll+0x128>)
 800b2ca:	441a      	add	r2, r3
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	3304      	adds	r3, #4
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	4610      	mov	r0, r2
 800b2d4:	f7fe fd35 	bl	8009d42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2dc:	4b23      	ldr	r3, [pc, #140]	; (800b36c <xTaskResumeAll+0x12c>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d302      	bcc.n	800b2ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b2e6:	4b22      	ldr	r3, [pc, #136]	; (800b370 <xTaskResumeAll+0x130>)
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2ec:	4b1c      	ldr	r3, [pc, #112]	; (800b360 <xTaskResumeAll+0x120>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d1cb      	bne.n	800b28c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d001      	beq.n	800b2fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b2fa:	f000 fb5f 	bl	800b9bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b2fe:	4b1d      	ldr	r3, [pc, #116]	; (800b374 <xTaskResumeAll+0x134>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d010      	beq.n	800b32c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b30a:	f000 f847 	bl	800b39c <xTaskIncrementTick>
 800b30e:	4603      	mov	r3, r0
 800b310:	2b00      	cmp	r3, #0
 800b312:	d002      	beq.n	800b31a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b314:	4b16      	ldr	r3, [pc, #88]	; (800b370 <xTaskResumeAll+0x130>)
 800b316:	2201      	movs	r2, #1
 800b318:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	3b01      	subs	r3, #1
 800b31e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d1f1      	bne.n	800b30a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b326:	4b13      	ldr	r3, [pc, #76]	; (800b374 <xTaskResumeAll+0x134>)
 800b328:	2200      	movs	r2, #0
 800b32a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b32c:	4b10      	ldr	r3, [pc, #64]	; (800b370 <xTaskResumeAll+0x130>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d009      	beq.n	800b348 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b334:	2301      	movs	r3, #1
 800b336:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b338:	4b0f      	ldr	r3, [pc, #60]	; (800b378 <xTaskResumeAll+0x138>)
 800b33a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b33e:	601a      	str	r2, [r3, #0]
 800b340:	f3bf 8f4f 	dsb	sy
 800b344:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b348:	f001 f9e4 	bl	800c714 <vPortExitCritical>

	return xAlreadyYielded;
 800b34c:	68bb      	ldr	r3, [r7, #8]
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3710      	adds	r7, #16
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	200026a0 	.word	0x200026a0
 800b35c:	20002678 	.word	0x20002678
 800b360:	20002638 	.word	0x20002638
 800b364:	20002680 	.word	0x20002680
 800b368:	200021a8 	.word	0x200021a8
 800b36c:	200021a4 	.word	0x200021a4
 800b370:	2000268c 	.word	0x2000268c
 800b374:	20002688 	.word	0x20002688
 800b378:	e000ed04 	.word	0xe000ed04

0800b37c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b382:	4b05      	ldr	r3, [pc, #20]	; (800b398 <xTaskGetTickCount+0x1c>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b388:	687b      	ldr	r3, [r7, #4]
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	370c      	adds	r7, #12
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr
 800b396:	bf00      	nop
 800b398:	2000267c 	.word	0x2000267c

0800b39c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b086      	sub	sp, #24
 800b3a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3a6:	4b4f      	ldr	r3, [pc, #316]	; (800b4e4 <xTaskIncrementTick+0x148>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	f040 808f 	bne.w	800b4ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b3b0:	4b4d      	ldr	r3, [pc, #308]	; (800b4e8 <xTaskIncrementTick+0x14c>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b3b8:	4a4b      	ldr	r2, [pc, #300]	; (800b4e8 <xTaskIncrementTick+0x14c>)
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d120      	bne.n	800b406 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b3c4:	4b49      	ldr	r3, [pc, #292]	; (800b4ec <xTaskIncrementTick+0x150>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00a      	beq.n	800b3e4 <xTaskIncrementTick+0x48>
	__asm volatile
 800b3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d2:	f383 8811 	msr	BASEPRI, r3
 800b3d6:	f3bf 8f6f 	isb	sy
 800b3da:	f3bf 8f4f 	dsb	sy
 800b3de:	603b      	str	r3, [r7, #0]
}
 800b3e0:	bf00      	nop
 800b3e2:	e7fe      	b.n	800b3e2 <xTaskIncrementTick+0x46>
 800b3e4:	4b41      	ldr	r3, [pc, #260]	; (800b4ec <xTaskIncrementTick+0x150>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	60fb      	str	r3, [r7, #12]
 800b3ea:	4b41      	ldr	r3, [pc, #260]	; (800b4f0 <xTaskIncrementTick+0x154>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4a3f      	ldr	r2, [pc, #252]	; (800b4ec <xTaskIncrementTick+0x150>)
 800b3f0:	6013      	str	r3, [r2, #0]
 800b3f2:	4a3f      	ldr	r2, [pc, #252]	; (800b4f0 <xTaskIncrementTick+0x154>)
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	6013      	str	r3, [r2, #0]
 800b3f8:	4b3e      	ldr	r3, [pc, #248]	; (800b4f4 <xTaskIncrementTick+0x158>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	4a3d      	ldr	r2, [pc, #244]	; (800b4f4 <xTaskIncrementTick+0x158>)
 800b400:	6013      	str	r3, [r2, #0]
 800b402:	f000 fadb 	bl	800b9bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b406:	4b3c      	ldr	r3, [pc, #240]	; (800b4f8 <xTaskIncrementTick+0x15c>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	693a      	ldr	r2, [r7, #16]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d349      	bcc.n	800b4a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b410:	4b36      	ldr	r3, [pc, #216]	; (800b4ec <xTaskIncrementTick+0x150>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d104      	bne.n	800b424 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b41a:	4b37      	ldr	r3, [pc, #220]	; (800b4f8 <xTaskIncrementTick+0x15c>)
 800b41c:	f04f 32ff 	mov.w	r2, #4294967295
 800b420:	601a      	str	r2, [r3, #0]
					break;
 800b422:	e03f      	b.n	800b4a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b424:	4b31      	ldr	r3, [pc, #196]	; (800b4ec <xTaskIncrementTick+0x150>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	68db      	ldr	r3, [r3, #12]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b434:	693a      	ldr	r2, [r7, #16]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d203      	bcs.n	800b444 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b43c:	4a2e      	ldr	r2, [pc, #184]	; (800b4f8 <xTaskIncrementTick+0x15c>)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b442:	e02f      	b.n	800b4a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	3304      	adds	r3, #4
 800b448:	4618      	mov	r0, r3
 800b44a:	f7fe fcd7 	bl	8009dfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b452:	2b00      	cmp	r3, #0
 800b454:	d004      	beq.n	800b460 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	3318      	adds	r3, #24
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7fe fcce 	bl	8009dfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b464:	4b25      	ldr	r3, [pc, #148]	; (800b4fc <xTaskIncrementTick+0x160>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d903      	bls.n	800b474 <xTaskIncrementTick+0xd8>
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b470:	4a22      	ldr	r2, [pc, #136]	; (800b4fc <xTaskIncrementTick+0x160>)
 800b472:	6013      	str	r3, [r2, #0]
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b478:	4613      	mov	r3, r2
 800b47a:	009b      	lsls	r3, r3, #2
 800b47c:	4413      	add	r3, r2
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	4a1f      	ldr	r2, [pc, #124]	; (800b500 <xTaskIncrementTick+0x164>)
 800b482:	441a      	add	r2, r3
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	3304      	adds	r3, #4
 800b488:	4619      	mov	r1, r3
 800b48a:	4610      	mov	r0, r2
 800b48c:	f7fe fc59 	bl	8009d42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b494:	4b1b      	ldr	r3, [pc, #108]	; (800b504 <xTaskIncrementTick+0x168>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d3b8      	bcc.n	800b410 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4a2:	e7b5      	b.n	800b410 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b4a4:	4b17      	ldr	r3, [pc, #92]	; (800b504 <xTaskIncrementTick+0x168>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4aa:	4915      	ldr	r1, [pc, #84]	; (800b500 <xTaskIncrementTick+0x164>)
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	4413      	add	r3, r2
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	440b      	add	r3, r1
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d901      	bls.n	800b4c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b4c0:	4b11      	ldr	r3, [pc, #68]	; (800b508 <xTaskIncrementTick+0x16c>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d007      	beq.n	800b4d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	617b      	str	r3, [r7, #20]
 800b4cc:	e004      	b.n	800b4d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b4ce:	4b0f      	ldr	r3, [pc, #60]	; (800b50c <xTaskIncrementTick+0x170>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	4a0d      	ldr	r2, [pc, #52]	; (800b50c <xTaskIncrementTick+0x170>)
 800b4d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b4d8:	697b      	ldr	r3, [r7, #20]
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3718      	adds	r7, #24
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	200026a0 	.word	0x200026a0
 800b4e8:	2000267c 	.word	0x2000267c
 800b4ec:	20002630 	.word	0x20002630
 800b4f0:	20002634 	.word	0x20002634
 800b4f4:	20002690 	.word	0x20002690
 800b4f8:	20002698 	.word	0x20002698
 800b4fc:	20002680 	.word	0x20002680
 800b500:	200021a8 	.word	0x200021a8
 800b504:	200021a4 	.word	0x200021a4
 800b508:	2000268c 	.word	0x2000268c
 800b50c:	20002688 	.word	0x20002688

0800b510 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b510:	b480      	push	{r7}
 800b512:	b085      	sub	sp, #20
 800b514:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b516:	4b2a      	ldr	r3, [pc, #168]	; (800b5c0 <vTaskSwitchContext+0xb0>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d003      	beq.n	800b526 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b51e:	4b29      	ldr	r3, [pc, #164]	; (800b5c4 <vTaskSwitchContext+0xb4>)
 800b520:	2201      	movs	r2, #1
 800b522:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b524:	e046      	b.n	800b5b4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b526:	4b27      	ldr	r3, [pc, #156]	; (800b5c4 <vTaskSwitchContext+0xb4>)
 800b528:	2200      	movs	r2, #0
 800b52a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b52c:	4b26      	ldr	r3, [pc, #152]	; (800b5c8 <vTaskSwitchContext+0xb8>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	60fb      	str	r3, [r7, #12]
 800b532:	e010      	b.n	800b556 <vTaskSwitchContext+0x46>
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d10a      	bne.n	800b550 <vTaskSwitchContext+0x40>
	__asm volatile
 800b53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53e:	f383 8811 	msr	BASEPRI, r3
 800b542:	f3bf 8f6f 	isb	sy
 800b546:	f3bf 8f4f 	dsb	sy
 800b54a:	607b      	str	r3, [r7, #4]
}
 800b54c:	bf00      	nop
 800b54e:	e7fe      	b.n	800b54e <vTaskSwitchContext+0x3e>
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	3b01      	subs	r3, #1
 800b554:	60fb      	str	r3, [r7, #12]
 800b556:	491d      	ldr	r1, [pc, #116]	; (800b5cc <vTaskSwitchContext+0xbc>)
 800b558:	68fa      	ldr	r2, [r7, #12]
 800b55a:	4613      	mov	r3, r2
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	4413      	add	r3, r2
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	440b      	add	r3, r1
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d0e4      	beq.n	800b534 <vTaskSwitchContext+0x24>
 800b56a:	68fa      	ldr	r2, [r7, #12]
 800b56c:	4613      	mov	r3, r2
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	4413      	add	r3, r2
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	4a15      	ldr	r2, [pc, #84]	; (800b5cc <vTaskSwitchContext+0xbc>)
 800b576:	4413      	add	r3, r2
 800b578:	60bb      	str	r3, [r7, #8]
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	685a      	ldr	r2, [r3, #4]
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	605a      	str	r2, [r3, #4]
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	685a      	ldr	r2, [r3, #4]
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	3308      	adds	r3, #8
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d104      	bne.n	800b59a <vTaskSwitchContext+0x8a>
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	685a      	ldr	r2, [r3, #4]
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	605a      	str	r2, [r3, #4]
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	4a0b      	ldr	r2, [pc, #44]	; (800b5d0 <vTaskSwitchContext+0xc0>)
 800b5a2:	6013      	str	r3, [r2, #0]
 800b5a4:	4a08      	ldr	r2, [pc, #32]	; (800b5c8 <vTaskSwitchContext+0xb8>)
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b5aa:	4b09      	ldr	r3, [pc, #36]	; (800b5d0 <vTaskSwitchContext+0xc0>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	3354      	adds	r3, #84	; 0x54
 800b5b0:	4a08      	ldr	r2, [pc, #32]	; (800b5d4 <vTaskSwitchContext+0xc4>)
 800b5b2:	6013      	str	r3, [r2, #0]
}
 800b5b4:	bf00      	nop
 800b5b6:	3714      	adds	r7, #20
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr
 800b5c0:	200026a0 	.word	0x200026a0
 800b5c4:	2000268c 	.word	0x2000268c
 800b5c8:	20002680 	.word	0x20002680
 800b5cc:	200021a8 	.word	0x200021a8
 800b5d0:	200021a4 	.word	0x200021a4
 800b5d4:	20000010 	.word	0x20000010

0800b5d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d10a      	bne.n	800b5fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ec:	f383 8811 	msr	BASEPRI, r3
 800b5f0:	f3bf 8f6f 	isb	sy
 800b5f4:	f3bf 8f4f 	dsb	sy
 800b5f8:	60fb      	str	r3, [r7, #12]
}
 800b5fa:	bf00      	nop
 800b5fc:	e7fe      	b.n	800b5fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b5fe:	4b07      	ldr	r3, [pc, #28]	; (800b61c <vTaskPlaceOnEventList+0x44>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	3318      	adds	r3, #24
 800b604:	4619      	mov	r1, r3
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f7fe fbbf 	bl	8009d8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b60c:	2101      	movs	r1, #1
 800b60e:	6838      	ldr	r0, [r7, #0]
 800b610:	f000 fb7e 	bl	800bd10 <prvAddCurrentTaskToDelayedList>
}
 800b614:	bf00      	nop
 800b616:	3710      	adds	r7, #16
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	200021a4 	.word	0x200021a4

0800b620 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b620:	b580      	push	{r7, lr}
 800b622:	b086      	sub	sp, #24
 800b624:	af00      	add	r7, sp, #0
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	60b9      	str	r1, [r7, #8]
 800b62a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d10a      	bne.n	800b648 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b636:	f383 8811 	msr	BASEPRI, r3
 800b63a:	f3bf 8f6f 	isb	sy
 800b63e:	f3bf 8f4f 	dsb	sy
 800b642:	617b      	str	r3, [r7, #20]
}
 800b644:	bf00      	nop
 800b646:	e7fe      	b.n	800b646 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b648:	4b0a      	ldr	r3, [pc, #40]	; (800b674 <vTaskPlaceOnEventListRestricted+0x54>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	3318      	adds	r3, #24
 800b64e:	4619      	mov	r1, r3
 800b650:	68f8      	ldr	r0, [r7, #12]
 800b652:	f7fe fb76 	bl	8009d42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d002      	beq.n	800b662 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b65c:	f04f 33ff 	mov.w	r3, #4294967295
 800b660:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b662:	6879      	ldr	r1, [r7, #4]
 800b664:	68b8      	ldr	r0, [r7, #8]
 800b666:	f000 fb53 	bl	800bd10 <prvAddCurrentTaskToDelayedList>
	}
 800b66a:	bf00      	nop
 800b66c:	3718      	adds	r7, #24
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	200021a4 	.word	0x200021a4

0800b678 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b086      	sub	sp, #24
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d10a      	bne.n	800b6a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b692:	f383 8811 	msr	BASEPRI, r3
 800b696:	f3bf 8f6f 	isb	sy
 800b69a:	f3bf 8f4f 	dsb	sy
 800b69e:	60fb      	str	r3, [r7, #12]
}
 800b6a0:	bf00      	nop
 800b6a2:	e7fe      	b.n	800b6a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	3318      	adds	r3, #24
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f7fe fba7 	bl	8009dfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6ae:	4b1e      	ldr	r3, [pc, #120]	; (800b728 <xTaskRemoveFromEventList+0xb0>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d11d      	bne.n	800b6f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	3304      	adds	r3, #4
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7fe fb9e 	bl	8009dfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6c4:	4b19      	ldr	r3, [pc, #100]	; (800b72c <xTaskRemoveFromEventList+0xb4>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d903      	bls.n	800b6d4 <xTaskRemoveFromEventList+0x5c>
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d0:	4a16      	ldr	r2, [pc, #88]	; (800b72c <xTaskRemoveFromEventList+0xb4>)
 800b6d2:	6013      	str	r3, [r2, #0]
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6d8:	4613      	mov	r3, r2
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	4413      	add	r3, r2
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	4a13      	ldr	r2, [pc, #76]	; (800b730 <xTaskRemoveFromEventList+0xb8>)
 800b6e2:	441a      	add	r2, r3
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	3304      	adds	r3, #4
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	4610      	mov	r0, r2
 800b6ec:	f7fe fb29 	bl	8009d42 <vListInsertEnd>
 800b6f0:	e005      	b.n	800b6fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	3318      	adds	r3, #24
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	480e      	ldr	r0, [pc, #56]	; (800b734 <xTaskRemoveFromEventList+0xbc>)
 800b6fa:	f7fe fb22 	bl	8009d42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b702:	4b0d      	ldr	r3, [pc, #52]	; (800b738 <xTaskRemoveFromEventList+0xc0>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b708:	429a      	cmp	r2, r3
 800b70a:	d905      	bls.n	800b718 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b70c:	2301      	movs	r3, #1
 800b70e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b710:	4b0a      	ldr	r3, [pc, #40]	; (800b73c <xTaskRemoveFromEventList+0xc4>)
 800b712:	2201      	movs	r2, #1
 800b714:	601a      	str	r2, [r3, #0]
 800b716:	e001      	b.n	800b71c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b718:	2300      	movs	r3, #0
 800b71a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b71c:	697b      	ldr	r3, [r7, #20]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3718      	adds	r7, #24
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	200026a0 	.word	0x200026a0
 800b72c:	20002680 	.word	0x20002680
 800b730:	200021a8 	.word	0x200021a8
 800b734:	20002638 	.word	0x20002638
 800b738:	200021a4 	.word	0x200021a4
 800b73c:	2000268c 	.word	0x2000268c

0800b740 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b748:	4b06      	ldr	r3, [pc, #24]	; (800b764 <vTaskInternalSetTimeOutState+0x24>)
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b750:	4b05      	ldr	r3, [pc, #20]	; (800b768 <vTaskInternalSetTimeOutState+0x28>)
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	605a      	str	r2, [r3, #4]
}
 800b758:	bf00      	nop
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr
 800b764:	20002690 	.word	0x20002690
 800b768:	2000267c 	.word	0x2000267c

0800b76c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b088      	sub	sp, #32
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d10a      	bne.n	800b792 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b780:	f383 8811 	msr	BASEPRI, r3
 800b784:	f3bf 8f6f 	isb	sy
 800b788:	f3bf 8f4f 	dsb	sy
 800b78c:	613b      	str	r3, [r7, #16]
}
 800b78e:	bf00      	nop
 800b790:	e7fe      	b.n	800b790 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d10a      	bne.n	800b7ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79c:	f383 8811 	msr	BASEPRI, r3
 800b7a0:	f3bf 8f6f 	isb	sy
 800b7a4:	f3bf 8f4f 	dsb	sy
 800b7a8:	60fb      	str	r3, [r7, #12]
}
 800b7aa:	bf00      	nop
 800b7ac:	e7fe      	b.n	800b7ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b7ae:	f000 ff81 	bl	800c6b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b7b2:	4b1d      	ldr	r3, [pc, #116]	; (800b828 <xTaskCheckForTimeOut+0xbc>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	69ba      	ldr	r2, [r7, #24]
 800b7be:	1ad3      	subs	r3, r2, r3
 800b7c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ca:	d102      	bne.n	800b7d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	61fb      	str	r3, [r7, #28]
 800b7d0:	e023      	b.n	800b81a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681a      	ldr	r2, [r3, #0]
 800b7d6:	4b15      	ldr	r3, [pc, #84]	; (800b82c <xTaskCheckForTimeOut+0xc0>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d007      	beq.n	800b7ee <xTaskCheckForTimeOut+0x82>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	69ba      	ldr	r2, [r7, #24]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d302      	bcc.n	800b7ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	61fb      	str	r3, [r7, #28]
 800b7ec:	e015      	b.n	800b81a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	697a      	ldr	r2, [r7, #20]
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d20b      	bcs.n	800b810 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	1ad2      	subs	r2, r2, r3
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f7ff ff9b 	bl	800b740 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b80a:	2300      	movs	r3, #0
 800b80c:	61fb      	str	r3, [r7, #28]
 800b80e:	e004      	b.n	800b81a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	2200      	movs	r2, #0
 800b814:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b816:	2301      	movs	r3, #1
 800b818:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b81a:	f000 ff7b 	bl	800c714 <vPortExitCritical>

	return xReturn;
 800b81e:	69fb      	ldr	r3, [r7, #28]
}
 800b820:	4618      	mov	r0, r3
 800b822:	3720      	adds	r7, #32
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}
 800b828:	2000267c 	.word	0x2000267c
 800b82c:	20002690 	.word	0x20002690

0800b830 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b830:	b480      	push	{r7}
 800b832:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b834:	4b03      	ldr	r3, [pc, #12]	; (800b844 <vTaskMissedYield+0x14>)
 800b836:	2201      	movs	r2, #1
 800b838:	601a      	str	r2, [r3, #0]
}
 800b83a:	bf00      	nop
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr
 800b844:	2000268c 	.word	0x2000268c

0800b848 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b850:	f000 f852 	bl	800b8f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b854:	4b06      	ldr	r3, [pc, #24]	; (800b870 <prvIdleTask+0x28>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d9f9      	bls.n	800b850 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b85c:	4b05      	ldr	r3, [pc, #20]	; (800b874 <prvIdleTask+0x2c>)
 800b85e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b862:	601a      	str	r2, [r3, #0]
 800b864:	f3bf 8f4f 	dsb	sy
 800b868:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b86c:	e7f0      	b.n	800b850 <prvIdleTask+0x8>
 800b86e:	bf00      	nop
 800b870:	200021a8 	.word	0x200021a8
 800b874:	e000ed04 	.word	0xe000ed04

0800b878 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b87e:	2300      	movs	r3, #0
 800b880:	607b      	str	r3, [r7, #4]
 800b882:	e00c      	b.n	800b89e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	4613      	mov	r3, r2
 800b888:	009b      	lsls	r3, r3, #2
 800b88a:	4413      	add	r3, r2
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	4a12      	ldr	r2, [pc, #72]	; (800b8d8 <prvInitialiseTaskLists+0x60>)
 800b890:	4413      	add	r3, r2
 800b892:	4618      	mov	r0, r3
 800b894:	f7fe fa28 	bl	8009ce8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	3301      	adds	r3, #1
 800b89c:	607b      	str	r3, [r7, #4]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2b37      	cmp	r3, #55	; 0x37
 800b8a2:	d9ef      	bls.n	800b884 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b8a4:	480d      	ldr	r0, [pc, #52]	; (800b8dc <prvInitialiseTaskLists+0x64>)
 800b8a6:	f7fe fa1f 	bl	8009ce8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b8aa:	480d      	ldr	r0, [pc, #52]	; (800b8e0 <prvInitialiseTaskLists+0x68>)
 800b8ac:	f7fe fa1c 	bl	8009ce8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b8b0:	480c      	ldr	r0, [pc, #48]	; (800b8e4 <prvInitialiseTaskLists+0x6c>)
 800b8b2:	f7fe fa19 	bl	8009ce8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b8b6:	480c      	ldr	r0, [pc, #48]	; (800b8e8 <prvInitialiseTaskLists+0x70>)
 800b8b8:	f7fe fa16 	bl	8009ce8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b8bc:	480b      	ldr	r0, [pc, #44]	; (800b8ec <prvInitialiseTaskLists+0x74>)
 800b8be:	f7fe fa13 	bl	8009ce8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b8c2:	4b0b      	ldr	r3, [pc, #44]	; (800b8f0 <prvInitialiseTaskLists+0x78>)
 800b8c4:	4a05      	ldr	r2, [pc, #20]	; (800b8dc <prvInitialiseTaskLists+0x64>)
 800b8c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b8c8:	4b0a      	ldr	r3, [pc, #40]	; (800b8f4 <prvInitialiseTaskLists+0x7c>)
 800b8ca:	4a05      	ldr	r2, [pc, #20]	; (800b8e0 <prvInitialiseTaskLists+0x68>)
 800b8cc:	601a      	str	r2, [r3, #0]
}
 800b8ce:	bf00      	nop
 800b8d0:	3708      	adds	r7, #8
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	200021a8 	.word	0x200021a8
 800b8dc:	20002608 	.word	0x20002608
 800b8e0:	2000261c 	.word	0x2000261c
 800b8e4:	20002638 	.word	0x20002638
 800b8e8:	2000264c 	.word	0x2000264c
 800b8ec:	20002664 	.word	0x20002664
 800b8f0:	20002630 	.word	0x20002630
 800b8f4:	20002634 	.word	0x20002634

0800b8f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b8fe:	e019      	b.n	800b934 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b900:	f000 fed8 	bl	800c6b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b904:	4b10      	ldr	r3, [pc, #64]	; (800b948 <prvCheckTasksWaitingTermination+0x50>)
 800b906:	68db      	ldr	r3, [r3, #12]
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	3304      	adds	r3, #4
 800b910:	4618      	mov	r0, r3
 800b912:	f7fe fa73 	bl	8009dfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b916:	4b0d      	ldr	r3, [pc, #52]	; (800b94c <prvCheckTasksWaitingTermination+0x54>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	3b01      	subs	r3, #1
 800b91c:	4a0b      	ldr	r2, [pc, #44]	; (800b94c <prvCheckTasksWaitingTermination+0x54>)
 800b91e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b920:	4b0b      	ldr	r3, [pc, #44]	; (800b950 <prvCheckTasksWaitingTermination+0x58>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	3b01      	subs	r3, #1
 800b926:	4a0a      	ldr	r2, [pc, #40]	; (800b950 <prvCheckTasksWaitingTermination+0x58>)
 800b928:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b92a:	f000 fef3 	bl	800c714 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 f810 	bl	800b954 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b934:	4b06      	ldr	r3, [pc, #24]	; (800b950 <prvCheckTasksWaitingTermination+0x58>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d1e1      	bne.n	800b900 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b93c:	bf00      	nop
 800b93e:	bf00      	nop
 800b940:	3708      	adds	r7, #8
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	2000264c 	.word	0x2000264c
 800b94c:	20002678 	.word	0x20002678
 800b950:	20002660 	.word	0x20002660

0800b954 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	3354      	adds	r3, #84	; 0x54
 800b960:	4618      	mov	r0, r3
 800b962:	f001 fc89 	bl	800d278 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d108      	bne.n	800b982 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b974:	4618      	mov	r0, r3
 800b976:	f001 f88b 	bl	800ca90 <vPortFree>
				vPortFree( pxTCB );
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f001 f888 	bl	800ca90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b980:	e018      	b.n	800b9b4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d103      	bne.n	800b994 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f001 f87f 	bl	800ca90 <vPortFree>
	}
 800b992:	e00f      	b.n	800b9b4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b99a:	2b02      	cmp	r3, #2
 800b99c:	d00a      	beq.n	800b9b4 <prvDeleteTCB+0x60>
	__asm volatile
 800b99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a2:	f383 8811 	msr	BASEPRI, r3
 800b9a6:	f3bf 8f6f 	isb	sy
 800b9aa:	f3bf 8f4f 	dsb	sy
 800b9ae:	60fb      	str	r3, [r7, #12]
}
 800b9b0:	bf00      	nop
 800b9b2:	e7fe      	b.n	800b9b2 <prvDeleteTCB+0x5e>
	}
 800b9b4:	bf00      	nop
 800b9b6:	3710      	adds	r7, #16
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9c2:	4b0c      	ldr	r3, [pc, #48]	; (800b9f4 <prvResetNextTaskUnblockTime+0x38>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d104      	bne.n	800b9d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b9cc:	4b0a      	ldr	r3, [pc, #40]	; (800b9f8 <prvResetNextTaskUnblockTime+0x3c>)
 800b9ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b9d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b9d4:	e008      	b.n	800b9e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9d6:	4b07      	ldr	r3, [pc, #28]	; (800b9f4 <prvResetNextTaskUnblockTime+0x38>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	68db      	ldr	r3, [r3, #12]
 800b9dc:	68db      	ldr	r3, [r3, #12]
 800b9de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	4a04      	ldr	r2, [pc, #16]	; (800b9f8 <prvResetNextTaskUnblockTime+0x3c>)
 800b9e6:	6013      	str	r3, [r2, #0]
}
 800b9e8:	bf00      	nop
 800b9ea:	370c      	adds	r7, #12
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr
 800b9f4:	20002630 	.word	0x20002630
 800b9f8:	20002698 	.word	0x20002698

0800b9fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ba02:	4b0b      	ldr	r3, [pc, #44]	; (800ba30 <xTaskGetSchedulerState+0x34>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d102      	bne.n	800ba10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	607b      	str	r3, [r7, #4]
 800ba0e:	e008      	b.n	800ba22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba10:	4b08      	ldr	r3, [pc, #32]	; (800ba34 <xTaskGetSchedulerState+0x38>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d102      	bne.n	800ba1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ba18:	2302      	movs	r3, #2
 800ba1a:	607b      	str	r3, [r7, #4]
 800ba1c:	e001      	b.n	800ba22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ba22:	687b      	ldr	r3, [r7, #4]
	}
 800ba24:	4618      	mov	r0, r3
 800ba26:	370c      	adds	r7, #12
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr
 800ba30:	20002684 	.word	0x20002684
 800ba34:	200026a0 	.word	0x200026a0

0800ba38 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ba44:	2300      	movs	r3, #0
 800ba46:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d051      	beq.n	800baf2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba52:	4b2a      	ldr	r3, [pc, #168]	; (800bafc <xTaskPriorityInherit+0xc4>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d241      	bcs.n	800bae0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	699b      	ldr	r3, [r3, #24]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	db06      	blt.n	800ba72 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba64:	4b25      	ldr	r3, [pc, #148]	; (800bafc <xTaskPriorityInherit+0xc4>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	6959      	ldr	r1, [r3, #20]
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba7a:	4613      	mov	r3, r2
 800ba7c:	009b      	lsls	r3, r3, #2
 800ba7e:	4413      	add	r3, r2
 800ba80:	009b      	lsls	r3, r3, #2
 800ba82:	4a1f      	ldr	r2, [pc, #124]	; (800bb00 <xTaskPriorityInherit+0xc8>)
 800ba84:	4413      	add	r3, r2
 800ba86:	4299      	cmp	r1, r3
 800ba88:	d122      	bne.n	800bad0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	3304      	adds	r3, #4
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f7fe f9b4 	bl	8009dfc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ba94:	4b19      	ldr	r3, [pc, #100]	; (800bafc <xTaskPriorityInherit+0xc4>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baa2:	4b18      	ldr	r3, [pc, #96]	; (800bb04 <xTaskPriorityInherit+0xcc>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d903      	bls.n	800bab2 <xTaskPriorityInherit+0x7a>
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baae:	4a15      	ldr	r2, [pc, #84]	; (800bb04 <xTaskPriorityInherit+0xcc>)
 800bab0:	6013      	str	r3, [r2, #0]
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab6:	4613      	mov	r3, r2
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	4413      	add	r3, r2
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	4a10      	ldr	r2, [pc, #64]	; (800bb00 <xTaskPriorityInherit+0xc8>)
 800bac0:	441a      	add	r2, r3
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	3304      	adds	r3, #4
 800bac6:	4619      	mov	r1, r3
 800bac8:	4610      	mov	r0, r2
 800baca:	f7fe f93a 	bl	8009d42 <vListInsertEnd>
 800bace:	e004      	b.n	800bada <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bad0:	4b0a      	ldr	r3, [pc, #40]	; (800bafc <xTaskPriorityInherit+0xc4>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bada:	2301      	movs	r3, #1
 800badc:	60fb      	str	r3, [r7, #12]
 800bade:	e008      	b.n	800baf2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bae4:	4b05      	ldr	r3, [pc, #20]	; (800bafc <xTaskPriorityInherit+0xc4>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baea:	429a      	cmp	r2, r3
 800baec:	d201      	bcs.n	800baf2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800baee:	2301      	movs	r3, #1
 800baf0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800baf2:	68fb      	ldr	r3, [r7, #12]
	}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3710      	adds	r7, #16
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}
 800bafc:	200021a4 	.word	0x200021a4
 800bb00:	200021a8 	.word	0x200021a8
 800bb04:	20002680 	.word	0x20002680

0800bb08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b086      	sub	sp, #24
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb14:	2300      	movs	r3, #0
 800bb16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d056      	beq.n	800bbcc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb1e:	4b2e      	ldr	r3, [pc, #184]	; (800bbd8 <xTaskPriorityDisinherit+0xd0>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	693a      	ldr	r2, [r7, #16]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d00a      	beq.n	800bb3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2c:	f383 8811 	msr	BASEPRI, r3
 800bb30:	f3bf 8f6f 	isb	sy
 800bb34:	f3bf 8f4f 	dsb	sy
 800bb38:	60fb      	str	r3, [r7, #12]
}
 800bb3a:	bf00      	nop
 800bb3c:	e7fe      	b.n	800bb3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d10a      	bne.n	800bb5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bb46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb4a:	f383 8811 	msr	BASEPRI, r3
 800bb4e:	f3bf 8f6f 	isb	sy
 800bb52:	f3bf 8f4f 	dsb	sy
 800bb56:	60bb      	str	r3, [r7, #8]
}
 800bb58:	bf00      	nop
 800bb5a:	e7fe      	b.n	800bb5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb60:	1e5a      	subs	r2, r3, #1
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d02c      	beq.n	800bbcc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d128      	bne.n	800bbcc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	3304      	adds	r3, #4
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7fe f93c 	bl	8009dfc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb9c:	4b0f      	ldr	r3, [pc, #60]	; (800bbdc <xTaskPriorityDisinherit+0xd4>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d903      	bls.n	800bbac <xTaskPriorityDisinherit+0xa4>
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba8:	4a0c      	ldr	r2, [pc, #48]	; (800bbdc <xTaskPriorityDisinherit+0xd4>)
 800bbaa:	6013      	str	r3, [r2, #0]
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbb0:	4613      	mov	r3, r2
 800bbb2:	009b      	lsls	r3, r3, #2
 800bbb4:	4413      	add	r3, r2
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	4a09      	ldr	r2, [pc, #36]	; (800bbe0 <xTaskPriorityDisinherit+0xd8>)
 800bbba:	441a      	add	r2, r3
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	3304      	adds	r3, #4
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	4610      	mov	r0, r2
 800bbc4:	f7fe f8bd 	bl	8009d42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bbc8:	2301      	movs	r3, #1
 800bbca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bbcc:	697b      	ldr	r3, [r7, #20]
	}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3718      	adds	r7, #24
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	200021a4 	.word	0x200021a4
 800bbdc:	20002680 	.word	0x20002680
 800bbe0:	200021a8 	.word	0x200021a8

0800bbe4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b088      	sub	sp, #32
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d06a      	beq.n	800bcd2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bbfc:	69bb      	ldr	r3, [r7, #24]
 800bbfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d10a      	bne.n	800bc1a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc08:	f383 8811 	msr	BASEPRI, r3
 800bc0c:	f3bf 8f6f 	isb	sy
 800bc10:	f3bf 8f4f 	dsb	sy
 800bc14:	60fb      	str	r3, [r7, #12]
}
 800bc16:	bf00      	nop
 800bc18:	e7fe      	b.n	800bc18 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc1e:	683a      	ldr	r2, [r7, #0]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d902      	bls.n	800bc2a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	61fb      	str	r3, [r7, #28]
 800bc28:	e002      	b.n	800bc30 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bc2a:	69bb      	ldr	r3, [r7, #24]
 800bc2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc2e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc34:	69fa      	ldr	r2, [r7, #28]
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d04b      	beq.n	800bcd2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bc3a:	69bb      	ldr	r3, [r7, #24]
 800bc3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc3e:	697a      	ldr	r2, [r7, #20]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d146      	bne.n	800bcd2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bc44:	4b25      	ldr	r3, [pc, #148]	; (800bcdc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	69ba      	ldr	r2, [r7, #24]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d10a      	bne.n	800bc64 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc52:	f383 8811 	msr	BASEPRI, r3
 800bc56:	f3bf 8f6f 	isb	sy
 800bc5a:	f3bf 8f4f 	dsb	sy
 800bc5e:	60bb      	str	r3, [r7, #8]
}
 800bc60:	bf00      	nop
 800bc62:	e7fe      	b.n	800bc62 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bc64:	69bb      	ldr	r3, [r7, #24]
 800bc66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc68:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bc6a:	69bb      	ldr	r3, [r7, #24]
 800bc6c:	69fa      	ldr	r2, [r7, #28]
 800bc6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bc70:	69bb      	ldr	r3, [r7, #24]
 800bc72:	699b      	ldr	r3, [r3, #24]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	db04      	blt.n	800bc82 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc78:	69fb      	ldr	r3, [r7, #28]
 800bc7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bc82:	69bb      	ldr	r3, [r7, #24]
 800bc84:	6959      	ldr	r1, [r3, #20]
 800bc86:	693a      	ldr	r2, [r7, #16]
 800bc88:	4613      	mov	r3, r2
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	4413      	add	r3, r2
 800bc8e:	009b      	lsls	r3, r3, #2
 800bc90:	4a13      	ldr	r2, [pc, #76]	; (800bce0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bc92:	4413      	add	r3, r2
 800bc94:	4299      	cmp	r1, r3
 800bc96:	d11c      	bne.n	800bcd2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	3304      	adds	r3, #4
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f7fe f8ad 	bl	8009dfc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bca2:	69bb      	ldr	r3, [r7, #24]
 800bca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bca6:	4b0f      	ldr	r3, [pc, #60]	; (800bce4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d903      	bls.n	800bcb6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb2:	4a0c      	ldr	r2, [pc, #48]	; (800bce4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bcb4:	6013      	str	r3, [r2, #0]
 800bcb6:	69bb      	ldr	r3, [r7, #24]
 800bcb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcba:	4613      	mov	r3, r2
 800bcbc:	009b      	lsls	r3, r3, #2
 800bcbe:	4413      	add	r3, r2
 800bcc0:	009b      	lsls	r3, r3, #2
 800bcc2:	4a07      	ldr	r2, [pc, #28]	; (800bce0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bcc4:	441a      	add	r2, r3
 800bcc6:	69bb      	ldr	r3, [r7, #24]
 800bcc8:	3304      	adds	r3, #4
 800bcca:	4619      	mov	r1, r3
 800bccc:	4610      	mov	r0, r2
 800bcce:	f7fe f838 	bl	8009d42 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bcd2:	bf00      	nop
 800bcd4:	3720      	adds	r7, #32
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	200021a4 	.word	0x200021a4
 800bce0:	200021a8 	.word	0x200021a8
 800bce4:	20002680 	.word	0x20002680

0800bce8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bce8:	b480      	push	{r7}
 800bcea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bcec:	4b07      	ldr	r3, [pc, #28]	; (800bd0c <pvTaskIncrementMutexHeldCount+0x24>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d004      	beq.n	800bcfe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bcf4:	4b05      	ldr	r3, [pc, #20]	; (800bd0c <pvTaskIncrementMutexHeldCount+0x24>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bcfa:	3201      	adds	r2, #1
 800bcfc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bcfe:	4b03      	ldr	r3, [pc, #12]	; (800bd0c <pvTaskIncrementMutexHeldCount+0x24>)
 800bd00:	681b      	ldr	r3, [r3, #0]
	}
 800bd02:	4618      	mov	r0, r3
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr
 800bd0c:	200021a4 	.word	0x200021a4

0800bd10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bd1a:	4b21      	ldr	r3, [pc, #132]	; (800bda0 <prvAddCurrentTaskToDelayedList+0x90>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd20:	4b20      	ldr	r3, [pc, #128]	; (800bda4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	3304      	adds	r3, #4
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7fe f868 	bl	8009dfc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd32:	d10a      	bne.n	800bd4a <prvAddCurrentTaskToDelayedList+0x3a>
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d007      	beq.n	800bd4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd3a:	4b1a      	ldr	r3, [pc, #104]	; (800bda4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	3304      	adds	r3, #4
 800bd40:	4619      	mov	r1, r3
 800bd42:	4819      	ldr	r0, [pc, #100]	; (800bda8 <prvAddCurrentTaskToDelayedList+0x98>)
 800bd44:	f7fd fffd 	bl	8009d42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bd48:	e026      	b.n	800bd98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	4413      	add	r3, r2
 800bd50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bd52:	4b14      	ldr	r3, [pc, #80]	; (800bda4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	68ba      	ldr	r2, [r7, #8]
 800bd58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bd5a:	68ba      	ldr	r2, [r7, #8]
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d209      	bcs.n	800bd76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd62:	4b12      	ldr	r3, [pc, #72]	; (800bdac <prvAddCurrentTaskToDelayedList+0x9c>)
 800bd64:	681a      	ldr	r2, [r3, #0]
 800bd66:	4b0f      	ldr	r3, [pc, #60]	; (800bda4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	3304      	adds	r3, #4
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	4610      	mov	r0, r2
 800bd70:	f7fe f80b 	bl	8009d8a <vListInsert>
}
 800bd74:	e010      	b.n	800bd98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd76:	4b0e      	ldr	r3, [pc, #56]	; (800bdb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	4b0a      	ldr	r3, [pc, #40]	; (800bda4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	3304      	adds	r3, #4
 800bd80:	4619      	mov	r1, r3
 800bd82:	4610      	mov	r0, r2
 800bd84:	f7fe f801 	bl	8009d8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bd88:	4b0a      	ldr	r3, [pc, #40]	; (800bdb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	68ba      	ldr	r2, [r7, #8]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d202      	bcs.n	800bd98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bd92:	4a08      	ldr	r2, [pc, #32]	; (800bdb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	6013      	str	r3, [r2, #0]
}
 800bd98:	bf00      	nop
 800bd9a:	3710      	adds	r7, #16
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	2000267c 	.word	0x2000267c
 800bda4:	200021a4 	.word	0x200021a4
 800bda8:	20002664 	.word	0x20002664
 800bdac:	20002634 	.word	0x20002634
 800bdb0:	20002630 	.word	0x20002630
 800bdb4:	20002698 	.word	0x20002698

0800bdb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b08a      	sub	sp, #40	; 0x28
 800bdbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bdc2:	f000 fb07 	bl	800c3d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bdc6:	4b1c      	ldr	r3, [pc, #112]	; (800be38 <xTimerCreateTimerTask+0x80>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d021      	beq.n	800be12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bdd6:	1d3a      	adds	r2, r7, #4
 800bdd8:	f107 0108 	add.w	r1, r7, #8
 800bddc:	f107 030c 	add.w	r3, r7, #12
 800bde0:	4618      	mov	r0, r3
 800bde2:	f7fd ff67 	bl	8009cb4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bde6:	6879      	ldr	r1, [r7, #4]
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	68fa      	ldr	r2, [r7, #12]
 800bdec:	9202      	str	r2, [sp, #8]
 800bdee:	9301      	str	r3, [sp, #4]
 800bdf0:	2302      	movs	r3, #2
 800bdf2:	9300      	str	r3, [sp, #0]
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	460a      	mov	r2, r1
 800bdf8:	4910      	ldr	r1, [pc, #64]	; (800be3c <xTimerCreateTimerTask+0x84>)
 800bdfa:	4811      	ldr	r0, [pc, #68]	; (800be40 <xTimerCreateTimerTask+0x88>)
 800bdfc:	f7fe ffb6 	bl	800ad6c <xTaskCreateStatic>
 800be00:	4603      	mov	r3, r0
 800be02:	4a10      	ldr	r2, [pc, #64]	; (800be44 <xTimerCreateTimerTask+0x8c>)
 800be04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800be06:	4b0f      	ldr	r3, [pc, #60]	; (800be44 <xTimerCreateTimerTask+0x8c>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d001      	beq.n	800be12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800be0e:	2301      	movs	r3, #1
 800be10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d10a      	bne.n	800be2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800be18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1c:	f383 8811 	msr	BASEPRI, r3
 800be20:	f3bf 8f6f 	isb	sy
 800be24:	f3bf 8f4f 	dsb	sy
 800be28:	613b      	str	r3, [r7, #16]
}
 800be2a:	bf00      	nop
 800be2c:	e7fe      	b.n	800be2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800be2e:	697b      	ldr	r3, [r7, #20]
}
 800be30:	4618      	mov	r0, r3
 800be32:	3718      	adds	r7, #24
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}
 800be38:	200026d4 	.word	0x200026d4
 800be3c:	0800ec8c 	.word	0x0800ec8c
 800be40:	0800bf7d 	.word	0x0800bf7d
 800be44:	200026d8 	.word	0x200026d8

0800be48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b08a      	sub	sp, #40	; 0x28
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	60f8      	str	r0, [r7, #12]
 800be50:	60b9      	str	r1, [r7, #8]
 800be52:	607a      	str	r2, [r7, #4]
 800be54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800be56:	2300      	movs	r3, #0
 800be58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d10a      	bne.n	800be76 <xTimerGenericCommand+0x2e>
	__asm volatile
 800be60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be64:	f383 8811 	msr	BASEPRI, r3
 800be68:	f3bf 8f6f 	isb	sy
 800be6c:	f3bf 8f4f 	dsb	sy
 800be70:	623b      	str	r3, [r7, #32]
}
 800be72:	bf00      	nop
 800be74:	e7fe      	b.n	800be74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800be76:	4b1a      	ldr	r3, [pc, #104]	; (800bee0 <xTimerGenericCommand+0x98>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d02a      	beq.n	800bed4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	2b05      	cmp	r3, #5
 800be8e:	dc18      	bgt.n	800bec2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800be90:	f7ff fdb4 	bl	800b9fc <xTaskGetSchedulerState>
 800be94:	4603      	mov	r3, r0
 800be96:	2b02      	cmp	r3, #2
 800be98:	d109      	bne.n	800beae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800be9a:	4b11      	ldr	r3, [pc, #68]	; (800bee0 <xTimerGenericCommand+0x98>)
 800be9c:	6818      	ldr	r0, [r3, #0]
 800be9e:	f107 0110 	add.w	r1, r7, #16
 800bea2:	2300      	movs	r3, #0
 800bea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bea6:	f7fe f97b 	bl	800a1a0 <xQueueGenericSend>
 800beaa:	6278      	str	r0, [r7, #36]	; 0x24
 800beac:	e012      	b.n	800bed4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800beae:	4b0c      	ldr	r3, [pc, #48]	; (800bee0 <xTimerGenericCommand+0x98>)
 800beb0:	6818      	ldr	r0, [r3, #0]
 800beb2:	f107 0110 	add.w	r1, r7, #16
 800beb6:	2300      	movs	r3, #0
 800beb8:	2200      	movs	r2, #0
 800beba:	f7fe f971 	bl	800a1a0 <xQueueGenericSend>
 800bebe:	6278      	str	r0, [r7, #36]	; 0x24
 800bec0:	e008      	b.n	800bed4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bec2:	4b07      	ldr	r3, [pc, #28]	; (800bee0 <xTimerGenericCommand+0x98>)
 800bec4:	6818      	ldr	r0, [r3, #0]
 800bec6:	f107 0110 	add.w	r1, r7, #16
 800beca:	2300      	movs	r3, #0
 800becc:	683a      	ldr	r2, [r7, #0]
 800bece:	f7fe fa65 	bl	800a39c <xQueueGenericSendFromISR>
 800bed2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3728      	adds	r7, #40	; 0x28
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	200026d4 	.word	0x200026d4

0800bee4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b088      	sub	sp, #32
 800bee8:	af02      	add	r7, sp, #8
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800beee:	4b22      	ldr	r3, [pc, #136]	; (800bf78 <prvProcessExpiredTimer+0x94>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	68db      	ldr	r3, [r3, #12]
 800bef4:	68db      	ldr	r3, [r3, #12]
 800bef6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	3304      	adds	r3, #4
 800befc:	4618      	mov	r0, r3
 800befe:	f7fd ff7d 	bl	8009dfc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf08:	f003 0304 	and.w	r3, r3, #4
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d022      	beq.n	800bf56 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	699a      	ldr	r2, [r3, #24]
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	18d1      	adds	r1, r2, r3
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	683a      	ldr	r2, [r7, #0]
 800bf1c:	6978      	ldr	r0, [r7, #20]
 800bf1e:	f000 f8d1 	bl	800c0c4 <prvInsertTimerInActiveList>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d01f      	beq.n	800bf68 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf28:	2300      	movs	r3, #0
 800bf2a:	9300      	str	r3, [sp, #0]
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	2100      	movs	r1, #0
 800bf32:	6978      	ldr	r0, [r7, #20]
 800bf34:	f7ff ff88 	bl	800be48 <xTimerGenericCommand>
 800bf38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d113      	bne.n	800bf68 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bf40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf44:	f383 8811 	msr	BASEPRI, r3
 800bf48:	f3bf 8f6f 	isb	sy
 800bf4c:	f3bf 8f4f 	dsb	sy
 800bf50:	60fb      	str	r3, [r7, #12]
}
 800bf52:	bf00      	nop
 800bf54:	e7fe      	b.n	800bf54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf5c:	f023 0301 	bic.w	r3, r3, #1
 800bf60:	b2da      	uxtb	r2, r3
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	6a1b      	ldr	r3, [r3, #32]
 800bf6c:	6978      	ldr	r0, [r7, #20]
 800bf6e:	4798      	blx	r3
}
 800bf70:	bf00      	nop
 800bf72:	3718      	adds	r7, #24
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	200026cc 	.word	0x200026cc

0800bf7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bf84:	f107 0308 	add.w	r3, r7, #8
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f000 f857 	bl	800c03c <prvGetNextExpireTime>
 800bf8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	4619      	mov	r1, r3
 800bf94:	68f8      	ldr	r0, [r7, #12]
 800bf96:	f000 f803 	bl	800bfa0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bf9a:	f000 f8d5 	bl	800c148 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bf9e:	e7f1      	b.n	800bf84 <prvTimerTask+0x8>

0800bfa0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
 800bfa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bfaa:	f7ff f93b 	bl	800b224 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bfae:	f107 0308 	add.w	r3, r7, #8
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f000 f866 	bl	800c084 <prvSampleTimeNow>
 800bfb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d130      	bne.n	800c022 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d10a      	bne.n	800bfdc <prvProcessTimerOrBlockTask+0x3c>
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d806      	bhi.n	800bfdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bfce:	f7ff f937 	bl	800b240 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bfd2:	68f9      	ldr	r1, [r7, #12]
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f7ff ff85 	bl	800bee4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bfda:	e024      	b.n	800c026 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d008      	beq.n	800bff4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bfe2:	4b13      	ldr	r3, [pc, #76]	; (800c030 <prvProcessTimerOrBlockTask+0x90>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d101      	bne.n	800bff0 <prvProcessTimerOrBlockTask+0x50>
 800bfec:	2301      	movs	r3, #1
 800bfee:	e000      	b.n	800bff2 <prvProcessTimerOrBlockTask+0x52>
 800bff0:	2300      	movs	r3, #0
 800bff2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bff4:	4b0f      	ldr	r3, [pc, #60]	; (800c034 <prvProcessTimerOrBlockTask+0x94>)
 800bff6:	6818      	ldr	r0, [r3, #0]
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	1ad3      	subs	r3, r2, r3
 800bffe:	683a      	ldr	r2, [r7, #0]
 800c000:	4619      	mov	r1, r3
 800c002:	f7fe fe7f 	bl	800ad04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c006:	f7ff f91b 	bl	800b240 <xTaskResumeAll>
 800c00a:	4603      	mov	r3, r0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d10a      	bne.n	800c026 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c010:	4b09      	ldr	r3, [pc, #36]	; (800c038 <prvProcessTimerOrBlockTask+0x98>)
 800c012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c016:	601a      	str	r2, [r3, #0]
 800c018:	f3bf 8f4f 	dsb	sy
 800c01c:	f3bf 8f6f 	isb	sy
}
 800c020:	e001      	b.n	800c026 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c022:	f7ff f90d 	bl	800b240 <xTaskResumeAll>
}
 800c026:	bf00      	nop
 800c028:	3710      	adds	r7, #16
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop
 800c030:	200026d0 	.word	0x200026d0
 800c034:	200026d4 	.word	0x200026d4
 800c038:	e000ed04 	.word	0xe000ed04

0800c03c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c03c:	b480      	push	{r7}
 800c03e:	b085      	sub	sp, #20
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c044:	4b0e      	ldr	r3, [pc, #56]	; (800c080 <prvGetNextExpireTime+0x44>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d101      	bne.n	800c052 <prvGetNextExpireTime+0x16>
 800c04e:	2201      	movs	r2, #1
 800c050:	e000      	b.n	800c054 <prvGetNextExpireTime+0x18>
 800c052:	2200      	movs	r2, #0
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d105      	bne.n	800c06c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c060:	4b07      	ldr	r3, [pc, #28]	; (800c080 <prvGetNextExpireTime+0x44>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	68db      	ldr	r3, [r3, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	60fb      	str	r3, [r7, #12]
 800c06a:	e001      	b.n	800c070 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c06c:	2300      	movs	r3, #0
 800c06e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c070:	68fb      	ldr	r3, [r7, #12]
}
 800c072:	4618      	mov	r0, r3
 800c074:	3714      	adds	r7, #20
 800c076:	46bd      	mov	sp, r7
 800c078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07c:	4770      	bx	lr
 800c07e:	bf00      	nop
 800c080:	200026cc 	.word	0x200026cc

0800c084 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c08c:	f7ff f976 	bl	800b37c <xTaskGetTickCount>
 800c090:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c092:	4b0b      	ldr	r3, [pc, #44]	; (800c0c0 <prvSampleTimeNow+0x3c>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	68fa      	ldr	r2, [r7, #12]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d205      	bcs.n	800c0a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c09c:	f000 f936 	bl	800c30c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	601a      	str	r2, [r3, #0]
 800c0a6:	e002      	b.n	800c0ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c0ae:	4a04      	ldr	r2, [pc, #16]	; (800c0c0 <prvSampleTimeNow+0x3c>)
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	200026dc 	.word	0x200026dc

0800c0c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b086      	sub	sp, #24
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	60f8      	str	r0, [r7, #12]
 800c0cc:	60b9      	str	r1, [r7, #8]
 800c0ce:	607a      	str	r2, [r7, #4]
 800c0d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	68ba      	ldr	r2, [r7, #8]
 800c0da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	68fa      	ldr	r2, [r7, #12]
 800c0e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c0e2:	68ba      	ldr	r2, [r7, #8]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d812      	bhi.n	800c110 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0ea:	687a      	ldr	r2, [r7, #4]
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	1ad2      	subs	r2, r2, r3
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	699b      	ldr	r3, [r3, #24]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d302      	bcc.n	800c0fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	617b      	str	r3, [r7, #20]
 800c0fc:	e01b      	b.n	800c136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c0fe:	4b10      	ldr	r3, [pc, #64]	; (800c140 <prvInsertTimerInActiveList+0x7c>)
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	3304      	adds	r3, #4
 800c106:	4619      	mov	r1, r3
 800c108:	4610      	mov	r0, r2
 800c10a:	f7fd fe3e 	bl	8009d8a <vListInsert>
 800c10e:	e012      	b.n	800c136 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c110:	687a      	ldr	r2, [r7, #4]
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	429a      	cmp	r2, r3
 800c116:	d206      	bcs.n	800c126 <prvInsertTimerInActiveList+0x62>
 800c118:	68ba      	ldr	r2, [r7, #8]
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d302      	bcc.n	800c126 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c120:	2301      	movs	r3, #1
 800c122:	617b      	str	r3, [r7, #20]
 800c124:	e007      	b.n	800c136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c126:	4b07      	ldr	r3, [pc, #28]	; (800c144 <prvInsertTimerInActiveList+0x80>)
 800c128:	681a      	ldr	r2, [r3, #0]
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	3304      	adds	r3, #4
 800c12e:	4619      	mov	r1, r3
 800c130:	4610      	mov	r0, r2
 800c132:	f7fd fe2a 	bl	8009d8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c136:	697b      	ldr	r3, [r7, #20]
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3718      	adds	r7, #24
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	200026d0 	.word	0x200026d0
 800c144:	200026cc 	.word	0x200026cc

0800c148 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b08e      	sub	sp, #56	; 0x38
 800c14c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c14e:	e0ca      	b.n	800c2e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2b00      	cmp	r3, #0
 800c154:	da18      	bge.n	800c188 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c156:	1d3b      	adds	r3, r7, #4
 800c158:	3304      	adds	r3, #4
 800c15a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d10a      	bne.n	800c178 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c166:	f383 8811 	msr	BASEPRI, r3
 800c16a:	f3bf 8f6f 	isb	sy
 800c16e:	f3bf 8f4f 	dsb	sy
 800c172:	61fb      	str	r3, [r7, #28]
}
 800c174:	bf00      	nop
 800c176:	e7fe      	b.n	800c176 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c17e:	6850      	ldr	r0, [r2, #4]
 800c180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c182:	6892      	ldr	r2, [r2, #8]
 800c184:	4611      	mov	r1, r2
 800c186:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	f2c0 80aa 	blt.w	800c2e4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c196:	695b      	ldr	r3, [r3, #20]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d004      	beq.n	800c1a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c19e:	3304      	adds	r3, #4
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f7fd fe2b 	bl	8009dfc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c1a6:	463b      	mov	r3, r7
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f7ff ff6b 	bl	800c084 <prvSampleTimeNow>
 800c1ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2b09      	cmp	r3, #9
 800c1b4:	f200 8097 	bhi.w	800c2e6 <prvProcessReceivedCommands+0x19e>
 800c1b8:	a201      	add	r2, pc, #4	; (adr r2, 800c1c0 <prvProcessReceivedCommands+0x78>)
 800c1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1be:	bf00      	nop
 800c1c0:	0800c1e9 	.word	0x0800c1e9
 800c1c4:	0800c1e9 	.word	0x0800c1e9
 800c1c8:	0800c1e9 	.word	0x0800c1e9
 800c1cc:	0800c25d 	.word	0x0800c25d
 800c1d0:	0800c271 	.word	0x0800c271
 800c1d4:	0800c2bb 	.word	0x0800c2bb
 800c1d8:	0800c1e9 	.word	0x0800c1e9
 800c1dc:	0800c1e9 	.word	0x0800c1e9
 800c1e0:	0800c25d 	.word	0x0800c25d
 800c1e4:	0800c271 	.word	0x0800c271
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1ee:	f043 0301 	orr.w	r3, r3, #1
 800c1f2:	b2da      	uxtb	r2, r3
 800c1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c1fa:	68ba      	ldr	r2, [r7, #8]
 800c1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fe:	699b      	ldr	r3, [r3, #24]
 800c200:	18d1      	adds	r1, r2, r3
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c208:	f7ff ff5c 	bl	800c0c4 <prvInsertTimerInActiveList>
 800c20c:	4603      	mov	r3, r0
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d069      	beq.n	800c2e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c214:	6a1b      	ldr	r3, [r3, #32]
 800c216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c218:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c21c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c220:	f003 0304 	and.w	r3, r3, #4
 800c224:	2b00      	cmp	r3, #0
 800c226:	d05e      	beq.n	800c2e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c228:	68ba      	ldr	r2, [r7, #8]
 800c22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22c:	699b      	ldr	r3, [r3, #24]
 800c22e:	441a      	add	r2, r3
 800c230:	2300      	movs	r3, #0
 800c232:	9300      	str	r3, [sp, #0]
 800c234:	2300      	movs	r3, #0
 800c236:	2100      	movs	r1, #0
 800c238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c23a:	f7ff fe05 	bl	800be48 <xTimerGenericCommand>
 800c23e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c240:	6a3b      	ldr	r3, [r7, #32]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d14f      	bne.n	800c2e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24a:	f383 8811 	msr	BASEPRI, r3
 800c24e:	f3bf 8f6f 	isb	sy
 800c252:	f3bf 8f4f 	dsb	sy
 800c256:	61bb      	str	r3, [r7, #24]
}
 800c258:	bf00      	nop
 800c25a:	e7fe      	b.n	800c25a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c25e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c262:	f023 0301 	bic.w	r3, r3, #1
 800c266:	b2da      	uxtb	r2, r3
 800c268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c26a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c26e:	e03a      	b.n	800c2e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c272:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c276:	f043 0301 	orr.w	r3, r3, #1
 800c27a:	b2da      	uxtb	r2, r3
 800c27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c282:	68ba      	ldr	r2, [r7, #8]
 800c284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c286:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28a:	699b      	ldr	r3, [r3, #24]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d10a      	bne.n	800c2a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c294:	f383 8811 	msr	BASEPRI, r3
 800c298:	f3bf 8f6f 	isb	sy
 800c29c:	f3bf 8f4f 	dsb	sy
 800c2a0:	617b      	str	r3, [r7, #20]
}
 800c2a2:	bf00      	nop
 800c2a4:	e7fe      	b.n	800c2a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a8:	699a      	ldr	r2, [r3, #24]
 800c2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ac:	18d1      	adds	r1, r2, r3
 800c2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2b4:	f7ff ff06 	bl	800c0c4 <prvInsertTimerInActiveList>
					break;
 800c2b8:	e015      	b.n	800c2e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2c0:	f003 0302 	and.w	r3, r3, #2
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d103      	bne.n	800c2d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c2c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2ca:	f000 fbe1 	bl	800ca90 <vPortFree>
 800c2ce:	e00a      	b.n	800c2e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2d6:	f023 0301 	bic.w	r3, r3, #1
 800c2da:	b2da      	uxtb	r2, r3
 800c2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c2e2:	e000      	b.n	800c2e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c2e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c2e6:	4b08      	ldr	r3, [pc, #32]	; (800c308 <prvProcessReceivedCommands+0x1c0>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	1d39      	adds	r1, r7, #4
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7fe f97c 	bl	800a5ec <xQueueReceive>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	f47f af2a 	bne.w	800c150 <prvProcessReceivedCommands+0x8>
	}
}
 800c2fc:	bf00      	nop
 800c2fe:	bf00      	nop
 800c300:	3730      	adds	r7, #48	; 0x30
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	200026d4 	.word	0x200026d4

0800c30c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b088      	sub	sp, #32
 800c310:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c312:	e048      	b.n	800c3a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c314:	4b2d      	ldr	r3, [pc, #180]	; (800c3cc <prvSwitchTimerLists+0xc0>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	68db      	ldr	r3, [r3, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c31e:	4b2b      	ldr	r3, [pc, #172]	; (800c3cc <prvSwitchTimerLists+0xc0>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	68db      	ldr	r3, [r3, #12]
 800c324:	68db      	ldr	r3, [r3, #12]
 800c326:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	3304      	adds	r3, #4
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7fd fd65 	bl	8009dfc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	6a1b      	ldr	r3, [r3, #32]
 800c336:	68f8      	ldr	r0, [r7, #12]
 800c338:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c340:	f003 0304 	and.w	r3, r3, #4
 800c344:	2b00      	cmp	r3, #0
 800c346:	d02e      	beq.n	800c3a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	699b      	ldr	r3, [r3, #24]
 800c34c:	693a      	ldr	r2, [r7, #16]
 800c34e:	4413      	add	r3, r2
 800c350:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c352:	68ba      	ldr	r2, [r7, #8]
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	429a      	cmp	r2, r3
 800c358:	d90e      	bls.n	800c378 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	68ba      	ldr	r2, [r7, #8]
 800c35e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	68fa      	ldr	r2, [r7, #12]
 800c364:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c366:	4b19      	ldr	r3, [pc, #100]	; (800c3cc <prvSwitchTimerLists+0xc0>)
 800c368:	681a      	ldr	r2, [r3, #0]
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	3304      	adds	r3, #4
 800c36e:	4619      	mov	r1, r3
 800c370:	4610      	mov	r0, r2
 800c372:	f7fd fd0a 	bl	8009d8a <vListInsert>
 800c376:	e016      	b.n	800c3a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c378:	2300      	movs	r3, #0
 800c37a:	9300      	str	r3, [sp, #0]
 800c37c:	2300      	movs	r3, #0
 800c37e:	693a      	ldr	r2, [r7, #16]
 800c380:	2100      	movs	r1, #0
 800c382:	68f8      	ldr	r0, [r7, #12]
 800c384:	f7ff fd60 	bl	800be48 <xTimerGenericCommand>
 800c388:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d10a      	bne.n	800c3a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c394:	f383 8811 	msr	BASEPRI, r3
 800c398:	f3bf 8f6f 	isb	sy
 800c39c:	f3bf 8f4f 	dsb	sy
 800c3a0:	603b      	str	r3, [r7, #0]
}
 800c3a2:	bf00      	nop
 800c3a4:	e7fe      	b.n	800c3a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c3a6:	4b09      	ldr	r3, [pc, #36]	; (800c3cc <prvSwitchTimerLists+0xc0>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d1b1      	bne.n	800c314 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c3b0:	4b06      	ldr	r3, [pc, #24]	; (800c3cc <prvSwitchTimerLists+0xc0>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c3b6:	4b06      	ldr	r3, [pc, #24]	; (800c3d0 <prvSwitchTimerLists+0xc4>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a04      	ldr	r2, [pc, #16]	; (800c3cc <prvSwitchTimerLists+0xc0>)
 800c3bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c3be:	4a04      	ldr	r2, [pc, #16]	; (800c3d0 <prvSwitchTimerLists+0xc4>)
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	6013      	str	r3, [r2, #0]
}
 800c3c4:	bf00      	nop
 800c3c6:	3718      	adds	r7, #24
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	200026cc 	.word	0x200026cc
 800c3d0:	200026d0 	.word	0x200026d0

0800c3d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b082      	sub	sp, #8
 800c3d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c3da:	f000 f96b 	bl	800c6b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c3de:	4b15      	ldr	r3, [pc, #84]	; (800c434 <prvCheckForValidListAndQueue+0x60>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d120      	bne.n	800c428 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c3e6:	4814      	ldr	r0, [pc, #80]	; (800c438 <prvCheckForValidListAndQueue+0x64>)
 800c3e8:	f7fd fc7e 	bl	8009ce8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c3ec:	4813      	ldr	r0, [pc, #76]	; (800c43c <prvCheckForValidListAndQueue+0x68>)
 800c3ee:	f7fd fc7b 	bl	8009ce8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c3f2:	4b13      	ldr	r3, [pc, #76]	; (800c440 <prvCheckForValidListAndQueue+0x6c>)
 800c3f4:	4a10      	ldr	r2, [pc, #64]	; (800c438 <prvCheckForValidListAndQueue+0x64>)
 800c3f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c3f8:	4b12      	ldr	r3, [pc, #72]	; (800c444 <prvCheckForValidListAndQueue+0x70>)
 800c3fa:	4a10      	ldr	r2, [pc, #64]	; (800c43c <prvCheckForValidListAndQueue+0x68>)
 800c3fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c3fe:	2300      	movs	r3, #0
 800c400:	9300      	str	r3, [sp, #0]
 800c402:	4b11      	ldr	r3, [pc, #68]	; (800c448 <prvCheckForValidListAndQueue+0x74>)
 800c404:	4a11      	ldr	r2, [pc, #68]	; (800c44c <prvCheckForValidListAndQueue+0x78>)
 800c406:	2110      	movs	r1, #16
 800c408:	200a      	movs	r0, #10
 800c40a:	f7fd fd89 	bl	8009f20 <xQueueGenericCreateStatic>
 800c40e:	4603      	mov	r3, r0
 800c410:	4a08      	ldr	r2, [pc, #32]	; (800c434 <prvCheckForValidListAndQueue+0x60>)
 800c412:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c414:	4b07      	ldr	r3, [pc, #28]	; (800c434 <prvCheckForValidListAndQueue+0x60>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d005      	beq.n	800c428 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c41c:	4b05      	ldr	r3, [pc, #20]	; (800c434 <prvCheckForValidListAndQueue+0x60>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	490b      	ldr	r1, [pc, #44]	; (800c450 <prvCheckForValidListAndQueue+0x7c>)
 800c422:	4618      	mov	r0, r3
 800c424:	f7fe fc1a 	bl	800ac5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c428:	f000 f974 	bl	800c714 <vPortExitCritical>
}
 800c42c:	bf00      	nop
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	200026d4 	.word	0x200026d4
 800c438:	200026a4 	.word	0x200026a4
 800c43c:	200026b8 	.word	0x200026b8
 800c440:	200026cc 	.word	0x200026cc
 800c444:	200026d0 	.word	0x200026d0
 800c448:	20002780 	.word	0x20002780
 800c44c:	200026e0 	.word	0x200026e0
 800c450:	0800ec94 	.word	0x0800ec94

0800c454 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c454:	b480      	push	{r7}
 800c456:	b085      	sub	sp, #20
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	3b04      	subs	r3, #4
 800c464:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c46c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	3b04      	subs	r3, #4
 800c472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	f023 0201 	bic.w	r2, r3, #1
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	3b04      	subs	r3, #4
 800c482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c484:	4a0c      	ldr	r2, [pc, #48]	; (800c4b8 <pxPortInitialiseStack+0x64>)
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	3b14      	subs	r3, #20
 800c48e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	3b04      	subs	r3, #4
 800c49a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f06f 0202 	mvn.w	r2, #2
 800c4a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	3b20      	subs	r3, #32
 800c4a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3714      	adds	r7, #20
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr
 800c4b8:	0800c4bd 	.word	0x0800c4bd

0800c4bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b085      	sub	sp, #20
 800c4c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c4c6:	4b12      	ldr	r3, [pc, #72]	; (800c510 <prvTaskExitError+0x54>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ce:	d00a      	beq.n	800c4e6 <prvTaskExitError+0x2a>
	__asm volatile
 800c4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d4:	f383 8811 	msr	BASEPRI, r3
 800c4d8:	f3bf 8f6f 	isb	sy
 800c4dc:	f3bf 8f4f 	dsb	sy
 800c4e0:	60fb      	str	r3, [r7, #12]
}
 800c4e2:	bf00      	nop
 800c4e4:	e7fe      	b.n	800c4e4 <prvTaskExitError+0x28>
	__asm volatile
 800c4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ea:	f383 8811 	msr	BASEPRI, r3
 800c4ee:	f3bf 8f6f 	isb	sy
 800c4f2:	f3bf 8f4f 	dsb	sy
 800c4f6:	60bb      	str	r3, [r7, #8]
}
 800c4f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c4fa:	bf00      	nop
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d0fc      	beq.n	800c4fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c502:	bf00      	nop
 800c504:	bf00      	nop
 800c506:	3714      	adds	r7, #20
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr
 800c510:	2000000c 	.word	0x2000000c
	...

0800c520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c520:	4b07      	ldr	r3, [pc, #28]	; (800c540 <pxCurrentTCBConst2>)
 800c522:	6819      	ldr	r1, [r3, #0]
 800c524:	6808      	ldr	r0, [r1, #0]
 800c526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c52a:	f380 8809 	msr	PSP, r0
 800c52e:	f3bf 8f6f 	isb	sy
 800c532:	f04f 0000 	mov.w	r0, #0
 800c536:	f380 8811 	msr	BASEPRI, r0
 800c53a:	4770      	bx	lr
 800c53c:	f3af 8000 	nop.w

0800c540 <pxCurrentTCBConst2>:
 800c540:	200021a4 	.word	0x200021a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c544:	bf00      	nop
 800c546:	bf00      	nop

0800c548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c548:	4808      	ldr	r0, [pc, #32]	; (800c56c <prvPortStartFirstTask+0x24>)
 800c54a:	6800      	ldr	r0, [r0, #0]
 800c54c:	6800      	ldr	r0, [r0, #0]
 800c54e:	f380 8808 	msr	MSP, r0
 800c552:	f04f 0000 	mov.w	r0, #0
 800c556:	f380 8814 	msr	CONTROL, r0
 800c55a:	b662      	cpsie	i
 800c55c:	b661      	cpsie	f
 800c55e:	f3bf 8f4f 	dsb	sy
 800c562:	f3bf 8f6f 	isb	sy
 800c566:	df00      	svc	0
 800c568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c56a:	bf00      	nop
 800c56c:	e000ed08 	.word	0xe000ed08

0800c570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b086      	sub	sp, #24
 800c574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c576:	4b46      	ldr	r3, [pc, #280]	; (800c690 <xPortStartScheduler+0x120>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4a46      	ldr	r2, [pc, #280]	; (800c694 <xPortStartScheduler+0x124>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d10a      	bne.n	800c596 <xPortStartScheduler+0x26>
	__asm volatile
 800c580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c584:	f383 8811 	msr	BASEPRI, r3
 800c588:	f3bf 8f6f 	isb	sy
 800c58c:	f3bf 8f4f 	dsb	sy
 800c590:	613b      	str	r3, [r7, #16]
}
 800c592:	bf00      	nop
 800c594:	e7fe      	b.n	800c594 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c596:	4b3e      	ldr	r3, [pc, #248]	; (800c690 <xPortStartScheduler+0x120>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	4a3f      	ldr	r2, [pc, #252]	; (800c698 <xPortStartScheduler+0x128>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d10a      	bne.n	800c5b6 <xPortStartScheduler+0x46>
	__asm volatile
 800c5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a4:	f383 8811 	msr	BASEPRI, r3
 800c5a8:	f3bf 8f6f 	isb	sy
 800c5ac:	f3bf 8f4f 	dsb	sy
 800c5b0:	60fb      	str	r3, [r7, #12]
}
 800c5b2:	bf00      	nop
 800c5b4:	e7fe      	b.n	800c5b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c5b6:	4b39      	ldr	r3, [pc, #228]	; (800c69c <xPortStartScheduler+0x12c>)
 800c5b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	b2db      	uxtb	r3, r3
 800c5c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	22ff      	movs	r2, #255	; 0xff
 800c5c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	b2db      	uxtb	r3, r3
 800c5ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c5d0:	78fb      	ldrb	r3, [r7, #3]
 800c5d2:	b2db      	uxtb	r3, r3
 800c5d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c5d8:	b2da      	uxtb	r2, r3
 800c5da:	4b31      	ldr	r3, [pc, #196]	; (800c6a0 <xPortStartScheduler+0x130>)
 800c5dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c5de:	4b31      	ldr	r3, [pc, #196]	; (800c6a4 <xPortStartScheduler+0x134>)
 800c5e0:	2207      	movs	r2, #7
 800c5e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5e4:	e009      	b.n	800c5fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c5e6:	4b2f      	ldr	r3, [pc, #188]	; (800c6a4 <xPortStartScheduler+0x134>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	3b01      	subs	r3, #1
 800c5ec:	4a2d      	ldr	r2, [pc, #180]	; (800c6a4 <xPortStartScheduler+0x134>)
 800c5ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c5f0:	78fb      	ldrb	r3, [r7, #3]
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	005b      	lsls	r3, r3, #1
 800c5f6:	b2db      	uxtb	r3, r3
 800c5f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5fa:	78fb      	ldrb	r3, [r7, #3]
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c602:	2b80      	cmp	r3, #128	; 0x80
 800c604:	d0ef      	beq.n	800c5e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c606:	4b27      	ldr	r3, [pc, #156]	; (800c6a4 <xPortStartScheduler+0x134>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f1c3 0307 	rsb	r3, r3, #7
 800c60e:	2b04      	cmp	r3, #4
 800c610:	d00a      	beq.n	800c628 <xPortStartScheduler+0xb8>
	__asm volatile
 800c612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c616:	f383 8811 	msr	BASEPRI, r3
 800c61a:	f3bf 8f6f 	isb	sy
 800c61e:	f3bf 8f4f 	dsb	sy
 800c622:	60bb      	str	r3, [r7, #8]
}
 800c624:	bf00      	nop
 800c626:	e7fe      	b.n	800c626 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c628:	4b1e      	ldr	r3, [pc, #120]	; (800c6a4 <xPortStartScheduler+0x134>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	021b      	lsls	r3, r3, #8
 800c62e:	4a1d      	ldr	r2, [pc, #116]	; (800c6a4 <xPortStartScheduler+0x134>)
 800c630:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c632:	4b1c      	ldr	r3, [pc, #112]	; (800c6a4 <xPortStartScheduler+0x134>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c63a:	4a1a      	ldr	r2, [pc, #104]	; (800c6a4 <xPortStartScheduler+0x134>)
 800c63c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	b2da      	uxtb	r2, r3
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c646:	4b18      	ldr	r3, [pc, #96]	; (800c6a8 <xPortStartScheduler+0x138>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4a17      	ldr	r2, [pc, #92]	; (800c6a8 <xPortStartScheduler+0x138>)
 800c64c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c650:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c652:	4b15      	ldr	r3, [pc, #84]	; (800c6a8 <xPortStartScheduler+0x138>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	4a14      	ldr	r2, [pc, #80]	; (800c6a8 <xPortStartScheduler+0x138>)
 800c658:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c65c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c65e:	f000 f8dd 	bl	800c81c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c662:	4b12      	ldr	r3, [pc, #72]	; (800c6ac <xPortStartScheduler+0x13c>)
 800c664:	2200      	movs	r2, #0
 800c666:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c668:	f000 f8fc 	bl	800c864 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c66c:	4b10      	ldr	r3, [pc, #64]	; (800c6b0 <xPortStartScheduler+0x140>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4a0f      	ldr	r2, [pc, #60]	; (800c6b0 <xPortStartScheduler+0x140>)
 800c672:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c676:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c678:	f7ff ff66 	bl	800c548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c67c:	f7fe ff48 	bl	800b510 <vTaskSwitchContext>
	prvTaskExitError();
 800c680:	f7ff ff1c 	bl	800c4bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c684:	2300      	movs	r3, #0
}
 800c686:	4618      	mov	r0, r3
 800c688:	3718      	adds	r7, #24
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
 800c68e:	bf00      	nop
 800c690:	e000ed00 	.word	0xe000ed00
 800c694:	410fc271 	.word	0x410fc271
 800c698:	410fc270 	.word	0x410fc270
 800c69c:	e000e400 	.word	0xe000e400
 800c6a0:	200027d0 	.word	0x200027d0
 800c6a4:	200027d4 	.word	0x200027d4
 800c6a8:	e000ed20 	.word	0xe000ed20
 800c6ac:	2000000c 	.word	0x2000000c
 800c6b0:	e000ef34 	.word	0xe000ef34

0800c6b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b083      	sub	sp, #12
 800c6b8:	af00      	add	r7, sp, #0
	__asm volatile
 800c6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6be:	f383 8811 	msr	BASEPRI, r3
 800c6c2:	f3bf 8f6f 	isb	sy
 800c6c6:	f3bf 8f4f 	dsb	sy
 800c6ca:	607b      	str	r3, [r7, #4]
}
 800c6cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c6ce:	4b0f      	ldr	r3, [pc, #60]	; (800c70c <vPortEnterCritical+0x58>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	4a0d      	ldr	r2, [pc, #52]	; (800c70c <vPortEnterCritical+0x58>)
 800c6d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c6d8:	4b0c      	ldr	r3, [pc, #48]	; (800c70c <vPortEnterCritical+0x58>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d10f      	bne.n	800c700 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c6e0:	4b0b      	ldr	r3, [pc, #44]	; (800c710 <vPortEnterCritical+0x5c>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d00a      	beq.n	800c700 <vPortEnterCritical+0x4c>
	__asm volatile
 800c6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ee:	f383 8811 	msr	BASEPRI, r3
 800c6f2:	f3bf 8f6f 	isb	sy
 800c6f6:	f3bf 8f4f 	dsb	sy
 800c6fa:	603b      	str	r3, [r7, #0]
}
 800c6fc:	bf00      	nop
 800c6fe:	e7fe      	b.n	800c6fe <vPortEnterCritical+0x4a>
	}
}
 800c700:	bf00      	nop
 800c702:	370c      	adds	r7, #12
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr
 800c70c:	2000000c 	.word	0x2000000c
 800c710:	e000ed04 	.word	0xe000ed04

0800c714 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c714:	b480      	push	{r7}
 800c716:	b083      	sub	sp, #12
 800c718:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c71a:	4b12      	ldr	r3, [pc, #72]	; (800c764 <vPortExitCritical+0x50>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d10a      	bne.n	800c738 <vPortExitCritical+0x24>
	__asm volatile
 800c722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c726:	f383 8811 	msr	BASEPRI, r3
 800c72a:	f3bf 8f6f 	isb	sy
 800c72e:	f3bf 8f4f 	dsb	sy
 800c732:	607b      	str	r3, [r7, #4]
}
 800c734:	bf00      	nop
 800c736:	e7fe      	b.n	800c736 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c738:	4b0a      	ldr	r3, [pc, #40]	; (800c764 <vPortExitCritical+0x50>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	3b01      	subs	r3, #1
 800c73e:	4a09      	ldr	r2, [pc, #36]	; (800c764 <vPortExitCritical+0x50>)
 800c740:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c742:	4b08      	ldr	r3, [pc, #32]	; (800c764 <vPortExitCritical+0x50>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d105      	bne.n	800c756 <vPortExitCritical+0x42>
 800c74a:	2300      	movs	r3, #0
 800c74c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	f383 8811 	msr	BASEPRI, r3
}
 800c754:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c756:	bf00      	nop
 800c758:	370c      	adds	r7, #12
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr
 800c762:	bf00      	nop
 800c764:	2000000c 	.word	0x2000000c
	...

0800c770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c770:	f3ef 8009 	mrs	r0, PSP
 800c774:	f3bf 8f6f 	isb	sy
 800c778:	4b15      	ldr	r3, [pc, #84]	; (800c7d0 <pxCurrentTCBConst>)
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	f01e 0f10 	tst.w	lr, #16
 800c780:	bf08      	it	eq
 800c782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c78a:	6010      	str	r0, [r2, #0]
 800c78c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c790:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c794:	f380 8811 	msr	BASEPRI, r0
 800c798:	f3bf 8f4f 	dsb	sy
 800c79c:	f3bf 8f6f 	isb	sy
 800c7a0:	f7fe feb6 	bl	800b510 <vTaskSwitchContext>
 800c7a4:	f04f 0000 	mov.w	r0, #0
 800c7a8:	f380 8811 	msr	BASEPRI, r0
 800c7ac:	bc09      	pop	{r0, r3}
 800c7ae:	6819      	ldr	r1, [r3, #0]
 800c7b0:	6808      	ldr	r0, [r1, #0]
 800c7b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b6:	f01e 0f10 	tst.w	lr, #16
 800c7ba:	bf08      	it	eq
 800c7bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c7c0:	f380 8809 	msr	PSP, r0
 800c7c4:	f3bf 8f6f 	isb	sy
 800c7c8:	4770      	bx	lr
 800c7ca:	bf00      	nop
 800c7cc:	f3af 8000 	nop.w

0800c7d0 <pxCurrentTCBConst>:
 800c7d0:	200021a4 	.word	0x200021a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c7d4:	bf00      	nop
 800c7d6:	bf00      	nop

0800c7d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b082      	sub	sp, #8
 800c7dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	607b      	str	r3, [r7, #4]
}
 800c7f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c7f2:	f7fe fdd3 	bl	800b39c <xTaskIncrementTick>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d003      	beq.n	800c804 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c7fc:	4b06      	ldr	r3, [pc, #24]	; (800c818 <xPortSysTickHandler+0x40>)
 800c7fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c802:	601a      	str	r2, [r3, #0]
 800c804:	2300      	movs	r3, #0
 800c806:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	f383 8811 	msr	BASEPRI, r3
}
 800c80e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c810:	bf00      	nop
 800c812:	3708      	adds	r7, #8
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}
 800c818:	e000ed04 	.word	0xe000ed04

0800c81c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c81c:	b480      	push	{r7}
 800c81e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c820:	4b0b      	ldr	r3, [pc, #44]	; (800c850 <vPortSetupTimerInterrupt+0x34>)
 800c822:	2200      	movs	r2, #0
 800c824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c826:	4b0b      	ldr	r3, [pc, #44]	; (800c854 <vPortSetupTimerInterrupt+0x38>)
 800c828:	2200      	movs	r2, #0
 800c82a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c82c:	4b0a      	ldr	r3, [pc, #40]	; (800c858 <vPortSetupTimerInterrupt+0x3c>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a0a      	ldr	r2, [pc, #40]	; (800c85c <vPortSetupTimerInterrupt+0x40>)
 800c832:	fba2 2303 	umull	r2, r3, r2, r3
 800c836:	099b      	lsrs	r3, r3, #6
 800c838:	4a09      	ldr	r2, [pc, #36]	; (800c860 <vPortSetupTimerInterrupt+0x44>)
 800c83a:	3b01      	subs	r3, #1
 800c83c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c83e:	4b04      	ldr	r3, [pc, #16]	; (800c850 <vPortSetupTimerInterrupt+0x34>)
 800c840:	2207      	movs	r2, #7
 800c842:	601a      	str	r2, [r3, #0]
}
 800c844:	bf00      	nop
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop
 800c850:	e000e010 	.word	0xe000e010
 800c854:	e000e018 	.word	0xe000e018
 800c858:	20000000 	.word	0x20000000
 800c85c:	10624dd3 	.word	0x10624dd3
 800c860:	e000e014 	.word	0xe000e014

0800c864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c864:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c874 <vPortEnableVFP+0x10>
 800c868:	6801      	ldr	r1, [r0, #0]
 800c86a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c86e:	6001      	str	r1, [r0, #0]
 800c870:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c872:	bf00      	nop
 800c874:	e000ed88 	.word	0xe000ed88

0800c878 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c878:	b480      	push	{r7}
 800c87a:	b085      	sub	sp, #20
 800c87c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c87e:	f3ef 8305 	mrs	r3, IPSR
 800c882:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2b0f      	cmp	r3, #15
 800c888:	d914      	bls.n	800c8b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c88a:	4a17      	ldr	r2, [pc, #92]	; (800c8e8 <vPortValidateInterruptPriority+0x70>)
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	4413      	add	r3, r2
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c894:	4b15      	ldr	r3, [pc, #84]	; (800c8ec <vPortValidateInterruptPriority+0x74>)
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	7afa      	ldrb	r2, [r7, #11]
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d20a      	bcs.n	800c8b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a2:	f383 8811 	msr	BASEPRI, r3
 800c8a6:	f3bf 8f6f 	isb	sy
 800c8aa:	f3bf 8f4f 	dsb	sy
 800c8ae:	607b      	str	r3, [r7, #4]
}
 800c8b0:	bf00      	nop
 800c8b2:	e7fe      	b.n	800c8b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c8b4:	4b0e      	ldr	r3, [pc, #56]	; (800c8f0 <vPortValidateInterruptPriority+0x78>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c8bc:	4b0d      	ldr	r3, [pc, #52]	; (800c8f4 <vPortValidateInterruptPriority+0x7c>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d90a      	bls.n	800c8da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c8:	f383 8811 	msr	BASEPRI, r3
 800c8cc:	f3bf 8f6f 	isb	sy
 800c8d0:	f3bf 8f4f 	dsb	sy
 800c8d4:	603b      	str	r3, [r7, #0]
}
 800c8d6:	bf00      	nop
 800c8d8:	e7fe      	b.n	800c8d8 <vPortValidateInterruptPriority+0x60>
	}
 800c8da:	bf00      	nop
 800c8dc:	3714      	adds	r7, #20
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e4:	4770      	bx	lr
 800c8e6:	bf00      	nop
 800c8e8:	e000e3f0 	.word	0xe000e3f0
 800c8ec:	200027d0 	.word	0x200027d0
 800c8f0:	e000ed0c 	.word	0xe000ed0c
 800c8f4:	200027d4 	.word	0x200027d4

0800c8f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b08a      	sub	sp, #40	; 0x28
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c900:	2300      	movs	r3, #0
 800c902:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c904:	f7fe fc8e 	bl	800b224 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c908:	4b5b      	ldr	r3, [pc, #364]	; (800ca78 <pvPortMalloc+0x180>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d101      	bne.n	800c914 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c910:	f000 f920 	bl	800cb54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c914:	4b59      	ldr	r3, [pc, #356]	; (800ca7c <pvPortMalloc+0x184>)
 800c916:	681a      	ldr	r2, [r3, #0]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	4013      	ands	r3, r2
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f040 8093 	bne.w	800ca48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d01d      	beq.n	800c964 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c928:	2208      	movs	r2, #8
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	4413      	add	r3, r2
 800c92e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f003 0307 	and.w	r3, r3, #7
 800c936:	2b00      	cmp	r3, #0
 800c938:	d014      	beq.n	800c964 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f023 0307 	bic.w	r3, r3, #7
 800c940:	3308      	adds	r3, #8
 800c942:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f003 0307 	and.w	r3, r3, #7
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d00a      	beq.n	800c964 <pvPortMalloc+0x6c>
	__asm volatile
 800c94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c952:	f383 8811 	msr	BASEPRI, r3
 800c956:	f3bf 8f6f 	isb	sy
 800c95a:	f3bf 8f4f 	dsb	sy
 800c95e:	617b      	str	r3, [r7, #20]
}
 800c960:	bf00      	nop
 800c962:	e7fe      	b.n	800c962 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d06e      	beq.n	800ca48 <pvPortMalloc+0x150>
 800c96a:	4b45      	ldr	r3, [pc, #276]	; (800ca80 <pvPortMalloc+0x188>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	687a      	ldr	r2, [r7, #4]
 800c970:	429a      	cmp	r2, r3
 800c972:	d869      	bhi.n	800ca48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c974:	4b43      	ldr	r3, [pc, #268]	; (800ca84 <pvPortMalloc+0x18c>)
 800c976:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c978:	4b42      	ldr	r3, [pc, #264]	; (800ca84 <pvPortMalloc+0x18c>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c97e:	e004      	b.n	800c98a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c982:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	687a      	ldr	r2, [r7, #4]
 800c990:	429a      	cmp	r2, r3
 800c992:	d903      	bls.n	800c99c <pvPortMalloc+0xa4>
 800c994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d1f1      	bne.n	800c980 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c99c:	4b36      	ldr	r3, [pc, #216]	; (800ca78 <pvPortMalloc+0x180>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d050      	beq.n	800ca48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c9a6:	6a3b      	ldr	r3, [r7, #32]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	2208      	movs	r2, #8
 800c9ac:	4413      	add	r3, r2
 800c9ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b2:	681a      	ldr	r2, [r3, #0]
 800c9b4:	6a3b      	ldr	r3, [r7, #32]
 800c9b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ba:	685a      	ldr	r2, [r3, #4]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	1ad2      	subs	r2, r2, r3
 800c9c0:	2308      	movs	r3, #8
 800c9c2:	005b      	lsls	r3, r3, #1
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d91f      	bls.n	800ca08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c9c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	4413      	add	r3, r2
 800c9ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	f003 0307 	and.w	r3, r3, #7
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00a      	beq.n	800c9f0 <pvPortMalloc+0xf8>
	__asm volatile
 800c9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9de:	f383 8811 	msr	BASEPRI, r3
 800c9e2:	f3bf 8f6f 	isb	sy
 800c9e6:	f3bf 8f4f 	dsb	sy
 800c9ea:	613b      	str	r3, [r7, #16]
}
 800c9ec:	bf00      	nop
 800c9ee:	e7fe      	b.n	800c9ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f2:	685a      	ldr	r2, [r3, #4]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	1ad2      	subs	r2, r2, r3
 800c9f8:	69bb      	ldr	r3, [r7, #24]
 800c9fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca02:	69b8      	ldr	r0, [r7, #24]
 800ca04:	f000 f908 	bl	800cc18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca08:	4b1d      	ldr	r3, [pc, #116]	; (800ca80 <pvPortMalloc+0x188>)
 800ca0a:	681a      	ldr	r2, [r3, #0]
 800ca0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	1ad3      	subs	r3, r2, r3
 800ca12:	4a1b      	ldr	r2, [pc, #108]	; (800ca80 <pvPortMalloc+0x188>)
 800ca14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ca16:	4b1a      	ldr	r3, [pc, #104]	; (800ca80 <pvPortMalloc+0x188>)
 800ca18:	681a      	ldr	r2, [r3, #0]
 800ca1a:	4b1b      	ldr	r3, [pc, #108]	; (800ca88 <pvPortMalloc+0x190>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d203      	bcs.n	800ca2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ca22:	4b17      	ldr	r3, [pc, #92]	; (800ca80 <pvPortMalloc+0x188>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	4a18      	ldr	r2, [pc, #96]	; (800ca88 <pvPortMalloc+0x190>)
 800ca28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ca2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2c:	685a      	ldr	r2, [r3, #4]
 800ca2e:	4b13      	ldr	r3, [pc, #76]	; (800ca7c <pvPortMalloc+0x184>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	431a      	orrs	r2, r3
 800ca34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ca38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ca3e:	4b13      	ldr	r3, [pc, #76]	; (800ca8c <pvPortMalloc+0x194>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	3301      	adds	r3, #1
 800ca44:	4a11      	ldr	r2, [pc, #68]	; (800ca8c <pvPortMalloc+0x194>)
 800ca46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ca48:	f7fe fbfa 	bl	800b240 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca4c:	69fb      	ldr	r3, [r7, #28]
 800ca4e:	f003 0307 	and.w	r3, r3, #7
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d00a      	beq.n	800ca6c <pvPortMalloc+0x174>
	__asm volatile
 800ca56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca5a:	f383 8811 	msr	BASEPRI, r3
 800ca5e:	f3bf 8f6f 	isb	sy
 800ca62:	f3bf 8f4f 	dsb	sy
 800ca66:	60fb      	str	r3, [r7, #12]
}
 800ca68:	bf00      	nop
 800ca6a:	e7fe      	b.n	800ca6a <pvPortMalloc+0x172>
	return pvReturn;
 800ca6c:	69fb      	ldr	r3, [r7, #28]
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3728      	adds	r7, #40	; 0x28
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	20003398 	.word	0x20003398
 800ca7c:	200033ac 	.word	0x200033ac
 800ca80:	2000339c 	.word	0x2000339c
 800ca84:	20003390 	.word	0x20003390
 800ca88:	200033a0 	.word	0x200033a0
 800ca8c:	200033a4 	.word	0x200033a4

0800ca90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b086      	sub	sp, #24
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d04d      	beq.n	800cb3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800caa2:	2308      	movs	r3, #8
 800caa4:	425b      	negs	r3, r3
 800caa6:	697a      	ldr	r2, [r7, #20]
 800caa8:	4413      	add	r3, r2
 800caaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	685a      	ldr	r2, [r3, #4]
 800cab4:	4b24      	ldr	r3, [pc, #144]	; (800cb48 <vPortFree+0xb8>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4013      	ands	r3, r2
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d10a      	bne.n	800cad4 <vPortFree+0x44>
	__asm volatile
 800cabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac2:	f383 8811 	msr	BASEPRI, r3
 800cac6:	f3bf 8f6f 	isb	sy
 800caca:	f3bf 8f4f 	dsb	sy
 800cace:	60fb      	str	r3, [r7, #12]
}
 800cad0:	bf00      	nop
 800cad2:	e7fe      	b.n	800cad2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d00a      	beq.n	800caf2 <vPortFree+0x62>
	__asm volatile
 800cadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae0:	f383 8811 	msr	BASEPRI, r3
 800cae4:	f3bf 8f6f 	isb	sy
 800cae8:	f3bf 8f4f 	dsb	sy
 800caec:	60bb      	str	r3, [r7, #8]
}
 800caee:	bf00      	nop
 800caf0:	e7fe      	b.n	800caf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	685a      	ldr	r2, [r3, #4]
 800caf6:	4b14      	ldr	r3, [pc, #80]	; (800cb48 <vPortFree+0xb8>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4013      	ands	r3, r2
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d01e      	beq.n	800cb3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d11a      	bne.n	800cb3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	685a      	ldr	r2, [r3, #4]
 800cb0c:	4b0e      	ldr	r3, [pc, #56]	; (800cb48 <vPortFree+0xb8>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	43db      	mvns	r3, r3
 800cb12:	401a      	ands	r2, r3
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cb18:	f7fe fb84 	bl	800b224 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	685a      	ldr	r2, [r3, #4]
 800cb20:	4b0a      	ldr	r3, [pc, #40]	; (800cb4c <vPortFree+0xbc>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4413      	add	r3, r2
 800cb26:	4a09      	ldr	r2, [pc, #36]	; (800cb4c <vPortFree+0xbc>)
 800cb28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cb2a:	6938      	ldr	r0, [r7, #16]
 800cb2c:	f000 f874 	bl	800cc18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cb30:	4b07      	ldr	r3, [pc, #28]	; (800cb50 <vPortFree+0xc0>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	3301      	adds	r3, #1
 800cb36:	4a06      	ldr	r2, [pc, #24]	; (800cb50 <vPortFree+0xc0>)
 800cb38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cb3a:	f7fe fb81 	bl	800b240 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cb3e:	bf00      	nop
 800cb40:	3718      	adds	r7, #24
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	200033ac 	.word	0x200033ac
 800cb4c:	2000339c 	.word	0x2000339c
 800cb50:	200033a8 	.word	0x200033a8

0800cb54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cb54:	b480      	push	{r7}
 800cb56:	b085      	sub	sp, #20
 800cb58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cb5a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800cb5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cb60:	4b27      	ldr	r3, [pc, #156]	; (800cc00 <prvHeapInit+0xac>)
 800cb62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f003 0307 	and.w	r3, r3, #7
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d00c      	beq.n	800cb88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	3307      	adds	r3, #7
 800cb72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f023 0307 	bic.w	r3, r3, #7
 800cb7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cb7c:	68ba      	ldr	r2, [r7, #8]
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	1ad3      	subs	r3, r2, r3
 800cb82:	4a1f      	ldr	r2, [pc, #124]	; (800cc00 <prvHeapInit+0xac>)
 800cb84:	4413      	add	r3, r2
 800cb86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cb8c:	4a1d      	ldr	r2, [pc, #116]	; (800cc04 <prvHeapInit+0xb0>)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cb92:	4b1c      	ldr	r3, [pc, #112]	; (800cc04 <prvHeapInit+0xb0>)
 800cb94:	2200      	movs	r2, #0
 800cb96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	68ba      	ldr	r2, [r7, #8]
 800cb9c:	4413      	add	r3, r2
 800cb9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cba0:	2208      	movs	r2, #8
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	1a9b      	subs	r3, r3, r2
 800cba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f023 0307 	bic.w	r3, r3, #7
 800cbae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	4a15      	ldr	r2, [pc, #84]	; (800cc08 <prvHeapInit+0xb4>)
 800cbb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cbb6:	4b14      	ldr	r3, [pc, #80]	; (800cc08 <prvHeapInit+0xb4>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cbbe:	4b12      	ldr	r3, [pc, #72]	; (800cc08 <prvHeapInit+0xb4>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	1ad2      	subs	r2, r2, r3
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cbd4:	4b0c      	ldr	r3, [pc, #48]	; (800cc08 <prvHeapInit+0xb4>)
 800cbd6:	681a      	ldr	r2, [r3, #0]
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	4a0a      	ldr	r2, [pc, #40]	; (800cc0c <prvHeapInit+0xb8>)
 800cbe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	4a09      	ldr	r2, [pc, #36]	; (800cc10 <prvHeapInit+0xbc>)
 800cbea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cbec:	4b09      	ldr	r3, [pc, #36]	; (800cc14 <prvHeapInit+0xc0>)
 800cbee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cbf2:	601a      	str	r2, [r3, #0]
}
 800cbf4:	bf00      	nop
 800cbf6:	3714      	adds	r7, #20
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfe:	4770      	bx	lr
 800cc00:	200027d8 	.word	0x200027d8
 800cc04:	20003390 	.word	0x20003390
 800cc08:	20003398 	.word	0x20003398
 800cc0c:	200033a0 	.word	0x200033a0
 800cc10:	2000339c 	.word	0x2000339c
 800cc14:	200033ac 	.word	0x200033ac

0800cc18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cc20:	4b28      	ldr	r3, [pc, #160]	; (800ccc4 <prvInsertBlockIntoFreeList+0xac>)
 800cc22:	60fb      	str	r3, [r7, #12]
 800cc24:	e002      	b.n	800cc2c <prvInsertBlockIntoFreeList+0x14>
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	60fb      	str	r3, [r7, #12]
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	687a      	ldr	r2, [r7, #4]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d8f7      	bhi.n	800cc26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	68ba      	ldr	r2, [r7, #8]
 800cc40:	4413      	add	r3, r2
 800cc42:	687a      	ldr	r2, [r7, #4]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d108      	bne.n	800cc5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	685a      	ldr	r2, [r3, #4]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	441a      	add	r2, r3
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	68ba      	ldr	r2, [r7, #8]
 800cc64:	441a      	add	r2, r3
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d118      	bne.n	800cca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681a      	ldr	r2, [r3, #0]
 800cc72:	4b15      	ldr	r3, [pc, #84]	; (800ccc8 <prvInsertBlockIntoFreeList+0xb0>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d00d      	beq.n	800cc96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	685a      	ldr	r2, [r3, #4]
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	441a      	add	r2, r3
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	681a      	ldr	r2, [r3, #0]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	601a      	str	r2, [r3, #0]
 800cc94:	e008      	b.n	800cca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cc96:	4b0c      	ldr	r3, [pc, #48]	; (800ccc8 <prvInsertBlockIntoFreeList+0xb0>)
 800cc98:	681a      	ldr	r2, [r3, #0]
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	601a      	str	r2, [r3, #0]
 800cc9e:	e003      	b.n	800cca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681a      	ldr	r2, [r3, #0]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cca8:	68fa      	ldr	r2, [r7, #12]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d002      	beq.n	800ccb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ccb6:	bf00      	nop
 800ccb8:	3714      	adds	r7, #20
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr
 800ccc2:	bf00      	nop
 800ccc4:	20003390 	.word	0x20003390
 800ccc8:	20003398 	.word	0x20003398

0800cccc <__errno>:
 800cccc:	4b01      	ldr	r3, [pc, #4]	; (800ccd4 <__errno+0x8>)
 800ccce:	6818      	ldr	r0, [r3, #0]
 800ccd0:	4770      	bx	lr
 800ccd2:	bf00      	nop
 800ccd4:	20000010 	.word	0x20000010

0800ccd8 <std>:
 800ccd8:	2300      	movs	r3, #0
 800ccda:	b510      	push	{r4, lr}
 800ccdc:	4604      	mov	r4, r0
 800ccde:	e9c0 3300 	strd	r3, r3, [r0]
 800cce2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cce6:	6083      	str	r3, [r0, #8]
 800cce8:	8181      	strh	r1, [r0, #12]
 800ccea:	6643      	str	r3, [r0, #100]	; 0x64
 800ccec:	81c2      	strh	r2, [r0, #14]
 800ccee:	6183      	str	r3, [r0, #24]
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	2208      	movs	r2, #8
 800ccf4:	305c      	adds	r0, #92	; 0x5c
 800ccf6:	f000 f93b 	bl	800cf70 <memset>
 800ccfa:	4b05      	ldr	r3, [pc, #20]	; (800cd10 <std+0x38>)
 800ccfc:	6263      	str	r3, [r4, #36]	; 0x24
 800ccfe:	4b05      	ldr	r3, [pc, #20]	; (800cd14 <std+0x3c>)
 800cd00:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd02:	4b05      	ldr	r3, [pc, #20]	; (800cd18 <std+0x40>)
 800cd04:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd06:	4b05      	ldr	r3, [pc, #20]	; (800cd1c <std+0x44>)
 800cd08:	6224      	str	r4, [r4, #32]
 800cd0a:	6323      	str	r3, [r4, #48]	; 0x30
 800cd0c:	bd10      	pop	{r4, pc}
 800cd0e:	bf00      	nop
 800cd10:	0800d391 	.word	0x0800d391
 800cd14:	0800d3b3 	.word	0x0800d3b3
 800cd18:	0800d3eb 	.word	0x0800d3eb
 800cd1c:	0800d40f 	.word	0x0800d40f

0800cd20 <_cleanup_r>:
 800cd20:	4901      	ldr	r1, [pc, #4]	; (800cd28 <_cleanup_r+0x8>)
 800cd22:	f000 b8af 	b.w	800ce84 <_fwalk_reent>
 800cd26:	bf00      	nop
 800cd28:	0800d875 	.word	0x0800d875

0800cd2c <__sfmoreglue>:
 800cd2c:	b570      	push	{r4, r5, r6, lr}
 800cd2e:	2268      	movs	r2, #104	; 0x68
 800cd30:	1e4d      	subs	r5, r1, #1
 800cd32:	4355      	muls	r5, r2
 800cd34:	460e      	mov	r6, r1
 800cd36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cd3a:	f000 f98d 	bl	800d058 <_malloc_r>
 800cd3e:	4604      	mov	r4, r0
 800cd40:	b140      	cbz	r0, 800cd54 <__sfmoreglue+0x28>
 800cd42:	2100      	movs	r1, #0
 800cd44:	e9c0 1600 	strd	r1, r6, [r0]
 800cd48:	300c      	adds	r0, #12
 800cd4a:	60a0      	str	r0, [r4, #8]
 800cd4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cd50:	f000 f90e 	bl	800cf70 <memset>
 800cd54:	4620      	mov	r0, r4
 800cd56:	bd70      	pop	{r4, r5, r6, pc}

0800cd58 <__sfp_lock_acquire>:
 800cd58:	4801      	ldr	r0, [pc, #4]	; (800cd60 <__sfp_lock_acquire+0x8>)
 800cd5a:	f000 b8d8 	b.w	800cf0e <__retarget_lock_acquire_recursive>
 800cd5e:	bf00      	nop
 800cd60:	200033b1 	.word	0x200033b1

0800cd64 <__sfp_lock_release>:
 800cd64:	4801      	ldr	r0, [pc, #4]	; (800cd6c <__sfp_lock_release+0x8>)
 800cd66:	f000 b8d3 	b.w	800cf10 <__retarget_lock_release_recursive>
 800cd6a:	bf00      	nop
 800cd6c:	200033b1 	.word	0x200033b1

0800cd70 <__sinit_lock_acquire>:
 800cd70:	4801      	ldr	r0, [pc, #4]	; (800cd78 <__sinit_lock_acquire+0x8>)
 800cd72:	f000 b8cc 	b.w	800cf0e <__retarget_lock_acquire_recursive>
 800cd76:	bf00      	nop
 800cd78:	200033b2 	.word	0x200033b2

0800cd7c <__sinit_lock_release>:
 800cd7c:	4801      	ldr	r0, [pc, #4]	; (800cd84 <__sinit_lock_release+0x8>)
 800cd7e:	f000 b8c7 	b.w	800cf10 <__retarget_lock_release_recursive>
 800cd82:	bf00      	nop
 800cd84:	200033b2 	.word	0x200033b2

0800cd88 <__sinit>:
 800cd88:	b510      	push	{r4, lr}
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	f7ff fff0 	bl	800cd70 <__sinit_lock_acquire>
 800cd90:	69a3      	ldr	r3, [r4, #24]
 800cd92:	b11b      	cbz	r3, 800cd9c <__sinit+0x14>
 800cd94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd98:	f7ff bff0 	b.w	800cd7c <__sinit_lock_release>
 800cd9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cda0:	6523      	str	r3, [r4, #80]	; 0x50
 800cda2:	4b13      	ldr	r3, [pc, #76]	; (800cdf0 <__sinit+0x68>)
 800cda4:	4a13      	ldr	r2, [pc, #76]	; (800cdf4 <__sinit+0x6c>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	62a2      	str	r2, [r4, #40]	; 0x28
 800cdaa:	42a3      	cmp	r3, r4
 800cdac:	bf04      	itt	eq
 800cdae:	2301      	moveq	r3, #1
 800cdb0:	61a3      	streq	r3, [r4, #24]
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	f000 f820 	bl	800cdf8 <__sfp>
 800cdb8:	6060      	str	r0, [r4, #4]
 800cdba:	4620      	mov	r0, r4
 800cdbc:	f000 f81c 	bl	800cdf8 <__sfp>
 800cdc0:	60a0      	str	r0, [r4, #8]
 800cdc2:	4620      	mov	r0, r4
 800cdc4:	f000 f818 	bl	800cdf8 <__sfp>
 800cdc8:	2200      	movs	r2, #0
 800cdca:	60e0      	str	r0, [r4, #12]
 800cdcc:	2104      	movs	r1, #4
 800cdce:	6860      	ldr	r0, [r4, #4]
 800cdd0:	f7ff ff82 	bl	800ccd8 <std>
 800cdd4:	68a0      	ldr	r0, [r4, #8]
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	2109      	movs	r1, #9
 800cdda:	f7ff ff7d 	bl	800ccd8 <std>
 800cdde:	68e0      	ldr	r0, [r4, #12]
 800cde0:	2202      	movs	r2, #2
 800cde2:	2112      	movs	r1, #18
 800cde4:	f7ff ff78 	bl	800ccd8 <std>
 800cde8:	2301      	movs	r3, #1
 800cdea:	61a3      	str	r3, [r4, #24]
 800cdec:	e7d2      	b.n	800cd94 <__sinit+0xc>
 800cdee:	bf00      	nop
 800cdf0:	0800edd8 	.word	0x0800edd8
 800cdf4:	0800cd21 	.word	0x0800cd21

0800cdf8 <__sfp>:
 800cdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdfa:	4607      	mov	r7, r0
 800cdfc:	f7ff ffac 	bl	800cd58 <__sfp_lock_acquire>
 800ce00:	4b1e      	ldr	r3, [pc, #120]	; (800ce7c <__sfp+0x84>)
 800ce02:	681e      	ldr	r6, [r3, #0]
 800ce04:	69b3      	ldr	r3, [r6, #24]
 800ce06:	b913      	cbnz	r3, 800ce0e <__sfp+0x16>
 800ce08:	4630      	mov	r0, r6
 800ce0a:	f7ff ffbd 	bl	800cd88 <__sinit>
 800ce0e:	3648      	adds	r6, #72	; 0x48
 800ce10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ce14:	3b01      	subs	r3, #1
 800ce16:	d503      	bpl.n	800ce20 <__sfp+0x28>
 800ce18:	6833      	ldr	r3, [r6, #0]
 800ce1a:	b30b      	cbz	r3, 800ce60 <__sfp+0x68>
 800ce1c:	6836      	ldr	r6, [r6, #0]
 800ce1e:	e7f7      	b.n	800ce10 <__sfp+0x18>
 800ce20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ce24:	b9d5      	cbnz	r5, 800ce5c <__sfp+0x64>
 800ce26:	4b16      	ldr	r3, [pc, #88]	; (800ce80 <__sfp+0x88>)
 800ce28:	60e3      	str	r3, [r4, #12]
 800ce2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ce2e:	6665      	str	r5, [r4, #100]	; 0x64
 800ce30:	f000 f86c 	bl	800cf0c <__retarget_lock_init_recursive>
 800ce34:	f7ff ff96 	bl	800cd64 <__sfp_lock_release>
 800ce38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ce3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ce40:	6025      	str	r5, [r4, #0]
 800ce42:	61a5      	str	r5, [r4, #24]
 800ce44:	2208      	movs	r2, #8
 800ce46:	4629      	mov	r1, r5
 800ce48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ce4c:	f000 f890 	bl	800cf70 <memset>
 800ce50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ce54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ce58:	4620      	mov	r0, r4
 800ce5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce5c:	3468      	adds	r4, #104	; 0x68
 800ce5e:	e7d9      	b.n	800ce14 <__sfp+0x1c>
 800ce60:	2104      	movs	r1, #4
 800ce62:	4638      	mov	r0, r7
 800ce64:	f7ff ff62 	bl	800cd2c <__sfmoreglue>
 800ce68:	4604      	mov	r4, r0
 800ce6a:	6030      	str	r0, [r6, #0]
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	d1d5      	bne.n	800ce1c <__sfp+0x24>
 800ce70:	f7ff ff78 	bl	800cd64 <__sfp_lock_release>
 800ce74:	230c      	movs	r3, #12
 800ce76:	603b      	str	r3, [r7, #0]
 800ce78:	e7ee      	b.n	800ce58 <__sfp+0x60>
 800ce7a:	bf00      	nop
 800ce7c:	0800edd8 	.word	0x0800edd8
 800ce80:	ffff0001 	.word	0xffff0001

0800ce84 <_fwalk_reent>:
 800ce84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce88:	4606      	mov	r6, r0
 800ce8a:	4688      	mov	r8, r1
 800ce8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ce90:	2700      	movs	r7, #0
 800ce92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce96:	f1b9 0901 	subs.w	r9, r9, #1
 800ce9a:	d505      	bpl.n	800cea8 <_fwalk_reent+0x24>
 800ce9c:	6824      	ldr	r4, [r4, #0]
 800ce9e:	2c00      	cmp	r4, #0
 800cea0:	d1f7      	bne.n	800ce92 <_fwalk_reent+0xe>
 800cea2:	4638      	mov	r0, r7
 800cea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cea8:	89ab      	ldrh	r3, [r5, #12]
 800ceaa:	2b01      	cmp	r3, #1
 800ceac:	d907      	bls.n	800cebe <_fwalk_reent+0x3a>
 800ceae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	d003      	beq.n	800cebe <_fwalk_reent+0x3a>
 800ceb6:	4629      	mov	r1, r5
 800ceb8:	4630      	mov	r0, r6
 800ceba:	47c0      	blx	r8
 800cebc:	4307      	orrs	r7, r0
 800cebe:	3568      	adds	r5, #104	; 0x68
 800cec0:	e7e9      	b.n	800ce96 <_fwalk_reent+0x12>
	...

0800cec4 <__libc_init_array>:
 800cec4:	b570      	push	{r4, r5, r6, lr}
 800cec6:	4d0d      	ldr	r5, [pc, #52]	; (800cefc <__libc_init_array+0x38>)
 800cec8:	4c0d      	ldr	r4, [pc, #52]	; (800cf00 <__libc_init_array+0x3c>)
 800ceca:	1b64      	subs	r4, r4, r5
 800cecc:	10a4      	asrs	r4, r4, #2
 800cece:	2600      	movs	r6, #0
 800ced0:	42a6      	cmp	r6, r4
 800ced2:	d109      	bne.n	800cee8 <__libc_init_array+0x24>
 800ced4:	4d0b      	ldr	r5, [pc, #44]	; (800cf04 <__libc_init_array+0x40>)
 800ced6:	4c0c      	ldr	r4, [pc, #48]	; (800cf08 <__libc_init_array+0x44>)
 800ced8:	f001 faba 	bl	800e450 <_init>
 800cedc:	1b64      	subs	r4, r4, r5
 800cede:	10a4      	asrs	r4, r4, #2
 800cee0:	2600      	movs	r6, #0
 800cee2:	42a6      	cmp	r6, r4
 800cee4:	d105      	bne.n	800cef2 <__libc_init_array+0x2e>
 800cee6:	bd70      	pop	{r4, r5, r6, pc}
 800cee8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ceec:	4798      	blx	r3
 800ceee:	3601      	adds	r6, #1
 800cef0:	e7ee      	b.n	800ced0 <__libc_init_array+0xc>
 800cef2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cef6:	4798      	blx	r3
 800cef8:	3601      	adds	r6, #1
 800cefa:	e7f2      	b.n	800cee2 <__libc_init_array+0x1e>
 800cefc:	0800eec8 	.word	0x0800eec8
 800cf00:	0800eec8 	.word	0x0800eec8
 800cf04:	0800eec8 	.word	0x0800eec8
 800cf08:	0800eecc 	.word	0x0800eecc

0800cf0c <__retarget_lock_init_recursive>:
 800cf0c:	4770      	bx	lr

0800cf0e <__retarget_lock_acquire_recursive>:
 800cf0e:	4770      	bx	lr

0800cf10 <__retarget_lock_release_recursive>:
 800cf10:	4770      	bx	lr
	...

0800cf14 <malloc>:
 800cf14:	4b02      	ldr	r3, [pc, #8]	; (800cf20 <malloc+0xc>)
 800cf16:	4601      	mov	r1, r0
 800cf18:	6818      	ldr	r0, [r3, #0]
 800cf1a:	f000 b89d 	b.w	800d058 <_malloc_r>
 800cf1e:	bf00      	nop
 800cf20:	20000010 	.word	0x20000010

0800cf24 <free>:
 800cf24:	4b02      	ldr	r3, [pc, #8]	; (800cf30 <free+0xc>)
 800cf26:	4601      	mov	r1, r0
 800cf28:	6818      	ldr	r0, [r3, #0]
 800cf2a:	f000 b829 	b.w	800cf80 <_free_r>
 800cf2e:	bf00      	nop
 800cf30:	20000010 	.word	0x20000010

0800cf34 <memcmp>:
 800cf34:	b510      	push	{r4, lr}
 800cf36:	3901      	subs	r1, #1
 800cf38:	4402      	add	r2, r0
 800cf3a:	4290      	cmp	r0, r2
 800cf3c:	d101      	bne.n	800cf42 <memcmp+0xe>
 800cf3e:	2000      	movs	r0, #0
 800cf40:	e005      	b.n	800cf4e <memcmp+0x1a>
 800cf42:	7803      	ldrb	r3, [r0, #0]
 800cf44:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cf48:	42a3      	cmp	r3, r4
 800cf4a:	d001      	beq.n	800cf50 <memcmp+0x1c>
 800cf4c:	1b18      	subs	r0, r3, r4
 800cf4e:	bd10      	pop	{r4, pc}
 800cf50:	3001      	adds	r0, #1
 800cf52:	e7f2      	b.n	800cf3a <memcmp+0x6>

0800cf54 <memcpy>:
 800cf54:	440a      	add	r2, r1
 800cf56:	4291      	cmp	r1, r2
 800cf58:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf5c:	d100      	bne.n	800cf60 <memcpy+0xc>
 800cf5e:	4770      	bx	lr
 800cf60:	b510      	push	{r4, lr}
 800cf62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf6a:	4291      	cmp	r1, r2
 800cf6c:	d1f9      	bne.n	800cf62 <memcpy+0xe>
 800cf6e:	bd10      	pop	{r4, pc}

0800cf70 <memset>:
 800cf70:	4402      	add	r2, r0
 800cf72:	4603      	mov	r3, r0
 800cf74:	4293      	cmp	r3, r2
 800cf76:	d100      	bne.n	800cf7a <memset+0xa>
 800cf78:	4770      	bx	lr
 800cf7a:	f803 1b01 	strb.w	r1, [r3], #1
 800cf7e:	e7f9      	b.n	800cf74 <memset+0x4>

0800cf80 <_free_r>:
 800cf80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf82:	2900      	cmp	r1, #0
 800cf84:	d044      	beq.n	800d010 <_free_r+0x90>
 800cf86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf8a:	9001      	str	r0, [sp, #4]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	f1a1 0404 	sub.w	r4, r1, #4
 800cf92:	bfb8      	it	lt
 800cf94:	18e4      	addlt	r4, r4, r3
 800cf96:	f000 fd33 	bl	800da00 <__malloc_lock>
 800cf9a:	4a1e      	ldr	r2, [pc, #120]	; (800d014 <_free_r+0x94>)
 800cf9c:	9801      	ldr	r0, [sp, #4]
 800cf9e:	6813      	ldr	r3, [r2, #0]
 800cfa0:	b933      	cbnz	r3, 800cfb0 <_free_r+0x30>
 800cfa2:	6063      	str	r3, [r4, #4]
 800cfa4:	6014      	str	r4, [r2, #0]
 800cfa6:	b003      	add	sp, #12
 800cfa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cfac:	f000 bd2e 	b.w	800da0c <__malloc_unlock>
 800cfb0:	42a3      	cmp	r3, r4
 800cfb2:	d908      	bls.n	800cfc6 <_free_r+0x46>
 800cfb4:	6825      	ldr	r5, [r4, #0]
 800cfb6:	1961      	adds	r1, r4, r5
 800cfb8:	428b      	cmp	r3, r1
 800cfba:	bf01      	itttt	eq
 800cfbc:	6819      	ldreq	r1, [r3, #0]
 800cfbe:	685b      	ldreq	r3, [r3, #4]
 800cfc0:	1949      	addeq	r1, r1, r5
 800cfc2:	6021      	streq	r1, [r4, #0]
 800cfc4:	e7ed      	b.n	800cfa2 <_free_r+0x22>
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	685b      	ldr	r3, [r3, #4]
 800cfca:	b10b      	cbz	r3, 800cfd0 <_free_r+0x50>
 800cfcc:	42a3      	cmp	r3, r4
 800cfce:	d9fa      	bls.n	800cfc6 <_free_r+0x46>
 800cfd0:	6811      	ldr	r1, [r2, #0]
 800cfd2:	1855      	adds	r5, r2, r1
 800cfd4:	42a5      	cmp	r5, r4
 800cfd6:	d10b      	bne.n	800cff0 <_free_r+0x70>
 800cfd8:	6824      	ldr	r4, [r4, #0]
 800cfda:	4421      	add	r1, r4
 800cfdc:	1854      	adds	r4, r2, r1
 800cfde:	42a3      	cmp	r3, r4
 800cfe0:	6011      	str	r1, [r2, #0]
 800cfe2:	d1e0      	bne.n	800cfa6 <_free_r+0x26>
 800cfe4:	681c      	ldr	r4, [r3, #0]
 800cfe6:	685b      	ldr	r3, [r3, #4]
 800cfe8:	6053      	str	r3, [r2, #4]
 800cfea:	4421      	add	r1, r4
 800cfec:	6011      	str	r1, [r2, #0]
 800cfee:	e7da      	b.n	800cfa6 <_free_r+0x26>
 800cff0:	d902      	bls.n	800cff8 <_free_r+0x78>
 800cff2:	230c      	movs	r3, #12
 800cff4:	6003      	str	r3, [r0, #0]
 800cff6:	e7d6      	b.n	800cfa6 <_free_r+0x26>
 800cff8:	6825      	ldr	r5, [r4, #0]
 800cffa:	1961      	adds	r1, r4, r5
 800cffc:	428b      	cmp	r3, r1
 800cffe:	bf04      	itt	eq
 800d000:	6819      	ldreq	r1, [r3, #0]
 800d002:	685b      	ldreq	r3, [r3, #4]
 800d004:	6063      	str	r3, [r4, #4]
 800d006:	bf04      	itt	eq
 800d008:	1949      	addeq	r1, r1, r5
 800d00a:	6021      	streq	r1, [r4, #0]
 800d00c:	6054      	str	r4, [r2, #4]
 800d00e:	e7ca      	b.n	800cfa6 <_free_r+0x26>
 800d010:	b003      	add	sp, #12
 800d012:	bd30      	pop	{r4, r5, pc}
 800d014:	200033b4 	.word	0x200033b4

0800d018 <sbrk_aligned>:
 800d018:	b570      	push	{r4, r5, r6, lr}
 800d01a:	4e0e      	ldr	r6, [pc, #56]	; (800d054 <sbrk_aligned+0x3c>)
 800d01c:	460c      	mov	r4, r1
 800d01e:	6831      	ldr	r1, [r6, #0]
 800d020:	4605      	mov	r5, r0
 800d022:	b911      	cbnz	r1, 800d02a <sbrk_aligned+0x12>
 800d024:	f000 f984 	bl	800d330 <_sbrk_r>
 800d028:	6030      	str	r0, [r6, #0]
 800d02a:	4621      	mov	r1, r4
 800d02c:	4628      	mov	r0, r5
 800d02e:	f000 f97f 	bl	800d330 <_sbrk_r>
 800d032:	1c43      	adds	r3, r0, #1
 800d034:	d00a      	beq.n	800d04c <sbrk_aligned+0x34>
 800d036:	1cc4      	adds	r4, r0, #3
 800d038:	f024 0403 	bic.w	r4, r4, #3
 800d03c:	42a0      	cmp	r0, r4
 800d03e:	d007      	beq.n	800d050 <sbrk_aligned+0x38>
 800d040:	1a21      	subs	r1, r4, r0
 800d042:	4628      	mov	r0, r5
 800d044:	f000 f974 	bl	800d330 <_sbrk_r>
 800d048:	3001      	adds	r0, #1
 800d04a:	d101      	bne.n	800d050 <sbrk_aligned+0x38>
 800d04c:	f04f 34ff 	mov.w	r4, #4294967295
 800d050:	4620      	mov	r0, r4
 800d052:	bd70      	pop	{r4, r5, r6, pc}
 800d054:	200033b8 	.word	0x200033b8

0800d058 <_malloc_r>:
 800d058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d05c:	1ccd      	adds	r5, r1, #3
 800d05e:	f025 0503 	bic.w	r5, r5, #3
 800d062:	3508      	adds	r5, #8
 800d064:	2d0c      	cmp	r5, #12
 800d066:	bf38      	it	cc
 800d068:	250c      	movcc	r5, #12
 800d06a:	2d00      	cmp	r5, #0
 800d06c:	4607      	mov	r7, r0
 800d06e:	db01      	blt.n	800d074 <_malloc_r+0x1c>
 800d070:	42a9      	cmp	r1, r5
 800d072:	d905      	bls.n	800d080 <_malloc_r+0x28>
 800d074:	230c      	movs	r3, #12
 800d076:	603b      	str	r3, [r7, #0]
 800d078:	2600      	movs	r6, #0
 800d07a:	4630      	mov	r0, r6
 800d07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d080:	4e2e      	ldr	r6, [pc, #184]	; (800d13c <_malloc_r+0xe4>)
 800d082:	f000 fcbd 	bl	800da00 <__malloc_lock>
 800d086:	6833      	ldr	r3, [r6, #0]
 800d088:	461c      	mov	r4, r3
 800d08a:	bb34      	cbnz	r4, 800d0da <_malloc_r+0x82>
 800d08c:	4629      	mov	r1, r5
 800d08e:	4638      	mov	r0, r7
 800d090:	f7ff ffc2 	bl	800d018 <sbrk_aligned>
 800d094:	1c43      	adds	r3, r0, #1
 800d096:	4604      	mov	r4, r0
 800d098:	d14d      	bne.n	800d136 <_malloc_r+0xde>
 800d09a:	6834      	ldr	r4, [r6, #0]
 800d09c:	4626      	mov	r6, r4
 800d09e:	2e00      	cmp	r6, #0
 800d0a0:	d140      	bne.n	800d124 <_malloc_r+0xcc>
 800d0a2:	6823      	ldr	r3, [r4, #0]
 800d0a4:	4631      	mov	r1, r6
 800d0a6:	4638      	mov	r0, r7
 800d0a8:	eb04 0803 	add.w	r8, r4, r3
 800d0ac:	f000 f940 	bl	800d330 <_sbrk_r>
 800d0b0:	4580      	cmp	r8, r0
 800d0b2:	d13a      	bne.n	800d12a <_malloc_r+0xd2>
 800d0b4:	6821      	ldr	r1, [r4, #0]
 800d0b6:	3503      	adds	r5, #3
 800d0b8:	1a6d      	subs	r5, r5, r1
 800d0ba:	f025 0503 	bic.w	r5, r5, #3
 800d0be:	3508      	adds	r5, #8
 800d0c0:	2d0c      	cmp	r5, #12
 800d0c2:	bf38      	it	cc
 800d0c4:	250c      	movcc	r5, #12
 800d0c6:	4629      	mov	r1, r5
 800d0c8:	4638      	mov	r0, r7
 800d0ca:	f7ff ffa5 	bl	800d018 <sbrk_aligned>
 800d0ce:	3001      	adds	r0, #1
 800d0d0:	d02b      	beq.n	800d12a <_malloc_r+0xd2>
 800d0d2:	6823      	ldr	r3, [r4, #0]
 800d0d4:	442b      	add	r3, r5
 800d0d6:	6023      	str	r3, [r4, #0]
 800d0d8:	e00e      	b.n	800d0f8 <_malloc_r+0xa0>
 800d0da:	6822      	ldr	r2, [r4, #0]
 800d0dc:	1b52      	subs	r2, r2, r5
 800d0de:	d41e      	bmi.n	800d11e <_malloc_r+0xc6>
 800d0e0:	2a0b      	cmp	r2, #11
 800d0e2:	d916      	bls.n	800d112 <_malloc_r+0xba>
 800d0e4:	1961      	adds	r1, r4, r5
 800d0e6:	42a3      	cmp	r3, r4
 800d0e8:	6025      	str	r5, [r4, #0]
 800d0ea:	bf18      	it	ne
 800d0ec:	6059      	strne	r1, [r3, #4]
 800d0ee:	6863      	ldr	r3, [r4, #4]
 800d0f0:	bf08      	it	eq
 800d0f2:	6031      	streq	r1, [r6, #0]
 800d0f4:	5162      	str	r2, [r4, r5]
 800d0f6:	604b      	str	r3, [r1, #4]
 800d0f8:	4638      	mov	r0, r7
 800d0fa:	f104 060b 	add.w	r6, r4, #11
 800d0fe:	f000 fc85 	bl	800da0c <__malloc_unlock>
 800d102:	f026 0607 	bic.w	r6, r6, #7
 800d106:	1d23      	adds	r3, r4, #4
 800d108:	1af2      	subs	r2, r6, r3
 800d10a:	d0b6      	beq.n	800d07a <_malloc_r+0x22>
 800d10c:	1b9b      	subs	r3, r3, r6
 800d10e:	50a3      	str	r3, [r4, r2]
 800d110:	e7b3      	b.n	800d07a <_malloc_r+0x22>
 800d112:	6862      	ldr	r2, [r4, #4]
 800d114:	42a3      	cmp	r3, r4
 800d116:	bf0c      	ite	eq
 800d118:	6032      	streq	r2, [r6, #0]
 800d11a:	605a      	strne	r2, [r3, #4]
 800d11c:	e7ec      	b.n	800d0f8 <_malloc_r+0xa0>
 800d11e:	4623      	mov	r3, r4
 800d120:	6864      	ldr	r4, [r4, #4]
 800d122:	e7b2      	b.n	800d08a <_malloc_r+0x32>
 800d124:	4634      	mov	r4, r6
 800d126:	6876      	ldr	r6, [r6, #4]
 800d128:	e7b9      	b.n	800d09e <_malloc_r+0x46>
 800d12a:	230c      	movs	r3, #12
 800d12c:	603b      	str	r3, [r7, #0]
 800d12e:	4638      	mov	r0, r7
 800d130:	f000 fc6c 	bl	800da0c <__malloc_unlock>
 800d134:	e7a1      	b.n	800d07a <_malloc_r+0x22>
 800d136:	6025      	str	r5, [r4, #0]
 800d138:	e7de      	b.n	800d0f8 <_malloc_r+0xa0>
 800d13a:	bf00      	nop
 800d13c:	200033b4 	.word	0x200033b4

0800d140 <iprintf>:
 800d140:	b40f      	push	{r0, r1, r2, r3}
 800d142:	4b0a      	ldr	r3, [pc, #40]	; (800d16c <iprintf+0x2c>)
 800d144:	b513      	push	{r0, r1, r4, lr}
 800d146:	681c      	ldr	r4, [r3, #0]
 800d148:	b124      	cbz	r4, 800d154 <iprintf+0x14>
 800d14a:	69a3      	ldr	r3, [r4, #24]
 800d14c:	b913      	cbnz	r3, 800d154 <iprintf+0x14>
 800d14e:	4620      	mov	r0, r4
 800d150:	f7ff fe1a 	bl	800cd88 <__sinit>
 800d154:	ab05      	add	r3, sp, #20
 800d156:	9a04      	ldr	r2, [sp, #16]
 800d158:	68a1      	ldr	r1, [r4, #8]
 800d15a:	9301      	str	r3, [sp, #4]
 800d15c:	4620      	mov	r0, r4
 800d15e:	f000 fde1 	bl	800dd24 <_vfiprintf_r>
 800d162:	b002      	add	sp, #8
 800d164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d168:	b004      	add	sp, #16
 800d16a:	4770      	bx	lr
 800d16c:	20000010 	.word	0x20000010

0800d170 <_puts_r>:
 800d170:	b570      	push	{r4, r5, r6, lr}
 800d172:	460e      	mov	r6, r1
 800d174:	4605      	mov	r5, r0
 800d176:	b118      	cbz	r0, 800d180 <_puts_r+0x10>
 800d178:	6983      	ldr	r3, [r0, #24]
 800d17a:	b90b      	cbnz	r3, 800d180 <_puts_r+0x10>
 800d17c:	f7ff fe04 	bl	800cd88 <__sinit>
 800d180:	69ab      	ldr	r3, [r5, #24]
 800d182:	68ac      	ldr	r4, [r5, #8]
 800d184:	b913      	cbnz	r3, 800d18c <_puts_r+0x1c>
 800d186:	4628      	mov	r0, r5
 800d188:	f7ff fdfe 	bl	800cd88 <__sinit>
 800d18c:	4b2c      	ldr	r3, [pc, #176]	; (800d240 <_puts_r+0xd0>)
 800d18e:	429c      	cmp	r4, r3
 800d190:	d120      	bne.n	800d1d4 <_puts_r+0x64>
 800d192:	686c      	ldr	r4, [r5, #4]
 800d194:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d196:	07db      	lsls	r3, r3, #31
 800d198:	d405      	bmi.n	800d1a6 <_puts_r+0x36>
 800d19a:	89a3      	ldrh	r3, [r4, #12]
 800d19c:	0598      	lsls	r0, r3, #22
 800d19e:	d402      	bmi.n	800d1a6 <_puts_r+0x36>
 800d1a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1a2:	f7ff feb4 	bl	800cf0e <__retarget_lock_acquire_recursive>
 800d1a6:	89a3      	ldrh	r3, [r4, #12]
 800d1a8:	0719      	lsls	r1, r3, #28
 800d1aa:	d51d      	bpl.n	800d1e8 <_puts_r+0x78>
 800d1ac:	6923      	ldr	r3, [r4, #16]
 800d1ae:	b1db      	cbz	r3, 800d1e8 <_puts_r+0x78>
 800d1b0:	3e01      	subs	r6, #1
 800d1b2:	68a3      	ldr	r3, [r4, #8]
 800d1b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d1b8:	3b01      	subs	r3, #1
 800d1ba:	60a3      	str	r3, [r4, #8]
 800d1bc:	bb39      	cbnz	r1, 800d20e <_puts_r+0x9e>
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	da38      	bge.n	800d234 <_puts_r+0xc4>
 800d1c2:	4622      	mov	r2, r4
 800d1c4:	210a      	movs	r1, #10
 800d1c6:	4628      	mov	r0, r5
 800d1c8:	f000 f9ce 	bl	800d568 <__swbuf_r>
 800d1cc:	3001      	adds	r0, #1
 800d1ce:	d011      	beq.n	800d1f4 <_puts_r+0x84>
 800d1d0:	250a      	movs	r5, #10
 800d1d2:	e011      	b.n	800d1f8 <_puts_r+0x88>
 800d1d4:	4b1b      	ldr	r3, [pc, #108]	; (800d244 <_puts_r+0xd4>)
 800d1d6:	429c      	cmp	r4, r3
 800d1d8:	d101      	bne.n	800d1de <_puts_r+0x6e>
 800d1da:	68ac      	ldr	r4, [r5, #8]
 800d1dc:	e7da      	b.n	800d194 <_puts_r+0x24>
 800d1de:	4b1a      	ldr	r3, [pc, #104]	; (800d248 <_puts_r+0xd8>)
 800d1e0:	429c      	cmp	r4, r3
 800d1e2:	bf08      	it	eq
 800d1e4:	68ec      	ldreq	r4, [r5, #12]
 800d1e6:	e7d5      	b.n	800d194 <_puts_r+0x24>
 800d1e8:	4621      	mov	r1, r4
 800d1ea:	4628      	mov	r0, r5
 800d1ec:	f000 fa20 	bl	800d630 <__swsetup_r>
 800d1f0:	2800      	cmp	r0, #0
 800d1f2:	d0dd      	beq.n	800d1b0 <_puts_r+0x40>
 800d1f4:	f04f 35ff 	mov.w	r5, #4294967295
 800d1f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1fa:	07da      	lsls	r2, r3, #31
 800d1fc:	d405      	bmi.n	800d20a <_puts_r+0x9a>
 800d1fe:	89a3      	ldrh	r3, [r4, #12]
 800d200:	059b      	lsls	r3, r3, #22
 800d202:	d402      	bmi.n	800d20a <_puts_r+0x9a>
 800d204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d206:	f7ff fe83 	bl	800cf10 <__retarget_lock_release_recursive>
 800d20a:	4628      	mov	r0, r5
 800d20c:	bd70      	pop	{r4, r5, r6, pc}
 800d20e:	2b00      	cmp	r3, #0
 800d210:	da04      	bge.n	800d21c <_puts_r+0xac>
 800d212:	69a2      	ldr	r2, [r4, #24]
 800d214:	429a      	cmp	r2, r3
 800d216:	dc06      	bgt.n	800d226 <_puts_r+0xb6>
 800d218:	290a      	cmp	r1, #10
 800d21a:	d004      	beq.n	800d226 <_puts_r+0xb6>
 800d21c:	6823      	ldr	r3, [r4, #0]
 800d21e:	1c5a      	adds	r2, r3, #1
 800d220:	6022      	str	r2, [r4, #0]
 800d222:	7019      	strb	r1, [r3, #0]
 800d224:	e7c5      	b.n	800d1b2 <_puts_r+0x42>
 800d226:	4622      	mov	r2, r4
 800d228:	4628      	mov	r0, r5
 800d22a:	f000 f99d 	bl	800d568 <__swbuf_r>
 800d22e:	3001      	adds	r0, #1
 800d230:	d1bf      	bne.n	800d1b2 <_puts_r+0x42>
 800d232:	e7df      	b.n	800d1f4 <_puts_r+0x84>
 800d234:	6823      	ldr	r3, [r4, #0]
 800d236:	250a      	movs	r5, #10
 800d238:	1c5a      	adds	r2, r3, #1
 800d23a:	6022      	str	r2, [r4, #0]
 800d23c:	701d      	strb	r5, [r3, #0]
 800d23e:	e7db      	b.n	800d1f8 <_puts_r+0x88>
 800d240:	0800ed98 	.word	0x0800ed98
 800d244:	0800edb8 	.word	0x0800edb8
 800d248:	0800ed78 	.word	0x0800ed78

0800d24c <puts>:
 800d24c:	4b02      	ldr	r3, [pc, #8]	; (800d258 <puts+0xc>)
 800d24e:	4601      	mov	r1, r0
 800d250:	6818      	ldr	r0, [r3, #0]
 800d252:	f7ff bf8d 	b.w	800d170 <_puts_r>
 800d256:	bf00      	nop
 800d258:	20000010 	.word	0x20000010

0800d25c <cleanup_glue>:
 800d25c:	b538      	push	{r3, r4, r5, lr}
 800d25e:	460c      	mov	r4, r1
 800d260:	6809      	ldr	r1, [r1, #0]
 800d262:	4605      	mov	r5, r0
 800d264:	b109      	cbz	r1, 800d26a <cleanup_glue+0xe>
 800d266:	f7ff fff9 	bl	800d25c <cleanup_glue>
 800d26a:	4621      	mov	r1, r4
 800d26c:	4628      	mov	r0, r5
 800d26e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d272:	f7ff be85 	b.w	800cf80 <_free_r>
	...

0800d278 <_reclaim_reent>:
 800d278:	4b2c      	ldr	r3, [pc, #176]	; (800d32c <_reclaim_reent+0xb4>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4283      	cmp	r3, r0
 800d27e:	b570      	push	{r4, r5, r6, lr}
 800d280:	4604      	mov	r4, r0
 800d282:	d051      	beq.n	800d328 <_reclaim_reent+0xb0>
 800d284:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d286:	b143      	cbz	r3, 800d29a <_reclaim_reent+0x22>
 800d288:	68db      	ldr	r3, [r3, #12]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d14a      	bne.n	800d324 <_reclaim_reent+0xac>
 800d28e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d290:	6819      	ldr	r1, [r3, #0]
 800d292:	b111      	cbz	r1, 800d29a <_reclaim_reent+0x22>
 800d294:	4620      	mov	r0, r4
 800d296:	f7ff fe73 	bl	800cf80 <_free_r>
 800d29a:	6961      	ldr	r1, [r4, #20]
 800d29c:	b111      	cbz	r1, 800d2a4 <_reclaim_reent+0x2c>
 800d29e:	4620      	mov	r0, r4
 800d2a0:	f7ff fe6e 	bl	800cf80 <_free_r>
 800d2a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d2a6:	b111      	cbz	r1, 800d2ae <_reclaim_reent+0x36>
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	f7ff fe69 	bl	800cf80 <_free_r>
 800d2ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d2b0:	b111      	cbz	r1, 800d2b8 <_reclaim_reent+0x40>
 800d2b2:	4620      	mov	r0, r4
 800d2b4:	f7ff fe64 	bl	800cf80 <_free_r>
 800d2b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d2ba:	b111      	cbz	r1, 800d2c2 <_reclaim_reent+0x4a>
 800d2bc:	4620      	mov	r0, r4
 800d2be:	f7ff fe5f 	bl	800cf80 <_free_r>
 800d2c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d2c4:	b111      	cbz	r1, 800d2cc <_reclaim_reent+0x54>
 800d2c6:	4620      	mov	r0, r4
 800d2c8:	f7ff fe5a 	bl	800cf80 <_free_r>
 800d2cc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d2ce:	b111      	cbz	r1, 800d2d6 <_reclaim_reent+0x5e>
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	f7ff fe55 	bl	800cf80 <_free_r>
 800d2d6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d2d8:	b111      	cbz	r1, 800d2e0 <_reclaim_reent+0x68>
 800d2da:	4620      	mov	r0, r4
 800d2dc:	f7ff fe50 	bl	800cf80 <_free_r>
 800d2e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2e2:	b111      	cbz	r1, 800d2ea <_reclaim_reent+0x72>
 800d2e4:	4620      	mov	r0, r4
 800d2e6:	f7ff fe4b 	bl	800cf80 <_free_r>
 800d2ea:	69a3      	ldr	r3, [r4, #24]
 800d2ec:	b1e3      	cbz	r3, 800d328 <_reclaim_reent+0xb0>
 800d2ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	4798      	blx	r3
 800d2f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d2f6:	b1b9      	cbz	r1, 800d328 <_reclaim_reent+0xb0>
 800d2f8:	4620      	mov	r0, r4
 800d2fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d2fe:	f7ff bfad 	b.w	800d25c <cleanup_glue>
 800d302:	5949      	ldr	r1, [r1, r5]
 800d304:	b941      	cbnz	r1, 800d318 <_reclaim_reent+0xa0>
 800d306:	3504      	adds	r5, #4
 800d308:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d30a:	2d80      	cmp	r5, #128	; 0x80
 800d30c:	68d9      	ldr	r1, [r3, #12]
 800d30e:	d1f8      	bne.n	800d302 <_reclaim_reent+0x8a>
 800d310:	4620      	mov	r0, r4
 800d312:	f7ff fe35 	bl	800cf80 <_free_r>
 800d316:	e7ba      	b.n	800d28e <_reclaim_reent+0x16>
 800d318:	680e      	ldr	r6, [r1, #0]
 800d31a:	4620      	mov	r0, r4
 800d31c:	f7ff fe30 	bl	800cf80 <_free_r>
 800d320:	4631      	mov	r1, r6
 800d322:	e7ef      	b.n	800d304 <_reclaim_reent+0x8c>
 800d324:	2500      	movs	r5, #0
 800d326:	e7ef      	b.n	800d308 <_reclaim_reent+0x90>
 800d328:	bd70      	pop	{r4, r5, r6, pc}
 800d32a:	bf00      	nop
 800d32c:	20000010 	.word	0x20000010

0800d330 <_sbrk_r>:
 800d330:	b538      	push	{r3, r4, r5, lr}
 800d332:	4d06      	ldr	r5, [pc, #24]	; (800d34c <_sbrk_r+0x1c>)
 800d334:	2300      	movs	r3, #0
 800d336:	4604      	mov	r4, r0
 800d338:	4608      	mov	r0, r1
 800d33a:	602b      	str	r3, [r5, #0]
 800d33c:	f7f4 faa4 	bl	8001888 <_sbrk>
 800d340:	1c43      	adds	r3, r0, #1
 800d342:	d102      	bne.n	800d34a <_sbrk_r+0x1a>
 800d344:	682b      	ldr	r3, [r5, #0]
 800d346:	b103      	cbz	r3, 800d34a <_sbrk_r+0x1a>
 800d348:	6023      	str	r3, [r4, #0]
 800d34a:	bd38      	pop	{r3, r4, r5, pc}
 800d34c:	200033bc 	.word	0x200033bc

0800d350 <siprintf>:
 800d350:	b40e      	push	{r1, r2, r3}
 800d352:	b500      	push	{lr}
 800d354:	b09c      	sub	sp, #112	; 0x70
 800d356:	ab1d      	add	r3, sp, #116	; 0x74
 800d358:	9002      	str	r0, [sp, #8]
 800d35a:	9006      	str	r0, [sp, #24]
 800d35c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d360:	4809      	ldr	r0, [pc, #36]	; (800d388 <siprintf+0x38>)
 800d362:	9107      	str	r1, [sp, #28]
 800d364:	9104      	str	r1, [sp, #16]
 800d366:	4909      	ldr	r1, [pc, #36]	; (800d38c <siprintf+0x3c>)
 800d368:	f853 2b04 	ldr.w	r2, [r3], #4
 800d36c:	9105      	str	r1, [sp, #20]
 800d36e:	6800      	ldr	r0, [r0, #0]
 800d370:	9301      	str	r3, [sp, #4]
 800d372:	a902      	add	r1, sp, #8
 800d374:	f000 fbac 	bl	800dad0 <_svfiprintf_r>
 800d378:	9b02      	ldr	r3, [sp, #8]
 800d37a:	2200      	movs	r2, #0
 800d37c:	701a      	strb	r2, [r3, #0]
 800d37e:	b01c      	add	sp, #112	; 0x70
 800d380:	f85d eb04 	ldr.w	lr, [sp], #4
 800d384:	b003      	add	sp, #12
 800d386:	4770      	bx	lr
 800d388:	20000010 	.word	0x20000010
 800d38c:	ffff0208 	.word	0xffff0208

0800d390 <__sread>:
 800d390:	b510      	push	{r4, lr}
 800d392:	460c      	mov	r4, r1
 800d394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d398:	f000 ff88 	bl	800e2ac <_read_r>
 800d39c:	2800      	cmp	r0, #0
 800d39e:	bfab      	itete	ge
 800d3a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d3a2:	89a3      	ldrhlt	r3, [r4, #12]
 800d3a4:	181b      	addge	r3, r3, r0
 800d3a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d3aa:	bfac      	ite	ge
 800d3ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800d3ae:	81a3      	strhlt	r3, [r4, #12]
 800d3b0:	bd10      	pop	{r4, pc}

0800d3b2 <__swrite>:
 800d3b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3b6:	461f      	mov	r7, r3
 800d3b8:	898b      	ldrh	r3, [r1, #12]
 800d3ba:	05db      	lsls	r3, r3, #23
 800d3bc:	4605      	mov	r5, r0
 800d3be:	460c      	mov	r4, r1
 800d3c0:	4616      	mov	r6, r2
 800d3c2:	d505      	bpl.n	800d3d0 <__swrite+0x1e>
 800d3c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3c8:	2302      	movs	r3, #2
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	f000 faa0 	bl	800d910 <_lseek_r>
 800d3d0:	89a3      	ldrh	r3, [r4, #12]
 800d3d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3da:	81a3      	strh	r3, [r4, #12]
 800d3dc:	4632      	mov	r2, r6
 800d3de:	463b      	mov	r3, r7
 800d3e0:	4628      	mov	r0, r5
 800d3e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3e6:	f000 b911 	b.w	800d60c <_write_r>

0800d3ea <__sseek>:
 800d3ea:	b510      	push	{r4, lr}
 800d3ec:	460c      	mov	r4, r1
 800d3ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3f2:	f000 fa8d 	bl	800d910 <_lseek_r>
 800d3f6:	1c43      	adds	r3, r0, #1
 800d3f8:	89a3      	ldrh	r3, [r4, #12]
 800d3fa:	bf15      	itete	ne
 800d3fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800d3fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d402:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d406:	81a3      	strheq	r3, [r4, #12]
 800d408:	bf18      	it	ne
 800d40a:	81a3      	strhne	r3, [r4, #12]
 800d40c:	bd10      	pop	{r4, pc}

0800d40e <__sclose>:
 800d40e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d412:	f000 b999 	b.w	800d748 <_close_r>

0800d416 <strcat>:
 800d416:	b510      	push	{r4, lr}
 800d418:	4602      	mov	r2, r0
 800d41a:	7814      	ldrb	r4, [r2, #0]
 800d41c:	4613      	mov	r3, r2
 800d41e:	3201      	adds	r2, #1
 800d420:	2c00      	cmp	r4, #0
 800d422:	d1fa      	bne.n	800d41a <strcat+0x4>
 800d424:	3b01      	subs	r3, #1
 800d426:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d42a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d42e:	2a00      	cmp	r2, #0
 800d430:	d1f9      	bne.n	800d426 <strcat+0x10>
 800d432:	bd10      	pop	{r4, pc}

0800d434 <strncmp>:
 800d434:	b510      	push	{r4, lr}
 800d436:	b17a      	cbz	r2, 800d458 <strncmp+0x24>
 800d438:	4603      	mov	r3, r0
 800d43a:	3901      	subs	r1, #1
 800d43c:	1884      	adds	r4, r0, r2
 800d43e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d442:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d446:	4290      	cmp	r0, r2
 800d448:	d101      	bne.n	800d44e <strncmp+0x1a>
 800d44a:	42a3      	cmp	r3, r4
 800d44c:	d101      	bne.n	800d452 <strncmp+0x1e>
 800d44e:	1a80      	subs	r0, r0, r2
 800d450:	bd10      	pop	{r4, pc}
 800d452:	2800      	cmp	r0, #0
 800d454:	d1f3      	bne.n	800d43e <strncmp+0xa>
 800d456:	e7fa      	b.n	800d44e <strncmp+0x1a>
 800d458:	4610      	mov	r0, r2
 800d45a:	e7f9      	b.n	800d450 <strncmp+0x1c>

0800d45c <strncpy>:
 800d45c:	b510      	push	{r4, lr}
 800d45e:	3901      	subs	r1, #1
 800d460:	4603      	mov	r3, r0
 800d462:	b132      	cbz	r2, 800d472 <strncpy+0x16>
 800d464:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d468:	f803 4b01 	strb.w	r4, [r3], #1
 800d46c:	3a01      	subs	r2, #1
 800d46e:	2c00      	cmp	r4, #0
 800d470:	d1f7      	bne.n	800d462 <strncpy+0x6>
 800d472:	441a      	add	r2, r3
 800d474:	2100      	movs	r1, #0
 800d476:	4293      	cmp	r3, r2
 800d478:	d100      	bne.n	800d47c <strncpy+0x20>
 800d47a:	bd10      	pop	{r4, pc}
 800d47c:	f803 1b01 	strb.w	r1, [r3], #1
 800d480:	e7f9      	b.n	800d476 <strncpy+0x1a>

0800d482 <strstr>:
 800d482:	780a      	ldrb	r2, [r1, #0]
 800d484:	b570      	push	{r4, r5, r6, lr}
 800d486:	b96a      	cbnz	r2, 800d4a4 <strstr+0x22>
 800d488:	bd70      	pop	{r4, r5, r6, pc}
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d109      	bne.n	800d4a2 <strstr+0x20>
 800d48e:	460c      	mov	r4, r1
 800d490:	4605      	mov	r5, r0
 800d492:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d496:	2b00      	cmp	r3, #0
 800d498:	d0f6      	beq.n	800d488 <strstr+0x6>
 800d49a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d49e:	429e      	cmp	r6, r3
 800d4a0:	d0f7      	beq.n	800d492 <strstr+0x10>
 800d4a2:	3001      	adds	r0, #1
 800d4a4:	7803      	ldrb	r3, [r0, #0]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d1ef      	bne.n	800d48a <strstr+0x8>
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	e7ec      	b.n	800d488 <strstr+0x6>
	...

0800d4b0 <strtok>:
 800d4b0:	4b16      	ldr	r3, [pc, #88]	; (800d50c <strtok+0x5c>)
 800d4b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d4b4:	681e      	ldr	r6, [r3, #0]
 800d4b6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800d4b8:	4605      	mov	r5, r0
 800d4ba:	b9fc      	cbnz	r4, 800d4fc <strtok+0x4c>
 800d4bc:	2050      	movs	r0, #80	; 0x50
 800d4be:	9101      	str	r1, [sp, #4]
 800d4c0:	f7ff fd28 	bl	800cf14 <malloc>
 800d4c4:	9901      	ldr	r1, [sp, #4]
 800d4c6:	65b0      	str	r0, [r6, #88]	; 0x58
 800d4c8:	4602      	mov	r2, r0
 800d4ca:	b920      	cbnz	r0, 800d4d6 <strtok+0x26>
 800d4cc:	4b10      	ldr	r3, [pc, #64]	; (800d510 <strtok+0x60>)
 800d4ce:	4811      	ldr	r0, [pc, #68]	; (800d514 <strtok+0x64>)
 800d4d0:	2157      	movs	r1, #87	; 0x57
 800d4d2:	f000 f91b 	bl	800d70c <__assert_func>
 800d4d6:	e9c0 4400 	strd	r4, r4, [r0]
 800d4da:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d4de:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d4e2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800d4e6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800d4ea:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800d4ee:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800d4f2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800d4f6:	6184      	str	r4, [r0, #24]
 800d4f8:	7704      	strb	r4, [r0, #28]
 800d4fa:	6244      	str	r4, [r0, #36]	; 0x24
 800d4fc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800d4fe:	2301      	movs	r3, #1
 800d500:	4628      	mov	r0, r5
 800d502:	b002      	add	sp, #8
 800d504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d508:	f000 b806 	b.w	800d518 <__strtok_r>
 800d50c:	20000010 	.word	0x20000010
 800d510:	0800eddc 	.word	0x0800eddc
 800d514:	0800edf3 	.word	0x0800edf3

0800d518 <__strtok_r>:
 800d518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d51a:	b908      	cbnz	r0, 800d520 <__strtok_r+0x8>
 800d51c:	6810      	ldr	r0, [r2, #0]
 800d51e:	b188      	cbz	r0, 800d544 <__strtok_r+0x2c>
 800d520:	4604      	mov	r4, r0
 800d522:	4620      	mov	r0, r4
 800d524:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d528:	460f      	mov	r7, r1
 800d52a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d52e:	b91e      	cbnz	r6, 800d538 <__strtok_r+0x20>
 800d530:	b965      	cbnz	r5, 800d54c <__strtok_r+0x34>
 800d532:	6015      	str	r5, [r2, #0]
 800d534:	4628      	mov	r0, r5
 800d536:	e005      	b.n	800d544 <__strtok_r+0x2c>
 800d538:	42b5      	cmp	r5, r6
 800d53a:	d1f6      	bne.n	800d52a <__strtok_r+0x12>
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d1f0      	bne.n	800d522 <__strtok_r+0xa>
 800d540:	6014      	str	r4, [r2, #0]
 800d542:	7003      	strb	r3, [r0, #0]
 800d544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d546:	461c      	mov	r4, r3
 800d548:	e00c      	b.n	800d564 <__strtok_r+0x4c>
 800d54a:	b915      	cbnz	r5, 800d552 <__strtok_r+0x3a>
 800d54c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d550:	460e      	mov	r6, r1
 800d552:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d556:	42ab      	cmp	r3, r5
 800d558:	d1f7      	bne.n	800d54a <__strtok_r+0x32>
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d0f3      	beq.n	800d546 <__strtok_r+0x2e>
 800d55e:	2300      	movs	r3, #0
 800d560:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d564:	6014      	str	r4, [r2, #0]
 800d566:	e7ed      	b.n	800d544 <__strtok_r+0x2c>

0800d568 <__swbuf_r>:
 800d568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d56a:	460e      	mov	r6, r1
 800d56c:	4614      	mov	r4, r2
 800d56e:	4605      	mov	r5, r0
 800d570:	b118      	cbz	r0, 800d57a <__swbuf_r+0x12>
 800d572:	6983      	ldr	r3, [r0, #24]
 800d574:	b90b      	cbnz	r3, 800d57a <__swbuf_r+0x12>
 800d576:	f7ff fc07 	bl	800cd88 <__sinit>
 800d57a:	4b21      	ldr	r3, [pc, #132]	; (800d600 <__swbuf_r+0x98>)
 800d57c:	429c      	cmp	r4, r3
 800d57e:	d12b      	bne.n	800d5d8 <__swbuf_r+0x70>
 800d580:	686c      	ldr	r4, [r5, #4]
 800d582:	69a3      	ldr	r3, [r4, #24]
 800d584:	60a3      	str	r3, [r4, #8]
 800d586:	89a3      	ldrh	r3, [r4, #12]
 800d588:	071a      	lsls	r2, r3, #28
 800d58a:	d52f      	bpl.n	800d5ec <__swbuf_r+0x84>
 800d58c:	6923      	ldr	r3, [r4, #16]
 800d58e:	b36b      	cbz	r3, 800d5ec <__swbuf_r+0x84>
 800d590:	6923      	ldr	r3, [r4, #16]
 800d592:	6820      	ldr	r0, [r4, #0]
 800d594:	1ac0      	subs	r0, r0, r3
 800d596:	6963      	ldr	r3, [r4, #20]
 800d598:	b2f6      	uxtb	r6, r6
 800d59a:	4283      	cmp	r3, r0
 800d59c:	4637      	mov	r7, r6
 800d59e:	dc04      	bgt.n	800d5aa <__swbuf_r+0x42>
 800d5a0:	4621      	mov	r1, r4
 800d5a2:	4628      	mov	r0, r5
 800d5a4:	f000 f966 	bl	800d874 <_fflush_r>
 800d5a8:	bb30      	cbnz	r0, 800d5f8 <__swbuf_r+0x90>
 800d5aa:	68a3      	ldr	r3, [r4, #8]
 800d5ac:	3b01      	subs	r3, #1
 800d5ae:	60a3      	str	r3, [r4, #8]
 800d5b0:	6823      	ldr	r3, [r4, #0]
 800d5b2:	1c5a      	adds	r2, r3, #1
 800d5b4:	6022      	str	r2, [r4, #0]
 800d5b6:	701e      	strb	r6, [r3, #0]
 800d5b8:	6963      	ldr	r3, [r4, #20]
 800d5ba:	3001      	adds	r0, #1
 800d5bc:	4283      	cmp	r3, r0
 800d5be:	d004      	beq.n	800d5ca <__swbuf_r+0x62>
 800d5c0:	89a3      	ldrh	r3, [r4, #12]
 800d5c2:	07db      	lsls	r3, r3, #31
 800d5c4:	d506      	bpl.n	800d5d4 <__swbuf_r+0x6c>
 800d5c6:	2e0a      	cmp	r6, #10
 800d5c8:	d104      	bne.n	800d5d4 <__swbuf_r+0x6c>
 800d5ca:	4621      	mov	r1, r4
 800d5cc:	4628      	mov	r0, r5
 800d5ce:	f000 f951 	bl	800d874 <_fflush_r>
 800d5d2:	b988      	cbnz	r0, 800d5f8 <__swbuf_r+0x90>
 800d5d4:	4638      	mov	r0, r7
 800d5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5d8:	4b0a      	ldr	r3, [pc, #40]	; (800d604 <__swbuf_r+0x9c>)
 800d5da:	429c      	cmp	r4, r3
 800d5dc:	d101      	bne.n	800d5e2 <__swbuf_r+0x7a>
 800d5de:	68ac      	ldr	r4, [r5, #8]
 800d5e0:	e7cf      	b.n	800d582 <__swbuf_r+0x1a>
 800d5e2:	4b09      	ldr	r3, [pc, #36]	; (800d608 <__swbuf_r+0xa0>)
 800d5e4:	429c      	cmp	r4, r3
 800d5e6:	bf08      	it	eq
 800d5e8:	68ec      	ldreq	r4, [r5, #12]
 800d5ea:	e7ca      	b.n	800d582 <__swbuf_r+0x1a>
 800d5ec:	4621      	mov	r1, r4
 800d5ee:	4628      	mov	r0, r5
 800d5f0:	f000 f81e 	bl	800d630 <__swsetup_r>
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	d0cb      	beq.n	800d590 <__swbuf_r+0x28>
 800d5f8:	f04f 37ff 	mov.w	r7, #4294967295
 800d5fc:	e7ea      	b.n	800d5d4 <__swbuf_r+0x6c>
 800d5fe:	bf00      	nop
 800d600:	0800ed98 	.word	0x0800ed98
 800d604:	0800edb8 	.word	0x0800edb8
 800d608:	0800ed78 	.word	0x0800ed78

0800d60c <_write_r>:
 800d60c:	b538      	push	{r3, r4, r5, lr}
 800d60e:	4d07      	ldr	r5, [pc, #28]	; (800d62c <_write_r+0x20>)
 800d610:	4604      	mov	r4, r0
 800d612:	4608      	mov	r0, r1
 800d614:	4611      	mov	r1, r2
 800d616:	2200      	movs	r2, #0
 800d618:	602a      	str	r2, [r5, #0]
 800d61a:	461a      	mov	r2, r3
 800d61c:	f7f4 f8e3 	bl	80017e6 <_write>
 800d620:	1c43      	adds	r3, r0, #1
 800d622:	d102      	bne.n	800d62a <_write_r+0x1e>
 800d624:	682b      	ldr	r3, [r5, #0]
 800d626:	b103      	cbz	r3, 800d62a <_write_r+0x1e>
 800d628:	6023      	str	r3, [r4, #0]
 800d62a:	bd38      	pop	{r3, r4, r5, pc}
 800d62c:	200033bc 	.word	0x200033bc

0800d630 <__swsetup_r>:
 800d630:	4b32      	ldr	r3, [pc, #200]	; (800d6fc <__swsetup_r+0xcc>)
 800d632:	b570      	push	{r4, r5, r6, lr}
 800d634:	681d      	ldr	r5, [r3, #0]
 800d636:	4606      	mov	r6, r0
 800d638:	460c      	mov	r4, r1
 800d63a:	b125      	cbz	r5, 800d646 <__swsetup_r+0x16>
 800d63c:	69ab      	ldr	r3, [r5, #24]
 800d63e:	b913      	cbnz	r3, 800d646 <__swsetup_r+0x16>
 800d640:	4628      	mov	r0, r5
 800d642:	f7ff fba1 	bl	800cd88 <__sinit>
 800d646:	4b2e      	ldr	r3, [pc, #184]	; (800d700 <__swsetup_r+0xd0>)
 800d648:	429c      	cmp	r4, r3
 800d64a:	d10f      	bne.n	800d66c <__swsetup_r+0x3c>
 800d64c:	686c      	ldr	r4, [r5, #4]
 800d64e:	89a3      	ldrh	r3, [r4, #12]
 800d650:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d654:	0719      	lsls	r1, r3, #28
 800d656:	d42c      	bmi.n	800d6b2 <__swsetup_r+0x82>
 800d658:	06dd      	lsls	r5, r3, #27
 800d65a:	d411      	bmi.n	800d680 <__swsetup_r+0x50>
 800d65c:	2309      	movs	r3, #9
 800d65e:	6033      	str	r3, [r6, #0]
 800d660:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d664:	81a3      	strh	r3, [r4, #12]
 800d666:	f04f 30ff 	mov.w	r0, #4294967295
 800d66a:	e03e      	b.n	800d6ea <__swsetup_r+0xba>
 800d66c:	4b25      	ldr	r3, [pc, #148]	; (800d704 <__swsetup_r+0xd4>)
 800d66e:	429c      	cmp	r4, r3
 800d670:	d101      	bne.n	800d676 <__swsetup_r+0x46>
 800d672:	68ac      	ldr	r4, [r5, #8]
 800d674:	e7eb      	b.n	800d64e <__swsetup_r+0x1e>
 800d676:	4b24      	ldr	r3, [pc, #144]	; (800d708 <__swsetup_r+0xd8>)
 800d678:	429c      	cmp	r4, r3
 800d67a:	bf08      	it	eq
 800d67c:	68ec      	ldreq	r4, [r5, #12]
 800d67e:	e7e6      	b.n	800d64e <__swsetup_r+0x1e>
 800d680:	0758      	lsls	r0, r3, #29
 800d682:	d512      	bpl.n	800d6aa <__swsetup_r+0x7a>
 800d684:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d686:	b141      	cbz	r1, 800d69a <__swsetup_r+0x6a>
 800d688:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d68c:	4299      	cmp	r1, r3
 800d68e:	d002      	beq.n	800d696 <__swsetup_r+0x66>
 800d690:	4630      	mov	r0, r6
 800d692:	f7ff fc75 	bl	800cf80 <_free_r>
 800d696:	2300      	movs	r3, #0
 800d698:	6363      	str	r3, [r4, #52]	; 0x34
 800d69a:	89a3      	ldrh	r3, [r4, #12]
 800d69c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d6a0:	81a3      	strh	r3, [r4, #12]
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	6063      	str	r3, [r4, #4]
 800d6a6:	6923      	ldr	r3, [r4, #16]
 800d6a8:	6023      	str	r3, [r4, #0]
 800d6aa:	89a3      	ldrh	r3, [r4, #12]
 800d6ac:	f043 0308 	orr.w	r3, r3, #8
 800d6b0:	81a3      	strh	r3, [r4, #12]
 800d6b2:	6923      	ldr	r3, [r4, #16]
 800d6b4:	b94b      	cbnz	r3, 800d6ca <__swsetup_r+0x9a>
 800d6b6:	89a3      	ldrh	r3, [r4, #12]
 800d6b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d6bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d6c0:	d003      	beq.n	800d6ca <__swsetup_r+0x9a>
 800d6c2:	4621      	mov	r1, r4
 800d6c4:	4630      	mov	r0, r6
 800d6c6:	f000 f95b 	bl	800d980 <__smakebuf_r>
 800d6ca:	89a0      	ldrh	r0, [r4, #12]
 800d6cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d6d0:	f010 0301 	ands.w	r3, r0, #1
 800d6d4:	d00a      	beq.n	800d6ec <__swsetup_r+0xbc>
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	60a3      	str	r3, [r4, #8]
 800d6da:	6963      	ldr	r3, [r4, #20]
 800d6dc:	425b      	negs	r3, r3
 800d6de:	61a3      	str	r3, [r4, #24]
 800d6e0:	6923      	ldr	r3, [r4, #16]
 800d6e2:	b943      	cbnz	r3, 800d6f6 <__swsetup_r+0xc6>
 800d6e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d6e8:	d1ba      	bne.n	800d660 <__swsetup_r+0x30>
 800d6ea:	bd70      	pop	{r4, r5, r6, pc}
 800d6ec:	0781      	lsls	r1, r0, #30
 800d6ee:	bf58      	it	pl
 800d6f0:	6963      	ldrpl	r3, [r4, #20]
 800d6f2:	60a3      	str	r3, [r4, #8]
 800d6f4:	e7f4      	b.n	800d6e0 <__swsetup_r+0xb0>
 800d6f6:	2000      	movs	r0, #0
 800d6f8:	e7f7      	b.n	800d6ea <__swsetup_r+0xba>
 800d6fa:	bf00      	nop
 800d6fc:	20000010 	.word	0x20000010
 800d700:	0800ed98 	.word	0x0800ed98
 800d704:	0800edb8 	.word	0x0800edb8
 800d708:	0800ed78 	.word	0x0800ed78

0800d70c <__assert_func>:
 800d70c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d70e:	4614      	mov	r4, r2
 800d710:	461a      	mov	r2, r3
 800d712:	4b09      	ldr	r3, [pc, #36]	; (800d738 <__assert_func+0x2c>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4605      	mov	r5, r0
 800d718:	68d8      	ldr	r0, [r3, #12]
 800d71a:	b14c      	cbz	r4, 800d730 <__assert_func+0x24>
 800d71c:	4b07      	ldr	r3, [pc, #28]	; (800d73c <__assert_func+0x30>)
 800d71e:	9100      	str	r1, [sp, #0]
 800d720:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d724:	4906      	ldr	r1, [pc, #24]	; (800d740 <__assert_func+0x34>)
 800d726:	462b      	mov	r3, r5
 800d728:	f000 f8e0 	bl	800d8ec <fiprintf>
 800d72c:	f000 fdd0 	bl	800e2d0 <abort>
 800d730:	4b04      	ldr	r3, [pc, #16]	; (800d744 <__assert_func+0x38>)
 800d732:	461c      	mov	r4, r3
 800d734:	e7f3      	b.n	800d71e <__assert_func+0x12>
 800d736:	bf00      	nop
 800d738:	20000010 	.word	0x20000010
 800d73c:	0800ee50 	.word	0x0800ee50
 800d740:	0800ee5d 	.word	0x0800ee5d
 800d744:	0800ee8b 	.word	0x0800ee8b

0800d748 <_close_r>:
 800d748:	b538      	push	{r3, r4, r5, lr}
 800d74a:	4d06      	ldr	r5, [pc, #24]	; (800d764 <_close_r+0x1c>)
 800d74c:	2300      	movs	r3, #0
 800d74e:	4604      	mov	r4, r0
 800d750:	4608      	mov	r0, r1
 800d752:	602b      	str	r3, [r5, #0]
 800d754:	f7f4 f863 	bl	800181e <_close>
 800d758:	1c43      	adds	r3, r0, #1
 800d75a:	d102      	bne.n	800d762 <_close_r+0x1a>
 800d75c:	682b      	ldr	r3, [r5, #0]
 800d75e:	b103      	cbz	r3, 800d762 <_close_r+0x1a>
 800d760:	6023      	str	r3, [r4, #0]
 800d762:	bd38      	pop	{r3, r4, r5, pc}
 800d764:	200033bc 	.word	0x200033bc

0800d768 <__sflush_r>:
 800d768:	898a      	ldrh	r2, [r1, #12]
 800d76a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d76e:	4605      	mov	r5, r0
 800d770:	0710      	lsls	r0, r2, #28
 800d772:	460c      	mov	r4, r1
 800d774:	d458      	bmi.n	800d828 <__sflush_r+0xc0>
 800d776:	684b      	ldr	r3, [r1, #4]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	dc05      	bgt.n	800d788 <__sflush_r+0x20>
 800d77c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d77e:	2b00      	cmp	r3, #0
 800d780:	dc02      	bgt.n	800d788 <__sflush_r+0x20>
 800d782:	2000      	movs	r0, #0
 800d784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d788:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d78a:	2e00      	cmp	r6, #0
 800d78c:	d0f9      	beq.n	800d782 <__sflush_r+0x1a>
 800d78e:	2300      	movs	r3, #0
 800d790:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d794:	682f      	ldr	r7, [r5, #0]
 800d796:	602b      	str	r3, [r5, #0]
 800d798:	d032      	beq.n	800d800 <__sflush_r+0x98>
 800d79a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d79c:	89a3      	ldrh	r3, [r4, #12]
 800d79e:	075a      	lsls	r2, r3, #29
 800d7a0:	d505      	bpl.n	800d7ae <__sflush_r+0x46>
 800d7a2:	6863      	ldr	r3, [r4, #4]
 800d7a4:	1ac0      	subs	r0, r0, r3
 800d7a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d7a8:	b10b      	cbz	r3, 800d7ae <__sflush_r+0x46>
 800d7aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d7ac:	1ac0      	subs	r0, r0, r3
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	4602      	mov	r2, r0
 800d7b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d7b4:	6a21      	ldr	r1, [r4, #32]
 800d7b6:	4628      	mov	r0, r5
 800d7b8:	47b0      	blx	r6
 800d7ba:	1c43      	adds	r3, r0, #1
 800d7bc:	89a3      	ldrh	r3, [r4, #12]
 800d7be:	d106      	bne.n	800d7ce <__sflush_r+0x66>
 800d7c0:	6829      	ldr	r1, [r5, #0]
 800d7c2:	291d      	cmp	r1, #29
 800d7c4:	d82c      	bhi.n	800d820 <__sflush_r+0xb8>
 800d7c6:	4a2a      	ldr	r2, [pc, #168]	; (800d870 <__sflush_r+0x108>)
 800d7c8:	40ca      	lsrs	r2, r1
 800d7ca:	07d6      	lsls	r6, r2, #31
 800d7cc:	d528      	bpl.n	800d820 <__sflush_r+0xb8>
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	6062      	str	r2, [r4, #4]
 800d7d2:	04d9      	lsls	r1, r3, #19
 800d7d4:	6922      	ldr	r2, [r4, #16]
 800d7d6:	6022      	str	r2, [r4, #0]
 800d7d8:	d504      	bpl.n	800d7e4 <__sflush_r+0x7c>
 800d7da:	1c42      	adds	r2, r0, #1
 800d7dc:	d101      	bne.n	800d7e2 <__sflush_r+0x7a>
 800d7de:	682b      	ldr	r3, [r5, #0]
 800d7e0:	b903      	cbnz	r3, 800d7e4 <__sflush_r+0x7c>
 800d7e2:	6560      	str	r0, [r4, #84]	; 0x54
 800d7e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7e6:	602f      	str	r7, [r5, #0]
 800d7e8:	2900      	cmp	r1, #0
 800d7ea:	d0ca      	beq.n	800d782 <__sflush_r+0x1a>
 800d7ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7f0:	4299      	cmp	r1, r3
 800d7f2:	d002      	beq.n	800d7fa <__sflush_r+0x92>
 800d7f4:	4628      	mov	r0, r5
 800d7f6:	f7ff fbc3 	bl	800cf80 <_free_r>
 800d7fa:	2000      	movs	r0, #0
 800d7fc:	6360      	str	r0, [r4, #52]	; 0x34
 800d7fe:	e7c1      	b.n	800d784 <__sflush_r+0x1c>
 800d800:	6a21      	ldr	r1, [r4, #32]
 800d802:	2301      	movs	r3, #1
 800d804:	4628      	mov	r0, r5
 800d806:	47b0      	blx	r6
 800d808:	1c41      	adds	r1, r0, #1
 800d80a:	d1c7      	bne.n	800d79c <__sflush_r+0x34>
 800d80c:	682b      	ldr	r3, [r5, #0]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d0c4      	beq.n	800d79c <__sflush_r+0x34>
 800d812:	2b1d      	cmp	r3, #29
 800d814:	d001      	beq.n	800d81a <__sflush_r+0xb2>
 800d816:	2b16      	cmp	r3, #22
 800d818:	d101      	bne.n	800d81e <__sflush_r+0xb6>
 800d81a:	602f      	str	r7, [r5, #0]
 800d81c:	e7b1      	b.n	800d782 <__sflush_r+0x1a>
 800d81e:	89a3      	ldrh	r3, [r4, #12]
 800d820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d824:	81a3      	strh	r3, [r4, #12]
 800d826:	e7ad      	b.n	800d784 <__sflush_r+0x1c>
 800d828:	690f      	ldr	r7, [r1, #16]
 800d82a:	2f00      	cmp	r7, #0
 800d82c:	d0a9      	beq.n	800d782 <__sflush_r+0x1a>
 800d82e:	0793      	lsls	r3, r2, #30
 800d830:	680e      	ldr	r6, [r1, #0]
 800d832:	bf08      	it	eq
 800d834:	694b      	ldreq	r3, [r1, #20]
 800d836:	600f      	str	r7, [r1, #0]
 800d838:	bf18      	it	ne
 800d83a:	2300      	movne	r3, #0
 800d83c:	eba6 0807 	sub.w	r8, r6, r7
 800d840:	608b      	str	r3, [r1, #8]
 800d842:	f1b8 0f00 	cmp.w	r8, #0
 800d846:	dd9c      	ble.n	800d782 <__sflush_r+0x1a>
 800d848:	6a21      	ldr	r1, [r4, #32]
 800d84a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d84c:	4643      	mov	r3, r8
 800d84e:	463a      	mov	r2, r7
 800d850:	4628      	mov	r0, r5
 800d852:	47b0      	blx	r6
 800d854:	2800      	cmp	r0, #0
 800d856:	dc06      	bgt.n	800d866 <__sflush_r+0xfe>
 800d858:	89a3      	ldrh	r3, [r4, #12]
 800d85a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d85e:	81a3      	strh	r3, [r4, #12]
 800d860:	f04f 30ff 	mov.w	r0, #4294967295
 800d864:	e78e      	b.n	800d784 <__sflush_r+0x1c>
 800d866:	4407      	add	r7, r0
 800d868:	eba8 0800 	sub.w	r8, r8, r0
 800d86c:	e7e9      	b.n	800d842 <__sflush_r+0xda>
 800d86e:	bf00      	nop
 800d870:	20400001 	.word	0x20400001

0800d874 <_fflush_r>:
 800d874:	b538      	push	{r3, r4, r5, lr}
 800d876:	690b      	ldr	r3, [r1, #16]
 800d878:	4605      	mov	r5, r0
 800d87a:	460c      	mov	r4, r1
 800d87c:	b913      	cbnz	r3, 800d884 <_fflush_r+0x10>
 800d87e:	2500      	movs	r5, #0
 800d880:	4628      	mov	r0, r5
 800d882:	bd38      	pop	{r3, r4, r5, pc}
 800d884:	b118      	cbz	r0, 800d88e <_fflush_r+0x1a>
 800d886:	6983      	ldr	r3, [r0, #24]
 800d888:	b90b      	cbnz	r3, 800d88e <_fflush_r+0x1a>
 800d88a:	f7ff fa7d 	bl	800cd88 <__sinit>
 800d88e:	4b14      	ldr	r3, [pc, #80]	; (800d8e0 <_fflush_r+0x6c>)
 800d890:	429c      	cmp	r4, r3
 800d892:	d11b      	bne.n	800d8cc <_fflush_r+0x58>
 800d894:	686c      	ldr	r4, [r5, #4]
 800d896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d0ef      	beq.n	800d87e <_fflush_r+0xa>
 800d89e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d8a0:	07d0      	lsls	r0, r2, #31
 800d8a2:	d404      	bmi.n	800d8ae <_fflush_r+0x3a>
 800d8a4:	0599      	lsls	r1, r3, #22
 800d8a6:	d402      	bmi.n	800d8ae <_fflush_r+0x3a>
 800d8a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8aa:	f7ff fb30 	bl	800cf0e <__retarget_lock_acquire_recursive>
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	4621      	mov	r1, r4
 800d8b2:	f7ff ff59 	bl	800d768 <__sflush_r>
 800d8b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8b8:	07da      	lsls	r2, r3, #31
 800d8ba:	4605      	mov	r5, r0
 800d8bc:	d4e0      	bmi.n	800d880 <_fflush_r+0xc>
 800d8be:	89a3      	ldrh	r3, [r4, #12]
 800d8c0:	059b      	lsls	r3, r3, #22
 800d8c2:	d4dd      	bmi.n	800d880 <_fflush_r+0xc>
 800d8c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8c6:	f7ff fb23 	bl	800cf10 <__retarget_lock_release_recursive>
 800d8ca:	e7d9      	b.n	800d880 <_fflush_r+0xc>
 800d8cc:	4b05      	ldr	r3, [pc, #20]	; (800d8e4 <_fflush_r+0x70>)
 800d8ce:	429c      	cmp	r4, r3
 800d8d0:	d101      	bne.n	800d8d6 <_fflush_r+0x62>
 800d8d2:	68ac      	ldr	r4, [r5, #8]
 800d8d4:	e7df      	b.n	800d896 <_fflush_r+0x22>
 800d8d6:	4b04      	ldr	r3, [pc, #16]	; (800d8e8 <_fflush_r+0x74>)
 800d8d8:	429c      	cmp	r4, r3
 800d8da:	bf08      	it	eq
 800d8dc:	68ec      	ldreq	r4, [r5, #12]
 800d8de:	e7da      	b.n	800d896 <_fflush_r+0x22>
 800d8e0:	0800ed98 	.word	0x0800ed98
 800d8e4:	0800edb8 	.word	0x0800edb8
 800d8e8:	0800ed78 	.word	0x0800ed78

0800d8ec <fiprintf>:
 800d8ec:	b40e      	push	{r1, r2, r3}
 800d8ee:	b503      	push	{r0, r1, lr}
 800d8f0:	4601      	mov	r1, r0
 800d8f2:	ab03      	add	r3, sp, #12
 800d8f4:	4805      	ldr	r0, [pc, #20]	; (800d90c <fiprintf+0x20>)
 800d8f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8fa:	6800      	ldr	r0, [r0, #0]
 800d8fc:	9301      	str	r3, [sp, #4]
 800d8fe:	f000 fa11 	bl	800dd24 <_vfiprintf_r>
 800d902:	b002      	add	sp, #8
 800d904:	f85d eb04 	ldr.w	lr, [sp], #4
 800d908:	b003      	add	sp, #12
 800d90a:	4770      	bx	lr
 800d90c:	20000010 	.word	0x20000010

0800d910 <_lseek_r>:
 800d910:	b538      	push	{r3, r4, r5, lr}
 800d912:	4d07      	ldr	r5, [pc, #28]	; (800d930 <_lseek_r+0x20>)
 800d914:	4604      	mov	r4, r0
 800d916:	4608      	mov	r0, r1
 800d918:	4611      	mov	r1, r2
 800d91a:	2200      	movs	r2, #0
 800d91c:	602a      	str	r2, [r5, #0]
 800d91e:	461a      	mov	r2, r3
 800d920:	f7f3 ffa4 	bl	800186c <_lseek>
 800d924:	1c43      	adds	r3, r0, #1
 800d926:	d102      	bne.n	800d92e <_lseek_r+0x1e>
 800d928:	682b      	ldr	r3, [r5, #0]
 800d92a:	b103      	cbz	r3, 800d92e <_lseek_r+0x1e>
 800d92c:	6023      	str	r3, [r4, #0]
 800d92e:	bd38      	pop	{r3, r4, r5, pc}
 800d930:	200033bc 	.word	0x200033bc

0800d934 <__swhatbuf_r>:
 800d934:	b570      	push	{r4, r5, r6, lr}
 800d936:	460e      	mov	r6, r1
 800d938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d93c:	2900      	cmp	r1, #0
 800d93e:	b096      	sub	sp, #88	; 0x58
 800d940:	4614      	mov	r4, r2
 800d942:	461d      	mov	r5, r3
 800d944:	da08      	bge.n	800d958 <__swhatbuf_r+0x24>
 800d946:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d94a:	2200      	movs	r2, #0
 800d94c:	602a      	str	r2, [r5, #0]
 800d94e:	061a      	lsls	r2, r3, #24
 800d950:	d410      	bmi.n	800d974 <__swhatbuf_r+0x40>
 800d952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d956:	e00e      	b.n	800d976 <__swhatbuf_r+0x42>
 800d958:	466a      	mov	r2, sp
 800d95a:	f000 fcc1 	bl	800e2e0 <_fstat_r>
 800d95e:	2800      	cmp	r0, #0
 800d960:	dbf1      	blt.n	800d946 <__swhatbuf_r+0x12>
 800d962:	9a01      	ldr	r2, [sp, #4]
 800d964:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d968:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d96c:	425a      	negs	r2, r3
 800d96e:	415a      	adcs	r2, r3
 800d970:	602a      	str	r2, [r5, #0]
 800d972:	e7ee      	b.n	800d952 <__swhatbuf_r+0x1e>
 800d974:	2340      	movs	r3, #64	; 0x40
 800d976:	2000      	movs	r0, #0
 800d978:	6023      	str	r3, [r4, #0]
 800d97a:	b016      	add	sp, #88	; 0x58
 800d97c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d980 <__smakebuf_r>:
 800d980:	898b      	ldrh	r3, [r1, #12]
 800d982:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d984:	079d      	lsls	r5, r3, #30
 800d986:	4606      	mov	r6, r0
 800d988:	460c      	mov	r4, r1
 800d98a:	d507      	bpl.n	800d99c <__smakebuf_r+0x1c>
 800d98c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d990:	6023      	str	r3, [r4, #0]
 800d992:	6123      	str	r3, [r4, #16]
 800d994:	2301      	movs	r3, #1
 800d996:	6163      	str	r3, [r4, #20]
 800d998:	b002      	add	sp, #8
 800d99a:	bd70      	pop	{r4, r5, r6, pc}
 800d99c:	ab01      	add	r3, sp, #4
 800d99e:	466a      	mov	r2, sp
 800d9a0:	f7ff ffc8 	bl	800d934 <__swhatbuf_r>
 800d9a4:	9900      	ldr	r1, [sp, #0]
 800d9a6:	4605      	mov	r5, r0
 800d9a8:	4630      	mov	r0, r6
 800d9aa:	f7ff fb55 	bl	800d058 <_malloc_r>
 800d9ae:	b948      	cbnz	r0, 800d9c4 <__smakebuf_r+0x44>
 800d9b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9b4:	059a      	lsls	r2, r3, #22
 800d9b6:	d4ef      	bmi.n	800d998 <__smakebuf_r+0x18>
 800d9b8:	f023 0303 	bic.w	r3, r3, #3
 800d9bc:	f043 0302 	orr.w	r3, r3, #2
 800d9c0:	81a3      	strh	r3, [r4, #12]
 800d9c2:	e7e3      	b.n	800d98c <__smakebuf_r+0xc>
 800d9c4:	4b0d      	ldr	r3, [pc, #52]	; (800d9fc <__smakebuf_r+0x7c>)
 800d9c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d9c8:	89a3      	ldrh	r3, [r4, #12]
 800d9ca:	6020      	str	r0, [r4, #0]
 800d9cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9d0:	81a3      	strh	r3, [r4, #12]
 800d9d2:	9b00      	ldr	r3, [sp, #0]
 800d9d4:	6163      	str	r3, [r4, #20]
 800d9d6:	9b01      	ldr	r3, [sp, #4]
 800d9d8:	6120      	str	r0, [r4, #16]
 800d9da:	b15b      	cbz	r3, 800d9f4 <__smakebuf_r+0x74>
 800d9dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9e0:	4630      	mov	r0, r6
 800d9e2:	f000 fc8f 	bl	800e304 <_isatty_r>
 800d9e6:	b128      	cbz	r0, 800d9f4 <__smakebuf_r+0x74>
 800d9e8:	89a3      	ldrh	r3, [r4, #12]
 800d9ea:	f023 0303 	bic.w	r3, r3, #3
 800d9ee:	f043 0301 	orr.w	r3, r3, #1
 800d9f2:	81a3      	strh	r3, [r4, #12]
 800d9f4:	89a0      	ldrh	r0, [r4, #12]
 800d9f6:	4305      	orrs	r5, r0
 800d9f8:	81a5      	strh	r5, [r4, #12]
 800d9fa:	e7cd      	b.n	800d998 <__smakebuf_r+0x18>
 800d9fc:	0800cd21 	.word	0x0800cd21

0800da00 <__malloc_lock>:
 800da00:	4801      	ldr	r0, [pc, #4]	; (800da08 <__malloc_lock+0x8>)
 800da02:	f7ff ba84 	b.w	800cf0e <__retarget_lock_acquire_recursive>
 800da06:	bf00      	nop
 800da08:	200033b0 	.word	0x200033b0

0800da0c <__malloc_unlock>:
 800da0c:	4801      	ldr	r0, [pc, #4]	; (800da14 <__malloc_unlock+0x8>)
 800da0e:	f7ff ba7f 	b.w	800cf10 <__retarget_lock_release_recursive>
 800da12:	bf00      	nop
 800da14:	200033b0 	.word	0x200033b0

0800da18 <__ssputs_r>:
 800da18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da1c:	688e      	ldr	r6, [r1, #8]
 800da1e:	429e      	cmp	r6, r3
 800da20:	4682      	mov	sl, r0
 800da22:	460c      	mov	r4, r1
 800da24:	4690      	mov	r8, r2
 800da26:	461f      	mov	r7, r3
 800da28:	d838      	bhi.n	800da9c <__ssputs_r+0x84>
 800da2a:	898a      	ldrh	r2, [r1, #12]
 800da2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800da30:	d032      	beq.n	800da98 <__ssputs_r+0x80>
 800da32:	6825      	ldr	r5, [r4, #0]
 800da34:	6909      	ldr	r1, [r1, #16]
 800da36:	eba5 0901 	sub.w	r9, r5, r1
 800da3a:	6965      	ldr	r5, [r4, #20]
 800da3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da44:	3301      	adds	r3, #1
 800da46:	444b      	add	r3, r9
 800da48:	106d      	asrs	r5, r5, #1
 800da4a:	429d      	cmp	r5, r3
 800da4c:	bf38      	it	cc
 800da4e:	461d      	movcc	r5, r3
 800da50:	0553      	lsls	r3, r2, #21
 800da52:	d531      	bpl.n	800dab8 <__ssputs_r+0xa0>
 800da54:	4629      	mov	r1, r5
 800da56:	f7ff faff 	bl	800d058 <_malloc_r>
 800da5a:	4606      	mov	r6, r0
 800da5c:	b950      	cbnz	r0, 800da74 <__ssputs_r+0x5c>
 800da5e:	230c      	movs	r3, #12
 800da60:	f8ca 3000 	str.w	r3, [sl]
 800da64:	89a3      	ldrh	r3, [r4, #12]
 800da66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da6a:	81a3      	strh	r3, [r4, #12]
 800da6c:	f04f 30ff 	mov.w	r0, #4294967295
 800da70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da74:	6921      	ldr	r1, [r4, #16]
 800da76:	464a      	mov	r2, r9
 800da78:	f7ff fa6c 	bl	800cf54 <memcpy>
 800da7c:	89a3      	ldrh	r3, [r4, #12]
 800da7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800da82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da86:	81a3      	strh	r3, [r4, #12]
 800da88:	6126      	str	r6, [r4, #16]
 800da8a:	6165      	str	r5, [r4, #20]
 800da8c:	444e      	add	r6, r9
 800da8e:	eba5 0509 	sub.w	r5, r5, r9
 800da92:	6026      	str	r6, [r4, #0]
 800da94:	60a5      	str	r5, [r4, #8]
 800da96:	463e      	mov	r6, r7
 800da98:	42be      	cmp	r6, r7
 800da9a:	d900      	bls.n	800da9e <__ssputs_r+0x86>
 800da9c:	463e      	mov	r6, r7
 800da9e:	6820      	ldr	r0, [r4, #0]
 800daa0:	4632      	mov	r2, r6
 800daa2:	4641      	mov	r1, r8
 800daa4:	f000 fc3e 	bl	800e324 <memmove>
 800daa8:	68a3      	ldr	r3, [r4, #8]
 800daaa:	1b9b      	subs	r3, r3, r6
 800daac:	60a3      	str	r3, [r4, #8]
 800daae:	6823      	ldr	r3, [r4, #0]
 800dab0:	4433      	add	r3, r6
 800dab2:	6023      	str	r3, [r4, #0]
 800dab4:	2000      	movs	r0, #0
 800dab6:	e7db      	b.n	800da70 <__ssputs_r+0x58>
 800dab8:	462a      	mov	r2, r5
 800daba:	f000 fc4d 	bl	800e358 <_realloc_r>
 800dabe:	4606      	mov	r6, r0
 800dac0:	2800      	cmp	r0, #0
 800dac2:	d1e1      	bne.n	800da88 <__ssputs_r+0x70>
 800dac4:	6921      	ldr	r1, [r4, #16]
 800dac6:	4650      	mov	r0, sl
 800dac8:	f7ff fa5a 	bl	800cf80 <_free_r>
 800dacc:	e7c7      	b.n	800da5e <__ssputs_r+0x46>
	...

0800dad0 <_svfiprintf_r>:
 800dad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dad4:	4698      	mov	r8, r3
 800dad6:	898b      	ldrh	r3, [r1, #12]
 800dad8:	061b      	lsls	r3, r3, #24
 800dada:	b09d      	sub	sp, #116	; 0x74
 800dadc:	4607      	mov	r7, r0
 800dade:	460d      	mov	r5, r1
 800dae0:	4614      	mov	r4, r2
 800dae2:	d50e      	bpl.n	800db02 <_svfiprintf_r+0x32>
 800dae4:	690b      	ldr	r3, [r1, #16]
 800dae6:	b963      	cbnz	r3, 800db02 <_svfiprintf_r+0x32>
 800dae8:	2140      	movs	r1, #64	; 0x40
 800daea:	f7ff fab5 	bl	800d058 <_malloc_r>
 800daee:	6028      	str	r0, [r5, #0]
 800daf0:	6128      	str	r0, [r5, #16]
 800daf2:	b920      	cbnz	r0, 800dafe <_svfiprintf_r+0x2e>
 800daf4:	230c      	movs	r3, #12
 800daf6:	603b      	str	r3, [r7, #0]
 800daf8:	f04f 30ff 	mov.w	r0, #4294967295
 800dafc:	e0d1      	b.n	800dca2 <_svfiprintf_r+0x1d2>
 800dafe:	2340      	movs	r3, #64	; 0x40
 800db00:	616b      	str	r3, [r5, #20]
 800db02:	2300      	movs	r3, #0
 800db04:	9309      	str	r3, [sp, #36]	; 0x24
 800db06:	2320      	movs	r3, #32
 800db08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800db10:	2330      	movs	r3, #48	; 0x30
 800db12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dcbc <_svfiprintf_r+0x1ec>
 800db16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db1a:	f04f 0901 	mov.w	r9, #1
 800db1e:	4623      	mov	r3, r4
 800db20:	469a      	mov	sl, r3
 800db22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db26:	b10a      	cbz	r2, 800db2c <_svfiprintf_r+0x5c>
 800db28:	2a25      	cmp	r2, #37	; 0x25
 800db2a:	d1f9      	bne.n	800db20 <_svfiprintf_r+0x50>
 800db2c:	ebba 0b04 	subs.w	fp, sl, r4
 800db30:	d00b      	beq.n	800db4a <_svfiprintf_r+0x7a>
 800db32:	465b      	mov	r3, fp
 800db34:	4622      	mov	r2, r4
 800db36:	4629      	mov	r1, r5
 800db38:	4638      	mov	r0, r7
 800db3a:	f7ff ff6d 	bl	800da18 <__ssputs_r>
 800db3e:	3001      	adds	r0, #1
 800db40:	f000 80aa 	beq.w	800dc98 <_svfiprintf_r+0x1c8>
 800db44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db46:	445a      	add	r2, fp
 800db48:	9209      	str	r2, [sp, #36]	; 0x24
 800db4a:	f89a 3000 	ldrb.w	r3, [sl]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	f000 80a2 	beq.w	800dc98 <_svfiprintf_r+0x1c8>
 800db54:	2300      	movs	r3, #0
 800db56:	f04f 32ff 	mov.w	r2, #4294967295
 800db5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db5e:	f10a 0a01 	add.w	sl, sl, #1
 800db62:	9304      	str	r3, [sp, #16]
 800db64:	9307      	str	r3, [sp, #28]
 800db66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db6a:	931a      	str	r3, [sp, #104]	; 0x68
 800db6c:	4654      	mov	r4, sl
 800db6e:	2205      	movs	r2, #5
 800db70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db74:	4851      	ldr	r0, [pc, #324]	; (800dcbc <_svfiprintf_r+0x1ec>)
 800db76:	f7f2 fb33 	bl	80001e0 <memchr>
 800db7a:	9a04      	ldr	r2, [sp, #16]
 800db7c:	b9d8      	cbnz	r0, 800dbb6 <_svfiprintf_r+0xe6>
 800db7e:	06d0      	lsls	r0, r2, #27
 800db80:	bf44      	itt	mi
 800db82:	2320      	movmi	r3, #32
 800db84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db88:	0711      	lsls	r1, r2, #28
 800db8a:	bf44      	itt	mi
 800db8c:	232b      	movmi	r3, #43	; 0x2b
 800db8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db92:	f89a 3000 	ldrb.w	r3, [sl]
 800db96:	2b2a      	cmp	r3, #42	; 0x2a
 800db98:	d015      	beq.n	800dbc6 <_svfiprintf_r+0xf6>
 800db9a:	9a07      	ldr	r2, [sp, #28]
 800db9c:	4654      	mov	r4, sl
 800db9e:	2000      	movs	r0, #0
 800dba0:	f04f 0c0a 	mov.w	ip, #10
 800dba4:	4621      	mov	r1, r4
 800dba6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbaa:	3b30      	subs	r3, #48	; 0x30
 800dbac:	2b09      	cmp	r3, #9
 800dbae:	d94e      	bls.n	800dc4e <_svfiprintf_r+0x17e>
 800dbb0:	b1b0      	cbz	r0, 800dbe0 <_svfiprintf_r+0x110>
 800dbb2:	9207      	str	r2, [sp, #28]
 800dbb4:	e014      	b.n	800dbe0 <_svfiprintf_r+0x110>
 800dbb6:	eba0 0308 	sub.w	r3, r0, r8
 800dbba:	fa09 f303 	lsl.w	r3, r9, r3
 800dbbe:	4313      	orrs	r3, r2
 800dbc0:	9304      	str	r3, [sp, #16]
 800dbc2:	46a2      	mov	sl, r4
 800dbc4:	e7d2      	b.n	800db6c <_svfiprintf_r+0x9c>
 800dbc6:	9b03      	ldr	r3, [sp, #12]
 800dbc8:	1d19      	adds	r1, r3, #4
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	9103      	str	r1, [sp, #12]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	bfbb      	ittet	lt
 800dbd2:	425b      	neglt	r3, r3
 800dbd4:	f042 0202 	orrlt.w	r2, r2, #2
 800dbd8:	9307      	strge	r3, [sp, #28]
 800dbda:	9307      	strlt	r3, [sp, #28]
 800dbdc:	bfb8      	it	lt
 800dbde:	9204      	strlt	r2, [sp, #16]
 800dbe0:	7823      	ldrb	r3, [r4, #0]
 800dbe2:	2b2e      	cmp	r3, #46	; 0x2e
 800dbe4:	d10c      	bne.n	800dc00 <_svfiprintf_r+0x130>
 800dbe6:	7863      	ldrb	r3, [r4, #1]
 800dbe8:	2b2a      	cmp	r3, #42	; 0x2a
 800dbea:	d135      	bne.n	800dc58 <_svfiprintf_r+0x188>
 800dbec:	9b03      	ldr	r3, [sp, #12]
 800dbee:	1d1a      	adds	r2, r3, #4
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	9203      	str	r2, [sp, #12]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	bfb8      	it	lt
 800dbf8:	f04f 33ff 	movlt.w	r3, #4294967295
 800dbfc:	3402      	adds	r4, #2
 800dbfe:	9305      	str	r3, [sp, #20]
 800dc00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dccc <_svfiprintf_r+0x1fc>
 800dc04:	7821      	ldrb	r1, [r4, #0]
 800dc06:	2203      	movs	r2, #3
 800dc08:	4650      	mov	r0, sl
 800dc0a:	f7f2 fae9 	bl	80001e0 <memchr>
 800dc0e:	b140      	cbz	r0, 800dc22 <_svfiprintf_r+0x152>
 800dc10:	2340      	movs	r3, #64	; 0x40
 800dc12:	eba0 000a 	sub.w	r0, r0, sl
 800dc16:	fa03 f000 	lsl.w	r0, r3, r0
 800dc1a:	9b04      	ldr	r3, [sp, #16]
 800dc1c:	4303      	orrs	r3, r0
 800dc1e:	3401      	adds	r4, #1
 800dc20:	9304      	str	r3, [sp, #16]
 800dc22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc26:	4826      	ldr	r0, [pc, #152]	; (800dcc0 <_svfiprintf_r+0x1f0>)
 800dc28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc2c:	2206      	movs	r2, #6
 800dc2e:	f7f2 fad7 	bl	80001e0 <memchr>
 800dc32:	2800      	cmp	r0, #0
 800dc34:	d038      	beq.n	800dca8 <_svfiprintf_r+0x1d8>
 800dc36:	4b23      	ldr	r3, [pc, #140]	; (800dcc4 <_svfiprintf_r+0x1f4>)
 800dc38:	bb1b      	cbnz	r3, 800dc82 <_svfiprintf_r+0x1b2>
 800dc3a:	9b03      	ldr	r3, [sp, #12]
 800dc3c:	3307      	adds	r3, #7
 800dc3e:	f023 0307 	bic.w	r3, r3, #7
 800dc42:	3308      	adds	r3, #8
 800dc44:	9303      	str	r3, [sp, #12]
 800dc46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc48:	4433      	add	r3, r6
 800dc4a:	9309      	str	r3, [sp, #36]	; 0x24
 800dc4c:	e767      	b.n	800db1e <_svfiprintf_r+0x4e>
 800dc4e:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc52:	460c      	mov	r4, r1
 800dc54:	2001      	movs	r0, #1
 800dc56:	e7a5      	b.n	800dba4 <_svfiprintf_r+0xd4>
 800dc58:	2300      	movs	r3, #0
 800dc5a:	3401      	adds	r4, #1
 800dc5c:	9305      	str	r3, [sp, #20]
 800dc5e:	4619      	mov	r1, r3
 800dc60:	f04f 0c0a 	mov.w	ip, #10
 800dc64:	4620      	mov	r0, r4
 800dc66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc6a:	3a30      	subs	r2, #48	; 0x30
 800dc6c:	2a09      	cmp	r2, #9
 800dc6e:	d903      	bls.n	800dc78 <_svfiprintf_r+0x1a8>
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d0c5      	beq.n	800dc00 <_svfiprintf_r+0x130>
 800dc74:	9105      	str	r1, [sp, #20]
 800dc76:	e7c3      	b.n	800dc00 <_svfiprintf_r+0x130>
 800dc78:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc7c:	4604      	mov	r4, r0
 800dc7e:	2301      	movs	r3, #1
 800dc80:	e7f0      	b.n	800dc64 <_svfiprintf_r+0x194>
 800dc82:	ab03      	add	r3, sp, #12
 800dc84:	9300      	str	r3, [sp, #0]
 800dc86:	462a      	mov	r2, r5
 800dc88:	4b0f      	ldr	r3, [pc, #60]	; (800dcc8 <_svfiprintf_r+0x1f8>)
 800dc8a:	a904      	add	r1, sp, #16
 800dc8c:	4638      	mov	r0, r7
 800dc8e:	f3af 8000 	nop.w
 800dc92:	1c42      	adds	r2, r0, #1
 800dc94:	4606      	mov	r6, r0
 800dc96:	d1d6      	bne.n	800dc46 <_svfiprintf_r+0x176>
 800dc98:	89ab      	ldrh	r3, [r5, #12]
 800dc9a:	065b      	lsls	r3, r3, #25
 800dc9c:	f53f af2c 	bmi.w	800daf8 <_svfiprintf_r+0x28>
 800dca0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dca2:	b01d      	add	sp, #116	; 0x74
 800dca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dca8:	ab03      	add	r3, sp, #12
 800dcaa:	9300      	str	r3, [sp, #0]
 800dcac:	462a      	mov	r2, r5
 800dcae:	4b06      	ldr	r3, [pc, #24]	; (800dcc8 <_svfiprintf_r+0x1f8>)
 800dcb0:	a904      	add	r1, sp, #16
 800dcb2:	4638      	mov	r0, r7
 800dcb4:	f000 f9d4 	bl	800e060 <_printf_i>
 800dcb8:	e7eb      	b.n	800dc92 <_svfiprintf_r+0x1c2>
 800dcba:	bf00      	nop
 800dcbc:	0800ee8c 	.word	0x0800ee8c
 800dcc0:	0800ee96 	.word	0x0800ee96
 800dcc4:	00000000 	.word	0x00000000
 800dcc8:	0800da19 	.word	0x0800da19
 800dccc:	0800ee92 	.word	0x0800ee92

0800dcd0 <__sfputc_r>:
 800dcd0:	6893      	ldr	r3, [r2, #8]
 800dcd2:	3b01      	subs	r3, #1
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	b410      	push	{r4}
 800dcd8:	6093      	str	r3, [r2, #8]
 800dcda:	da08      	bge.n	800dcee <__sfputc_r+0x1e>
 800dcdc:	6994      	ldr	r4, [r2, #24]
 800dcde:	42a3      	cmp	r3, r4
 800dce0:	db01      	blt.n	800dce6 <__sfputc_r+0x16>
 800dce2:	290a      	cmp	r1, #10
 800dce4:	d103      	bne.n	800dcee <__sfputc_r+0x1e>
 800dce6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcea:	f7ff bc3d 	b.w	800d568 <__swbuf_r>
 800dcee:	6813      	ldr	r3, [r2, #0]
 800dcf0:	1c58      	adds	r0, r3, #1
 800dcf2:	6010      	str	r0, [r2, #0]
 800dcf4:	7019      	strb	r1, [r3, #0]
 800dcf6:	4608      	mov	r0, r1
 800dcf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcfc:	4770      	bx	lr

0800dcfe <__sfputs_r>:
 800dcfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd00:	4606      	mov	r6, r0
 800dd02:	460f      	mov	r7, r1
 800dd04:	4614      	mov	r4, r2
 800dd06:	18d5      	adds	r5, r2, r3
 800dd08:	42ac      	cmp	r4, r5
 800dd0a:	d101      	bne.n	800dd10 <__sfputs_r+0x12>
 800dd0c:	2000      	movs	r0, #0
 800dd0e:	e007      	b.n	800dd20 <__sfputs_r+0x22>
 800dd10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd14:	463a      	mov	r2, r7
 800dd16:	4630      	mov	r0, r6
 800dd18:	f7ff ffda 	bl	800dcd0 <__sfputc_r>
 800dd1c:	1c43      	adds	r3, r0, #1
 800dd1e:	d1f3      	bne.n	800dd08 <__sfputs_r+0xa>
 800dd20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dd24 <_vfiprintf_r>:
 800dd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd28:	460d      	mov	r5, r1
 800dd2a:	b09d      	sub	sp, #116	; 0x74
 800dd2c:	4614      	mov	r4, r2
 800dd2e:	4698      	mov	r8, r3
 800dd30:	4606      	mov	r6, r0
 800dd32:	b118      	cbz	r0, 800dd3c <_vfiprintf_r+0x18>
 800dd34:	6983      	ldr	r3, [r0, #24]
 800dd36:	b90b      	cbnz	r3, 800dd3c <_vfiprintf_r+0x18>
 800dd38:	f7ff f826 	bl	800cd88 <__sinit>
 800dd3c:	4b89      	ldr	r3, [pc, #548]	; (800df64 <_vfiprintf_r+0x240>)
 800dd3e:	429d      	cmp	r5, r3
 800dd40:	d11b      	bne.n	800dd7a <_vfiprintf_r+0x56>
 800dd42:	6875      	ldr	r5, [r6, #4]
 800dd44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd46:	07d9      	lsls	r1, r3, #31
 800dd48:	d405      	bmi.n	800dd56 <_vfiprintf_r+0x32>
 800dd4a:	89ab      	ldrh	r3, [r5, #12]
 800dd4c:	059a      	lsls	r2, r3, #22
 800dd4e:	d402      	bmi.n	800dd56 <_vfiprintf_r+0x32>
 800dd50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd52:	f7ff f8dc 	bl	800cf0e <__retarget_lock_acquire_recursive>
 800dd56:	89ab      	ldrh	r3, [r5, #12]
 800dd58:	071b      	lsls	r3, r3, #28
 800dd5a:	d501      	bpl.n	800dd60 <_vfiprintf_r+0x3c>
 800dd5c:	692b      	ldr	r3, [r5, #16]
 800dd5e:	b9eb      	cbnz	r3, 800dd9c <_vfiprintf_r+0x78>
 800dd60:	4629      	mov	r1, r5
 800dd62:	4630      	mov	r0, r6
 800dd64:	f7ff fc64 	bl	800d630 <__swsetup_r>
 800dd68:	b1c0      	cbz	r0, 800dd9c <_vfiprintf_r+0x78>
 800dd6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd6c:	07dc      	lsls	r4, r3, #31
 800dd6e:	d50e      	bpl.n	800dd8e <_vfiprintf_r+0x6a>
 800dd70:	f04f 30ff 	mov.w	r0, #4294967295
 800dd74:	b01d      	add	sp, #116	; 0x74
 800dd76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd7a:	4b7b      	ldr	r3, [pc, #492]	; (800df68 <_vfiprintf_r+0x244>)
 800dd7c:	429d      	cmp	r5, r3
 800dd7e:	d101      	bne.n	800dd84 <_vfiprintf_r+0x60>
 800dd80:	68b5      	ldr	r5, [r6, #8]
 800dd82:	e7df      	b.n	800dd44 <_vfiprintf_r+0x20>
 800dd84:	4b79      	ldr	r3, [pc, #484]	; (800df6c <_vfiprintf_r+0x248>)
 800dd86:	429d      	cmp	r5, r3
 800dd88:	bf08      	it	eq
 800dd8a:	68f5      	ldreq	r5, [r6, #12]
 800dd8c:	e7da      	b.n	800dd44 <_vfiprintf_r+0x20>
 800dd8e:	89ab      	ldrh	r3, [r5, #12]
 800dd90:	0598      	lsls	r0, r3, #22
 800dd92:	d4ed      	bmi.n	800dd70 <_vfiprintf_r+0x4c>
 800dd94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd96:	f7ff f8bb 	bl	800cf10 <__retarget_lock_release_recursive>
 800dd9a:	e7e9      	b.n	800dd70 <_vfiprintf_r+0x4c>
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	9309      	str	r3, [sp, #36]	; 0x24
 800dda0:	2320      	movs	r3, #32
 800dda2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dda6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ddaa:	2330      	movs	r3, #48	; 0x30
 800ddac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800df70 <_vfiprintf_r+0x24c>
 800ddb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ddb4:	f04f 0901 	mov.w	r9, #1
 800ddb8:	4623      	mov	r3, r4
 800ddba:	469a      	mov	sl, r3
 800ddbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddc0:	b10a      	cbz	r2, 800ddc6 <_vfiprintf_r+0xa2>
 800ddc2:	2a25      	cmp	r2, #37	; 0x25
 800ddc4:	d1f9      	bne.n	800ddba <_vfiprintf_r+0x96>
 800ddc6:	ebba 0b04 	subs.w	fp, sl, r4
 800ddca:	d00b      	beq.n	800dde4 <_vfiprintf_r+0xc0>
 800ddcc:	465b      	mov	r3, fp
 800ddce:	4622      	mov	r2, r4
 800ddd0:	4629      	mov	r1, r5
 800ddd2:	4630      	mov	r0, r6
 800ddd4:	f7ff ff93 	bl	800dcfe <__sfputs_r>
 800ddd8:	3001      	adds	r0, #1
 800ddda:	f000 80aa 	beq.w	800df32 <_vfiprintf_r+0x20e>
 800ddde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dde0:	445a      	add	r2, fp
 800dde2:	9209      	str	r2, [sp, #36]	; 0x24
 800dde4:	f89a 3000 	ldrb.w	r3, [sl]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	f000 80a2 	beq.w	800df32 <_vfiprintf_r+0x20e>
 800ddee:	2300      	movs	r3, #0
 800ddf0:	f04f 32ff 	mov.w	r2, #4294967295
 800ddf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddf8:	f10a 0a01 	add.w	sl, sl, #1
 800ddfc:	9304      	str	r3, [sp, #16]
 800ddfe:	9307      	str	r3, [sp, #28]
 800de00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de04:	931a      	str	r3, [sp, #104]	; 0x68
 800de06:	4654      	mov	r4, sl
 800de08:	2205      	movs	r2, #5
 800de0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de0e:	4858      	ldr	r0, [pc, #352]	; (800df70 <_vfiprintf_r+0x24c>)
 800de10:	f7f2 f9e6 	bl	80001e0 <memchr>
 800de14:	9a04      	ldr	r2, [sp, #16]
 800de16:	b9d8      	cbnz	r0, 800de50 <_vfiprintf_r+0x12c>
 800de18:	06d1      	lsls	r1, r2, #27
 800de1a:	bf44      	itt	mi
 800de1c:	2320      	movmi	r3, #32
 800de1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de22:	0713      	lsls	r3, r2, #28
 800de24:	bf44      	itt	mi
 800de26:	232b      	movmi	r3, #43	; 0x2b
 800de28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de2c:	f89a 3000 	ldrb.w	r3, [sl]
 800de30:	2b2a      	cmp	r3, #42	; 0x2a
 800de32:	d015      	beq.n	800de60 <_vfiprintf_r+0x13c>
 800de34:	9a07      	ldr	r2, [sp, #28]
 800de36:	4654      	mov	r4, sl
 800de38:	2000      	movs	r0, #0
 800de3a:	f04f 0c0a 	mov.w	ip, #10
 800de3e:	4621      	mov	r1, r4
 800de40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de44:	3b30      	subs	r3, #48	; 0x30
 800de46:	2b09      	cmp	r3, #9
 800de48:	d94e      	bls.n	800dee8 <_vfiprintf_r+0x1c4>
 800de4a:	b1b0      	cbz	r0, 800de7a <_vfiprintf_r+0x156>
 800de4c:	9207      	str	r2, [sp, #28]
 800de4e:	e014      	b.n	800de7a <_vfiprintf_r+0x156>
 800de50:	eba0 0308 	sub.w	r3, r0, r8
 800de54:	fa09 f303 	lsl.w	r3, r9, r3
 800de58:	4313      	orrs	r3, r2
 800de5a:	9304      	str	r3, [sp, #16]
 800de5c:	46a2      	mov	sl, r4
 800de5e:	e7d2      	b.n	800de06 <_vfiprintf_r+0xe2>
 800de60:	9b03      	ldr	r3, [sp, #12]
 800de62:	1d19      	adds	r1, r3, #4
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	9103      	str	r1, [sp, #12]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	bfbb      	ittet	lt
 800de6c:	425b      	neglt	r3, r3
 800de6e:	f042 0202 	orrlt.w	r2, r2, #2
 800de72:	9307      	strge	r3, [sp, #28]
 800de74:	9307      	strlt	r3, [sp, #28]
 800de76:	bfb8      	it	lt
 800de78:	9204      	strlt	r2, [sp, #16]
 800de7a:	7823      	ldrb	r3, [r4, #0]
 800de7c:	2b2e      	cmp	r3, #46	; 0x2e
 800de7e:	d10c      	bne.n	800de9a <_vfiprintf_r+0x176>
 800de80:	7863      	ldrb	r3, [r4, #1]
 800de82:	2b2a      	cmp	r3, #42	; 0x2a
 800de84:	d135      	bne.n	800def2 <_vfiprintf_r+0x1ce>
 800de86:	9b03      	ldr	r3, [sp, #12]
 800de88:	1d1a      	adds	r2, r3, #4
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	9203      	str	r2, [sp, #12]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	bfb8      	it	lt
 800de92:	f04f 33ff 	movlt.w	r3, #4294967295
 800de96:	3402      	adds	r4, #2
 800de98:	9305      	str	r3, [sp, #20]
 800de9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800df80 <_vfiprintf_r+0x25c>
 800de9e:	7821      	ldrb	r1, [r4, #0]
 800dea0:	2203      	movs	r2, #3
 800dea2:	4650      	mov	r0, sl
 800dea4:	f7f2 f99c 	bl	80001e0 <memchr>
 800dea8:	b140      	cbz	r0, 800debc <_vfiprintf_r+0x198>
 800deaa:	2340      	movs	r3, #64	; 0x40
 800deac:	eba0 000a 	sub.w	r0, r0, sl
 800deb0:	fa03 f000 	lsl.w	r0, r3, r0
 800deb4:	9b04      	ldr	r3, [sp, #16]
 800deb6:	4303      	orrs	r3, r0
 800deb8:	3401      	adds	r4, #1
 800deba:	9304      	str	r3, [sp, #16]
 800debc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dec0:	482c      	ldr	r0, [pc, #176]	; (800df74 <_vfiprintf_r+0x250>)
 800dec2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dec6:	2206      	movs	r2, #6
 800dec8:	f7f2 f98a 	bl	80001e0 <memchr>
 800decc:	2800      	cmp	r0, #0
 800dece:	d03f      	beq.n	800df50 <_vfiprintf_r+0x22c>
 800ded0:	4b29      	ldr	r3, [pc, #164]	; (800df78 <_vfiprintf_r+0x254>)
 800ded2:	bb1b      	cbnz	r3, 800df1c <_vfiprintf_r+0x1f8>
 800ded4:	9b03      	ldr	r3, [sp, #12]
 800ded6:	3307      	adds	r3, #7
 800ded8:	f023 0307 	bic.w	r3, r3, #7
 800dedc:	3308      	adds	r3, #8
 800dede:	9303      	str	r3, [sp, #12]
 800dee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dee2:	443b      	add	r3, r7
 800dee4:	9309      	str	r3, [sp, #36]	; 0x24
 800dee6:	e767      	b.n	800ddb8 <_vfiprintf_r+0x94>
 800dee8:	fb0c 3202 	mla	r2, ip, r2, r3
 800deec:	460c      	mov	r4, r1
 800deee:	2001      	movs	r0, #1
 800def0:	e7a5      	b.n	800de3e <_vfiprintf_r+0x11a>
 800def2:	2300      	movs	r3, #0
 800def4:	3401      	adds	r4, #1
 800def6:	9305      	str	r3, [sp, #20]
 800def8:	4619      	mov	r1, r3
 800defa:	f04f 0c0a 	mov.w	ip, #10
 800defe:	4620      	mov	r0, r4
 800df00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df04:	3a30      	subs	r2, #48	; 0x30
 800df06:	2a09      	cmp	r2, #9
 800df08:	d903      	bls.n	800df12 <_vfiprintf_r+0x1ee>
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d0c5      	beq.n	800de9a <_vfiprintf_r+0x176>
 800df0e:	9105      	str	r1, [sp, #20]
 800df10:	e7c3      	b.n	800de9a <_vfiprintf_r+0x176>
 800df12:	fb0c 2101 	mla	r1, ip, r1, r2
 800df16:	4604      	mov	r4, r0
 800df18:	2301      	movs	r3, #1
 800df1a:	e7f0      	b.n	800defe <_vfiprintf_r+0x1da>
 800df1c:	ab03      	add	r3, sp, #12
 800df1e:	9300      	str	r3, [sp, #0]
 800df20:	462a      	mov	r2, r5
 800df22:	4b16      	ldr	r3, [pc, #88]	; (800df7c <_vfiprintf_r+0x258>)
 800df24:	a904      	add	r1, sp, #16
 800df26:	4630      	mov	r0, r6
 800df28:	f3af 8000 	nop.w
 800df2c:	4607      	mov	r7, r0
 800df2e:	1c78      	adds	r0, r7, #1
 800df30:	d1d6      	bne.n	800dee0 <_vfiprintf_r+0x1bc>
 800df32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df34:	07d9      	lsls	r1, r3, #31
 800df36:	d405      	bmi.n	800df44 <_vfiprintf_r+0x220>
 800df38:	89ab      	ldrh	r3, [r5, #12]
 800df3a:	059a      	lsls	r2, r3, #22
 800df3c:	d402      	bmi.n	800df44 <_vfiprintf_r+0x220>
 800df3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df40:	f7fe ffe6 	bl	800cf10 <__retarget_lock_release_recursive>
 800df44:	89ab      	ldrh	r3, [r5, #12]
 800df46:	065b      	lsls	r3, r3, #25
 800df48:	f53f af12 	bmi.w	800dd70 <_vfiprintf_r+0x4c>
 800df4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df4e:	e711      	b.n	800dd74 <_vfiprintf_r+0x50>
 800df50:	ab03      	add	r3, sp, #12
 800df52:	9300      	str	r3, [sp, #0]
 800df54:	462a      	mov	r2, r5
 800df56:	4b09      	ldr	r3, [pc, #36]	; (800df7c <_vfiprintf_r+0x258>)
 800df58:	a904      	add	r1, sp, #16
 800df5a:	4630      	mov	r0, r6
 800df5c:	f000 f880 	bl	800e060 <_printf_i>
 800df60:	e7e4      	b.n	800df2c <_vfiprintf_r+0x208>
 800df62:	bf00      	nop
 800df64:	0800ed98 	.word	0x0800ed98
 800df68:	0800edb8 	.word	0x0800edb8
 800df6c:	0800ed78 	.word	0x0800ed78
 800df70:	0800ee8c 	.word	0x0800ee8c
 800df74:	0800ee96 	.word	0x0800ee96
 800df78:	00000000 	.word	0x00000000
 800df7c:	0800dcff 	.word	0x0800dcff
 800df80:	0800ee92 	.word	0x0800ee92

0800df84 <_printf_common>:
 800df84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df88:	4616      	mov	r6, r2
 800df8a:	4699      	mov	r9, r3
 800df8c:	688a      	ldr	r2, [r1, #8]
 800df8e:	690b      	ldr	r3, [r1, #16]
 800df90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800df94:	4293      	cmp	r3, r2
 800df96:	bfb8      	it	lt
 800df98:	4613      	movlt	r3, r2
 800df9a:	6033      	str	r3, [r6, #0]
 800df9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dfa0:	4607      	mov	r7, r0
 800dfa2:	460c      	mov	r4, r1
 800dfa4:	b10a      	cbz	r2, 800dfaa <_printf_common+0x26>
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	6033      	str	r3, [r6, #0]
 800dfaa:	6823      	ldr	r3, [r4, #0]
 800dfac:	0699      	lsls	r1, r3, #26
 800dfae:	bf42      	ittt	mi
 800dfb0:	6833      	ldrmi	r3, [r6, #0]
 800dfb2:	3302      	addmi	r3, #2
 800dfb4:	6033      	strmi	r3, [r6, #0]
 800dfb6:	6825      	ldr	r5, [r4, #0]
 800dfb8:	f015 0506 	ands.w	r5, r5, #6
 800dfbc:	d106      	bne.n	800dfcc <_printf_common+0x48>
 800dfbe:	f104 0a19 	add.w	sl, r4, #25
 800dfc2:	68e3      	ldr	r3, [r4, #12]
 800dfc4:	6832      	ldr	r2, [r6, #0]
 800dfc6:	1a9b      	subs	r3, r3, r2
 800dfc8:	42ab      	cmp	r3, r5
 800dfca:	dc26      	bgt.n	800e01a <_printf_common+0x96>
 800dfcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dfd0:	1e13      	subs	r3, r2, #0
 800dfd2:	6822      	ldr	r2, [r4, #0]
 800dfd4:	bf18      	it	ne
 800dfd6:	2301      	movne	r3, #1
 800dfd8:	0692      	lsls	r2, r2, #26
 800dfda:	d42b      	bmi.n	800e034 <_printf_common+0xb0>
 800dfdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dfe0:	4649      	mov	r1, r9
 800dfe2:	4638      	mov	r0, r7
 800dfe4:	47c0      	blx	r8
 800dfe6:	3001      	adds	r0, #1
 800dfe8:	d01e      	beq.n	800e028 <_printf_common+0xa4>
 800dfea:	6823      	ldr	r3, [r4, #0]
 800dfec:	68e5      	ldr	r5, [r4, #12]
 800dfee:	6832      	ldr	r2, [r6, #0]
 800dff0:	f003 0306 	and.w	r3, r3, #6
 800dff4:	2b04      	cmp	r3, #4
 800dff6:	bf08      	it	eq
 800dff8:	1aad      	subeq	r5, r5, r2
 800dffa:	68a3      	ldr	r3, [r4, #8]
 800dffc:	6922      	ldr	r2, [r4, #16]
 800dffe:	bf0c      	ite	eq
 800e000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e004:	2500      	movne	r5, #0
 800e006:	4293      	cmp	r3, r2
 800e008:	bfc4      	itt	gt
 800e00a:	1a9b      	subgt	r3, r3, r2
 800e00c:	18ed      	addgt	r5, r5, r3
 800e00e:	2600      	movs	r6, #0
 800e010:	341a      	adds	r4, #26
 800e012:	42b5      	cmp	r5, r6
 800e014:	d11a      	bne.n	800e04c <_printf_common+0xc8>
 800e016:	2000      	movs	r0, #0
 800e018:	e008      	b.n	800e02c <_printf_common+0xa8>
 800e01a:	2301      	movs	r3, #1
 800e01c:	4652      	mov	r2, sl
 800e01e:	4649      	mov	r1, r9
 800e020:	4638      	mov	r0, r7
 800e022:	47c0      	blx	r8
 800e024:	3001      	adds	r0, #1
 800e026:	d103      	bne.n	800e030 <_printf_common+0xac>
 800e028:	f04f 30ff 	mov.w	r0, #4294967295
 800e02c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e030:	3501      	adds	r5, #1
 800e032:	e7c6      	b.n	800dfc2 <_printf_common+0x3e>
 800e034:	18e1      	adds	r1, r4, r3
 800e036:	1c5a      	adds	r2, r3, #1
 800e038:	2030      	movs	r0, #48	; 0x30
 800e03a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e03e:	4422      	add	r2, r4
 800e040:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e044:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e048:	3302      	adds	r3, #2
 800e04a:	e7c7      	b.n	800dfdc <_printf_common+0x58>
 800e04c:	2301      	movs	r3, #1
 800e04e:	4622      	mov	r2, r4
 800e050:	4649      	mov	r1, r9
 800e052:	4638      	mov	r0, r7
 800e054:	47c0      	blx	r8
 800e056:	3001      	adds	r0, #1
 800e058:	d0e6      	beq.n	800e028 <_printf_common+0xa4>
 800e05a:	3601      	adds	r6, #1
 800e05c:	e7d9      	b.n	800e012 <_printf_common+0x8e>
	...

0800e060 <_printf_i>:
 800e060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e064:	7e0f      	ldrb	r7, [r1, #24]
 800e066:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e068:	2f78      	cmp	r7, #120	; 0x78
 800e06a:	4691      	mov	r9, r2
 800e06c:	4680      	mov	r8, r0
 800e06e:	460c      	mov	r4, r1
 800e070:	469a      	mov	sl, r3
 800e072:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e076:	d807      	bhi.n	800e088 <_printf_i+0x28>
 800e078:	2f62      	cmp	r7, #98	; 0x62
 800e07a:	d80a      	bhi.n	800e092 <_printf_i+0x32>
 800e07c:	2f00      	cmp	r7, #0
 800e07e:	f000 80d8 	beq.w	800e232 <_printf_i+0x1d2>
 800e082:	2f58      	cmp	r7, #88	; 0x58
 800e084:	f000 80a3 	beq.w	800e1ce <_printf_i+0x16e>
 800e088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e08c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e090:	e03a      	b.n	800e108 <_printf_i+0xa8>
 800e092:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e096:	2b15      	cmp	r3, #21
 800e098:	d8f6      	bhi.n	800e088 <_printf_i+0x28>
 800e09a:	a101      	add	r1, pc, #4	; (adr r1, 800e0a0 <_printf_i+0x40>)
 800e09c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e0a0:	0800e0f9 	.word	0x0800e0f9
 800e0a4:	0800e10d 	.word	0x0800e10d
 800e0a8:	0800e089 	.word	0x0800e089
 800e0ac:	0800e089 	.word	0x0800e089
 800e0b0:	0800e089 	.word	0x0800e089
 800e0b4:	0800e089 	.word	0x0800e089
 800e0b8:	0800e10d 	.word	0x0800e10d
 800e0bc:	0800e089 	.word	0x0800e089
 800e0c0:	0800e089 	.word	0x0800e089
 800e0c4:	0800e089 	.word	0x0800e089
 800e0c8:	0800e089 	.word	0x0800e089
 800e0cc:	0800e219 	.word	0x0800e219
 800e0d0:	0800e13d 	.word	0x0800e13d
 800e0d4:	0800e1fb 	.word	0x0800e1fb
 800e0d8:	0800e089 	.word	0x0800e089
 800e0dc:	0800e089 	.word	0x0800e089
 800e0e0:	0800e23b 	.word	0x0800e23b
 800e0e4:	0800e089 	.word	0x0800e089
 800e0e8:	0800e13d 	.word	0x0800e13d
 800e0ec:	0800e089 	.word	0x0800e089
 800e0f0:	0800e089 	.word	0x0800e089
 800e0f4:	0800e203 	.word	0x0800e203
 800e0f8:	682b      	ldr	r3, [r5, #0]
 800e0fa:	1d1a      	adds	r2, r3, #4
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	602a      	str	r2, [r5, #0]
 800e100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e104:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e108:	2301      	movs	r3, #1
 800e10a:	e0a3      	b.n	800e254 <_printf_i+0x1f4>
 800e10c:	6820      	ldr	r0, [r4, #0]
 800e10e:	6829      	ldr	r1, [r5, #0]
 800e110:	0606      	lsls	r6, r0, #24
 800e112:	f101 0304 	add.w	r3, r1, #4
 800e116:	d50a      	bpl.n	800e12e <_printf_i+0xce>
 800e118:	680e      	ldr	r6, [r1, #0]
 800e11a:	602b      	str	r3, [r5, #0]
 800e11c:	2e00      	cmp	r6, #0
 800e11e:	da03      	bge.n	800e128 <_printf_i+0xc8>
 800e120:	232d      	movs	r3, #45	; 0x2d
 800e122:	4276      	negs	r6, r6
 800e124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e128:	485e      	ldr	r0, [pc, #376]	; (800e2a4 <_printf_i+0x244>)
 800e12a:	230a      	movs	r3, #10
 800e12c:	e019      	b.n	800e162 <_printf_i+0x102>
 800e12e:	680e      	ldr	r6, [r1, #0]
 800e130:	602b      	str	r3, [r5, #0]
 800e132:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e136:	bf18      	it	ne
 800e138:	b236      	sxthne	r6, r6
 800e13a:	e7ef      	b.n	800e11c <_printf_i+0xbc>
 800e13c:	682b      	ldr	r3, [r5, #0]
 800e13e:	6820      	ldr	r0, [r4, #0]
 800e140:	1d19      	adds	r1, r3, #4
 800e142:	6029      	str	r1, [r5, #0]
 800e144:	0601      	lsls	r1, r0, #24
 800e146:	d501      	bpl.n	800e14c <_printf_i+0xec>
 800e148:	681e      	ldr	r6, [r3, #0]
 800e14a:	e002      	b.n	800e152 <_printf_i+0xf2>
 800e14c:	0646      	lsls	r6, r0, #25
 800e14e:	d5fb      	bpl.n	800e148 <_printf_i+0xe8>
 800e150:	881e      	ldrh	r6, [r3, #0]
 800e152:	4854      	ldr	r0, [pc, #336]	; (800e2a4 <_printf_i+0x244>)
 800e154:	2f6f      	cmp	r7, #111	; 0x6f
 800e156:	bf0c      	ite	eq
 800e158:	2308      	moveq	r3, #8
 800e15a:	230a      	movne	r3, #10
 800e15c:	2100      	movs	r1, #0
 800e15e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e162:	6865      	ldr	r5, [r4, #4]
 800e164:	60a5      	str	r5, [r4, #8]
 800e166:	2d00      	cmp	r5, #0
 800e168:	bfa2      	ittt	ge
 800e16a:	6821      	ldrge	r1, [r4, #0]
 800e16c:	f021 0104 	bicge.w	r1, r1, #4
 800e170:	6021      	strge	r1, [r4, #0]
 800e172:	b90e      	cbnz	r6, 800e178 <_printf_i+0x118>
 800e174:	2d00      	cmp	r5, #0
 800e176:	d04d      	beq.n	800e214 <_printf_i+0x1b4>
 800e178:	4615      	mov	r5, r2
 800e17a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e17e:	fb03 6711 	mls	r7, r3, r1, r6
 800e182:	5dc7      	ldrb	r7, [r0, r7]
 800e184:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e188:	4637      	mov	r7, r6
 800e18a:	42bb      	cmp	r3, r7
 800e18c:	460e      	mov	r6, r1
 800e18e:	d9f4      	bls.n	800e17a <_printf_i+0x11a>
 800e190:	2b08      	cmp	r3, #8
 800e192:	d10b      	bne.n	800e1ac <_printf_i+0x14c>
 800e194:	6823      	ldr	r3, [r4, #0]
 800e196:	07de      	lsls	r6, r3, #31
 800e198:	d508      	bpl.n	800e1ac <_printf_i+0x14c>
 800e19a:	6923      	ldr	r3, [r4, #16]
 800e19c:	6861      	ldr	r1, [r4, #4]
 800e19e:	4299      	cmp	r1, r3
 800e1a0:	bfde      	ittt	le
 800e1a2:	2330      	movle	r3, #48	; 0x30
 800e1a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e1a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e1ac:	1b52      	subs	r2, r2, r5
 800e1ae:	6122      	str	r2, [r4, #16]
 800e1b0:	f8cd a000 	str.w	sl, [sp]
 800e1b4:	464b      	mov	r3, r9
 800e1b6:	aa03      	add	r2, sp, #12
 800e1b8:	4621      	mov	r1, r4
 800e1ba:	4640      	mov	r0, r8
 800e1bc:	f7ff fee2 	bl	800df84 <_printf_common>
 800e1c0:	3001      	adds	r0, #1
 800e1c2:	d14c      	bne.n	800e25e <_printf_i+0x1fe>
 800e1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e1c8:	b004      	add	sp, #16
 800e1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1ce:	4835      	ldr	r0, [pc, #212]	; (800e2a4 <_printf_i+0x244>)
 800e1d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e1d4:	6829      	ldr	r1, [r5, #0]
 800e1d6:	6823      	ldr	r3, [r4, #0]
 800e1d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800e1dc:	6029      	str	r1, [r5, #0]
 800e1de:	061d      	lsls	r5, r3, #24
 800e1e0:	d514      	bpl.n	800e20c <_printf_i+0x1ac>
 800e1e2:	07df      	lsls	r7, r3, #31
 800e1e4:	bf44      	itt	mi
 800e1e6:	f043 0320 	orrmi.w	r3, r3, #32
 800e1ea:	6023      	strmi	r3, [r4, #0]
 800e1ec:	b91e      	cbnz	r6, 800e1f6 <_printf_i+0x196>
 800e1ee:	6823      	ldr	r3, [r4, #0]
 800e1f0:	f023 0320 	bic.w	r3, r3, #32
 800e1f4:	6023      	str	r3, [r4, #0]
 800e1f6:	2310      	movs	r3, #16
 800e1f8:	e7b0      	b.n	800e15c <_printf_i+0xfc>
 800e1fa:	6823      	ldr	r3, [r4, #0]
 800e1fc:	f043 0320 	orr.w	r3, r3, #32
 800e200:	6023      	str	r3, [r4, #0]
 800e202:	2378      	movs	r3, #120	; 0x78
 800e204:	4828      	ldr	r0, [pc, #160]	; (800e2a8 <_printf_i+0x248>)
 800e206:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e20a:	e7e3      	b.n	800e1d4 <_printf_i+0x174>
 800e20c:	0659      	lsls	r1, r3, #25
 800e20e:	bf48      	it	mi
 800e210:	b2b6      	uxthmi	r6, r6
 800e212:	e7e6      	b.n	800e1e2 <_printf_i+0x182>
 800e214:	4615      	mov	r5, r2
 800e216:	e7bb      	b.n	800e190 <_printf_i+0x130>
 800e218:	682b      	ldr	r3, [r5, #0]
 800e21a:	6826      	ldr	r6, [r4, #0]
 800e21c:	6961      	ldr	r1, [r4, #20]
 800e21e:	1d18      	adds	r0, r3, #4
 800e220:	6028      	str	r0, [r5, #0]
 800e222:	0635      	lsls	r5, r6, #24
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	d501      	bpl.n	800e22c <_printf_i+0x1cc>
 800e228:	6019      	str	r1, [r3, #0]
 800e22a:	e002      	b.n	800e232 <_printf_i+0x1d2>
 800e22c:	0670      	lsls	r0, r6, #25
 800e22e:	d5fb      	bpl.n	800e228 <_printf_i+0x1c8>
 800e230:	8019      	strh	r1, [r3, #0]
 800e232:	2300      	movs	r3, #0
 800e234:	6123      	str	r3, [r4, #16]
 800e236:	4615      	mov	r5, r2
 800e238:	e7ba      	b.n	800e1b0 <_printf_i+0x150>
 800e23a:	682b      	ldr	r3, [r5, #0]
 800e23c:	1d1a      	adds	r2, r3, #4
 800e23e:	602a      	str	r2, [r5, #0]
 800e240:	681d      	ldr	r5, [r3, #0]
 800e242:	6862      	ldr	r2, [r4, #4]
 800e244:	2100      	movs	r1, #0
 800e246:	4628      	mov	r0, r5
 800e248:	f7f1 ffca 	bl	80001e0 <memchr>
 800e24c:	b108      	cbz	r0, 800e252 <_printf_i+0x1f2>
 800e24e:	1b40      	subs	r0, r0, r5
 800e250:	6060      	str	r0, [r4, #4]
 800e252:	6863      	ldr	r3, [r4, #4]
 800e254:	6123      	str	r3, [r4, #16]
 800e256:	2300      	movs	r3, #0
 800e258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e25c:	e7a8      	b.n	800e1b0 <_printf_i+0x150>
 800e25e:	6923      	ldr	r3, [r4, #16]
 800e260:	462a      	mov	r2, r5
 800e262:	4649      	mov	r1, r9
 800e264:	4640      	mov	r0, r8
 800e266:	47d0      	blx	sl
 800e268:	3001      	adds	r0, #1
 800e26a:	d0ab      	beq.n	800e1c4 <_printf_i+0x164>
 800e26c:	6823      	ldr	r3, [r4, #0]
 800e26e:	079b      	lsls	r3, r3, #30
 800e270:	d413      	bmi.n	800e29a <_printf_i+0x23a>
 800e272:	68e0      	ldr	r0, [r4, #12]
 800e274:	9b03      	ldr	r3, [sp, #12]
 800e276:	4298      	cmp	r0, r3
 800e278:	bfb8      	it	lt
 800e27a:	4618      	movlt	r0, r3
 800e27c:	e7a4      	b.n	800e1c8 <_printf_i+0x168>
 800e27e:	2301      	movs	r3, #1
 800e280:	4632      	mov	r2, r6
 800e282:	4649      	mov	r1, r9
 800e284:	4640      	mov	r0, r8
 800e286:	47d0      	blx	sl
 800e288:	3001      	adds	r0, #1
 800e28a:	d09b      	beq.n	800e1c4 <_printf_i+0x164>
 800e28c:	3501      	adds	r5, #1
 800e28e:	68e3      	ldr	r3, [r4, #12]
 800e290:	9903      	ldr	r1, [sp, #12]
 800e292:	1a5b      	subs	r3, r3, r1
 800e294:	42ab      	cmp	r3, r5
 800e296:	dcf2      	bgt.n	800e27e <_printf_i+0x21e>
 800e298:	e7eb      	b.n	800e272 <_printf_i+0x212>
 800e29a:	2500      	movs	r5, #0
 800e29c:	f104 0619 	add.w	r6, r4, #25
 800e2a0:	e7f5      	b.n	800e28e <_printf_i+0x22e>
 800e2a2:	bf00      	nop
 800e2a4:	0800ee9d 	.word	0x0800ee9d
 800e2a8:	0800eeae 	.word	0x0800eeae

0800e2ac <_read_r>:
 800e2ac:	b538      	push	{r3, r4, r5, lr}
 800e2ae:	4d07      	ldr	r5, [pc, #28]	; (800e2cc <_read_r+0x20>)
 800e2b0:	4604      	mov	r4, r0
 800e2b2:	4608      	mov	r0, r1
 800e2b4:	4611      	mov	r1, r2
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	602a      	str	r2, [r5, #0]
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	f7f3 fa76 	bl	80017ac <_read>
 800e2c0:	1c43      	adds	r3, r0, #1
 800e2c2:	d102      	bne.n	800e2ca <_read_r+0x1e>
 800e2c4:	682b      	ldr	r3, [r5, #0]
 800e2c6:	b103      	cbz	r3, 800e2ca <_read_r+0x1e>
 800e2c8:	6023      	str	r3, [r4, #0]
 800e2ca:	bd38      	pop	{r3, r4, r5, pc}
 800e2cc:	200033bc 	.word	0x200033bc

0800e2d0 <abort>:
 800e2d0:	b508      	push	{r3, lr}
 800e2d2:	2006      	movs	r0, #6
 800e2d4:	f000 f898 	bl	800e408 <raise>
 800e2d8:	2001      	movs	r0, #1
 800e2da:	f7f3 fa5d 	bl	8001798 <_exit>
	...

0800e2e0 <_fstat_r>:
 800e2e0:	b538      	push	{r3, r4, r5, lr}
 800e2e2:	4d07      	ldr	r5, [pc, #28]	; (800e300 <_fstat_r+0x20>)
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	4608      	mov	r0, r1
 800e2ea:	4611      	mov	r1, r2
 800e2ec:	602b      	str	r3, [r5, #0]
 800e2ee:	f7f3 faa2 	bl	8001836 <_fstat>
 800e2f2:	1c43      	adds	r3, r0, #1
 800e2f4:	d102      	bne.n	800e2fc <_fstat_r+0x1c>
 800e2f6:	682b      	ldr	r3, [r5, #0]
 800e2f8:	b103      	cbz	r3, 800e2fc <_fstat_r+0x1c>
 800e2fa:	6023      	str	r3, [r4, #0]
 800e2fc:	bd38      	pop	{r3, r4, r5, pc}
 800e2fe:	bf00      	nop
 800e300:	200033bc 	.word	0x200033bc

0800e304 <_isatty_r>:
 800e304:	b538      	push	{r3, r4, r5, lr}
 800e306:	4d06      	ldr	r5, [pc, #24]	; (800e320 <_isatty_r+0x1c>)
 800e308:	2300      	movs	r3, #0
 800e30a:	4604      	mov	r4, r0
 800e30c:	4608      	mov	r0, r1
 800e30e:	602b      	str	r3, [r5, #0]
 800e310:	f7f3 faa1 	bl	8001856 <_isatty>
 800e314:	1c43      	adds	r3, r0, #1
 800e316:	d102      	bne.n	800e31e <_isatty_r+0x1a>
 800e318:	682b      	ldr	r3, [r5, #0]
 800e31a:	b103      	cbz	r3, 800e31e <_isatty_r+0x1a>
 800e31c:	6023      	str	r3, [r4, #0]
 800e31e:	bd38      	pop	{r3, r4, r5, pc}
 800e320:	200033bc 	.word	0x200033bc

0800e324 <memmove>:
 800e324:	4288      	cmp	r0, r1
 800e326:	b510      	push	{r4, lr}
 800e328:	eb01 0402 	add.w	r4, r1, r2
 800e32c:	d902      	bls.n	800e334 <memmove+0x10>
 800e32e:	4284      	cmp	r4, r0
 800e330:	4623      	mov	r3, r4
 800e332:	d807      	bhi.n	800e344 <memmove+0x20>
 800e334:	1e43      	subs	r3, r0, #1
 800e336:	42a1      	cmp	r1, r4
 800e338:	d008      	beq.n	800e34c <memmove+0x28>
 800e33a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e33e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e342:	e7f8      	b.n	800e336 <memmove+0x12>
 800e344:	4402      	add	r2, r0
 800e346:	4601      	mov	r1, r0
 800e348:	428a      	cmp	r2, r1
 800e34a:	d100      	bne.n	800e34e <memmove+0x2a>
 800e34c:	bd10      	pop	{r4, pc}
 800e34e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e352:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e356:	e7f7      	b.n	800e348 <memmove+0x24>

0800e358 <_realloc_r>:
 800e358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e35c:	4680      	mov	r8, r0
 800e35e:	4614      	mov	r4, r2
 800e360:	460e      	mov	r6, r1
 800e362:	b921      	cbnz	r1, 800e36e <_realloc_r+0x16>
 800e364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e368:	4611      	mov	r1, r2
 800e36a:	f7fe be75 	b.w	800d058 <_malloc_r>
 800e36e:	b92a      	cbnz	r2, 800e37c <_realloc_r+0x24>
 800e370:	f7fe fe06 	bl	800cf80 <_free_r>
 800e374:	4625      	mov	r5, r4
 800e376:	4628      	mov	r0, r5
 800e378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e37c:	f000 f860 	bl	800e440 <_malloc_usable_size_r>
 800e380:	4284      	cmp	r4, r0
 800e382:	4607      	mov	r7, r0
 800e384:	d802      	bhi.n	800e38c <_realloc_r+0x34>
 800e386:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e38a:	d812      	bhi.n	800e3b2 <_realloc_r+0x5a>
 800e38c:	4621      	mov	r1, r4
 800e38e:	4640      	mov	r0, r8
 800e390:	f7fe fe62 	bl	800d058 <_malloc_r>
 800e394:	4605      	mov	r5, r0
 800e396:	2800      	cmp	r0, #0
 800e398:	d0ed      	beq.n	800e376 <_realloc_r+0x1e>
 800e39a:	42bc      	cmp	r4, r7
 800e39c:	4622      	mov	r2, r4
 800e39e:	4631      	mov	r1, r6
 800e3a0:	bf28      	it	cs
 800e3a2:	463a      	movcs	r2, r7
 800e3a4:	f7fe fdd6 	bl	800cf54 <memcpy>
 800e3a8:	4631      	mov	r1, r6
 800e3aa:	4640      	mov	r0, r8
 800e3ac:	f7fe fde8 	bl	800cf80 <_free_r>
 800e3b0:	e7e1      	b.n	800e376 <_realloc_r+0x1e>
 800e3b2:	4635      	mov	r5, r6
 800e3b4:	e7df      	b.n	800e376 <_realloc_r+0x1e>

0800e3b6 <_raise_r>:
 800e3b6:	291f      	cmp	r1, #31
 800e3b8:	b538      	push	{r3, r4, r5, lr}
 800e3ba:	4604      	mov	r4, r0
 800e3bc:	460d      	mov	r5, r1
 800e3be:	d904      	bls.n	800e3ca <_raise_r+0x14>
 800e3c0:	2316      	movs	r3, #22
 800e3c2:	6003      	str	r3, [r0, #0]
 800e3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3c8:	bd38      	pop	{r3, r4, r5, pc}
 800e3ca:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e3cc:	b112      	cbz	r2, 800e3d4 <_raise_r+0x1e>
 800e3ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e3d2:	b94b      	cbnz	r3, 800e3e8 <_raise_r+0x32>
 800e3d4:	4620      	mov	r0, r4
 800e3d6:	f000 f831 	bl	800e43c <_getpid_r>
 800e3da:	462a      	mov	r2, r5
 800e3dc:	4601      	mov	r1, r0
 800e3de:	4620      	mov	r0, r4
 800e3e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e3e4:	f000 b818 	b.w	800e418 <_kill_r>
 800e3e8:	2b01      	cmp	r3, #1
 800e3ea:	d00a      	beq.n	800e402 <_raise_r+0x4c>
 800e3ec:	1c59      	adds	r1, r3, #1
 800e3ee:	d103      	bne.n	800e3f8 <_raise_r+0x42>
 800e3f0:	2316      	movs	r3, #22
 800e3f2:	6003      	str	r3, [r0, #0]
 800e3f4:	2001      	movs	r0, #1
 800e3f6:	e7e7      	b.n	800e3c8 <_raise_r+0x12>
 800e3f8:	2400      	movs	r4, #0
 800e3fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e3fe:	4628      	mov	r0, r5
 800e400:	4798      	blx	r3
 800e402:	2000      	movs	r0, #0
 800e404:	e7e0      	b.n	800e3c8 <_raise_r+0x12>
	...

0800e408 <raise>:
 800e408:	4b02      	ldr	r3, [pc, #8]	; (800e414 <raise+0xc>)
 800e40a:	4601      	mov	r1, r0
 800e40c:	6818      	ldr	r0, [r3, #0]
 800e40e:	f7ff bfd2 	b.w	800e3b6 <_raise_r>
 800e412:	bf00      	nop
 800e414:	20000010 	.word	0x20000010

0800e418 <_kill_r>:
 800e418:	b538      	push	{r3, r4, r5, lr}
 800e41a:	4d07      	ldr	r5, [pc, #28]	; (800e438 <_kill_r+0x20>)
 800e41c:	2300      	movs	r3, #0
 800e41e:	4604      	mov	r4, r0
 800e420:	4608      	mov	r0, r1
 800e422:	4611      	mov	r1, r2
 800e424:	602b      	str	r3, [r5, #0]
 800e426:	f7f3 f9a7 	bl	8001778 <_kill>
 800e42a:	1c43      	adds	r3, r0, #1
 800e42c:	d102      	bne.n	800e434 <_kill_r+0x1c>
 800e42e:	682b      	ldr	r3, [r5, #0]
 800e430:	b103      	cbz	r3, 800e434 <_kill_r+0x1c>
 800e432:	6023      	str	r3, [r4, #0]
 800e434:	bd38      	pop	{r3, r4, r5, pc}
 800e436:	bf00      	nop
 800e438:	200033bc 	.word	0x200033bc

0800e43c <_getpid_r>:
 800e43c:	f7f3 b994 	b.w	8001768 <_getpid>

0800e440 <_malloc_usable_size_r>:
 800e440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e444:	1f18      	subs	r0, r3, #4
 800e446:	2b00      	cmp	r3, #0
 800e448:	bfbc      	itt	lt
 800e44a:	580b      	ldrlt	r3, [r1, r0]
 800e44c:	18c0      	addlt	r0, r0, r3
 800e44e:	4770      	bx	lr

0800e450 <_init>:
 800e450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e452:	bf00      	nop
 800e454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e456:	bc08      	pop	{r3}
 800e458:	469e      	mov	lr, r3
 800e45a:	4770      	bx	lr

0800e45c <_fini>:
 800e45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e45e:	bf00      	nop
 800e460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e462:	bc08      	pop	{r3}
 800e464:	469e      	mov	lr, r3
 800e466:	4770      	bx	lr
