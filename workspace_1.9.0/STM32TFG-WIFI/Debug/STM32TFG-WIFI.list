
STM32TFG-WIFI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dac0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c8  0800dc50  0800dc50  0001dc50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e518  0800e518  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800e518  0800e518  0001e518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e520  0800e520  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e520  0800e520  0001e520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e524  0800e524  0001e524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800e528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b3c  20000074  0800e59c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002bb0  0800e59c  00022bb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000320ab  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006151  00000000  00000000  0005214f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002920  00000000  00000000  000582a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000026b8  00000000  00000000  0005abc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ec4d  00000000  00000000  0005d278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030366  00000000  00000000  0008bec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d3d0  00000000  00000000  000bc22b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c95fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bc5c  00000000  00000000  001c964c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dc38 	.word	0x0800dc38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800dc38 	.word	0x0800dc38

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <S_SendInstructionStruct>:
	xSemaphoreGive(xSemaphoreSerialHandle);
	//Libero la memoria reservada por malloc
	free(pMov);
}

void S_SendInstructionStruct(MovementInstruction_t *pMov) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	//Transformo la instruccion a una cadena
	char *s_mov;
	I_MovementInstruction_toString(pMov, &s_mov);
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	4619      	mov	r1, r3
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f000 f918 	bl	80007c8 <I_MovementInstruction_toString>
	//Reservo el puerto serie
	while (xSemaphoreTake(xSemaphoreSerialHandle, portMAX_DELAY) != pdTRUE)
 8000598:	bf00      	nop
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <S_SendInstructionStruct+0x4c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f04f 31ff 	mov.w	r1, #4294967295
 80005a2:	4618      	mov	r0, r3
 80005a4:	f009 fd1c 	bl	8009fe0 <xQueueSemaphoreTake>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d1f5      	bne.n	800059a <S_SendInstructionStruct+0x16>
		;
	//Envio el struct por el puerto serie
	printf("%s\r\n", s_mov);
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	4619      	mov	r1, r3
 80005b2:	4808      	ldr	r0, [pc, #32]	; (80005d4 <S_SendInstructionStruct+0x50>)
 80005b4:	f00c f9dc 	bl	800c970 <iprintf>
	//Devuelvo el control del puerto serie
	xSemaphoreGive(xSemaphoreSerialHandle);
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <S_SendInstructionStruct+0x4c>)
 80005ba:	6818      	ldr	r0, [r3, #0]
 80005bc:	2300      	movs	r3, #0
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	f009 fa07 	bl	80099d4 <xQueueGenericSend>
}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200007e0 	.word	0x200007e0
 80005d4:	0800dc50 	.word	0x0800dc50

080005d8 <S_PrintOnSerial>:

void S_PrintOnSerial(const char *format, ...) {
 80005d8:	b40f      	push	{r0, r1, r2, r3}
 80005da:	b580      	push	{r7, lr}
 80005dc:	b082      	sub	sp, #8
 80005de:	af00      	add	r7, sp, #0
	while (xSemaphoreTake(xSemaphoreSerialHandle, portMAX_DELAY) != pdTRUE)
 80005e0:	bf00      	nop
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <S_PrintOnSerial+0x48>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f04f 31ff 	mov.w	r1, #4294967295
 80005ea:	4618      	mov	r0, r3
 80005ec:	f009 fcf8 	bl	8009fe0 <xQueueSemaphoreTake>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d1f5      	bne.n	80005e2 <S_PrintOnSerial+0xa>
		;
	va_list args;
	va_start(args, format);
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	607b      	str	r3, [r7, #4]
	printf(format, args);
 80005fc:	6879      	ldr	r1, [r7, #4]
 80005fe:	6938      	ldr	r0, [r7, #16]
 8000600:	f00c f9b6 	bl	800c970 <iprintf>
	va_end(args);
	// Give the semaphore to indicate that the transmission has finished
	xSemaphoreGiveFromISR(xSemaphoreSerialHandle, pdFALSE);
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <S_PrintOnSerial+0x48>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f009 fb7b 	bl	8009d06 <xQueueGiveFromISR>
	// Yield to higher priority task if necessary
	portYIELD_FROM_ISR(pdFALSE);
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800061a:	b004      	add	sp, #16
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	200007e0 	.word	0x200007e0

08000624 <__io_putchar>:
#include "SerialTask.h"

PUTCHAR_PROTOTYPE {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	// Transmits character ch over UART1 and UART4
	while (HAL_OK != HAL_UART_Transmit_IT(&huart1, (uint8_t*) &ch, 1)) {
 800062c:	bf00      	nop
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2201      	movs	r2, #1
 8000632:	4619      	mov	r1, r3
 8000634:	480a      	ldr	r0, [pc, #40]	; (8000660 <__io_putchar+0x3c>)
 8000636:	f005 fdd1 	bl	80061dc <HAL_UART_Transmit_IT>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1f6      	bne.n	800062e <__io_putchar+0xa>
		// Wait for transmit to finish
		;
	}
	while (HAL_OK != HAL_UART_Transmit_IT(&huart4, (uint8_t*) &ch, 1)) {
 8000640:	bf00      	nop
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2201      	movs	r2, #1
 8000646:	4619      	mov	r1, r3
 8000648:	4806      	ldr	r0, [pc, #24]	; (8000664 <__io_putchar+0x40>)
 800064a:	f005 fdc7 	bl	80061dc <HAL_UART_Transmit_IT>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d1f6      	bne.n	8000642 <__io_putchar+0x1e>
		// Wait for transmit to finish
		;
	}
	return ch;
 8000654:	687b      	ldr	r3, [r7, #4]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000248 	.word	0x20000248
 8000664:	200001c4 	.word	0x200001c4

08000668 <serialRxTask>:

int printTransmision = 0;

void serialRxTask(void *parg) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	uint8_t ins = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	73fb      	strb	r3, [r7, #15]
	uint8_t time = 20;
 8000674:	2314      	movs	r3, #20
 8000676:	737b      	strb	r3, [r7, #13]
	uint8_t i = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	73bb      	strb	r3, [r7, #14]

	printf("rxtask");
 800067c:	4817      	ldr	r0, [pc, #92]	; (80006dc <serialRxTask+0x74>)
 800067e:	f00c f977 	bl	800c970 <iprintf>

	while (i < 25) {
 8000682:	e023      	b.n	80006cc <serialRxTask+0x64>
		// Allocate memory for a MovementInstruction_t struct
		MovementInstruction_t *pMov = malloc(sizeof(MovementInstruction_t));
 8000684:	2002      	movs	r0, #2
 8000686:	f00c f85d 	bl	800c744 <malloc>
 800068a:	4603      	mov	r3, r0
 800068c:	60bb      	str	r3, [r7, #8]
		// Create the struct to be sent to the queue
		I_CreateInstructionStruct(ins, time, pMov);
 800068e:	7b79      	ldrb	r1, [r7, #13]
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	68ba      	ldr	r2, [r7, #8]
 8000694:	4618      	mov	r0, r3
 8000696:	f000 f8b5 	bl	8000804 <I_CreateInstructionStruct>
		// Send the struct to the queue
		xQueueSend(instructionQueueHandle, pMov, 1);
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <serialRxTask+0x78>)
 800069c:	6818      	ldr	r0, [r3, #0]
 800069e:	2300      	movs	r3, #0
 80006a0:	2201      	movs	r2, #1
 80006a2:	68b9      	ldr	r1, [r7, #8]
 80006a4:	f009 f996 	bl	80099d4 <xQueueGenericSend>
		// Delay for 1 second
		vTaskDelay(10);
 80006a8:	200a      	movs	r0, #10
 80006aa:	f00a f931 	bl	800a910 <vTaskDelay>
		// Free the memory of the MovementInstruction_t struct
		free(pMov);
 80006ae:	68b8      	ldr	r0, [r7, #8]
 80006b0:	f00c f850 	bl	800c754 <free>
		// Update the instruction to be sent
		ins = (ins + 1) % I_NUM_INSTRUCTIONS;
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	3301      	adds	r3, #1
 80006b8:	2205      	movs	r2, #5
 80006ba:	fb93 f1f2 	sdiv	r1, r3, r2
 80006be:	fb01 f202 	mul.w	r2, r1, r2
 80006c2:	1a9b      	subs	r3, r3, r2
 80006c4:	73fb      	strb	r3, [r7, #15]
		i++;
 80006c6:	7bbb      	ldrb	r3, [r7, #14]
 80006c8:	3301      	adds	r3, #1
 80006ca:	73bb      	strb	r3, [r7, #14]
	while (i < 25) {
 80006cc:	7bbb      	ldrb	r3, [r7, #14]
 80006ce:	2b18      	cmp	r3, #24
 80006d0:	d9d8      	bls.n	8000684 <serialRxTask+0x1c>
	}

	while (1) {
		vTaskDelay(1000);
 80006d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006d6:	f00a f91b 	bl	800a910 <vTaskDelay>
 80006da:	e7fa      	b.n	80006d2 <serialRxTask+0x6a>
 80006dc:	0800dc58 	.word	0x0800dc58
 80006e0:	200007dc 	.word	0x200007dc

080006e4 <serialTxTask>:
	}
}

void serialTxTask(void *parg) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	while (1) {
		MovementInstruction_t pMov;
		// Receive the instruction from the queue
		xQueueReceive(instructionQueueHandle, &pMov, portMAX_DELAY);
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <serialTxTask+0x2c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f107 010c 	add.w	r1, r7, #12
 80006f4:	f04f 32ff 	mov.w	r2, #4294967295
 80006f8:	4618      	mov	r0, r3
 80006fa:	f009 fb91 	bl	8009e20 <xQueueReceive>
		// Send the instruction over the serial port
		S_SendInstructionStruct(&pMov);
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff3e 	bl	8000584 <S_SendInstructionStruct>
		// Wait for the duration of the instruction
		vTaskDelay(50);
 8000708:	2032      	movs	r0, #50	; 0x32
 800070a:	f00a f901 	bl	800a910 <vTaskDelay>
	while (1) {
 800070e:	e7ed      	b.n	80006ec <serialTxTask+0x8>
 8000710:	200007dc 	.word	0x200007dc

08000714 <WebServerTask>:
	}
}

void WebServerTask(void *pArg) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]

	S_PrintOnSerial("ServidorWeb\r\n");
 800071c:	4807      	ldr	r0, [pc, #28]	; (800073c <WebServerTask+0x28>)
 800071e:	f7ff ff5b 	bl	80005d8 <S_PrintOnSerial>

	if(RequestJSONProcess() != 0)
 8000722:	f001 f8f1 	bl	8001908 <RequestJSONProcess>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d002      	beq.n	8000732 <WebServerTask+0x1e>
		S_PrintOnSerial("Se ha detenido el proceso de peticiones");
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <WebServerTask+0x2c>)
 800072e:	f7ff ff53 	bl	80005d8 <S_PrintOnSerial>

	while(1)
		vTaskDelay(1000);
 8000732:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000736:	f00a f8eb 	bl	800a910 <vTaskDelay>
 800073a:	e7fa      	b.n	8000732 <WebServerTask+0x1e>
 800073c:	0800dc60 	.word	0x0800dc60
 8000740:	0800dc70 	.word	0x0800dc70

08000744 <CreateSerialObjects>:
}

void CreateSerialObjects() {
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	// Create a queue with 16 elements, each element has a size of 1 byte
	instructionQueueHandle = xQueueCreate(16, 1);
 8000748:	2200      	movs	r2, #0
 800074a:	2101      	movs	r1, #1
 800074c:	2010      	movs	r0, #16
 800074e:	f009 f879 	bl	8009844 <xQueueGenericCreate>
 8000752:	4603      	mov	r3, r0
 8000754:	4a01      	ldr	r2, [pc, #4]	; (800075c <CreateSerialObjects+0x18>)
 8000756:	6013      	str	r3, [r2, #0]
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200007dc 	.word	0x200007dc

08000760 <CreateSerialTask>:

void CreateSerialTask() {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af02      	add	r7, sp, #8
	xTaskCreate(WebServerTask, "TareaWebServer", 256, NULL, 2, NULL);
 8000766:	2300      	movs	r3, #0
 8000768:	9301      	str	r3, [sp, #4]
 800076a:	2302      	movs	r3, #2
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	2300      	movs	r3, #0
 8000770:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000774:	490e      	ldr	r1, [pc, #56]	; (80007b0 <CreateSerialTask+0x50>)
 8000776:	480f      	ldr	r0, [pc, #60]	; (80007b4 <CreateSerialTask+0x54>)
 8000778:	f009 ff6f 	bl	800a65a <xTaskCreate>
	xTaskCreate(serialTxTask, "serialTxTask", 256, NULL, 1, NULL);
 800077c:	2300      	movs	r3, #0
 800077e:	9301      	str	r3, [sp, #4]
 8000780:	2301      	movs	r3, #1
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2300      	movs	r3, #0
 8000786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800078a:	490b      	ldr	r1, [pc, #44]	; (80007b8 <CreateSerialTask+0x58>)
 800078c:	480b      	ldr	r0, [pc, #44]	; (80007bc <CreateSerialTask+0x5c>)
 800078e:	f009 ff64 	bl	800a65a <xTaskCreate>
	xTaskCreate(serialRxTask, "serialRxTask", 256, NULL, 1, NULL);
 8000792:	2300      	movs	r3, #0
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	2300      	movs	r3, #0
 800079c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007a0:	4907      	ldr	r1, [pc, #28]	; (80007c0 <CreateSerialTask+0x60>)
 80007a2:	4808      	ldr	r0, [pc, #32]	; (80007c4 <CreateSerialTask+0x64>)
 80007a4:	f009 ff59 	bl	800a65a <xTaskCreate>
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	0800dc98 	.word	0x0800dc98
 80007b4:	08000715 	.word	0x08000715
 80007b8:	0800dca8 	.word	0x0800dca8
 80007bc:	080006e5 	.word	0x080006e5
 80007c0:	0800dcb8 	.word	0x0800dcb8
 80007c4:	08000669 	.word	0x08000669

080007c8 <I_MovementInstruction_toString>:
 *      Author: josec
 */

#include "generalTypes.h"

void I_MovementInstruction_toString(MovementInstruction_t *pMovIns, char **buf) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]

	char *s = (char*) malloc(NUM_CHARS_PER_INSTRUCTION);
 80007d2:	2307      	movs	r3, #7
 80007d4:	4618      	mov	r0, r3
 80007d6:	f00b ffb5 	bl	800c744 <malloc>
 80007da:	4603      	mov	r3, r0
 80007dc:	60fb      	str	r3, [r7, #12]

	sprintf(s, "%d %d", pMovIns->instruction, pMovIns->duration);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	785b      	ldrb	r3, [r3, #1]
 80007e8:	4905      	ldr	r1, [pc, #20]	; (8000800 <I_MovementInstruction_toString+0x38>)
 80007ea:	68f8      	ldr	r0, [r7, #12]
 80007ec:	f00c f9c8 	bl	800cb80 <siprintf>

	*buf = s;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	601a      	str	r2, [r3, #0]
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	0800dcc8 	.word	0x0800dcc8

08000804 <I_CreateInstructionStruct>:

uint8_t I_CreateInstructionStruct(uint8_t instCode, uint8_t time,
		MovementInstruction_t *pMovOut) {
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	603a      	str	r2, [r7, #0]
 800080e:	71fb      	strb	r3, [r7, #7]
 8000810:	460b      	mov	r3, r1
 8000812:	71bb      	strb	r3, [r7, #6]
	// Comprueba que todos los parametros sean correctos
	if (instCode < I_NUM_INSTRUCTIONS) {
 8000814:	2205      	movs	r2, #5
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	4293      	cmp	r3, r2
 800081a:	d20e      	bcs.n	800083a <I_CreateInstructionStruct+0x36>
		if (time < I_MAX_TIME_EXECUTION) {
 800081c:	2264      	movs	r2, #100	; 0x64
 800081e:	79bb      	ldrb	r3, [r7, #6]
 8000820:	4293      	cmp	r3, r2
 8000822:	d208      	bcs.n	8000836 <I_CreateInstructionStruct+0x32>
			if (pMovOut != NULL) {
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d005      	beq.n	8000836 <I_CreateInstructionStruct+0x32>
				pMovOut->instruction = instCode;
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	79fa      	ldrb	r2, [r7, #7]
 800082e:	701a      	strb	r2, [r3, #0]
				pMovOut->duration = time;
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	79ba      	ldrb	r2, [r7, #6]
 8000834:	705a      	strb	r2, [r3, #1]
			}
		}
		return 1;
 8000836:	2301      	movs	r3, #1
 8000838:	e006      	b.n	8000848 <I_CreateInstructionStruct+0x44>
	}
	// Si no devuelve una instruccion NOPE
	else {
		pMovOut->instruction = I_NOPE;
 800083a:	2200      	movs	r2, #0
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	701a      	strb	r2, [r3, #0]
		pMovOut->duration = I_MAX_TIME_EXECUTION;
 8000840:	2264      	movs	r2, #100	; 0x64
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	705a      	strb	r2, [r3, #1]
		return 0;
 8000846:	2300      	movs	r3, #0
	}
}
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000858:	f001 fa13 	bl	8001c82 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800085c:	f000 f840 	bl	80008e0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000860:	f000 fa0a 	bl	8000c78 <MX_GPIO_Init>
	MX_DFSDM1_Init();
 8000864:	f000 f89e 	bl	80009a4 <MX_DFSDM1_Init>
	MX_I2C2_Init();
 8000868:	f000 f8d4 	bl	8000a14 <MX_I2C2_Init>
	MX_QUADSPI_Init();
 800086c:	f000 f912 	bl	8000a94 <MX_QUADSPI_Init>
	MX_SPI3_Init();
 8000870:	f000 f936 	bl	8000ae0 <MX_SPI3_Init>
	MX_USART1_UART_Init();
 8000874:	f000 f9a2 	bl	8000bbc <MX_USART1_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000878:	f000 f9d0 	bl	8000c1c <MX_USB_OTG_FS_PCD_Init>
	MX_UART4_Init();
 800087c:	f000 f96e 	bl	8000b5c <MX_UART4_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000880:	f008 fc40 	bl	8009104 <osKernelInitialize>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of xSemaphoreSerial */
	xSemaphoreSerialHandle = osSemaphoreNew(1, 1, &xSemaphoreSerial_attributes);
 8000884:	4a0f      	ldr	r2, [pc, #60]	; (80008c4 <main+0x70>)
 8000886:	2101      	movs	r1, #1
 8000888:	2001      	movs	r0, #1
 800088a:	f008 fd17 	bl	80092bc <osSemaphoreNew>
 800088e:	4603      	mov	r3, r0
 8000890:	4a0d      	ldr	r2, [pc, #52]	; (80008c8 <main+0x74>)
 8000892:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_SEMAPHORES */
	/* add semaphores, ... */
	CreateSerialObjects();
 8000894:	f7ff ff56 	bl	8000744 <CreateSerialObjects>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of instructionQueue */
	instructionQueueHandle = osMessageQueueNew(100,
 8000898:	4a0c      	ldr	r2, [pc, #48]	; (80008cc <main+0x78>)
 800089a:	2102      	movs	r1, #2
 800089c:	2064      	movs	r0, #100	; 0x64
 800089e:	f008 fd96 	bl	80093ce <osMessageQueueNew>
 80008a2:	4603      	mov	r3, r0
 80008a4:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <main+0x7c>)
 80008a6:	6013      	str	r3, [r2, #0]
	/* creation of RxTask */
	//RxTaskHandle = osThreadNew(serialRxTask, NULL, &RxTask_attributes);
	/* creation of TxTask */
	//TxTaskHandle = osThreadNew(serialTxTask, NULL, &TxTask_attributes);
	/* creation of WebServerTask */
	WebServerTaskHandle = osThreadNew(WebServerTask, NULL,
 80008a8:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <main+0x80>)
 80008aa:	2100      	movs	r1, #0
 80008ac:	480a      	ldr	r0, [pc, #40]	; (80008d8 <main+0x84>)
 80008ae:	f008 fc73 	bl	8009198 <osThreadNew>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4a09      	ldr	r2, [pc, #36]	; (80008dc <main+0x88>)
 80008b6:	6013      	str	r3, [r2, #0]
			&WebServerTask_attributes);

	/* USER CODE BEGIN RTOS_THREADS */
	CreateSerialTask();
 80008b8:	f7ff ff52 	bl	8000760 <CreateSerialTask>
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80008bc:	f008 fc46 	bl	800914c <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80008c0:	e7fe      	b.n	80008c0 <main+0x6c>
 80008c2:	bf00      	nop
 80008c4:	0800e378 	.word	0x0800e378
 80008c8:	200007e0 	.word	0x200007e0
 80008cc:	0800e360 	.word	0x0800e360
 80008d0:	200007dc 	.word	0x200007dc
 80008d4:	0800e33c 	.word	0x0800e33c
 80008d8:	08000715 	.word	0x08000715
 80008dc:	200007d8 	.word	0x200007d8

080008e0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b096      	sub	sp, #88	; 0x58
 80008e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2244      	movs	r2, #68	; 0x44
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f00b ff56 	bl	800c7a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80008f4:	463b      	mov	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000902:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000906:	f002 f9f9 	bl	8002cfc <HAL_PWREx_ControlVoltageScaling>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000910:	f000 fb66 	bl	8000fe0 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000914:	f002 f9d4 	bl	8002cc0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000918:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <SystemClock_Config+0xc0>)
 800091a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800091e:	4a20      	ldr	r2, [pc, #128]	; (80009a0 <SystemClock_Config+0xc0>)
 8000920:	f023 0318 	bic.w	r3, r3, #24
 8000924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8000928:	2314      	movs	r3, #20
 800092a:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800092c:	2301      	movs	r3, #1
 800092e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000930:	2301      	movs	r3, #1
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000938:	2360      	movs	r3, #96	; 0x60
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093c:	2302      	movs	r3, #2
 800093e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000940:	2301      	movs	r3, #1
 8000942:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000944:	2301      	movs	r3, #1
 8000946:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 8000948:	2328      	movs	r3, #40	; 0x28
 800094a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800094c:	2307      	movs	r3, #7
 800094e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000950:	2302      	movs	r3, #2
 8000952:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000954:	2302      	movs	r3, #2
 8000956:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4618      	mov	r0, r3
 800095e:	f002 faef 	bl	8002f40 <HAL_RCC_OscConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0x8c>
		Error_Handler();
 8000968:	f000 fb3a 	bl	8000fe0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800096c:	230f      	movs	r3, #15
 800096e:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000970:	2303      	movs	r3, #3
 8000972:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000980:	463b      	mov	r3, r7
 8000982:	2104      	movs	r1, #4
 8000984:	4618      	mov	r0, r3
 8000986:	f002 feb7 	bl	80036f8 <HAL_RCC_ClockConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0xb4>
		Error_Handler();
 8000990:	f000 fb26 	bl	8000fe0 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8000994:	f003 fbf0 	bl	8004178 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000998:	bf00      	nop
 800099a:	3758      	adds	r7, #88	; 0x58
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40021000 	.word	0x40021000

080009a4 <MX_DFSDM1_Init>:
/**
 * @brief DFSDM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DFSDM1_Init(void) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	/* USER CODE END DFSDM1_Init 0 */

	/* USER CODE BEGIN DFSDM1_Init 1 */

	/* USER CODE END DFSDM1_Init 1 */
	hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80009a8:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009aa:	4a19      	ldr	r2, [pc, #100]	; (8000a10 <MX_DFSDM1_Init+0x6c>)
 80009ac:	601a      	str	r2, [r3, #0]
	hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	711a      	strb	r2, [r3, #4]
	hdfsdm1_channel1.Init.OutputClock.Selection =
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
			DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
	hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009bc:	2202      	movs	r2, #2
 80009be:	60da      	str	r2, [r3, #12]
	hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
	hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
	hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009d2:	619a      	str	r2, [r3, #24]
	hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80009d4:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
	hdfsdm1_channel1.Init.SerialInterface.SpiClock =
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009dc:	2204      	movs	r2, #4
 80009de:	621a      	str	r2, [r3, #32]
			DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
	hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80009e0:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	; 0x24
	hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	629a      	str	r2, [r3, #40]	; 0x28
	hdfsdm1_channel1.Init.Offset = 0;
 80009ec:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	62da      	str	r2, [r3, #44]	; 0x2c
	hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK) {
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009fa:	f001 fa81 	bl	8001f00 <HAL_DFSDM_ChannelInit>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_DFSDM1_Init+0x64>
		Error_Handler();
 8000a04:	f000 faec 	bl	8000fe0 <Error_Handler>
	}
	/* USER CODE BEGIN DFSDM1_Init 2 */

	/* USER CODE END DFSDM1_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000090 	.word	0x20000090
 8000a10:	40016020 	.word	0x40016020

08000a14 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <MX_I2C2_Init+0x74>)
 8000a1a:	4a1c      	ldr	r2, [pc, #112]	; (8000a8c <MX_I2C2_Init+0x78>)
 8000a1c:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x10909CEC;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_I2C2_Init+0x74>)
 8000a20:	4a1b      	ldr	r2, [pc, #108]	; (8000a90 <MX_I2C2_Init+0x7c>)
 8000a22:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8000a24:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <MX_I2C2_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_I2C2_Init+0x74>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <MX_I2C2_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_I2C2_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_I2C2_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_I2C2_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_I2C2_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8000a4e:	480e      	ldr	r0, [pc, #56]	; (8000a88 <MX_I2C2_Init+0x74>)
 8000a50:	f001 fec8 	bl	80027e4 <HAL_I2C_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C2_Init+0x4a>
		Error_Handler();
 8000a5a:	f000 fac1 	bl	8000fe0 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4809      	ldr	r0, [pc, #36]	; (8000a88 <MX_I2C2_Init+0x74>)
 8000a62:	f001 ff4e 	bl	8002902 <HAL_I2CEx_ConfigAnalogFilter>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000a6c:	f000 fab8 	bl	8000fe0 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8000a70:	2100      	movs	r1, #0
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_I2C2_Init+0x74>)
 8000a74:	f001 ff90 	bl	8002998 <HAL_I2CEx_ConfigDigitalFilter>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_I2C2_Init+0x6e>
		Error_Handler();
 8000a7e:	f000 faaf 	bl	8000fe0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200000c8 	.word	0x200000c8
 8000a8c:	40005800 	.word	0x40005800
 8000a90:	10909cec 	.word	0x10909cec

08000a94 <MX_QUADSPI_Init>:
/**
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN QUADSPI_Init 1 */

	/* USER CODE END QUADSPI_Init 1 */
	/* QUADSPI parameter configuration*/
	hqspi.Instance = QUADSPI;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_QUADSPI_Init+0x44>)
 8000a9a:	4a10      	ldr	r2, [pc, #64]	; (8000adc <MX_QUADSPI_Init+0x48>)
 8000a9c:	601a      	str	r2, [r3, #0]
	hqspi.Init.ClockPrescaler = 2;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MX_QUADSPI_Init+0x44>)
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	605a      	str	r2, [r3, #4]
	hqspi.Init.FifoThreshold = 4;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MX_QUADSPI_Init+0x44>)
 8000aa6:	2204      	movs	r2, #4
 8000aa8:	609a      	str	r2, [r3, #8]
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <MX_QUADSPI_Init+0x44>)
 8000aac:	2210      	movs	r2, #16
 8000aae:	60da      	str	r2, [r3, #12]
	hqspi.Init.FlashSize = 23;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_QUADSPI_Init+0x44>)
 8000ab2:	2217      	movs	r2, #23
 8000ab4:	611a      	str	r2, [r3, #16]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <MX_QUADSPI_Init+0x44>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	615a      	str	r2, [r3, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_QUADSPI_Init+0x44>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK) {
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_QUADSPI_Init+0x44>)
 8000ac4:	f002 f980 	bl	8002dc8 <HAL_QSPI_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_QUADSPI_Init+0x3e>
		Error_Handler();
 8000ace:	f000 fa87 	bl	8000fe0 <Error_Handler>
	}
	/* USER CODE BEGIN QUADSPI_Init 2 */

	/* USER CODE END QUADSPI_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000011c 	.word	0x2000011c
 8000adc:	a0001000 	.word	0xa0001000

08000ae0 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000ae6:	4a1c      	ldr	r2, [pc, #112]	; (8000b58 <MX_SPI3_Init+0x78>)
 8000ae8:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000aec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000af0:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000afa:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000afe:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b12:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 7;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000b2e:	2207      	movs	r2, #7
 8000b30:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	631a      	str	r2, [r3, #48]	; 0x30
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000b3a:	2208      	movs	r2, #8
 8000b3c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000b40:	f003 fcfc 	bl	800453c <HAL_SPI_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_SPI3_Init+0x6e>
		Error_Handler();
 8000b4a:	f000 fa49 	bl	8000fe0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000160 	.word	0x20000160
 8000b58:	40003c00 	.word	0x40003c00

08000b5c <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_UART4_Init+0x58>)
 8000b62:	4a15      	ldr	r2, [pc, #84]	; (8000bb8 <MX_UART4_Init+0x5c>)
 8000b64:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 9600;
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_UART4_Init+0x58>)
 8000b68:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b6c:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_UART4_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <MX_UART4_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_UART4_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <MX_UART4_Init+0x58>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <MX_UART4_Init+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_UART4_Init+0x58>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <MX_UART4_Init+0x58>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_UART4_Init+0x58>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_UART4_Init+0x58>)
 8000ba0:	f005 face 	bl	8006140 <HAL_UART_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_UART4_Init+0x52>
		Error_Handler();
 8000baa:	f000 fa19 	bl	8000fe0 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200001c4 	.word	0x200001c4
 8000bb8:	40004c00 	.word	0x40004c00

08000bbc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bc2:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <MX_USART1_UART_Init+0x5c>)
 8000bc4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000bc6:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bcc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000be2:	220c      	movs	r2, #12
 8000be4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000c00:	f005 fa9e 	bl	8006140 <HAL_UART_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000c0a:	f000 f9e9 	bl	8000fe0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000248 	.word	0x20000248
 8000c18:	40013800 	.word	0x40013800

08000c1c <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c22:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c26:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c2a:	2206      	movs	r2, #6
 8000c2c:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c30:	2202      	movs	r2, #2
 8000c32:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c36:	2202      	movs	r2, #2
 8000c38:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	629a      	str	r2, [r3, #40]	; 0x28
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	631a      	str	r2, [r3, #48]	; 0x30
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c60:	f001 fee6 	bl	8002a30 <HAL_PCD_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 8000c6a:	f000 f9b9 	bl	8000fe0 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200002cc 	.word	0x200002cc

08000c78 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000c8e:	4bbc      	ldr	r3, [pc, #752]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	4abb      	ldr	r2, [pc, #748]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000c94:	f043 0310 	orr.w	r3, r3, #16
 8000c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9a:	4bb9      	ldr	r3, [pc, #740]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	f003 0310 	and.w	r3, r3, #16
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	4bb6      	ldr	r3, [pc, #728]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	4ab5      	ldr	r2, [pc, #724]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb2:	4bb3      	ldr	r3, [pc, #716]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4bb0      	ldr	r3, [pc, #704]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	4aaf      	ldr	r2, [pc, #700]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cca:	4bad      	ldr	r3, [pc, #692]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	4baa      	ldr	r3, [pc, #680]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	4aa9      	ldr	r2, [pc, #676]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce2:	4ba7      	ldr	r3, [pc, #668]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000cee:	4ba4      	ldr	r3, [pc, #656]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	4aa3      	ldr	r2, [pc, #652]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000cf4:	f043 0308 	orr.w	r3, r3, #8
 8000cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfa:	4ba1      	ldr	r3, [pc, #644]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	f003 0308 	and.w	r3, r3, #8
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000d0c:	489d      	ldr	r0, [pc, #628]	; (8000f84 <MX_GPIO_Init+0x30c>)
 8000d0e:	f001 fd39 	bl	8002784 <HAL_GPIO_WritePin>
			M24SR64_Y_RF_DISABLE_Pin | M24SR64_Y_GPO_Pin | ISM43362_RST_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin | SPBTLE_RF_RST_Pin | ARD_D9_Pin,
 8000d12:	2200      	movs	r2, #0
 8000d14:	f248 1104 	movw	r1, #33028	; 0x8104
 8000d18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1c:	f001 fd32 	bl	8002784 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000d20:	2200      	movs	r2, #0
 8000d22:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000d26:	4898      	ldr	r0, [pc, #608]	; (8000f88 <MX_GPIO_Init+0x310>)
 8000d28:	f001 fd2c 	bl	8002784 <HAL_GPIO_WritePin>
			ARD_D8_Pin | ISM43362_BOOT0_Pin | ISM43362_WAKEUP_Pin | LED2_Pin
					| SPSGRF_915_SDN_Pin | ARD_D5_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f241 0181 	movw	r1, #4225	; 0x1081
 8000d32:	4896      	ldr	r0, [pc, #600]	; (8000f8c <MX_GPIO_Init+0x314>)
 8000d34:	f001 fd26 	bl	8002784 <HAL_GPIO_WritePin>
			USB_OTG_FS_PWR_EN_Pin | PMOD_RESET_Pin | STSAFE_A100_RESET_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin,
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d3e:	4893      	ldr	r0, [pc, #588]	; (8000f8c <MX_GPIO_Init+0x314>)
 8000d40:	f001 fd20 	bl	8002784 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin | LED3_WIFI__LED4_BLE_Pin,
 8000d44:	2200      	movs	r2, #0
 8000d46:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000d4a:	4891      	ldr	r0, [pc, #580]	; (8000f90 <MX_GPIO_Init+0x318>)
 8000d4c:	f001 fd1a 	bl	8002784 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin,
 8000d50:	2201      	movs	r2, #1
 8000d52:	2120      	movs	r1, #32
 8000d54:	488c      	ldr	r0, [pc, #560]	; (8000f88 <MX_GPIO_Init+0x310>)
 8000d56:	f001 fd15 	bl	8002784 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin,
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	4889      	ldr	r0, [pc, #548]	; (8000f84 <MX_GPIO_Init+0x30c>)
 8000d60:	f001 fd10 	bl	8002784 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
	GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin | M24SR64_Y_GPO_Pin
 8000d64:	f240 1315 	movw	r3, #277	; 0x115
 8000d68:	617b      	str	r3, [r7, #20]
			| ISM43362_RST_Pin | ISM43362_SPI3_CSN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4881      	ldr	r0, [pc, #516]	; (8000f84 <MX_GPIO_Init+0x30c>)
 8000d7e:	f001 fa4b 	bl	8002218 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin
 8000d82:	236a      	movs	r3, #106	; 0x6a
 8000d84:	617b      	str	r3, [r7, #20]
			| SPSGRF_915_GPIO3_EXTI5_Pin | SPBTLE_RF_IRQ_EXTI6_Pin
			| ISM43362_DRDY_EXTI1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d86:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d8a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	487b      	ldr	r0, [pc, #492]	; (8000f84 <MX_GPIO_Init+0x30c>)
 8000d98:	f001 fa3e 	bl	8002218 <HAL_GPIO_Init>

	/*Configure GPIO pin : BUTTON_EXTI13_Pin */
	GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000d9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000da2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000da6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4877      	ldr	r0, [pc, #476]	; (8000f90 <MX_GPIO_Init+0x318>)
 8000db4:	f001 fa30 	bl	8002218 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
	 ARD_A1_Pin ARD_A0_Pin */
	GPIO_InitStruct.Pin = ARD_A5_Pin | ARD_A4_Pin | ARD_A3_Pin | ARD_A2_Pin
 8000db8:	233f      	movs	r3, #63	; 0x3f
 8000dba:	617b      	str	r3, [r7, #20]
			| ARD_A1_Pin | ARD_A0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dbc:	230b      	movs	r3, #11
 8000dbe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4871      	ldr	r0, [pc, #452]	; (8000f90 <MX_GPIO_Init+0x318>)
 8000dcc:	f001 fa24 	bl	8002218 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
	GPIO_InitStruct.Pin = ARD_D10_Pin | SPBTLE_RF_RST_Pin | ARD_D9_Pin;
 8000dd0:	f248 1304 	movw	r3, #33028	; 0x8104
 8000dd4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dec:	f001 fa14 	bl	8002218 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D4_Pin */
	GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000df0:	2308      	movs	r3, #8
 8000df2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e00:	2301      	movs	r3, #1
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0e:	f001 fa03 	bl	8002218 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
	GPIO_InitStruct.Pin = ARD_D13_Pin | ARD_D12_Pin | ARD_D11_Pin;
 8000e12:	23e0      	movs	r3, #224	; 0xe0
 8000e14:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e22:	2305      	movs	r3, #5
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e30:	f001 f9f2 	bl	8002218 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D3_Pin */
	GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000e34:	2301      	movs	r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e38:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e3c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	484f      	ldr	r0, [pc, #316]	; (8000f88 <MX_GPIO_Init+0x310>)
 8000e4a:	f001 f9e5 	bl	8002218 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D6_Pin */
	GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e52:	230b      	movs	r3, #11
 8000e54:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4849      	ldr	r0, [pc, #292]	; (8000f88 <MX_GPIO_Init+0x310>)
 8000e62:	f001 f9d9 	bl	8002218 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
	 SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
	GPIO_InitStruct.Pin = ARD_D8_Pin | ISM43362_BOOT0_Pin | ISM43362_WAKEUP_Pin
 8000e66:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000e6a:	617b      	str	r3, [r7, #20]
			| LED2_Pin | SPSGRF_915_SDN_Pin | ARD_D5_Pin
			| SPSGRF_915_SPI3_CSN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4842      	ldr	r0, [pc, #264]	; (8000f88 <MX_GPIO_Init+0x310>)
 8000e80:	f001 f9ca 	bl	8002218 <HAL_GPIO_Init>

	/*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
	GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin | INTERNAL_UART3_RX_Pin;
 8000e84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e88:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e96:	2307      	movs	r3, #7
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	483a      	ldr	r0, [pc, #232]	; (8000f8c <MX_GPIO_Init+0x314>)
 8000ea2:	f001 f9b9 	bl	8002218 <HAL_GPIO_Init>

	/*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
	 PMOD_IRQ_EXTI12_Pin */
	GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin | LSM6DSL_INT1_EXTI11_Pin
 8000ea6:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000eaa:	617b      	str	r3, [r7, #20]
			| ARD_D2_Pin | HTS221_DRDY_EXTI15_Pin | PMOD_IRQ_EXTI12_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eb0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4833      	ldr	r0, [pc, #204]	; (8000f8c <MX_GPIO_Init+0x314>)
 8000ebe:	f001 f9ab 	bl	8002218 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin | SPBTLE_RF_SPI3_CSN_Pin
 8000ec2:	f243 0381 	movw	r3, #12417	; 0x3081
 8000ec6:	617b      	str	r3, [r7, #20]
			| PMOD_RESET_Pin | STSAFE_A100_RESET_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	4619      	mov	r1, r3
 8000eda:	482c      	ldr	r0, [pc, #176]	; (8000f8c <MX_GPIO_Init+0x314>)
 8000edc:	f001 f99c 	bl	8002218 <HAL_GPIO_Init>

	/*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
	GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin | LED3_WIFI__LED4_BLE_Pin;
 8000ee0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ee4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4825      	ldr	r0, [pc, #148]	; (8000f90 <MX_GPIO_Init+0x318>)
 8000efa:	f001 f98d 	bl	8002218 <HAL_GPIO_Init>

	/*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
	GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin | LSM3MDL_DRDY_EXTI8_Pin;
 8000efe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f02:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f04:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f08:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	481e      	ldr	r0, [pc, #120]	; (8000f90 <MX_GPIO_Init+0x318>)
 8000f16:	f001 f97f 	bl	8002218 <HAL_GPIO_Init>

	/*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
	GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f2a:	2305      	movs	r3, #5
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	4815      	ldr	r0, [pc, #84]	; (8000f8c <MX_GPIO_Init+0x314>)
 8000f36:	f001 f96f 	bl	8002218 <HAL_GPIO_Init>

	/*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PD5 PMOD_UART2_RX_Pin */
	GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin | PMOD_UART2_RTS_Pin | GPIO_PIN_5
 8000f3a:	2378      	movs	r3, #120	; 0x78
 8000f3c:	617b      	str	r3, [r7, #20]
			| PMOD_UART2_RX_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <MX_GPIO_Init+0x314>)
 8000f56:	f001 f95f 	bl	8002218 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
	GPIO_InitStruct.Pin = ARD_D15_Pin | ARD_D14_Pin;
 8000f5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f5e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f60:	2312      	movs	r3, #18
 8000f62:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	4804      	ldr	r0, [pc, #16]	; (8000f88 <MX_GPIO_Init+0x310>)
 8000f78:	f001 f94e 	bl	8002218 <HAL_GPIO_Init>
 8000f7c:	e00a      	b.n	8000f94 <MX_GPIO_Init+0x31c>
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000
 8000f84:	48001000 	.word	0x48001000
 8000f88:	48000400 	.word	0x48000400
 8000f8c:	48000c00 	.word	0x48000c00
 8000f90:	48000800 	.word	0x48000800

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2105      	movs	r1, #5
 8000f98:	2017      	movs	r0, #23
 8000f9a:	f000 ff87 	bl	8001eac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f9e:	2017      	movs	r0, #23
 8000fa0:	f000 ffa0 	bl	8001ee4 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2105      	movs	r1, #5
 8000fa8:	2028      	movs	r0, #40	; 0x28
 8000faa:	f000 ff7f 	bl	8001eac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fae:	2028      	movs	r0, #40	; 0x28
 8000fb0:	f000 ff98 	bl	8001ee4 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000fb4:	bf00      	nop
 8000fb6:	3728      	adds	r7, #40	; 0x28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d101      	bne.n	8000fd2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000fce:	f000 fe71 	bl	8001cb4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40000800 	.word	0x40000800

08000fe0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe4:	b672      	cpsid	i
}
 8000fe6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fe8:	e7fe      	b.n	8000fe8 <Error_Handler+0x8>
	...

08000fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <HAL_MspInit+0x4c>)
 8000ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff6:	4a10      	ldr	r2, [pc, #64]	; (8001038 <HAL_MspInit+0x4c>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_MspInit+0x4c>)
 8001000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <HAL_MspInit+0x4c>)
 800100c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <HAL_MspInit+0x4c>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001014:	6593      	str	r3, [r2, #88]	; 0x58
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <HAL_MspInit+0x4c>)
 8001018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	210f      	movs	r1, #15
 8001026:	f06f 0001 	mvn.w	r0, #1
 800102a:	f000 ff3f 	bl	8001eac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000

0800103c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b0ac      	sub	sp, #176	; 0xb0
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2288      	movs	r2, #136	; 0x88
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f00b fb9f 	bl	800c7a0 <memset>
  if(DFSDM1_Init == 0)
 8001062:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d142      	bne.n	80010f0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800106a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800106e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4618      	mov	r0, r3
 800107c:	f002 fd92 	bl	8003ba4 <HAL_RCCEx_PeriphCLKConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001086:	f7ff ffab 	bl	8000fe0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 800108c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108e:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001090:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001094:	6613      	str	r3, [r2, #96]	; 0x60
 8001096:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	4a15      	ldr	r2, [pc, #84]	; (80010fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010a8:	f043 0310 	orr.w	r3, r3, #16
 80010ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80010ba:	f44f 7320 	mov.w	r3, #640	; 0x280
 80010be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80010d4:	2306      	movs	r3, #6
 80010d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010de:	4619      	mov	r1, r3
 80010e0:	4807      	ldr	r0, [pc, #28]	; (8001100 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80010e2:	f001 f899 	bl	8002218 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	4a02      	ldr	r2, [pc, #8]	; (80010f8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010ee:	6013      	str	r3, [r2, #0]
  }

}
 80010f0:	bf00      	nop
 80010f2:	37b0      	adds	r7, #176	; 0xb0
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200007e4 	.word	0x200007e4
 80010fc:	40021000 	.word	0x40021000
 8001100:	48001000 	.word	0x48001000

08001104 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b0ac      	sub	sp, #176	; 0xb0
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2288      	movs	r2, #136	; 0x88
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f00b fb3b 	bl	800c7a0 <memset>
  if(hi2c->Instance==I2C2)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a21      	ldr	r2, [pc, #132]	; (80011b4 <HAL_I2C_MspInit+0xb0>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d13b      	bne.n	80011ac <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001138:	2300      	movs	r3, #0
 800113a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4618      	mov	r0, r3
 8001142:	f002 fd2f 	bl	8003ba4 <HAL_RCCEx_PeriphCLKConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800114c:	f7ff ff48 	bl	8000fe0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <HAL_I2C_MspInit+0xb4>)
 8001152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001154:	4a18      	ldr	r2, [pc, #96]	; (80011b8 <HAL_I2C_MspInit+0xb4>)
 8001156:	f043 0302 	orr.w	r3, r3, #2
 800115a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115c:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <HAL_I2C_MspInit+0xb4>)
 800115e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001168:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800116c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001170:	2312      	movs	r3, #18
 8001172:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001176:	2301      	movs	r3, #1
 8001178:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001182:	2304      	movs	r3, #4
 8001184:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800118c:	4619      	mov	r1, r3
 800118e:	480b      	ldr	r0, [pc, #44]	; (80011bc <HAL_I2C_MspInit+0xb8>)
 8001190:	f001 f842 	bl	8002218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_I2C_MspInit+0xb4>)
 8001196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001198:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <HAL_I2C_MspInit+0xb4>)
 800119a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800119e:	6593      	str	r3, [r2, #88]	; 0x58
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <HAL_I2C_MspInit+0xb4>)
 80011a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011ac:	bf00      	nop
 80011ae:	37b0      	adds	r7, #176	; 0xb0
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40005800 	.word	0x40005800
 80011b8:	40021000 	.word	0x40021000
 80011bc:	48000400 	.word	0x48000400

080011c0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a17      	ldr	r2, [pc, #92]	; (800123c <HAL_QSPI_MspInit+0x7c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d128      	bne.n	8001234 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <HAL_QSPI_MspInit+0x80>)
 80011e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011e6:	4a16      	ldr	r2, [pc, #88]	; (8001240 <HAL_QSPI_MspInit+0x80>)
 80011e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ec:	6513      	str	r3, [r2, #80]	; 0x50
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <HAL_QSPI_MspInit+0x80>)
 80011f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <HAL_QSPI_MspInit+0x80>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	4a10      	ldr	r2, [pc, #64]	; (8001240 <HAL_QSPI_MspInit+0x80>)
 8001200:	f043 0310 	orr.w	r3, r3, #16
 8001204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <HAL_QSPI_MspInit+0x80>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	f003 0310 	and.w	r3, r3, #16
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001212:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001216:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001224:	230a      	movs	r3, #10
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <HAL_QSPI_MspInit+0x84>)
 8001230:	f000 fff2 	bl	8002218 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001234:	bf00      	nop
 8001236:	3728      	adds	r7, #40	; 0x28
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	a0001000 	.word	0xa0001000
 8001240:	40021000 	.word	0x40021000
 8001244:	48001000 	.word	0x48001000

08001248 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a17      	ldr	r2, [pc, #92]	; (80012c4 <HAL_SPI_MspInit+0x7c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d128      	bne.n	80012bc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <HAL_SPI_MspInit+0x80>)
 800126c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126e:	4a16      	ldr	r2, [pc, #88]	; (80012c8 <HAL_SPI_MspInit+0x80>)
 8001270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001274:	6593      	str	r3, [r2, #88]	; 0x58
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <HAL_SPI_MspInit+0x80>)
 8001278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <HAL_SPI_MspInit+0x80>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	4a10      	ldr	r2, [pc, #64]	; (80012c8 <HAL_SPI_MspInit+0x80>)
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <HAL_SPI_MspInit+0x80>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800129a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800129e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012ac:	2306      	movs	r3, #6
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	4619      	mov	r1, r3
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <HAL_SPI_MspInit+0x84>)
 80012b8:	f000 ffae 	bl	8002218 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012bc:	bf00      	nop
 80012be:	3728      	adds	r7, #40	; 0x28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40003c00 	.word	0x40003c00
 80012c8:	40021000 	.word	0x40021000
 80012cc:	48000800 	.word	0x48000800

080012d0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a08      	ldr	r2, [pc, #32]	; (8001300 <HAL_SPI_MspDeInit+0x30>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d10a      	bne.n	80012f8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <HAL_SPI_MspDeInit+0x34>)
 80012e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e6:	4a07      	ldr	r2, [pc, #28]	; (8001304 <HAL_SPI_MspDeInit+0x34>)
 80012e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80012ec:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 80012ee:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <HAL_SPI_MspDeInit+0x38>)
 80012f4:	f001 f93a 	bl	800256c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40003c00 	.word	0x40003c00
 8001304:	40021000 	.word	0x40021000
 8001308:	48000800 	.word	0x48000800

0800130c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b0ae      	sub	sp, #184	; 0xb8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	2288      	movs	r2, #136	; 0x88
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f00b fa37 	bl	800c7a0 <memset>
  if(huart->Instance==UART4)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a4a      	ldr	r2, [pc, #296]	; (8001460 <HAL_UART_MspInit+0x154>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d144      	bne.n	80013c6 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800133c:	2308      	movs	r3, #8
 800133e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001340:	2300      	movs	r3, #0
 8001342:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	4618      	mov	r0, r3
 800134a:	f002 fc2b 	bl	8003ba4 <HAL_RCCEx_PeriphCLKConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001354:	f7ff fe44 	bl	8000fe0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001358:	4b42      	ldr	r3, [pc, #264]	; (8001464 <HAL_UART_MspInit+0x158>)
 800135a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135c:	4a41      	ldr	r2, [pc, #260]	; (8001464 <HAL_UART_MspInit+0x158>)
 800135e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001362:	6593      	str	r3, [r2, #88]	; 0x58
 8001364:	4b3f      	ldr	r3, [pc, #252]	; (8001464 <HAL_UART_MspInit+0x158>)
 8001366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001368:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800136c:	61bb      	str	r3, [r7, #24]
 800136e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001370:	4b3c      	ldr	r3, [pc, #240]	; (8001464 <HAL_UART_MspInit+0x158>)
 8001372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001374:	4a3b      	ldr	r2, [pc, #236]	; (8001464 <HAL_UART_MspInit+0x158>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137c:	4b39      	ldr	r3, [pc, #228]	; (8001464 <HAL_UART_MspInit+0x158>)
 800137e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001388:	2303      	movs	r3, #3
 800138a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80013a0:	2308      	movs	r3, #8
 80013a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013aa:	4619      	mov	r1, r3
 80013ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b0:	f000 ff32 	bl	8002218 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2105      	movs	r1, #5
 80013b8:	2034      	movs	r0, #52	; 0x34
 80013ba:	f000 fd77 	bl	8001eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80013be:	2034      	movs	r0, #52	; 0x34
 80013c0:	f000 fd90 	bl	8001ee4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013c4:	e047      	b.n	8001456 <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART1)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a27      	ldr	r2, [pc, #156]	; (8001468 <HAL_UART_MspInit+0x15c>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d142      	bne.n	8001456 <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013d4:	2300      	movs	r3, #0
 80013d6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	4618      	mov	r0, r3
 80013de:	f002 fbe1 	bl	8003ba4 <HAL_RCCEx_PeriphCLKConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80013e8:	f7ff fdfa 	bl	8000fe0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ec:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <HAL_UART_MspInit+0x158>)
 80013ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f0:	4a1c      	ldr	r2, [pc, #112]	; (8001464 <HAL_UART_MspInit+0x158>)
 80013f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f6:	6613      	str	r3, [r2, #96]	; 0x60
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <HAL_UART_MspInit+0x158>)
 80013fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <HAL_UART_MspInit+0x158>)
 8001406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001408:	4a16      	ldr	r2, [pc, #88]	; (8001464 <HAL_UART_MspInit+0x158>)
 800140a:	f043 0302 	orr.w	r3, r3, #2
 800140e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <HAL_UART_MspInit+0x158>)
 8001412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800141c:	23c0      	movs	r3, #192	; 0xc0
 800141e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001434:	2307      	movs	r3, #7
 8001436:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800143e:	4619      	mov	r1, r3
 8001440:	480a      	ldr	r0, [pc, #40]	; (800146c <HAL_UART_MspInit+0x160>)
 8001442:	f000 fee9 	bl	8002218 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2105      	movs	r1, #5
 800144a:	2025      	movs	r0, #37	; 0x25
 800144c:	f000 fd2e 	bl	8001eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001450:	2025      	movs	r0, #37	; 0x25
 8001452:	f000 fd47 	bl	8001ee4 <HAL_NVIC_EnableIRQ>
}
 8001456:	bf00      	nop
 8001458:	37b8      	adds	r7, #184	; 0xb8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40004c00 	.word	0x40004c00
 8001464:	40021000 	.word	0x40021000
 8001468:	40013800 	.word	0x40013800
 800146c:	48000400 	.word	0x48000400

08001470 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b0ac      	sub	sp, #176	; 0xb0
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	2288      	movs	r2, #136	; 0x88
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f00b f985 	bl	800c7a0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800149e:	d17c      	bne.n	800159a <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80014a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80014a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80014aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80014ae:	2301      	movs	r3, #1
 80014b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80014b2:	2301      	movs	r3, #1
 80014b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80014b6:	2318      	movs	r3, #24
 80014b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80014ba:	2307      	movs	r3, #7
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80014be:	2302      	movs	r3, #2
 80014c0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80014c2:	2302      	movs	r3, #2
 80014c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80014c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4618      	mov	r0, r3
 80014d2:	f002 fb67 	bl	8003ba4 <HAL_RCCEx_PeriphCLKConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80014dc:	f7ff fd80 	bl	8000fe0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e0:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <HAL_PCD_MspInit+0x134>)
 80014e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e4:	4a2f      	ldr	r2, [pc, #188]	; (80015a4 <HAL_PCD_MspInit+0x134>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ec:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <HAL_PCD_MspInit+0x134>)
 80014ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80014f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800150c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001510:	4619      	mov	r1, r3
 8001512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001516:	f000 fe7f 	bl	8002218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800151a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800151e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001534:	230a      	movs	r3, #10
 8001536:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800153e:	4619      	mov	r1, r3
 8001540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001544:	f000 fe68 	bl	8002218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_PCD_MspInit+0x134>)
 800154a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154c:	4a15      	ldr	r2, [pc, #84]	; (80015a4 <HAL_PCD_MspInit+0x134>)
 800154e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001552:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <HAL_PCD_MspInit+0x134>)
 8001556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001560:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <HAL_PCD_MspInit+0x134>)
 8001562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d114      	bne.n	8001596 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800156c:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <HAL_PCD_MspInit+0x134>)
 800156e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001570:	4a0c      	ldr	r2, [pc, #48]	; (80015a4 <HAL_PCD_MspInit+0x134>)
 8001572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001576:	6593      	str	r3, [r2, #88]	; 0x58
 8001578:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_PCD_MspInit+0x134>)
 800157a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001584:	f001 fc10 	bl	8002da8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_PCD_MspInit+0x134>)
 800158a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158c:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <HAL_PCD_MspInit+0x134>)
 800158e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001592:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001594:	e001      	b.n	800159a <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001596:	f001 fc07 	bl	8002da8 <HAL_PWREx_EnableVddUSB>
}
 800159a:	bf00      	nop
 800159c:	37b0      	adds	r7, #176	; 0xb0
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000

080015a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08e      	sub	sp, #56	; 0x38
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80015b6:	4b34      	ldr	r3, [pc, #208]	; (8001688 <HAL_InitTick+0xe0>)
 80015b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ba:	4a33      	ldr	r2, [pc, #204]	; (8001688 <HAL_InitTick+0xe0>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	6593      	str	r3, [r2, #88]	; 0x58
 80015c2:	4b31      	ldr	r3, [pc, #196]	; (8001688 <HAL_InitTick+0xe0>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015ce:	f107 0210 	add.w	r2, r7, #16
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f002 fa51 	bl	8003a80 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d103      	bne.n	80015f0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015e8:	f002 fa1e 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 80015ec:	6378      	str	r0, [r7, #52]	; 0x34
 80015ee:	e004      	b.n	80015fa <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015f0:	f002 fa1a 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 80015f4:	4603      	mov	r3, r0
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015fc:	4a23      	ldr	r2, [pc, #140]	; (800168c <HAL_InitTick+0xe4>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	0c9b      	lsrs	r3, r3, #18
 8001604:	3b01      	subs	r3, #1
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001608:	4b21      	ldr	r3, [pc, #132]	; (8001690 <HAL_InitTick+0xe8>)
 800160a:	4a22      	ldr	r2, [pc, #136]	; (8001694 <HAL_InitTick+0xec>)
 800160c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <HAL_InitTick+0xe8>)
 8001610:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001614:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001616:	4a1e      	ldr	r2, [pc, #120]	; (8001690 <HAL_InitTick+0xe8>)
 8001618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <HAL_InitTick+0xe8>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001622:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <HAL_InitTick+0xe8>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <HAL_InitTick+0xe8>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800162e:	4818      	ldr	r0, [pc, #96]	; (8001690 <HAL_InitTick+0xe8>)
 8001630:	f004 fab5 	bl	8005b9e <HAL_TIM_Base_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800163a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800163e:	2b00      	cmp	r3, #0
 8001640:	d11b      	bne.n	800167a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001642:	4813      	ldr	r0, [pc, #76]	; (8001690 <HAL_InitTick+0xe8>)
 8001644:	f004 fb0c 	bl	8005c60 <HAL_TIM_Base_Start_IT>
 8001648:	4603      	mov	r3, r0
 800164a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800164e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001652:	2b00      	cmp	r3, #0
 8001654:	d111      	bne.n	800167a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001656:	201e      	movs	r0, #30
 8001658:	f000 fc44 	bl	8001ee4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b0f      	cmp	r3, #15
 8001660:	d808      	bhi.n	8001674 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001662:	2200      	movs	r2, #0
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	201e      	movs	r0, #30
 8001668:	f000 fc20 	bl	8001eac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800166c:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <HAL_InitTick+0xf0>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e002      	b.n	800167a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800167a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800167e:	4618      	mov	r0, r3
 8001680:	3738      	adds	r7, #56	; 0x38
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40021000 	.word	0x40021000
 800168c:	431bde83 	.word	0x431bde83
 8001690:	200007e8 	.word	0x200007e8
 8001694:	40000800 	.word	0x40000800
 8001698:	20000004 	.word	0x20000004

0800169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <NMI_Handler+0x4>

080016a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <HardFault_Handler+0x4>

080016a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <MemManage_Handler+0x4>

080016ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <BusFault_Handler+0x4>

080016b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <UsageFault_Handler+0x4>

080016ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80016cc:	2020      	movs	r0, #32
 80016ce:	f001 f871 	bl	80027b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80016d2:	2040      	movs	r0, #64	; 0x40
 80016d4:	f001 f86e 	bl	80027b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80016d8:	2080      	movs	r0, #128	; 0x80
 80016da:	f001 f86b 	bl	80027b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80016de:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016e2:	f001 f867 	bl	80027b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <TIM4_IRQHandler+0x10>)
 80016f2:	f004 fb25 	bl	8005d40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200007e8 	.word	0x200007e8

08001700 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <USART1_IRQHandler+0x10>)
 8001706:	f004 fdd7 	bl	80062b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000248 	.word	0x20000248

08001714 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001718:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800171c:	f001 f84a 	bl	80027b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001720:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001724:	f001 f846 	bl	80027b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001728:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800172c:	f001 f842 	bl	80027b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001730:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001734:	f001 f83e 	bl	80027b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001738:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800173c:	f001 f83a 	bl	80027b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}

08001744 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <UART4_IRQHandler+0x10>)
 800174a:	f004 fdb5 	bl	80062b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200001c4 	.word	0x200001c4

08001758 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	return 1;
 800175c:	2301      	movs	r3, #1
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <_kill>:

int _kill(int pid, int sig)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001772:	f00a fec3 	bl	800c4fc <__errno>
 8001776:	4603      	mov	r3, r0
 8001778:	2216      	movs	r2, #22
 800177a:	601a      	str	r2, [r3, #0]
	return -1;
 800177c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_exit>:

void _exit (int status)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001790:	f04f 31ff 	mov.w	r1, #4294967295
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff ffe7 	bl	8001768 <_kill>
	while (1) {}		/* Make sure we hang here */
 800179a:	e7fe      	b.n	800179a <_exit+0x12>

0800179c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	e00a      	b.n	80017c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017ae:	f3af 8000 	nop.w
 80017b2:	4601      	mov	r1, r0
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	60ba      	str	r2, [r7, #8]
 80017ba:	b2ca      	uxtb	r2, r1
 80017bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	3301      	adds	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	dbf0      	blt.n	80017ae <_read+0x12>
	}

return len;
 80017cc:	687b      	ldr	r3, [r7, #4]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	60f8      	str	r0, [r7, #12]
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	e009      	b.n	80017fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	60ba      	str	r2, [r7, #8]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe ff17 	bl	8000624 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	3301      	adds	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	429a      	cmp	r2, r3
 8001802:	dbf1      	blt.n	80017e8 <_write+0x12>
	}
	return len;
 8001804:	687b      	ldr	r3, [r7, #4]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <_close>:

int _close(int file)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
	return -1;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001836:	605a      	str	r2, [r3, #4]
	return 0;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <_isatty>:

int _isatty(int file)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
	return 1;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
	return 0;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001880:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <_sbrk+0x5c>)
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <_sbrk+0x60>)
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <_sbrk+0x64>)
 8001896:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <_sbrk+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d207      	bcs.n	80018b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a8:	f00a fe28 	bl	800c4fc <__errno>
 80018ac:	4603      	mov	r3, r0
 80018ae:	220c      	movs	r2, #12
 80018b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	e009      	b.n	80018cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <_sbrk+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <_sbrk+0x64>)
 80018c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20018000 	.word	0x20018000
 80018d8:	00000400 	.word	0x00000400
 80018dc:	20000834 	.word	0x20000834
 80018e0:	20002bb0 	.word	0x20002bb0

080018e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <SystemInit+0x20>)
 80018ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ee:	4a05      	ldr	r2, [pc, #20]	; (8001904 <SystemInit+0x20>)
 80018f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <RequestJSONProcess>:
//static int wifi_connect(void);
//static bool WebServerProcess(void);
bool RequestJSON(uint8_t *jsonbody);
int RequestJSONProcess();

int RequestJSONProcess() {
 8001908:	b5b0      	push	{r4, r5, r7, lr}
 800190a:	b092      	sub	sp, #72	; 0x48
 800190c:	af02      	add	r7, sp, #8
	bool StopServer = false;
 800190e:	2300      	movs	r3, #0
 8001910:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint16_t serverPort = 5000;
 8001914:	f241 3388 	movw	r3, #5000	; 0x1388
 8001918:	873b      	strh	r3, [r7, #56]	; 0x38

	WIFI_Ecn_t ecn = WIFI_ECN_WPA2_PSK; // Adjust the network encryption type as per your network configuration
 800191a:	2303      	movs	r3, #3
 800191c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	char ssid[] = "ONSICOM_CRESPO"; // Replace with your WiFi SSID
 8001920:	4b36      	ldr	r3, [pc, #216]	; (80019fc <RequestJSONProcess+0xf4>)
 8001922:	f107 041c 	add.w	r4, r7, #28
 8001926:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001928:	c407      	stmia	r4!, {r0, r1, r2}
 800192a:	8023      	strh	r3, [r4, #0]
 800192c:	3402      	adds	r4, #2
 800192e:	0c1b      	lsrs	r3, r3, #16
 8001930:	7023      	strb	r3, [r4, #0]
	char password[] = "1971J1998JC2002J2009A"; // Replace with your WiFi password
 8001932:	4b33      	ldr	r3, [pc, #204]	; (8001a00 <RequestJSONProcess+0xf8>)
 8001934:	1d3c      	adds	r4, r7, #4
 8001936:	461d      	mov	r5, r3
 8001938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800193a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800193c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001940:	6020      	str	r0, [r4, #0]
 8001942:	3404      	adds	r4, #4
 8001944:	8021      	strh	r1, [r4, #0]

	if (WIFI_Init() != WIFI_STATUS_OK)
 8001946:	f007 fa9d 	bl	8008e84 <WIFI_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <RequestJSONProcess+0x4c>
		return 1;
 8001950:	2301      	movs	r3, #1
 8001952:	e04e      	b.n	80019f2 <RequestJSONProcess+0xea>
	printf("-init\r\n");
 8001954:	482b      	ldr	r0, [pc, #172]	; (8001a04 <RequestJSONProcess+0xfc>)
 8001956:	f00b f891 	bl	800ca7c <puts>

	if (WIFI_Connect(ssid, password, ecn) == WIFI_STATUS_OK) {
 800195a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800195e:	1d39      	adds	r1, r7, #4
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	4618      	mov	r0, r3
 8001966:	f007 fab9 	bl	8008edc <WIFI_Connect>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d13c      	bne.n	80019ea <RequestJSONProcess+0xe2>
		S_PrintOnSerial("-connected\r\n");
 8001970:	4825      	ldr	r0, [pc, #148]	; (8001a08 <RequestJSONProcess+0x100>)
 8001972:	f7fe fe31 	bl	80005d8 <S_PrintOnSerial>

		uint8_t serverIPAddr[4] = { 192, 168, 18, 3 };
 8001976:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <RequestJSONProcess+0x104>)
 8001978:	603b      	str	r3, [r7, #0]
		uint32_t clientSocket = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	633b      	str	r3, [r7, #48]	; 0x30

		for (int i = 0; i < 4; i++) {
 800197e:	2300      	movs	r3, #0
 8001980:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001982:	e029      	b.n	80019d8 <RequestJSONProcess+0xd0>
			if (WIFI_OpenClientConnection(clientSocket, WIFI_TCP_PROTOCOL, "",
 8001984:	463a      	mov	r2, r7
 8001986:	2300      	movs	r3, #0
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	4613      	mov	r3, r2
 8001990:	4a1f      	ldr	r2, [pc, #124]	; (8001a10 <RequestJSONProcess+0x108>)
 8001992:	2100      	movs	r1, #0
 8001994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001996:	f007 fad7 	bl	8008f48 <WIFI_OpenClientConnection>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d115      	bne.n	80019cc <RequestJSONProcess+0xc4>
					serverIPAddr, serverPort, 0) == WIFI_STATUS_OK) {
				//S_PrintOnSerial("-client\r\n");
				//Infinite bucle of API requests
				uint8_t *response = malloc(sizeof(uint8_t) * MAX_CHUNK_SIZE);
 80019a0:	2080      	movs	r0, #128	; 0x80
 80019a2:	f00a fecf 	bl	800c744 <malloc>
 80019a6:	4603      	mov	r3, r0
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c

				StopServer = RequestJSON(response);
 80019aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019ac:	f000 f83a 	bl	8001a24 <RequestJSON>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				printf("%s\r\n", (char*) response);
 80019b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019b8:	4816      	ldr	r0, [pc, #88]	; (8001a14 <RequestJSONProcess+0x10c>)
 80019ba:	f00a ffd9 	bl	800c970 <iprintf>

				free(response);
 80019be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019c0:	f00a fec8 	bl	800c754 <free>
				//Disconnect from server
				WIFI_CloseClientConnection(clientSocket);
 80019c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80019c6:	f007 faf9 	bl	8008fbc <WIFI_CloseClientConnection>
 80019ca:	e002      	b.n	80019d2 <RequestJSONProcess+0xca>
			} else {
				S_PrintOnSerial("-fail client\r\n");
 80019cc:	4812      	ldr	r0, [pc, #72]	; (8001a18 <RequestJSONProcess+0x110>)
 80019ce:	f7fe fe03 	bl	80005d8 <S_PrintOnSerial>
		for (int i = 0; i < 4; i++) {
 80019d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019d4:	3301      	adds	r3, #1
 80019d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019da:	2b03      	cmp	r3, #3
 80019dc:	ddd2      	ble.n	8001984 <RequestJSONProcess+0x7c>
			}

			//S_PrintOnSerial("-clossing client");
		}
		// Disconnect from WiFi
		WIFI_Disconnect();
 80019de:	f007 fa9f 	bl	8008f20 <WIFI_Disconnect>
		S_PrintOnSerial("-clossing wifi");
 80019e2:	480e      	ldr	r0, [pc, #56]	; (8001a1c <RequestJSONProcess+0x114>)
 80019e4:	f7fe fdf8 	bl	80005d8 <S_PrintOnSerial>
 80019e8:	e002      	b.n	80019f0 <RequestJSONProcess+0xe8>
	} else {
		S_PrintOnSerial("-fail host\r\n");
 80019ea:	480d      	ldr	r0, [pc, #52]	; (8001a20 <RequestJSONProcess+0x118>)
 80019ec:	f7fe fdf4 	bl	80005d8 <S_PrintOnSerial>
	}

	return 1;
 80019f0:	2301      	movs	r3, #1
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3740      	adds	r7, #64	; 0x40
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bdb0      	pop	{r4, r5, r7, pc}
 80019fa:	bf00      	nop
 80019fc:	0800dd6c 	.word	0x0800dd6c
 8001a00:	0800dd7c 	.word	0x0800dd7c
 8001a04:	0800dd18 	.word	0x0800dd18
 8001a08:	0800dd20 	.word	0x0800dd20
 8001a0c:	0312a8c0 	.word	0x0312a8c0
 8001a10:	0800dd30 	.word	0x0800dd30
 8001a14:	0800dd34 	.word	0x0800dd34
 8001a18:	0800dd3c 	.word	0x0800dd3c
 8001a1c:	0800dd4c 	.word	0x0800dd4c
 8001a20:	0800dd5c 	.word	0x0800dd5c

08001a24 <RequestJSON>:

bool RequestJSON(uint8_t *jsonbody) {
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 8001a2a:	af02      	add	r7, sp, #8
 8001a2c:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001a30:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8001a34:	6018      	str	r0, [r3, #0]
	uint32_t clientSocket = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
	//Send an HTTP GET request
	const char *getRequest =
 8001a3c:	4b65      	ldr	r3, [pc, #404]	; (8001bd4 <RequestJSON+0x1b0>)
 8001a3e:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
			"GET /mi-api HTTP/1.1\r\nHost: 192.168.18.3\r\n\r\n";
	uint8_t response[512]; // Adjust the response buffer size as per your requirements
	uint16_t getRequestLength = strlen(getRequest);
 8001a42:	f8d7 02a4 	ldr.w	r0, [r7, #676]	; 0x2a4
 8001a46:	f7fe fbc3 	bl	80001d0 <strlen>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	f8a7 32a2 	strh.w	r3, [r7, #674]	; 0x2a2

	// Send data in smaller chunks
	uint16_t sentDataLength = 0;
 8001a50:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001a54:	f2a3 231e 	subw	r3, r3, #542	; 0x21e
 8001a58:	2200      	movs	r2, #0
 8001a5a:	801a      	strh	r2, [r3, #0]
	uint16_t remainingDataLength = getRequestLength;
 8001a5c:	f8b7 32a2 	ldrh.w	r3, [r7, #674]	; 0x2a2
 8001a60:	f8a7 32ae 	strh.w	r3, [r7, #686]	; 0x2ae
	while (remainingDataLength > 0) {
 8001a64:	e02d      	b.n	8001ac2 <RequestJSON+0x9e>
		uint16_t chunkSize =
 8001a66:	f8b7 32ae 	ldrh.w	r3, [r7, #686]	; 0x2ae
 8001a6a:	2b80      	cmp	r3, #128	; 0x80
 8001a6c:	bf28      	it	cs
 8001a6e:	2380      	movcs	r3, #128	; 0x80
 8001a70:	f8a7 32a0 	strh.w	r3, [r7, #672]	; 0x2a0
				(remainingDataLength > MAX_CHUNK_SIZE) ?
				MAX_CHUNK_SIZE :
															remainingDataLength;
		if (WIFI_SendData(clientSocket,
 8001a74:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8001a78:	b2d8      	uxtb	r0, r3
 8001a7a:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001a7e:	f2a3 231e 	subw	r3, r3, #542	; 0x21e
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
				(uint8_t*) (getRequest + sentDataLength), chunkSize,
 8001a86:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8001a8a:	1899      	adds	r1, r3, r2
		if (WIFI_SendData(clientSocket,
 8001a8c:	f107 0392 	add.w	r3, r7, #146	; 0x92
 8001a90:	f8b7 22a0 	ldrh.w	r2, [r7, #672]	; 0x2a0
 8001a94:	f242 7410 	movw	r4, #10000	; 0x2710
 8001a98:	9400      	str	r4, [sp, #0]
 8001a9a:	f007 faab 	bl	8008ff4 <WIFI_SendData>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10a      	bne.n	8001aba <RequestJSON+0x96>
				&sentDataLength, WIFI_WRITE_TIMEOUT) == WIFI_STATUS_OK) {
			remainingDataLength -= sentDataLength;
 8001aa4:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001aa8:	f2a3 231e 	subw	r3, r3, #542	; 0x21e
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	f8b7 22ae 	ldrh.w	r2, [r7, #686]	; 0x2ae
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	f8a7 32ae 	strh.w	r3, [r7, #686]	; 0x2ae
 8001ab8:	e003      	b.n	8001ac2 <RequestJSON+0x9e>
		} else {
			printf("Failed to send the request.\n");
 8001aba:	4847      	ldr	r0, [pc, #284]	; (8001bd8 <RequestJSON+0x1b4>)
 8001abc:	f00a ffde 	bl	800ca7c <puts>
			break;
 8001ac0:	e003      	b.n	8001aca <RequestJSON+0xa6>
	while (remainingDataLength > 0) {
 8001ac2:	f8b7 32ae 	ldrh.w	r3, [r7, #686]	; 0x2ae
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1cd      	bne.n	8001a66 <RequestJSON+0x42>
		}
	}

	// Receive the response
	uint16_t receivedDataLength = 0;
 8001aca:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001ace:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	801a      	strh	r2, [r3, #0]
	uint32_t receiveTimeout = 10000; // Adjust the receive timeout value as per your requirements
 8001ad6:	f242 7310 	movw	r3, #10000	; 0x2710
 8001ada:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

	// Receive the HTTP response headers
	if (WIFI_ReceiveData(clientSocket, response, sizeof(response) - 1,
 8001ade:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8001ae2:	b2d8      	uxtb	r0, r3
 8001ae4:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001ae8:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8001aec:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	4613      	mov	r3, r2
 8001af4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001af8:	f007 fa9e 	bl	8009038 <WIFI_ReceiveData>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d15e      	bne.n	8001bc0 <RequestJSON+0x19c>
			&receivedDataLength, receiveTimeout) == WIFI_STATUS_OK) {
		response[receivedDataLength] = '\0'; // Null-terminate the response
 8001b02:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001b06:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001b12:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001b16:	2100      	movs	r1, #0
 8001b18:	5499      	strb	r1, [r3, r2]

		// Find the end of headers marker "\r\n\r\n"
		char *endOfHeaders = strstr((char*) response, "\r\n\r\n");
 8001b1a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b1e:	492f      	ldr	r1, [pc, #188]	; (8001bdc <RequestJSON+0x1b8>)
 8001b20:	4618      	mov	r0, r3
 8001b22:	f00b f8a3 	bl	800cc6c <strstr>
 8001b26:	f8c7 0298 	str.w	r0, [r7, #664]	; 0x298
		if (endOfHeaders) {
 8001b2a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d042      	beq.n	8001bb8 <RequestJSON+0x194>
			//printf("%s", endOfHeaders + 4);

			// Receive and print the remaining JSON body
			while (1) {
				uint8_t chunk[MAX_CHUNK_SIZE]; // Adjust the chunk size as per your requirements
				uint16_t receivedChunkLength = 0;
 8001b32:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001b36:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	801a      	strh	r2, [r3, #0]
				uint32_t receiveTimeout = 1000; // Adjust the receive timeout value as per your requirements
 8001b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b42:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

				// Receive a chunk of data
				if (WIFI_ReceiveData(clientSocket, chunk, MAX_CHUNK_SIZE - 1,
 8001b46:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8001b4a:	b2d8      	uxtb	r0, r3
 8001b4c:	f107 028e 	add.w	r2, r7, #142	; 0x8e
 8001b50:	f107 010c 	add.w	r1, r7, #12
 8001b54:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	227f      	movs	r2, #127	; 0x7f
 8001b5e:	f007 fa6b 	bl	8009038 <WIFI_ReceiveData>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d123      	bne.n	8001bb0 <RequestJSON+0x18c>
						&receivedChunkLength, receiveTimeout)
						== WIFI_STATUS_OK) {
					chunk[receivedChunkLength] = '\0'; // Null-terminate the chunk
 8001b68:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001b6c:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001b78:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	5499      	strb	r1, [r3, r2]

					// Print the received chunk
					//printf("%s\r\n", chunk);
					memcpy(jsonbody, chunk, receivedChunkLength + 1);
 8001b80:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001b84:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	f107 010c 	add.w	r1, r7, #12
 8001b92:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001b96:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	f00a fdf2 	bl	800c784 <memcpy>

					// Check if the chunk is the end of the response
					if (receivedChunkLength < sizeof(chunk) - 1) {
 8001ba0:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001ba4:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	2b7e      	cmp	r3, #126	; 0x7e
 8001bac:	d8c1      	bhi.n	8001b32 <RequestJSON+0x10e>
						break;
 8001bae:	e00a      	b.n	8001bc6 <RequestJSON+0x1a2>
					}
				} else {
					printf("Failed to receive the JSON body.\n");
 8001bb0:	480b      	ldr	r0, [pc, #44]	; (8001be0 <RequestJSON+0x1bc>)
 8001bb2:	f00a ff63 	bl	800ca7c <puts>
					break;
 8001bb6:	e006      	b.n	8001bc6 <RequestJSON+0x1a2>
				}
			}
		} else {
			printf("Failed to find the end of headers marker.\n");
 8001bb8:	480a      	ldr	r0, [pc, #40]	; (8001be4 <RequestJSON+0x1c0>)
 8001bba:	f00a ff5f 	bl	800ca7c <puts>
 8001bbe:	e002      	b.n	8001bc6 <RequestJSON+0x1a2>
		}
	} else {
		printf("Failed to receive the response headers.\n");
 8001bc0:	4809      	ldr	r0, [pc, #36]	; (8001be8 <RequestJSON+0x1c4>)
 8001bc2:	f00a ff5b 	bl	800ca7c <puts>
	}

	return 0;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f507 772d 	add.w	r7, r7, #692	; 0x2b4
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd90      	pop	{r4, r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	0800dd94 	.word	0x0800dd94
 8001bd8:	0800ddc4 	.word	0x0800ddc4
 8001bdc:	0800dde0 	.word	0x0800dde0
 8001be0:	0800dde8 	.word	0x0800dde8
 8001be4:	0800de0c 	.word	0x0800de0c
 8001be8:	0800de38 	.word	0x0800de38

08001bec <EXTI1_IRQHandler>:
/**
 * @brief  This function handles external lines 1interrupt request.
 * @param  None
 * @retval None
 */
void EXTI1_IRQHandler(void) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001bf0:	2002      	movs	r0, #2
 8001bf2:	f000 fddf 	bl	80027b4 <HAL_GPIO_EXTI_IRQHandler>
	portYIELD_FROM_ISR(pdFALSE);
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_GPIO_EXTI_Callback>:
/**
 * @brief  EXTI line detection callback.
 * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8001c04:	88fb      	ldrh	r3, [r7, #6]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d102      	bne.n	8001c10 <HAL_GPIO_EXTI_Callback+0x16>
	case (GPIO_PIN_1): {
		SPI_WIFI_ISR();
 8001c0a:	f007 f92b 	bl	8008e64 <SPI_WIFI_ISR>
		break;
 8001c0e:	e000      	b.n	8001c12 <HAL_GPIO_EXTI_Callback+0x18>
	}
	default: {
		break;
 8001c10:	bf00      	nop
	}
	}
	portYIELD_FROM_ISR(pdFALSE);
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <SPI3_IRQHandler>:
 * @brief  SPI3 line detection callback.
 * @param  None
 * @retval None
 */
extern SPI_HandleTypeDef hspi;
void SPI3_IRQHandler(void) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	HAL_SPI_IRQHandler(&hspi);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <SPI3_IRQHandler+0x10>)
 8001c22:	f003 fa87 	bl	8005134 <HAL_SPI_IRQHandler>
	portYIELD_FROM_ISR(pdFALSE);
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000864 	.word	0x20000864

08001c30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c34:	f7ff fe56 	bl	80018e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c38:	480c      	ldr	r0, [pc, #48]	; (8001c6c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c3a:	490d      	ldr	r1, [pc, #52]	; (8001c70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	; (8001c74 <LoopForever+0xe>)
  movs r3, #0
 8001c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c40:	e002      	b.n	8001c48 <LoopCopyDataInit>

08001c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c46:	3304      	adds	r3, #4

08001c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c4c:	d3f9      	bcc.n	8001c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c50:	4c0a      	ldr	r4, [pc, #40]	; (8001c7c <LoopForever+0x16>)
  movs r3, #0
 8001c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c54:	e001      	b.n	8001c5a <LoopFillZerobss>

08001c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c58:	3204      	adds	r2, #4

08001c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c5c:	d3fb      	bcc.n	8001c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c5e:	f00a fd49 	bl	800c6f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c62:	f7fe fdf7 	bl	8000854 <main>

08001c66 <LoopForever>:

LoopForever:
    b LoopForever
 8001c66:	e7fe      	b.n	8001c66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c70:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001c74:	0800e528 	.word	0x0800e528
  ldr r2, =_sbss
 8001c78:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001c7c:	20002bb0 	.word	0x20002bb0

08001c80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c80:	e7fe      	b.n	8001c80 <ADC1_2_IRQHandler>

08001c82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	f000 f902 	bl	8001e96 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c92:	200f      	movs	r0, #15
 8001c94:	f7ff fc88 	bl	80015a8 <HAL_InitTick>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	71fb      	strb	r3, [r7, #7]
 8001ca2:	e001      	b.n	8001ca8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ca4:	f7ff f9a2 	bl	8000fec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_IncTick+0x20>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_IncTick+0x24>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <HAL_IncTick+0x24>)
 8001cc6:	6013      	str	r3, [r2, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20000008 	.word	0x20000008
 8001cd8:	20000838 	.word	0x20000838

08001cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <HAL_GetTick+0x14>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20000838 	.word	0x20000838

08001cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cfc:	f7ff ffee 	bl	8001cdc <HAL_GetTick>
 8001d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d0c:	d005      	beq.n	8001d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <HAL_Delay+0x44>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4413      	add	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d1a:	bf00      	nop
 8001d1c:	f7ff ffde 	bl	8001cdc <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d8f7      	bhi.n	8001d1c <HAL_Delay+0x28>
  {
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000008 	.word	0x20000008

08001d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6e:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	60d3      	str	r3, [r2, #12]
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <__NVIC_GetPriorityGrouping+0x18>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	0a1b      	lsrs	r3, r3, #8
 8001d8e:	f003 0307 	and.w	r3, r3, #7
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	db0b      	blt.n	8001dca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	f003 021f 	and.w	r2, r3, #31
 8001db8:	4907      	ldr	r1, [pc, #28]	; (8001dd8 <__NVIC_EnableIRQ+0x38>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	095b      	lsrs	r3, r3, #5
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000e100 	.word	0xe000e100

08001ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	6039      	str	r1, [r7, #0]
 8001de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	db0a      	blt.n	8001e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	490c      	ldr	r1, [pc, #48]	; (8001e28 <__NVIC_SetPriority+0x4c>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	0112      	lsls	r2, r2, #4
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	440b      	add	r3, r1
 8001e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e04:	e00a      	b.n	8001e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	4908      	ldr	r1, [pc, #32]	; (8001e2c <__NVIC_SetPriority+0x50>)
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	3b04      	subs	r3, #4
 8001e14:	0112      	lsls	r2, r2, #4
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	440b      	add	r3, r1
 8001e1a:	761a      	strb	r2, [r3, #24]
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000e100 	.word	0xe000e100
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b089      	sub	sp, #36	; 0x24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f1c3 0307 	rsb	r3, r3, #7
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	bf28      	it	cs
 8001e4e:	2304      	movcs	r3, #4
 8001e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3304      	adds	r3, #4
 8001e56:	2b06      	cmp	r3, #6
 8001e58:	d902      	bls.n	8001e60 <NVIC_EncodePriority+0x30>
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3b03      	subs	r3, #3
 8001e5e:	e000      	b.n	8001e62 <NVIC_EncodePriority+0x32>
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e64:	f04f 32ff 	mov.w	r2, #4294967295
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	401a      	ands	r2, r3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e78:	f04f 31ff 	mov.w	r1, #4294967295
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e82:	43d9      	mvns	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e88:	4313      	orrs	r3, r2
         );
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3724      	adds	r7, #36	; 0x24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff ff4c 	bl	8001d3c <__NVIC_SetPriorityGrouping>
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
 8001eb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ebe:	f7ff ff61 	bl	8001d84 <__NVIC_GetPriorityGrouping>
 8001ec2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	68b9      	ldr	r1, [r7, #8]
 8001ec8:	6978      	ldr	r0, [r7, #20]
 8001eca:	f7ff ffb1 	bl	8001e30 <NVIC_EncodePriority>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff ff80 	bl	8001ddc <__NVIC_SetPriority>
}
 8001edc:	bf00      	nop
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff ff54 	bl	8001da0 <__NVIC_EnableIRQ>
}
 8001ef8:	bf00      	nop
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e0ac      	b.n	800206c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 f8b2 	bl	8002080 <DFSDM_GetChannelFromInstance>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	4a55      	ldr	r2, [pc, #340]	; (8002074 <HAL_DFSDM_ChannelInit+0x174>)
 8001f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e09f      	b.n	800206c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff f885 	bl	800103c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001f32:	4b51      	ldr	r3, [pc, #324]	; (8002078 <HAL_DFSDM_ChannelInit+0x178>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	3301      	adds	r3, #1
 8001f38:	4a4f      	ldr	r2, [pc, #316]	; (8002078 <HAL_DFSDM_ChannelInit+0x178>)
 8001f3a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001f3c:	4b4e      	ldr	r3, [pc, #312]	; (8002078 <HAL_DFSDM_ChannelInit+0x178>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d125      	bne.n	8001f90 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001f44:	4b4d      	ldr	r3, [pc, #308]	; (800207c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a4c      	ldr	r2, [pc, #304]	; (800207c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f4e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001f50:	4b4a      	ldr	r3, [pc, #296]	; (800207c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	4948      	ldr	r1, [pc, #288]	; (800207c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001f5e:	4b47      	ldr	r3, [pc, #284]	; (800207c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a46      	ldr	r2, [pc, #280]	; (800207c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f64:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001f68:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	791b      	ldrb	r3, [r3, #4]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d108      	bne.n	8001f84 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001f72:	4b42      	ldr	r3, [pc, #264]	; (800207c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	041b      	lsls	r3, r3, #16
 8001f7e:	493f      	ldr	r1, [pc, #252]	; (800207c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001f84:	4b3d      	ldr	r3, [pc, #244]	; (800207c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a3c      	ldr	r2, [pc, #240]	; (800207c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f8e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001f9e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6819      	ldr	r1, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001fae:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001fb4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 020f 	bic.w	r2, r2, #15
 8001fcc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6819      	ldr	r1, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001ff4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6899      	ldr	r1, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	3b01      	subs	r3, #1
 8002006:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f002 0207 	and.w	r2, r2, #7
 8002020:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	430a      	orrs	r2, r1
 800203c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800204c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f810 	bl	8002080 <DFSDM_GetChannelFromInstance>
 8002060:	4602      	mov	r2, r0
 8002062:	4904      	ldr	r1, [pc, #16]	; (8002074 <HAL_DFSDM_ChannelInit+0x174>)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000840 	.word	0x20000840
 8002078:	2000083c 	.word	0x2000083c
 800207c:	40016000 	.word	0x40016000

08002080 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a1c      	ldr	r2, [pc, #112]	; (80020fc <DFSDM_GetChannelFromInstance+0x7c>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d102      	bne.n	8002096 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	e02b      	b.n	80020ee <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a19      	ldr	r2, [pc, #100]	; (8002100 <DFSDM_GetChannelFromInstance+0x80>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d102      	bne.n	80020a4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800209e:	2301      	movs	r3, #1
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	e024      	b.n	80020ee <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a17      	ldr	r2, [pc, #92]	; (8002104 <DFSDM_GetChannelFromInstance+0x84>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d102      	bne.n	80020b2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80020ac:	2302      	movs	r3, #2
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	e01d      	b.n	80020ee <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a14      	ldr	r2, [pc, #80]	; (8002108 <DFSDM_GetChannelFromInstance+0x88>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d102      	bne.n	80020c0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80020ba:	2304      	movs	r3, #4
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	e016      	b.n	80020ee <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a12      	ldr	r2, [pc, #72]	; (800210c <DFSDM_GetChannelFromInstance+0x8c>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d102      	bne.n	80020ce <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80020c8:	2305      	movs	r3, #5
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	e00f      	b.n	80020ee <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a0f      	ldr	r2, [pc, #60]	; (8002110 <DFSDM_GetChannelFromInstance+0x90>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d102      	bne.n	80020dc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80020d6:	2306      	movs	r3, #6
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	e008      	b.n	80020ee <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a0d      	ldr	r2, [pc, #52]	; (8002114 <DFSDM_GetChannelFromInstance+0x94>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d102      	bne.n	80020ea <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80020e4:	2307      	movs	r3, #7
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	e001      	b.n	80020ee <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80020ea:	2303      	movs	r3, #3
 80020ec:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80020ee:	68fb      	ldr	r3, [r7, #12]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	40016000 	.word	0x40016000
 8002100:	40016020 	.word	0x40016020
 8002104:	40016040 	.word	0x40016040
 8002108:	40016080 	.word	0x40016080
 800210c:	400160a0 	.word	0x400160a0
 8002110:	400160c0 	.word	0x400160c0
 8002114:	400160e0 	.word	0x400160e0

08002118 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d008      	beq.n	8002142 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2204      	movs	r2, #4
 8002134:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e022      	b.n	8002188 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 020e 	bic.w	r2, r2, #14
 8002150:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0201 	bic.w	r2, r2, #1
 8002160:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	f003 021c 	and.w	r2, r3, #28
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	2101      	movs	r1, #1
 8002170:	fa01 f202 	lsl.w	r2, r1, r2
 8002174:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002186:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002188:	4618      	mov	r0, r3
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d005      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2204      	movs	r2, #4
 80021b0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
 80021b6:	e029      	b.n	800220c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 020e 	bic.w	r2, r2, #14
 80021c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0201 	bic.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021dc:	f003 021c 	and.w	r2, r3, #28
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	2101      	movs	r1, #1
 80021e6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ea:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	4798      	blx	r3
    }
  }
  return status;
 800220c:	7bfb      	ldrb	r3, [r7, #15]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002226:	e17f      	b.n	8002528 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	2101      	movs	r1, #1
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	fa01 f303 	lsl.w	r3, r1, r3
 8002234:	4013      	ands	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 8171 	beq.w	8002522 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b01      	cmp	r3, #1
 800224a:	d005      	beq.n	8002258 <HAL_GPIO_Init+0x40>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d130      	bne.n	80022ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800228e:	2201      	movs	r2, #1
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4013      	ands	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	091b      	lsrs	r3, r3, #4
 80022a4:	f003 0201 	and.w	r2, r3, #1
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d118      	bne.n	80022f8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80022cc:	2201      	movs	r2, #1
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4013      	ands	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	08db      	lsrs	r3, r3, #3
 80022e2:	f003 0201 	and.w	r2, r3, #1
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	2b03      	cmp	r3, #3
 8002302:	d017      	beq.n	8002334 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	2203      	movs	r2, #3
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d123      	bne.n	8002388 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	08da      	lsrs	r2, r3, #3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3208      	adds	r2, #8
 8002348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800234c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	220f      	movs	r2, #15
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4013      	ands	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	691a      	ldr	r2, [r3, #16]
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	08da      	lsrs	r2, r3, #3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3208      	adds	r2, #8
 8002382:	6939      	ldr	r1, [r7, #16]
 8002384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	2203      	movs	r2, #3
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4013      	ands	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 0203 	and.w	r2, r3, #3
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 80ac 	beq.w	8002522 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ca:	4b5f      	ldr	r3, [pc, #380]	; (8002548 <HAL_GPIO_Init+0x330>)
 80023cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ce:	4a5e      	ldr	r2, [pc, #376]	; (8002548 <HAL_GPIO_Init+0x330>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6613      	str	r3, [r2, #96]	; 0x60
 80023d6:	4b5c      	ldr	r3, [pc, #368]	; (8002548 <HAL_GPIO_Init+0x330>)
 80023d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023e2:	4a5a      	ldr	r2, [pc, #360]	; (800254c <HAL_GPIO_Init+0x334>)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	089b      	lsrs	r3, r3, #2
 80023e8:	3302      	adds	r3, #2
 80023ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	220f      	movs	r2, #15
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4013      	ands	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800240c:	d025      	beq.n	800245a <HAL_GPIO_Init+0x242>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a4f      	ldr	r2, [pc, #316]	; (8002550 <HAL_GPIO_Init+0x338>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d01f      	beq.n	8002456 <HAL_GPIO_Init+0x23e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a4e      	ldr	r2, [pc, #312]	; (8002554 <HAL_GPIO_Init+0x33c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d019      	beq.n	8002452 <HAL_GPIO_Init+0x23a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a4d      	ldr	r2, [pc, #308]	; (8002558 <HAL_GPIO_Init+0x340>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d013      	beq.n	800244e <HAL_GPIO_Init+0x236>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a4c      	ldr	r2, [pc, #304]	; (800255c <HAL_GPIO_Init+0x344>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d00d      	beq.n	800244a <HAL_GPIO_Init+0x232>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a4b      	ldr	r2, [pc, #300]	; (8002560 <HAL_GPIO_Init+0x348>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d007      	beq.n	8002446 <HAL_GPIO_Init+0x22e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a4a      	ldr	r2, [pc, #296]	; (8002564 <HAL_GPIO_Init+0x34c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d101      	bne.n	8002442 <HAL_GPIO_Init+0x22a>
 800243e:	2306      	movs	r3, #6
 8002440:	e00c      	b.n	800245c <HAL_GPIO_Init+0x244>
 8002442:	2307      	movs	r3, #7
 8002444:	e00a      	b.n	800245c <HAL_GPIO_Init+0x244>
 8002446:	2305      	movs	r3, #5
 8002448:	e008      	b.n	800245c <HAL_GPIO_Init+0x244>
 800244a:	2304      	movs	r3, #4
 800244c:	e006      	b.n	800245c <HAL_GPIO_Init+0x244>
 800244e:	2303      	movs	r3, #3
 8002450:	e004      	b.n	800245c <HAL_GPIO_Init+0x244>
 8002452:	2302      	movs	r3, #2
 8002454:	e002      	b.n	800245c <HAL_GPIO_Init+0x244>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <HAL_GPIO_Init+0x244>
 800245a:	2300      	movs	r3, #0
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	f002 0203 	and.w	r2, r2, #3
 8002462:	0092      	lsls	r2, r2, #2
 8002464:	4093      	lsls	r3, r2
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800246c:	4937      	ldr	r1, [pc, #220]	; (800254c <HAL_GPIO_Init+0x334>)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	089b      	lsrs	r3, r3, #2
 8002472:	3302      	adds	r3, #2
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800247a:	4b3b      	ldr	r3, [pc, #236]	; (8002568 <HAL_GPIO_Init+0x350>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	43db      	mvns	r3, r3
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4013      	ands	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4313      	orrs	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800249e:	4a32      	ldr	r2, [pc, #200]	; (8002568 <HAL_GPIO_Init+0x350>)
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024a4:	4b30      	ldr	r3, [pc, #192]	; (8002568 <HAL_GPIO_Init+0x350>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024c8:	4a27      	ldr	r2, [pc, #156]	; (8002568 <HAL_GPIO_Init+0x350>)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024ce:	4b26      	ldr	r3, [pc, #152]	; (8002568 <HAL_GPIO_Init+0x350>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	4013      	ands	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024f2:	4a1d      	ldr	r2, [pc, #116]	; (8002568 <HAL_GPIO_Init+0x350>)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024f8:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <HAL_GPIO_Init+0x350>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	43db      	mvns	r3, r3
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4013      	ands	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4313      	orrs	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800251c:	4a12      	ldr	r2, [pc, #72]	; (8002568 <HAL_GPIO_Init+0x350>)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	3301      	adds	r3, #1
 8002526:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	fa22 f303 	lsr.w	r3, r2, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	f47f ae78 	bne.w	8002228 <HAL_GPIO_Init+0x10>
  }
}
 8002538:	bf00      	nop
 800253a:	bf00      	nop
 800253c:	371c      	adds	r7, #28
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	40010000 	.word	0x40010000
 8002550:	48000400 	.word	0x48000400
 8002554:	48000800 	.word	0x48000800
 8002558:	48000c00 	.word	0x48000c00
 800255c:	48001000 	.word	0x48001000
 8002560:	48001400 	.word	0x48001400
 8002564:	48001800 	.word	0x48001800
 8002568:	40010400 	.word	0x40010400

0800256c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800256c:	b480      	push	{r7}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800257a:	e0cd      	b.n	8002718 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800257c:	2201      	movs	r2, #1
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80c0 	beq.w	8002712 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002592:	4a68      	ldr	r2, [pc, #416]	; (8002734 <HAL_GPIO_DeInit+0x1c8>)
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	089b      	lsrs	r3, r3, #2
 8002598:	3302      	adds	r3, #2
 800259a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	220f      	movs	r2, #15
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	4013      	ands	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025ba:	d025      	beq.n	8002608 <HAL_GPIO_DeInit+0x9c>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a5e      	ldr	r2, [pc, #376]	; (8002738 <HAL_GPIO_DeInit+0x1cc>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d01f      	beq.n	8002604 <HAL_GPIO_DeInit+0x98>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a5d      	ldr	r2, [pc, #372]	; (800273c <HAL_GPIO_DeInit+0x1d0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d019      	beq.n	8002600 <HAL_GPIO_DeInit+0x94>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a5c      	ldr	r2, [pc, #368]	; (8002740 <HAL_GPIO_DeInit+0x1d4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d013      	beq.n	80025fc <HAL_GPIO_DeInit+0x90>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a5b      	ldr	r2, [pc, #364]	; (8002744 <HAL_GPIO_DeInit+0x1d8>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d00d      	beq.n	80025f8 <HAL_GPIO_DeInit+0x8c>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a5a      	ldr	r2, [pc, #360]	; (8002748 <HAL_GPIO_DeInit+0x1dc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d007      	beq.n	80025f4 <HAL_GPIO_DeInit+0x88>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a59      	ldr	r2, [pc, #356]	; (800274c <HAL_GPIO_DeInit+0x1e0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d101      	bne.n	80025f0 <HAL_GPIO_DeInit+0x84>
 80025ec:	2306      	movs	r3, #6
 80025ee:	e00c      	b.n	800260a <HAL_GPIO_DeInit+0x9e>
 80025f0:	2307      	movs	r3, #7
 80025f2:	e00a      	b.n	800260a <HAL_GPIO_DeInit+0x9e>
 80025f4:	2305      	movs	r3, #5
 80025f6:	e008      	b.n	800260a <HAL_GPIO_DeInit+0x9e>
 80025f8:	2304      	movs	r3, #4
 80025fa:	e006      	b.n	800260a <HAL_GPIO_DeInit+0x9e>
 80025fc:	2303      	movs	r3, #3
 80025fe:	e004      	b.n	800260a <HAL_GPIO_DeInit+0x9e>
 8002600:	2302      	movs	r3, #2
 8002602:	e002      	b.n	800260a <HAL_GPIO_DeInit+0x9e>
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <HAL_GPIO_DeInit+0x9e>
 8002608:	2300      	movs	r3, #0
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	f002 0203 	and.w	r2, r2, #3
 8002610:	0092      	lsls	r2, r2, #2
 8002612:	4093      	lsls	r3, r2
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	429a      	cmp	r2, r3
 8002618:	d132      	bne.n	8002680 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800261a:	4b4d      	ldr	r3, [pc, #308]	; (8002750 <HAL_GPIO_DeInit+0x1e4>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	43db      	mvns	r3, r3
 8002622:	494b      	ldr	r1, [pc, #300]	; (8002750 <HAL_GPIO_DeInit+0x1e4>)
 8002624:	4013      	ands	r3, r2
 8002626:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002628:	4b49      	ldr	r3, [pc, #292]	; (8002750 <HAL_GPIO_DeInit+0x1e4>)
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	43db      	mvns	r3, r3
 8002630:	4947      	ldr	r1, [pc, #284]	; (8002750 <HAL_GPIO_DeInit+0x1e4>)
 8002632:	4013      	ands	r3, r2
 8002634:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002636:	4b46      	ldr	r3, [pc, #280]	; (8002750 <HAL_GPIO_DeInit+0x1e4>)
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	43db      	mvns	r3, r3
 800263e:	4944      	ldr	r1, [pc, #272]	; (8002750 <HAL_GPIO_DeInit+0x1e4>)
 8002640:	4013      	ands	r3, r2
 8002642:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002644:	4b42      	ldr	r3, [pc, #264]	; (8002750 <HAL_GPIO_DeInit+0x1e4>)
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	43db      	mvns	r3, r3
 800264c:	4940      	ldr	r1, [pc, #256]	; (8002750 <HAL_GPIO_DeInit+0x1e4>)
 800264e:	4013      	ands	r3, r2
 8002650:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	220f      	movs	r2, #15
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002662:	4a34      	ldr	r2, [pc, #208]	; (8002734 <HAL_GPIO_DeInit+0x1c8>)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	3302      	adds	r3, #2
 800266a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	43da      	mvns	r2, r3
 8002672:	4830      	ldr	r0, [pc, #192]	; (8002734 <HAL_GPIO_DeInit+0x1c8>)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	089b      	lsrs	r3, r3, #2
 8002678:	400a      	ands	r2, r1
 800267a:	3302      	adds	r3, #2
 800267c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	2103      	movs	r1, #3
 800268a:	fa01 f303 	lsl.w	r3, r1, r3
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	08da      	lsrs	r2, r3, #3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3208      	adds	r2, #8
 800269c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	220f      	movs	r2, #15
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	08d2      	lsrs	r2, r2, #3
 80026b4:	4019      	ands	r1, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3208      	adds	r2, #8
 80026ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	2103      	movs	r1, #3
 80026c8:	fa01 f303 	lsl.w	r3, r1, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	401a      	ands	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	2101      	movs	r1, #1
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	fa01 f303 	lsl.w	r3, r1, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	401a      	ands	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	2103      	movs	r1, #3
 80026f2:	fa01 f303 	lsl.w	r3, r1, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	401a      	ands	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002702:	2101      	movs	r1, #1
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	fa01 f303 	lsl.w	r3, r1, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	401a      	ands	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	3301      	adds	r3, #1
 8002716:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	f47f af2b 	bne.w	800257c <HAL_GPIO_DeInit+0x10>
  }
}
 8002726:	bf00      	nop
 8002728:	bf00      	nop
 800272a:	371c      	adds	r7, #28
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	40010000 	.word	0x40010000
 8002738:	48000400 	.word	0x48000400
 800273c:	48000800 	.word	0x48000800
 8002740:	48000c00 	.word	0x48000c00
 8002744:	48001000 	.word	0x48001000
 8002748:	48001400 	.word	0x48001400
 800274c:	48001800 	.word	0x48001800
 8002750:	40010400 	.word	0x40010400

08002754 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	887b      	ldrh	r3, [r7, #2]
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
 8002770:	e001      	b.n	8002776 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002772:	2300      	movs	r3, #0
 8002774:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002776:	7bfb      	ldrb	r3, [r7, #15]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	807b      	strh	r3, [r7, #2]
 8002790:	4613      	mov	r3, r2
 8002792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002794:	787b      	ldrb	r3, [r7, #1]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800279a:	887a      	ldrh	r2, [r7, #2]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027a0:	e002      	b.n	80027a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027a2:	887a      	ldrh	r2, [r7, #2]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027be:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027c0:	695a      	ldr	r2, [r3, #20]
 80027c2:	88fb      	ldrh	r3, [r7, #6]
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d006      	beq.n	80027d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027ca:	4a05      	ldr	r2, [pc, #20]	; (80027e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027cc:	88fb      	ldrh	r3, [r7, #6]
 80027ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff fa11 	bl	8001bfa <HAL_GPIO_EXTI_Callback>
  }
}
 80027d8:	bf00      	nop
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40010400 	.word	0x40010400

080027e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e081      	b.n	80028fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d106      	bne.n	8002810 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7fe fc7a 	bl	8001104 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2224      	movs	r2, #36	; 0x24
 8002814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0201 	bic.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002834:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002844:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d107      	bne.n	800285e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	e006      	b.n	800286c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800286a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	2b02      	cmp	r3, #2
 8002872:	d104      	bne.n	800287e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800287c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800288c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002890:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69d9      	ldr	r1, [r3, #28]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1a      	ldr	r2, [r3, #32]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b20      	cmp	r3, #32
 8002916:	d138      	bne.n	800298a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002922:	2302      	movs	r3, #2
 8002924:	e032      	b.n	800298c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2224      	movs	r2, #36	; 0x24
 8002932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0201 	bic.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002954:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6819      	ldr	r1, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f042 0201 	orr.w	r2, r2, #1
 8002974:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	e000      	b.n	800298c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800298a:	2302      	movs	r3, #2
  }
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b20      	cmp	r3, #32
 80029ac:	d139      	bne.n	8002a22 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e033      	b.n	8002a24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2224      	movs	r2, #36	; 0x24
 80029c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0201 	bic.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	021b      	lsls	r3, r3, #8
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0201 	orr.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2220      	movs	r2, #32
 8002a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e000      	b.n	8002a24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a22:	2302      	movs	r3, #2
  }
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a32:	b08f      	sub	sp, #60	; 0x3c
 8002a34:	af0a      	add	r7, sp, #40	; 0x28
 8002a36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e116      	b.n	8002c70 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d106      	bne.n	8002a62 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7fe fd07 	bl	8001470 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2203      	movs	r2, #3
 8002a66:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d102      	bne.n	8002a7c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f004 fd17 	bl	80074b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	687e      	ldr	r6, [r7, #4]
 8002a8e:	466d      	mov	r5, sp
 8002a90:	f106 0410 	add.w	r4, r6, #16
 8002a94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002aa0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002aa4:	1d33      	adds	r3, r6, #4
 8002aa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aa8:	6838      	ldr	r0, [r7, #0]
 8002aaa:	f004 fcd7 	bl	800745c <USB_CoreInit>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0d7      	b.n	8002c70 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f004 fd05 	bl	80074d6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002acc:	2300      	movs	r3, #0
 8002ace:	73fb      	strb	r3, [r7, #15]
 8002ad0:	e04a      	b.n	8002b68 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ad2:	7bfa      	ldrb	r2, [r7, #15]
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	333d      	adds	r3, #61	; 0x3d
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ae6:	7bfa      	ldrb	r2, [r7, #15]
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	440b      	add	r3, r1
 8002af4:	333c      	adds	r3, #60	; 0x3c
 8002af6:	7bfa      	ldrb	r2, [r7, #15]
 8002af8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002afa:	7bfa      	ldrb	r2, [r7, #15]
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	b298      	uxth	r0, r3
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	3344      	adds	r3, #68	; 0x44
 8002b0e:	4602      	mov	r2, r0
 8002b10:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b12:	7bfa      	ldrb	r2, [r7, #15]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	3340      	adds	r3, #64	; 0x40
 8002b22:	2200      	movs	r2, #0
 8002b24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b26:	7bfa      	ldrb	r2, [r7, #15]
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	3348      	adds	r3, #72	; 0x48
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4413      	add	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	334c      	adds	r3, #76	; 0x4c
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b4e:	7bfa      	ldrb	r2, [r7, #15]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	3354      	adds	r3, #84	; 0x54
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	3301      	adds	r3, #1
 8002b66:	73fb      	strb	r3, [r7, #15]
 8002b68:	7bfa      	ldrb	r2, [r7, #15]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d3af      	bcc.n	8002ad2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b72:	2300      	movs	r3, #0
 8002b74:	73fb      	strb	r3, [r7, #15]
 8002b76:	e044      	b.n	8002c02 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b78:	7bfa      	ldrb	r2, [r7, #15]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b8e:	7bfa      	ldrb	r2, [r7, #15]
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	4413      	add	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ba4:	7bfa      	ldrb	r2, [r7, #15]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bba:	7bfa      	ldrb	r2, [r7, #15]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bd0:	7bfa      	ldrb	r2, [r7, #15]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002be6:	7bfa      	ldrb	r2, [r7, #15]
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4413      	add	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	73fb      	strb	r3, [r7, #15]
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d3b5      	bcc.n	8002b78 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	603b      	str	r3, [r7, #0]
 8002c12:	687e      	ldr	r6, [r7, #4]
 8002c14:	466d      	mov	r5, sp
 8002c16:	f106 0410 	add.w	r4, r6, #16
 8002c1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c26:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c2a:	1d33      	adds	r3, r6, #4
 8002c2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c2e:	6838      	ldr	r0, [r7, #0]
 8002c30:	f004 fc9e 	bl	8007570 <USB_DevInit>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d005      	beq.n	8002c46 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e014      	b.n	8002c70 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d102      	bne.n	8002c64 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f80a 	bl	8002c78 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f004 fe4a 	bl	8007902 <USB_DevDisconnect>

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c78 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002caa:	f043 0303 	orr.w	r3, r3, #3
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a04      	ldr	r2, [pc, #16]	; (8002cdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cce:	6013      	str	r3, [r2, #0]
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40007000 	.word	0x40007000

08002ce0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ce4:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40007000 	.word	0x40007000

08002cfc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d0a:	d130      	bne.n	8002d6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d0c:	4b23      	ldr	r3, [pc, #140]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d18:	d038      	beq.n	8002d8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d1a:	4b20      	ldr	r3, [pc, #128]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d22:	4a1e      	ldr	r2, [pc, #120]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d2a:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2232      	movs	r2, #50	; 0x32
 8002d30:	fb02 f303 	mul.w	r3, r2, r3
 8002d34:	4a1b      	ldr	r2, [pc, #108]	; (8002da4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	0c9b      	lsrs	r3, r3, #18
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d40:	e002      	b.n	8002d48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	3b01      	subs	r3, #1
 8002d46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d48:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d54:	d102      	bne.n	8002d5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1f2      	bne.n	8002d42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d5c:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d68:	d110      	bne.n	8002d8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e00f      	b.n	8002d8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d7a:	d007      	beq.n	8002d8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d7c:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d84:	4a05      	ldr	r2, [pc, #20]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40007000 	.word	0x40007000
 8002da0:	20000000 	.word	0x20000000
 8002da4:	431bde83 	.word	0x431bde83

08002da8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002db2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002db6:	6053      	str	r3, [r2, #4]
}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40007000 	.word	0x40007000

08002dc8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002dd0:	f7fe ff84 	bl	8001cdc <HAL_GetTick>
 8002dd4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e063      	b.n	8002ea8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10b      	bne.n	8002e04 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7fe f9e3 	bl	80011c0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002dfa:	f241 3188 	movw	r1, #5000	; 0x1388
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f858 	bl	8002eb4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	021a      	lsls	r2, r3, #8
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	2120      	movs	r1, #32
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f850 	bl	8002ed0 <QSPI_WaitFlagStateUntilTimeout>
 8002e30:	4603      	mov	r3, r0
 8002e32:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002e34:	7afb      	ldrb	r3, [r7, #11]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d131      	bne.n	8002e9e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e44:	f023 0310 	bic.w	r3, r3, #16
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6852      	ldr	r2, [r2, #4]
 8002e4c:	0611      	lsls	r1, r2, #24
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68d2      	ldr	r2, [r2, #12]
 8002e52:	4311      	orrs	r1, r2
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <HAL_QSPI_Init+0xe8>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6912      	ldr	r2, [r2, #16]
 8002e6a:	0411      	lsls	r1, r2, #16
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6952      	ldr	r2, [r2, #20]
 8002e70:	4311      	orrs	r1, r2
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6992      	ldr	r2, [r2, #24]
 8002e76:	4311      	orrs	r1, r2
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002ea6:	7afb      	ldrb	r3, [r7, #11]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	ffe0f8fe 	.word	0xffe0f8fe

08002eb4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	603b      	str	r3, [r7, #0]
 8002edc:	4613      	mov	r3, r2
 8002ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002ee0:	e01a      	b.n	8002f18 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d016      	beq.n	8002f18 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eea:	f7fe fef7 	bl	8001cdc <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d302      	bcc.n	8002f00 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10b      	bne.n	8002f18 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2204      	movs	r2, #4
 8002f04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0c:	f043 0201 	orr.w	r2, r3, #1
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e00e      	b.n	8002f36 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	bf14      	ite	ne
 8002f26:	2301      	movne	r3, #1
 8002f28:	2300      	moveq	r3, #0
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d1d6      	bne.n	8002ee2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e3ca      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f52:	4b97      	ldr	r3, [pc, #604]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f5c:	4b94      	ldr	r3, [pc, #592]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 80e4 	beq.w	800313c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d007      	beq.n	8002f8a <HAL_RCC_OscConfig+0x4a>
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	2b0c      	cmp	r3, #12
 8002f7e:	f040 808b 	bne.w	8003098 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	f040 8087 	bne.w	8003098 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f8a:	4b89      	ldr	r3, [pc, #548]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x62>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e3a2      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1a      	ldr	r2, [r3, #32]
 8002fa6:	4b82      	ldr	r3, [pc, #520]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d004      	beq.n	8002fbc <HAL_RCC_OscConfig+0x7c>
 8002fb2:	4b7f      	ldr	r3, [pc, #508]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fba:	e005      	b.n	8002fc8 <HAL_RCC_OscConfig+0x88>
 8002fbc:	4b7c      	ldr	r3, [pc, #496]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d223      	bcs.n	8003014 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 fd87 	bl	8003ae4 <RCC_SetFlashLatencyFromMSIRange>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e383      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fe0:	4b73      	ldr	r3, [pc, #460]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a72      	ldr	r2, [pc, #456]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002fe6:	f043 0308 	orr.w	r3, r3, #8
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	4b70      	ldr	r3, [pc, #448]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	496d      	ldr	r1, [pc, #436]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ffe:	4b6c      	ldr	r3, [pc, #432]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	021b      	lsls	r3, r3, #8
 800300c:	4968      	ldr	r1, [pc, #416]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800300e:	4313      	orrs	r3, r2
 8003010:	604b      	str	r3, [r1, #4]
 8003012:	e025      	b.n	8003060 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003014:	4b66      	ldr	r3, [pc, #408]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a65      	ldr	r2, [pc, #404]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800301a:	f043 0308 	orr.w	r3, r3, #8
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	4b63      	ldr	r3, [pc, #396]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	4960      	ldr	r1, [pc, #384]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003032:	4b5f      	ldr	r3, [pc, #380]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	021b      	lsls	r3, r3, #8
 8003040:	495b      	ldr	r1, [pc, #364]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003042:	4313      	orrs	r3, r2
 8003044:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d109      	bne.n	8003060 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	4618      	mov	r0, r3
 8003052:	f000 fd47 	bl	8003ae4 <RCC_SetFlashLatencyFromMSIRange>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e343      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003060:	f000 fc4a 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 8003064:	4602      	mov	r2, r0
 8003066:	4b52      	ldr	r3, [pc, #328]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	091b      	lsrs	r3, r3, #4
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	4950      	ldr	r1, [pc, #320]	; (80031b4 <HAL_RCC_OscConfig+0x274>)
 8003072:	5ccb      	ldrb	r3, [r1, r3]
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
 800307c:	4a4e      	ldr	r2, [pc, #312]	; (80031b8 <HAL_RCC_OscConfig+0x278>)
 800307e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003080:	4b4e      	ldr	r3, [pc, #312]	; (80031bc <HAL_RCC_OscConfig+0x27c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f7fe fa8f 	bl	80015a8 <HAL_InitTick>
 800308a:	4603      	mov	r3, r0
 800308c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d052      	beq.n	800313a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	e327      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d032      	beq.n	8003106 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030a0:	4b43      	ldr	r3, [pc, #268]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a42      	ldr	r2, [pc, #264]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030ac:	f7fe fe16 	bl	8001cdc <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030b4:	f7fe fe12 	bl	8001cdc <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e310      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030c6:	4b3a      	ldr	r3, [pc, #232]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030d2:	4b37      	ldr	r3, [pc, #220]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a36      	ldr	r2, [pc, #216]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030d8:	f043 0308 	orr.w	r3, r3, #8
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	4b34      	ldr	r3, [pc, #208]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	4931      	ldr	r1, [pc, #196]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030f0:	4b2f      	ldr	r3, [pc, #188]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	021b      	lsls	r3, r3, #8
 80030fe:	492c      	ldr	r1, [pc, #176]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003100:	4313      	orrs	r3, r2
 8003102:	604b      	str	r3, [r1, #4]
 8003104:	e01a      	b.n	800313c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003106:	4b2a      	ldr	r3, [pc, #168]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a29      	ldr	r2, [pc, #164]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800310c:	f023 0301 	bic.w	r3, r3, #1
 8003110:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003112:	f7fe fde3 	bl	8001cdc <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800311a:	f7fe fddf 	bl	8001cdc <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e2dd      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800312c:	4b20      	ldr	r3, [pc, #128]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f0      	bne.n	800311a <HAL_RCC_OscConfig+0x1da>
 8003138:	e000      	b.n	800313c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800313a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d074      	beq.n	8003232 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2b08      	cmp	r3, #8
 800314c:	d005      	beq.n	800315a <HAL_RCC_OscConfig+0x21a>
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b0c      	cmp	r3, #12
 8003152:	d10e      	bne.n	8003172 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2b03      	cmp	r3, #3
 8003158:	d10b      	bne.n	8003172 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800315a:	4b15      	ldr	r3, [pc, #84]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d064      	beq.n	8003230 <HAL_RCC_OscConfig+0x2f0>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d160      	bne.n	8003230 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e2ba      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800317a:	d106      	bne.n	800318a <HAL_RCC_OscConfig+0x24a>
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a0b      	ldr	r2, [pc, #44]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	e026      	b.n	80031d8 <HAL_RCC_OscConfig+0x298>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003192:	d115      	bne.n	80031c0 <HAL_RCC_OscConfig+0x280>
 8003194:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a05      	ldr	r2, [pc, #20]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800319a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a02      	ldr	r2, [pc, #8]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80031a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	e014      	b.n	80031d8 <HAL_RCC_OscConfig+0x298>
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000
 80031b4:	0800e388 	.word	0x0800e388
 80031b8:	20000000 	.word	0x20000000
 80031bc:	20000004 	.word	0x20000004
 80031c0:	4ba0      	ldr	r3, [pc, #640]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a9f      	ldr	r2, [pc, #636]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80031c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	4b9d      	ldr	r3, [pc, #628]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a9c      	ldr	r2, [pc, #624]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80031d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d013      	beq.n	8003208 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fe fd7c 	bl	8001cdc <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e8:	f7fe fd78 	bl	8001cdc <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	; 0x64
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e276      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031fa:	4b92      	ldr	r3, [pc, #584]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0x2a8>
 8003206:	e014      	b.n	8003232 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fe fd68 	bl	8001cdc <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003210:	f7fe fd64 	bl	8001cdc <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	; 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e262      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003222:	4b88      	ldr	r3, [pc, #544]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x2d0>
 800322e:	e000      	b.n	8003232 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d060      	beq.n	8003300 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	2b04      	cmp	r3, #4
 8003242:	d005      	beq.n	8003250 <HAL_RCC_OscConfig+0x310>
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	2b0c      	cmp	r3, #12
 8003248:	d119      	bne.n	800327e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2b02      	cmp	r3, #2
 800324e:	d116      	bne.n	800327e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003250:	4b7c      	ldr	r3, [pc, #496]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <HAL_RCC_OscConfig+0x328>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e23f      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003268:	4b76      	ldr	r3, [pc, #472]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	061b      	lsls	r3, r3, #24
 8003276:	4973      	ldr	r1, [pc, #460]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003278:	4313      	orrs	r3, r2
 800327a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800327c:	e040      	b.n	8003300 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d023      	beq.n	80032ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003286:	4b6f      	ldr	r3, [pc, #444]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a6e      	ldr	r2, [pc, #440]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 800328c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003292:	f7fe fd23 	bl	8001cdc <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800329a:	f7fe fd1f 	bl	8001cdc <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e21d      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032ac:	4b65      	ldr	r3, [pc, #404]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f0      	beq.n	800329a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b8:	4b62      	ldr	r3, [pc, #392]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	061b      	lsls	r3, r3, #24
 80032c6:	495f      	ldr	r1, [pc, #380]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	604b      	str	r3, [r1, #4]
 80032cc:	e018      	b.n	8003300 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ce:	4b5d      	ldr	r3, [pc, #372]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a5c      	ldr	r2, [pc, #368]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80032d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032da:	f7fe fcff 	bl	8001cdc <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e2:	f7fe fcfb 	bl	8001cdc <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e1f9      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032f4:	4b53      	ldr	r3, [pc, #332]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1f0      	bne.n	80032e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b00      	cmp	r3, #0
 800330a:	d03c      	beq.n	8003386 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01c      	beq.n	800334e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003314:	4b4b      	ldr	r3, [pc, #300]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800331a:	4a4a      	ldr	r2, [pc, #296]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003324:	f7fe fcda 	bl	8001cdc <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800332c:	f7fe fcd6 	bl	8001cdc <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e1d4      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800333e:	4b41      	ldr	r3, [pc, #260]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003340:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0ef      	beq.n	800332c <HAL_RCC_OscConfig+0x3ec>
 800334c:	e01b      	b.n	8003386 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800334e:	4b3d      	ldr	r3, [pc, #244]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003354:	4a3b      	ldr	r2, [pc, #236]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003356:	f023 0301 	bic.w	r3, r3, #1
 800335a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335e:	f7fe fcbd 	bl	8001cdc <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003366:	f7fe fcb9 	bl	8001cdc <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e1b7      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003378:	4b32      	ldr	r3, [pc, #200]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 800337a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1ef      	bne.n	8003366 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 80a6 	beq.w	80034e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003394:	2300      	movs	r3, #0
 8003396:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003398:	4b2a      	ldr	r3, [pc, #168]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 800339a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10d      	bne.n	80033c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a4:	4b27      	ldr	r3, [pc, #156]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80033a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a8:	4a26      	ldr	r2, [pc, #152]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80033aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ae:	6593      	str	r3, [r2, #88]	; 0x58
 80033b0:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80033b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033bc:	2301      	movs	r3, #1
 80033be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c0:	4b21      	ldr	r3, [pc, #132]	; (8003448 <HAL_RCC_OscConfig+0x508>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d118      	bne.n	80033fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033cc:	4b1e      	ldr	r3, [pc, #120]	; (8003448 <HAL_RCC_OscConfig+0x508>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a1d      	ldr	r2, [pc, #116]	; (8003448 <HAL_RCC_OscConfig+0x508>)
 80033d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d8:	f7fe fc80 	bl	8001cdc <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e0:	f7fe fc7c 	bl	8001cdc <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e17a      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f2:	4b15      	ldr	r3, [pc, #84]	; (8003448 <HAL_RCC_OscConfig+0x508>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d108      	bne.n	8003418 <HAL_RCC_OscConfig+0x4d8>
 8003406:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340c:	4a0d      	ldr	r2, [pc, #52]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003416:	e029      	b.n	800346c <HAL_RCC_OscConfig+0x52c>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b05      	cmp	r3, #5
 800341e:	d115      	bne.n	800344c <HAL_RCC_OscConfig+0x50c>
 8003420:	4b08      	ldr	r3, [pc, #32]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003426:	4a07      	ldr	r2, [pc, #28]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003428:	f043 0304 	orr.w	r3, r3, #4
 800342c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003430:	4b04      	ldr	r3, [pc, #16]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003436:	4a03      	ldr	r2, [pc, #12]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003440:	e014      	b.n	800346c <HAL_RCC_OscConfig+0x52c>
 8003442:	bf00      	nop
 8003444:	40021000 	.word	0x40021000
 8003448:	40007000 	.word	0x40007000
 800344c:	4b9c      	ldr	r3, [pc, #624]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003452:	4a9b      	ldr	r2, [pc, #620]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003454:	f023 0301 	bic.w	r3, r3, #1
 8003458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800345c:	4b98      	ldr	r3, [pc, #608]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003462:	4a97      	ldr	r2, [pc, #604]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003464:	f023 0304 	bic.w	r3, r3, #4
 8003468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d016      	beq.n	80034a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003474:	f7fe fc32 	bl	8001cdc <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800347a:	e00a      	b.n	8003492 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347c:	f7fe fc2e 	bl	8001cdc <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	f241 3288 	movw	r2, #5000	; 0x1388
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e12a      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003492:	4b8b      	ldr	r3, [pc, #556]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0ed      	beq.n	800347c <HAL_RCC_OscConfig+0x53c>
 80034a0:	e015      	b.n	80034ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a2:	f7fe fc1b 	bl	8001cdc <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034a8:	e00a      	b.n	80034c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034aa:	f7fe fc17 	bl	8001cdc <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e113      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034c0:	4b7f      	ldr	r3, [pc, #508]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1ed      	bne.n	80034aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ce:	7ffb      	ldrb	r3, [r7, #31]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d105      	bne.n	80034e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d4:	4b7a      	ldr	r3, [pc, #488]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80034d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d8:	4a79      	ldr	r2, [pc, #484]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80034da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034de:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 80fe 	beq.w	80036e6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	f040 80d0 	bne.w	8003694 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034f4:	4b72      	ldr	r3, [pc, #456]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f003 0203 	and.w	r2, r3, #3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003504:	429a      	cmp	r2, r3
 8003506:	d130      	bne.n	800356a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	3b01      	subs	r3, #1
 8003514:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003516:	429a      	cmp	r2, r3
 8003518:	d127      	bne.n	800356a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003524:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003526:	429a      	cmp	r2, r3
 8003528:	d11f      	bne.n	800356a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003534:	2a07      	cmp	r2, #7
 8003536:	bf14      	ite	ne
 8003538:	2201      	movne	r2, #1
 800353a:	2200      	moveq	r2, #0
 800353c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800353e:	4293      	cmp	r3, r2
 8003540:	d113      	bne.n	800356a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354c:	085b      	lsrs	r3, r3, #1
 800354e:	3b01      	subs	r3, #1
 8003550:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003552:	429a      	cmp	r2, r3
 8003554:	d109      	bne.n	800356a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	085b      	lsrs	r3, r3, #1
 8003562:	3b01      	subs	r3, #1
 8003564:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d06e      	beq.n	8003648 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b0c      	cmp	r3, #12
 800356e:	d069      	beq.n	8003644 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003570:	4b53      	ldr	r3, [pc, #332]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d105      	bne.n	8003588 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800357c:	4b50      	ldr	r3, [pc, #320]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0ad      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800358c:	4b4c      	ldr	r3, [pc, #304]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a4b      	ldr	r2, [pc, #300]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003596:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003598:	f7fe fba0 	bl	8001cdc <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a0:	f7fe fb9c 	bl	8001cdc <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e09a      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b2:	4b43      	ldr	r3, [pc, #268]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035be:	4b40      	ldr	r3, [pc, #256]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	4b40      	ldr	r3, [pc, #256]	; (80036c4 <HAL_RCC_OscConfig+0x784>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035ce:	3a01      	subs	r2, #1
 80035d0:	0112      	lsls	r2, r2, #4
 80035d2:	4311      	orrs	r1, r2
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035d8:	0212      	lsls	r2, r2, #8
 80035da:	4311      	orrs	r1, r2
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035e0:	0852      	lsrs	r2, r2, #1
 80035e2:	3a01      	subs	r2, #1
 80035e4:	0552      	lsls	r2, r2, #21
 80035e6:	4311      	orrs	r1, r2
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035ec:	0852      	lsrs	r2, r2, #1
 80035ee:	3a01      	subs	r2, #1
 80035f0:	0652      	lsls	r2, r2, #25
 80035f2:	4311      	orrs	r1, r2
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035f8:	0912      	lsrs	r2, r2, #4
 80035fa:	0452      	lsls	r2, r2, #17
 80035fc:	430a      	orrs	r2, r1
 80035fe:	4930      	ldr	r1, [pc, #192]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003600:	4313      	orrs	r3, r2
 8003602:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003604:	4b2e      	ldr	r3, [pc, #184]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a2d      	ldr	r2, [pc, #180]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800360a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800360e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003610:	4b2b      	ldr	r3, [pc, #172]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	4a2a      	ldr	r2, [pc, #168]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800361a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800361c:	f7fe fb5e 	bl	8001cdc <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003624:	f7fe fb5a 	bl	8001cdc <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e058      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003636:	4b22      	ldr	r3, [pc, #136]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f0      	beq.n	8003624 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003642:	e050      	b.n	80036e6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e04f      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003648:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d148      	bne.n	80036e6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003654:	4b1a      	ldr	r3, [pc, #104]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a19      	ldr	r2, [pc, #100]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800365a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800365e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003660:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4a16      	ldr	r2, [pc, #88]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800366a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800366c:	f7fe fb36 	bl	8001cdc <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003674:	f7fe fb32 	bl	8001cdc <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e030      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003686:	4b0e      	ldr	r3, [pc, #56]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCC_OscConfig+0x734>
 8003692:	e028      	b.n	80036e6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	2b0c      	cmp	r3, #12
 8003698:	d023      	beq.n	80036e2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369a:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a08      	ldr	r2, [pc, #32]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80036a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a6:	f7fe fb19 	bl	8001cdc <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ac:	e00c      	b.n	80036c8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ae:	f7fe fb15 	bl	8001cdc <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d905      	bls.n	80036c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e013      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
 80036c0:	40021000 	.word	0x40021000
 80036c4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036c8:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <HAL_RCC_OscConfig+0x7b0>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1ec      	bne.n	80036ae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036d4:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_RCC_OscConfig+0x7b0>)
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	4905      	ldr	r1, [pc, #20]	; (80036f0 <HAL_RCC_OscConfig+0x7b0>)
 80036da:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <HAL_RCC_OscConfig+0x7b4>)
 80036dc:	4013      	ands	r3, r2
 80036de:	60cb      	str	r3, [r1, #12]
 80036e0:	e001      	b.n	80036e6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3720      	adds	r7, #32
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40021000 	.word	0x40021000
 80036f4:	feeefffc 	.word	0xfeeefffc

080036f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0e7      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800370c:	4b75      	ldr	r3, [pc, #468]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d910      	bls.n	800373c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371a:	4b72      	ldr	r3, [pc, #456]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f023 0207 	bic.w	r2, r3, #7
 8003722:	4970      	ldr	r1, [pc, #448]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	4313      	orrs	r3, r2
 8003728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800372a:	4b6e      	ldr	r3, [pc, #440]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0cf      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d010      	beq.n	800376a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	4b66      	ldr	r3, [pc, #408]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003754:	429a      	cmp	r2, r3
 8003756:	d908      	bls.n	800376a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003758:	4b63      	ldr	r3, [pc, #396]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	4960      	ldr	r1, [pc, #384]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003766:	4313      	orrs	r3, r2
 8003768:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d04c      	beq.n	8003810 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b03      	cmp	r3, #3
 800377c:	d107      	bne.n	800378e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377e:	4b5a      	ldr	r3, [pc, #360]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d121      	bne.n	80037ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e0a6      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d107      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003796:	4b54      	ldr	r3, [pc, #336]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d115      	bne.n	80037ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e09a      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d107      	bne.n	80037be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037ae:	4b4e      	ldr	r3, [pc, #312]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d109      	bne.n	80037ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e08e      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037be:	4b4a      	ldr	r3, [pc, #296]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e086      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037ce:	4b46      	ldr	r3, [pc, #280]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f023 0203 	bic.w	r2, r3, #3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	4943      	ldr	r1, [pc, #268]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e0:	f7fe fa7c 	bl	8001cdc <HAL_GetTick>
 80037e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e6:	e00a      	b.n	80037fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e8:	f7fe fa78 	bl	8001cdc <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e06e      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fe:	4b3a      	ldr	r3, [pc, #232]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 020c 	and.w	r2, r3, #12
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	429a      	cmp	r2, r3
 800380e:	d1eb      	bne.n	80037e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d010      	beq.n	800383e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	4b31      	ldr	r3, [pc, #196]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003828:	429a      	cmp	r2, r3
 800382a:	d208      	bcs.n	800383e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800382c:	4b2e      	ldr	r3, [pc, #184]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	492b      	ldr	r1, [pc, #172]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 800383a:	4313      	orrs	r3, r2
 800383c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800383e:	4b29      	ldr	r3, [pc, #164]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d210      	bcs.n	800386e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384c:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f023 0207 	bic.w	r2, r3, #7
 8003854:	4923      	ldr	r1, [pc, #140]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	4313      	orrs	r3, r2
 800385a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800385c:	4b21      	ldr	r3, [pc, #132]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d001      	beq.n	800386e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e036      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b00      	cmp	r3, #0
 8003878:	d008      	beq.n	800388c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800387a:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	4918      	ldr	r1, [pc, #96]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003888:	4313      	orrs	r3, r2
 800388a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b00      	cmp	r3, #0
 8003896:	d009      	beq.n	80038ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003898:	4b13      	ldr	r3, [pc, #76]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4910      	ldr	r1, [pc, #64]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038ac:	f000 f824 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	091b      	lsrs	r3, r3, #4
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	490b      	ldr	r1, [pc, #44]	; (80038ec <HAL_RCC_ClockConfig+0x1f4>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
 80038c8:	4a09      	ldr	r2, [pc, #36]	; (80038f0 <HAL_RCC_ClockConfig+0x1f8>)
 80038ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038cc:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <HAL_RCC_ClockConfig+0x1fc>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fd fe69 	bl	80015a8 <HAL_InitTick>
 80038d6:	4603      	mov	r3, r0
 80038d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80038da:	7afb      	ldrb	r3, [r7, #11]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40022000 	.word	0x40022000
 80038e8:	40021000 	.word	0x40021000
 80038ec:	0800e388 	.word	0x0800e388
 80038f0:	20000000 	.word	0x20000000
 80038f4:	20000004 	.word	0x20000004

080038f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b089      	sub	sp, #36	; 0x24
 80038fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
 8003902:	2300      	movs	r3, #0
 8003904:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003906:	4b3e      	ldr	r3, [pc, #248]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003910:	4b3b      	ldr	r3, [pc, #236]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0x34>
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	2b0c      	cmp	r3, #12
 8003924:	d121      	bne.n	800396a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d11e      	bne.n	800396a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800392c:	4b34      	ldr	r3, [pc, #208]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b00      	cmp	r3, #0
 8003936:	d107      	bne.n	8003948 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003938:	4b31      	ldr	r3, [pc, #196]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 800393a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800393e:	0a1b      	lsrs	r3, r3, #8
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	61fb      	str	r3, [r7, #28]
 8003946:	e005      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003948:	4b2d      	ldr	r3, [pc, #180]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	091b      	lsrs	r3, r3, #4
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003954:	4a2b      	ldr	r2, [pc, #172]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800395c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10d      	bne.n	8003980 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003968:	e00a      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b04      	cmp	r3, #4
 800396e:	d102      	bne.n	8003976 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003970:	4b25      	ldr	r3, [pc, #148]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x110>)
 8003972:	61bb      	str	r3, [r7, #24]
 8003974:	e004      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2b08      	cmp	r3, #8
 800397a:	d101      	bne.n	8003980 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800397c:	4b23      	ldr	r3, [pc, #140]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x114>)
 800397e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	2b0c      	cmp	r3, #12
 8003984:	d134      	bne.n	80039f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003986:	4b1e      	ldr	r3, [pc, #120]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d003      	beq.n	800399e <HAL_RCC_GetSysClockFreq+0xa6>
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b03      	cmp	r3, #3
 800399a:	d003      	beq.n	80039a4 <HAL_RCC_GetSysClockFreq+0xac>
 800399c:	e005      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800399e:	4b1a      	ldr	r3, [pc, #104]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x110>)
 80039a0:	617b      	str	r3, [r7, #20]
      break;
 80039a2:	e005      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039a4:	4b19      	ldr	r3, [pc, #100]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x114>)
 80039a6:	617b      	str	r3, [r7, #20]
      break;
 80039a8:	e002      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	617b      	str	r3, [r7, #20]
      break;
 80039ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039b0:	4b13      	ldr	r3, [pc, #76]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	3301      	adds	r3, #1
 80039bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039be:	4b10      	ldr	r3, [pc, #64]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	0a1b      	lsrs	r3, r3, #8
 80039c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	fb03 f202 	mul.w	r2, r3, r2
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039d6:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	0e5b      	lsrs	r3, r3, #25
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	3301      	adds	r3, #1
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039f0:	69bb      	ldr	r3, [r7, #24]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3724      	adds	r7, #36	; 0x24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40021000 	.word	0x40021000
 8003a04:	0800e3a0 	.word	0x0800e3a0
 8003a08:	00f42400 	.word	0x00f42400
 8003a0c:	007a1200 	.word	0x007a1200

08003a10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a14:	4b03      	ldr	r3, [pc, #12]	; (8003a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a16:	681b      	ldr	r3, [r3, #0]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	20000000 	.word	0x20000000

08003a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a2c:	f7ff fff0 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a30:	4602      	mov	r2, r0
 8003a32:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	4904      	ldr	r1, [pc, #16]	; (8003a50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a3e:	5ccb      	ldrb	r3, [r1, r3]
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	0800e398 	.word	0x0800e398

08003a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a58:	f7ff ffda 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	0adb      	lsrs	r3, r3, #11
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	4904      	ldr	r1, [pc, #16]	; (8003a7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a6a:	5ccb      	ldrb	r3, [r1, r3]
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	0800e398 	.word	0x0800e398

08003a80 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	220f      	movs	r2, #15
 8003a8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003a90:	4b12      	ldr	r3, [pc, #72]	; (8003adc <HAL_RCC_GetClockConfig+0x5c>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 0203 	and.w	r2, r3, #3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003a9c:	4b0f      	ldr	r3, [pc, #60]	; (8003adc <HAL_RCC_GetClockConfig+0x5c>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <HAL_RCC_GetClockConfig+0x5c>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003ab4:	4b09      	ldr	r3, [pc, #36]	; (8003adc <HAL_RCC_GetClockConfig+0x5c>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	08db      	lsrs	r3, r3, #3
 8003aba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003ac2:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <HAL_RCC_GetClockConfig+0x60>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0207 	and.w	r2, r3, #7
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	601a      	str	r2, [r3, #0]
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	40022000 	.word	0x40022000

08003ae4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003aec:	2300      	movs	r3, #0
 8003aee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003af0:	4b2a      	ldr	r3, [pc, #168]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003afc:	f7ff f8f0 	bl	8002ce0 <HAL_PWREx_GetVoltageRange>
 8003b00:	6178      	str	r0, [r7, #20]
 8003b02:	e014      	b.n	8003b2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b04:	4b25      	ldr	r3, [pc, #148]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b08:	4a24      	ldr	r2, [pc, #144]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b10:	4b22      	ldr	r3, [pc, #136]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b1c:	f7ff f8e0 	bl	8002ce0 <HAL_PWREx_GetVoltageRange>
 8003b20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b22:	4b1e      	ldr	r3, [pc, #120]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b26:	4a1d      	ldr	r2, [pc, #116]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b2c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b34:	d10b      	bne.n	8003b4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b80      	cmp	r3, #128	; 0x80
 8003b3a:	d919      	bls.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2ba0      	cmp	r3, #160	; 0xa0
 8003b40:	d902      	bls.n	8003b48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b42:	2302      	movs	r3, #2
 8003b44:	613b      	str	r3, [r7, #16]
 8003b46:	e013      	b.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b48:	2301      	movs	r3, #1
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	e010      	b.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b80      	cmp	r3, #128	; 0x80
 8003b52:	d902      	bls.n	8003b5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b54:	2303      	movs	r3, #3
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	e00a      	b.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b80      	cmp	r3, #128	; 0x80
 8003b5e:	d102      	bne.n	8003b66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b60:	2302      	movs	r3, #2
 8003b62:	613b      	str	r3, [r7, #16]
 8003b64:	e004      	b.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b70      	cmp	r3, #112	; 0x70
 8003b6a:	d101      	bne.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f023 0207 	bic.w	r2, r3, #7
 8003b78:	4909      	ldr	r1, [pc, #36]	; (8003ba0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b80:	4b07      	ldr	r3, [pc, #28]	; (8003ba0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d001      	beq.n	8003b92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	40022000 	.word	0x40022000

08003ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bac:	2300      	movs	r3, #0
 8003bae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d041      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bc4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bc8:	d02a      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003bca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bce:	d824      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bd4:	d008      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003bd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bda:	d81e      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003be0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003be4:	d010      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003be6:	e018      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003be8:	4b86      	ldr	r3, [pc, #536]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	4a85      	ldr	r2, [pc, #532]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bf4:	e015      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 facb 	bl	8004198 <RCCEx_PLLSAI1_Config>
 8003c02:	4603      	mov	r3, r0
 8003c04:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c06:	e00c      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3320      	adds	r3, #32
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fbb6 	bl	8004380 <RCCEx_PLLSAI2_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c18:	e003      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	74fb      	strb	r3, [r7, #19]
      break;
 8003c1e:	e000      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c22:	7cfb      	ldrb	r3, [r7, #19]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10b      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c28:	4b76      	ldr	r3, [pc, #472]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c36:	4973      	ldr	r1, [pc, #460]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c3e:	e001      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c40:	7cfb      	ldrb	r3, [r7, #19]
 8003c42:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d041      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c58:	d02a      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c5e:	d824      	bhi.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c64:	d008      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c6a:	d81e      	bhi.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c74:	d010      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c76:	e018      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c78:	4b62      	ldr	r3, [pc, #392]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	4a61      	ldr	r2, [pc, #388]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c82:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c84:	e015      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 fa83 	bl	8004198 <RCCEx_PLLSAI1_Config>
 8003c92:	4603      	mov	r3, r0
 8003c94:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c96:	e00c      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3320      	adds	r3, #32
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 fb6e 	bl	8004380 <RCCEx_PLLSAI2_Config>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ca8:	e003      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	74fb      	strb	r3, [r7, #19]
      break;
 8003cae:	e000      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003cb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cb2:	7cfb      	ldrb	r3, [r7, #19]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10b      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cb8:	4b52      	ldr	r3, [pc, #328]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cc6:	494f      	ldr	r1, [pc, #316]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cce:	e001      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd0:	7cfb      	ldrb	r3, [r7, #19]
 8003cd2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80a0 	beq.w	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ce6:	4b47      	ldr	r3, [pc, #284]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e000      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00d      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cfc:	4b41      	ldr	r3, [pc, #260]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d00:	4a40      	ldr	r2, [pc, #256]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d06:	6593      	str	r3, [r2, #88]	; 0x58
 8003d08:	4b3e      	ldr	r3, [pc, #248]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d14:	2301      	movs	r3, #1
 8003d16:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d18:	4b3b      	ldr	r3, [pc, #236]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a3a      	ldr	r2, [pc, #232]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d24:	f7fd ffda 	bl	8001cdc <HAL_GetTick>
 8003d28:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d2a:	e009      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2c:	f7fd ffd6 	bl	8001cdc <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d902      	bls.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	74fb      	strb	r3, [r7, #19]
        break;
 8003d3e:	e005      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d40:	4b31      	ldr	r3, [pc, #196]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0ef      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d4c:	7cfb      	ldrb	r3, [r7, #19]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d15c      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d52:	4b2c      	ldr	r3, [pc, #176]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d5c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d01f      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d019      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d70:	4b24      	ldr	r3, [pc, #144]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d7c:	4b21      	ldr	r3, [pc, #132]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d82:	4a20      	ldr	r2, [pc, #128]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d8c:	4b1d      	ldr	r3, [pc, #116]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d92:	4a1c      	ldr	r2, [pc, #112]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d9c:	4a19      	ldr	r2, [pc, #100]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d016      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dae:	f7fd ff95 	bl	8001cdc <HAL_GetTick>
 8003db2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003db4:	e00b      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db6:	f7fd ff91 	bl	8001cdc <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d902      	bls.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	74fb      	strb	r3, [r7, #19]
            break;
 8003dcc:	e006      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dce:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0ec      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10c      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003de2:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003df2:	4904      	ldr	r1, [pc, #16]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003dfa:	e009      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dfc:	7cfb      	ldrb	r3, [r7, #19]
 8003dfe:	74bb      	strb	r3, [r7, #18]
 8003e00:	e006      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003e02:	bf00      	nop
 8003e04:	40021000 	.word	0x40021000
 8003e08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0c:	7cfb      	ldrb	r3, [r7, #19]
 8003e0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e10:	7c7b      	ldrb	r3, [r7, #17]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d105      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e16:	4b9e      	ldr	r3, [pc, #632]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1a:	4a9d      	ldr	r2, [pc, #628]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e2e:	4b98      	ldr	r3, [pc, #608]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e34:	f023 0203 	bic.w	r2, r3, #3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	4994      	ldr	r1, [pc, #592]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00a      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e50:	4b8f      	ldr	r3, [pc, #572]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e56:	f023 020c 	bic.w	r2, r3, #12
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5e:	498c      	ldr	r1, [pc, #560]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e72:	4b87      	ldr	r3, [pc, #540]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	4983      	ldr	r1, [pc, #524]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e94:	4b7e      	ldr	r3, [pc, #504]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea2:	497b      	ldr	r1, [pc, #492]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0310 	and.w	r3, r3, #16
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003eb6:	4b76      	ldr	r3, [pc, #472]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec4:	4972      	ldr	r1, [pc, #456]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ed8:	4b6d      	ldr	r3, [pc, #436]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ede:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee6:	496a      	ldr	r1, [pc, #424]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003efa:	4b65      	ldr	r3, [pc, #404]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f08:	4961      	ldr	r1, [pc, #388]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f1c:	4b5c      	ldr	r3, [pc, #368]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2a:	4959      	ldr	r1, [pc, #356]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f3e:	4b54      	ldr	r3, [pc, #336]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4c:	4950      	ldr	r1, [pc, #320]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f60:	4b4b      	ldr	r3, [pc, #300]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6e:	4948      	ldr	r1, [pc, #288]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f82:	4b43      	ldr	r3, [pc, #268]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f90:	493f      	ldr	r1, [pc, #252]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d028      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fa4:	4b3a      	ldr	r3, [pc, #232]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003faa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fb2:	4937      	ldr	r1, [pc, #220]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fc2:	d106      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fc4:	4b32      	ldr	r3, [pc, #200]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	4a31      	ldr	r2, [pc, #196]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fce:	60d3      	str	r3, [r2, #12]
 8003fd0:	e011      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fda:	d10c      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 f8d8 	bl	8004198 <RCCEx_PLLSAI1_Config>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fec:	7cfb      	ldrb	r3, [r7, #19]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003ff2:	7cfb      	ldrb	r3, [r7, #19]
 8003ff4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d028      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004002:	4b23      	ldr	r3, [pc, #140]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004008:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004010:	491f      	ldr	r1, [pc, #124]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004012:	4313      	orrs	r3, r2
 8004014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004020:	d106      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004022:	4b1b      	ldr	r3, [pc, #108]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	4a1a      	ldr	r2, [pc, #104]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004028:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800402c:	60d3      	str	r3, [r2, #12]
 800402e:	e011      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004034:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004038:	d10c      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3304      	adds	r3, #4
 800403e:	2101      	movs	r1, #1
 8004040:	4618      	mov	r0, r3
 8004042:	f000 f8a9 	bl	8004198 <RCCEx_PLLSAI1_Config>
 8004046:	4603      	mov	r3, r0
 8004048:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800404a:	7cfb      	ldrb	r3, [r7, #19]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004050:	7cfb      	ldrb	r3, [r7, #19]
 8004052:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d02b      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004066:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800406e:	4908      	ldr	r1, [pc, #32]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800407a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800407e:	d109      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004080:	4b03      	ldr	r3, [pc, #12]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	4a02      	ldr	r2, [pc, #8]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800408a:	60d3      	str	r3, [r2, #12]
 800408c:	e014      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800408e:	bf00      	nop
 8004090:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004098:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800409c:	d10c      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	3304      	adds	r3, #4
 80040a2:	2101      	movs	r1, #1
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 f877 	bl	8004198 <RCCEx_PLLSAI1_Config>
 80040aa:	4603      	mov	r3, r0
 80040ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040ae:	7cfb      	ldrb	r3, [r7, #19]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80040b4:	7cfb      	ldrb	r3, [r7, #19]
 80040b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d02f      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040c4:	4b2b      	ldr	r3, [pc, #172]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040d2:	4928      	ldr	r1, [pc, #160]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040e2:	d10d      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3304      	adds	r3, #4
 80040e8:	2102      	movs	r1, #2
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 f854 	bl	8004198 <RCCEx_PLLSAI1_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040f4:	7cfb      	ldrb	r3, [r7, #19]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d014      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040fa:	7cfb      	ldrb	r3, [r7, #19]
 80040fc:	74bb      	strb	r3, [r7, #18]
 80040fe:	e011      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004108:	d10c      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3320      	adds	r3, #32
 800410e:	2102      	movs	r1, #2
 8004110:	4618      	mov	r0, r3
 8004112:	f000 f935 	bl	8004380 <RCCEx_PLLSAI2_Config>
 8004116:	4603      	mov	r3, r0
 8004118:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800411a:	7cfb      	ldrb	r3, [r7, #19]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004120:	7cfb      	ldrb	r3, [r7, #19]
 8004122:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004130:	4b10      	ldr	r3, [pc, #64]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004136:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800413e:	490d      	ldr	r1, [pc, #52]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00b      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004152:	4b08      	ldr	r3, [pc, #32]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004158:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004162:	4904      	ldr	r1, [pc, #16]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800416a:	7cbb      	ldrb	r3, [r7, #18]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40021000 	.word	0x40021000

08004178 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800417c:	4b05      	ldr	r3, [pc, #20]	; (8004194 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a04      	ldr	r2, [pc, #16]	; (8004194 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004182:	f043 0304 	orr.w	r3, r3, #4
 8004186:	6013      	str	r3, [r2, #0]
}
 8004188:	bf00      	nop
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40021000 	.word	0x40021000

08004198 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041a6:	4b75      	ldr	r3, [pc, #468]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d018      	beq.n	80041e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80041b2:	4b72      	ldr	r3, [pc, #456]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f003 0203 	and.w	r2, r3, #3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d10d      	bne.n	80041de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
       ||
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d009      	beq.n	80041de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80041ca:	4b6c      	ldr	r3, [pc, #432]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	091b      	lsrs	r3, r3, #4
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	1c5a      	adds	r2, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
       ||
 80041da:	429a      	cmp	r2, r3
 80041dc:	d047      	beq.n	800426e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
 80041e2:	e044      	b.n	800426e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d018      	beq.n	800421e <RCCEx_PLLSAI1_Config+0x86>
 80041ec:	2b03      	cmp	r3, #3
 80041ee:	d825      	bhi.n	800423c <RCCEx_PLLSAI1_Config+0xa4>
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d002      	beq.n	80041fa <RCCEx_PLLSAI1_Config+0x62>
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d009      	beq.n	800420c <RCCEx_PLLSAI1_Config+0x74>
 80041f8:	e020      	b.n	800423c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041fa:	4b60      	ldr	r3, [pc, #384]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d11d      	bne.n	8004242 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800420a:	e01a      	b.n	8004242 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800420c:	4b5b      	ldr	r3, [pc, #364]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004214:	2b00      	cmp	r3, #0
 8004216:	d116      	bne.n	8004246 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800421c:	e013      	b.n	8004246 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800421e:	4b57      	ldr	r3, [pc, #348]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10f      	bne.n	800424a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800422a:	4b54      	ldr	r3, [pc, #336]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d109      	bne.n	800424a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800423a:	e006      	b.n	800424a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	73fb      	strb	r3, [r7, #15]
      break;
 8004240:	e004      	b.n	800424c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004242:	bf00      	nop
 8004244:	e002      	b.n	800424c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004246:	bf00      	nop
 8004248:	e000      	b.n	800424c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800424a:	bf00      	nop
    }

    if(status == HAL_OK)
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10d      	bne.n	800426e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004252:	4b4a      	ldr	r3, [pc, #296]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6819      	ldr	r1, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	3b01      	subs	r3, #1
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	430b      	orrs	r3, r1
 8004268:	4944      	ldr	r1, [pc, #272]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 800426a:	4313      	orrs	r3, r2
 800426c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d17d      	bne.n	8004370 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004274:	4b41      	ldr	r3, [pc, #260]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a40      	ldr	r2, [pc, #256]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 800427a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800427e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004280:	f7fd fd2c 	bl	8001cdc <HAL_GetTick>
 8004284:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004286:	e009      	b.n	800429c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004288:	f7fd fd28 	bl	8001cdc <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d902      	bls.n	800429c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	73fb      	strb	r3, [r7, #15]
        break;
 800429a:	e005      	b.n	80042a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800429c:	4b37      	ldr	r3, [pc, #220]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1ef      	bne.n	8004288 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d160      	bne.n	8004370 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d111      	bne.n	80042d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042b4:	4b31      	ldr	r3, [pc, #196]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80042bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6892      	ldr	r2, [r2, #8]
 80042c4:	0211      	lsls	r1, r2, #8
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	68d2      	ldr	r2, [r2, #12]
 80042ca:	0912      	lsrs	r2, r2, #4
 80042cc:	0452      	lsls	r2, r2, #17
 80042ce:	430a      	orrs	r2, r1
 80042d0:	492a      	ldr	r1, [pc, #168]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	610b      	str	r3, [r1, #16]
 80042d6:	e027      	b.n	8004328 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d112      	bne.n	8004304 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042de:	4b27      	ldr	r3, [pc, #156]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80042e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6892      	ldr	r2, [r2, #8]
 80042ee:	0211      	lsls	r1, r2, #8
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6912      	ldr	r2, [r2, #16]
 80042f4:	0852      	lsrs	r2, r2, #1
 80042f6:	3a01      	subs	r2, #1
 80042f8:	0552      	lsls	r2, r2, #21
 80042fa:	430a      	orrs	r2, r1
 80042fc:	491f      	ldr	r1, [pc, #124]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	610b      	str	r3, [r1, #16]
 8004302:	e011      	b.n	8004328 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004304:	4b1d      	ldr	r3, [pc, #116]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800430c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6892      	ldr	r2, [r2, #8]
 8004314:	0211      	lsls	r1, r2, #8
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6952      	ldr	r2, [r2, #20]
 800431a:	0852      	lsrs	r2, r2, #1
 800431c:	3a01      	subs	r2, #1
 800431e:	0652      	lsls	r2, r2, #25
 8004320:	430a      	orrs	r2, r1
 8004322:	4916      	ldr	r1, [pc, #88]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004324:	4313      	orrs	r3, r2
 8004326:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004328:	4b14      	ldr	r3, [pc, #80]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a13      	ldr	r2, [pc, #76]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 800432e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004332:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004334:	f7fd fcd2 	bl	8001cdc <HAL_GetTick>
 8004338:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800433a:	e009      	b.n	8004350 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800433c:	f7fd fcce 	bl	8001cdc <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d902      	bls.n	8004350 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	73fb      	strb	r3, [r7, #15]
          break;
 800434e:	e005      	b.n	800435c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004350:	4b0a      	ldr	r3, [pc, #40]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0ef      	beq.n	800433c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004362:	4b06      	ldr	r3, [pc, #24]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004364:	691a      	ldr	r2, [r3, #16]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	4904      	ldr	r1, [pc, #16]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 800436c:	4313      	orrs	r3, r2
 800436e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004370:	7bfb      	ldrb	r3, [r7, #15]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40021000 	.word	0x40021000

08004380 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800438e:	4b6a      	ldr	r3, [pc, #424]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d018      	beq.n	80043cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800439a:	4b67      	ldr	r3, [pc, #412]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f003 0203 	and.w	r2, r3, #3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d10d      	bne.n	80043c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
       ||
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d009      	beq.n	80043c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80043b2:	4b61      	ldr	r3, [pc, #388]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	091b      	lsrs	r3, r3, #4
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
       ||
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d047      	beq.n	8004456 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	73fb      	strb	r3, [r7, #15]
 80043ca:	e044      	b.n	8004456 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b03      	cmp	r3, #3
 80043d2:	d018      	beq.n	8004406 <RCCEx_PLLSAI2_Config+0x86>
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d825      	bhi.n	8004424 <RCCEx_PLLSAI2_Config+0xa4>
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d002      	beq.n	80043e2 <RCCEx_PLLSAI2_Config+0x62>
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d009      	beq.n	80043f4 <RCCEx_PLLSAI2_Config+0x74>
 80043e0:	e020      	b.n	8004424 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043e2:	4b55      	ldr	r3, [pc, #340]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d11d      	bne.n	800442a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043f2:	e01a      	b.n	800442a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043f4:	4b50      	ldr	r3, [pc, #320]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d116      	bne.n	800442e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004404:	e013      	b.n	800442e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004406:	4b4c      	ldr	r3, [pc, #304]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10f      	bne.n	8004432 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004412:	4b49      	ldr	r3, [pc, #292]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d109      	bne.n	8004432 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004422:	e006      	b.n	8004432 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	73fb      	strb	r3, [r7, #15]
      break;
 8004428:	e004      	b.n	8004434 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800442a:	bf00      	nop
 800442c:	e002      	b.n	8004434 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800442e:	bf00      	nop
 8004430:	e000      	b.n	8004434 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004432:	bf00      	nop
    }

    if(status == HAL_OK)
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10d      	bne.n	8004456 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800443a:	4b3f      	ldr	r3, [pc, #252]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6819      	ldr	r1, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	3b01      	subs	r3, #1
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	430b      	orrs	r3, r1
 8004450:	4939      	ldr	r1, [pc, #228]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004452:	4313      	orrs	r3, r2
 8004454:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004456:	7bfb      	ldrb	r3, [r7, #15]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d167      	bne.n	800452c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800445c:	4b36      	ldr	r3, [pc, #216]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a35      	ldr	r2, [pc, #212]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004462:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004466:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004468:	f7fd fc38 	bl	8001cdc <HAL_GetTick>
 800446c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800446e:	e009      	b.n	8004484 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004470:	f7fd fc34 	bl	8001cdc <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d902      	bls.n	8004484 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	73fb      	strb	r3, [r7, #15]
        break;
 8004482:	e005      	b.n	8004490 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004484:	4b2c      	ldr	r3, [pc, #176]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1ef      	bne.n	8004470 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d14a      	bne.n	800452c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d111      	bne.n	80044c0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800449c:	4b26      	ldr	r3, [pc, #152]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80044a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6892      	ldr	r2, [r2, #8]
 80044ac:	0211      	lsls	r1, r2, #8
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	68d2      	ldr	r2, [r2, #12]
 80044b2:	0912      	lsrs	r2, r2, #4
 80044b4:	0452      	lsls	r2, r2, #17
 80044b6:	430a      	orrs	r2, r1
 80044b8:	491f      	ldr	r1, [pc, #124]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	614b      	str	r3, [r1, #20]
 80044be:	e011      	b.n	80044e4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044c0:	4b1d      	ldr	r3, [pc, #116]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6892      	ldr	r2, [r2, #8]
 80044d0:	0211      	lsls	r1, r2, #8
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6912      	ldr	r2, [r2, #16]
 80044d6:	0852      	lsrs	r2, r2, #1
 80044d8:	3a01      	subs	r2, #1
 80044da:	0652      	lsls	r2, r2, #25
 80044dc:	430a      	orrs	r2, r1
 80044de:	4916      	ldr	r1, [pc, #88]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80044e4:	4b14      	ldr	r3, [pc, #80]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a13      	ldr	r2, [pc, #76]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f0:	f7fd fbf4 	bl	8001cdc <HAL_GetTick>
 80044f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044f6:	e009      	b.n	800450c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044f8:	f7fd fbf0 	bl	8001cdc <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d902      	bls.n	800450c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	73fb      	strb	r3, [r7, #15]
          break;
 800450a:	e005      	b.n	8004518 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800450c:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0ef      	beq.n	80044f8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800451e:	4b06      	ldr	r3, [pc, #24]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004520:	695a      	ldr	r2, [r3, #20]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	4904      	ldr	r1, [pc, #16]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004528:	4313      	orrs	r3, r2
 800452a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800452c:	7bfb      	ldrb	r3, [r7, #15]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	40021000 	.word	0x40021000

0800453c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e095      	b.n	800467a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	2b00      	cmp	r3, #0
 8004554:	d108      	bne.n	8004568 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800455e:	d009      	beq.n	8004574 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	61da      	str	r2, [r3, #28]
 8004566:	e005      	b.n	8004574 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fc fe5a 	bl	8001248 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045b4:	d902      	bls.n	80045bc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	e002      	b.n	80045c2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80045bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045c0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80045ca:	d007      	beq.n	80045dc <HAL_SPI_Init+0xa0>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045d4:	d002      	beq.n	80045dc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004614:	431a      	orrs	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461e:	ea42 0103 	orr.w	r1, r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004626:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	0c1b      	lsrs	r3, r3, #16
 8004638:	f003 0204 	and.w	r2, r3, #4
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	f003 0310 	and.w	r3, r3, #16
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004658:	ea42 0103 	orr.w	r1, r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b082      	sub	sp, #8
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e01a      	b.n	80046ca <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046aa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7fc fe0f 	bl	80012d0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b088      	sub	sp, #32
 80046d6:	af02      	add	r7, sp, #8
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	603b      	str	r3, [r7, #0]
 80046de:	4613      	mov	r3, r2
 80046e0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ee:	d112      	bne.n	8004716 <HAL_SPI_Receive+0x44>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10e      	bne.n	8004716 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2204      	movs	r2, #4
 80046fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004700:	88fa      	ldrh	r2, [r7, #6]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	4613      	mov	r3, r2
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	68b9      	ldr	r1, [r7, #8]
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 f910 	bl	8004932 <HAL_SPI_TransmitReceive>
 8004712:	4603      	mov	r3, r0
 8004714:	e109      	b.n	800492a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_SPI_Receive+0x52>
 8004720:	2302      	movs	r3, #2
 8004722:	e102      	b.n	800492a <HAL_SPI_Receive+0x258>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800472c:	f7fd fad6 	bl	8001cdc <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b01      	cmp	r3, #1
 800473c:	d002      	beq.n	8004744 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800473e:	2302      	movs	r3, #2
 8004740:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004742:	e0e9      	b.n	8004918 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <HAL_SPI_Receive+0x7e>
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d102      	bne.n	8004756 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004754:	e0e0      	b.n	8004918 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2204      	movs	r2, #4
 800475a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	88fa      	ldrh	r2, [r7, #6]
 800476e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	88fa      	ldrh	r2, [r7, #6]
 8004776:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047a0:	d908      	bls.n	80047b4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047b0:	605a      	str	r2, [r3, #4]
 80047b2:	e007      	b.n	80047c4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047c2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047cc:	d10f      	bne.n	80047ee <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f8:	2b40      	cmp	r3, #64	; 0x40
 80047fa:	d007      	beq.n	800480c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800480a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004814:	d867      	bhi.n	80048e6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004816:	e030      	b.n	800487a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b01      	cmp	r3, #1
 8004824:	d117      	bne.n	8004856 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f103 020c 	add.w	r2, r3, #12
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	7812      	ldrb	r2, [r2, #0]
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004848:	b29b      	uxth	r3, r3
 800484a:	3b01      	subs	r3, #1
 800484c:	b29a      	uxth	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004854:	e011      	b.n	800487a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004856:	f7fd fa41 	bl	8001cdc <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d803      	bhi.n	800486e <HAL_SPI_Receive+0x19c>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486c:	d102      	bne.n	8004874 <HAL_SPI_Receive+0x1a2>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d102      	bne.n	800487a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004878:	e04e      	b.n	8004918 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004880:	b29b      	uxth	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1c8      	bne.n	8004818 <HAL_SPI_Receive+0x146>
 8004886:	e034      	b.n	80048f2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b01      	cmp	r3, #1
 8004894:	d115      	bne.n	80048c2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68da      	ldr	r2, [r3, #12]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	b292      	uxth	r2, r2
 80048a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	1c9a      	adds	r2, r3, #2
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80048c0:	e011      	b.n	80048e6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048c2:	f7fd fa0b 	bl	8001cdc <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d803      	bhi.n	80048da <HAL_SPI_Receive+0x208>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d8:	d102      	bne.n	80048e0 <HAL_SPI_Receive+0x20e>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d102      	bne.n	80048e6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80048e4:	e018      	b.n	8004918 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1ca      	bne.n	8004888 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	6839      	ldr	r1, [r7, #0]
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f001 f802 	bl	8005900 <SPI_EndRxTransaction>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2220      	movs	r2, #32
 8004906:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800490c:	2b00      	cmp	r3, #0
 800490e:	d002      	beq.n	8004916 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	75fb      	strb	r3, [r7, #23]
 8004914:	e000      	b.n	8004918 <HAL_SPI_Receive+0x246>
  }

error :
 8004916:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004928:	7dfb      	ldrb	r3, [r7, #23]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b08a      	sub	sp, #40	; 0x28
 8004936:	af00      	add	r7, sp, #0
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	607a      	str	r2, [r7, #4]
 800493e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004940:	2301      	movs	r3, #1
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_SPI_TransmitReceive+0x26>
 8004954:	2302      	movs	r3, #2
 8004956:	e1fb      	b.n	8004d50 <HAL_SPI_TransmitReceive+0x41e>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004960:	f7fd f9bc 	bl	8001cdc <HAL_GetTick>
 8004964:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800496c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004974:	887b      	ldrh	r3, [r7, #2]
 8004976:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004978:	887b      	ldrh	r3, [r7, #2]
 800497a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800497c:	7efb      	ldrb	r3, [r7, #27]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d00e      	beq.n	80049a0 <HAL_SPI_TransmitReceive+0x6e>
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004988:	d106      	bne.n	8004998 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d102      	bne.n	8004998 <HAL_SPI_TransmitReceive+0x66>
 8004992:	7efb      	ldrb	r3, [r7, #27]
 8004994:	2b04      	cmp	r3, #4
 8004996:	d003      	beq.n	80049a0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004998:	2302      	movs	r3, #2
 800499a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800499e:	e1cd      	b.n	8004d3c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d005      	beq.n	80049b2 <HAL_SPI_TransmitReceive+0x80>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_SPI_TransmitReceive+0x80>
 80049ac:	887b      	ldrh	r3, [r7, #2]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d103      	bne.n	80049ba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80049b8:	e1c0      	b.n	8004d3c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d003      	beq.n	80049ce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2205      	movs	r2, #5
 80049ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	887a      	ldrh	r2, [r7, #2]
 80049de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	887a      	ldrh	r2, [r7, #2]
 80049e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	887a      	ldrh	r2, [r7, #2]
 80049f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	887a      	ldrh	r2, [r7, #2]
 80049fa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a10:	d802      	bhi.n	8004a18 <HAL_SPI_TransmitReceive+0xe6>
 8004a12:	8a3b      	ldrh	r3, [r7, #16]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d908      	bls.n	8004a2a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a26:	605a      	str	r2, [r3, #4]
 8004a28:	e007      	b.n	8004a3a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a38:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a44:	2b40      	cmp	r3, #64	; 0x40
 8004a46:	d007      	beq.n	8004a58 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a60:	d97c      	bls.n	8004b5c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <HAL_SPI_TransmitReceive+0x13e>
 8004a6a:	8a7b      	ldrh	r3, [r7, #18]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d169      	bne.n	8004b44 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	881a      	ldrh	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a80:	1c9a      	adds	r2, r3, #2
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a94:	e056      	b.n	8004b44 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d11b      	bne.n	8004adc <HAL_SPI_TransmitReceive+0x1aa>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d016      	beq.n	8004adc <HAL_SPI_TransmitReceive+0x1aa>
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d113      	bne.n	8004adc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	881a      	ldrh	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	1c9a      	adds	r2, r3, #2
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d11c      	bne.n	8004b24 <HAL_SPI_TransmitReceive+0x1f2>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d016      	beq.n	8004b24 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b00:	b292      	uxth	r2, r2
 8004b02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	1c9a      	adds	r2, r3, #2
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b20:	2301      	movs	r3, #1
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b24:	f7fd f8da 	bl	8001cdc <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d807      	bhi.n	8004b44 <HAL_SPI_TransmitReceive+0x212>
 8004b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3a:	d003      	beq.n	8004b44 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004b42:	e0fb      	b.n	8004d3c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1a3      	bne.n	8004a96 <HAL_SPI_TransmitReceive+0x164>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d19d      	bne.n	8004a96 <HAL_SPI_TransmitReceive+0x164>
 8004b5a:	e0df      	b.n	8004d1c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <HAL_SPI_TransmitReceive+0x23a>
 8004b64:	8a7b      	ldrh	r3, [r7, #18]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	f040 80cb 	bne.w	8004d02 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d912      	bls.n	8004b9c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7a:	881a      	ldrh	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b86:	1c9a      	adds	r2, r3, #2
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	3b02      	subs	r3, #2
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b9a:	e0b2      	b.n	8004d02 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	330c      	adds	r3, #12
 8004ba6:	7812      	ldrb	r2, [r2, #0]
 8004ba8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bc2:	e09e      	b.n	8004d02 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d134      	bne.n	8004c3c <HAL_SPI_TransmitReceive+0x30a>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d02f      	beq.n	8004c3c <HAL_SPI_TransmitReceive+0x30a>
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d12c      	bne.n	8004c3c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d912      	bls.n	8004c12 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	881a      	ldrh	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	1c9a      	adds	r2, r3, #2
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3b02      	subs	r3, #2
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c10:	e012      	b.n	8004c38 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	330c      	adds	r3, #12
 8004c1c:	7812      	ldrb	r2, [r2, #0]
 8004c1e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d148      	bne.n	8004cdc <HAL_SPI_TransmitReceive+0x3aa>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d042      	beq.n	8004cdc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d923      	bls.n	8004caa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	b292      	uxth	r2, r2
 8004c6e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c74:	1c9a      	adds	r2, r3, #2
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	3b02      	subs	r3, #2
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d81f      	bhi.n	8004cd8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ca6:	605a      	str	r2, [r3, #4]
 8004ca8:	e016      	b.n	8004cd8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f103 020c 	add.w	r2, r3, #12
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	7812      	ldrb	r2, [r2, #0]
 8004cb8:	b2d2      	uxtb	r2, r2
 8004cba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004cdc:	f7fc fffe 	bl	8001cdc <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d803      	bhi.n	8004cf4 <HAL_SPI_TransmitReceive+0x3c2>
 8004cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf2:	d102      	bne.n	8004cfa <HAL_SPI_TransmitReceive+0x3c8>
 8004cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d103      	bne.n	8004d02 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004d00:	e01c      	b.n	8004d3c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f47f af5b 	bne.w	8004bc4 <HAL_SPI_TransmitReceive+0x292>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f47f af54 	bne.w	8004bc4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d1c:	69fa      	ldr	r2, [r7, #28]
 8004d1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 fe45 	bl	80059b0 <SPI_EndRxTxTransaction>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d006      	beq.n	8004d3a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2220      	movs	r2, #32
 8004d36:	661a      	str	r2, [r3, #96]	; 0x60
 8004d38:	e000      	b.n	8004d3c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004d3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3728      	adds	r7, #40	; 0x28
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	4613      	mov	r3, r2
 8004d64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_SPI_Transmit_IT+0x20>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e072      	b.n	8004e5e <HAL_SPI_Transmit_IT+0x106>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <HAL_SPI_Transmit_IT+0x34>
 8004d86:	88fb      	ldrh	r3, [r7, #6]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d102      	bne.n	8004d92 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d90:	e060      	b.n	8004e54 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d002      	beq.n	8004da4 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004d9e:	2302      	movs	r3, #2
 8004da0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004da2:	e057      	b.n	8004e54 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2203      	movs	r2, #3
 8004da8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	88fa      	ldrh	r2, [r7, #6]
 8004dbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	88fa      	ldrh	r2, [r7, #6]
 8004dc2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004de8:	d903      	bls.n	8004df2 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4a1f      	ldr	r2, [pc, #124]	; (8004e6c <HAL_SPI_Transmit_IT+0x114>)
 8004dee:	651a      	str	r2, [r3, #80]	; 0x50
 8004df0:	e002      	b.n	8004df8 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4a1e      	ldr	r2, [pc, #120]	; (8004e70 <HAL_SPI_Transmit_IT+0x118>)
 8004df6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e00:	d10f      	bne.n	8004e22 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004e30:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3c:	2b40      	cmp	r3, #64	; 0x40
 8004e3e:	d008      	beq.n	8004e52 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	e000      	b.n	8004e54 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8004e52:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	371c      	adds	r7, #28
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	0800567f 	.word	0x0800567f
 8004e70:	08005639 	.word	0x08005639

08004e74 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d110      	bne.n	8004eb0 <HAL_SPI_Receive_IT+0x3c>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e96:	d10b      	bne.n	8004eb0 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2204      	movs	r2, #4
 8004e9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8004ea0:	88fb      	ldrh	r3, [r7, #6]
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 f894 	bl	8004fd4 <HAL_SPI_TransmitReceive_IT>
 8004eac:	4603      	mov	r3, r0
 8004eae:	e089      	b.n	8004fc4 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_SPI_Receive_IT+0x4a>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e082      	b.n	8004fc4 <HAL_SPI_Receive_IT+0x150>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d002      	beq.n	8004ed8 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ed6:	e070      	b.n	8004fba <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <HAL_SPI_Receive_IT+0x70>
 8004ede:	88fb      	ldrh	r3, [r7, #6]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d102      	bne.n	8004eea <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ee8:	e067      	b.n	8004fba <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2204      	movs	r2, #4
 8004eee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	88fa      	ldrh	r2, [r7, #6]
 8004f02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	88fa      	ldrh	r2, [r7, #6]
 8004f0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f2e:	d90b      	bls.n	8004f48 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f3e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4a22      	ldr	r2, [pc, #136]	; (8004fcc <HAL_SPI_Receive_IT+0x158>)
 8004f44:	64da      	str	r2, [r3, #76]	; 0x4c
 8004f46:	e00a      	b.n	8004f5e <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f56:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4a1d      	ldr	r2, [pc, #116]	; (8004fd0 <HAL_SPI_Receive_IT+0x15c>)
 8004f5c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f66:	d10f      	bne.n	8004f88 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f86:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004f96:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa2:	2b40      	cmp	r3, #64	; 0x40
 8004fa4:	d008      	beq.n	8004fb8 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	e000      	b.n	8004fba <HAL_SPI_Receive_IT+0x146>
  }

error :
 8004fb8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	080055ed 	.word	0x080055ed
 8004fd0:	0800559d 	.word	0x0800559d

08004fd4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <HAL_SPI_TransmitReceive_IT+0x20>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e091      	b.n	8005118 <HAL_SPI_TransmitReceive_IT+0x144>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005002:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800500a:	7dbb      	ldrb	r3, [r7, #22]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d00d      	beq.n	800502c <HAL_SPI_TransmitReceive_IT+0x58>
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005016:	d106      	bne.n	8005026 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d102      	bne.n	8005026 <HAL_SPI_TransmitReceive_IT+0x52>
 8005020:	7dbb      	ldrb	r3, [r7, #22]
 8005022:	2b04      	cmp	r3, #4
 8005024:	d002      	beq.n	800502c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8005026:	2302      	movs	r3, #2
 8005028:	75fb      	strb	r3, [r7, #23]
    goto error;
 800502a:	e070      	b.n	800510e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d005      	beq.n	800503e <HAL_SPI_TransmitReceive_IT+0x6a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <HAL_SPI_TransmitReceive_IT+0x6a>
 8005038:	887b      	ldrh	r3, [r7, #2]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d102      	bne.n	8005044 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005042:	e064      	b.n	800510e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b04      	cmp	r3, #4
 800504e:	d003      	beq.n	8005058 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2205      	movs	r2, #5
 8005054:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	887a      	ldrh	r2, [r7, #2]
 8005068:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	887a      	ldrh	r2, [r7, #2]
 800506e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	887a      	ldrh	r2, [r7, #2]
 800507a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	887a      	ldrh	r2, [r7, #2]
 8005082:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800508e:	d906      	bls.n	800509e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4a24      	ldr	r2, [pc, #144]	; (8005124 <HAL_SPI_TransmitReceive_IT+0x150>)
 8005094:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	4a23      	ldr	r2, [pc, #140]	; (8005128 <HAL_SPI_TransmitReceive_IT+0x154>)
 800509a:	651a      	str	r2, [r3, #80]	; 0x50
 800509c:	e005      	b.n	80050aa <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4a22      	ldr	r2, [pc, #136]	; (800512c <HAL_SPI_TransmitReceive_IT+0x158>)
 80050a2:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4a22      	ldr	r2, [pc, #136]	; (8005130 <HAL_SPI_TransmitReceive_IT+0x15c>)
 80050a8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050b2:	d802      	bhi.n	80050ba <HAL_SPI_TransmitReceive_IT+0xe6>
 80050b4:	887b      	ldrh	r3, [r7, #2]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d908      	bls.n	80050cc <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050c8:	605a      	str	r2, [r3, #4]
 80050ca:	e007      	b.n	80050dc <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050da:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80050ea:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f6:	2b40      	cmp	r3, #64	; 0x40
 80050f8:	d008      	beq.n	800510c <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	e000      	b.n	800510e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 800510c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005116:	7dfb      	ldrb	r3, [r7, #23]
}
 8005118:	4618      	mov	r0, r3
 800511a:	371c      	adds	r7, #28
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	080054d7 	.word	0x080054d7
 8005128:	0800553d 	.word	0x0800553d
 800512c:	08005387 	.word	0x08005387
 8005130:	08005445 	.word	0x08005445

08005134 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	099b      	lsrs	r3, r3, #6
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10f      	bne.n	8005178 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	099b      	lsrs	r3, r3, #6
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d004      	beq.n	8005178 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	4798      	blx	r3
    return;
 8005176:	e0d7      	b.n	8005328 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	085b      	lsrs	r3, r3, #1
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <HAL_SPI_IRQHandler+0x66>
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	09db      	lsrs	r3, r3, #7
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	d004      	beq.n	800519a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	4798      	blx	r3
    return;
 8005198:	e0c6      	b.n	8005328 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	095b      	lsrs	r3, r3, #5
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10c      	bne.n	80051c0 <HAL_SPI_IRQHandler+0x8c>
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	099b      	lsrs	r3, r3, #6
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	0a1b      	lsrs	r3, r3, #8
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 80b4 	beq.w	8005328 <HAL_SPI_IRQHandler+0x1f4>
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	095b      	lsrs	r3, r3, #5
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 80ad 	beq.w	8005328 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	099b      	lsrs	r3, r3, #6
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d023      	beq.n	8005222 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b03      	cmp	r3, #3
 80051e4:	d011      	beq.n	800520a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ea:	f043 0204 	orr.w	r2, r3, #4
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051f2:	2300      	movs	r3, #0
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	617b      	str	r3, [r7, #20]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	e00b      	b.n	8005222 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800520a:	2300      	movs	r3, #0
 800520c:	613b      	str	r3, [r7, #16]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	613b      	str	r3, [r7, #16]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	693b      	ldr	r3, [r7, #16]
        return;
 8005220:	e082      	b.n	8005328 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	095b      	lsrs	r3, r3, #5
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d014      	beq.n	8005258 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005232:	f043 0201 	orr.w	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	60fb      	str	r3, [r7, #12]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	0a1b      	lsrs	r3, r3, #8
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00c      	beq.n	800527e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005268:	f043 0208 	orr.w	r2, r3, #8
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005270:	2300      	movs	r3, #0
 8005272:	60bb      	str	r3, [r7, #8]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	60bb      	str	r3, [r7, #8]
 800527c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005282:	2b00      	cmp	r3, #0
 8005284:	d04f      	beq.n	8005326 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005294:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d104      	bne.n	80052b2 <HAL_SPI_IRQHandler+0x17e>
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d034      	beq.n	800531c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 0203 	bic.w	r2, r2, #3
 80052c0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d011      	beq.n	80052ee <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ce:	4a18      	ldr	r2, [pc, #96]	; (8005330 <HAL_SPI_IRQHandler+0x1fc>)
 80052d0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fc ff5c 	bl	8002194 <HAL_DMA_Abort_IT>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d005      	beq.n	80052ee <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d016      	beq.n	8005324 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fa:	4a0d      	ldr	r2, [pc, #52]	; (8005330 <HAL_SPI_IRQHandler+0x1fc>)
 80052fc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005302:	4618      	mov	r0, r3
 8005304:	f7fc ff46 	bl	8002194 <HAL_DMA_Abort_IT>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00a      	beq.n	8005324 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005312:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800531a:	e003      	b.n	8005324 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f813 	bl	8005348 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005322:	e000      	b.n	8005326 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005324:	bf00      	nop
    return;
 8005326:	bf00      	nop
  }
}
 8005328:	3720      	adds	r7, #32
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	0800535d 	.word	0x0800535d

08005334 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005368:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f7ff ffe5 	bl	8005348 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800537e:	bf00      	nop
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b082      	sub	sp, #8
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b01      	cmp	r3, #1
 8005398:	d923      	bls.n	80053e2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68da      	ldr	r2, [r3, #12]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a4:	b292      	uxth	r2, r2
 80053a6:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ac:	1c9a      	adds	r2, r3, #2
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	3b02      	subs	r3, #2
 80053bc:	b29a      	uxth	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d11f      	bne.n	8005410 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053de:	605a      	str	r2, [r3, #4]
 80053e0:	e016      	b.n	8005410 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f103 020c 	add.w	r2, r3, #12
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	7812      	ldrb	r2, [r2, #0]
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005404:	b29b      	uxth	r3, r3
 8005406:	3b01      	subs	r3, #1
 8005408:	b29a      	uxth	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005416:	b29b      	uxth	r3, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10f      	bne.n	800543c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800542a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005430:	b29b      	uxth	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d102      	bne.n	800543c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fb00 	bl	8005a3c <SPI_CloseRxTx_ISR>
    }
  }
}
 800543c:	bf00      	nop
 800543e:	3708      	adds	r7, #8
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005450:	b29b      	uxth	r3, r3
 8005452:	2b01      	cmp	r3, #1
 8005454:	d912      	bls.n	800547c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545a:	881a      	ldrh	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005466:	1c9a      	adds	r2, r3, #2
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005470:	b29b      	uxth	r3, r3
 8005472:	3b02      	subs	r3, #2
 8005474:	b29a      	uxth	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	87da      	strh	r2, [r3, #62]	; 0x3e
 800547a:	e012      	b.n	80054a2 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	330c      	adds	r3, #12
 8005486:	7812      	ldrb	r2, [r2, #0]
 8005488:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548e:	1c5a      	adds	r2, r3, #1
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005498:	b29b      	uxth	r3, r3
 800549a:	3b01      	subs	r3, #1
 800549c:	b29a      	uxth	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d110      	bne.n	80054ce <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054ba:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d102      	bne.n	80054ce <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 fab7 	bl	8005a3c <SPI_CloseRxTx_ISR>
    }
  }
}
 80054ce:	bf00      	nop
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b082      	sub	sp, #8
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e8:	b292      	uxth	r2, r2
 80054ea:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f0:	1c9a      	adds	r2, r3, #2
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	3b01      	subs	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800550e:	b29b      	uxth	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10f      	bne.n	8005534 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005522:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005528:	b29b      	uxth	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d102      	bne.n	8005534 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fa84 	bl	8005a3c <SPI_CloseRxTx_ISR>
    }
  }
}
 8005534:	bf00      	nop
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005548:	881a      	ldrh	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005554:	1c9a      	adds	r2, r3, #2
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800555e:	b29b      	uxth	r3, r3
 8005560:	3b01      	subs	r3, #1
 8005562:	b29a      	uxth	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800556c:	b29b      	uxth	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d110      	bne.n	8005594 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005580:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005588:	b29b      	uxth	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d102      	bne.n	8005594 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fa54 	bl	8005a3c <SPI_CloseRxTx_ISR>
    }
  }
}
 8005594:	bf00      	nop
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f103 020c 	add.w	r2, r3, #12
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b0:	7812      	ldrb	r2, [r2, #0]
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	1c5a      	adds	r2, r3, #1
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	3b01      	subs	r3, #1
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055d8:	b29b      	uxth	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d102      	bne.n	80055e4 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fa6e 	bl	8005ac0 <SPI_CloseRx_ISR>
  }
}
 80055e4:	bf00      	nop
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	b292      	uxth	r2, r2
 8005600:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	1c9a      	adds	r2, r3, #2
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005612:	b29b      	uxth	r3, r3
 8005614:	3b01      	subs	r3, #1
 8005616:	b29a      	uxth	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005624:	b29b      	uxth	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d102      	bne.n	8005630 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fa48 	bl	8005ac0 <SPI_CloseRx_ISR>
  }
}
 8005630:	bf00      	nop
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	330c      	adds	r3, #12
 800564a:	7812      	ldrb	r2, [r2, #0]
 800564c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800565c:	b29b      	uxth	r3, r3
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800566a:	b29b      	uxth	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d102      	bne.n	8005676 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 fa55 	bl	8005b20 <SPI_CloseTx_ISR>
  }
}
 8005676:	bf00      	nop
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b082      	sub	sp, #8
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568a:	881a      	ldrh	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005696:	1c9a      	adds	r2, r3, #2
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d102      	bne.n	80056ba <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 fa33 	bl	8005b20 <SPI_CloseTx_ISR>
  }
}
 80056ba:	bf00      	nop
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b088      	sub	sp, #32
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	603b      	str	r3, [r7, #0]
 80056d0:	4613      	mov	r3, r2
 80056d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056d4:	f7fc fb02 	bl	8001cdc <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056dc:	1a9b      	subs	r3, r3, r2
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	4413      	add	r3, r2
 80056e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056e4:	f7fc fafa 	bl	8001cdc <HAL_GetTick>
 80056e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056ea:	4b39      	ldr	r3, [pc, #228]	; (80057d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	015b      	lsls	r3, r3, #5
 80056f0:	0d1b      	lsrs	r3, r3, #20
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	fb02 f303 	mul.w	r3, r2, r3
 80056f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056fa:	e054      	b.n	80057a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005702:	d050      	beq.n	80057a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005704:	f7fc faea 	bl	8001cdc <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	69fa      	ldr	r2, [r7, #28]
 8005710:	429a      	cmp	r2, r3
 8005712:	d902      	bls.n	800571a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d13d      	bne.n	8005796 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005728:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005732:	d111      	bne.n	8005758 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800573c:	d004      	beq.n	8005748 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005746:	d107      	bne.n	8005758 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005756:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005760:	d10f      	bne.n	8005782 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005780:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e017      	b.n	80057c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	3b01      	subs	r3, #1
 80057a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	4013      	ands	r3, r2
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	bf0c      	ite	eq
 80057b6:	2301      	moveq	r3, #1
 80057b8:	2300      	movne	r3, #0
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	461a      	mov	r2, r3
 80057be:	79fb      	ldrb	r3, [r7, #7]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d19b      	bne.n	80056fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3720      	adds	r7, #32
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	20000000 	.word	0x20000000

080057d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b08a      	sub	sp, #40	; 0x28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80057e2:	2300      	movs	r3, #0
 80057e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80057e6:	f7fc fa79 	bl	8001cdc <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	1a9b      	subs	r3, r3, r2
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	4413      	add	r3, r2
 80057f4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80057f6:	f7fc fa71 	bl	8001cdc <HAL_GetTick>
 80057fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	330c      	adds	r3, #12
 8005802:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005804:	4b3d      	ldr	r3, [pc, #244]	; (80058fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	4613      	mov	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	00da      	lsls	r2, r3, #3
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	0d1b      	lsrs	r3, r3, #20
 8005814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005816:	fb02 f303 	mul.w	r3, r2, r3
 800581a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800581c:	e060      	b.n	80058e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005824:	d107      	bne.n	8005836 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d104      	bne.n	8005836 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	b2db      	uxtb	r3, r3
 8005832:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005834:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583c:	d050      	beq.n	80058e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800583e:	f7fc fa4d 	bl	8001cdc <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800584a:	429a      	cmp	r2, r3
 800584c:	d902      	bls.n	8005854 <SPI_WaitFifoStateUntilTimeout+0x80>
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	2b00      	cmp	r3, #0
 8005852:	d13d      	bne.n	80058d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005862:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800586c:	d111      	bne.n	8005892 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005876:	d004      	beq.n	8005882 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005880:	d107      	bne.n	8005892 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005890:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800589a:	d10f      	bne.n	80058bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e010      	b.n	80058f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	3b01      	subs	r3, #1
 80058de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	4013      	ands	r3, r2
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d196      	bne.n	800581e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3728      	adds	r7, #40	; 0x28
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	20000000 	.word	0x20000000

08005900 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af02      	add	r7, sp, #8
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005914:	d111      	bne.n	800593a <SPI_EndRxTransaction+0x3a>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800591e:	d004      	beq.n	800592a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005928:	d107      	bne.n	800593a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005938:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2200      	movs	r2, #0
 8005942:	2180      	movs	r1, #128	; 0x80
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f7ff febd 	bl	80056c4 <SPI_WaitFlagStateUntilTimeout>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d007      	beq.n	8005960 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005954:	f043 0220 	orr.w	r2, r3, #32
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e023      	b.n	80059a8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005968:	d11d      	bne.n	80059a6 <SPI_EndRxTransaction+0xa6>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005972:	d004      	beq.n	800597e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800597c:	d113      	bne.n	80059a6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2200      	movs	r2, #0
 8005986:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f7ff ff22 	bl	80057d4 <SPI_WaitFifoStateUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d007      	beq.n	80059a6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800599a:	f043 0220 	orr.w	r2, r3, #32
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e000      	b.n	80059a8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af02      	add	r7, sp, #8
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f7ff ff03 	bl	80057d4 <SPI_WaitFifoStateUntilTimeout>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d007      	beq.n	80059e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d8:	f043 0220 	orr.w	r2, r3, #32
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e027      	b.n	8005a34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2200      	movs	r2, #0
 80059ec:	2180      	movs	r1, #128	; 0x80
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f7ff fe68 	bl	80056c4 <SPI_WaitFlagStateUntilTimeout>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d007      	beq.n	8005a0a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059fe:	f043 0220 	orr.w	r2, r3, #32
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e014      	b.n	8005a34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f7ff fedc 	bl	80057d4 <SPI_WaitFifoStateUntilTimeout>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d007      	beq.n	8005a32 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a26:	f043 0220 	orr.w	r2, r3, #32
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e000      	b.n	8005a34 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a44:	f7fc f94a 	bl	8001cdc <HAL_GetTick>
 8005a48:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 0220 	bic.w	r2, r2, #32
 8005a58:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	2164      	movs	r1, #100	; 0x64
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7ff ffa6 	bl	80059b0 <SPI_EndRxTxTransaction>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d005      	beq.n	8005a76 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a6e:	f043 0220 	orr.w	r2, r3, #32
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d115      	bne.n	8005aaa <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d107      	bne.n	8005a9a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f003 f9be 	bl	8008e14 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005a98:	e00e      	b.n	8005ab8 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7ff fc46 	bl	8005334 <HAL_SPI_TxRxCpltCallback>
}
 8005aa8:	e006      	b.n	8005ab8 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7ff fc48 	bl	8005348 <HAL_SPI_ErrorCallback>
}
 8005ab8:	bf00      	nop
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ad6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8005ad8:	f7fc f900 	bl	8001cdc <HAL_GetTick>
 8005adc:	4603      	mov	r3, r0
 8005ade:	461a      	mov	r2, r3
 8005ae0:	2164      	movs	r1, #100	; 0x64
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7ff ff0c 	bl	8005900 <SPI_EndRxTransaction>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d005      	beq.n	8005afa <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005af2:	f043 0220 	orr.w	r2, r3, #32
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d103      	bne.n	8005b12 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f003 f982 	bl	8008e14 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005b10:	e002      	b.n	8005b18 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7ff fc18 	bl	8005348 <HAL_SPI_ErrorCallback>
}
 8005b18:	bf00      	nop
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b28:	f7fc f8d8 	bl	8001cdc <HAL_GetTick>
 8005b2c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b3c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	2164      	movs	r1, #100	; 0x64
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7ff ff34 	bl	80059b0 <SPI_EndRxTxTransaction>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d005      	beq.n	8005b5a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b52:	f043 0220 	orr.w	r2, r3, #32
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10a      	bne.n	8005b78 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b62:	2300      	movs	r3, #0
 8005b64:	60bb      	str	r3, [r7, #8]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	60bb      	str	r3, [r7, #8]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	60bb      	str	r3, [r7, #8]
 8005b76:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d003      	beq.n	8005b90 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7ff fbdd 	bl	8005348 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005b8e:	e002      	b.n	8005b96 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f003 f953 	bl	8008e3c <HAL_SPI_TxCpltCallback>
}
 8005b96:	bf00      	nop
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b082      	sub	sp, #8
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e049      	b.n	8005c44 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d106      	bne.n	8005bca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f841 	bl	8005c4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2202      	movs	r2, #2
 8005bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	3304      	adds	r3, #4
 8005bda:	4619      	mov	r1, r3
 8005bdc:	4610      	mov	r0, r2
 8005bde:	f000 f9f7 	bl	8005fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d001      	beq.n	8005c78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e04f      	b.n	8005d18 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0201 	orr.w	r2, r2, #1
 8005c8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a23      	ldr	r2, [pc, #140]	; (8005d24 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d01d      	beq.n	8005cd6 <HAL_TIM_Base_Start_IT+0x76>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca2:	d018      	beq.n	8005cd6 <HAL_TIM_Base_Start_IT+0x76>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a1f      	ldr	r2, [pc, #124]	; (8005d28 <HAL_TIM_Base_Start_IT+0xc8>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d013      	beq.n	8005cd6 <HAL_TIM_Base_Start_IT+0x76>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a1e      	ldr	r2, [pc, #120]	; (8005d2c <HAL_TIM_Base_Start_IT+0xcc>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d00e      	beq.n	8005cd6 <HAL_TIM_Base_Start_IT+0x76>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a1c      	ldr	r2, [pc, #112]	; (8005d30 <HAL_TIM_Base_Start_IT+0xd0>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d009      	beq.n	8005cd6 <HAL_TIM_Base_Start_IT+0x76>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a1b      	ldr	r2, [pc, #108]	; (8005d34 <HAL_TIM_Base_Start_IT+0xd4>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d004      	beq.n	8005cd6 <HAL_TIM_Base_Start_IT+0x76>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a19      	ldr	r2, [pc, #100]	; (8005d38 <HAL_TIM_Base_Start_IT+0xd8>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d115      	bne.n	8005d02 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	4b17      	ldr	r3, [pc, #92]	; (8005d3c <HAL_TIM_Base_Start_IT+0xdc>)
 8005cde:	4013      	ands	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2b06      	cmp	r3, #6
 8005ce6:	d015      	beq.n	8005d14 <HAL_TIM_Base_Start_IT+0xb4>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cee:	d011      	beq.n	8005d14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0201 	orr.w	r2, r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d00:	e008      	b.n	8005d14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f042 0201 	orr.w	r2, r2, #1
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	e000      	b.n	8005d16 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d14:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3714      	adds	r7, #20
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	40012c00 	.word	0x40012c00
 8005d28:	40000400 	.word	0x40000400
 8005d2c:	40000800 	.word	0x40000800
 8005d30:	40000c00 	.word	0x40000c00
 8005d34:	40013400 	.word	0x40013400
 8005d38:	40014000 	.word	0x40014000
 8005d3c:	00010007 	.word	0x00010007

08005d40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d122      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d11b      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f06f 0202 	mvn.w	r2, #2
 8005d6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f905 	bl	8005f92 <HAL_TIM_IC_CaptureCallback>
 8005d88:	e005      	b.n	8005d96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f8f7 	bl	8005f7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 f908 	bl	8005fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	f003 0304 	and.w	r3, r3, #4
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d122      	bne.n	8005df0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d11b      	bne.n	8005df0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f06f 0204 	mvn.w	r2, #4
 8005dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f8db 	bl	8005f92 <HAL_TIM_IC_CaptureCallback>
 8005ddc:	e005      	b.n	8005dea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f8cd 	bl	8005f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f8de 	bl	8005fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	f003 0308 	and.w	r3, r3, #8
 8005dfa:	2b08      	cmp	r3, #8
 8005dfc:	d122      	bne.n	8005e44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f003 0308 	and.w	r3, r3, #8
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d11b      	bne.n	8005e44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f06f 0208 	mvn.w	r2, #8
 8005e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2204      	movs	r2, #4
 8005e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f8b1 	bl	8005f92 <HAL_TIM_IC_CaptureCallback>
 8005e30:	e005      	b.n	8005e3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f8a3 	bl	8005f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f8b4 	bl	8005fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f003 0310 	and.w	r3, r3, #16
 8005e4e:	2b10      	cmp	r3, #16
 8005e50:	d122      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f003 0310 	and.w	r3, r3, #16
 8005e5c:	2b10      	cmp	r3, #16
 8005e5e:	d11b      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f06f 0210 	mvn.w	r2, #16
 8005e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2208      	movs	r2, #8
 8005e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f887 	bl	8005f92 <HAL_TIM_IC_CaptureCallback>
 8005e84:	e005      	b.n	8005e92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f879 	bl	8005f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 f88a 	bl	8005fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d10e      	bne.n	8005ec4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d107      	bne.n	8005ec4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f06f 0201 	mvn.w	r2, #1
 8005ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7fb f87c 	bl	8000fbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ece:	2b80      	cmp	r3, #128	; 0x80
 8005ed0:	d10e      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005edc:	2b80      	cmp	r3, #128	; 0x80
 8005ede:	d107      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f914 	bl	8006118 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005efe:	d10e      	bne.n	8005f1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0a:	2b80      	cmp	r3, #128	; 0x80
 8005f0c:	d107      	bne.n	8005f1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f907 	bl	800612c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f28:	2b40      	cmp	r3, #64	; 0x40
 8005f2a:	d10e      	bne.n	8005f4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f36:	2b40      	cmp	r3, #64	; 0x40
 8005f38:	d107      	bne.n	8005f4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f838 	bl	8005fba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	f003 0320 	and.w	r3, r3, #32
 8005f54:	2b20      	cmp	r3, #32
 8005f56:	d10e      	bne.n	8005f76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f003 0320 	and.w	r3, r3, #32
 8005f62:	2b20      	cmp	r3, #32
 8005f64:	d107      	bne.n	8005f76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f06f 0220 	mvn.w	r2, #32
 8005f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f8c7 	bl	8006104 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f76:	bf00      	nop
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f86:	bf00      	nop
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f9a:	bf00      	nop
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fae:	bf00      	nop
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fc2:	bf00      	nop
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
	...

08005fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a40      	ldr	r2, [pc, #256]	; (80060e4 <TIM_Base_SetConfig+0x114>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d013      	beq.n	8006010 <TIM_Base_SetConfig+0x40>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fee:	d00f      	beq.n	8006010 <TIM_Base_SetConfig+0x40>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a3d      	ldr	r2, [pc, #244]	; (80060e8 <TIM_Base_SetConfig+0x118>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d00b      	beq.n	8006010 <TIM_Base_SetConfig+0x40>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a3c      	ldr	r2, [pc, #240]	; (80060ec <TIM_Base_SetConfig+0x11c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d007      	beq.n	8006010 <TIM_Base_SetConfig+0x40>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a3b      	ldr	r2, [pc, #236]	; (80060f0 <TIM_Base_SetConfig+0x120>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d003      	beq.n	8006010 <TIM_Base_SetConfig+0x40>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a3a      	ldr	r2, [pc, #232]	; (80060f4 <TIM_Base_SetConfig+0x124>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d108      	bne.n	8006022 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a2f      	ldr	r2, [pc, #188]	; (80060e4 <TIM_Base_SetConfig+0x114>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d01f      	beq.n	800606a <TIM_Base_SetConfig+0x9a>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006030:	d01b      	beq.n	800606a <TIM_Base_SetConfig+0x9a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a2c      	ldr	r2, [pc, #176]	; (80060e8 <TIM_Base_SetConfig+0x118>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d017      	beq.n	800606a <TIM_Base_SetConfig+0x9a>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a2b      	ldr	r2, [pc, #172]	; (80060ec <TIM_Base_SetConfig+0x11c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d013      	beq.n	800606a <TIM_Base_SetConfig+0x9a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a2a      	ldr	r2, [pc, #168]	; (80060f0 <TIM_Base_SetConfig+0x120>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00f      	beq.n	800606a <TIM_Base_SetConfig+0x9a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a29      	ldr	r2, [pc, #164]	; (80060f4 <TIM_Base_SetConfig+0x124>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d00b      	beq.n	800606a <TIM_Base_SetConfig+0x9a>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a28      	ldr	r2, [pc, #160]	; (80060f8 <TIM_Base_SetConfig+0x128>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d007      	beq.n	800606a <TIM_Base_SetConfig+0x9a>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a27      	ldr	r2, [pc, #156]	; (80060fc <TIM_Base_SetConfig+0x12c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d003      	beq.n	800606a <TIM_Base_SetConfig+0x9a>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a26      	ldr	r2, [pc, #152]	; (8006100 <TIM_Base_SetConfig+0x130>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d108      	bne.n	800607c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	4313      	orrs	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	4313      	orrs	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a10      	ldr	r2, [pc, #64]	; (80060e4 <TIM_Base_SetConfig+0x114>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d00f      	beq.n	80060c8 <TIM_Base_SetConfig+0xf8>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a12      	ldr	r2, [pc, #72]	; (80060f4 <TIM_Base_SetConfig+0x124>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d00b      	beq.n	80060c8 <TIM_Base_SetConfig+0xf8>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a11      	ldr	r2, [pc, #68]	; (80060f8 <TIM_Base_SetConfig+0x128>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d007      	beq.n	80060c8 <TIM_Base_SetConfig+0xf8>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a10      	ldr	r2, [pc, #64]	; (80060fc <TIM_Base_SetConfig+0x12c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d003      	beq.n	80060c8 <TIM_Base_SetConfig+0xf8>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a0f      	ldr	r2, [pc, #60]	; (8006100 <TIM_Base_SetConfig+0x130>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d103      	bne.n	80060d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	691a      	ldr	r2, [r3, #16]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	615a      	str	r2, [r3, #20]
}
 80060d6:	bf00      	nop
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	40012c00 	.word	0x40012c00
 80060e8:	40000400 	.word	0x40000400
 80060ec:	40000800 	.word	0x40000800
 80060f0:	40000c00 	.word	0x40000c00
 80060f4:	40013400 	.word	0x40013400
 80060f8:	40014000 	.word	0x40014000
 80060fc:	40014400 	.word	0x40014400
 8006100:	40014800 	.word	0x40014800

08006104 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e040      	b.n	80061d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006156:	2b00      	cmp	r3, #0
 8006158:	d106      	bne.n	8006168 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7fb f8d2 	bl	800130c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2224      	movs	r2, #36	; 0x24
 800616c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f022 0201 	bic.w	r2, r2, #1
 800617c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fb9c 	bl	80068bc <UART_SetConfig>
 8006184:	4603      	mov	r3, r0
 8006186:	2b01      	cmp	r3, #1
 8006188:	d101      	bne.n	800618e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e022      	b.n	80061d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006192:	2b00      	cmp	r3, #0
 8006194:	d002      	beq.n	800619c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fe48 	bl	8006e2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f042 0201 	orr.w	r2, r2, #1
 80061ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fecf 	bl	8006f70 <UART_CheckIdleState>
 80061d2:	4603      	mov	r3, r0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80061dc:	b480      	push	{r7}
 80061de:	b08b      	sub	sp, #44	; 0x2c
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	4613      	mov	r3, r2
 80061e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061ee:	2b20      	cmp	r3, #32
 80061f0:	d156      	bne.n	80062a0 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d002      	beq.n	80061fe <HAL_UART_Transmit_IT+0x22>
 80061f8:	88fb      	ldrh	r3, [r7, #6]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e04f      	b.n	80062a2 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_UART_Transmit_IT+0x34>
 800620c:	2302      	movs	r3, #2
 800620e:	e048      	b.n	80062a2 <HAL_UART_Transmit_IT+0xc6>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	88fa      	ldrh	r2, [r7, #6]
 8006222:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	88fa      	ldrh	r2, [r7, #6]
 800622a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2221      	movs	r2, #33	; 0x21
 8006240:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800624a:	d107      	bne.n	800625c <HAL_UART_Transmit_IT+0x80>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d103      	bne.n	800625c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	4a16      	ldr	r2, [pc, #88]	; (80062b0 <HAL_UART_Transmit_IT+0xd4>)
 8006258:	669a      	str	r2, [r3, #104]	; 0x68
 800625a:	e002      	b.n	8006262 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4a15      	ldr	r2, [pc, #84]	; (80062b4 <HAL_UART_Transmit_IT+0xd8>)
 8006260:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	e853 3f00 	ldrex	r3, [r3]
 8006276:	613b      	str	r3, [r7, #16]
   return(result);
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800627e:	627b      	str	r3, [r7, #36]	; 0x24
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	461a      	mov	r2, r3
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	623b      	str	r3, [r7, #32]
 800628a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628c:	69f9      	ldr	r1, [r7, #28]
 800628e:	6a3a      	ldr	r2, [r7, #32]
 8006290:	e841 2300 	strex	r3, r2, [r1]
 8006294:	61bb      	str	r3, [r7, #24]
   return(result);
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1e6      	bne.n	800626a <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	e000      	b.n	80062a2 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80062a0:	2302      	movs	r3, #2
  }
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	372c      	adds	r7, #44	; 0x2c
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	08007335 	.word	0x08007335
 80062b4:	0800727d 	.word	0x0800727d

080062b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b0ba      	sub	sp, #232	; 0xe8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80062de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80062e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80062e6:	4013      	ands	r3, r2
 80062e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80062ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d115      	bne.n	8006320 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80062f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062f8:	f003 0320 	and.w	r3, r3, #32
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00f      	beq.n	8006320 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006304:	f003 0320 	and.w	r3, r3, #32
 8006308:	2b00      	cmp	r3, #0
 800630a:	d009      	beq.n	8006320 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 82a6 	beq.w	8006862 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	4798      	blx	r3
      }
      return;
 800631e:	e2a0      	b.n	8006862 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006320:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006324:	2b00      	cmp	r3, #0
 8006326:	f000 8117 	beq.w	8006558 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800632a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d106      	bne.n	8006344 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006336:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800633a:	4b85      	ldr	r3, [pc, #532]	; (8006550 <HAL_UART_IRQHandler+0x298>)
 800633c:	4013      	ands	r3, r2
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 810a 	beq.w	8006558 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b00      	cmp	r3, #0
 800634e:	d011      	beq.n	8006374 <HAL_UART_IRQHandler+0xbc>
 8006350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00b      	beq.n	8006374 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2201      	movs	r2, #1
 8006362:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800636a:	f043 0201 	orr.w	r2, r3, #1
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b00      	cmp	r3, #0
 800637e:	d011      	beq.n	80063a4 <HAL_UART_IRQHandler+0xec>
 8006380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00b      	beq.n	80063a4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2202      	movs	r2, #2
 8006392:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800639a:	f043 0204 	orr.w	r2, r3, #4
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d011      	beq.n	80063d4 <HAL_UART_IRQHandler+0x11c>
 80063b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00b      	beq.n	80063d4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2204      	movs	r2, #4
 80063c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063ca:	f043 0202 	orr.w	r2, r3, #2
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80063d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d8:	f003 0308 	and.w	r3, r3, #8
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d017      	beq.n	8006410 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063e4:	f003 0320 	and.w	r3, r3, #32
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d105      	bne.n	80063f8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80063ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00b      	beq.n	8006410 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2208      	movs	r2, #8
 80063fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006406:	f043 0208 	orr.w	r2, r3, #8
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006418:	2b00      	cmp	r3, #0
 800641a:	d012      	beq.n	8006442 <HAL_UART_IRQHandler+0x18a>
 800641c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006420:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00c      	beq.n	8006442 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006430:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006438:	f043 0220 	orr.w	r2, r3, #32
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006448:	2b00      	cmp	r3, #0
 800644a:	f000 820c 	beq.w	8006866 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800644e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006452:	f003 0320 	and.w	r3, r3, #32
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00d      	beq.n	8006476 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800645a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800645e:	f003 0320 	and.w	r3, r3, #32
 8006462:	2b00      	cmp	r3, #0
 8006464:	d007      	beq.n	8006476 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800646a:	2b00      	cmp	r3, #0
 800646c:	d003      	beq.n	8006476 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800647c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648a:	2b40      	cmp	r3, #64	; 0x40
 800648c:	d005      	beq.n	800649a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800648e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006492:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006496:	2b00      	cmp	r3, #0
 8006498:	d04f      	beq.n	800653a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fe75 	bl	800718a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064aa:	2b40      	cmp	r3, #64	; 0x40
 80064ac:	d141      	bne.n	8006532 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3308      	adds	r3, #8
 80064b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80064c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3308      	adds	r3, #8
 80064d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80064da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80064de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80064e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064ea:	e841 2300 	strex	r3, r2, [r1]
 80064ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80064f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1d9      	bne.n	80064ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d013      	beq.n	800652a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006506:	4a13      	ldr	r2, [pc, #76]	; (8006554 <HAL_UART_IRQHandler+0x29c>)
 8006508:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800650e:	4618      	mov	r0, r3
 8006510:	f7fb fe40 	bl	8002194 <HAL_DMA_Abort_IT>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d017      	beq.n	800654a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006524:	4610      	mov	r0, r2
 8006526:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006528:	e00f      	b.n	800654a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f9b0 	bl	8006890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006530:	e00b      	b.n	800654a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f9ac 	bl	8006890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006538:	e007      	b.n	800654a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f9a8 	bl	8006890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006548:	e18d      	b.n	8006866 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800654a:	bf00      	nop
    return;
 800654c:	e18b      	b.n	8006866 <HAL_UART_IRQHandler+0x5ae>
 800654e:	bf00      	nop
 8006550:	04000120 	.word	0x04000120
 8006554:	08007251 	.word	0x08007251

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800655c:	2b01      	cmp	r3, #1
 800655e:	f040 8146 	bne.w	80067ee <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006566:	f003 0310 	and.w	r3, r3, #16
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 813f 	beq.w	80067ee <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006574:	f003 0310 	and.w	r3, r3, #16
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 8138 	beq.w	80067ee <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2210      	movs	r2, #16
 8006584:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006590:	2b40      	cmp	r3, #64	; 0x40
 8006592:	f040 80b4 	bne.w	80066fe <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 815f 	beq.w	800686a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80065b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065b6:	429a      	cmp	r2, r3
 80065b8:	f080 8157 	bcs.w	800686a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0320 	and.w	r3, r3, #32
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f040 8085 	bne.w	80066e2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80065ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	461a      	mov	r2, r3
 80065fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006602:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006606:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800660e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800661a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1da      	bne.n	80065d8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3308      	adds	r3, #8
 8006628:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800662c:	e853 3f00 	ldrex	r3, [r3]
 8006630:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006632:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006634:	f023 0301 	bic.w	r3, r3, #1
 8006638:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3308      	adds	r3, #8
 8006642:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006646:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800664a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800664e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006658:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e1      	bne.n	8006622 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3308      	adds	r3, #8
 8006664:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006666:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800666e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006674:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3308      	adds	r3, #8
 800667e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006682:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006684:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006686:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006688:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800668a:	e841 2300 	strex	r3, r2, [r1]
 800668e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1e3      	bne.n	800665e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2220      	movs	r2, #32
 800669a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066aa:	e853 3f00 	ldrex	r3, [r3]
 80066ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066b2:	f023 0310 	bic.w	r3, r3, #16
 80066b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80066c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066cc:	e841 2300 	strex	r3, r2, [r1]
 80066d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1e4      	bne.n	80066a2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fb fd1b 	bl	8002118 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	4619      	mov	r1, r3
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f8d4 	bl	80068a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066fc:	e0b5      	b.n	800686a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800670a:	b29b      	uxth	r3, r3
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006718:	b29b      	uxth	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 80a7 	beq.w	800686e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006720:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 80a2 	beq.w	800686e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006732:	e853 3f00 	ldrex	r3, [r3]
 8006736:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800673a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800673e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	461a      	mov	r2, r3
 8006748:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800674c:	647b      	str	r3, [r7, #68]	; 0x44
 800674e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006750:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006752:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006754:	e841 2300 	strex	r3, r2, [r1]
 8006758:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800675a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1e4      	bne.n	800672a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3308      	adds	r3, #8
 8006766:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	e853 3f00 	ldrex	r3, [r3]
 800676e:	623b      	str	r3, [r7, #32]
   return(result);
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	f023 0301 	bic.w	r3, r3, #1
 8006776:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3308      	adds	r3, #8
 8006780:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006784:	633a      	str	r2, [r7, #48]	; 0x30
 8006786:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006788:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800678a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800678c:	e841 2300 	strex	r3, r2, [r1]
 8006790:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1e3      	bne.n	8006760 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2220      	movs	r2, #32
 800679c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	e853 3f00 	ldrex	r3, [r3]
 80067b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0310 	bic.w	r3, r3, #16
 80067be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067cc:	61fb      	str	r3, [r7, #28]
 80067ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d0:	69b9      	ldr	r1, [r7, #24]
 80067d2:	69fa      	ldr	r2, [r7, #28]
 80067d4:	e841 2300 	strex	r3, r2, [r1]
 80067d8:	617b      	str	r3, [r7, #20]
   return(result);
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e4      	bne.n	80067aa <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067e4:	4619      	mov	r1, r3
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f85c 	bl	80068a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067ec:	e03f      	b.n	800686e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80067ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00e      	beq.n	8006818 <HAL_UART_IRQHandler+0x560>
 80067fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d008      	beq.n	8006818 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800680e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fe19 	bl	8007448 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006816:	e02d      	b.n	8006874 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800681c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00e      	beq.n	8006842 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800682c:	2b00      	cmp	r3, #0
 800682e:	d008      	beq.n	8006842 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006834:	2b00      	cmp	r3, #0
 8006836:	d01c      	beq.n	8006872 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	4798      	blx	r3
    }
    return;
 8006840:	e017      	b.n	8006872 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684a:	2b00      	cmp	r3, #0
 800684c:	d012      	beq.n	8006874 <HAL_UART_IRQHandler+0x5bc>
 800684e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00c      	beq.n	8006874 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fdca 	bl	80073f4 <UART_EndTransmit_IT>
    return;
 8006860:	e008      	b.n	8006874 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006862:	bf00      	nop
 8006864:	e006      	b.n	8006874 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006866:	bf00      	nop
 8006868:	e004      	b.n	8006874 <HAL_UART_IRQHandler+0x5bc>
      return;
 800686a:	bf00      	nop
 800686c:	e002      	b.n	8006874 <HAL_UART_IRQHandler+0x5bc>
      return;
 800686e:	bf00      	nop
 8006870:	e000      	b.n	8006874 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006872:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006874:	37e8      	adds	r7, #232	; 0xe8
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop

0800687c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	460b      	mov	r3, r1
 80068ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068c0:	b08a      	sub	sp, #40	; 0x28
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	689a      	ldr	r2, [r3, #8]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	431a      	orrs	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	431a      	orrs	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	69db      	ldr	r3, [r3, #28]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	4ba4      	ldr	r3, [pc, #656]	; (8006b7c <UART_SetConfig+0x2c0>)
 80068ec:	4013      	ands	r3, r2
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	6812      	ldr	r2, [r2, #0]
 80068f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068f4:	430b      	orrs	r3, r1
 80068f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	68da      	ldr	r2, [r3, #12]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a99      	ldr	r2, [pc, #612]	; (8006b80 <UART_SetConfig+0x2c4>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d004      	beq.n	8006928 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006924:	4313      	orrs	r3, r2
 8006926:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006938:	430a      	orrs	r2, r1
 800693a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a90      	ldr	r2, [pc, #576]	; (8006b84 <UART_SetConfig+0x2c8>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d126      	bne.n	8006994 <UART_SetConfig+0xd8>
 8006946:	4b90      	ldr	r3, [pc, #576]	; (8006b88 <UART_SetConfig+0x2cc>)
 8006948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800694c:	f003 0303 	and.w	r3, r3, #3
 8006950:	2b03      	cmp	r3, #3
 8006952:	d81b      	bhi.n	800698c <UART_SetConfig+0xd0>
 8006954:	a201      	add	r2, pc, #4	; (adr r2, 800695c <UART_SetConfig+0xa0>)
 8006956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695a:	bf00      	nop
 800695c:	0800696d 	.word	0x0800696d
 8006960:	0800697d 	.word	0x0800697d
 8006964:	08006975 	.word	0x08006975
 8006968:	08006985 	.word	0x08006985
 800696c:	2301      	movs	r3, #1
 800696e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006972:	e116      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 8006974:	2302      	movs	r3, #2
 8006976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800697a:	e112      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 800697c:	2304      	movs	r3, #4
 800697e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006982:	e10e      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 8006984:	2308      	movs	r3, #8
 8006986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800698a:	e10a      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 800698c:	2310      	movs	r3, #16
 800698e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006992:	e106      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a7c      	ldr	r2, [pc, #496]	; (8006b8c <UART_SetConfig+0x2d0>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d138      	bne.n	8006a10 <UART_SetConfig+0x154>
 800699e:	4b7a      	ldr	r3, [pc, #488]	; (8006b88 <UART_SetConfig+0x2cc>)
 80069a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069a4:	f003 030c 	and.w	r3, r3, #12
 80069a8:	2b0c      	cmp	r3, #12
 80069aa:	d82d      	bhi.n	8006a08 <UART_SetConfig+0x14c>
 80069ac:	a201      	add	r2, pc, #4	; (adr r2, 80069b4 <UART_SetConfig+0xf8>)
 80069ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b2:	bf00      	nop
 80069b4:	080069e9 	.word	0x080069e9
 80069b8:	08006a09 	.word	0x08006a09
 80069bc:	08006a09 	.word	0x08006a09
 80069c0:	08006a09 	.word	0x08006a09
 80069c4:	080069f9 	.word	0x080069f9
 80069c8:	08006a09 	.word	0x08006a09
 80069cc:	08006a09 	.word	0x08006a09
 80069d0:	08006a09 	.word	0x08006a09
 80069d4:	080069f1 	.word	0x080069f1
 80069d8:	08006a09 	.word	0x08006a09
 80069dc:	08006a09 	.word	0x08006a09
 80069e0:	08006a09 	.word	0x08006a09
 80069e4:	08006a01 	.word	0x08006a01
 80069e8:	2300      	movs	r3, #0
 80069ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ee:	e0d8      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 80069f0:	2302      	movs	r3, #2
 80069f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069f6:	e0d4      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 80069f8:	2304      	movs	r3, #4
 80069fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069fe:	e0d0      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 8006a00:	2308      	movs	r3, #8
 8006a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a06:	e0cc      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 8006a08:	2310      	movs	r3, #16
 8006a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a0e:	e0c8      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a5e      	ldr	r2, [pc, #376]	; (8006b90 <UART_SetConfig+0x2d4>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d125      	bne.n	8006a66 <UART_SetConfig+0x1aa>
 8006a1a:	4b5b      	ldr	r3, [pc, #364]	; (8006b88 <UART_SetConfig+0x2cc>)
 8006a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a20:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a24:	2b30      	cmp	r3, #48	; 0x30
 8006a26:	d016      	beq.n	8006a56 <UART_SetConfig+0x19a>
 8006a28:	2b30      	cmp	r3, #48	; 0x30
 8006a2a:	d818      	bhi.n	8006a5e <UART_SetConfig+0x1a2>
 8006a2c:	2b20      	cmp	r3, #32
 8006a2e:	d00a      	beq.n	8006a46 <UART_SetConfig+0x18a>
 8006a30:	2b20      	cmp	r3, #32
 8006a32:	d814      	bhi.n	8006a5e <UART_SetConfig+0x1a2>
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <UART_SetConfig+0x182>
 8006a38:	2b10      	cmp	r3, #16
 8006a3a:	d008      	beq.n	8006a4e <UART_SetConfig+0x192>
 8006a3c:	e00f      	b.n	8006a5e <UART_SetConfig+0x1a2>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a44:	e0ad      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 8006a46:	2302      	movs	r3, #2
 8006a48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a4c:	e0a9      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 8006a4e:	2304      	movs	r3, #4
 8006a50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a54:	e0a5      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 8006a56:	2308      	movs	r3, #8
 8006a58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a5c:	e0a1      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 8006a5e:	2310      	movs	r3, #16
 8006a60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a64:	e09d      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a4a      	ldr	r2, [pc, #296]	; (8006b94 <UART_SetConfig+0x2d8>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d125      	bne.n	8006abc <UART_SetConfig+0x200>
 8006a70:	4b45      	ldr	r3, [pc, #276]	; (8006b88 <UART_SetConfig+0x2cc>)
 8006a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a7a:	2bc0      	cmp	r3, #192	; 0xc0
 8006a7c:	d016      	beq.n	8006aac <UART_SetConfig+0x1f0>
 8006a7e:	2bc0      	cmp	r3, #192	; 0xc0
 8006a80:	d818      	bhi.n	8006ab4 <UART_SetConfig+0x1f8>
 8006a82:	2b80      	cmp	r3, #128	; 0x80
 8006a84:	d00a      	beq.n	8006a9c <UART_SetConfig+0x1e0>
 8006a86:	2b80      	cmp	r3, #128	; 0x80
 8006a88:	d814      	bhi.n	8006ab4 <UART_SetConfig+0x1f8>
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d002      	beq.n	8006a94 <UART_SetConfig+0x1d8>
 8006a8e:	2b40      	cmp	r3, #64	; 0x40
 8006a90:	d008      	beq.n	8006aa4 <UART_SetConfig+0x1e8>
 8006a92:	e00f      	b.n	8006ab4 <UART_SetConfig+0x1f8>
 8006a94:	2300      	movs	r3, #0
 8006a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a9a:	e082      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aa2:	e07e      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 8006aa4:	2304      	movs	r3, #4
 8006aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aaa:	e07a      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 8006aac:	2308      	movs	r3, #8
 8006aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ab2:	e076      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 8006ab4:	2310      	movs	r3, #16
 8006ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aba:	e072      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a35      	ldr	r2, [pc, #212]	; (8006b98 <UART_SetConfig+0x2dc>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d12a      	bne.n	8006b1c <UART_SetConfig+0x260>
 8006ac6:	4b30      	ldr	r3, [pc, #192]	; (8006b88 <UART_SetConfig+0x2cc>)
 8006ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006acc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ad0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ad4:	d01a      	beq.n	8006b0c <UART_SetConfig+0x250>
 8006ad6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ada:	d81b      	bhi.n	8006b14 <UART_SetConfig+0x258>
 8006adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ae0:	d00c      	beq.n	8006afc <UART_SetConfig+0x240>
 8006ae2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ae6:	d815      	bhi.n	8006b14 <UART_SetConfig+0x258>
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d003      	beq.n	8006af4 <UART_SetConfig+0x238>
 8006aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006af0:	d008      	beq.n	8006b04 <UART_SetConfig+0x248>
 8006af2:	e00f      	b.n	8006b14 <UART_SetConfig+0x258>
 8006af4:	2300      	movs	r3, #0
 8006af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006afa:	e052      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 8006afc:	2302      	movs	r3, #2
 8006afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b02:	e04e      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 8006b04:	2304      	movs	r3, #4
 8006b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b0a:	e04a      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 8006b0c:	2308      	movs	r3, #8
 8006b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b12:	e046      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 8006b14:	2310      	movs	r3, #16
 8006b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b1a:	e042      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a17      	ldr	r2, [pc, #92]	; (8006b80 <UART_SetConfig+0x2c4>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d13a      	bne.n	8006b9c <UART_SetConfig+0x2e0>
 8006b26:	4b18      	ldr	r3, [pc, #96]	; (8006b88 <UART_SetConfig+0x2cc>)
 8006b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b34:	d01a      	beq.n	8006b6c <UART_SetConfig+0x2b0>
 8006b36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b3a:	d81b      	bhi.n	8006b74 <UART_SetConfig+0x2b8>
 8006b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b40:	d00c      	beq.n	8006b5c <UART_SetConfig+0x2a0>
 8006b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b46:	d815      	bhi.n	8006b74 <UART_SetConfig+0x2b8>
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <UART_SetConfig+0x298>
 8006b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b50:	d008      	beq.n	8006b64 <UART_SetConfig+0x2a8>
 8006b52:	e00f      	b.n	8006b74 <UART_SetConfig+0x2b8>
 8006b54:	2300      	movs	r3, #0
 8006b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b5a:	e022      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b62:	e01e      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 8006b64:	2304      	movs	r3, #4
 8006b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b6a:	e01a      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 8006b6c:	2308      	movs	r3, #8
 8006b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b72:	e016      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 8006b74:	2310      	movs	r3, #16
 8006b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b7a:	e012      	b.n	8006ba2 <UART_SetConfig+0x2e6>
 8006b7c:	efff69f3 	.word	0xefff69f3
 8006b80:	40008000 	.word	0x40008000
 8006b84:	40013800 	.word	0x40013800
 8006b88:	40021000 	.word	0x40021000
 8006b8c:	40004400 	.word	0x40004400
 8006b90:	40004800 	.word	0x40004800
 8006b94:	40004c00 	.word	0x40004c00
 8006b98:	40005000 	.word	0x40005000
 8006b9c:	2310      	movs	r3, #16
 8006b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a9f      	ldr	r2, [pc, #636]	; (8006e24 <UART_SetConfig+0x568>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d17a      	bne.n	8006ca2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bb0:	2b08      	cmp	r3, #8
 8006bb2:	d824      	bhi.n	8006bfe <UART_SetConfig+0x342>
 8006bb4:	a201      	add	r2, pc, #4	; (adr r2, 8006bbc <UART_SetConfig+0x300>)
 8006bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bba:	bf00      	nop
 8006bbc:	08006be1 	.word	0x08006be1
 8006bc0:	08006bff 	.word	0x08006bff
 8006bc4:	08006be9 	.word	0x08006be9
 8006bc8:	08006bff 	.word	0x08006bff
 8006bcc:	08006bef 	.word	0x08006bef
 8006bd0:	08006bff 	.word	0x08006bff
 8006bd4:	08006bff 	.word	0x08006bff
 8006bd8:	08006bff 	.word	0x08006bff
 8006bdc:	08006bf7 	.word	0x08006bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006be0:	f7fc ff22 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 8006be4:	61f8      	str	r0, [r7, #28]
        break;
 8006be6:	e010      	b.n	8006c0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006be8:	4b8f      	ldr	r3, [pc, #572]	; (8006e28 <UART_SetConfig+0x56c>)
 8006bea:	61fb      	str	r3, [r7, #28]
        break;
 8006bec:	e00d      	b.n	8006c0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bee:	f7fc fe83 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 8006bf2:	61f8      	str	r0, [r7, #28]
        break;
 8006bf4:	e009      	b.n	8006c0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bfa:	61fb      	str	r3, [r7, #28]
        break;
 8006bfc:	e005      	b.n	8006c0a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f000 80fb 	beq.w	8006e08 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	4613      	mov	r3, r2
 8006c18:	005b      	lsls	r3, r3, #1
 8006c1a:	4413      	add	r3, r2
 8006c1c:	69fa      	ldr	r2, [r7, #28]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d305      	bcc.n	8006c2e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c28:	69fa      	ldr	r2, [r7, #28]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d903      	bls.n	8006c36 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c34:	e0e8      	b.n	8006e08 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	461c      	mov	r4, r3
 8006c3c:	4615      	mov	r5, r2
 8006c3e:	f04f 0200 	mov.w	r2, #0
 8006c42:	f04f 0300 	mov.w	r3, #0
 8006c46:	022b      	lsls	r3, r5, #8
 8006c48:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006c4c:	0222      	lsls	r2, r4, #8
 8006c4e:	68f9      	ldr	r1, [r7, #12]
 8006c50:	6849      	ldr	r1, [r1, #4]
 8006c52:	0849      	lsrs	r1, r1, #1
 8006c54:	2000      	movs	r0, #0
 8006c56:	4688      	mov	r8, r1
 8006c58:	4681      	mov	r9, r0
 8006c5a:	eb12 0a08 	adds.w	sl, r2, r8
 8006c5e:	eb43 0b09 	adc.w	fp, r3, r9
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	603b      	str	r3, [r7, #0]
 8006c6a:	607a      	str	r2, [r7, #4]
 8006c6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c70:	4650      	mov	r0, sl
 8006c72:	4659      	mov	r1, fp
 8006c74:	f7f9 fb04 	bl	8000280 <__aeabi_uldivmod>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c86:	d308      	bcc.n	8006c9a <UART_SetConfig+0x3de>
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c8e:	d204      	bcs.n	8006c9a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	69ba      	ldr	r2, [r7, #24]
 8006c96:	60da      	str	r2, [r3, #12]
 8006c98:	e0b6      	b.n	8006e08 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ca0:	e0b2      	b.n	8006e08 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	69db      	ldr	r3, [r3, #28]
 8006ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006caa:	d15e      	bne.n	8006d6a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006cac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d828      	bhi.n	8006d06 <UART_SetConfig+0x44a>
 8006cb4:	a201      	add	r2, pc, #4	; (adr r2, 8006cbc <UART_SetConfig+0x400>)
 8006cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cba:	bf00      	nop
 8006cbc:	08006ce1 	.word	0x08006ce1
 8006cc0:	08006ce9 	.word	0x08006ce9
 8006cc4:	08006cf1 	.word	0x08006cf1
 8006cc8:	08006d07 	.word	0x08006d07
 8006ccc:	08006cf7 	.word	0x08006cf7
 8006cd0:	08006d07 	.word	0x08006d07
 8006cd4:	08006d07 	.word	0x08006d07
 8006cd8:	08006d07 	.word	0x08006d07
 8006cdc:	08006cff 	.word	0x08006cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ce0:	f7fc fea2 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 8006ce4:	61f8      	str	r0, [r7, #28]
        break;
 8006ce6:	e014      	b.n	8006d12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ce8:	f7fc feb4 	bl	8003a54 <HAL_RCC_GetPCLK2Freq>
 8006cec:	61f8      	str	r0, [r7, #28]
        break;
 8006cee:	e010      	b.n	8006d12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cf0:	4b4d      	ldr	r3, [pc, #308]	; (8006e28 <UART_SetConfig+0x56c>)
 8006cf2:	61fb      	str	r3, [r7, #28]
        break;
 8006cf4:	e00d      	b.n	8006d12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cf6:	f7fc fdff 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 8006cfa:	61f8      	str	r0, [r7, #28]
        break;
 8006cfc:	e009      	b.n	8006d12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d02:	61fb      	str	r3, [r7, #28]
        break;
 8006d04:	e005      	b.n	8006d12 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d077      	beq.n	8006e08 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	005a      	lsls	r2, r3, #1
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	085b      	lsrs	r3, r3, #1
 8006d22:	441a      	add	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d2c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	2b0f      	cmp	r3, #15
 8006d32:	d916      	bls.n	8006d62 <UART_SetConfig+0x4a6>
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d3a:	d212      	bcs.n	8006d62 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	f023 030f 	bic.w	r3, r3, #15
 8006d44:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	085b      	lsrs	r3, r3, #1
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	f003 0307 	and.w	r3, r3, #7
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	8afb      	ldrh	r3, [r7, #22]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	8afa      	ldrh	r2, [r7, #22]
 8006d5e:	60da      	str	r2, [r3, #12]
 8006d60:	e052      	b.n	8006e08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d68:	e04e      	b.n	8006e08 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d6e:	2b08      	cmp	r3, #8
 8006d70:	d827      	bhi.n	8006dc2 <UART_SetConfig+0x506>
 8006d72:	a201      	add	r2, pc, #4	; (adr r2, 8006d78 <UART_SetConfig+0x4bc>)
 8006d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d78:	08006d9d 	.word	0x08006d9d
 8006d7c:	08006da5 	.word	0x08006da5
 8006d80:	08006dad 	.word	0x08006dad
 8006d84:	08006dc3 	.word	0x08006dc3
 8006d88:	08006db3 	.word	0x08006db3
 8006d8c:	08006dc3 	.word	0x08006dc3
 8006d90:	08006dc3 	.word	0x08006dc3
 8006d94:	08006dc3 	.word	0x08006dc3
 8006d98:	08006dbb 	.word	0x08006dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d9c:	f7fc fe44 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 8006da0:	61f8      	str	r0, [r7, #28]
        break;
 8006da2:	e014      	b.n	8006dce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006da4:	f7fc fe56 	bl	8003a54 <HAL_RCC_GetPCLK2Freq>
 8006da8:	61f8      	str	r0, [r7, #28]
        break;
 8006daa:	e010      	b.n	8006dce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dac:	4b1e      	ldr	r3, [pc, #120]	; (8006e28 <UART_SetConfig+0x56c>)
 8006dae:	61fb      	str	r3, [r7, #28]
        break;
 8006db0:	e00d      	b.n	8006dce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006db2:	f7fc fda1 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 8006db6:	61f8      	str	r0, [r7, #28]
        break;
 8006db8:	e009      	b.n	8006dce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dbe:	61fb      	str	r3, [r7, #28]
        break;
 8006dc0:	e005      	b.n	8006dce <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006dcc:	bf00      	nop
    }

    if (pclk != 0U)
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d019      	beq.n	8006e08 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	085a      	lsrs	r2, r3, #1
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	441a      	add	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	2b0f      	cmp	r3, #15
 8006dec:	d909      	bls.n	8006e02 <UART_SetConfig+0x546>
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df4:	d205      	bcs.n	8006e02 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	60da      	str	r2, [r3, #12]
 8006e00:	e002      	b.n	8006e08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006e14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3728      	adds	r7, #40	; 0x28
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e22:	bf00      	nop
 8006e24:	40008000 	.word	0x40008000
 8006e28:	00f42400 	.word	0x00f42400

08006e2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00a      	beq.n	8006e56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	f003 0302 	and.w	r3, r3, #2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00a      	beq.n	8006e78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	430a      	orrs	r2, r1
 8006e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7c:	f003 0304 	and.w	r3, r3, #4
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00a      	beq.n	8006e9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	430a      	orrs	r2, r1
 8006e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	f003 0308 	and.w	r3, r3, #8
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00a      	beq.n	8006ebc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	f003 0310 	and.w	r3, r3, #16
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00a      	beq.n	8006ede <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	430a      	orrs	r2, r1
 8006edc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee2:	f003 0320 	and.w	r3, r3, #32
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00a      	beq.n	8006f00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	430a      	orrs	r2, r1
 8006efe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d01a      	beq.n	8006f42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f2a:	d10a      	bne.n	8006f42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00a      	beq.n	8006f64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	430a      	orrs	r2, r1
 8006f62:	605a      	str	r2, [r3, #4]
  }
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af02      	add	r7, sp, #8
 8006f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f80:	f7fa feac 	bl	8001cdc <HAL_GetTick>
 8006f84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0308 	and.w	r3, r3, #8
 8006f90:	2b08      	cmp	r3, #8
 8006f92:	d10e      	bne.n	8006fb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f82d 	bl	8007002 <UART_WaitOnFlagUntilTimeout>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e023      	b.n	8006ffa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0304 	and.w	r3, r3, #4
 8006fbc:	2b04      	cmp	r3, #4
 8006fbe:	d10e      	bne.n	8006fde <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f817 	bl	8007002 <UART_WaitOnFlagUntilTimeout>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e00d      	b.n	8006ffa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b09c      	sub	sp, #112	; 0x70
 8007006:	af00      	add	r7, sp, #0
 8007008:	60f8      	str	r0, [r7, #12]
 800700a:	60b9      	str	r1, [r7, #8]
 800700c:	603b      	str	r3, [r7, #0]
 800700e:	4613      	mov	r3, r2
 8007010:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007012:	e0a5      	b.n	8007160 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701a:	f000 80a1 	beq.w	8007160 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800701e:	f7fa fe5d 	bl	8001cdc <HAL_GetTick>
 8007022:	4602      	mov	r2, r0
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800702a:	429a      	cmp	r2, r3
 800702c:	d302      	bcc.n	8007034 <UART_WaitOnFlagUntilTimeout+0x32>
 800702e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007030:	2b00      	cmp	r3, #0
 8007032:	d13e      	bne.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800703c:	e853 3f00 	ldrex	r3, [r3]
 8007040:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007044:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007048:	667b      	str	r3, [r7, #100]	; 0x64
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007052:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007054:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007056:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007058:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800705a:	e841 2300 	strex	r3, r2, [r1]
 800705e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1e6      	bne.n	8007034 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3308      	adds	r3, #8
 800706c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007070:	e853 3f00 	ldrex	r3, [r3]
 8007074:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007078:	f023 0301 	bic.w	r3, r3, #1
 800707c:	663b      	str	r3, [r7, #96]	; 0x60
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	3308      	adds	r3, #8
 8007084:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007086:	64ba      	str	r2, [r7, #72]	; 0x48
 8007088:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800708c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800708e:	e841 2300 	strex	r3, r2, [r1]
 8007092:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1e5      	bne.n	8007066 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2220      	movs	r2, #32
 800709e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2220      	movs	r2, #32
 80070a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e067      	b.n	8007182 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 0304 	and.w	r3, r3, #4
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d04f      	beq.n	8007160 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	69db      	ldr	r3, [r3, #28]
 80070c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070ce:	d147      	bne.n	8007160 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070d8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e2:	e853 3f00 	ldrex	r3, [r3]
 80070e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	461a      	mov	r2, r3
 80070f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f8:	637b      	str	r3, [r7, #52]	; 0x34
 80070fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007100:	e841 2300 	strex	r3, r2, [r1]
 8007104:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1e6      	bne.n	80070da <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	3308      	adds	r3, #8
 8007112:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	e853 3f00 	ldrex	r3, [r3]
 800711a:	613b      	str	r3, [r7, #16]
   return(result);
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	f023 0301 	bic.w	r3, r3, #1
 8007122:	66bb      	str	r3, [r7, #104]	; 0x68
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	3308      	adds	r3, #8
 800712a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800712c:	623a      	str	r2, [r7, #32]
 800712e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007130:	69f9      	ldr	r1, [r7, #28]
 8007132:	6a3a      	ldr	r2, [r7, #32]
 8007134:	e841 2300 	strex	r3, r2, [r1]
 8007138:	61bb      	str	r3, [r7, #24]
   return(result);
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1e5      	bne.n	800710c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2220      	movs	r2, #32
 8007144:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2220      	movs	r2, #32
 800714a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2220      	movs	r2, #32
 8007150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e010      	b.n	8007182 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	69da      	ldr	r2, [r3, #28]
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	4013      	ands	r3, r2
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	429a      	cmp	r2, r3
 800716e:	bf0c      	ite	eq
 8007170:	2301      	moveq	r3, #1
 8007172:	2300      	movne	r3, #0
 8007174:	b2db      	uxtb	r3, r3
 8007176:	461a      	mov	r2, r3
 8007178:	79fb      	ldrb	r3, [r7, #7]
 800717a:	429a      	cmp	r2, r3
 800717c:	f43f af4a 	beq.w	8007014 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3770      	adds	r7, #112	; 0x70
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800718a:	b480      	push	{r7}
 800718c:	b095      	sub	sp, #84	; 0x54
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719a:	e853 3f00 	ldrex	r3, [r3]
 800719e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	461a      	mov	r2, r3
 80071ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071b0:	643b      	str	r3, [r7, #64]	; 0x40
 80071b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071b8:	e841 2300 	strex	r3, r2, [r1]
 80071bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1e6      	bne.n	8007192 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	3308      	adds	r3, #8
 80071ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	e853 3f00 	ldrex	r3, [r3]
 80071d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	f023 0301 	bic.w	r3, r3, #1
 80071da:	64bb      	str	r3, [r7, #72]	; 0x48
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3308      	adds	r3, #8
 80071e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071ec:	e841 2300 	strex	r3, r2, [r1]
 80071f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1e5      	bne.n	80071c4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d118      	bne.n	8007232 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	e853 3f00 	ldrex	r3, [r3]
 800720c:	60bb      	str	r3, [r7, #8]
   return(result);
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	f023 0310 	bic.w	r3, r3, #16
 8007214:	647b      	str	r3, [r7, #68]	; 0x44
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	461a      	mov	r2, r3
 800721c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800721e:	61bb      	str	r3, [r7, #24]
 8007220:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007222:	6979      	ldr	r1, [r7, #20]
 8007224:	69ba      	ldr	r2, [r7, #24]
 8007226:	e841 2300 	strex	r3, r2, [r1]
 800722a:	613b      	str	r3, [r7, #16]
   return(result);
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1e6      	bne.n	8007200 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2220      	movs	r2, #32
 8007236:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007244:	bf00      	nop
 8007246:	3754      	adds	r7, #84	; 0x54
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f7ff fb0e 	bl	8006890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007274:	bf00      	nop
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800727c:	b480      	push	{r7}
 800727e:	b08f      	sub	sp, #60	; 0x3c
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007288:	2b21      	cmp	r3, #33	; 0x21
 800728a:	d14d      	bne.n	8007328 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007292:	b29b      	uxth	r3, r3
 8007294:	2b00      	cmp	r3, #0
 8007296:	d132      	bne.n	80072fe <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	e853 3f00 	ldrex	r3, [r3]
 80072a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072ac:	637b      	str	r3, [r7, #52]	; 0x34
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072b8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072be:	e841 2300 	strex	r3, r2, [r1]
 80072c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1e6      	bne.n	8007298 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	e853 3f00 	ldrex	r3, [r3]
 80072d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072de:	633b      	str	r3, [r7, #48]	; 0x30
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	461a      	mov	r2, r3
 80072e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e8:	61bb      	str	r3, [r7, #24]
 80072ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ec:	6979      	ldr	r1, [r7, #20]
 80072ee:	69ba      	ldr	r2, [r7, #24]
 80072f0:	e841 2300 	strex	r3, r2, [r1]
 80072f4:	613b      	str	r3, [r7, #16]
   return(result);
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1e6      	bne.n	80072ca <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80072fc:	e014      	b.n	8007328 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007302:	781a      	ldrb	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	b292      	uxth	r2, r2
 800730a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007310:	1c5a      	adds	r2, r3, #1
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800731c:	b29b      	uxth	r3, r3
 800731e:	3b01      	subs	r3, #1
 8007320:	b29a      	uxth	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007328:	bf00      	nop
 800732a:	373c      	adds	r7, #60	; 0x3c
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007334:	b480      	push	{r7}
 8007336:	b091      	sub	sp, #68	; 0x44
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007340:	2b21      	cmp	r3, #33	; 0x21
 8007342:	d151      	bne.n	80073e8 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800734a:	b29b      	uxth	r3, r3
 800734c:	2b00      	cmp	r3, #0
 800734e:	d132      	bne.n	80073b6 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	e853 3f00 	ldrex	r3, [r3]
 800735c:	623b      	str	r3, [r7, #32]
   return(result);
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007364:	63bb      	str	r3, [r7, #56]	; 0x38
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	461a      	mov	r2, r3
 800736c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736e:	633b      	str	r3, [r7, #48]	; 0x30
 8007370:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007372:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007376:	e841 2300 	strex	r3, r2, [r1]
 800737a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800737c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1e6      	bne.n	8007350 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	e853 3f00 	ldrex	r3, [r3]
 800738e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007396:	637b      	str	r3, [r7, #52]	; 0x34
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	461a      	mov	r2, r3
 800739e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a0:	61fb      	str	r3, [r7, #28]
 80073a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a4:	69b9      	ldr	r1, [r7, #24]
 80073a6:	69fa      	ldr	r2, [r7, #28]
 80073a8:	e841 2300 	strex	r3, r2, [r1]
 80073ac:	617b      	str	r3, [r7, #20]
   return(result);
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1e6      	bne.n	8007382 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80073b4:	e018      	b.n	80073e8 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80073bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073be:	881a      	ldrh	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073c8:	b292      	uxth	r2, r2
 80073ca:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073d0:	1c9a      	adds	r2, r3, #2
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073dc:	b29b      	uxth	r3, r3
 80073de:	3b01      	subs	r3, #1
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80073e8:	bf00      	nop
 80073ea:	3744      	adds	r7, #68	; 0x44
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b088      	sub	sp, #32
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	e853 3f00 	ldrex	r3, [r3]
 8007408:	60bb      	str	r3, [r7, #8]
   return(result);
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007410:	61fb      	str	r3, [r7, #28]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	61bb      	str	r3, [r7, #24]
 800741c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741e:	6979      	ldr	r1, [r7, #20]
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	e841 2300 	strex	r3, r2, [r1]
 8007426:	613b      	str	r3, [r7, #16]
   return(result);
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1e6      	bne.n	80073fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2220      	movs	r2, #32
 8007432:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7ff fa1e 	bl	800687c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007440:	bf00      	nop
 8007442:	3720      	adds	r7, #32
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800745c:	b084      	sub	sp, #16
 800745e:	b580      	push	{r7, lr}
 8007460:	b084      	sub	sp, #16
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	f107 001c 	add.w	r0, r7, #28
 800746a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fa70 	bl	8007960 <USB_CoreReset>
 8007480:	4603      	mov	r3, r0
 8007482:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007486:	2b00      	cmp	r3, #0
 8007488:	d106      	bne.n	8007498 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	639a      	str	r2, [r3, #56]	; 0x38
 8007496:	e005      	b.n	80074a4 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074b0:	b004      	add	sp, #16
 80074b2:	4770      	bx	lr

080074b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f023 0201 	bic.w	r2, r3, #1
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	460b      	mov	r3, r1
 80074e0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80074e2:	2300      	movs	r3, #0
 80074e4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80074f2:	78fb      	ldrb	r3, [r7, #3]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d115      	bne.n	8007524 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007504:	2001      	movs	r0, #1
 8007506:	f7fa fbf5 	bl	8001cf4 <HAL_Delay>
      ms++;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	3301      	adds	r3, #1
 800750e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fa17 	bl	8007944 <USB_GetMode>
 8007516:	4603      	mov	r3, r0
 8007518:	2b01      	cmp	r3, #1
 800751a:	d01e      	beq.n	800755a <USB_SetCurrentMode+0x84>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2b31      	cmp	r3, #49	; 0x31
 8007520:	d9f0      	bls.n	8007504 <USB_SetCurrentMode+0x2e>
 8007522:	e01a      	b.n	800755a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007524:	78fb      	ldrb	r3, [r7, #3]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d115      	bne.n	8007556 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007536:	2001      	movs	r0, #1
 8007538:	f7fa fbdc 	bl	8001cf4 <HAL_Delay>
      ms++;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	3301      	adds	r3, #1
 8007540:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f9fe 	bl	8007944 <USB_GetMode>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d005      	beq.n	800755a <USB_SetCurrentMode+0x84>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2b31      	cmp	r3, #49	; 0x31
 8007552:	d9f0      	bls.n	8007536 <USB_SetCurrentMode+0x60>
 8007554:	e001      	b.n	800755a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e005      	b.n	8007566 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2b32      	cmp	r3, #50	; 0x32
 800755e:	d101      	bne.n	8007564 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e000      	b.n	8007566 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
	...

08007570 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007570:	b084      	sub	sp, #16
 8007572:	b580      	push	{r7, lr}
 8007574:	b086      	sub	sp, #24
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
 800757a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800757e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800758a:	2300      	movs	r3, #0
 800758c:	613b      	str	r3, [r7, #16]
 800758e:	e009      	b.n	80075a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	3340      	adds	r3, #64	; 0x40
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	4413      	add	r3, r2
 800759a:	2200      	movs	r2, #0
 800759c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	3301      	adds	r3, #1
 80075a2:	613b      	str	r3, [r7, #16]
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	2b0e      	cmp	r3, #14
 80075a8:	d9f2      	bls.n	8007590 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80075aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d11c      	bne.n	80075ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075be:	f043 0302 	orr.w	r3, r3, #2
 80075c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	601a      	str	r2, [r3, #0]
 80075e8:	e005      	b.n	80075f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075fc:	461a      	mov	r2, r3
 80075fe:	2300      	movs	r3, #0
 8007600:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007608:	4619      	mov	r1, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007610:	461a      	mov	r2, r3
 8007612:	680b      	ldr	r3, [r1, #0]
 8007614:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007616:	2103      	movs	r1, #3
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 f959 	bl	80078d0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800761e:	2110      	movs	r1, #16
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f8f1 	bl	8007808 <USB_FlushTxFifo>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f91d 	bl	8007870 <USB_FlushRxFifo>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d001      	beq.n	8007640 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007646:	461a      	mov	r2, r3
 8007648:	2300      	movs	r3, #0
 800764a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007652:	461a      	mov	r2, r3
 8007654:	2300      	movs	r3, #0
 8007656:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800765e:	461a      	mov	r2, r3
 8007660:	2300      	movs	r3, #0
 8007662:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007664:	2300      	movs	r3, #0
 8007666:	613b      	str	r3, [r7, #16]
 8007668:	e043      	b.n	80076f2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	015a      	lsls	r2, r3, #5
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	4413      	add	r3, r2
 8007672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800767c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007680:	d118      	bne.n	80076b4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10a      	bne.n	800769e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	015a      	lsls	r2, r3, #5
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4413      	add	r3, r2
 8007690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007694:	461a      	mov	r2, r3
 8007696:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800769a:	6013      	str	r3, [r2, #0]
 800769c:	e013      	b.n	80076c6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	015a      	lsls	r2, r3, #5
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076aa:	461a      	mov	r2, r3
 80076ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80076b0:	6013      	str	r3, [r2, #0]
 80076b2:	e008      	b.n	80076c6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	015a      	lsls	r2, r3, #5
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	4413      	add	r3, r2
 80076bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c0:	461a      	mov	r2, r3
 80076c2:	2300      	movs	r3, #0
 80076c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	015a      	lsls	r2, r3, #5
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	4413      	add	r3, r2
 80076ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d2:	461a      	mov	r2, r3
 80076d4:	2300      	movs	r3, #0
 80076d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	4413      	add	r3, r2
 80076e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076e4:	461a      	mov	r2, r3
 80076e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80076ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	3301      	adds	r3, #1
 80076f0:	613b      	str	r3, [r7, #16]
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d3b7      	bcc.n	800766a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076fa:	2300      	movs	r3, #0
 80076fc:	613b      	str	r3, [r7, #16]
 80076fe:	e043      	b.n	8007788 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	015a      	lsls	r2, r3, #5
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	4413      	add	r3, r2
 8007708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007712:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007716:	d118      	bne.n	800774a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d10a      	bne.n	8007734 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	015a      	lsls	r2, r3, #5
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	4413      	add	r3, r2
 8007726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772a:	461a      	mov	r2, r3
 800772c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007730:	6013      	str	r3, [r2, #0]
 8007732:	e013      	b.n	800775c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	015a      	lsls	r2, r3, #5
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	4413      	add	r3, r2
 800773c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007740:	461a      	mov	r2, r3
 8007742:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007746:	6013      	str	r3, [r2, #0]
 8007748:	e008      	b.n	800775c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	015a      	lsls	r2, r3, #5
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	4413      	add	r3, r2
 8007752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007756:	461a      	mov	r2, r3
 8007758:	2300      	movs	r3, #0
 800775a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	015a      	lsls	r2, r3, #5
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	4413      	add	r3, r2
 8007764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007768:	461a      	mov	r2, r3
 800776a:	2300      	movs	r3, #0
 800776c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	015a      	lsls	r2, r3, #5
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	4413      	add	r3, r2
 8007776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800777a:	461a      	mov	r2, r3
 800777c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007780:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	3301      	adds	r3, #1
 8007786:	613b      	str	r3, [r7, #16]
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	429a      	cmp	r2, r3
 800778e:	d3b7      	bcc.n	8007700 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800779e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80077b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	f043 0210 	orr.w	r2, r3, #16
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	699a      	ldr	r2, [r3, #24]
 80077c2:	4b10      	ldr	r3, [pc, #64]	; (8007804 <USB_DevInit+0x294>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80077ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d005      	beq.n	80077dc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	f043 0208 	orr.w	r2, r3, #8
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80077dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d107      	bne.n	80077f2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077ea:	f043 0304 	orr.w	r3, r3, #4
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80077f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3718      	adds	r7, #24
 80077f8:	46bd      	mov	sp, r7
 80077fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077fe:	b004      	add	sp, #16
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	803c3800 	.word	0x803c3800

08007808 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007812:	2300      	movs	r3, #0
 8007814:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	3301      	adds	r3, #1
 800781a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	4a13      	ldr	r2, [pc, #76]	; (800786c <USB_FlushTxFifo+0x64>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d901      	bls.n	8007828 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e01b      	b.n	8007860 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	2b00      	cmp	r3, #0
 800782e:	daf2      	bge.n	8007816 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007830:	2300      	movs	r3, #0
 8007832:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	019b      	lsls	r3, r3, #6
 8007838:	f043 0220 	orr.w	r2, r3, #32
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	3301      	adds	r3, #1
 8007844:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	4a08      	ldr	r2, [pc, #32]	; (800786c <USB_FlushTxFifo+0x64>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d901      	bls.n	8007852 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800784e:	2303      	movs	r3, #3
 8007850:	e006      	b.n	8007860 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	f003 0320 	and.w	r3, r3, #32
 800785a:	2b20      	cmp	r3, #32
 800785c:	d0f0      	beq.n	8007840 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	00030d40 	.word	0x00030d40

08007870 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	3301      	adds	r3, #1
 8007880:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	4a11      	ldr	r2, [pc, #68]	; (80078cc <USB_FlushRxFifo+0x5c>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d901      	bls.n	800788e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800788a:	2303      	movs	r3, #3
 800788c:	e018      	b.n	80078c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	2b00      	cmp	r3, #0
 8007894:	daf2      	bge.n	800787c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007896:	2300      	movs	r3, #0
 8007898:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2210      	movs	r2, #16
 800789e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	3301      	adds	r3, #1
 80078a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	4a08      	ldr	r2, [pc, #32]	; (80078cc <USB_FlushRxFifo+0x5c>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d901      	bls.n	80078b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80078ae:	2303      	movs	r3, #3
 80078b0:	e006      	b.n	80078c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	f003 0310 	and.w	r3, r3, #16
 80078ba:	2b10      	cmp	r3, #16
 80078bc:	d0f0      	beq.n	80078a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3714      	adds	r7, #20
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	00030d40 	.word	0x00030d40

080078d0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	460b      	mov	r3, r1
 80078da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	78fb      	ldrb	r3, [r7, #3]
 80078ea:	68f9      	ldr	r1, [r7, #12]
 80078ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078f0:	4313      	orrs	r3, r2
 80078f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr

08007902 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007902:	b480      	push	{r7}
 8007904:	b085      	sub	sp, #20
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800791c:	f023 0303 	bic.w	r3, r3, #3
 8007920:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007930:	f043 0302 	orr.w	r3, r3, #2
 8007934:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3714      	adds	r7, #20
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	f003 0301 	and.w	r3, r3, #1
}
 8007954:	4618      	mov	r0, r3
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007968:	2300      	movs	r3, #0
 800796a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	3301      	adds	r3, #1
 8007970:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	4a13      	ldr	r2, [pc, #76]	; (80079c4 <USB_CoreReset+0x64>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d901      	bls.n	800797e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e01b      	b.n	80079b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	daf2      	bge.n	800796c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007986:	2300      	movs	r3, #0
 8007988:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	f043 0201 	orr.w	r2, r3, #1
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	3301      	adds	r3, #1
 800799a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	4a09      	ldr	r2, [pc, #36]	; (80079c4 <USB_CoreReset+0x64>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d901      	bls.n	80079a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80079a4:	2303      	movs	r3, #3
 80079a6:	e006      	b.n	80079b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d0f0      	beq.n	8007996 <USB_CoreReset+0x36>

  return HAL_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	00030d40 	.word	0x00030d40

080079c8 <ParseNumber>:
 * @brief  Parses and returns number from string.
 * @param  ptr: pointer to string
 * @param  cnt: pointer to the number of parsed digit
 * @retval integer value.
 */
static int32_t ParseNumber(char *ptr, uint8_t *cnt) {
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
	uint8_t minus = 0, i = 0;
 80079d2:	2300      	movs	r3, #0
 80079d4:	73fb      	strb	r3, [r7, #15]
 80079d6:	2300      	movs	r3, #0
 80079d8:	73bb      	strb	r3, [r7, #14]
	int32_t sum = 0;
 80079da:	2300      	movs	r3, #0
 80079dc:	60bb      	str	r3, [r7, #8]

	if (*ptr == '-') { /* Check for minus character */
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	2b2d      	cmp	r3, #45	; 0x2d
 80079e4:	d119      	bne.n	8007a1a <ParseNumber+0x52>
		minus = 1;
 80079e6:	2301      	movs	r3, #1
 80079e8:	73fb      	strb	r3, [r7, #15]
		ptr++;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	3301      	adds	r3, #1
 80079ee:	607b      	str	r3, [r7, #4]
		i++;
 80079f0:	7bbb      	ldrb	r3, [r7, #14]
 80079f2:	3301      	adds	r3, #1
 80079f4:	73bb      	strb	r3, [r7, #14]
	}
	while (CHARISNUM(*ptr)) { /* Parse number */
 80079f6:	e010      	b.n	8007a1a <ParseNumber+0x52>
		sum = 10 * sum + CHAR2NUM(*ptr);
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	4613      	mov	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	005b      	lsls	r3, r3, #1
 8007a02:	461a      	mov	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	3b30      	subs	r3, #48	; 0x30
 8007a0a:	4413      	add	r3, r2
 8007a0c:	60bb      	str	r3, [r7, #8]
		ptr++;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	3301      	adds	r3, #1
 8007a12:	607b      	str	r3, [r7, #4]
		i++;
 8007a14:	7bbb      	ldrb	r3, [r7, #14]
 8007a16:	3301      	adds	r3, #1
 8007a18:	73bb      	strb	r3, [r7, #14]
	while (CHARISNUM(*ptr)) { /* Parse number */
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	2b2f      	cmp	r3, #47	; 0x2f
 8007a20:	d903      	bls.n	8007a2a <ParseNumber+0x62>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	2b39      	cmp	r3, #57	; 0x39
 8007a28:	d9e6      	bls.n	80079f8 <ParseNumber+0x30>
	}
	if (cnt != NULL) { /* Save number of characters used for number */
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <ParseNumber+0x6e>
		*cnt = i;
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	7bba      	ldrb	r2, [r7, #14]
 8007a34:	701a      	strb	r2, [r3, #0]
	}
	if (minus) { /* Minus detected */
 8007a36:	7bfb      	ldrb	r3, [r7, #15]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d002      	beq.n	8007a42 <ParseNumber+0x7a>
		return 0 - sum;
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	425b      	negs	r3, r3
 8007a40:	e000      	b.n	8007a44 <ParseNumber+0x7c>
	}
	return sum; /* Return number */
 8007a42:	68bb      	ldr	r3, [r7, #8]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3714      	adds	r7, #20
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <ParseIP>:
 * @brief  Parses and returns IP address.
 * @param  ptr: pointer to string
 * @param  arr: pointer to IP array
 * @retval None.
 */
static void ParseIP(char *ptr, uint8_t *arr) {
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
	uint8_t hexnum = 0, hexcnt;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	73fb      	strb	r3, [r7, #15]

	while (*ptr) {
 8007a5e:	e019      	b.n	8007a94 <ParseIP+0x44>
		hexcnt = 1;
 8007a60:	2301      	movs	r3, #1
 8007a62:	73bb      	strb	r3, [r7, #14]
		if (*ptr != '.') {
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	2b2e      	cmp	r3, #46	; 0x2e
 8007a6a:	d00e      	beq.n	8007a8a <ParseIP+0x3a>
			arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8007a6c:	f107 030e 	add.w	r3, r7, #14
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7ff ffa8 	bl	80079c8 <ParseNumber>
 8007a78:	4601      	mov	r1, r0
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
 8007a7c:	1c5a      	adds	r2, r3, #1
 8007a7e:	73fa      	strb	r2, [r7, #15]
 8007a80:	461a      	mov	r2, r3
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	4413      	add	r3, r2
 8007a86:	b2ca      	uxtb	r2, r1
 8007a88:	701a      	strb	r2, [r3, #0]
		}
		ptr = ptr + hexcnt;
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4413      	add	r3, r2
 8007a92:	607b      	str	r3, [r7, #4]
	while (*ptr) {
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1e1      	bne.n	8007a60 <ParseIP+0x10>
	}
}
 8007a9c:	bf00      	nop
 8007a9e:	bf00      	nop
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
	...

08007aa8 <AT_ParseInfo>:
 * @brief  Parses ES module informations and save them in the handle.
 * @param  Obj: pointer to module handle
 * @param  ptr: pointer to string
 * @retval None.
 */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata) {
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
	char *ptr;
	uint8_t num = 0;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	72fb      	strb	r3, [r7, #11]

	ptr = strtok((char*) pdata + 2, ",");
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	3302      	adds	r3, #2
 8007aba:	4934      	ldr	r1, [pc, #208]	; (8007b8c <AT_ParseInfo+0xe4>)
 8007abc:	4618      	mov	r0, r3
 8007abe:	f005 f8eb 	bl	800cc98 <strtok>
 8007ac2:	60f8      	str	r0, [r7, #12]

	while (ptr != NULL) {
 8007ac4:	e05a      	b.n	8007b7c <AT_ParseInfo+0xd4>
		switch (num++) {
 8007ac6:	7afb      	ldrb	r3, [r7, #11]
 8007ac8:	1c5a      	adds	r2, r3, #1
 8007aca:	72fa      	strb	r2, [r7, #11]
 8007acc:	2b06      	cmp	r3, #6
 8007ace:	d84f      	bhi.n	8007b70 <AT_ParseInfo+0xc8>
 8007ad0:	a201      	add	r2, pc, #4	; (adr r2, 8007ad8 <AT_ParseInfo+0x30>)
 8007ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad6:	bf00      	nop
 8007ad8:	08007af5 	.word	0x08007af5
 8007adc:	08007b03 	.word	0x08007b03
 8007ae0:	08007b13 	.word	0x08007b13
 8007ae4:	08007b23 	.word	0x08007b23
 8007ae8:	08007b33 	.word	0x08007b33
 8007aec:	08007b43 	.word	0x08007b43
 8007af0:	08007b57 	.word	0x08007b57
		case 0:
			strncpy((char*) Obj->Product_ID, ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2220      	movs	r2, #32
 8007af8:	68f9      	ldr	r1, [r7, #12]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f005 f8a3 	bl	800cc46 <strncpy>
			break;
 8007b00:	e037      	b.n	8007b72 <AT_ParseInfo+0xca>

		case 1:
			strncpy((char*) Obj->FW_Rev, ptr, ES_WIFI_FW_REV_SIZE);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	3320      	adds	r3, #32
 8007b06:	2218      	movs	r2, #24
 8007b08:	68f9      	ldr	r1, [r7, #12]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f005 f89b 	bl	800cc46 <strncpy>
			break;
 8007b10:	e02f      	b.n	8007b72 <AT_ParseInfo+0xca>

		case 2:
			strncpy((char*) Obj->API_Rev, ptr, ES_WIFI_API_REV_SIZE);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	3338      	adds	r3, #56	; 0x38
 8007b16:	2210      	movs	r2, #16
 8007b18:	68f9      	ldr	r1, [r7, #12]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f005 f893 	bl	800cc46 <strncpy>
			break;
 8007b20:	e027      	b.n	8007b72 <AT_ParseInfo+0xca>

		case 3:
			strncpy((char*) Obj->Stack_Rev, ptr, ES_WIFI_STACK_REV_SIZE);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	3348      	adds	r3, #72	; 0x48
 8007b26:	2210      	movs	r2, #16
 8007b28:	68f9      	ldr	r1, [r7, #12]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f005 f88b 	bl	800cc46 <strncpy>
			break;
 8007b30:	e01f      	b.n	8007b72 <AT_ParseInfo+0xca>

		case 4:
			strncpy((char*) Obj->RTOS_Rev, ptr, ES_WIFI_RTOS_REV_SIZE);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	3358      	adds	r3, #88	; 0x58
 8007b36:	2210      	movs	r2, #16
 8007b38:	68f9      	ldr	r1, [r7, #12]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f005 f883 	bl	800cc46 <strncpy>
			break;
 8007b40:	e017      	b.n	8007b72 <AT_ParseInfo+0xca>

		case 5:
			Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8007b42:	2100      	movs	r1, #0
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f7ff ff3f 	bl	80079c8 <ParseNumber>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8007b54:	e00d      	b.n	8007b72 <AT_ParseInfo+0xca>

		case 6:
			ptr = strtok(ptr, "\r");
 8007b56:	490e      	ldr	r1, [pc, #56]	; (8007b90 <AT_ParseInfo+0xe8>)
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f005 f89d 	bl	800cc98 <strtok>
 8007b5e:	60f8      	str	r0, [r7, #12]
			strncpy((char*) Obj->Product_Name, ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	3368      	adds	r3, #104	; 0x68
 8007b64:	2220      	movs	r2, #32
 8007b66:	68f9      	ldr	r1, [r7, #12]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f005 f86c 	bl	800cc46 <strncpy>
			break;
 8007b6e:	e000      	b.n	8007b72 <AT_ParseInfo+0xca>

		default:
			break;
 8007b70:	bf00      	nop
		}
		ptr = strtok(NULL, ",");
 8007b72:	4906      	ldr	r1, [pc, #24]	; (8007b8c <AT_ParseInfo+0xe4>)
 8007b74:	2000      	movs	r0, #0
 8007b76:	f005 f88f 	bl	800cc98 <strtok>
 8007b7a:	60f8      	str	r0, [r7, #12]
	while (ptr != NULL) {
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1a1      	bne.n	8007ac6 <AT_ParseInfo+0x1e>
	}
}
 8007b82:	bf00      	nop
 8007b84:	bf00      	nop
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	0800de90 	.word	0x0800de90
 8007b90:	0800de94 	.word	0x0800de94

08007b94 <AT_ParseConnSettings>:
 * @brief  Parses WIFI connection settings.
 * @param  NetSettings: settings
 * @param  pdata: pointer to data
 * @retval None.
 */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings) {
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
	uint8_t num = 0;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	73fb      	strb	r3, [r7, #15]
	char *ptr;

	ptr = strtok(pdata + 2, ",");
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	3302      	adds	r3, #2
 8007ba6:	4952      	ldr	r1, [pc, #328]	; (8007cf0 <AT_ParseConnSettings+0x15c>)
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f005 f875 	bl	800cc98 <strtok>
 8007bae:	60b8      	str	r0, [r7, #8]

	while (ptr != NULL) {
 8007bb0:	e095      	b.n	8007cde <AT_ParseConnSettings+0x14a>
		switch (num++) {
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
 8007bb4:	1c5a      	adds	r2, r3, #1
 8007bb6:	73fa      	strb	r2, [r7, #15]
 8007bb8:	2b0b      	cmp	r3, #11
 8007bba:	d87f      	bhi.n	8007cbc <AT_ParseConnSettings+0x128>
 8007bbc:	a201      	add	r2, pc, #4	; (adr r2, 8007bc4 <AT_ParseConnSettings+0x30>)
 8007bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc2:	bf00      	nop
 8007bc4:	08007bf5 	.word	0x08007bf5
 8007bc8:	08007c03 	.word	0x08007c03
 8007bcc:	08007c13 	.word	0x08007c13
 8007bd0:	08007c27 	.word	0x08007c27
 8007bd4:	08007c3b 	.word	0x08007c3b
 8007bd8:	08007c4f 	.word	0x08007c4f
 8007bdc:	08007c5d 	.word	0x08007c5d
 8007be0:	08007c6b 	.word	0x08007c6b
 8007be4:	08007c79 	.word	0x08007c79
 8007be8:	08007c87 	.word	0x08007c87
 8007bec:	08007c95 	.word	0x08007c95
 8007bf0:	08007ca9 	.word	0x08007ca9
		case 0:
			strncpy((char*) NetSettings->SSID, ptr,
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	2221      	movs	r2, #33	; 0x21
 8007bf8:	68b9      	ldr	r1, [r7, #8]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f005 f823 	bl	800cc46 <strncpy>
			ES_WIFI_MAX_SSID_NAME_SIZE + 1);
			break;
 8007c00:	e05d      	b.n	8007cbe <AT_ParseConnSettings+0x12a>

		case 1:
			strncpy((char*) NetSettings->pswd, ptr,
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	3321      	adds	r3, #33	; 0x21
 8007c06:	2221      	movs	r2, #33	; 0x21
 8007c08:	68b9      	ldr	r1, [r7, #8]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f005 f81b 	bl	800cc46 <strncpy>
			ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
			break;
 8007c10:	e055      	b.n	8007cbe <AT_ParseConnSettings+0x12a>

		case 2:
			NetSettings->Security = (ES_WIFI_SecurityType_t) ParseNumber(ptr,
 8007c12:	2100      	movs	r1, #0
 8007c14:	68b8      	ldr	r0, [r7, #8]
 8007c16:	f7ff fed7 	bl	80079c8 <ParseNumber>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			NULL);
			break;
 8007c24:	e04b      	b.n	8007cbe <AT_ParseConnSettings+0x12a>

		case 3:
			NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8007c26:	2100      	movs	r1, #0
 8007c28:	68b8      	ldr	r0, [r7, #8]
 8007c2a:	f7ff fecd 	bl	80079c8 <ParseNumber>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	b2da      	uxtb	r2, r3
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
			break;
 8007c38:	e041      	b.n	8007cbe <AT_ParseConnSettings+0x12a>

		case 4:
			NetSettings->IP_Ver = (ES_WIFI_IPVer_t) ParseNumber(ptr, NULL);
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	68b8      	ldr	r0, [r7, #8]
 8007c3e:	f7ff fec3 	bl	80079c8 <ParseNumber>
 8007c42:	4603      	mov	r3, r0
 8007c44:	b2da      	uxtb	r2, r3
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			break;
 8007c4c:	e037      	b.n	8007cbe <AT_ParseConnSettings+0x12a>

		case 5:
			ParseIP(ptr, NetSettings->IP_Addr);
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	3348      	adds	r3, #72	; 0x48
 8007c52:	4619      	mov	r1, r3
 8007c54:	68b8      	ldr	r0, [r7, #8]
 8007c56:	f7ff fefb 	bl	8007a50 <ParseIP>
			break;
 8007c5a:	e030      	b.n	8007cbe <AT_ParseConnSettings+0x12a>

		case 6:
			ParseIP(ptr, NetSettings->IP_Mask);
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	334c      	adds	r3, #76	; 0x4c
 8007c60:	4619      	mov	r1, r3
 8007c62:	68b8      	ldr	r0, [r7, #8]
 8007c64:	f7ff fef4 	bl	8007a50 <ParseIP>
			break;
 8007c68:	e029      	b.n	8007cbe <AT_ParseConnSettings+0x12a>

		case 7:
			ParseIP(ptr, NetSettings->Gateway_Addr);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	3350      	adds	r3, #80	; 0x50
 8007c6e:	4619      	mov	r1, r3
 8007c70:	68b8      	ldr	r0, [r7, #8]
 8007c72:	f7ff feed 	bl	8007a50 <ParseIP>
			break;
 8007c76:	e022      	b.n	8007cbe <AT_ParseConnSettings+0x12a>

		case 8:
			ParseIP(ptr, NetSettings->DNS1);
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	3354      	adds	r3, #84	; 0x54
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	68b8      	ldr	r0, [r7, #8]
 8007c80:	f7ff fee6 	bl	8007a50 <ParseIP>
			break;
 8007c84:	e01b      	b.n	8007cbe <AT_ParseConnSettings+0x12a>

		case 9:
			ParseIP(ptr, NetSettings->DNS2);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	3358      	adds	r3, #88	; 0x58
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	68b8      	ldr	r0, [r7, #8]
 8007c8e:	f7ff fedf 	bl	8007a50 <ParseIP>
			break;
 8007c92:	e014      	b.n	8007cbe <AT_ParseConnSettings+0x12a>

		case 10:
			NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8007c94:	2100      	movs	r1, #0
 8007c96:	68b8      	ldr	r0, [r7, #8]
 8007c98:	f7ff fe96 	bl	80079c8 <ParseNumber>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	b2da      	uxtb	r2, r3
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			break;
 8007ca6:	e00a      	b.n	8007cbe <AT_ParseConnSettings+0x12a>

		case 11:
			NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8007ca8:	2100      	movs	r1, #0
 8007caa:	68b8      	ldr	r0, [r7, #8]
 8007cac:	f7ff fe8c 	bl	80079c8 <ParseNumber>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	b2da      	uxtb	r2, r3
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			break;
 8007cba:	e000      	b.n	8007cbe <AT_ParseConnSettings+0x12a>

		default:
			break;
 8007cbc:	bf00      	nop
		}
		ptr = strtok(NULL, ",");
 8007cbe:	490c      	ldr	r1, [pc, #48]	; (8007cf0 <AT_ParseConnSettings+0x15c>)
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	f004 ffe9 	bl	800cc98 <strtok>
 8007cc6:	60b8      	str	r0, [r7, #8]
		if ((ptr != NULL) && (ptr[-1] == ',')) { /* Ignore empty fields */
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d007      	beq.n	8007cde <AT_ParseConnSettings+0x14a>
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	2b2c      	cmp	r3, #44	; 0x2c
 8007cd6:	d102      	bne.n	8007cde <AT_ParseConnSettings+0x14a>
			num++;
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	73fb      	strb	r3, [r7, #15]
	while (ptr != NULL) {
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f47f af66 	bne.w	8007bb2 <AT_ParseConnSettings+0x1e>
		}
	}
}
 8007ce6:	bf00      	nop
 8007ce8:	bf00      	nop
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	0800de90 	.word	0x0800de90

08007cf4 <AT_ExecuteCommand>:
 * @param  cmd: pointer to command string
 * @param  pdata: pointer to returned data
 * @retval Operation Status.
 */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t *cmd,
		uint8_t *pdata) {
 8007cf4:	b590      	push	{r4, r7, lr}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
	int ret = 0;
 8007d00:	2300      	movs	r3, #0
 8007d02:	613b      	str	r3, [r7, #16]
	int16_t recv_len = 0;
 8007d04:	2300      	movs	r3, #0
 8007d06:	82fb      	strh	r3, [r7, #22]
	LOCK_WIFI();

	ret = Obj->fops.IO_Send(cmd, strlen((char*) cmd), Obj->Timeout);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8007d0e:	68b8      	ldr	r0, [r7, #8]
 8007d10:	f7f8 fa5e 	bl	80001d0 <strlen>
 8007d14:	4603      	mov	r3, r0
 8007d16:	b299      	uxth	r1, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8007d1e:	461a      	mov	r2, r3
 8007d20:	68b8      	ldr	r0, [r7, #8]
 8007d22:	47a0      	blx	r4
 8007d24:	4603      	mov	r3, r0
 8007d26:	613b      	str	r3, [r7, #16]

	if (ret > 0) {
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	dd3e      	ble.n	8007dac <AT_ExecuteCommand+0xb8>
		recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007d3a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	4798      	blx	r3
 8007d42:	4603      	mov	r3, r0
 8007d44:	82fb      	strh	r3, [r7, #22]
		if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE)) {
 8007d46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	dd27      	ble.n	8007d9e <AT_ExecuteCommand+0xaa>
 8007d4e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007d52:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007d56:	dc22      	bgt.n	8007d9e <AT_ExecuteCommand+0xaa>
			if (recv_len == ES_WIFI_DATA_SIZE) {
 8007d58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007d5c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007d60:	d105      	bne.n	8007d6e <AT_ExecuteCommand+0x7a>
				// ES_WIFI_DATA_SIZE maybe too small !!
				recv_len--;
 8007d62:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	82fb      	strh	r3, [r7, #22]
			}
			*(pdata + recv_len) = 0;
 8007d6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	4413      	add	r3, r2
 8007d76:	2200      	movs	r2, #0
 8007d78:	701a      	strb	r2, [r3, #0]
			if (strstr((char*) pdata, AT_OK_STRING)) {
 8007d7a:	490f      	ldr	r1, [pc, #60]	; (8007db8 <AT_ExecuteCommand+0xc4>)
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f004 ff75 	bl	800cc6c <strstr>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d001      	beq.n	8007d8c <AT_ExecuteCommand+0x98>
				UNLOCK_WIFI();
				return ES_WIFI_STATUS_OK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	e010      	b.n	8007dae <AT_ExecuteCommand+0xba>
			} else if (strstr((char*) pdata, AT_ERROR_STRING)) {
 8007d8c:	490b      	ldr	r1, [pc, #44]	; (8007dbc <AT_ExecuteCommand+0xc8>)
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f004 ff6c 	bl	800cc6c <strstr>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <AT_ExecuteCommand+0xaa>
				UNLOCK_WIFI();
				return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007d9a:	2305      	movs	r3, #5
 8007d9c:	e007      	b.n	8007dae <AT_ExecuteCommand+0xba>
			}
		}
		if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER) {
 8007d9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007da2:	f113 0f04 	cmn.w	r3, #4
 8007da6:	d101      	bne.n	8007dac <AT_ExecuteCommand+0xb8>
			UNLOCK_WIFI();
			return ES_WIFI_STATUS_MODULE_CRASH;
 8007da8:	2306      	movs	r3, #6
 8007daa:	e000      	b.n	8007dae <AT_ExecuteCommand+0xba>
		}
	}UNLOCK_WIFI();
	return ES_WIFI_STATUS_IO_ERROR;
 8007dac:	2304      	movs	r3, #4
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	371c      	adds	r7, #28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd90      	pop	{r4, r7, pc}
 8007db6:	bf00      	nop
 8007db8:	0800dea4 	.word	0x0800dea4
 8007dbc:	0800deb0 	.word	0x0800deb0

08007dc0 <AT_RequestSendData>:
 * @param  pdata: pointer to returned data
 * @retval Operation Status.
 */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t *cmd,
		uint8_t *pcmd_data, uint16_t len, uint8_t *pdata) {
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	607a      	str	r2, [r7, #4]
 8007dcc:	807b      	strh	r3, [r7, #2]
	int16_t send_len = 0;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	82fb      	strh	r3, [r7, #22]
	int16_t recv_len = 0;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	82bb      	strh	r3, [r7, #20]
	uint16_t cmd_len = 0;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	827b      	strh	r3, [r7, #18]
	uint16_t n;

	LOCK_WIFI();
	cmd_len = strlen((char*) cmd);
 8007dda:	68b8      	ldr	r0, [r7, #8]
 8007ddc:	f7f8 f9f8 	bl	80001d0 <strlen>
 8007de0:	4603      	mov	r3, r0
 8007de2:	827b      	strh	r3, [r7, #18]

	/* can send only even number of byte on first send */
	if (cmd_len & 1)
 8007de4:	8a7b      	ldrh	r3, [r7, #18]
 8007de6:	f003 0301 	and.w	r3, r3, #1
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <AT_RequestSendData+0x32>
		return ES_WIFI_STATUS_ERROR;
 8007dee:	2302      	movs	r3, #2
 8007df0:	e053      	b.n	8007e9a <AT_RequestSendData+0xda>
	n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007dfe:	8a79      	ldrh	r1, [r7, #18]
 8007e00:	68b8      	ldr	r0, [r7, #8]
 8007e02:	4798      	blx	r3
 8007e04:	4603      	mov	r3, r0
 8007e06:	823b      	strh	r3, [r7, #16]
	if (n == cmd_len) {
 8007e08:	8a3a      	ldrh	r2, [r7, #16]
 8007e0a:	8a7b      	ldrh	r3, [r7, #18]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d143      	bne.n	8007e98 <AT_RequestSendData+0xd8>
		send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007e1c:	8879      	ldrh	r1, [r7, #2]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	4798      	blx	r3
 8007e22:	4603      	mov	r3, r0
 8007e24:	82fb      	strh	r3, [r7, #22]
		if (send_len == len) {
 8007e26:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007e2a:	887b      	ldrh	r3, [r7, #2]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d131      	bne.n	8007e94 <AT_RequestSendData+0xd4>
			recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	6a38      	ldr	r0, [r7, #32]
 8007e40:	4798      	blx	r3
 8007e42:	4603      	mov	r3, r0
 8007e44:	82bb      	strh	r3, [r7, #20]
			if (recv_len > 0) {
 8007e46:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	dd19      	ble.n	8007e82 <AT_RequestSendData+0xc2>
				*(pdata + recv_len) = 0;
 8007e4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007e52:	6a3a      	ldr	r2, [r7, #32]
 8007e54:	4413      	add	r3, r2
 8007e56:	2200      	movs	r2, #0
 8007e58:	701a      	strb	r2, [r3, #0]
				if (strstr((char*) pdata, AT_OK_STRING)) {
 8007e5a:	4912      	ldr	r1, [pc, #72]	; (8007ea4 <AT_RequestSendData+0xe4>)
 8007e5c:	6a38      	ldr	r0, [r7, #32]
 8007e5e:	f004 ff05 	bl	800cc6c <strstr>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d001      	beq.n	8007e6c <AT_RequestSendData+0xac>
					UNLOCK_WIFI();
					return ES_WIFI_STATUS_OK;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	e016      	b.n	8007e9a <AT_RequestSendData+0xda>
				} else if (strstr((char*) pdata, AT_ERROR_STRING)) {
 8007e6c:	490e      	ldr	r1, [pc, #56]	; (8007ea8 <AT_RequestSendData+0xe8>)
 8007e6e:	6a38      	ldr	r0, [r7, #32]
 8007e70:	f004 fefc 	bl	800cc6c <strstr>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d001      	beq.n	8007e7e <AT_RequestSendData+0xbe>
					UNLOCK_WIFI();
					return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007e7a:	2305      	movs	r3, #5
 8007e7c:	e00d      	b.n	8007e9a <AT_RequestSendData+0xda>
				} else {
					UNLOCK_WIFI();
					return ES_WIFI_STATUS_ERROR;
 8007e7e:	2302      	movs	r3, #2
 8007e80:	e00b      	b.n	8007e9a <AT_RequestSendData+0xda>
				}
			}UNLOCK_WIFI();
			if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER) {
 8007e82:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007e86:	f113 0f04 	cmn.w	r3, #4
 8007e8a:	d101      	bne.n	8007e90 <AT_RequestSendData+0xd0>
				return ES_WIFI_STATUS_MODULE_CRASH;
 8007e8c:	2306      	movs	r3, #6
 8007e8e:	e004      	b.n	8007e9a <AT_RequestSendData+0xda>
			}
			return ES_WIFI_STATUS_ERROR;
 8007e90:	2302      	movs	r3, #2
 8007e92:	e002      	b.n	8007e9a <AT_RequestSendData+0xda>
		} else {
			return ES_WIFI_STATUS_ERROR;
 8007e94:	2302      	movs	r3, #2
 8007e96:	e000      	b.n	8007e9a <AT_RequestSendData+0xda>
		}
	}
	return ES_WIFI_STATUS_IO_ERROR;
 8007e98:	2304      	movs	r3, #4
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3718      	adds	r7, #24
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	0800dea4 	.word	0x0800dea4
 8007ea8:	0800deb0 	.word	0x0800deb0

08007eac <AT_RequestReceiveData>:
 * @param  Reqlen : requested Data length.
 * @param  ReadData : pointer to received data length.
 * @retval Operation Status.
 */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj,
		uint8_t *cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData) {
 8007eac:	b590      	push	{r4, r7, lr}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
 8007eb8:	807b      	strh	r3, [r7, #2]
	int len;
	uint8_t *p = Obj->CmdData;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007ec0:	613b      	str	r3, [r7, #16]

	LOCK_WIFI();
	if (Obj->fops.IO_Send(cmd, strlen((char*) cmd), Obj->Timeout) > 0) {
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8007ec8:	68b8      	ldr	r0, [r7, #8]
 8007eca:	f7f8 f981 	bl	80001d0 <strlen>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	b299      	uxth	r1, r3
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8007ed8:	461a      	mov	r2, r3
 8007eda:	68b8      	ldr	r0, [r7, #8]
 8007edc:	47a0      	blx	r4
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	dd6f      	ble.n	8007fc4 <AT_RequestReceiveData+0x118>
		len = Obj->fops.IO_Receive(p, 0, Obj->Timeout);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	6938      	ldr	r0, [r7, #16]
 8007ef4:	4798      	blx	r3
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	617b      	str	r3, [r7, #20]
		if ((p[0] != '\r') || (p[1] != '\n')) {
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	2b0d      	cmp	r3, #13
 8007f00:	d104      	bne.n	8007f0c <AT_RequestReceiveData+0x60>
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	3301      	adds	r3, #1
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	2b0a      	cmp	r3, #10
 8007f0a:	d001      	beq.n	8007f10 <AT_RequestReceiveData+0x64>
			return ES_WIFI_STATUS_IO_ERROR;
 8007f0c:	2304      	movs	r3, #4
 8007f0e:	e05a      	b.n	8007fc6 <AT_RequestReceiveData+0x11a>
		}
		len -= 2;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	3b02      	subs	r3, #2
 8007f14:	617b      	str	r3, [r7, #20]
		p += 2;
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	3302      	adds	r3, #2
 8007f1a:	613b      	str	r3, [r7, #16]
		if (len >= AT_OK_STRING_LEN) {
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	2b07      	cmp	r3, #7
 8007f20:	d94a      	bls.n	8007fb8 <AT_RequestReceiveData+0x10c>
			while (len && (p[len - 1] == 0x15))
 8007f22:	e002      	b.n	8007f2a <AT_RequestReceiveData+0x7e>
				len--;
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	3b01      	subs	r3, #1
 8007f28:	617b      	str	r3, [r7, #20]
			while (len && (p[len - 1] == 0x15))
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d006      	beq.n	8007f3e <AT_RequestReceiveData+0x92>
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	3b01      	subs	r3, #1
 8007f34:	693a      	ldr	r2, [r7, #16]
 8007f36:	4413      	add	r3, r2
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	2b15      	cmp	r3, #21
 8007f3c:	d0f2      	beq.n	8007f24 <AT_RequestReceiveData+0x78>
			p[len] = '\0';
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	4413      	add	r3, r2
 8007f44:	2200      	movs	r2, #0
 8007f46:	701a      	strb	r2, [r3, #0]
			if (strstr((char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING)) {
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	3b08      	subs	r3, #8
 8007f4c:	693a      	ldr	r2, [r7, #16]
 8007f4e:	4413      	add	r3, r2
 8007f50:	491f      	ldr	r1, [pc, #124]	; (8007fd0 <AT_RequestReceiveData+0x124>)
 8007f52:	4618      	mov	r0, r3
 8007f54:	f004 fe8a 	bl	800cc6c <strstr>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d016      	beq.n	8007f8c <AT_RequestReceiveData+0xe0>
				*ReadData = len - AT_OK_STRING_LEN;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	3b08      	subs	r3, #8
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f68:	801a      	strh	r2, [r3, #0]
				if (*ReadData > Reqlen) {
 8007f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	887a      	ldrh	r2, [r7, #2]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d202      	bcs.n	8007f7a <AT_RequestReceiveData+0xce>
					*ReadData = Reqlen;
 8007f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f76:	887a      	ldrh	r2, [r7, #2]
 8007f78:	801a      	strh	r2, [r3, #0]
				}
				memcpy(pdata, p, *ReadData);
 8007f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	6939      	ldr	r1, [r7, #16]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f004 fbfe 	bl	800c784 <memcpy>
				UNLOCK_WIFI();
				return ES_WIFI_STATUS_OK;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	e01c      	b.n	8007fc6 <AT_RequestReceiveData+0x11a>
			} else if (memcmp((char*) p + len - AT_DELIMETER_LEN,
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	3b04      	subs	r3, #4
 8007f90:	693a      	ldr	r2, [r7, #16]
 8007f92:	4413      	add	r3, r2
 8007f94:	2204      	movs	r2, #4
 8007f96:	490f      	ldr	r1, [pc, #60]	; (8007fd4 <AT_RequestReceiveData+0x128>)
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f004 fbe3 	bl	800c764 <memcmp>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d104      	bne.n	8007fae <AT_RequestReceiveData+0x102>
			AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0) {
				*ReadData = 0;
 8007fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	801a      	strh	r2, [r3, #0]
				UNLOCK_WIFI();
				return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007faa:	2305      	movs	r3, #5
 8007fac:	e00b      	b.n	8007fc6 <AT_RequestReceiveData+0x11a>
			}

			UNLOCK_WIFI();
			*ReadData = 0;
 8007fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	801a      	strh	r2, [r3, #0]
			return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007fb4:	2305      	movs	r3, #5
 8007fb6:	e006      	b.n	8007fc6 <AT_RequestReceiveData+0x11a>
		}
		if (len == ES_WIFI_ERROR_STUFFING_FOREVER) {
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	f113 0f04 	cmn.w	r3, #4
 8007fbe:	d101      	bne.n	8007fc4 <AT_RequestReceiveData+0x118>
			UNLOCK_WIFI();
			return ES_WIFI_STATUS_MODULE_CRASH;
 8007fc0:	2306      	movs	r3, #6
 8007fc2:	e000      	b.n	8007fc6 <AT_RequestReceiveData+0x11a>
		}
	}UNLOCK_WIFI();
	return ES_WIFI_STATUS_IO_ERROR;
 8007fc4:	2304      	movs	r3, #4
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	371c      	adds	r7, #28
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd90      	pop	{r4, r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	0800dea4 	.word	0x0800dea4
 8007fd4:	0800deb8 	.word	0x0800deb8

08007fd8 <ES_WIFI_Init>:
/**
 * @brief  Initialize WIFI module.
 * @param  Obj: pointer to module handle
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj) {
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
	ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	73fb      	strb	r3, [r7, #15]

	LOCK_WIFI();

	Obj->Timeout = ES_WIFI_TIMEOUT;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f247 5230 	movw	r2, #30000	; 0x7530
 8007fea:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

	if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0) {
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8007ff4:	2000      	movs	r0, #0
 8007ff6:	4798      	blx	r3
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d113      	bne.n	8008026 <ES_WIFI_Init+0x4e>
		ret = AT_ExecuteCommand(Obj, (uint8_t*) "I?\r\n", Obj->CmdData);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008004:	461a      	mov	r2, r3
 8008006:	490a      	ldr	r1, [pc, #40]	; (8008030 <ES_WIFI_Init+0x58>)
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f7ff fe73 	bl	8007cf4 <AT_ExecuteCommand>
 800800e:	4603      	mov	r3, r0
 8008010:	73fb      	strb	r3, [r7, #15]

		if (ret == ES_WIFI_STATUS_OK) {
 8008012:	7bfb      	ldrb	r3, [r7, #15]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d106      	bne.n	8008026 <ES_WIFI_Init+0x4e>
			AT_ParseInfo(Obj, Obj->CmdData);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f7ff fd41 	bl	8007aa8 <AT_ParseInfo>
		}
	}UNLOCK_WIFI();
	return ret;
 8008026:	7bfb      	ldrb	r3, [r7, #15]
}
 8008028:	4618      	mov	r0, r3
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	0800dec0 	.word	0x0800dec0

08008034 <ES_WIFI_RegisterBusIO>:
 * @param  Obj: pointer to module handle
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj,
		IO_Init_Func IO_Init, IO_DeInit_Func IO_DeInit, IO_Delay_Func IO_Delay,
		IO_Send_Func IO_Send, IO_Receive_Func IO_Receive) {
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
 8008040:	603b      	str	r3, [r7, #0]
	if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive) {
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00b      	beq.n	8008060 <ES_WIFI_RegisterBusIO+0x2c>
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d008      	beq.n	8008060 <ES_WIFI_RegisterBusIO+0x2c>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d005      	beq.n	8008060 <ES_WIFI_RegisterBusIO+0x2c>
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d002      	beq.n	8008060 <ES_WIFI_RegisterBusIO+0x2c>
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <ES_WIFI_RegisterBusIO+0x30>
		return ES_WIFI_STATUS_ERROR;
 8008060:	2302      	movs	r3, #2
 8008062:	e014      	b.n	800808e <ES_WIFI_RegisterBusIO+0x5a>
	}

	Obj->fops.IO_Init = IO_Init;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	Obj->fops.IO_DeInit = IO_DeInit;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	Obj->fops.IO_Send = IO_Send;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	69ba      	ldr	r2, [r7, #24]
 8008078:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	Obj->fops.IO_Receive = IO_Receive;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	69fa      	ldr	r2, [r7, #28]
 8008080:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	Obj->fops.IO_Delay = IO_Delay;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	return ES_WIFI_STATUS_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3714      	adds	r7, #20
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
	...

0800809c <ES_WIFI_Connect>:
 * @param  Password: the Access point password.
 * @param  SecType: Security type.
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
		const char *Password, ES_WIFI_SecurityType_t SecType) {
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
 80080a8:	70fb      	strb	r3, [r7, #3]
	ES_WIFI_Status_t ret;
	LOCK_WIFI();

	sprintf((char*) Obj->CmdData, "C1=%s\r", SSID);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	4932      	ldr	r1, [pc, #200]	; (800817c <ES_WIFI_Connect+0xe0>)
 80080b4:	4618      	mov	r0, r3
 80080b6:	f004 fd63 	bl	800cb80 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80080c6:	461a      	mov	r2, r3
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f7ff fe13 	bl	8007cf4 <AT_ExecuteCommand>
 80080ce:	4603      	mov	r3, r0
 80080d0:	75fb      	strb	r3, [r7, #23]
	if (ret == ES_WIFI_STATUS_OK) {
 80080d2:	7dfb      	ldrb	r3, [r7, #23]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d14b      	bne.n	8008170 <ES_WIFI_Connect+0xd4>
		sprintf((char*) Obj->CmdData, "C2=%s\r", Password);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	4927      	ldr	r1, [pc, #156]	; (8008180 <ES_WIFI_Connect+0xe4>)
 80080e2:	4618      	mov	r0, r3
 80080e4:	f004 fd4c 	bl	800cb80 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80080f4:	461a      	mov	r2, r3
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f7ff fdfc 	bl	8007cf4 <AT_ExecuteCommand>
 80080fc:	4603      	mov	r3, r0
 80080fe:	75fb      	strb	r3, [r7, #23]

		if (ret == ES_WIFI_STATUS_OK) {
 8008100:	7dfb      	ldrb	r3, [r7, #23]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d134      	bne.n	8008170 <ES_WIFI_Connect+0xd4>
			Obj->Security = SecType;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	78fa      	ldrb	r2, [r7, #3]
 800810a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
			sprintf((char*) Obj->CmdData, "C3=%d\r", (uint8_t) SecType);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008114:	78fa      	ldrb	r2, [r7, #3]
 8008116:	491b      	ldr	r1, [pc, #108]	; (8008184 <ES_WIFI_Connect+0xe8>)
 8008118:	4618      	mov	r0, r3
 800811a:	f004 fd31 	bl	800cb80 <siprintf>
			ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800812a:	461a      	mov	r2, r3
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f7ff fde1 	bl	8007cf4 <AT_ExecuteCommand>
 8008132:	4603      	mov	r3, r0
 8008134:	75fb      	strb	r3, [r7, #23]

			if (ret == ES_WIFI_STATUS_OK) {
 8008136:	7dfb      	ldrb	r3, [r7, #23]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d119      	bne.n	8008170 <ES_WIFI_Connect+0xd4>
				sprintf((char*) Obj->CmdData, "C0\r");
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008142:	4911      	ldr	r1, [pc, #68]	; (8008188 <ES_WIFI_Connect+0xec>)
 8008144:	4618      	mov	r0, r3
 8008146:	f004 fd1b 	bl	800cb80 <siprintf>
				ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008156:	461a      	mov	r2, r3
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	f7ff fdcb 	bl	8007cf4 <AT_ExecuteCommand>
 800815e:	4603      	mov	r3, r0
 8008160:	75fb      	strb	r3, [r7, #23]
				if (ret == ES_WIFI_STATUS_OK) {
 8008162:	7dfb      	ldrb	r3, [r7, #23]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d103      	bne.n	8008170 <ES_WIFI_Connect+0xd4>
					Obj->NetSettings.IsConnected = 1;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
				}
			}
		}
	}UNLOCK_WIFI();
	return ret;
 8008170:	7dfb      	ldrb	r3, [r7, #23]
}
 8008172:	4618      	mov	r0, r3
 8008174:	3718      	adds	r7, #24
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	0800ded8 	.word	0x0800ded8
 8008180:	0800dee0 	.word	0x0800dee0
 8008184:	0800dee8 	.word	0x0800dee8
 8008188:	0800def0 	.word	0x0800def0

0800818c <ES_WIFI_Disconnect>:
/**
 * @brief  Disconnect from a network.
 * @param  Obj: pointer to module handle
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_Disconnect(ES_WIFIObject_t *Obj) {
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
	ES_WIFI_Status_t ret;
	LOCK_WIFI();
	sprintf((char*) Obj->CmdData, "CD\r");
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800819a:	490a      	ldr	r1, [pc, #40]	; (80081c4 <ES_WIFI_Disconnect+0x38>)
 800819c:	4618      	mov	r0, r3
 800819e:	f004 fcef 	bl	800cb80 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80081ae:	461a      	mov	r2, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f7ff fd9f 	bl	8007cf4 <AT_ExecuteCommand>
 80081b6:	4603      	mov	r3, r0
 80081b8:	73fb      	strb	r3, [r7, #15]
	UNLOCK_WIFI();
	return ret;
 80081ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	0800def8 	.word	0x0800def8

080081c8 <ES_WIFI_GetNetworkSettings>:
 * @brief  Return network settings.
 * @param  Obj: pointer to module handle
 * @param  Pointer to network setting structure.
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj) {
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
	ES_WIFI_Status_t ret;
	LOCK_WIFI();

	sprintf((char*) Obj->CmdData, "C?\r");
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80081d6:	4910      	ldr	r1, [pc, #64]	; (8008218 <ES_WIFI_GetNetworkSettings+0x50>)
 80081d8:	4618      	mov	r0, r3
 80081da:	f004 fcd1 	bl	800cb80 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80081ea:	461a      	mov	r2, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f7ff fd81 	bl	8007cf4 <AT_ExecuteCommand>
 80081f2:	4603      	mov	r3, r0
 80081f4:	73fb      	strb	r3, [r7, #15]

	if (ret == ES_WIFI_STATUS_OK) {
 80081f6:	7bfb      	ldrb	r3, [r7, #15]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d108      	bne.n	800820e <ES_WIFI_GetNetworkSettings+0x46>
		AT_ParseConnSettings((char*) Obj->CmdData, &Obj->NetSettings);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	338d      	adds	r3, #141	; 0x8d
 8008206:	4619      	mov	r1, r3
 8008208:	4610      	mov	r0, r2
 800820a:	f7ff fcc3 	bl	8007b94 <AT_ParseConnSettings>
	}

	UNLOCK_WIFI();
	return ret;
 800820e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	0800defc 	.word	0x0800defc

0800821c <ES_WIFI_StartClientConnection>:
 * @param  Obj: pointer to module handle
 * @param  conn: pointer to the connection structure
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj,
		ES_WIFI_Conn_t *conn) {
 800821c:	b590      	push	{r4, r7, lr}
 800821e:	b087      	sub	sp, #28
 8008220:	af02      	add	r7, sp, #8
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
	ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	73fb      	strb	r3, [r7, #15]

	if (((conn->Type == ES_WIFI_TCP_CONNECTION)
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d003      	beq.n	800823a <ES_WIFI_StartClientConnection+0x1e>
			|| (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	2b03      	cmp	r3, #3
 8008238:	d105      	bne.n	8008246 <ES_WIFI_StartClientConnection+0x2a>
			&& (conn->RemotePort == 0))
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	885b      	ldrh	r3, [r3, #2]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d101      	bne.n	8008246 <ES_WIFI_StartClientConnection+0x2a>
		return ES_WIFI_STATUS_ERROR;
 8008242:	2302      	movs	r3, #2
 8008244:	e0c1      	b.n	80083ca <ES_WIFI_StartClientConnection+0x1ae>

	LOCK_WIFI();

	sprintf((char*) Obj->CmdData, "P0=%d\r", conn->Number);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	785b      	ldrb	r3, [r3, #1]
 8008250:	461a      	mov	r2, r3
 8008252:	4960      	ldr	r1, [pc, #384]	; (80083d4 <ES_WIFI_StartClientConnection+0x1b8>)
 8008254:	f004 fc94 	bl	800cb80 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008264:	461a      	mov	r2, r3
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f7ff fd44 	bl	8007cf4 <AT_ExecuteCommand>
 800826c:	4603      	mov	r3, r0
 800826e:	73fb      	strb	r3, [r7, #15]

	if (ret == ES_WIFI_STATUS_OK) {
 8008270:	7bfb      	ldrb	r3, [r7, #15]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d114      	bne.n	80082a0 <ES_WIFI_StartClientConnection+0x84>
		sprintf((char*) Obj->CmdData, "P1=%d\r", conn->Type);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	461a      	mov	r2, r3
 8008282:	4955      	ldr	r1, [pc, #340]	; (80083d8 <ES_WIFI_StartClientConnection+0x1bc>)
 8008284:	f004 fc7c 	bl	800cb80 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008294:	461a      	mov	r2, r3
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f7ff fd2c 	bl	8007cf4 <AT_ExecuteCommand>
 800829c:	4603      	mov	r3, r0
 800829e:	73fb      	strb	r3, [r7, #15]
	}

	if (ret == ES_WIFI_STATUS_OK) {
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d114      	bne.n	80082d0 <ES_WIFI_StartClientConnection+0xb4>
		sprintf((char*) Obj->CmdData, "P2=%d\r", conn->LocalPort);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	889b      	ldrh	r3, [r3, #4]
 80082b0:	461a      	mov	r2, r3
 80082b2:	494a      	ldr	r1, [pc, #296]	; (80083dc <ES_WIFI_StartClientConnection+0x1c0>)
 80082b4:	f004 fc64 	bl	800cb80 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80082c4:	461a      	mov	r2, r3
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f7ff fd14 	bl	8007cf4 <AT_ExecuteCommand>
 80082cc:	4603      	mov	r3, r0
 80082ce:	73fb      	strb	r3, [r7, #15]
	}

	if ((ret == ES_WIFI_STATUS_OK)
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d11c      	bne.n	8008310 <ES_WIFI_StartClientConnection+0xf4>
			&& ((conn->Type == ES_WIFI_TCP_CONNECTION)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <ES_WIFI_StartClientConnection+0xca>
					|| (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))) {
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d114      	bne.n	8008310 <ES_WIFI_StartClientConnection+0xf4>
		sprintf((char*) Obj->CmdData, "P4=%d\r", conn->RemotePort);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	885b      	ldrh	r3, [r3, #2]
 80082f0:	461a      	mov	r2, r3
 80082f2:	493b      	ldr	r1, [pc, #236]	; (80083e0 <ES_WIFI_StartClientConnection+0x1c4>)
 80082f4:	f004 fc44 	bl	800cb80 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008304:	461a      	mov	r2, r3
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7ff fcf4 	bl	8007cf4 <AT_ExecuteCommand>
 800830c:	4603      	mov	r3, r0
 800830e:	73fb      	strb	r3, [r7, #15]
	}

	if ((ret == ES_WIFI_STATUS_OK)
 8008310:	7bfb      	ldrb	r3, [r7, #15]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d128      	bne.n	8008368 <ES_WIFI_StartClientConnection+0x14c>
			&& ((conn->Type == ES_WIFI_TCP_CONNECTION)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d003      	beq.n	8008326 <ES_WIFI_StartClientConnection+0x10a>
					|| (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))) {
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	2b03      	cmp	r3, #3
 8008324:	d120      	bne.n	8008368 <ES_WIFI_StartClientConnection+0x14c>
		sprintf((char*) Obj->CmdData, "P3=%d.%d.%d.%d\r", conn->RemoteIP[0],
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	799b      	ldrb	r3, [r3, #6]
 8008330:	4619      	mov	r1, r3
				conn->RemoteIP[1], conn->RemoteIP[2], conn->RemoteIP[3]);
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	79db      	ldrb	r3, [r3, #7]
		sprintf((char*) Obj->CmdData, "P3=%d.%d.%d.%d\r", conn->RemoteIP[0],
 8008336:	461c      	mov	r4, r3
				conn->RemoteIP[1], conn->RemoteIP[2], conn->RemoteIP[3]);
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	7a1b      	ldrb	r3, [r3, #8]
		sprintf((char*) Obj->CmdData, "P3=%d.%d.%d.%d\r", conn->RemoteIP[0],
 800833c:	461a      	mov	r2, r3
				conn->RemoteIP[1], conn->RemoteIP[2], conn->RemoteIP[3]);
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	7a5b      	ldrb	r3, [r3, #9]
		sprintf((char*) Obj->CmdData, "P3=%d.%d.%d.%d\r", conn->RemoteIP[0],
 8008342:	9301      	str	r3, [sp, #4]
 8008344:	9200      	str	r2, [sp, #0]
 8008346:	4623      	mov	r3, r4
 8008348:	460a      	mov	r2, r1
 800834a:	4926      	ldr	r1, [pc, #152]	; (80083e4 <ES_WIFI_StartClientConnection+0x1c8>)
 800834c:	f004 fc18 	bl	800cb80 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800835c:	461a      	mov	r2, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f7ff fcc8 	bl	8007cf4 <AT_ExecuteCommand>
 8008364:	4603      	mov	r3, r0
 8008366:	73fb      	strb	r3, [r7, #15]
	}

	if ((ret == ES_WIFI_STATUS_OK)
 8008368:	7bfb      	ldrb	r3, [r7, #15]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d116      	bne.n	800839c <ES_WIFI_StartClientConnection+0x180>
			&& (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) {
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	2b03      	cmp	r3, #3
 8008374:	d112      	bne.n	800839c <ES_WIFI_StartClientConnection+0x180>
		sprintf((char*) Obj->CmdData, "P9=2\r");
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800837c:	491a      	ldr	r1, [pc, #104]	; (80083e8 <ES_WIFI_StartClientConnection+0x1cc>)
 800837e:	4618      	mov	r0, r3
 8008380:	f004 fbfe 	bl	800cb80 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008390:	461a      	mov	r2, r3
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7ff fcae 	bl	8007cf4 <AT_ExecuteCommand>
 8008398:	4603      	mov	r3, r0
 800839a:	73fb      	strb	r3, [r7, #15]
	}

	if (ret == ES_WIFI_STATUS_OK) {
 800839c:	7bfb      	ldrb	r3, [r7, #15]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d112      	bne.n	80083c8 <ES_WIFI_StartClientConnection+0x1ac>
		sprintf((char*) Obj->CmdData, "P6=1\r");
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80083a8:	4910      	ldr	r1, [pc, #64]	; (80083ec <ES_WIFI_StartClientConnection+0x1d0>)
 80083aa:	4618      	mov	r0, r3
 80083ac:	f004 fbe8 	bl	800cb80 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80083bc:	461a      	mov	r2, r3
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f7ff fc98 	bl	8007cf4 <AT_ExecuteCommand>
 80083c4:	4603      	mov	r3, r0
 80083c6:	73fb      	strb	r3, [r7, #15]
	}

	UNLOCK_WIFI();
	return ret;
 80083c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3714      	adds	r7, #20
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd90      	pop	{r4, r7, pc}
 80083d2:	bf00      	nop
 80083d4:	0800dfc0 	.word	0x0800dfc0
 80083d8:	0800dfc8 	.word	0x0800dfc8
 80083dc:	0800dfd0 	.word	0x0800dfd0
 80083e0:	0800dfd8 	.word	0x0800dfd8
 80083e4:	0800dfe0 	.word	0x0800dfe0
 80083e8:	0800dff0 	.word	0x0800dff0
 80083ec:	0800dff8 	.word	0x0800dff8

080083f0 <ES_WIFI_StopClientConnection>:
 * @brief  Stop Client connection.
 * @param  Obj: pointer to module handle
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj,
		ES_WIFI_Conn_t *conn) {
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
	ES_WIFI_Status_t ret;
	LOCK_WIFI();

	sprintf((char*) Obj->CmdData, "P0=%d\r", conn->Number);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	785b      	ldrb	r3, [r3, #1]
 8008404:	461a      	mov	r2, r3
 8008406:	4915      	ldr	r1, [pc, #84]	; (800845c <ES_WIFI_StopClientConnection+0x6c>)
 8008408:	f004 fbba 	bl	800cb80 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008418:	461a      	mov	r2, r3
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f7ff fc6a 	bl	8007cf4 <AT_ExecuteCommand>
 8008420:	4603      	mov	r3, r0
 8008422:	73fb      	strb	r3, [r7, #15]

	if (ret == ES_WIFI_STATUS_OK) {
 8008424:	7bfb      	ldrb	r3, [r7, #15]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d112      	bne.n	8008450 <ES_WIFI_StopClientConnection+0x60>
		sprintf((char*) Obj->CmdData, "P6=0\r");
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008430:	490b      	ldr	r1, [pc, #44]	; (8008460 <ES_WIFI_StopClientConnection+0x70>)
 8008432:	4618      	mov	r0, r3
 8008434:	f004 fba4 	bl	800cb80 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008444:	461a      	mov	r2, r3
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7ff fc54 	bl	8007cf4 <AT_ExecuteCommand>
 800844c:	4603      	mov	r3, r0
 800844e:	73fb      	strb	r3, [r7, #15]
	}UNLOCK_WIFI();
	return ret;
 8008450:	7bfb      	ldrb	r3, [r7, #15]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	0800dfc0 	.word	0x0800dfc0
 8008460:	0800e000 	.word	0x0800e000

08008464 <ES_WIFI_SendData>:
 * @param  pdata: pointer to data
 * @param  len : length of the data to be sent
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
		uint8_t *pdata, uint16_t Reqlen, uint16_t *SentLen, uint32_t Timeout) {
 8008464:	b580      	push	{r7, lr}
 8008466:	b088      	sub	sp, #32
 8008468:	af02      	add	r7, sp, #8
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	607a      	str	r2, [r7, #4]
 800846e:	461a      	mov	r2, r3
 8008470:	460b      	mov	r3, r1
 8008472:	72fb      	strb	r3, [r7, #11]
 8008474:	4613      	mov	r3, r2
 8008476:	813b      	strh	r3, [r7, #8]
	uint32_t wkgTimeOut;

	ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8008478:	2302      	movs	r3, #2
 800847a:	74fb      	strb	r3, [r7, #19]

	if (Timeout == 0) {
 800847c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847e:	2b00      	cmp	r3, #0
 8008480:	d102      	bne.n	8008488 <ES_WIFI_SendData+0x24>
		wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8008482:	2301      	movs	r3, #1
 8008484:	617b      	str	r3, [r7, #20]
 8008486:	e001      	b.n	800848c <ES_WIFI_SendData+0x28>
	} else {
		wkgTimeOut = Timeout;
 8008488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848a:	617b      	str	r3, [r7, #20]
	}

	LOCK_WIFI();
	if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 800848c:	893b      	ldrh	r3, [r7, #8]
 800848e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8008492:	d302      	bcc.n	800849a <ES_WIFI_SendData+0x36>
		Reqlen = ES_WIFI_PAYLOAD_SIZE;
 8008494:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008498:	813b      	strh	r3, [r7, #8]

	*SentLen = Reqlen;
 800849a:	6a3b      	ldr	r3, [r7, #32]
 800849c:	893a      	ldrh	r2, [r7, #8]
 800849e:	801a      	strh	r2, [r3, #0]
	sprintf((char*) Obj->CmdData, "P0=%d\r", Socket);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80084a6:	7afa      	ldrb	r2, [r7, #11]
 80084a8:	4942      	ldr	r1, [pc, #264]	; (80085b4 <ES_WIFI_SendData+0x150>)
 80084aa:	4618      	mov	r0, r3
 80084ac:	f004 fb68 	bl	800cb80 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80084bc:	461a      	mov	r2, r3
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f7ff fc18 	bl	8007cf4 <AT_ExecuteCommand>
 80084c4:	4603      	mov	r3, r0
 80084c6:	74fb      	strb	r3, [r7, #19]
	if (ret == ES_WIFI_STATUS_OK) {
 80084c8:	7cfb      	ldrb	r3, [r7, #19]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d15e      	bne.n	800858c <ES_WIFI_SendData+0x128>
		sprintf((char*) Obj->CmdData, "S2=%lu\r", wkgTimeOut);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80084d4:	697a      	ldr	r2, [r7, #20]
 80084d6:	4938      	ldr	r1, [pc, #224]	; (80085b8 <ES_WIFI_SendData+0x154>)
 80084d8:	4618      	mov	r0, r3
 80084da:	f004 fb51 	bl	800cb80 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80084ea:	461a      	mov	r2, r3
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f7ff fc01 	bl	8007cf4 <AT_ExecuteCommand>
 80084f2:	4603      	mov	r3, r0
 80084f4:	74fb      	strb	r3, [r7, #19]

		if (ret == ES_WIFI_STATUS_OK) {
 80084f6:	7cfb      	ldrb	r3, [r7, #19]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d13d      	bne.n	8008578 <ES_WIFI_SendData+0x114>
			sprintf((char*) Obj->CmdData, "S3=%04d\r", Reqlen);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008502:	893a      	ldrh	r2, [r7, #8]
 8008504:	492d      	ldr	r1, [pc, #180]	; (80085bc <ES_WIFI_SendData+0x158>)
 8008506:	4618      	mov	r0, r3
 8008508:	f004 fb3a 	bl	800cb80 <siprintf>
			ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen,
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f503 7194 	add.w	r1, r3, #296	; 0x128
					Obj->CmdData);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f503 7394 	add.w	r3, r3, #296	; 0x128
			ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen,
 8008518:	893a      	ldrh	r2, [r7, #8]
 800851a:	9300      	str	r3, [sp, #0]
 800851c:	4613      	mov	r3, r2
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f7ff fc4d 	bl	8007dc0 <AT_RequestSendData>
 8008526:	4603      	mov	r3, r0
 8008528:	74fb      	strb	r3, [r7, #19]

			if (ret == ES_WIFI_STATUS_OK) {
 800852a:	7cfb      	ldrb	r3, [r7, #19]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d119      	bne.n	8008564 <ES_WIFI_SendData+0x100>
				if (strstr((char*) Obj->CmdData, "-1\r\n")) {
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008536:	4922      	ldr	r1, [pc, #136]	; (80085c0 <ES_WIFI_SendData+0x15c>)
 8008538:	4618      	mov	r0, r3
 800853a:	f004 fb97 	bl	800cc6c <strstr>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d02c      	beq.n	800859e <ES_WIFI_SendData+0x13a>
					DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData)
 8008544:	f240 72c7 	movw	r2, #1991	; 0x7c7
 8008548:	491e      	ldr	r1, [pc, #120]	; (80085c4 <ES_WIFI_SendData+0x160>)
 800854a:	481f      	ldr	r0, [pc, #124]	; (80085c8 <ES_WIFI_SendData+0x164>)
 800854c:	f004 fa10 	bl	800c970 <iprintf>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008556:	4619      	mov	r1, r3
 8008558:	481c      	ldr	r0, [pc, #112]	; (80085cc <ES_WIFI_SendData+0x168>)
 800855a:	f004 fa09 	bl	800c970 <iprintf>
					;
					ret = ES_WIFI_STATUS_ERROR;
 800855e:	2302      	movs	r3, #2
 8008560:	74fb      	strb	r3, [r7, #19]
 8008562:	e01c      	b.n	800859e <ES_WIFI_SendData+0x13a>
				}
			} else {
				DEBUG("Send Data command failed\n")
 8008564:	f240 72cc 	movw	r2, #1996	; 0x7cc
 8008568:	4916      	ldr	r1, [pc, #88]	; (80085c4 <ES_WIFI_SendData+0x160>)
 800856a:	4817      	ldr	r0, [pc, #92]	; (80085c8 <ES_WIFI_SendData+0x164>)
 800856c:	f004 fa00 	bl	800c970 <iprintf>
 8008570:	4817      	ldr	r0, [pc, #92]	; (80085d0 <ES_WIFI_SendData+0x16c>)
 8008572:	f004 fa83 	bl	800ca7c <puts>
 8008576:	e012      	b.n	800859e <ES_WIFI_SendData+0x13a>
				;
			}
		} else {
			DEBUG("S2 command failed\n")
 8008578:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800857c:	4911      	ldr	r1, [pc, #68]	; (80085c4 <ES_WIFI_SendData+0x160>)
 800857e:	4812      	ldr	r0, [pc, #72]	; (80085c8 <ES_WIFI_SendData+0x164>)
 8008580:	f004 f9f6 	bl	800c970 <iprintf>
 8008584:	4813      	ldr	r0, [pc, #76]	; (80085d4 <ES_WIFI_SendData+0x170>)
 8008586:	f004 fa79 	bl	800ca7c <puts>
 800858a:	e008      	b.n	800859e <ES_WIFI_SendData+0x13a>
			;
		}
	} else {
		DEBUG("P0 command failed\n")
 800858c:	f240 72d4 	movw	r2, #2004	; 0x7d4
 8008590:	490c      	ldr	r1, [pc, #48]	; (80085c4 <ES_WIFI_SendData+0x160>)
 8008592:	480d      	ldr	r0, [pc, #52]	; (80085c8 <ES_WIFI_SendData+0x164>)
 8008594:	f004 f9ec 	bl	800c970 <iprintf>
 8008598:	480f      	ldr	r0, [pc, #60]	; (80085d8 <ES_WIFI_SendData+0x174>)
 800859a:	f004 fa6f 	bl	800ca7c <puts>
		;
	}

	if (ret == ES_WIFI_STATUS_ERROR) {
 800859e:	7cfb      	ldrb	r3, [r7, #19]
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d102      	bne.n	80085aa <ES_WIFI_SendData+0x146>
		*SentLen = 0;
 80085a4:	6a3b      	ldr	r3, [r7, #32]
 80085a6:	2200      	movs	r2, #0
 80085a8:	801a      	strh	r2, [r3, #0]
	}UNLOCK_WIFI();
	return ret;
 80085aa:	7cfb      	ldrb	r3, [r7, #19]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3718      	adds	r7, #24
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	0800dfc0 	.word	0x0800dfc0
 80085b8:	0800e178 	.word	0x0800e178
 80085bc:	0800e180 	.word	0x0800e180
 80085c0:	0800e18c 	.word	0x0800e18c
 80085c4:	0800e050 	.word	0x0800e050
 80085c8:	0800e06c 	.word	0x0800e06c
 80085cc:	0800e194 	.word	0x0800e194
 80085d0:	0800e1b0 	.word	0x0800e1b0
 80085d4:	0800e1cc 	.word	0x0800e1cc
 80085d8:	0800e1e0 	.word	0x0800e1e0

080085dc <ES_WIFI_ReceiveData>:
 * @param  len : pointer to the length of the data to be received
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket,
		uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen,
		uint32_t Timeout) {
 80085dc:	b580      	push	{r7, lr}
 80085de:	b088      	sub	sp, #32
 80085e0:	af02      	add	r7, sp, #8
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	607a      	str	r2, [r7, #4]
 80085e6:	461a      	mov	r2, r3
 80085e8:	460b      	mov	r3, r1
 80085ea:	72fb      	strb	r3, [r7, #11]
 80085ec:	4613      	mov	r3, r2
 80085ee:	813b      	strh	r3, [r7, #8]
	uint32_t wkgTimeOut;

	ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80085f0:	2302      	movs	r3, #2
 80085f2:	74fb      	strb	r3, [r7, #19]

	if (Timeout == 0) {
 80085f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d102      	bne.n	8008600 <ES_WIFI_ReceiveData+0x24>
		wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 80085fa:	2301      	movs	r3, #1
 80085fc:	617b      	str	r3, [r7, #20]
 80085fe:	e001      	b.n	8008604 <ES_WIFI_ReceiveData+0x28>
	} else {
		wkgTimeOut = Timeout;
 8008600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008602:	617b      	str	r3, [r7, #20]
	}

	LOCK_WIFI();

	if (Reqlen <= ES_WIFI_PAYLOAD_SIZE) {
 8008604:	893b      	ldrh	r3, [r7, #8]
 8008606:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800860a:	f200 808b 	bhi.w	8008724 <ES_WIFI_ReceiveData+0x148>
		sprintf((char*) Obj->CmdData, "P0=%d\r", Socket);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008614:	7afa      	ldrb	r2, [r7, #11]
 8008616:	4946      	ldr	r1, [pc, #280]	; (8008730 <ES_WIFI_ReceiveData+0x154>)
 8008618:	4618      	mov	r0, r3
 800861a:	f004 fab1 	bl	800cb80 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800862a:	461a      	mov	r2, r3
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f7ff fb61 	bl	8007cf4 <AT_ExecuteCommand>
 8008632:	4603      	mov	r3, r0
 8008634:	74fb      	strb	r3, [r7, #19]

		if (ret == ES_WIFI_STATUS_OK) {
 8008636:	7cfb      	ldrb	r3, [r7, #19]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d165      	bne.n	8008708 <ES_WIFI_ReceiveData+0x12c>
			sprintf((char*) Obj->CmdData, "R1=%d\r", Reqlen);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008642:	893a      	ldrh	r2, [r7, #8]
 8008644:	493b      	ldr	r1, [pc, #236]	; (8008734 <ES_WIFI_ReceiveData+0x158>)
 8008646:	4618      	mov	r0, r3
 8008648:	f004 fa9a 	bl	800cb80 <siprintf>
			ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008658:	461a      	mov	r2, r3
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f7ff fb4a 	bl	8007cf4 <AT_ExecuteCommand>
 8008660:	4603      	mov	r3, r0
 8008662:	74fb      	strb	r3, [r7, #19]
			if (ret == ES_WIFI_STATUS_OK) {
 8008664:	7cfb      	ldrb	r3, [r7, #19]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d141      	bne.n	80086ee <ES_WIFI_ReceiveData+0x112>
				sprintf((char*) Obj->CmdData, "R2=%lu\r", wkgTimeOut);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008670:	697a      	ldr	r2, [r7, #20]
 8008672:	4931      	ldr	r1, [pc, #196]	; (8008738 <ES_WIFI_ReceiveData+0x15c>)
 8008674:	4618      	mov	r0, r3
 8008676:	f004 fa83 	bl	800cb80 <siprintf>
				ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008686:	461a      	mov	r2, r3
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f7ff fb33 	bl	8007cf4 <AT_ExecuteCommand>
 800868e:	4603      	mov	r3, r0
 8008690:	74fb      	strb	r3, [r7, #19]
				if (ret == ES_WIFI_STATUS_OK) {
 8008692:	7cfb      	ldrb	r3, [r7, #19]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d120      	bne.n	80086da <ES_WIFI_ReceiveData+0xfe>
					sprintf((char*) Obj->CmdData, "R0\r");
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800869e:	4927      	ldr	r1, [pc, #156]	; (800873c <ES_WIFI_ReceiveData+0x160>)
 80086a0:	4618      	mov	r0, r3
 80086a2:	f004 fa6d 	bl	800cb80 <siprintf>
					ret = AT_RequestReceiveData(Obj, Obj->CmdData,
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80086ac:	893a      	ldrh	r2, [r7, #8]
 80086ae:	6a3b      	ldr	r3, [r7, #32]
 80086b0:	9300      	str	r3, [sp, #0]
 80086b2:	4613      	mov	r3, r2
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f7ff fbf8 	bl	8007eac <AT_RequestReceiveData>
 80086bc:	4603      	mov	r3, r0
 80086be:	74fb      	strb	r3, [r7, #19]
							(char*) pdata, Reqlen, Receivedlen);
					if (ret != ES_WIFI_STATUS_OK) {
 80086c0:	7cfb      	ldrb	r3, [r7, #19]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d02e      	beq.n	8008724 <ES_WIFI_ReceiveData+0x148>
						DEBUG("AT_RequestReceiveData  failed\n")
 80086c6:	f44f 6205 	mov.w	r2, #2128	; 0x850
 80086ca:	491d      	ldr	r1, [pc, #116]	; (8008740 <ES_WIFI_ReceiveData+0x164>)
 80086cc:	481d      	ldr	r0, [pc, #116]	; (8008744 <ES_WIFI_ReceiveData+0x168>)
 80086ce:	f004 f94f 	bl	800c970 <iprintf>
 80086d2:	481d      	ldr	r0, [pc, #116]	; (8008748 <ES_WIFI_ReceiveData+0x16c>)
 80086d4:	f004 f9d2 	bl	800ca7c <puts>
 80086d8:	e024      	b.n	8008724 <ES_WIFI_ReceiveData+0x148>
						;
					}
				} else {
					DEBUG("setting timeout failed\n")
 80086da:	f640 0254 	movw	r2, #2132	; 0x854
 80086de:	4918      	ldr	r1, [pc, #96]	; (8008740 <ES_WIFI_ReceiveData+0x164>)
 80086e0:	4818      	ldr	r0, [pc, #96]	; (8008744 <ES_WIFI_ReceiveData+0x168>)
 80086e2:	f004 f945 	bl	800c970 <iprintf>
 80086e6:	4819      	ldr	r0, [pc, #100]	; (800874c <ES_WIFI_ReceiveData+0x170>)
 80086e8:	f004 f9c8 	bl	800ca7c <puts>
 80086ec:	e01a      	b.n	8008724 <ES_WIFI_ReceiveData+0x148>
					;
				}
			} else {
				DEBUG("setting requested len failed\n")
 80086ee:	f640 0258 	movw	r2, #2136	; 0x858
 80086f2:	4913      	ldr	r1, [pc, #76]	; (8008740 <ES_WIFI_ReceiveData+0x164>)
 80086f4:	4813      	ldr	r0, [pc, #76]	; (8008744 <ES_WIFI_ReceiveData+0x168>)
 80086f6:	f004 f93b 	bl	800c970 <iprintf>
 80086fa:	4815      	ldr	r0, [pc, #84]	; (8008750 <ES_WIFI_ReceiveData+0x174>)
 80086fc:	f004 f9be 	bl	800ca7c <puts>
				;
				*Receivedlen = 0;
 8008700:	6a3b      	ldr	r3, [r7, #32]
 8008702:	2200      	movs	r2, #0
 8008704:	801a      	strh	r2, [r3, #0]
 8008706:	e00d      	b.n	8008724 <ES_WIFI_ReceiveData+0x148>
			}
		} else {
			DEBUG("setting socket for read failed\n")
 8008708:	f640 025d 	movw	r2, #2141	; 0x85d
 800870c:	490c      	ldr	r1, [pc, #48]	; (8008740 <ES_WIFI_ReceiveData+0x164>)
 800870e:	480d      	ldr	r0, [pc, #52]	; (8008744 <ES_WIFI_ReceiveData+0x168>)
 8008710:	f004 f92e 	bl	800c970 <iprintf>
 8008714:	480f      	ldr	r0, [pc, #60]	; (8008754 <ES_WIFI_ReceiveData+0x178>)
 8008716:	f004 f9b1 	bl	800ca7c <puts>
			;
			issue15++;
 800871a:	4b0f      	ldr	r3, [pc, #60]	; (8008758 <ES_WIFI_ReceiveData+0x17c>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	3301      	adds	r3, #1
 8008720:	4a0d      	ldr	r2, [pc, #52]	; (8008758 <ES_WIFI_ReceiveData+0x17c>)
 8008722:	6013      	str	r3, [r2, #0]
		}
	}UNLOCK_WIFI();
	return ret;
 8008724:	7cfb      	ldrb	r3, [r7, #19]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3718      	adds	r7, #24
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	0800dfc0 	.word	0x0800dfc0
 8008734:	0800e204 	.word	0x0800e204
 8008738:	0800e20c 	.word	0x0800e20c
 800873c:	0800e214 	.word	0x0800e214
 8008740:	0800e050 	.word	0x0800e050
 8008744:	0800e06c 	.word	0x0800e06c
 8008748:	0800e218 	.word	0x0800e218
 800874c:	0800e238 	.word	0x0800e238
 8008750:	0800e250 	.word	0x0800e250
 8008754:	0800e270 	.word	0x0800e270
 8008758:	20000860 	.word	0x20000860

0800875c <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b08c      	sub	sp, #48	; 0x30
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8008764:	4b57      	ldr	r3, [pc, #348]	; (80088c4 <SPI_WIFI_MspInit+0x168>)
 8008766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008768:	4a56      	ldr	r2, [pc, #344]	; (80088c4 <SPI_WIFI_MspInit+0x168>)
 800876a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800876e:	6593      	str	r3, [r2, #88]	; 0x58
 8008770:	4b54      	ldr	r3, [pc, #336]	; (80088c4 <SPI_WIFI_MspInit+0x168>)
 8008772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008774:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008778:	61bb      	str	r3, [r7, #24]
 800877a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800877c:	4b51      	ldr	r3, [pc, #324]	; (80088c4 <SPI_WIFI_MspInit+0x168>)
 800877e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008780:	4a50      	ldr	r2, [pc, #320]	; (80088c4 <SPI_WIFI_MspInit+0x168>)
 8008782:	f043 0302 	orr.w	r3, r3, #2
 8008786:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008788:	4b4e      	ldr	r3, [pc, #312]	; (80088c4 <SPI_WIFI_MspInit+0x168>)
 800878a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800878c:	f003 0302 	and.w	r3, r3, #2
 8008790:	617b      	str	r3, [r7, #20]
 8008792:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008794:	4b4b      	ldr	r3, [pc, #300]	; (80088c4 <SPI_WIFI_MspInit+0x168>)
 8008796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008798:	4a4a      	ldr	r2, [pc, #296]	; (80088c4 <SPI_WIFI_MspInit+0x168>)
 800879a:	f043 0304 	orr.w	r3, r3, #4
 800879e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80087a0:	4b48      	ldr	r3, [pc, #288]	; (80088c4 <SPI_WIFI_MspInit+0x168>)
 80087a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087a4:	f003 0304 	and.w	r3, r3, #4
 80087a8:	613b      	str	r3, [r7, #16]
 80087aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80087ac:	4b45      	ldr	r3, [pc, #276]	; (80088c4 <SPI_WIFI_MspInit+0x168>)
 80087ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087b0:	4a44      	ldr	r2, [pc, #272]	; (80088c4 <SPI_WIFI_MspInit+0x168>)
 80087b2:	f043 0310 	orr.w	r3, r3, #16
 80087b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80087b8:	4b42      	ldr	r3, [pc, #264]	; (80088c4 <SPI_WIFI_MspInit+0x168>)
 80087ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087bc:	f003 0310 	and.w	r3, r3, #16
 80087c0:	60fb      	str	r3, [r7, #12]
 80087c2:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 80087c4:	2200      	movs	r2, #0
 80087c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80087ca:	483f      	ldr	r0, [pc, #252]	; (80088c8 <SPI_WIFI_MspInit+0x16c>)
 80087cc:	f7f9 ffda 	bl	8002784 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 80087d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087d4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80087d6:	2301      	movs	r3, #1
 80087d8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80087da:	2300      	movs	r3, #0
 80087dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80087de:	2300      	movs	r3, #0
 80087e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80087e2:	f107 031c 	add.w	r3, r7, #28
 80087e6:	4619      	mov	r1, r3
 80087e8:	4837      	ldr	r0, [pc, #220]	; (80088c8 <SPI_WIFI_MspInit+0x16c>)
 80087ea:	f7f9 fd15 	bl	8002218 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 80087ee:	2302      	movs	r3, #2
 80087f0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80087f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80087f6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80087f8:	2300      	movs	r3, #0
 80087fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80087fc:	2300      	movs	r3, #0
 80087fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8008800:	f107 031c 	add.w	r3, r7, #28
 8008804:	4619      	mov	r1, r3
 8008806:	4831      	ldr	r0, [pc, #196]	; (80088cc <SPI_WIFI_MspInit+0x170>)
 8008808:	f7f9 fd06 	bl	8002218 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 800880c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008810:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8008812:	2301      	movs	r3, #1
 8008814:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008816:	2300      	movs	r3, #0
 8008818:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800881a:	2300      	movs	r3, #0
 800881c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 800881e:	2300      	movs	r3, #0
 8008820:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8008822:	f107 031c 	add.w	r3, r7, #28
 8008826:	4619      	mov	r1, r3
 8008828:	4828      	ldr	r0, [pc, #160]	; (80088cc <SPI_WIFI_MspInit+0x170>)
 800882a:	f7f9 fcf5 	bl	8002218 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 800882e:	2201      	movs	r2, #1
 8008830:	2101      	movs	r1, #1
 8008832:	4826      	ldr	r0, [pc, #152]	; (80088cc <SPI_WIFI_MspInit+0x170>)
 8008834:	f7f9 ffa6 	bl	8002784 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8008838:	2301      	movs	r3, #1
 800883a:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800883c:	2301      	movs	r3, #1
 800883e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008840:	2300      	movs	r3, #0
 8008842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008844:	2301      	movs	r3, #1
 8008846:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8008848:	f107 031c 	add.w	r3, r7, #28
 800884c:	4619      	mov	r1, r3
 800884e:	481f      	ldr	r0, [pc, #124]	; (80088cc <SPI_WIFI_MspInit+0x170>)
 8008850:	f7f9 fce2 	bl	8002218 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8008854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008858:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800885a:	2302      	movs	r3, #2
 800885c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800885e:	2300      	movs	r3, #0
 8008860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008862:	2301      	movs	r3, #1
 8008864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8008866:	2306      	movs	r3, #6
 8008868:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800886a:	f107 031c 	add.w	r3, r7, #28
 800886e:	4619      	mov	r1, r3
 8008870:	4817      	ldr	r0, [pc, #92]	; (80088d0 <SPI_WIFI_MspInit+0x174>)
 8008872:	f7f9 fcd1 	bl	8002218 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8008876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800887a:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800887c:	2302      	movs	r3, #2
 800887e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008880:	2300      	movs	r3, #0
 8008882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008884:	2301      	movs	r3, #1
 8008886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8008888:	2306      	movs	r3, #6
 800888a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800888c:	f107 031c 	add.w	r3, r7, #28
 8008890:	4619      	mov	r1, r3
 8008892:	480f      	ldr	r0, [pc, #60]	; (80088d0 <SPI_WIFI_MspInit+0x174>)
 8008894:	f7f9 fcc0 	bl	8002218 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8008898:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800889c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800889e:	2302      	movs	r3, #2
 80088a0:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 80088a2:	2301      	movs	r3, #1
 80088a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80088a6:	2301      	movs	r3, #1
 80088a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80088aa:	2306      	movs	r3, #6
 80088ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 80088ae:	f107 031c 	add.w	r3, r7, #28
 80088b2:	4619      	mov	r1, r3
 80088b4:	4806      	ldr	r0, [pc, #24]	; (80088d0 <SPI_WIFI_MspInit+0x174>)
 80088b6:	f7f9 fcaf 	bl	8002218 <HAL_GPIO_Init>
}
 80088ba:	bf00      	nop
 80088bc:	3730      	adds	r7, #48	; 0x30
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	40021000 	.word	0x40021000
 80088c8:	48000400 	.word	0x48000400
 80088cc:	48001000 	.word	0x48001000
 80088d0:	48000800 	.word	0x48000800

080088d4 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	4603      	mov	r3, r0
 80088dc:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 80088de:	2300      	movs	r3, #0
 80088e0:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 80088e2:	88fb      	ldrh	r3, [r7, #6]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d145      	bne.n	8008974 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 80088e8:	4b27      	ldr	r3, [pc, #156]	; (8008988 <SPI_WIFI_Init+0xb4>)
 80088ea:	4a28      	ldr	r2, [pc, #160]	; (800898c <SPI_WIFI_Init+0xb8>)
 80088ec:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 80088ee:	4826      	ldr	r0, [pc, #152]	; (8008988 <SPI_WIFI_Init+0xb4>)
 80088f0:	f7ff ff34 	bl	800875c <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 80088f4:	4b24      	ldr	r3, [pc, #144]	; (8008988 <SPI_WIFI_Init+0xb4>)
 80088f6:	f44f 7282 	mov.w	r2, #260	; 0x104
 80088fa:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 80088fc:	4b22      	ldr	r3, [pc, #136]	; (8008988 <SPI_WIFI_Init+0xb4>)
 80088fe:	2200      	movs	r2, #0
 8008900:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8008902:	4b21      	ldr	r3, [pc, #132]	; (8008988 <SPI_WIFI_Init+0xb4>)
 8008904:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8008908:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800890a:	4b1f      	ldr	r3, [pc, #124]	; (8008988 <SPI_WIFI_Init+0xb4>)
 800890c:	2200      	movs	r2, #0
 800890e:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8008910:	4b1d      	ldr	r3, [pc, #116]	; (8008988 <SPI_WIFI_Init+0xb4>)
 8008912:	2200      	movs	r2, #0
 8008914:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8008916:	4b1c      	ldr	r3, [pc, #112]	; (8008988 <SPI_WIFI_Init+0xb4>)
 8008918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800891c:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 800891e:	4b1a      	ldr	r3, [pc, #104]	; (8008988 <SPI_WIFI_Init+0xb4>)
 8008920:	2210      	movs	r2, #16
 8008922:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8008924:	4b18      	ldr	r3, [pc, #96]	; (8008988 <SPI_WIFI_Init+0xb4>)
 8008926:	2200      	movs	r2, #0
 8008928:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 800892a:	4b17      	ldr	r3, [pc, #92]	; (8008988 <SPI_WIFI_Init+0xb4>)
 800892c:	2200      	movs	r2, #0
 800892e:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8008930:	4b15      	ldr	r3, [pc, #84]	; (8008988 <SPI_WIFI_Init+0xb4>)
 8008932:	2200      	movs	r2, #0
 8008934:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8008936:	4b14      	ldr	r3, [pc, #80]	; (8008988 <SPI_WIFI_Init+0xb4>)
 8008938:	2200      	movs	r2, #0
 800893a:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 800893c:	4812      	ldr	r0, [pc, #72]	; (8008988 <SPI_WIFI_Init+0xb4>)
 800893e:	f7fb fdfd 	bl	800453c <HAL_SPI_Init>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d002      	beq.n	800894e <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8008948:	f04f 33ff 	mov.w	r3, #4294967295
 800894c:	e018      	b.n	8008980 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 800894e:	2200      	movs	r2, #0
 8008950:	2100      	movs	r1, #0
 8008952:	2007      	movs	r0, #7
 8008954:	f7f9 faaa 	bl	8001eac <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8008958:	2007      	movs	r0, #7
 800895a:	f7f9 fac3 	bl	8001ee4 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 800895e:	2200      	movs	r2, #0
 8008960:	2100      	movs	r1, #0
 8008962:	2033      	movs	r0, #51	; 0x33
 8008964:	f7f9 faa2 	bl	8001eac <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8008968:	2033      	movs	r0, #51	; 0x33
 800896a:	f7f9 fabb 	bl	8001ee4 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 800896e:	200a      	movs	r0, #10
 8008970:	f000 f9fe 	bl	8008d70 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 8008974:	f000 f80c 	bl	8008990 <SPI_WIFI_ResetModule>
 8008978:	4603      	mov	r3, r0
 800897a:	73fb      	strb	r3, [r7, #15]

  return rc;
 800897c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008980:	4618      	mov	r0, r3
 8008982:	3710      	adds	r7, #16
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	20000864 	.word	0x20000864
 800898c:	40003c00 	.word	0x40003c00

08008990 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8008996:	f7f9 f9a1 	bl	8001cdc <HAL_GetTick>
 800899a:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 800899c:	2300      	movs	r3, #0
 800899e:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 80089a0:	2200      	movs	r2, #0
 80089a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80089a6:	4830      	ldr	r0, [pc, #192]	; (8008a68 <SPI_WIFI_ResetModule+0xd8>)
 80089a8:	f7f9 feec 	bl	8002784 <HAL_GPIO_WritePin>
 80089ac:	200a      	movs	r0, #10
 80089ae:	f7f9 f9a1 	bl	8001cf4 <HAL_Delay>
 80089b2:	2201      	movs	r2, #1
 80089b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80089b8:	482b      	ldr	r0, [pc, #172]	; (8008a68 <SPI_WIFI_ResetModule+0xd8>)
 80089ba:	f7f9 fee3 	bl	8002784 <HAL_GPIO_WritePin>
 80089be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80089c2:	f7f9 f997 	bl	8001cf4 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 80089c6:	2200      	movs	r2, #0
 80089c8:	2101      	movs	r1, #1
 80089ca:	4827      	ldr	r0, [pc, #156]	; (8008a68 <SPI_WIFI_ResetModule+0xd8>)
 80089cc:	f7f9 feda 	bl	8002784 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80089d0:	200f      	movs	r0, #15
 80089d2:	f000 f9cd 	bl	8008d70 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 80089d6:	e020      	b.n	8008a1a <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	463a      	mov	r2, r7
 80089dc:	18d1      	adds	r1, r2, r3
 80089de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80089e2:	2201      	movs	r2, #1
 80089e4:	4821      	ldr	r0, [pc, #132]	; (8008a6c <SPI_WIFI_ResetModule+0xdc>)
 80089e6:	f7fb fe74 	bl	80046d2 <HAL_SPI_Receive>
 80089ea:	4603      	mov	r3, r0
 80089ec:	71fb      	strb	r3, [r7, #7]
    count += 2;
 80089ee:	7bfb      	ldrb	r3, [r7, #15]
 80089f0:	3302      	adds	r3, #2
 80089f2:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 80089f4:	f7f9 f972 	bl	8001cdc <HAL_GetTick>
 80089f8:	4602      	mov	r2, r0
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	1ad3      	subs	r3, r2, r3
 80089fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a02:	d202      	bcs.n	8008a0a <SPI_WIFI_ResetModule+0x7a>
 8008a04:	79fb      	ldrb	r3, [r7, #7]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d007      	beq.n	8008a1a <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	4816      	ldr	r0, [pc, #88]	; (8008a68 <SPI_WIFI_ResetModule+0xd8>)
 8008a10:	f7f9 feb8 	bl	8002784 <HAL_GPIO_WritePin>
      return -1;
 8008a14:	f04f 33ff 	mov.w	r3, #4294967295
 8008a18:	e021      	b.n	8008a5e <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8008a1a:	2102      	movs	r1, #2
 8008a1c:	4812      	ldr	r0, [pc, #72]	; (8008a68 <SPI_WIFI_ResetModule+0xd8>)
 8008a1e:	f7f9 fe99 	bl	8002754 <HAL_GPIO_ReadPin>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d0d7      	beq.n	80089d8 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 8008a28:	2201      	movs	r2, #1
 8008a2a:	2101      	movs	r1, #1
 8008a2c:	480e      	ldr	r0, [pc, #56]	; (8008a68 <SPI_WIFI_ResetModule+0xd8>)
 8008a2e:	f7f9 fea9 	bl	8002784 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8008a32:	783b      	ldrb	r3, [r7, #0]
 8008a34:	2b15      	cmp	r3, #21
 8008a36:	d10e      	bne.n	8008a56 <SPI_WIFI_ResetModule+0xc6>
 8008a38:	787b      	ldrb	r3, [r7, #1]
 8008a3a:	2b15      	cmp	r3, #21
 8008a3c:	d10b      	bne.n	8008a56 <SPI_WIFI_ResetModule+0xc6>
 8008a3e:	78bb      	ldrb	r3, [r7, #2]
 8008a40:	2b0d      	cmp	r3, #13
 8008a42:	d108      	bne.n	8008a56 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8008a44:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8008a46:	2b0a      	cmp	r3, #10
 8008a48:	d105      	bne.n	8008a56 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8008a4a:	793b      	ldrb	r3, [r7, #4]
 8008a4c:	2b3e      	cmp	r3, #62	; 0x3e
 8008a4e:	d102      	bne.n	8008a56 <SPI_WIFI_ResetModule+0xc6>
 8008a50:	797b      	ldrb	r3, [r7, #5]
 8008a52:	2b20      	cmp	r3, #32
 8008a54:	d002      	beq.n	8008a5c <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8008a56:	f04f 33ff 	mov.w	r3, #4294967295
 8008a5a:	e000      	b.n	8008a5e <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	48001000 	.word	0x48001000
 8008a6c:	20000864 	.word	0x20000864

08008a70 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8008a74:	4802      	ldr	r0, [pc, #8]	; (8008a80 <SPI_WIFI_DeInit+0x10>)
 8008a76:	f7fb fe04 	bl	8004682 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	20000864 	.word	0x20000864

08008a84 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8008a8c:	f7f9 f926 	bl	8001cdc <HAL_GetTick>
 8008a90:	4603      	mov	r3, r0
 8008a92:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8008a94:	e00a      	b.n	8008aac <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8008a96:	f7f9 f921 	bl	8001cdc <HAL_GetTick>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	1ad2      	subs	r2, r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d902      	bls.n	8008aac <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8008aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8008aaa:	e007      	b.n	8008abc <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8008aac:	2102      	movs	r1, #2
 8008aae:	4805      	ldr	r0, [pc, #20]	; (8008ac4 <wait_cmddata_rdy_high+0x40>)
 8008ab0:	f7f9 fe50 	bl	8002754 <HAL_GPIO_ReadPin>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d1ed      	bne.n	8008a96 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	48001000 	.word	0x48001000

08008ac8 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8008ad0:	f7f9 f904 	bl	8001cdc <HAL_GetTick>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8008ad8:	e00a      	b.n	8008af0 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8008ada:	f7f9 f8ff 	bl	8001cdc <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	1ad2      	subs	r2, r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d902      	bls.n	8008af0 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8008aea:	f04f 33ff 	mov.w	r3, #4294967295
 8008aee:	e004      	b.n	8008afa <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8008af0:	4b04      	ldr	r3, [pc, #16]	; (8008b04 <wait_cmddata_rdy_rising_event+0x3c>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d0f0      	beq.n	8008ada <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8008af8:	2300      	movs	r3, #0
#endif
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	200008d0 	.word	0x200008d0

08008b08 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8008b10:	f7f9 f8e4 	bl	8001cdc <HAL_GetTick>
 8008b14:	4603      	mov	r3, r0
 8008b16:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 8008b18:	e00a      	b.n	8008b30 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8008b1a:	f7f9 f8df 	bl	8001cdc <HAL_GetTick>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	1ad2      	subs	r2, r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d902      	bls.n	8008b30 <wait_spi_rx_event+0x28>
    {
      return -1;
 8008b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b2e:	e004      	b.n	8008b3a <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 8008b30:	4b04      	ldr	r3, [pc, #16]	; (8008b44 <wait_spi_rx_event+0x3c>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d0f0      	beq.n	8008b1a <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8008b38:	2300      	movs	r3, #0
#endif
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	200008c8 	.word	0x200008c8

08008b48 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8008b50:	f7f9 f8c4 	bl	8001cdc <HAL_GetTick>
 8008b54:	4603      	mov	r3, r0
 8008b56:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 8008b58:	e00a      	b.n	8008b70 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8008b5a:	f7f9 f8bf 	bl	8001cdc <HAL_GetTick>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	1ad2      	subs	r2, r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d902      	bls.n	8008b70 <wait_spi_tx_event+0x28>
    {
      return -1;
 8008b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b6e:	e004      	b.n	8008b7a <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 8008b70:	4b04      	ldr	r3, [pc, #16]	; (8008b84 <wait_spi_tx_event+0x3c>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d0f0      	beq.n	8008b5a <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8008b78:	2300      	movs	r3, #0
#endif
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	200008cc 	.word	0x200008cc

08008b88 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	460b      	mov	r3, r1
 8008b92:	607a      	str	r2, [r7, #4]
 8008b94:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8008b96:	2300      	movs	r3, #0
 8008b98:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	2101      	movs	r1, #1
 8008b9e:	4834      	ldr	r0, [pc, #208]	; (8008c70 <SPI_WIFI_ReceiveData+0xe8>)
 8008ba0:	f7f9 fdf0 	bl	8002784 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8008ba4:	2003      	movs	r0, #3
 8008ba6:	f000 f8e3 	bl	8008d70 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7ff ff8b 	bl	8008ac8 <wait_cmddata_rdy_rising_event>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	da02      	bge.n	8008bbe <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8008bb8:	f06f 0302 	mvn.w	r3, #2
 8008bbc:	e054      	b.n	8008c68 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	2101      	movs	r1, #1
 8008bc2:	482b      	ldr	r0, [pc, #172]	; (8008c70 <SPI_WIFI_ReceiveData+0xe8>)
 8008bc4:	f7f9 fdde 	bl	8002784 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8008bc8:	200f      	movs	r0, #15
 8008bca:	f000 f8d1 	bl	8008d70 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8008bce:	e03d      	b.n	8008c4c <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8008bd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008bd4:	897b      	ldrh	r3, [r7, #10]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	db02      	blt.n	8008be0 <SPI_WIFI_ReceiveData+0x58>
 8008bda:	897b      	ldrh	r3, [r7, #10]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d13c      	bne.n	8008c5a <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8008be0:	4b24      	ldr	r3, [pc, #144]	; (8008c74 <SPI_WIFI_ReceiveData+0xec>)
 8008be2:	2201      	movs	r2, #1
 8008be4:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8008be6:	f107 0314 	add.w	r3, r7, #20
 8008bea:	2201      	movs	r2, #1
 8008bec:	4619      	mov	r1, r3
 8008bee:	4822      	ldr	r0, [pc, #136]	; (8008c78 <SPI_WIFI_ReceiveData+0xf0>)
 8008bf0:	f7fc f940 	bl	8004e74 <HAL_SPI_Receive_IT>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d007      	beq.n	8008c0a <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	2101      	movs	r1, #1
 8008bfe:	481c      	ldr	r0, [pc, #112]	; (8008c70 <SPI_WIFI_ReceiveData+0xe8>)
 8008c00:	f7f9 fdc0 	bl	8002784 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8008c04:	f04f 33ff 	mov.w	r3, #4294967295
 8008c08:	e02e      	b.n	8008c68 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7ff ff7b 	bl	8008b08 <wait_spi_rx_event>

      pData[0] = tmp[0];
 8008c12:	7d3a      	ldrb	r2, [r7, #20]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	7d7a      	ldrb	r2, [r7, #21]
 8008c1e:	701a      	strb	r2, [r3, #0]
      length += 2;
 8008c20:	8afb      	ldrh	r3, [r7, #22]
 8008c22:	3302      	adds	r3, #2
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	3302      	adds	r3, #2
 8008c2c:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8008c2e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008c32:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008c36:	db09      	blt.n	8008c4c <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8008c38:	2201      	movs	r2, #1
 8008c3a:	2101      	movs	r1, #1
 8008c3c:	480c      	ldr	r0, [pc, #48]	; (8008c70 <SPI_WIFI_ReceiveData+0xe8>)
 8008c3e:	f7f9 fda1 	bl	8002784 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8008c42:	f7ff fea5 	bl	8008990 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8008c46:	f06f 0303 	mvn.w	r3, #3
 8008c4a:	e00d      	b.n	8008c68 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8008c4c:	2102      	movs	r1, #2
 8008c4e:	4808      	ldr	r0, [pc, #32]	; (8008c70 <SPI_WIFI_ReceiveData+0xe8>)
 8008c50:	f7f9 fd80 	bl	8002754 <HAL_GPIO_ReadPin>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d0ba      	beq.n	8008bd0 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	4804      	ldr	r0, [pc, #16]	; (8008c70 <SPI_WIFI_ReceiveData+0xe8>)
 8008c60:	f7f9 fd90 	bl	8002784 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8008c64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3718      	adds	r7, #24
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	48001000 	.word	0x48001000
 8008c74:	200008c8 	.word	0x200008c8
 8008c78:	20000864 	.word	0x20000864

08008c7c <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b086      	sub	sp, #24
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	460b      	mov	r3, r1
 8008c86:	607a      	str	r2, [r7, #4]
 8008c88:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7ff fef9 	bl	8008a84 <wait_cmddata_rdy_high>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	da02      	bge.n	8008c9e <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8008c98:	f04f 33ff 	mov.w	r3, #4294967295
 8008c9c:	e04f      	b.n	8008d3e <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 8008c9e:	4b2a      	ldr	r3, [pc, #168]	; (8008d48 <SPI_WIFI_SendData+0xcc>)
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	2101      	movs	r1, #1
 8008ca8:	4828      	ldr	r0, [pc, #160]	; (8008d4c <SPI_WIFI_SendData+0xd0>)
 8008caa:	f7f9 fd6b 	bl	8002784 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8008cae:	200f      	movs	r0, #15
 8008cb0:	f000 f85e 	bl	8008d70 <SPI_WIFI_DelayUs>
  if (len > 1)
 8008cb4:	897b      	ldrh	r3, [r7, #10]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d919      	bls.n	8008cee <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 8008cba:	4b25      	ldr	r3, [pc, #148]	; (8008d50 <SPI_WIFI_SendData+0xd4>)
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8008cc0:	897b      	ldrh	r3, [r7, #10]
 8008cc2:	085b      	lsrs	r3, r3, #1
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	68f9      	ldr	r1, [r7, #12]
 8008cca:	4822      	ldr	r0, [pc, #136]	; (8008d54 <SPI_WIFI_SendData+0xd8>)
 8008ccc:	f7fc f844 	bl	8004d58 <HAL_SPI_Transmit_IT>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d007      	beq.n	8008ce6 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	2101      	movs	r1, #1
 8008cda:	481c      	ldr	r0, [pc, #112]	; (8008d4c <SPI_WIFI_SendData+0xd0>)
 8008cdc:	f7f9 fd52 	bl	8002784 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8008ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ce4:	e02b      	b.n	8008d3e <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7ff ff2d 	bl	8008b48 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 8008cee:	897b      	ldrh	r3, [r7, #10]
 8008cf0:	f003 0301 	and.w	r3, r3, #1
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d020      	beq.n	8008d3a <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 8008cf8:	897b      	ldrh	r3, [r7, #10]
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	4413      	add	r3, r2
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8008d04:	230a      	movs	r3, #10
 8008d06:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8008d08:	4b11      	ldr	r3, [pc, #68]	; (8008d50 <SPI_WIFI_SendData+0xd4>)
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8008d0e:	f107 0314 	add.w	r3, r7, #20
 8008d12:	2201      	movs	r2, #1
 8008d14:	4619      	mov	r1, r3
 8008d16:	480f      	ldr	r0, [pc, #60]	; (8008d54 <SPI_WIFI_SendData+0xd8>)
 8008d18:	f7fc f81e 	bl	8004d58 <HAL_SPI_Transmit_IT>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d007      	beq.n	8008d32 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8008d22:	2201      	movs	r2, #1
 8008d24:	2101      	movs	r1, #1
 8008d26:	4809      	ldr	r0, [pc, #36]	; (8008d4c <SPI_WIFI_SendData+0xd0>)
 8008d28:	f7f9 fd2c 	bl	8002784 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8008d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d30:	e005      	b.n	8008d3e <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7ff ff07 	bl	8008b48 <wait_spi_tx_event>
    
  }
  return len;
 8008d3a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3718      	adds	r7, #24
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	200008d0 	.word	0x200008d0
 8008d4c:	48001000 	.word	0x48001000
 8008d50:	200008cc 	.word	0x200008cc
 8008d54:	20000864 	.word	0x20000864

08008d58 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f7f8 ffc7 	bl	8001cf4 <HAL_Delay>
}
 8008d66:	bf00      	nop
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
	...

08008d70 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b086      	sub	sp, #24
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8008d80:	4b20      	ldr	r3, [pc, #128]	; (8008e04 <SPI_WIFI_DelayUs+0x94>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d122      	bne.n	8008dce <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8008d88:	4b1f      	ldr	r3, [pc, #124]	; (8008e08 <SPI_WIFI_DelayUs+0x98>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a1f      	ldr	r2, [pc, #124]	; (8008e0c <SPI_WIFI_DelayUs+0x9c>)
 8008d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d92:	099b      	lsrs	r3, r3, #6
 8008d94:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8008d96:	2300      	movs	r3, #0
 8008d98:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8008d9e:	f7f8 ff9d 	bl	8001cdc <HAL_GetTick>
 8008da2:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8008da4:	e002      	b.n	8008dac <SPI_WIFI_DelayUs+0x3c>
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	3b01      	subs	r3, #1
 8008daa:	60bb      	str	r3, [r7, #8]
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1f9      	bne.n	8008da6 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 8008db2:	f7f8 ff93 	bl	8001cdc <HAL_GetTick>
 8008db6:	4602      	mov	r2, r0
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	4a11      	ldr	r2, [pc, #68]	; (8008e04 <SPI_WIFI_DelayUs+0x94>)
 8008dbe:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8008dc0:	4b10      	ldr	r3, [pc, #64]	; (8008e04 <SPI_WIFI_DelayUs+0x94>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d102      	bne.n	8008dce <SPI_WIFI_DelayUs+0x5e>
 8008dc8:	4b0e      	ldr	r3, [pc, #56]	; (8008e04 <SPI_WIFI_DelayUs+0x94>)
 8008dca:	2201      	movs	r2, #1
 8008dcc:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8008dce:	4b0e      	ldr	r3, [pc, #56]	; (8008e08 <SPI_WIFI_DelayUs+0x98>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a0f      	ldr	r2, [pc, #60]	; (8008e10 <SPI_WIFI_DelayUs+0xa0>)
 8008dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd8:	0c9a      	lsrs	r2, r3, #18
 8008dda:	4b0a      	ldr	r3, [pc, #40]	; (8008e04 <SPI_WIFI_DelayUs+0x94>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8008de2:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	697a      	ldr	r2, [r7, #20]
 8008de8:	fb02 f303 	mul.w	r3, r2, r3
 8008dec:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8008dee:	e002      	b.n	8008df6 <SPI_WIFI_DelayUs+0x86>
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	3b01      	subs	r3, #1
 8008df4:	60bb      	str	r3, [r7, #8]
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d1f9      	bne.n	8008df0 <SPI_WIFI_DelayUs+0x80>
  return;
 8008dfc:	bf00      	nop
}
 8008dfe:	3718      	adds	r7, #24
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	200008d4 	.word	0x200008d4
 8008e08:	20000000 	.word	0x20000000
 8008e0c:	10624dd3 	.word	0x10624dd3
 8008e10:	431bde83 	.word	0x431bde83

08008e14 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8008e1c:	4b06      	ldr	r3, [pc, #24]	; (8008e38 <HAL_SPI_RxCpltCallback+0x24>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8008e24:	4b04      	ldr	r3, [pc, #16]	; (8008e38 <HAL_SPI_RxCpltCallback+0x24>)
 8008e26:	2200      	movs	r2, #0
 8008e28:	601a      	str	r2, [r3, #0]
  }
}
 8008e2a:	bf00      	nop
 8008e2c:	370c      	adds	r7, #12
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	200008c8 	.word	0x200008c8

08008e3c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8008e44:	4b06      	ldr	r3, [pc, #24]	; (8008e60 <HAL_SPI_TxCpltCallback+0x24>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d002      	beq.n	8008e52 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8008e4c:	4b04      	ldr	r3, [pc, #16]	; (8008e60 <HAL_SPI_TxCpltCallback+0x24>)
 8008e4e:	2200      	movs	r2, #0
 8008e50:	601a      	str	r2, [r3, #0]
  }
}
 8008e52:	bf00      	nop
 8008e54:	370c      	adds	r7, #12
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	200008cc 	.word	0x200008cc

08008e64 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8008e64:	b480      	push	{r7}
 8008e66:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8008e68:	4b05      	ldr	r3, [pc, #20]	; (8008e80 <SPI_WIFI_ISR+0x1c>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d102      	bne.n	8008e76 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8008e70:	4b03      	ldr	r3, [pc, #12]	; (8008e80 <SPI_WIFI_ISR+0x1c>)
 8008e72:	2200      	movs	r2, #0
 8008e74:	601a      	str	r2, [r3, #0]
   }
}
 8008e76:	bf00      	nop
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr
 8008e80:	200008d0 	.word	0x200008d0

08008e84 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8008e8e:	4b0d      	ldr	r3, [pc, #52]	; (8008ec4 <WIFI_Init+0x40>)
 8008e90:	9301      	str	r3, [sp, #4]
 8008e92:	4b0d      	ldr	r3, [pc, #52]	; (8008ec8 <WIFI_Init+0x44>)
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	4b0d      	ldr	r3, [pc, #52]	; (8008ecc <WIFI_Init+0x48>)
 8008e98:	4a0d      	ldr	r2, [pc, #52]	; (8008ed0 <WIFI_Init+0x4c>)
 8008e9a:	490e      	ldr	r1, [pc, #56]	; (8008ed4 <WIFI_Init+0x50>)
 8008e9c:	480e      	ldr	r0, [pc, #56]	; (8008ed8 <WIFI_Init+0x54>)
 8008e9e:	f7ff f8c9 	bl	8008034 <ES_WIFI_RegisterBusIO>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d107      	bne.n	8008eb8 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8008ea8:	480b      	ldr	r0, [pc, #44]	; (8008ed8 <WIFI_Init+0x54>)
 8008eaa:	f7ff f895 	bl	8007fd8 <ES_WIFI_Init>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d101      	bne.n	8008eb8 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8008eb8:	79fb      	ldrb	r3, [r7, #7]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3708      	adds	r7, #8
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	08008b89 	.word	0x08008b89
 8008ec8:	08008c7d 	.word	0x08008c7d
 8008ecc:	08008d59 	.word	0x08008d59
 8008ed0:	08008a71 	.word	0x08008a71
 8008ed4:	080088d5 	.word	0x080088d5
 8008ed8:	200008d8 	.word	0x200008d8

08008edc <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b086      	sub	sp, #24
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8008eee:	79fb      	ldrb	r3, [r7, #7]
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	68f9      	ldr	r1, [r7, #12]
 8008ef4:	4809      	ldr	r0, [pc, #36]	; (8008f1c <WIFI_Connect+0x40>)
 8008ef6:	f7ff f8d1 	bl	800809c <ES_WIFI_Connect>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d107      	bne.n	8008f10 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8008f00:	4806      	ldr	r0, [pc, #24]	; (8008f1c <WIFI_Connect+0x40>)
 8008f02:	f7ff f961 	bl	80081c8 <ES_WIFI_GetNetworkSettings>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d101      	bne.n	8008f10 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8008f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3718      	adds	r7, #24
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	200008d8 	.word	0x200008d8

08008f20 <WIFI_Disconnect>:
  * @brief  Disconnect from a network
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Disconnect(void)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	71fb      	strb	r3, [r7, #7]
  if( ES_WIFI_Disconnect(&EsWifiObj)== ES_WIFI_STATUS_OK)
 8008f2a:	4806      	ldr	r0, [pc, #24]	; (8008f44 <WIFI_Disconnect+0x24>)
 8008f2c:	f7ff f92e 	bl	800818c <ES_WIFI_Disconnect>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d101      	bne.n	8008f3a <WIFI_Disconnect+0x1a>
  {
    ret = WIFI_STATUS_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	71fb      	strb	r3, [r7, #7]
  }
  
  return ret;
 8008f3a:	79fb      	ldrb	r3, [r7, #7]
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	200008d8 	.word	0x200008d8

08008f48 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b08a      	sub	sp, #40	; 0x28
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	607a      	str	r2, [r7, #4]
 8008f52:	603b      	str	r3, [r7, #0]
 8008f54:	460b      	mov	r3, r1
 8008f56:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 8008f64:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008f66:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 8008f68:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008f6a:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8008f6c:	7afb      	ldrb	r3, [r7, #11]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	bf14      	ite	ne
 8008f72:	2301      	movne	r3, #1
 8008f74:	2300      	moveq	r3, #0
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	785b      	ldrb	r3, [r3, #1]
 8008f84:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	789b      	ldrb	r3, [r3, #2]
 8008f8a:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	78db      	ldrb	r3, [r3, #3]
 8008f90:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8008f92:	f107 0310 	add.w	r3, r7, #16
 8008f96:	4619      	mov	r1, r3
 8008f98:	4807      	ldr	r0, [pc, #28]	; (8008fb8 <WIFI_OpenClientConnection+0x70>)
 8008f9a:	f7ff f93f 	bl	800821c <ES_WIFI_StartClientConnection>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d102      	bne.n	8008faa <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8008faa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3728      	adds	r7, #40	; 0x28
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	200008d8 	.word	0x200008d8

08008fbc <WIFI_CloseClientConnection>:
/**
  * @brief  Close client connection
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseClientConnection(uint32_t socket)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b088      	sub	sp, #32
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	77fb      	strb	r3, [r7, #31]
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	727b      	strb	r3, [r7, #9]
  
  if(ES_WIFI_StopClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8008fce:	f107 0308 	add.w	r3, r7, #8
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	4806      	ldr	r0, [pc, #24]	; (8008ff0 <WIFI_CloseClientConnection+0x34>)
 8008fd6:	f7ff fa0b 	bl	80083f0 <ES_WIFI_StopClientConnection>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d101      	bne.n	8008fe4 <WIFI_CloseClientConnection+0x28>
  {
    ret = WIFI_STATUS_OK;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 8008fe4:	7ffb      	ldrb	r3, [r7, #31]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3720      	adds	r7, #32
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	200008d8 	.word	0x200008d8

08008ff4 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b088      	sub	sp, #32
 8008ff8:	af02      	add	r7, sp, #8
 8008ffa:	60b9      	str	r1, [r7, #8]
 8008ffc:	607b      	str	r3, [r7, #4]
 8008ffe:	4603      	mov	r3, r0
 8009000:	73fb      	strb	r3, [r7, #15]
 8009002:	4613      	mov	r3, r2
 8009004:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800900a:	89ba      	ldrh	r2, [r7, #12]
 800900c:	7bf9      	ldrb	r1, [r7, #15]
 800900e:	6a3b      	ldr	r3, [r7, #32]
 8009010:	9301      	str	r3, [sp, #4]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	4613      	mov	r3, r2
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	4806      	ldr	r0, [pc, #24]	; (8009034 <WIFI_SendData+0x40>)
 800901c:	f7ff fa22 	bl	8008464 <ES_WIFI_SendData>
 8009020:	4603      	mov	r3, r0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d101      	bne.n	800902a <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8009026:	2300      	movs	r3, #0
 8009028:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 800902a:	7dfb      	ldrb	r3, [r7, #23]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3718      	adds	r7, #24
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	200008d8 	.word	0x200008d8

08009038 <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b088      	sub	sp, #32
 800903c:	af02      	add	r7, sp, #8
 800903e:	60b9      	str	r1, [r7, #8]
 8009040:	607b      	str	r3, [r7, #4]
 8009042:	4603      	mov	r3, r0
 8009044:	73fb      	strb	r3, [r7, #15]
 8009046:	4613      	mov	r3, r2
 8009048:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800904e:	89ba      	ldrh	r2, [r7, #12]
 8009050:	7bf9      	ldrb	r1, [r7, #15]
 8009052:	6a3b      	ldr	r3, [r7, #32]
 8009054:	9301      	str	r3, [sp, #4]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	4613      	mov	r3, r2
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	4806      	ldr	r0, [pc, #24]	; (8009078 <WIFI_ReceiveData+0x40>)
 8009060:	f7ff fabc 	bl	80085dc <ES_WIFI_ReceiveData>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d101      	bne.n	800906e <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 800906e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009070:	4618      	mov	r0, r3
 8009072:	3718      	adds	r7, #24
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	200008d8 	.word	0x200008d8

0800907c <__NVIC_SetPriority>:
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	4603      	mov	r3, r0
 8009084:	6039      	str	r1, [r7, #0]
 8009086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800908c:	2b00      	cmp	r3, #0
 800908e:	db0a      	blt.n	80090a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	b2da      	uxtb	r2, r3
 8009094:	490c      	ldr	r1, [pc, #48]	; (80090c8 <__NVIC_SetPriority+0x4c>)
 8009096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800909a:	0112      	lsls	r2, r2, #4
 800909c:	b2d2      	uxtb	r2, r2
 800909e:	440b      	add	r3, r1
 80090a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80090a4:	e00a      	b.n	80090bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	b2da      	uxtb	r2, r3
 80090aa:	4908      	ldr	r1, [pc, #32]	; (80090cc <__NVIC_SetPriority+0x50>)
 80090ac:	79fb      	ldrb	r3, [r7, #7]
 80090ae:	f003 030f 	and.w	r3, r3, #15
 80090b2:	3b04      	subs	r3, #4
 80090b4:	0112      	lsls	r2, r2, #4
 80090b6:	b2d2      	uxtb	r2, r2
 80090b8:	440b      	add	r3, r1
 80090ba:	761a      	strb	r2, [r3, #24]
}
 80090bc:	bf00      	nop
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr
 80090c8:	e000e100 	.word	0xe000e100
 80090cc:	e000ed00 	.word	0xe000ed00

080090d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80090d0:	b580      	push	{r7, lr}
 80090d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80090d4:	4b05      	ldr	r3, [pc, #20]	; (80090ec <SysTick_Handler+0x1c>)
 80090d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80090d8:	f002 f8aa 	bl	800b230 <xTaskGetSchedulerState>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d001      	beq.n	80090e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80090e2:	f002 ff91 	bl	800c008 <xPortSysTickHandler>
  }
}
 80090e6:	bf00      	nop
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	e000e010 	.word	0xe000e010

080090f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80090f0:	b580      	push	{r7, lr}
 80090f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80090f4:	2100      	movs	r1, #0
 80090f6:	f06f 0004 	mvn.w	r0, #4
 80090fa:	f7ff ffbf 	bl	800907c <__NVIC_SetPriority>
#endif
}
 80090fe:	bf00      	nop
 8009100:	bd80      	pop	{r7, pc}
	...

08009104 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800910a:	f3ef 8305 	mrs	r3, IPSR
 800910e:	603b      	str	r3, [r7, #0]
  return(result);
 8009110:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009112:	2b00      	cmp	r3, #0
 8009114:	d003      	beq.n	800911e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009116:	f06f 0305 	mvn.w	r3, #5
 800911a:	607b      	str	r3, [r7, #4]
 800911c:	e00c      	b.n	8009138 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800911e:	4b0a      	ldr	r3, [pc, #40]	; (8009148 <osKernelInitialize+0x44>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d105      	bne.n	8009132 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009126:	4b08      	ldr	r3, [pc, #32]	; (8009148 <osKernelInitialize+0x44>)
 8009128:	2201      	movs	r2, #1
 800912a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800912c:	2300      	movs	r3, #0
 800912e:	607b      	str	r3, [r7, #4]
 8009130:	e002      	b.n	8009138 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009132:	f04f 33ff 	mov.w	r3, #4294967295
 8009136:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009138:	687b      	ldr	r3, [r7, #4]
}
 800913a:	4618      	mov	r0, r3
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	200011d8 	.word	0x200011d8

0800914c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009152:	f3ef 8305 	mrs	r3, IPSR
 8009156:	603b      	str	r3, [r7, #0]
  return(result);
 8009158:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800915a:	2b00      	cmp	r3, #0
 800915c:	d003      	beq.n	8009166 <osKernelStart+0x1a>
    stat = osErrorISR;
 800915e:	f06f 0305 	mvn.w	r3, #5
 8009162:	607b      	str	r3, [r7, #4]
 8009164:	e010      	b.n	8009188 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009166:	4b0b      	ldr	r3, [pc, #44]	; (8009194 <osKernelStart+0x48>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2b01      	cmp	r3, #1
 800916c:	d109      	bne.n	8009182 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800916e:	f7ff ffbf 	bl	80090f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009172:	4b08      	ldr	r3, [pc, #32]	; (8009194 <osKernelStart+0x48>)
 8009174:	2202      	movs	r2, #2
 8009176:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009178:	f001 fbfe 	bl	800a978 <vTaskStartScheduler>
      stat = osOK;
 800917c:	2300      	movs	r3, #0
 800917e:	607b      	str	r3, [r7, #4]
 8009180:	e002      	b.n	8009188 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009182:	f04f 33ff 	mov.w	r3, #4294967295
 8009186:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009188:	687b      	ldr	r3, [r7, #4]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	200011d8 	.word	0x200011d8

08009198 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009198:	b580      	push	{r7, lr}
 800919a:	b08e      	sub	sp, #56	; 0x38
 800919c:	af04      	add	r7, sp, #16
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80091a4:	2300      	movs	r3, #0
 80091a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091a8:	f3ef 8305 	mrs	r3, IPSR
 80091ac:	617b      	str	r3, [r7, #20]
  return(result);
 80091ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d17e      	bne.n	80092b2 <osThreadNew+0x11a>
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d07b      	beq.n	80092b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80091ba:	2380      	movs	r3, #128	; 0x80
 80091bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80091be:	2318      	movs	r3, #24
 80091c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80091c2:	2300      	movs	r3, #0
 80091c4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80091c6:	f04f 33ff 	mov.w	r3, #4294967295
 80091ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d045      	beq.n	800925e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d002      	beq.n	80091e0 <osThreadNew+0x48>
        name = attr->name;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	699b      	ldr	r3, [r3, #24]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d002      	beq.n	80091ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d008      	beq.n	8009206 <osThreadNew+0x6e>
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	2b38      	cmp	r3, #56	; 0x38
 80091f8:	d805      	bhi.n	8009206 <osThreadNew+0x6e>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	f003 0301 	and.w	r3, r3, #1
 8009202:	2b00      	cmp	r3, #0
 8009204:	d001      	beq.n	800920a <osThreadNew+0x72>
        return (NULL);
 8009206:	2300      	movs	r3, #0
 8009208:	e054      	b.n	80092b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	695b      	ldr	r3, [r3, #20]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d003      	beq.n	800921a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	695b      	ldr	r3, [r3, #20]
 8009216:	089b      	lsrs	r3, r3, #2
 8009218:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00e      	beq.n	8009240 <osThreadNew+0xa8>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	2bbb      	cmp	r3, #187	; 0xbb
 8009228:	d90a      	bls.n	8009240 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800922e:	2b00      	cmp	r3, #0
 8009230:	d006      	beq.n	8009240 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	695b      	ldr	r3, [r3, #20]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d002      	beq.n	8009240 <osThreadNew+0xa8>
        mem = 1;
 800923a:	2301      	movs	r3, #1
 800923c:	61bb      	str	r3, [r7, #24]
 800923e:	e010      	b.n	8009262 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10c      	bne.n	8009262 <osThreadNew+0xca>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d108      	bne.n	8009262 <osThreadNew+0xca>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d104      	bne.n	8009262 <osThreadNew+0xca>
          mem = 0;
 8009258:	2300      	movs	r3, #0
 800925a:	61bb      	str	r3, [r7, #24]
 800925c:	e001      	b.n	8009262 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800925e:	2300      	movs	r3, #0
 8009260:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d110      	bne.n	800928a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009270:	9202      	str	r2, [sp, #8]
 8009272:	9301      	str	r3, [sp, #4]
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	6a3a      	ldr	r2, [r7, #32]
 800927c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f001 f98e 	bl	800a5a0 <xTaskCreateStatic>
 8009284:	4603      	mov	r3, r0
 8009286:	613b      	str	r3, [r7, #16]
 8009288:	e013      	b.n	80092b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d110      	bne.n	80092b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009290:	6a3b      	ldr	r3, [r7, #32]
 8009292:	b29a      	uxth	r2, r3
 8009294:	f107 0310 	add.w	r3, r7, #16
 8009298:	9301      	str	r3, [sp, #4]
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	9300      	str	r3, [sp, #0]
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f001 f9d9 	bl	800a65a <xTaskCreate>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d001      	beq.n	80092b2 <osThreadNew+0x11a>
            hTask = NULL;
 80092ae:	2300      	movs	r3, #0
 80092b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80092b2:	693b      	ldr	r3, [r7, #16]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3728      	adds	r7, #40	; 0x28
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80092bc:	b580      	push	{r7, lr}
 80092be:	b08a      	sub	sp, #40	; 0x28
 80092c0:	af02      	add	r7, sp, #8
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80092c8:	2300      	movs	r3, #0
 80092ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092cc:	f3ef 8305 	mrs	r3, IPSR
 80092d0:	613b      	str	r3, [r7, #16]
  return(result);
 80092d2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d175      	bne.n	80093c4 <osSemaphoreNew+0x108>
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d072      	beq.n	80093c4 <osSemaphoreNew+0x108>
 80092de:	68ba      	ldr	r2, [r7, #8]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d86e      	bhi.n	80093c4 <osSemaphoreNew+0x108>
    mem = -1;
 80092e6:	f04f 33ff 	mov.w	r3, #4294967295
 80092ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d015      	beq.n	800931e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d006      	beq.n	8009308 <osSemaphoreNew+0x4c>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	2b4f      	cmp	r3, #79	; 0x4f
 8009300:	d902      	bls.n	8009308 <osSemaphoreNew+0x4c>
        mem = 1;
 8009302:	2301      	movs	r3, #1
 8009304:	61bb      	str	r3, [r7, #24]
 8009306:	e00c      	b.n	8009322 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d108      	bne.n	8009322 <osSemaphoreNew+0x66>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d104      	bne.n	8009322 <osSemaphoreNew+0x66>
          mem = 0;
 8009318:	2300      	movs	r3, #0
 800931a:	61bb      	str	r3, [r7, #24]
 800931c:	e001      	b.n	8009322 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800931e:	2300      	movs	r3, #0
 8009320:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009328:	d04c      	beq.n	80093c4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d128      	bne.n	8009382 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	2b01      	cmp	r3, #1
 8009334:	d10a      	bne.n	800934c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	2203      	movs	r2, #3
 800933c:	9200      	str	r2, [sp, #0]
 800933e:	2200      	movs	r2, #0
 8009340:	2100      	movs	r1, #0
 8009342:	2001      	movs	r0, #1
 8009344:	f000 fa06 	bl	8009754 <xQueueGenericCreateStatic>
 8009348:	61f8      	str	r0, [r7, #28]
 800934a:	e005      	b.n	8009358 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800934c:	2203      	movs	r2, #3
 800934e:	2100      	movs	r1, #0
 8009350:	2001      	movs	r0, #1
 8009352:	f000 fa77 	bl	8009844 <xQueueGenericCreate>
 8009356:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d022      	beq.n	80093a4 <osSemaphoreNew+0xe8>
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d01f      	beq.n	80093a4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009364:	2300      	movs	r3, #0
 8009366:	2200      	movs	r2, #0
 8009368:	2100      	movs	r1, #0
 800936a:	69f8      	ldr	r0, [r7, #28]
 800936c:	f000 fb32 	bl	80099d4 <xQueueGenericSend>
 8009370:	4603      	mov	r3, r0
 8009372:	2b01      	cmp	r3, #1
 8009374:	d016      	beq.n	80093a4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009376:	69f8      	ldr	r0, [r7, #28]
 8009378:	f000 ff3e 	bl	800a1f8 <vQueueDelete>
            hSemaphore = NULL;
 800937c:	2300      	movs	r3, #0
 800937e:	61fb      	str	r3, [r7, #28]
 8009380:	e010      	b.n	80093a4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d108      	bne.n	800939a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	461a      	mov	r2, r3
 800938e:	68b9      	ldr	r1, [r7, #8]
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f000 fab4 	bl	80098fe <xQueueCreateCountingSemaphoreStatic>
 8009396:	61f8      	str	r0, [r7, #28]
 8009398:	e004      	b.n	80093a4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800939a:	68b9      	ldr	r1, [r7, #8]
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f000 fae5 	bl	800996c <xQueueCreateCountingSemaphore>
 80093a2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00c      	beq.n	80093c4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d003      	beq.n	80093b8 <osSemaphoreNew+0xfc>
          name = attr->name;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	617b      	str	r3, [r7, #20]
 80093b6:	e001      	b.n	80093bc <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80093b8:	2300      	movs	r3, #0
 80093ba:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80093bc:	6979      	ldr	r1, [r7, #20]
 80093be:	69f8      	ldr	r0, [r7, #28]
 80093c0:	f001 f866 	bl	800a490 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80093c4:	69fb      	ldr	r3, [r7, #28]
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3720      	adds	r7, #32
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b08a      	sub	sp, #40	; 0x28
 80093d2:	af02      	add	r7, sp, #8
 80093d4:	60f8      	str	r0, [r7, #12]
 80093d6:	60b9      	str	r1, [r7, #8]
 80093d8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80093da:	2300      	movs	r3, #0
 80093dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093de:	f3ef 8305 	mrs	r3, IPSR
 80093e2:	613b      	str	r3, [r7, #16]
  return(result);
 80093e4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d15f      	bne.n	80094aa <osMessageQueueNew+0xdc>
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d05c      	beq.n	80094aa <osMessageQueueNew+0xdc>
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d059      	beq.n	80094aa <osMessageQueueNew+0xdc>
    mem = -1;
 80093f6:	f04f 33ff 	mov.w	r3, #4294967295
 80093fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d029      	beq.n	8009456 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d012      	beq.n	8009430 <osMessageQueueNew+0x62>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	2b4f      	cmp	r3, #79	; 0x4f
 8009410:	d90e      	bls.n	8009430 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00a      	beq.n	8009430 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	695a      	ldr	r2, [r3, #20]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	68b9      	ldr	r1, [r7, #8]
 8009422:	fb01 f303 	mul.w	r3, r1, r3
 8009426:	429a      	cmp	r2, r3
 8009428:	d302      	bcc.n	8009430 <osMessageQueueNew+0x62>
        mem = 1;
 800942a:	2301      	movs	r3, #1
 800942c:	61bb      	str	r3, [r7, #24]
 800942e:	e014      	b.n	800945a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d110      	bne.n	800945a <osMessageQueueNew+0x8c>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d10c      	bne.n	800945a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009444:	2b00      	cmp	r3, #0
 8009446:	d108      	bne.n	800945a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	695b      	ldr	r3, [r3, #20]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d104      	bne.n	800945a <osMessageQueueNew+0x8c>
          mem = 0;
 8009450:	2300      	movs	r3, #0
 8009452:	61bb      	str	r3, [r7, #24]
 8009454:	e001      	b.n	800945a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009456:	2300      	movs	r3, #0
 8009458:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d10b      	bne.n	8009478 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	691a      	ldr	r2, [r3, #16]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	2100      	movs	r1, #0
 800946a:	9100      	str	r1, [sp, #0]
 800946c:	68b9      	ldr	r1, [r7, #8]
 800946e:	68f8      	ldr	r0, [r7, #12]
 8009470:	f000 f970 	bl	8009754 <xQueueGenericCreateStatic>
 8009474:	61f8      	str	r0, [r7, #28]
 8009476:	e008      	b.n	800948a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d105      	bne.n	800948a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800947e:	2200      	movs	r2, #0
 8009480:	68b9      	ldr	r1, [r7, #8]
 8009482:	68f8      	ldr	r0, [r7, #12]
 8009484:	f000 f9de 	bl	8009844 <xQueueGenericCreate>
 8009488:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00c      	beq.n	80094aa <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d003      	beq.n	800949e <osMessageQueueNew+0xd0>
        name = attr->name;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	617b      	str	r3, [r7, #20]
 800949c:	e001      	b.n	80094a2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800949e:	2300      	movs	r3, #0
 80094a0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80094a2:	6979      	ldr	r1, [r7, #20]
 80094a4:	69f8      	ldr	r0, [r7, #28]
 80094a6:	f000 fff3 	bl	800a490 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80094aa:	69fb      	ldr	r3, [r7, #28]
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3720      	adds	r7, #32
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80094b4:	b480      	push	{r7}
 80094b6:	b085      	sub	sp, #20
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	4a07      	ldr	r2, [pc, #28]	; (80094e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80094c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	4a06      	ldr	r2, [pc, #24]	; (80094e4 <vApplicationGetIdleTaskMemory+0x30>)
 80094ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2280      	movs	r2, #128	; 0x80
 80094d0:	601a      	str	r2, [r3, #0]
}
 80094d2:	bf00      	nop
 80094d4:	3714      	adds	r7, #20
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	200011dc 	.word	0x200011dc
 80094e4:	20001298 	.word	0x20001298

080094e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	60b9      	str	r1, [r7, #8]
 80094f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	4a07      	ldr	r2, [pc, #28]	; (8009514 <vApplicationGetTimerTaskMemory+0x2c>)
 80094f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	4a06      	ldr	r2, [pc, #24]	; (8009518 <vApplicationGetTimerTaskMemory+0x30>)
 80094fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009506:	601a      	str	r2, [r3, #0]
}
 8009508:	bf00      	nop
 800950a:	3714      	adds	r7, #20
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr
 8009514:	20001498 	.word	0x20001498
 8009518:	20001554 	.word	0x20001554

0800951c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f103 0208 	add.w	r2, r3, #8
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f04f 32ff 	mov.w	r2, #4294967295
 8009534:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f103 0208 	add.w	r2, r3, #8
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f103 0208 	add.w	r2, r3, #8
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800956a:	bf00      	nop
 800956c:	370c      	adds	r7, #12
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr

08009576 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009576:	b480      	push	{r7}
 8009578:	b085      	sub	sp, #20
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
 800957e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	689a      	ldr	r2, [r3, #8]
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	683a      	ldr	r2, [r7, #0]
 800959a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	683a      	ldr	r2, [r7, #0]
 80095a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	1c5a      	adds	r2, r3, #1
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	601a      	str	r2, [r3, #0]
}
 80095b2:	bf00      	nop
 80095b4:	3714      	adds	r7, #20
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr

080095be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80095be:	b480      	push	{r7}
 80095c0:	b085      	sub	sp, #20
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
 80095c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d4:	d103      	bne.n	80095de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	60fb      	str	r3, [r7, #12]
 80095dc:	e00c      	b.n	80095f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	3308      	adds	r3, #8
 80095e2:	60fb      	str	r3, [r7, #12]
 80095e4:	e002      	b.n	80095ec <vListInsert+0x2e>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	60fb      	str	r3, [r7, #12]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d2f6      	bcs.n	80095e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	685a      	ldr	r2, [r3, #4]
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	683a      	ldr	r2, [r7, #0]
 8009606:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	683a      	ldr	r2, [r7, #0]
 8009612:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	1c5a      	adds	r2, r3, #1
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	601a      	str	r2, [r3, #0]
}
 8009624:	bf00      	nop
 8009626:	3714      	adds	r7, #20
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009630:	b480      	push	{r7}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	6892      	ldr	r2, [r2, #8]
 8009646:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	6852      	ldr	r2, [r2, #4]
 8009650:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	429a      	cmp	r2, r3
 800965a:	d103      	bne.n	8009664 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	689a      	ldr	r2, [r3, #8]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	1e5a      	subs	r2, r3, #1
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
}
 8009678:	4618      	mov	r0, r3
 800967a:	3714      	adds	r7, #20
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d10a      	bne.n	80096ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969c:	f383 8811 	msr	BASEPRI, r3
 80096a0:	f3bf 8f6f 	isb	sy
 80096a4:	f3bf 8f4f 	dsb	sy
 80096a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80096aa:	bf00      	nop
 80096ac:	e7fe      	b.n	80096ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80096ae:	f002 fc19 	bl	800bee4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ba:	68f9      	ldr	r1, [r7, #12]
 80096bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80096be:	fb01 f303 	mul.w	r3, r1, r3
 80096c2:	441a      	add	r2, r3
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2200      	movs	r2, #0
 80096cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096de:	3b01      	subs	r3, #1
 80096e0:	68f9      	ldr	r1, [r7, #12]
 80096e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80096e4:	fb01 f303 	mul.w	r3, r1, r3
 80096e8:	441a      	add	r2, r3
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	22ff      	movs	r2, #255	; 0xff
 80096f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	22ff      	movs	r2, #255	; 0xff
 80096fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d114      	bne.n	800972e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	691b      	ldr	r3, [r3, #16]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d01a      	beq.n	8009742 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	3310      	adds	r3, #16
 8009710:	4618      	mov	r0, r3
 8009712:	f001 fbcb 	bl	800aeac <xTaskRemoveFromEventList>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d012      	beq.n	8009742 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800971c:	4b0c      	ldr	r3, [pc, #48]	; (8009750 <xQueueGenericReset+0xcc>)
 800971e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009722:	601a      	str	r2, [r3, #0]
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	e009      	b.n	8009742 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	3310      	adds	r3, #16
 8009732:	4618      	mov	r0, r3
 8009734:	f7ff fef2 	bl	800951c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	3324      	adds	r3, #36	; 0x24
 800973c:	4618      	mov	r0, r3
 800973e:	f7ff feed 	bl	800951c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009742:	f002 fbff 	bl	800bf44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009746:	2301      	movs	r3, #1
}
 8009748:	4618      	mov	r0, r3
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	e000ed04 	.word	0xe000ed04

08009754 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009754:	b580      	push	{r7, lr}
 8009756:	b08e      	sub	sp, #56	; 0x38
 8009758:	af02      	add	r7, sp, #8
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
 8009760:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d10a      	bne.n	800977e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976c:	f383 8811 	msr	BASEPRI, r3
 8009770:	f3bf 8f6f 	isb	sy
 8009774:	f3bf 8f4f 	dsb	sy
 8009778:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800977a:	bf00      	nop
 800977c:	e7fe      	b.n	800977c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d10a      	bne.n	800979a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009788:	f383 8811 	msr	BASEPRI, r3
 800978c:	f3bf 8f6f 	isb	sy
 8009790:	f3bf 8f4f 	dsb	sy
 8009794:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009796:	bf00      	nop
 8009798:	e7fe      	b.n	8009798 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d002      	beq.n	80097a6 <xQueueGenericCreateStatic+0x52>
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d001      	beq.n	80097aa <xQueueGenericCreateStatic+0x56>
 80097a6:	2301      	movs	r3, #1
 80097a8:	e000      	b.n	80097ac <xQueueGenericCreateStatic+0x58>
 80097aa:	2300      	movs	r3, #0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d10a      	bne.n	80097c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80097b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b4:	f383 8811 	msr	BASEPRI, r3
 80097b8:	f3bf 8f6f 	isb	sy
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	623b      	str	r3, [r7, #32]
}
 80097c2:	bf00      	nop
 80097c4:	e7fe      	b.n	80097c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d102      	bne.n	80097d2 <xQueueGenericCreateStatic+0x7e>
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d101      	bne.n	80097d6 <xQueueGenericCreateStatic+0x82>
 80097d2:	2301      	movs	r3, #1
 80097d4:	e000      	b.n	80097d8 <xQueueGenericCreateStatic+0x84>
 80097d6:	2300      	movs	r3, #0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d10a      	bne.n	80097f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80097dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e0:	f383 8811 	msr	BASEPRI, r3
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	61fb      	str	r3, [r7, #28]
}
 80097ee:	bf00      	nop
 80097f0:	e7fe      	b.n	80097f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80097f2:	2350      	movs	r3, #80	; 0x50
 80097f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	2b50      	cmp	r3, #80	; 0x50
 80097fa:	d00a      	beq.n	8009812 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80097fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009800:	f383 8811 	msr	BASEPRI, r3
 8009804:	f3bf 8f6f 	isb	sy
 8009808:	f3bf 8f4f 	dsb	sy
 800980c:	61bb      	str	r3, [r7, #24]
}
 800980e:	bf00      	nop
 8009810:	e7fe      	b.n	8009810 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009812:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00d      	beq.n	800983a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800981e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009820:	2201      	movs	r2, #1
 8009822:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009826:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800982a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982c:	9300      	str	r3, [sp, #0]
 800982e:	4613      	mov	r3, r2
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	68b9      	ldr	r1, [r7, #8]
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f000 f83f 	bl	80098b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800983a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800983c:	4618      	mov	r0, r3
 800983e:	3730      	adds	r7, #48	; 0x30
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009844:	b580      	push	{r7, lr}
 8009846:	b08a      	sub	sp, #40	; 0x28
 8009848:	af02      	add	r7, sp, #8
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	4613      	mov	r3, r2
 8009850:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d10a      	bne.n	800986e <xQueueGenericCreate+0x2a>
	__asm volatile
 8009858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985c:	f383 8811 	msr	BASEPRI, r3
 8009860:	f3bf 8f6f 	isb	sy
 8009864:	f3bf 8f4f 	dsb	sy
 8009868:	613b      	str	r3, [r7, #16]
}
 800986a:	bf00      	nop
 800986c:	e7fe      	b.n	800986c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	68ba      	ldr	r2, [r7, #8]
 8009872:	fb02 f303 	mul.w	r3, r2, r3
 8009876:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	3350      	adds	r3, #80	; 0x50
 800987c:	4618      	mov	r0, r3
 800987e:	f002 fc53 	bl	800c128 <pvPortMalloc>
 8009882:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d011      	beq.n	80098ae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	3350      	adds	r3, #80	; 0x50
 8009892:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	2200      	movs	r2, #0
 8009898:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800989c:	79fa      	ldrb	r2, [r7, #7]
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	9300      	str	r3, [sp, #0]
 80098a2:	4613      	mov	r3, r2
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	68b9      	ldr	r1, [r7, #8]
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f000 f805 	bl	80098b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80098ae:	69bb      	ldr	r3, [r7, #24]
	}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3720      	adds	r7, #32
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	607a      	str	r2, [r7, #4]
 80098c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d103      	bne.n	80098d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80098cc:	69bb      	ldr	r3, [r7, #24]
 80098ce:	69ba      	ldr	r2, [r7, #24]
 80098d0:	601a      	str	r2, [r3, #0]
 80098d2:	e002      	b.n	80098da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	68ba      	ldr	r2, [r7, #8]
 80098e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80098e6:	2101      	movs	r1, #1
 80098e8:	69b8      	ldr	r0, [r7, #24]
 80098ea:	f7ff fecb 	bl	8009684 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	78fa      	ldrb	r2, [r7, #3]
 80098f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80098f6:	bf00      	nop
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80098fe:	b580      	push	{r7, lr}
 8009900:	b08a      	sub	sp, #40	; 0x28
 8009902:	af02      	add	r7, sp, #8
 8009904:	60f8      	str	r0, [r7, #12]
 8009906:	60b9      	str	r1, [r7, #8]
 8009908:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d10a      	bne.n	8009926 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009914:	f383 8811 	msr	BASEPRI, r3
 8009918:	f3bf 8f6f 	isb	sy
 800991c:	f3bf 8f4f 	dsb	sy
 8009920:	61bb      	str	r3, [r7, #24]
}
 8009922:	bf00      	nop
 8009924:	e7fe      	b.n	8009924 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009926:	68ba      	ldr	r2, [r7, #8]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	429a      	cmp	r2, r3
 800992c:	d90a      	bls.n	8009944 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800992e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009932:	f383 8811 	msr	BASEPRI, r3
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	f3bf 8f4f 	dsb	sy
 800993e:	617b      	str	r3, [r7, #20]
}
 8009940:	bf00      	nop
 8009942:	e7fe      	b.n	8009942 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009944:	2302      	movs	r3, #2
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	2100      	movs	r1, #0
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f7ff ff00 	bl	8009754 <xQueueGenericCreateStatic>
 8009954:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d002      	beq.n	8009962 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009962:	69fb      	ldr	r3, [r7, #28]
	}
 8009964:	4618      	mov	r0, r3
 8009966:	3720      	adds	r7, #32
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800996c:	b580      	push	{r7, lr}
 800996e:	b086      	sub	sp, #24
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10a      	bne.n	8009992 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	613b      	str	r3, [r7, #16]
}
 800998e:	bf00      	nop
 8009990:	e7fe      	b.n	8009990 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	429a      	cmp	r2, r3
 8009998:	d90a      	bls.n	80099b0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800999a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999e:	f383 8811 	msr	BASEPRI, r3
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	f3bf 8f4f 	dsb	sy
 80099aa:	60fb      	str	r3, [r7, #12]
}
 80099ac:	bf00      	nop
 80099ae:	e7fe      	b.n	80099ae <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80099b0:	2202      	movs	r2, #2
 80099b2:	2100      	movs	r1, #0
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f7ff ff45 	bl	8009844 <xQueueGenericCreate>
 80099ba:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d002      	beq.n	80099c8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	683a      	ldr	r2, [r7, #0]
 80099c6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80099c8:	697b      	ldr	r3, [r7, #20]
	}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3718      	adds	r7, #24
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
	...

080099d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b08e      	sub	sp, #56	; 0x38
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]
 80099e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80099e2:	2300      	movs	r3, #0
 80099e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80099ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d10a      	bne.n	8009a06 <xQueueGenericSend+0x32>
	__asm volatile
 80099f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f4:	f383 8811 	msr	BASEPRI, r3
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a02:	bf00      	nop
 8009a04:	e7fe      	b.n	8009a04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d103      	bne.n	8009a14 <xQueueGenericSend+0x40>
 8009a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d101      	bne.n	8009a18 <xQueueGenericSend+0x44>
 8009a14:	2301      	movs	r3, #1
 8009a16:	e000      	b.n	8009a1a <xQueueGenericSend+0x46>
 8009a18:	2300      	movs	r3, #0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d10a      	bne.n	8009a34 <xQueueGenericSend+0x60>
	__asm volatile
 8009a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a30:	bf00      	nop
 8009a32:	e7fe      	b.n	8009a32 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	2b02      	cmp	r3, #2
 8009a38:	d103      	bne.n	8009a42 <xQueueGenericSend+0x6e>
 8009a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d101      	bne.n	8009a46 <xQueueGenericSend+0x72>
 8009a42:	2301      	movs	r3, #1
 8009a44:	e000      	b.n	8009a48 <xQueueGenericSend+0x74>
 8009a46:	2300      	movs	r3, #0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d10a      	bne.n	8009a62 <xQueueGenericSend+0x8e>
	__asm volatile
 8009a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a50:	f383 8811 	msr	BASEPRI, r3
 8009a54:	f3bf 8f6f 	isb	sy
 8009a58:	f3bf 8f4f 	dsb	sy
 8009a5c:	623b      	str	r3, [r7, #32]
}
 8009a5e:	bf00      	nop
 8009a60:	e7fe      	b.n	8009a60 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a62:	f001 fbe5 	bl	800b230 <xTaskGetSchedulerState>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d102      	bne.n	8009a72 <xQueueGenericSend+0x9e>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d101      	bne.n	8009a76 <xQueueGenericSend+0xa2>
 8009a72:	2301      	movs	r3, #1
 8009a74:	e000      	b.n	8009a78 <xQueueGenericSend+0xa4>
 8009a76:	2300      	movs	r3, #0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d10a      	bne.n	8009a92 <xQueueGenericSend+0xbe>
	__asm volatile
 8009a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a80:	f383 8811 	msr	BASEPRI, r3
 8009a84:	f3bf 8f6f 	isb	sy
 8009a88:	f3bf 8f4f 	dsb	sy
 8009a8c:	61fb      	str	r3, [r7, #28]
}
 8009a8e:	bf00      	nop
 8009a90:	e7fe      	b.n	8009a90 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a92:	f002 fa27 	bl	800bee4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d302      	bcc.n	8009aa8 <xQueueGenericSend+0xd4>
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	2b02      	cmp	r3, #2
 8009aa6:	d129      	bne.n	8009afc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009aa8:	683a      	ldr	r2, [r7, #0]
 8009aaa:	68b9      	ldr	r1, [r7, #8]
 8009aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009aae:	f000 fbde 	bl	800a26e <prvCopyDataToQueue>
 8009ab2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d010      	beq.n	8009ade <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009abe:	3324      	adds	r3, #36	; 0x24
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f001 f9f3 	bl	800aeac <xTaskRemoveFromEventList>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d013      	beq.n	8009af4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009acc:	4b3f      	ldr	r3, [pc, #252]	; (8009bcc <xQueueGenericSend+0x1f8>)
 8009ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ad2:	601a      	str	r2, [r3, #0]
 8009ad4:	f3bf 8f4f 	dsb	sy
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	e00a      	b.n	8009af4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d007      	beq.n	8009af4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ae4:	4b39      	ldr	r3, [pc, #228]	; (8009bcc <xQueueGenericSend+0x1f8>)
 8009ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aea:	601a      	str	r2, [r3, #0]
 8009aec:	f3bf 8f4f 	dsb	sy
 8009af0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009af4:	f002 fa26 	bl	800bf44 <vPortExitCritical>
				return pdPASS;
 8009af8:	2301      	movs	r3, #1
 8009afa:	e063      	b.n	8009bc4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d103      	bne.n	8009b0a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b02:	f002 fa1f 	bl	800bf44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009b06:	2300      	movs	r3, #0
 8009b08:	e05c      	b.n	8009bc4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d106      	bne.n	8009b1e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b10:	f107 0314 	add.w	r3, r7, #20
 8009b14:	4618      	mov	r0, r3
 8009b16:	f001 fa2d 	bl	800af74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b1e:	f002 fa11 	bl	800bf44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b22:	f000 ff99 	bl	800aa58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b26:	f002 f9dd 	bl	800bee4 <vPortEnterCritical>
 8009b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b30:	b25b      	sxtb	r3, r3
 8009b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b36:	d103      	bne.n	8009b40 <xQueueGenericSend+0x16c>
 8009b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b46:	b25b      	sxtb	r3, r3
 8009b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b4c:	d103      	bne.n	8009b56 <xQueueGenericSend+0x182>
 8009b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b56:	f002 f9f5 	bl	800bf44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b5a:	1d3a      	adds	r2, r7, #4
 8009b5c:	f107 0314 	add.w	r3, r7, #20
 8009b60:	4611      	mov	r1, r2
 8009b62:	4618      	mov	r0, r3
 8009b64:	f001 fa1c 	bl	800afa0 <xTaskCheckForTimeOut>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d124      	bne.n	8009bb8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009b6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b70:	f000 fc75 	bl	800a45e <prvIsQueueFull>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d018      	beq.n	8009bac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7c:	3310      	adds	r3, #16
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	4611      	mov	r1, r2
 8009b82:	4618      	mov	r0, r3
 8009b84:	f001 f942 	bl	800ae0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009b88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b8a:	f000 fc00 	bl	800a38e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009b8e:	f000 ff71 	bl	800aa74 <xTaskResumeAll>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f47f af7c 	bne.w	8009a92 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009b9a:	4b0c      	ldr	r3, [pc, #48]	; (8009bcc <xQueueGenericSend+0x1f8>)
 8009b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	f3bf 8f4f 	dsb	sy
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	e772      	b.n	8009a92 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bae:	f000 fbee 	bl	800a38e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009bb2:	f000 ff5f 	bl	800aa74 <xTaskResumeAll>
 8009bb6:	e76c      	b.n	8009a92 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009bb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bba:	f000 fbe8 	bl	800a38e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009bbe:	f000 ff59 	bl	800aa74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009bc2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3738      	adds	r7, #56	; 0x38
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	e000ed04 	.word	0xe000ed04

08009bd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b090      	sub	sp, #64	; 0x40
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	607a      	str	r2, [r7, #4]
 8009bdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d10a      	bne.n	8009bfe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bec:	f383 8811 	msr	BASEPRI, r3
 8009bf0:	f3bf 8f6f 	isb	sy
 8009bf4:	f3bf 8f4f 	dsb	sy
 8009bf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009bfa:	bf00      	nop
 8009bfc:	e7fe      	b.n	8009bfc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d103      	bne.n	8009c0c <xQueueGenericSendFromISR+0x3c>
 8009c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d101      	bne.n	8009c10 <xQueueGenericSendFromISR+0x40>
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e000      	b.n	8009c12 <xQueueGenericSendFromISR+0x42>
 8009c10:	2300      	movs	r3, #0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d10a      	bne.n	8009c2c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c28:	bf00      	nop
 8009c2a:	e7fe      	b.n	8009c2a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	d103      	bne.n	8009c3a <xQueueGenericSendFromISR+0x6a>
 8009c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d101      	bne.n	8009c3e <xQueueGenericSendFromISR+0x6e>
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e000      	b.n	8009c40 <xQueueGenericSendFromISR+0x70>
 8009c3e:	2300      	movs	r3, #0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d10a      	bne.n	8009c5a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c48:	f383 8811 	msr	BASEPRI, r3
 8009c4c:	f3bf 8f6f 	isb	sy
 8009c50:	f3bf 8f4f 	dsb	sy
 8009c54:	623b      	str	r3, [r7, #32]
}
 8009c56:	bf00      	nop
 8009c58:	e7fe      	b.n	8009c58 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c5a:	f002 fa25 	bl	800c0a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009c5e:	f3ef 8211 	mrs	r2, BASEPRI
 8009c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c66:	f383 8811 	msr	BASEPRI, r3
 8009c6a:	f3bf 8f6f 	isb	sy
 8009c6e:	f3bf 8f4f 	dsb	sy
 8009c72:	61fa      	str	r2, [r7, #28]
 8009c74:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009c76:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c78:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d302      	bcc.n	8009c8c <xQueueGenericSendFromISR+0xbc>
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	2b02      	cmp	r3, #2
 8009c8a:	d12f      	bne.n	8009cec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c9c:	683a      	ldr	r2, [r7, #0]
 8009c9e:	68b9      	ldr	r1, [r7, #8]
 8009ca0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ca2:	f000 fae4 	bl	800a26e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009ca6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cae:	d112      	bne.n	8009cd6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d016      	beq.n	8009ce6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cba:	3324      	adds	r3, #36	; 0x24
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f001 f8f5 	bl	800aeac <xTaskRemoveFromEventList>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d00e      	beq.n	8009ce6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d00b      	beq.n	8009ce6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	601a      	str	r2, [r3, #0]
 8009cd4:	e007      	b.n	8009ce6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009cd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009cda:	3301      	adds	r3, #1
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	b25a      	sxtb	r2, r3
 8009ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009cea:	e001      	b.n	8009cf0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009cec:	2300      	movs	r3, #0
 8009cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cf2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009cfa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3740      	adds	r7, #64	; 0x40
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b08e      	sub	sp, #56	; 0x38
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
 8009d0e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d10a      	bne.n	8009d30 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1e:	f383 8811 	msr	BASEPRI, r3
 8009d22:	f3bf 8f6f 	isb	sy
 8009d26:	f3bf 8f4f 	dsb	sy
 8009d2a:	623b      	str	r3, [r7, #32]
}
 8009d2c:	bf00      	nop
 8009d2e:	e7fe      	b.n	8009d2e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00a      	beq.n	8009d4e <xQueueGiveFromISR+0x48>
	__asm volatile
 8009d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3c:	f383 8811 	msr	BASEPRI, r3
 8009d40:	f3bf 8f6f 	isb	sy
 8009d44:	f3bf 8f4f 	dsb	sy
 8009d48:	61fb      	str	r3, [r7, #28]
}
 8009d4a:	bf00      	nop
 8009d4c:	e7fe      	b.n	8009d4c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d103      	bne.n	8009d5e <xQueueGiveFromISR+0x58>
 8009d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d101      	bne.n	8009d62 <xQueueGiveFromISR+0x5c>
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e000      	b.n	8009d64 <xQueueGiveFromISR+0x5e>
 8009d62:	2300      	movs	r3, #0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d10a      	bne.n	8009d7e <xQueueGiveFromISR+0x78>
	__asm volatile
 8009d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6c:	f383 8811 	msr	BASEPRI, r3
 8009d70:	f3bf 8f6f 	isb	sy
 8009d74:	f3bf 8f4f 	dsb	sy
 8009d78:	61bb      	str	r3, [r7, #24]
}
 8009d7a:	bf00      	nop
 8009d7c:	e7fe      	b.n	8009d7c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d7e:	f002 f993 	bl	800c0a8 <vPortValidateInterruptPriority>
	__asm volatile
 8009d82:	f3ef 8211 	mrs	r2, BASEPRI
 8009d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8a:	f383 8811 	msr	BASEPRI, r3
 8009d8e:	f3bf 8f6f 	isb	sy
 8009d92:	f3bf 8f4f 	dsb	sy
 8009d96:	617a      	str	r2, [r7, #20]
 8009d98:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009d9a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009da8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d22b      	bcs.n	8009e06 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dba:	1c5a      	adds	r2, r3, #1
 8009dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dbe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009dc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc8:	d112      	bne.n	8009df0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d016      	beq.n	8009e00 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd4:	3324      	adds	r3, #36	; 0x24
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f001 f868 	bl	800aeac <xTaskRemoveFromEventList>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00e      	beq.n	8009e00 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d00b      	beq.n	8009e00 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	2201      	movs	r2, #1
 8009dec:	601a      	str	r2, [r3, #0]
 8009dee:	e007      	b.n	8009e00 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009df4:	3301      	adds	r3, #1
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	b25a      	sxtb	r2, r3
 8009dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009e00:	2301      	movs	r3, #1
 8009e02:	637b      	str	r3, [r7, #52]	; 0x34
 8009e04:	e001      	b.n	8009e0a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009e06:	2300      	movs	r3, #0
 8009e08:	637b      	str	r3, [r7, #52]	; 0x34
 8009e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f383 8811 	msr	BASEPRI, r3
}
 8009e14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3738      	adds	r7, #56	; 0x38
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b08c      	sub	sp, #48	; 0x30
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d10a      	bne.n	8009e50 <xQueueReceive+0x30>
	__asm volatile
 8009e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3e:	f383 8811 	msr	BASEPRI, r3
 8009e42:	f3bf 8f6f 	isb	sy
 8009e46:	f3bf 8f4f 	dsb	sy
 8009e4a:	623b      	str	r3, [r7, #32]
}
 8009e4c:	bf00      	nop
 8009e4e:	e7fe      	b.n	8009e4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d103      	bne.n	8009e5e <xQueueReceive+0x3e>
 8009e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d101      	bne.n	8009e62 <xQueueReceive+0x42>
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e000      	b.n	8009e64 <xQueueReceive+0x44>
 8009e62:	2300      	movs	r3, #0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10a      	bne.n	8009e7e <xQueueReceive+0x5e>
	__asm volatile
 8009e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6c:	f383 8811 	msr	BASEPRI, r3
 8009e70:	f3bf 8f6f 	isb	sy
 8009e74:	f3bf 8f4f 	dsb	sy
 8009e78:	61fb      	str	r3, [r7, #28]
}
 8009e7a:	bf00      	nop
 8009e7c:	e7fe      	b.n	8009e7c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e7e:	f001 f9d7 	bl	800b230 <xTaskGetSchedulerState>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d102      	bne.n	8009e8e <xQueueReceive+0x6e>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d101      	bne.n	8009e92 <xQueueReceive+0x72>
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e000      	b.n	8009e94 <xQueueReceive+0x74>
 8009e92:	2300      	movs	r3, #0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d10a      	bne.n	8009eae <xQueueReceive+0x8e>
	__asm volatile
 8009e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	61bb      	str	r3, [r7, #24]
}
 8009eaa:	bf00      	nop
 8009eac:	e7fe      	b.n	8009eac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009eae:	f002 f819 	bl	800bee4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d01f      	beq.n	8009efe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009ebe:	68b9      	ldr	r1, [r7, #8]
 8009ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ec2:	f000 fa3e 	bl	800a342 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec8:	1e5a      	subs	r2, r3, #1
 8009eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ecc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00f      	beq.n	8009ef6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed8:	3310      	adds	r3, #16
 8009eda:	4618      	mov	r0, r3
 8009edc:	f000 ffe6 	bl	800aeac <xTaskRemoveFromEventList>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d007      	beq.n	8009ef6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009ee6:	4b3d      	ldr	r3, [pc, #244]	; (8009fdc <xQueueReceive+0x1bc>)
 8009ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eec:	601a      	str	r2, [r3, #0]
 8009eee:	f3bf 8f4f 	dsb	sy
 8009ef2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009ef6:	f002 f825 	bl	800bf44 <vPortExitCritical>
				return pdPASS;
 8009efa:	2301      	movs	r3, #1
 8009efc:	e069      	b.n	8009fd2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d103      	bne.n	8009f0c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f04:	f002 f81e 	bl	800bf44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	e062      	b.n	8009fd2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d106      	bne.n	8009f20 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f12:	f107 0310 	add.w	r3, r7, #16
 8009f16:	4618      	mov	r0, r3
 8009f18:	f001 f82c 	bl	800af74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f20:	f002 f810 	bl	800bf44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f24:	f000 fd98 	bl	800aa58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f28:	f001 ffdc 	bl	800bee4 <vPortEnterCritical>
 8009f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f32:	b25b      	sxtb	r3, r3
 8009f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f38:	d103      	bne.n	8009f42 <xQueueReceive+0x122>
 8009f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f48:	b25b      	sxtb	r3, r3
 8009f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f4e:	d103      	bne.n	8009f58 <xQueueReceive+0x138>
 8009f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f52:	2200      	movs	r2, #0
 8009f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f58:	f001 fff4 	bl	800bf44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f5c:	1d3a      	adds	r2, r7, #4
 8009f5e:	f107 0310 	add.w	r3, r7, #16
 8009f62:	4611      	mov	r1, r2
 8009f64:	4618      	mov	r0, r3
 8009f66:	f001 f81b 	bl	800afa0 <xTaskCheckForTimeOut>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d123      	bne.n	8009fb8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f72:	f000 fa5e 	bl	800a432 <prvIsQueueEmpty>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d017      	beq.n	8009fac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7e:	3324      	adds	r3, #36	; 0x24
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	4611      	mov	r1, r2
 8009f84:	4618      	mov	r0, r3
 8009f86:	f000 ff41 	bl	800ae0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f8c:	f000 f9ff 	bl	800a38e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009f90:	f000 fd70 	bl	800aa74 <xTaskResumeAll>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d189      	bne.n	8009eae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009f9a:	4b10      	ldr	r3, [pc, #64]	; (8009fdc <xQueueReceive+0x1bc>)
 8009f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fa0:	601a      	str	r2, [r3, #0]
 8009fa2:	f3bf 8f4f 	dsb	sy
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	e780      	b.n	8009eae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fae:	f000 f9ee 	bl	800a38e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fb2:	f000 fd5f 	bl	800aa74 <xTaskResumeAll>
 8009fb6:	e77a      	b.n	8009eae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fba:	f000 f9e8 	bl	800a38e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fbe:	f000 fd59 	bl	800aa74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009fc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fc4:	f000 fa35 	bl	800a432 <prvIsQueueEmpty>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f43f af6f 	beq.w	8009eae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009fd0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3730      	adds	r7, #48	; 0x30
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	e000ed04 	.word	0xe000ed04

08009fe0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b08e      	sub	sp, #56	; 0x38
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009fea:	2300      	movs	r3, #0
 8009fec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d10a      	bne.n	800a012 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a000:	f383 8811 	msr	BASEPRI, r3
 800a004:	f3bf 8f6f 	isb	sy
 800a008:	f3bf 8f4f 	dsb	sy
 800a00c:	623b      	str	r3, [r7, #32]
}
 800a00e:	bf00      	nop
 800a010:	e7fe      	b.n	800a010 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a016:	2b00      	cmp	r3, #0
 800a018:	d00a      	beq.n	800a030 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01e:	f383 8811 	msr	BASEPRI, r3
 800a022:	f3bf 8f6f 	isb	sy
 800a026:	f3bf 8f4f 	dsb	sy
 800a02a:	61fb      	str	r3, [r7, #28]
}
 800a02c:	bf00      	nop
 800a02e:	e7fe      	b.n	800a02e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a030:	f001 f8fe 	bl	800b230 <xTaskGetSchedulerState>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d102      	bne.n	800a040 <xQueueSemaphoreTake+0x60>
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d101      	bne.n	800a044 <xQueueSemaphoreTake+0x64>
 800a040:	2301      	movs	r3, #1
 800a042:	e000      	b.n	800a046 <xQueueSemaphoreTake+0x66>
 800a044:	2300      	movs	r3, #0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d10a      	bne.n	800a060 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04e:	f383 8811 	msr	BASEPRI, r3
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	61bb      	str	r3, [r7, #24]
}
 800a05c:	bf00      	nop
 800a05e:	e7fe      	b.n	800a05e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a060:	f001 ff40 	bl	800bee4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a068:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d024      	beq.n	800a0ba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a072:	1e5a      	subs	r2, r3, #1
 800a074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a076:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d104      	bne.n	800a08a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a080:	f001 fa4c 	bl	800b51c <pvTaskIncrementMutexHeldCount>
 800a084:	4602      	mov	r2, r0
 800a086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a088:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00f      	beq.n	800a0b2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a094:	3310      	adds	r3, #16
 800a096:	4618      	mov	r0, r3
 800a098:	f000 ff08 	bl	800aeac <xTaskRemoveFromEventList>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d007      	beq.n	800a0b2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a0a2:	4b54      	ldr	r3, [pc, #336]	; (800a1f4 <xQueueSemaphoreTake+0x214>)
 800a0a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0a8:	601a      	str	r2, [r3, #0]
 800a0aa:	f3bf 8f4f 	dsb	sy
 800a0ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a0b2:	f001 ff47 	bl	800bf44 <vPortExitCritical>
				return pdPASS;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e097      	b.n	800a1ea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d111      	bne.n	800a0e4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d00a      	beq.n	800a0dc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ca:	f383 8811 	msr	BASEPRI, r3
 800a0ce:	f3bf 8f6f 	isb	sy
 800a0d2:	f3bf 8f4f 	dsb	sy
 800a0d6:	617b      	str	r3, [r7, #20]
}
 800a0d8:	bf00      	nop
 800a0da:	e7fe      	b.n	800a0da <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a0dc:	f001 ff32 	bl	800bf44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	e082      	b.n	800a1ea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d106      	bne.n	800a0f8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0ea:	f107 030c 	add.w	r3, r7, #12
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f000 ff40 	bl	800af74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0f8:	f001 ff24 	bl	800bf44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0fc:	f000 fcac 	bl	800aa58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a100:	f001 fef0 	bl	800bee4 <vPortEnterCritical>
 800a104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a106:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a10a:	b25b      	sxtb	r3, r3
 800a10c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a110:	d103      	bne.n	800a11a <xQueueSemaphoreTake+0x13a>
 800a112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a114:	2200      	movs	r2, #0
 800a116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a120:	b25b      	sxtb	r3, r3
 800a122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a126:	d103      	bne.n	800a130 <xQueueSemaphoreTake+0x150>
 800a128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a12a:	2200      	movs	r2, #0
 800a12c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a130:	f001 ff08 	bl	800bf44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a134:	463a      	mov	r2, r7
 800a136:	f107 030c 	add.w	r3, r7, #12
 800a13a:	4611      	mov	r1, r2
 800a13c:	4618      	mov	r0, r3
 800a13e:	f000 ff2f 	bl	800afa0 <xTaskCheckForTimeOut>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d132      	bne.n	800a1ae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a148:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a14a:	f000 f972 	bl	800a432 <prvIsQueueEmpty>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d026      	beq.n	800a1a2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d109      	bne.n	800a170 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a15c:	f001 fec2 	bl	800bee4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	4618      	mov	r0, r3
 800a166:	f001 f881 	bl	800b26c <xTaskPriorityInherit>
 800a16a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a16c:	f001 feea 	bl	800bf44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a172:	3324      	adds	r3, #36	; 0x24
 800a174:	683a      	ldr	r2, [r7, #0]
 800a176:	4611      	mov	r1, r2
 800a178:	4618      	mov	r0, r3
 800a17a:	f000 fe47 	bl	800ae0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a17e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a180:	f000 f905 	bl	800a38e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a184:	f000 fc76 	bl	800aa74 <xTaskResumeAll>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	f47f af68 	bne.w	800a060 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a190:	4b18      	ldr	r3, [pc, #96]	; (800a1f4 <xQueueSemaphoreTake+0x214>)
 800a192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a196:	601a      	str	r2, [r3, #0]
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	f3bf 8f6f 	isb	sy
 800a1a0:	e75e      	b.n	800a060 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a1a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1a4:	f000 f8f3 	bl	800a38e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1a8:	f000 fc64 	bl	800aa74 <xTaskResumeAll>
 800a1ac:	e758      	b.n	800a060 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a1ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1b0:	f000 f8ed 	bl	800a38e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1b4:	f000 fc5e 	bl	800aa74 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1ba:	f000 f93a 	bl	800a432 <prvIsQueueEmpty>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	f43f af4d 	beq.w	800a060 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00d      	beq.n	800a1e8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a1cc:	f001 fe8a 	bl	800bee4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a1d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1d2:	f000 f834 	bl	800a23e <prvGetDisinheritPriorityAfterTimeout>
 800a1d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f001 f91a 	bl	800b418 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a1e4:	f001 feae 	bl	800bf44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a1e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3738      	adds	r7, #56	; 0x38
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	e000ed04 	.word	0xe000ed04

0800a1f8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d10a      	bne.n	800a220 <vQueueDelete+0x28>
	__asm volatile
 800a20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20e:	f383 8811 	msr	BASEPRI, r3
 800a212:	f3bf 8f6f 	isb	sy
 800a216:	f3bf 8f4f 	dsb	sy
 800a21a:	60bb      	str	r3, [r7, #8]
}
 800a21c:	bf00      	nop
 800a21e:	e7fe      	b.n	800a21e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f000 f95f 	bl	800a4e4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d102      	bne.n	800a236 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f002 f845 	bl	800c2c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a236:	bf00      	nop
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a23e:	b480      	push	{r7}
 800a240:	b085      	sub	sp, #20
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d006      	beq.n	800a25c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a258:	60fb      	str	r3, [r7, #12]
 800a25a:	e001      	b.n	800a260 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a25c:	2300      	movs	r3, #0
 800a25e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a260:	68fb      	ldr	r3, [r7, #12]
	}
 800a262:	4618      	mov	r0, r3
 800a264:	3714      	adds	r7, #20
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr

0800a26e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b086      	sub	sp, #24
 800a272:	af00      	add	r7, sp, #0
 800a274:	60f8      	str	r0, [r7, #12]
 800a276:	60b9      	str	r1, [r7, #8]
 800a278:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a27a:	2300      	movs	r3, #0
 800a27c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a282:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d10d      	bne.n	800a2a8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d14d      	bne.n	800a330 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	4618      	mov	r0, r3
 800a29a:	f001 f84f 	bl	800b33c <xTaskPriorityDisinherit>
 800a29e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	609a      	str	r2, [r3, #8]
 800a2a6:	e043      	b.n	800a330 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d119      	bne.n	800a2e2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	6858      	ldr	r0, [r3, #4]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	68b9      	ldr	r1, [r7, #8]
 800a2ba:	f002 fa63 	bl	800c784 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	685a      	ldr	r2, [r3, #4]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c6:	441a      	add	r2, r3
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	685a      	ldr	r2, [r3, #4]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d32b      	bcc.n	800a330 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	605a      	str	r2, [r3, #4]
 800a2e0:	e026      	b.n	800a330 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	68d8      	ldr	r0, [r3, #12]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	68b9      	ldr	r1, [r7, #8]
 800a2ee:	f002 fa49 	bl	800c784 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	68da      	ldr	r2, [r3, #12]
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2fa:	425b      	negs	r3, r3
 800a2fc:	441a      	add	r2, r3
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	68da      	ldr	r2, [r3, #12]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d207      	bcs.n	800a31e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	689a      	ldr	r2, [r3, #8]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a316:	425b      	negs	r3, r3
 800a318:	441a      	add	r2, r3
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2b02      	cmp	r3, #2
 800a322:	d105      	bne.n	800a330 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d002      	beq.n	800a330 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	3b01      	subs	r3, #1
 800a32e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	1c5a      	adds	r2, r3, #1
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a338:	697b      	ldr	r3, [r7, #20]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3718      	adds	r7, #24
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}

0800a342 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a342:	b580      	push	{r7, lr}
 800a344:	b082      	sub	sp, #8
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
 800a34a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a350:	2b00      	cmp	r3, #0
 800a352:	d018      	beq.n	800a386 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	68da      	ldr	r2, [r3, #12]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35c:	441a      	add	r2, r3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	68da      	ldr	r2, [r3, #12]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d303      	bcc.n	800a376 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	68d9      	ldr	r1, [r3, #12]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37e:	461a      	mov	r2, r3
 800a380:	6838      	ldr	r0, [r7, #0]
 800a382:	f002 f9ff 	bl	800c784 <memcpy>
	}
}
 800a386:	bf00      	nop
 800a388:	3708      	adds	r7, #8
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}

0800a38e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a38e:	b580      	push	{r7, lr}
 800a390:	b084      	sub	sp, #16
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a396:	f001 fda5 	bl	800bee4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3a0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3a2:	e011      	b.n	800a3c8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d012      	beq.n	800a3d2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	3324      	adds	r3, #36	; 0x24
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f000 fd7b 	bl	800aeac <xTaskRemoveFromEventList>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d001      	beq.n	800a3c0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a3bc:	f000 fe52 	bl	800b064 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a3c0:	7bfb      	ldrb	r3, [r7, #15]
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	dce9      	bgt.n	800a3a4 <prvUnlockQueue+0x16>
 800a3d0:	e000      	b.n	800a3d4 <prvUnlockQueue+0x46>
					break;
 800a3d2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	22ff      	movs	r2, #255	; 0xff
 800a3d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a3dc:	f001 fdb2 	bl	800bf44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a3e0:	f001 fd80 	bl	800bee4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3ea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a3ec:	e011      	b.n	800a412 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	691b      	ldr	r3, [r3, #16]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d012      	beq.n	800a41c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	3310      	adds	r3, #16
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f000 fd56 	bl	800aeac <xTaskRemoveFromEventList>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d001      	beq.n	800a40a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a406:	f000 fe2d 	bl	800b064 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a40a:	7bbb      	ldrb	r3, [r7, #14]
 800a40c:	3b01      	subs	r3, #1
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a412:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a416:	2b00      	cmp	r3, #0
 800a418:	dce9      	bgt.n	800a3ee <prvUnlockQueue+0x60>
 800a41a:	e000      	b.n	800a41e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a41c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	22ff      	movs	r2, #255	; 0xff
 800a422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a426:	f001 fd8d 	bl	800bf44 <vPortExitCritical>
}
 800a42a:	bf00      	nop
 800a42c:	3710      	adds	r7, #16
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}

0800a432 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a432:	b580      	push	{r7, lr}
 800a434:	b084      	sub	sp, #16
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a43a:	f001 fd53 	bl	800bee4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a442:	2b00      	cmp	r3, #0
 800a444:	d102      	bne.n	800a44c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a446:	2301      	movs	r3, #1
 800a448:	60fb      	str	r3, [r7, #12]
 800a44a:	e001      	b.n	800a450 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a44c:	2300      	movs	r3, #0
 800a44e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a450:	f001 fd78 	bl	800bf44 <vPortExitCritical>

	return xReturn;
 800a454:	68fb      	ldr	r3, [r7, #12]
}
 800a456:	4618      	mov	r0, r3
 800a458:	3710      	adds	r7, #16
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}

0800a45e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a45e:	b580      	push	{r7, lr}
 800a460:	b084      	sub	sp, #16
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a466:	f001 fd3d 	bl	800bee4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a472:	429a      	cmp	r2, r3
 800a474:	d102      	bne.n	800a47c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a476:	2301      	movs	r3, #1
 800a478:	60fb      	str	r3, [r7, #12]
 800a47a:	e001      	b.n	800a480 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a47c:	2300      	movs	r3, #0
 800a47e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a480:	f001 fd60 	bl	800bf44 <vPortExitCritical>

	return xReturn;
 800a484:	68fb      	ldr	r3, [r7, #12]
}
 800a486:	4618      	mov	r0, r3
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
	...

0800a490 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a490:	b480      	push	{r7}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a49a:	2300      	movs	r3, #0
 800a49c:	60fb      	str	r3, [r7, #12]
 800a49e:	e014      	b.n	800a4ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a4a0:	4a0f      	ldr	r2, [pc, #60]	; (800a4e0 <vQueueAddToRegistry+0x50>)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d10b      	bne.n	800a4c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a4ac:	490c      	ldr	r1, [pc, #48]	; (800a4e0 <vQueueAddToRegistry+0x50>)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	683a      	ldr	r2, [r7, #0]
 800a4b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a4b6:	4a0a      	ldr	r2, [pc, #40]	; (800a4e0 <vQueueAddToRegistry+0x50>)
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	00db      	lsls	r3, r3, #3
 800a4bc:	4413      	add	r3, r2
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a4c2:	e006      	b.n	800a4d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	60fb      	str	r3, [r7, #12]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2b07      	cmp	r3, #7
 800a4ce:	d9e7      	bls.n	800a4a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a4d0:	bf00      	nop
 800a4d2:	bf00      	nop
 800a4d4:	3714      	adds	r7, #20
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	20001954 	.word	0x20001954

0800a4e4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b085      	sub	sp, #20
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	60fb      	str	r3, [r7, #12]
 800a4f0:	e016      	b.n	800a520 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a4f2:	4a10      	ldr	r2, [pc, #64]	; (800a534 <vQueueUnregisterQueue+0x50>)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	00db      	lsls	r3, r3, #3
 800a4f8:	4413      	add	r3, r2
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d10b      	bne.n	800a51a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a502:	4a0c      	ldr	r2, [pc, #48]	; (800a534 <vQueueUnregisterQueue+0x50>)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2100      	movs	r1, #0
 800a508:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a50c:	4a09      	ldr	r2, [pc, #36]	; (800a534 <vQueueUnregisterQueue+0x50>)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	00db      	lsls	r3, r3, #3
 800a512:	4413      	add	r3, r2
 800a514:	2200      	movs	r2, #0
 800a516:	605a      	str	r2, [r3, #4]
				break;
 800a518:	e006      	b.n	800a528 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	3301      	adds	r3, #1
 800a51e:	60fb      	str	r3, [r7, #12]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2b07      	cmp	r3, #7
 800a524:	d9e5      	bls.n	800a4f2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a526:	bf00      	nop
 800a528:	bf00      	nop
 800a52a:	3714      	adds	r7, #20
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr
 800a534:	20001954 	.word	0x20001954

0800a538 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b086      	sub	sp, #24
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a548:	f001 fccc 	bl	800bee4 <vPortEnterCritical>
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a552:	b25b      	sxtb	r3, r3
 800a554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a558:	d103      	bne.n	800a562 <vQueueWaitForMessageRestricted+0x2a>
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	2200      	movs	r2, #0
 800a55e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a568:	b25b      	sxtb	r3, r3
 800a56a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a56e:	d103      	bne.n	800a578 <vQueueWaitForMessageRestricted+0x40>
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	2200      	movs	r2, #0
 800a574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a578:	f001 fce4 	bl	800bf44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a580:	2b00      	cmp	r3, #0
 800a582:	d106      	bne.n	800a592 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	3324      	adds	r3, #36	; 0x24
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	68b9      	ldr	r1, [r7, #8]
 800a58c:	4618      	mov	r0, r3
 800a58e:	f000 fc61 	bl	800ae54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a592:	6978      	ldr	r0, [r7, #20]
 800a594:	f7ff fefb 	bl	800a38e <prvUnlockQueue>
	}
 800a598:	bf00      	nop
 800a59a:	3718      	adds	r7, #24
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b08e      	sub	sp, #56	; 0x38
 800a5a4:	af04      	add	r7, sp, #16
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	607a      	str	r2, [r7, #4]
 800a5ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a5ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d10a      	bne.n	800a5ca <xTaskCreateStatic+0x2a>
	__asm volatile
 800a5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b8:	f383 8811 	msr	BASEPRI, r3
 800a5bc:	f3bf 8f6f 	isb	sy
 800a5c0:	f3bf 8f4f 	dsb	sy
 800a5c4:	623b      	str	r3, [r7, #32]
}
 800a5c6:	bf00      	nop
 800a5c8:	e7fe      	b.n	800a5c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d10a      	bne.n	800a5e6 <xTaskCreateStatic+0x46>
	__asm volatile
 800a5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d4:	f383 8811 	msr	BASEPRI, r3
 800a5d8:	f3bf 8f6f 	isb	sy
 800a5dc:	f3bf 8f4f 	dsb	sy
 800a5e0:	61fb      	str	r3, [r7, #28]
}
 800a5e2:	bf00      	nop
 800a5e4:	e7fe      	b.n	800a5e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a5e6:	23bc      	movs	r3, #188	; 0xbc
 800a5e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	2bbc      	cmp	r3, #188	; 0xbc
 800a5ee:	d00a      	beq.n	800a606 <xTaskCreateStatic+0x66>
	__asm volatile
 800a5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f4:	f383 8811 	msr	BASEPRI, r3
 800a5f8:	f3bf 8f6f 	isb	sy
 800a5fc:	f3bf 8f4f 	dsb	sy
 800a600:	61bb      	str	r3, [r7, #24]
}
 800a602:	bf00      	nop
 800a604:	e7fe      	b.n	800a604 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a606:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d01e      	beq.n	800a64c <xTaskCreateStatic+0xac>
 800a60e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a610:	2b00      	cmp	r3, #0
 800a612:	d01b      	beq.n	800a64c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a616:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a61c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a620:	2202      	movs	r2, #2
 800a622:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a626:	2300      	movs	r3, #0
 800a628:	9303      	str	r3, [sp, #12]
 800a62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62c:	9302      	str	r3, [sp, #8]
 800a62e:	f107 0314 	add.w	r3, r7, #20
 800a632:	9301      	str	r3, [sp, #4]
 800a634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a636:	9300      	str	r3, [sp, #0]
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	68b9      	ldr	r1, [r7, #8]
 800a63e:	68f8      	ldr	r0, [r7, #12]
 800a640:	f000 f850 	bl	800a6e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a644:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a646:	f000 f8f3 	bl	800a830 <prvAddNewTaskToReadyList>
 800a64a:	e001      	b.n	800a650 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a64c:	2300      	movs	r3, #0
 800a64e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a650:	697b      	ldr	r3, [r7, #20]
	}
 800a652:	4618      	mov	r0, r3
 800a654:	3728      	adds	r7, #40	; 0x28
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b08c      	sub	sp, #48	; 0x30
 800a65e:	af04      	add	r7, sp, #16
 800a660:	60f8      	str	r0, [r7, #12]
 800a662:	60b9      	str	r1, [r7, #8]
 800a664:	603b      	str	r3, [r7, #0]
 800a666:	4613      	mov	r3, r2
 800a668:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a66a:	88fb      	ldrh	r3, [r7, #6]
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	4618      	mov	r0, r3
 800a670:	f001 fd5a 	bl	800c128 <pvPortMalloc>
 800a674:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d00e      	beq.n	800a69a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a67c:	20bc      	movs	r0, #188	; 0xbc
 800a67e:	f001 fd53 	bl	800c128 <pvPortMalloc>
 800a682:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a684:	69fb      	ldr	r3, [r7, #28]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d003      	beq.n	800a692 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a68a:	69fb      	ldr	r3, [r7, #28]
 800a68c:	697a      	ldr	r2, [r7, #20]
 800a68e:	631a      	str	r2, [r3, #48]	; 0x30
 800a690:	e005      	b.n	800a69e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a692:	6978      	ldr	r0, [r7, #20]
 800a694:	f001 fe14 	bl	800c2c0 <vPortFree>
 800a698:	e001      	b.n	800a69e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a69a:	2300      	movs	r3, #0
 800a69c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d017      	beq.n	800a6d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a6ac:	88fa      	ldrh	r2, [r7, #6]
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	9303      	str	r3, [sp, #12]
 800a6b2:	69fb      	ldr	r3, [r7, #28]
 800a6b4:	9302      	str	r3, [sp, #8]
 800a6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b8:	9301      	str	r3, [sp, #4]
 800a6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6bc:	9300      	str	r3, [sp, #0]
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	68b9      	ldr	r1, [r7, #8]
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	f000 f80e 	bl	800a6e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6c8:	69f8      	ldr	r0, [r7, #28]
 800a6ca:	f000 f8b1 	bl	800a830 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	61bb      	str	r3, [r7, #24]
 800a6d2:	e002      	b.n	800a6da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a6d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a6d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a6da:	69bb      	ldr	r3, [r7, #24]
	}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3720      	adds	r7, #32
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b088      	sub	sp, #32
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	607a      	str	r2, [r7, #4]
 800a6f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	21a5      	movs	r1, #165	; 0xa5
 800a6fe:	f002 f84f 	bl	800c7a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a70c:	3b01      	subs	r3, #1
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	4413      	add	r3, r2
 800a712:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a714:	69bb      	ldr	r3, [r7, #24]
 800a716:	f023 0307 	bic.w	r3, r3, #7
 800a71a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	f003 0307 	and.w	r3, r3, #7
 800a722:	2b00      	cmp	r3, #0
 800a724:	d00a      	beq.n	800a73c <prvInitialiseNewTask+0x58>
	__asm volatile
 800a726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72a:	f383 8811 	msr	BASEPRI, r3
 800a72e:	f3bf 8f6f 	isb	sy
 800a732:	f3bf 8f4f 	dsb	sy
 800a736:	617b      	str	r3, [r7, #20]
}
 800a738:	bf00      	nop
 800a73a:	e7fe      	b.n	800a73a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d01f      	beq.n	800a782 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a742:	2300      	movs	r3, #0
 800a744:	61fb      	str	r3, [r7, #28]
 800a746:	e012      	b.n	800a76e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a748:	68ba      	ldr	r2, [r7, #8]
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	4413      	add	r3, r2
 800a74e:	7819      	ldrb	r1, [r3, #0]
 800a750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	4413      	add	r3, r2
 800a756:	3334      	adds	r3, #52	; 0x34
 800a758:	460a      	mov	r2, r1
 800a75a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a75c:	68ba      	ldr	r2, [r7, #8]
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	4413      	add	r3, r2
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d006      	beq.n	800a776 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a768:	69fb      	ldr	r3, [r7, #28]
 800a76a:	3301      	adds	r3, #1
 800a76c:	61fb      	str	r3, [r7, #28]
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	2b0f      	cmp	r3, #15
 800a772:	d9e9      	bls.n	800a748 <prvInitialiseNewTask+0x64>
 800a774:	e000      	b.n	800a778 <prvInitialiseNewTask+0x94>
			{
				break;
 800a776:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77a:	2200      	movs	r2, #0
 800a77c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a780:	e003      	b.n	800a78a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a784:	2200      	movs	r2, #0
 800a786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78c:	2b37      	cmp	r3, #55	; 0x37
 800a78e:	d901      	bls.n	800a794 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a790:	2337      	movs	r3, #55	; 0x37
 800a792:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a798:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a79e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a8:	3304      	adds	r3, #4
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7fe fed6 	bl	800955c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b2:	3318      	adds	r3, #24
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7fe fed1 	bl	800955c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e2:	3354      	adds	r3, #84	; 0x54
 800a7e4:	2260      	movs	r2, #96	; 0x60
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f001 ffd9 	bl	800c7a0 <memset>
 800a7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f0:	4a0c      	ldr	r2, [pc, #48]	; (800a824 <prvInitialiseNewTask+0x140>)
 800a7f2:	659a      	str	r2, [r3, #88]	; 0x58
 800a7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f6:	4a0c      	ldr	r2, [pc, #48]	; (800a828 <prvInitialiseNewTask+0x144>)
 800a7f8:	65da      	str	r2, [r3, #92]	; 0x5c
 800a7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fc:	4a0b      	ldr	r2, [pc, #44]	; (800a82c <prvInitialiseNewTask+0x148>)
 800a7fe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a800:	683a      	ldr	r2, [r7, #0]
 800a802:	68f9      	ldr	r1, [r7, #12]
 800a804:	69b8      	ldr	r0, [r7, #24]
 800a806:	f001 fa3f 	bl	800bc88 <pxPortInitialiseStack>
 800a80a:	4602      	mov	r2, r0
 800a80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a812:	2b00      	cmp	r3, #0
 800a814:	d002      	beq.n	800a81c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a81a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a81c:	bf00      	nop
 800a81e:	3720      	adds	r7, #32
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	0800e3f0 	.word	0x0800e3f0
 800a828:	0800e410 	.word	0x0800e410
 800a82c:	0800e3d0 	.word	0x0800e3d0

0800a830 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a838:	f001 fb54 	bl	800bee4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a83c:	4b2d      	ldr	r3, [pc, #180]	; (800a8f4 <prvAddNewTaskToReadyList+0xc4>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	3301      	adds	r3, #1
 800a842:	4a2c      	ldr	r2, [pc, #176]	; (800a8f4 <prvAddNewTaskToReadyList+0xc4>)
 800a844:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a846:	4b2c      	ldr	r3, [pc, #176]	; (800a8f8 <prvAddNewTaskToReadyList+0xc8>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d109      	bne.n	800a862 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a84e:	4a2a      	ldr	r2, [pc, #168]	; (800a8f8 <prvAddNewTaskToReadyList+0xc8>)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a854:	4b27      	ldr	r3, [pc, #156]	; (800a8f4 <prvAddNewTaskToReadyList+0xc4>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d110      	bne.n	800a87e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a85c:	f000 fc26 	bl	800b0ac <prvInitialiseTaskLists>
 800a860:	e00d      	b.n	800a87e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a862:	4b26      	ldr	r3, [pc, #152]	; (800a8fc <prvAddNewTaskToReadyList+0xcc>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d109      	bne.n	800a87e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a86a:	4b23      	ldr	r3, [pc, #140]	; (800a8f8 <prvAddNewTaskToReadyList+0xc8>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a874:	429a      	cmp	r2, r3
 800a876:	d802      	bhi.n	800a87e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a878:	4a1f      	ldr	r2, [pc, #124]	; (800a8f8 <prvAddNewTaskToReadyList+0xc8>)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a87e:	4b20      	ldr	r3, [pc, #128]	; (800a900 <prvAddNewTaskToReadyList+0xd0>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	3301      	adds	r3, #1
 800a884:	4a1e      	ldr	r2, [pc, #120]	; (800a900 <prvAddNewTaskToReadyList+0xd0>)
 800a886:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a888:	4b1d      	ldr	r3, [pc, #116]	; (800a900 <prvAddNewTaskToReadyList+0xd0>)
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a894:	4b1b      	ldr	r3, [pc, #108]	; (800a904 <prvAddNewTaskToReadyList+0xd4>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d903      	bls.n	800a8a4 <prvAddNewTaskToReadyList+0x74>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a0:	4a18      	ldr	r2, [pc, #96]	; (800a904 <prvAddNewTaskToReadyList+0xd4>)
 800a8a2:	6013      	str	r3, [r2, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8a8:	4613      	mov	r3, r2
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	4413      	add	r3, r2
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	4a15      	ldr	r2, [pc, #84]	; (800a908 <prvAddNewTaskToReadyList+0xd8>)
 800a8b2:	441a      	add	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	3304      	adds	r3, #4
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	4610      	mov	r0, r2
 800a8bc:	f7fe fe5b 	bl	8009576 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a8c0:	f001 fb40 	bl	800bf44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a8c4:	4b0d      	ldr	r3, [pc, #52]	; (800a8fc <prvAddNewTaskToReadyList+0xcc>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d00e      	beq.n	800a8ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a8cc:	4b0a      	ldr	r3, [pc, #40]	; (800a8f8 <prvAddNewTaskToReadyList+0xc8>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d207      	bcs.n	800a8ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a8da:	4b0c      	ldr	r3, [pc, #48]	; (800a90c <prvAddNewTaskToReadyList+0xdc>)
 800a8dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8e0:	601a      	str	r2, [r3, #0]
 800a8e2:	f3bf 8f4f 	dsb	sy
 800a8e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8ea:	bf00      	nop
 800a8ec:	3708      	adds	r7, #8
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	20001e68 	.word	0x20001e68
 800a8f8:	20001994 	.word	0x20001994
 800a8fc:	20001e74 	.word	0x20001e74
 800a900:	20001e84 	.word	0x20001e84
 800a904:	20001e70 	.word	0x20001e70
 800a908:	20001998 	.word	0x20001998
 800a90c:	e000ed04 	.word	0xe000ed04

0800a910 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a918:	2300      	movs	r3, #0
 800a91a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d017      	beq.n	800a952 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a922:	4b13      	ldr	r3, [pc, #76]	; (800a970 <vTaskDelay+0x60>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00a      	beq.n	800a940 <vTaskDelay+0x30>
	__asm volatile
 800a92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92e:	f383 8811 	msr	BASEPRI, r3
 800a932:	f3bf 8f6f 	isb	sy
 800a936:	f3bf 8f4f 	dsb	sy
 800a93a:	60bb      	str	r3, [r7, #8]
}
 800a93c:	bf00      	nop
 800a93e:	e7fe      	b.n	800a93e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a940:	f000 f88a 	bl	800aa58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a944:	2100      	movs	r1, #0
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 fdfc 	bl	800b544 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a94c:	f000 f892 	bl	800aa74 <xTaskResumeAll>
 800a950:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d107      	bne.n	800a968 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a958:	4b06      	ldr	r3, [pc, #24]	; (800a974 <vTaskDelay+0x64>)
 800a95a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a95e:	601a      	str	r2, [r3, #0]
 800a960:	f3bf 8f4f 	dsb	sy
 800a964:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a968:	bf00      	nop
 800a96a:	3710      	adds	r7, #16
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}
 800a970:	20001e90 	.word	0x20001e90
 800a974:	e000ed04 	.word	0xe000ed04

0800a978 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b08a      	sub	sp, #40	; 0x28
 800a97c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a97e:	2300      	movs	r3, #0
 800a980:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a982:	2300      	movs	r3, #0
 800a984:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a986:	463a      	mov	r2, r7
 800a988:	1d39      	adds	r1, r7, #4
 800a98a:	f107 0308 	add.w	r3, r7, #8
 800a98e:	4618      	mov	r0, r3
 800a990:	f7fe fd90 	bl	80094b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a994:	6839      	ldr	r1, [r7, #0]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	68ba      	ldr	r2, [r7, #8]
 800a99a:	9202      	str	r2, [sp, #8]
 800a99c:	9301      	str	r3, [sp, #4]
 800a99e:	2300      	movs	r3, #0
 800a9a0:	9300      	str	r3, [sp, #0]
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	460a      	mov	r2, r1
 800a9a6:	4924      	ldr	r1, [pc, #144]	; (800aa38 <vTaskStartScheduler+0xc0>)
 800a9a8:	4824      	ldr	r0, [pc, #144]	; (800aa3c <vTaskStartScheduler+0xc4>)
 800a9aa:	f7ff fdf9 	bl	800a5a0 <xTaskCreateStatic>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	4a23      	ldr	r2, [pc, #140]	; (800aa40 <vTaskStartScheduler+0xc8>)
 800a9b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a9b4:	4b22      	ldr	r3, [pc, #136]	; (800aa40 <vTaskStartScheduler+0xc8>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d002      	beq.n	800a9c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	617b      	str	r3, [r7, #20]
 800a9c0:	e001      	b.n	800a9c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d102      	bne.n	800a9d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a9cc:	f000 fe0e 	bl	800b5ec <xTimerCreateTimerTask>
 800a9d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d11b      	bne.n	800aa10 <vTaskStartScheduler+0x98>
	__asm volatile
 800a9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9dc:	f383 8811 	msr	BASEPRI, r3
 800a9e0:	f3bf 8f6f 	isb	sy
 800a9e4:	f3bf 8f4f 	dsb	sy
 800a9e8:	613b      	str	r3, [r7, #16]
}
 800a9ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a9ec:	4b15      	ldr	r3, [pc, #84]	; (800aa44 <vTaskStartScheduler+0xcc>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	3354      	adds	r3, #84	; 0x54
 800a9f2:	4a15      	ldr	r2, [pc, #84]	; (800aa48 <vTaskStartScheduler+0xd0>)
 800a9f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a9f6:	4b15      	ldr	r3, [pc, #84]	; (800aa4c <vTaskStartScheduler+0xd4>)
 800a9f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a9fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a9fe:	4b14      	ldr	r3, [pc, #80]	; (800aa50 <vTaskStartScheduler+0xd8>)
 800aa00:	2201      	movs	r2, #1
 800aa02:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aa04:	4b13      	ldr	r3, [pc, #76]	; (800aa54 <vTaskStartScheduler+0xdc>)
 800aa06:	2200      	movs	r2, #0
 800aa08:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aa0a:	f001 f9c9 	bl	800bda0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aa0e:	e00e      	b.n	800aa2e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa16:	d10a      	bne.n	800aa2e <vTaskStartScheduler+0xb6>
	__asm volatile
 800aa18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1c:	f383 8811 	msr	BASEPRI, r3
 800aa20:	f3bf 8f6f 	isb	sy
 800aa24:	f3bf 8f4f 	dsb	sy
 800aa28:	60fb      	str	r3, [r7, #12]
}
 800aa2a:	bf00      	nop
 800aa2c:	e7fe      	b.n	800aa2c <vTaskStartScheduler+0xb4>
}
 800aa2e:	bf00      	nop
 800aa30:	3718      	adds	r7, #24
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	0800e324 	.word	0x0800e324
 800aa3c:	0800b07d 	.word	0x0800b07d
 800aa40:	20001e8c 	.word	0x20001e8c
 800aa44:	20001994 	.word	0x20001994
 800aa48:	20000010 	.word	0x20000010
 800aa4c:	20001e88 	.word	0x20001e88
 800aa50:	20001e74 	.word	0x20001e74
 800aa54:	20001e6c 	.word	0x20001e6c

0800aa58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aa58:	b480      	push	{r7}
 800aa5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aa5c:	4b04      	ldr	r3, [pc, #16]	; (800aa70 <vTaskSuspendAll+0x18>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	3301      	adds	r3, #1
 800aa62:	4a03      	ldr	r2, [pc, #12]	; (800aa70 <vTaskSuspendAll+0x18>)
 800aa64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aa66:	bf00      	nop
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr
 800aa70:	20001e90 	.word	0x20001e90

0800aa74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aa82:	4b42      	ldr	r3, [pc, #264]	; (800ab8c <xTaskResumeAll+0x118>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d10a      	bne.n	800aaa0 <xTaskResumeAll+0x2c>
	__asm volatile
 800aa8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8e:	f383 8811 	msr	BASEPRI, r3
 800aa92:	f3bf 8f6f 	isb	sy
 800aa96:	f3bf 8f4f 	dsb	sy
 800aa9a:	603b      	str	r3, [r7, #0]
}
 800aa9c:	bf00      	nop
 800aa9e:	e7fe      	b.n	800aa9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aaa0:	f001 fa20 	bl	800bee4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aaa4:	4b39      	ldr	r3, [pc, #228]	; (800ab8c <xTaskResumeAll+0x118>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	3b01      	subs	r3, #1
 800aaaa:	4a38      	ldr	r2, [pc, #224]	; (800ab8c <xTaskResumeAll+0x118>)
 800aaac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aaae:	4b37      	ldr	r3, [pc, #220]	; (800ab8c <xTaskResumeAll+0x118>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d162      	bne.n	800ab7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aab6:	4b36      	ldr	r3, [pc, #216]	; (800ab90 <xTaskResumeAll+0x11c>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d05e      	beq.n	800ab7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aabe:	e02f      	b.n	800ab20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aac0:	4b34      	ldr	r3, [pc, #208]	; (800ab94 <xTaskResumeAll+0x120>)
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	3318      	adds	r3, #24
 800aacc:	4618      	mov	r0, r3
 800aace:	f7fe fdaf 	bl	8009630 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	3304      	adds	r3, #4
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7fe fdaa 	bl	8009630 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aae0:	4b2d      	ldr	r3, [pc, #180]	; (800ab98 <xTaskResumeAll+0x124>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d903      	bls.n	800aaf0 <xTaskResumeAll+0x7c>
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaec:	4a2a      	ldr	r2, [pc, #168]	; (800ab98 <xTaskResumeAll+0x124>)
 800aaee:	6013      	str	r3, [r2, #0]
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaf4:	4613      	mov	r3, r2
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	4413      	add	r3, r2
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	4a27      	ldr	r2, [pc, #156]	; (800ab9c <xTaskResumeAll+0x128>)
 800aafe:	441a      	add	r2, r3
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	3304      	adds	r3, #4
 800ab04:	4619      	mov	r1, r3
 800ab06:	4610      	mov	r0, r2
 800ab08:	f7fe fd35 	bl	8009576 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab10:	4b23      	ldr	r3, [pc, #140]	; (800aba0 <xTaskResumeAll+0x12c>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d302      	bcc.n	800ab20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ab1a:	4b22      	ldr	r3, [pc, #136]	; (800aba4 <xTaskResumeAll+0x130>)
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab20:	4b1c      	ldr	r3, [pc, #112]	; (800ab94 <xTaskResumeAll+0x120>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d1cb      	bne.n	800aac0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d001      	beq.n	800ab32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ab2e:	f000 fb5f 	bl	800b1f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ab32:	4b1d      	ldr	r3, [pc, #116]	; (800aba8 <xTaskResumeAll+0x134>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d010      	beq.n	800ab60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ab3e:	f000 f847 	bl	800abd0 <xTaskIncrementTick>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d002      	beq.n	800ab4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ab48:	4b16      	ldr	r3, [pc, #88]	; (800aba4 <xTaskResumeAll+0x130>)
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	3b01      	subs	r3, #1
 800ab52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d1f1      	bne.n	800ab3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ab5a:	4b13      	ldr	r3, [pc, #76]	; (800aba8 <xTaskResumeAll+0x134>)
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ab60:	4b10      	ldr	r3, [pc, #64]	; (800aba4 <xTaskResumeAll+0x130>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d009      	beq.n	800ab7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ab6c:	4b0f      	ldr	r3, [pc, #60]	; (800abac <xTaskResumeAll+0x138>)
 800ab6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab72:	601a      	str	r2, [r3, #0]
 800ab74:	f3bf 8f4f 	dsb	sy
 800ab78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab7c:	f001 f9e2 	bl	800bf44 <vPortExitCritical>

	return xAlreadyYielded;
 800ab80:	68bb      	ldr	r3, [r7, #8]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	20001e90 	.word	0x20001e90
 800ab90:	20001e68 	.word	0x20001e68
 800ab94:	20001e28 	.word	0x20001e28
 800ab98:	20001e70 	.word	0x20001e70
 800ab9c:	20001998 	.word	0x20001998
 800aba0:	20001994 	.word	0x20001994
 800aba4:	20001e7c 	.word	0x20001e7c
 800aba8:	20001e78 	.word	0x20001e78
 800abac:	e000ed04 	.word	0xe000ed04

0800abb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800abb6:	4b05      	ldr	r3, [pc, #20]	; (800abcc <xTaskGetTickCount+0x1c>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800abbc:	687b      	ldr	r3, [r7, #4]
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	370c      	adds	r7, #12
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop
 800abcc:	20001e6c 	.word	0x20001e6c

0800abd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b086      	sub	sp, #24
 800abd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800abd6:	2300      	movs	r3, #0
 800abd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abda:	4b4f      	ldr	r3, [pc, #316]	; (800ad18 <xTaskIncrementTick+0x148>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	f040 808f 	bne.w	800ad02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800abe4:	4b4d      	ldr	r3, [pc, #308]	; (800ad1c <xTaskIncrementTick+0x14c>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	3301      	adds	r3, #1
 800abea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800abec:	4a4b      	ldr	r2, [pc, #300]	; (800ad1c <xTaskIncrementTick+0x14c>)
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d120      	bne.n	800ac3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800abf8:	4b49      	ldr	r3, [pc, #292]	; (800ad20 <xTaskIncrementTick+0x150>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00a      	beq.n	800ac18 <xTaskIncrementTick+0x48>
	__asm volatile
 800ac02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac06:	f383 8811 	msr	BASEPRI, r3
 800ac0a:	f3bf 8f6f 	isb	sy
 800ac0e:	f3bf 8f4f 	dsb	sy
 800ac12:	603b      	str	r3, [r7, #0]
}
 800ac14:	bf00      	nop
 800ac16:	e7fe      	b.n	800ac16 <xTaskIncrementTick+0x46>
 800ac18:	4b41      	ldr	r3, [pc, #260]	; (800ad20 <xTaskIncrementTick+0x150>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	60fb      	str	r3, [r7, #12]
 800ac1e:	4b41      	ldr	r3, [pc, #260]	; (800ad24 <xTaskIncrementTick+0x154>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4a3f      	ldr	r2, [pc, #252]	; (800ad20 <xTaskIncrementTick+0x150>)
 800ac24:	6013      	str	r3, [r2, #0]
 800ac26:	4a3f      	ldr	r2, [pc, #252]	; (800ad24 <xTaskIncrementTick+0x154>)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	6013      	str	r3, [r2, #0]
 800ac2c:	4b3e      	ldr	r3, [pc, #248]	; (800ad28 <xTaskIncrementTick+0x158>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	3301      	adds	r3, #1
 800ac32:	4a3d      	ldr	r2, [pc, #244]	; (800ad28 <xTaskIncrementTick+0x158>)
 800ac34:	6013      	str	r3, [r2, #0]
 800ac36:	f000 fadb 	bl	800b1f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ac3a:	4b3c      	ldr	r3, [pc, #240]	; (800ad2c <xTaskIncrementTick+0x15c>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	693a      	ldr	r2, [r7, #16]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d349      	bcc.n	800acd8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac44:	4b36      	ldr	r3, [pc, #216]	; (800ad20 <xTaskIncrementTick+0x150>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d104      	bne.n	800ac58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac4e:	4b37      	ldr	r3, [pc, #220]	; (800ad2c <xTaskIncrementTick+0x15c>)
 800ac50:	f04f 32ff 	mov.w	r2, #4294967295
 800ac54:	601a      	str	r2, [r3, #0]
					break;
 800ac56:	e03f      	b.n	800acd8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac58:	4b31      	ldr	r3, [pc, #196]	; (800ad20 <xTaskIncrementTick+0x150>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	68db      	ldr	r3, [r3, #12]
 800ac60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ac68:	693a      	ldr	r2, [r7, #16]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d203      	bcs.n	800ac78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ac70:	4a2e      	ldr	r2, [pc, #184]	; (800ad2c <xTaskIncrementTick+0x15c>)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ac76:	e02f      	b.n	800acd8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	3304      	adds	r3, #4
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7fe fcd7 	bl	8009630 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d004      	beq.n	800ac94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	3318      	adds	r3, #24
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7fe fcce 	bl	8009630 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac98:	4b25      	ldr	r3, [pc, #148]	; (800ad30 <xTaskIncrementTick+0x160>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d903      	bls.n	800aca8 <xTaskIncrementTick+0xd8>
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca4:	4a22      	ldr	r2, [pc, #136]	; (800ad30 <xTaskIncrementTick+0x160>)
 800aca6:	6013      	str	r3, [r2, #0]
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acac:	4613      	mov	r3, r2
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4413      	add	r3, r2
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	4a1f      	ldr	r2, [pc, #124]	; (800ad34 <xTaskIncrementTick+0x164>)
 800acb6:	441a      	add	r2, r3
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	3304      	adds	r3, #4
 800acbc:	4619      	mov	r1, r3
 800acbe:	4610      	mov	r0, r2
 800acc0:	f7fe fc59 	bl	8009576 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acc8:	4b1b      	ldr	r3, [pc, #108]	; (800ad38 <xTaskIncrementTick+0x168>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acce:	429a      	cmp	r2, r3
 800acd0:	d3b8      	bcc.n	800ac44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800acd2:	2301      	movs	r3, #1
 800acd4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acd6:	e7b5      	b.n	800ac44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800acd8:	4b17      	ldr	r3, [pc, #92]	; (800ad38 <xTaskIncrementTick+0x168>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acde:	4915      	ldr	r1, [pc, #84]	; (800ad34 <xTaskIncrementTick+0x164>)
 800ace0:	4613      	mov	r3, r2
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	4413      	add	r3, r2
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	440b      	add	r3, r1
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2b01      	cmp	r3, #1
 800acee:	d901      	bls.n	800acf4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800acf0:	2301      	movs	r3, #1
 800acf2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800acf4:	4b11      	ldr	r3, [pc, #68]	; (800ad3c <xTaskIncrementTick+0x16c>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d007      	beq.n	800ad0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800acfc:	2301      	movs	r3, #1
 800acfe:	617b      	str	r3, [r7, #20]
 800ad00:	e004      	b.n	800ad0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ad02:	4b0f      	ldr	r3, [pc, #60]	; (800ad40 <xTaskIncrementTick+0x170>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	3301      	adds	r3, #1
 800ad08:	4a0d      	ldr	r2, [pc, #52]	; (800ad40 <xTaskIncrementTick+0x170>)
 800ad0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ad0c:	697b      	ldr	r3, [r7, #20]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3718      	adds	r7, #24
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	20001e90 	.word	0x20001e90
 800ad1c:	20001e6c 	.word	0x20001e6c
 800ad20:	20001e20 	.word	0x20001e20
 800ad24:	20001e24 	.word	0x20001e24
 800ad28:	20001e80 	.word	0x20001e80
 800ad2c:	20001e88 	.word	0x20001e88
 800ad30:	20001e70 	.word	0x20001e70
 800ad34:	20001998 	.word	0x20001998
 800ad38:	20001994 	.word	0x20001994
 800ad3c:	20001e7c 	.word	0x20001e7c
 800ad40:	20001e78 	.word	0x20001e78

0800ad44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ad44:	b480      	push	{r7}
 800ad46:	b085      	sub	sp, #20
 800ad48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ad4a:	4b2a      	ldr	r3, [pc, #168]	; (800adf4 <vTaskSwitchContext+0xb0>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d003      	beq.n	800ad5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ad52:	4b29      	ldr	r3, [pc, #164]	; (800adf8 <vTaskSwitchContext+0xb4>)
 800ad54:	2201      	movs	r2, #1
 800ad56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ad58:	e046      	b.n	800ade8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ad5a:	4b27      	ldr	r3, [pc, #156]	; (800adf8 <vTaskSwitchContext+0xb4>)
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad60:	4b26      	ldr	r3, [pc, #152]	; (800adfc <vTaskSwitchContext+0xb8>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	60fb      	str	r3, [r7, #12]
 800ad66:	e010      	b.n	800ad8a <vTaskSwitchContext+0x46>
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d10a      	bne.n	800ad84 <vTaskSwitchContext+0x40>
	__asm volatile
 800ad6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad72:	f383 8811 	msr	BASEPRI, r3
 800ad76:	f3bf 8f6f 	isb	sy
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	607b      	str	r3, [r7, #4]
}
 800ad80:	bf00      	nop
 800ad82:	e7fe      	b.n	800ad82 <vTaskSwitchContext+0x3e>
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	3b01      	subs	r3, #1
 800ad88:	60fb      	str	r3, [r7, #12]
 800ad8a:	491d      	ldr	r1, [pc, #116]	; (800ae00 <vTaskSwitchContext+0xbc>)
 800ad8c:	68fa      	ldr	r2, [r7, #12]
 800ad8e:	4613      	mov	r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	4413      	add	r3, r2
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	440b      	add	r3, r1
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d0e4      	beq.n	800ad68 <vTaskSwitchContext+0x24>
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	4613      	mov	r3, r2
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	4413      	add	r3, r2
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	4a15      	ldr	r2, [pc, #84]	; (800ae00 <vTaskSwitchContext+0xbc>)
 800adaa:	4413      	add	r3, r2
 800adac:	60bb      	str	r3, [r7, #8]
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	685a      	ldr	r2, [r3, #4]
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	605a      	str	r2, [r3, #4]
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	685a      	ldr	r2, [r3, #4]
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	3308      	adds	r3, #8
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d104      	bne.n	800adce <vTaskSwitchContext+0x8a>
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	685a      	ldr	r2, [r3, #4]
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	605a      	str	r2, [r3, #4]
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	4a0b      	ldr	r2, [pc, #44]	; (800ae04 <vTaskSwitchContext+0xc0>)
 800add6:	6013      	str	r3, [r2, #0]
 800add8:	4a08      	ldr	r2, [pc, #32]	; (800adfc <vTaskSwitchContext+0xb8>)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800adde:	4b09      	ldr	r3, [pc, #36]	; (800ae04 <vTaskSwitchContext+0xc0>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	3354      	adds	r3, #84	; 0x54
 800ade4:	4a08      	ldr	r2, [pc, #32]	; (800ae08 <vTaskSwitchContext+0xc4>)
 800ade6:	6013      	str	r3, [r2, #0]
}
 800ade8:	bf00      	nop
 800adea:	3714      	adds	r7, #20
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr
 800adf4:	20001e90 	.word	0x20001e90
 800adf8:	20001e7c 	.word	0x20001e7c
 800adfc:	20001e70 	.word	0x20001e70
 800ae00:	20001998 	.word	0x20001998
 800ae04:	20001994 	.word	0x20001994
 800ae08:	20000010 	.word	0x20000010

0800ae0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b084      	sub	sp, #16
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d10a      	bne.n	800ae32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ae1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae20:	f383 8811 	msr	BASEPRI, r3
 800ae24:	f3bf 8f6f 	isb	sy
 800ae28:	f3bf 8f4f 	dsb	sy
 800ae2c:	60fb      	str	r3, [r7, #12]
}
 800ae2e:	bf00      	nop
 800ae30:	e7fe      	b.n	800ae30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae32:	4b07      	ldr	r3, [pc, #28]	; (800ae50 <vTaskPlaceOnEventList+0x44>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	3318      	adds	r3, #24
 800ae38:	4619      	mov	r1, r3
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f7fe fbbf 	bl	80095be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ae40:	2101      	movs	r1, #1
 800ae42:	6838      	ldr	r0, [r7, #0]
 800ae44:	f000 fb7e 	bl	800b544 <prvAddCurrentTaskToDelayedList>
}
 800ae48:	bf00      	nop
 800ae4a:	3710      	adds	r7, #16
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	20001994 	.word	0x20001994

0800ae54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b086      	sub	sp, #24
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d10a      	bne.n	800ae7c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ae66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae6a:	f383 8811 	msr	BASEPRI, r3
 800ae6e:	f3bf 8f6f 	isb	sy
 800ae72:	f3bf 8f4f 	dsb	sy
 800ae76:	617b      	str	r3, [r7, #20]
}
 800ae78:	bf00      	nop
 800ae7a:	e7fe      	b.n	800ae7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae7c:	4b0a      	ldr	r3, [pc, #40]	; (800aea8 <vTaskPlaceOnEventListRestricted+0x54>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	3318      	adds	r3, #24
 800ae82:	4619      	mov	r1, r3
 800ae84:	68f8      	ldr	r0, [r7, #12]
 800ae86:	f7fe fb76 	bl	8009576 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d002      	beq.n	800ae96 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ae90:	f04f 33ff 	mov.w	r3, #4294967295
 800ae94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ae96:	6879      	ldr	r1, [r7, #4]
 800ae98:	68b8      	ldr	r0, [r7, #8]
 800ae9a:	f000 fb53 	bl	800b544 <prvAddCurrentTaskToDelayedList>
	}
 800ae9e:	bf00      	nop
 800aea0:	3718      	adds	r7, #24
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	20001994 	.word	0x20001994

0800aeac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b086      	sub	sp, #24
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d10a      	bne.n	800aed8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800aec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec6:	f383 8811 	msr	BASEPRI, r3
 800aeca:	f3bf 8f6f 	isb	sy
 800aece:	f3bf 8f4f 	dsb	sy
 800aed2:	60fb      	str	r3, [r7, #12]
}
 800aed4:	bf00      	nop
 800aed6:	e7fe      	b.n	800aed6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	3318      	adds	r3, #24
 800aedc:	4618      	mov	r0, r3
 800aede:	f7fe fba7 	bl	8009630 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aee2:	4b1e      	ldr	r3, [pc, #120]	; (800af5c <xTaskRemoveFromEventList+0xb0>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d11d      	bne.n	800af26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	3304      	adds	r3, #4
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7fe fb9e 	bl	8009630 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aef8:	4b19      	ldr	r3, [pc, #100]	; (800af60 <xTaskRemoveFromEventList+0xb4>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d903      	bls.n	800af08 <xTaskRemoveFromEventList+0x5c>
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af04:	4a16      	ldr	r2, [pc, #88]	; (800af60 <xTaskRemoveFromEventList+0xb4>)
 800af06:	6013      	str	r3, [r2, #0]
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af0c:	4613      	mov	r3, r2
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	4413      	add	r3, r2
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	4a13      	ldr	r2, [pc, #76]	; (800af64 <xTaskRemoveFromEventList+0xb8>)
 800af16:	441a      	add	r2, r3
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	3304      	adds	r3, #4
 800af1c:	4619      	mov	r1, r3
 800af1e:	4610      	mov	r0, r2
 800af20:	f7fe fb29 	bl	8009576 <vListInsertEnd>
 800af24:	e005      	b.n	800af32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	3318      	adds	r3, #24
 800af2a:	4619      	mov	r1, r3
 800af2c:	480e      	ldr	r0, [pc, #56]	; (800af68 <xTaskRemoveFromEventList+0xbc>)
 800af2e:	f7fe fb22 	bl	8009576 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af36:	4b0d      	ldr	r3, [pc, #52]	; (800af6c <xTaskRemoveFromEventList+0xc0>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d905      	bls.n	800af4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800af40:	2301      	movs	r3, #1
 800af42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800af44:	4b0a      	ldr	r3, [pc, #40]	; (800af70 <xTaskRemoveFromEventList+0xc4>)
 800af46:	2201      	movs	r2, #1
 800af48:	601a      	str	r2, [r3, #0]
 800af4a:	e001      	b.n	800af50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800af4c:	2300      	movs	r3, #0
 800af4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800af50:	697b      	ldr	r3, [r7, #20]
}
 800af52:	4618      	mov	r0, r3
 800af54:	3718      	adds	r7, #24
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	20001e90 	.word	0x20001e90
 800af60:	20001e70 	.word	0x20001e70
 800af64:	20001998 	.word	0x20001998
 800af68:	20001e28 	.word	0x20001e28
 800af6c:	20001994 	.word	0x20001994
 800af70:	20001e7c 	.word	0x20001e7c

0800af74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800af7c:	4b06      	ldr	r3, [pc, #24]	; (800af98 <vTaskInternalSetTimeOutState+0x24>)
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800af84:	4b05      	ldr	r3, [pc, #20]	; (800af9c <vTaskInternalSetTimeOutState+0x28>)
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	605a      	str	r2, [r3, #4]
}
 800af8c:	bf00      	nop
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr
 800af98:	20001e80 	.word	0x20001e80
 800af9c:	20001e6c 	.word	0x20001e6c

0800afa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b088      	sub	sp, #32
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d10a      	bne.n	800afc6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800afb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb4:	f383 8811 	msr	BASEPRI, r3
 800afb8:	f3bf 8f6f 	isb	sy
 800afbc:	f3bf 8f4f 	dsb	sy
 800afc0:	613b      	str	r3, [r7, #16]
}
 800afc2:	bf00      	nop
 800afc4:	e7fe      	b.n	800afc4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d10a      	bne.n	800afe2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800afcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd0:	f383 8811 	msr	BASEPRI, r3
 800afd4:	f3bf 8f6f 	isb	sy
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	60fb      	str	r3, [r7, #12]
}
 800afde:	bf00      	nop
 800afe0:	e7fe      	b.n	800afe0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800afe2:	f000 ff7f 	bl	800bee4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800afe6:	4b1d      	ldr	r3, [pc, #116]	; (800b05c <xTaskCheckForTimeOut+0xbc>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	69ba      	ldr	r2, [r7, #24]
 800aff2:	1ad3      	subs	r3, r2, r3
 800aff4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800affe:	d102      	bne.n	800b006 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b000:	2300      	movs	r3, #0
 800b002:	61fb      	str	r3, [r7, #28]
 800b004:	e023      	b.n	800b04e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	4b15      	ldr	r3, [pc, #84]	; (800b060 <xTaskCheckForTimeOut+0xc0>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d007      	beq.n	800b022 <xTaskCheckForTimeOut+0x82>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	69ba      	ldr	r2, [r7, #24]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d302      	bcc.n	800b022 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b01c:	2301      	movs	r3, #1
 800b01e:	61fb      	str	r3, [r7, #28]
 800b020:	e015      	b.n	800b04e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	697a      	ldr	r2, [r7, #20]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d20b      	bcs.n	800b044 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	1ad2      	subs	r2, r2, r3
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f7ff ff9b 	bl	800af74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b03e:	2300      	movs	r3, #0
 800b040:	61fb      	str	r3, [r7, #28]
 800b042:	e004      	b.n	800b04e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	2200      	movs	r2, #0
 800b048:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b04a:	2301      	movs	r3, #1
 800b04c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b04e:	f000 ff79 	bl	800bf44 <vPortExitCritical>

	return xReturn;
 800b052:	69fb      	ldr	r3, [r7, #28]
}
 800b054:	4618      	mov	r0, r3
 800b056:	3720      	adds	r7, #32
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}
 800b05c:	20001e6c 	.word	0x20001e6c
 800b060:	20001e80 	.word	0x20001e80

0800b064 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b064:	b480      	push	{r7}
 800b066:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b068:	4b03      	ldr	r3, [pc, #12]	; (800b078 <vTaskMissedYield+0x14>)
 800b06a:	2201      	movs	r2, #1
 800b06c:	601a      	str	r2, [r3, #0]
}
 800b06e:	bf00      	nop
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr
 800b078:	20001e7c 	.word	0x20001e7c

0800b07c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b084:	f000 f852 	bl	800b12c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b088:	4b06      	ldr	r3, [pc, #24]	; (800b0a4 <prvIdleTask+0x28>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d9f9      	bls.n	800b084 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b090:	4b05      	ldr	r3, [pc, #20]	; (800b0a8 <prvIdleTask+0x2c>)
 800b092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b096:	601a      	str	r2, [r3, #0]
 800b098:	f3bf 8f4f 	dsb	sy
 800b09c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b0a0:	e7f0      	b.n	800b084 <prvIdleTask+0x8>
 800b0a2:	bf00      	nop
 800b0a4:	20001998 	.word	0x20001998
 800b0a8:	e000ed04 	.word	0xe000ed04

0800b0ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b082      	sub	sp, #8
 800b0b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	607b      	str	r3, [r7, #4]
 800b0b6:	e00c      	b.n	800b0d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	4413      	add	r3, r2
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	4a12      	ldr	r2, [pc, #72]	; (800b10c <prvInitialiseTaskLists+0x60>)
 800b0c4:	4413      	add	r3, r2
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7fe fa28 	bl	800951c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	607b      	str	r3, [r7, #4]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2b37      	cmp	r3, #55	; 0x37
 800b0d6:	d9ef      	bls.n	800b0b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b0d8:	480d      	ldr	r0, [pc, #52]	; (800b110 <prvInitialiseTaskLists+0x64>)
 800b0da:	f7fe fa1f 	bl	800951c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b0de:	480d      	ldr	r0, [pc, #52]	; (800b114 <prvInitialiseTaskLists+0x68>)
 800b0e0:	f7fe fa1c 	bl	800951c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b0e4:	480c      	ldr	r0, [pc, #48]	; (800b118 <prvInitialiseTaskLists+0x6c>)
 800b0e6:	f7fe fa19 	bl	800951c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b0ea:	480c      	ldr	r0, [pc, #48]	; (800b11c <prvInitialiseTaskLists+0x70>)
 800b0ec:	f7fe fa16 	bl	800951c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b0f0:	480b      	ldr	r0, [pc, #44]	; (800b120 <prvInitialiseTaskLists+0x74>)
 800b0f2:	f7fe fa13 	bl	800951c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b0f6:	4b0b      	ldr	r3, [pc, #44]	; (800b124 <prvInitialiseTaskLists+0x78>)
 800b0f8:	4a05      	ldr	r2, [pc, #20]	; (800b110 <prvInitialiseTaskLists+0x64>)
 800b0fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b0fc:	4b0a      	ldr	r3, [pc, #40]	; (800b128 <prvInitialiseTaskLists+0x7c>)
 800b0fe:	4a05      	ldr	r2, [pc, #20]	; (800b114 <prvInitialiseTaskLists+0x68>)
 800b100:	601a      	str	r2, [r3, #0]
}
 800b102:	bf00      	nop
 800b104:	3708      	adds	r7, #8
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	20001998 	.word	0x20001998
 800b110:	20001df8 	.word	0x20001df8
 800b114:	20001e0c 	.word	0x20001e0c
 800b118:	20001e28 	.word	0x20001e28
 800b11c:	20001e3c 	.word	0x20001e3c
 800b120:	20001e54 	.word	0x20001e54
 800b124:	20001e20 	.word	0x20001e20
 800b128:	20001e24 	.word	0x20001e24

0800b12c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b132:	e019      	b.n	800b168 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b134:	f000 fed6 	bl	800bee4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b138:	4b10      	ldr	r3, [pc, #64]	; (800b17c <prvCheckTasksWaitingTermination+0x50>)
 800b13a:	68db      	ldr	r3, [r3, #12]
 800b13c:	68db      	ldr	r3, [r3, #12]
 800b13e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	3304      	adds	r3, #4
 800b144:	4618      	mov	r0, r3
 800b146:	f7fe fa73 	bl	8009630 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b14a:	4b0d      	ldr	r3, [pc, #52]	; (800b180 <prvCheckTasksWaitingTermination+0x54>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	3b01      	subs	r3, #1
 800b150:	4a0b      	ldr	r2, [pc, #44]	; (800b180 <prvCheckTasksWaitingTermination+0x54>)
 800b152:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b154:	4b0b      	ldr	r3, [pc, #44]	; (800b184 <prvCheckTasksWaitingTermination+0x58>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	3b01      	subs	r3, #1
 800b15a:	4a0a      	ldr	r2, [pc, #40]	; (800b184 <prvCheckTasksWaitingTermination+0x58>)
 800b15c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b15e:	f000 fef1 	bl	800bf44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 f810 	bl	800b188 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b168:	4b06      	ldr	r3, [pc, #24]	; (800b184 <prvCheckTasksWaitingTermination+0x58>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d1e1      	bne.n	800b134 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b170:	bf00      	nop
 800b172:	bf00      	nop
 800b174:	3708      	adds	r7, #8
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	20001e3c 	.word	0x20001e3c
 800b180:	20001e68 	.word	0x20001e68
 800b184:	20001e50 	.word	0x20001e50

0800b188 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	3354      	adds	r3, #84	; 0x54
 800b194:	4618      	mov	r0, r3
 800b196:	f001 fc87 	bl	800caa8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d108      	bne.n	800b1b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f001 f889 	bl	800c2c0 <vPortFree>
				vPortFree( pxTCB );
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f001 f886 	bl	800c2c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b1b4:	e018      	b.n	800b1e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d103      	bne.n	800b1c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f001 f87d 	bl	800c2c0 <vPortFree>
	}
 800b1c6:	e00f      	b.n	800b1e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b1ce:	2b02      	cmp	r3, #2
 800b1d0:	d00a      	beq.n	800b1e8 <prvDeleteTCB+0x60>
	__asm volatile
 800b1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d6:	f383 8811 	msr	BASEPRI, r3
 800b1da:	f3bf 8f6f 	isb	sy
 800b1de:	f3bf 8f4f 	dsb	sy
 800b1e2:	60fb      	str	r3, [r7, #12]
}
 800b1e4:	bf00      	nop
 800b1e6:	e7fe      	b.n	800b1e6 <prvDeleteTCB+0x5e>
	}
 800b1e8:	bf00      	nop
 800b1ea:	3710      	adds	r7, #16
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1f6:	4b0c      	ldr	r3, [pc, #48]	; (800b228 <prvResetNextTaskUnblockTime+0x38>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d104      	bne.n	800b20a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b200:	4b0a      	ldr	r3, [pc, #40]	; (800b22c <prvResetNextTaskUnblockTime+0x3c>)
 800b202:	f04f 32ff 	mov.w	r2, #4294967295
 800b206:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b208:	e008      	b.n	800b21c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b20a:	4b07      	ldr	r3, [pc, #28]	; (800b228 <prvResetNextTaskUnblockTime+0x38>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	68db      	ldr	r3, [r3, #12]
 800b212:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	4a04      	ldr	r2, [pc, #16]	; (800b22c <prvResetNextTaskUnblockTime+0x3c>)
 800b21a:	6013      	str	r3, [r2, #0]
}
 800b21c:	bf00      	nop
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr
 800b228:	20001e20 	.word	0x20001e20
 800b22c:	20001e88 	.word	0x20001e88

0800b230 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b236:	4b0b      	ldr	r3, [pc, #44]	; (800b264 <xTaskGetSchedulerState+0x34>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d102      	bne.n	800b244 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b23e:	2301      	movs	r3, #1
 800b240:	607b      	str	r3, [r7, #4]
 800b242:	e008      	b.n	800b256 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b244:	4b08      	ldr	r3, [pc, #32]	; (800b268 <xTaskGetSchedulerState+0x38>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d102      	bne.n	800b252 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b24c:	2302      	movs	r3, #2
 800b24e:	607b      	str	r3, [r7, #4]
 800b250:	e001      	b.n	800b256 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b252:	2300      	movs	r3, #0
 800b254:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b256:	687b      	ldr	r3, [r7, #4]
	}
 800b258:	4618      	mov	r0, r3
 800b25a:	370c      	adds	r7, #12
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr
 800b264:	20001e74 	.word	0x20001e74
 800b268:	20001e90 	.word	0x20001e90

0800b26c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b278:	2300      	movs	r3, #0
 800b27a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d051      	beq.n	800b326 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b286:	4b2a      	ldr	r3, [pc, #168]	; (800b330 <xTaskPriorityInherit+0xc4>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d241      	bcs.n	800b314 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	699b      	ldr	r3, [r3, #24]
 800b294:	2b00      	cmp	r3, #0
 800b296:	db06      	blt.n	800b2a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b298:	4b25      	ldr	r3, [pc, #148]	; (800b330 <xTaskPriorityInherit+0xc4>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b29e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	6959      	ldr	r1, [r3, #20]
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ae:	4613      	mov	r3, r2
 800b2b0:	009b      	lsls	r3, r3, #2
 800b2b2:	4413      	add	r3, r2
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	4a1f      	ldr	r2, [pc, #124]	; (800b334 <xTaskPriorityInherit+0xc8>)
 800b2b8:	4413      	add	r3, r2
 800b2ba:	4299      	cmp	r1, r3
 800b2bc:	d122      	bne.n	800b304 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	3304      	adds	r3, #4
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7fe f9b4 	bl	8009630 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b2c8:	4b19      	ldr	r3, [pc, #100]	; (800b330 <xTaskPriorityInherit+0xc4>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2d6:	4b18      	ldr	r3, [pc, #96]	; (800b338 <xTaskPriorityInherit+0xcc>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d903      	bls.n	800b2e6 <xTaskPriorityInherit+0x7a>
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e2:	4a15      	ldr	r2, [pc, #84]	; (800b338 <xTaskPriorityInherit+0xcc>)
 800b2e4:	6013      	str	r3, [r2, #0]
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	4413      	add	r3, r2
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	4a10      	ldr	r2, [pc, #64]	; (800b334 <xTaskPriorityInherit+0xc8>)
 800b2f4:	441a      	add	r2, r3
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	3304      	adds	r3, #4
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	4610      	mov	r0, r2
 800b2fe:	f7fe f93a 	bl	8009576 <vListInsertEnd>
 800b302:	e004      	b.n	800b30e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b304:	4b0a      	ldr	r3, [pc, #40]	; (800b330 <xTaskPriorityInherit+0xc4>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b30e:	2301      	movs	r3, #1
 800b310:	60fb      	str	r3, [r7, #12]
 800b312:	e008      	b.n	800b326 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b318:	4b05      	ldr	r3, [pc, #20]	; (800b330 <xTaskPriorityInherit+0xc4>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b31e:	429a      	cmp	r2, r3
 800b320:	d201      	bcs.n	800b326 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b322:	2301      	movs	r3, #1
 800b324:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b326:	68fb      	ldr	r3, [r7, #12]
	}
 800b328:	4618      	mov	r0, r3
 800b32a:	3710      	adds	r7, #16
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	20001994 	.word	0x20001994
 800b334:	20001998 	.word	0x20001998
 800b338:	20001e70 	.word	0x20001e70

0800b33c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b086      	sub	sp, #24
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b348:	2300      	movs	r3, #0
 800b34a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d056      	beq.n	800b400 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b352:	4b2e      	ldr	r3, [pc, #184]	; (800b40c <xTaskPriorityDisinherit+0xd0>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	693a      	ldr	r2, [r7, #16]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d00a      	beq.n	800b372 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b360:	f383 8811 	msr	BASEPRI, r3
 800b364:	f3bf 8f6f 	isb	sy
 800b368:	f3bf 8f4f 	dsb	sy
 800b36c:	60fb      	str	r3, [r7, #12]
}
 800b36e:	bf00      	nop
 800b370:	e7fe      	b.n	800b370 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b376:	2b00      	cmp	r3, #0
 800b378:	d10a      	bne.n	800b390 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37e:	f383 8811 	msr	BASEPRI, r3
 800b382:	f3bf 8f6f 	isb	sy
 800b386:	f3bf 8f4f 	dsb	sy
 800b38a:	60bb      	str	r3, [r7, #8]
}
 800b38c:	bf00      	nop
 800b38e:	e7fe      	b.n	800b38e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b394:	1e5a      	subs	r2, r3, #1
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d02c      	beq.n	800b400 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d128      	bne.n	800b400 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	3304      	adds	r3, #4
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7fe f93c 	bl	8009630 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d0:	4b0f      	ldr	r3, [pc, #60]	; (800b410 <xTaskPriorityDisinherit+0xd4>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d903      	bls.n	800b3e0 <xTaskPriorityDisinherit+0xa4>
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3dc:	4a0c      	ldr	r2, [pc, #48]	; (800b410 <xTaskPriorityDisinherit+0xd4>)
 800b3de:	6013      	str	r3, [r2, #0]
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3e4:	4613      	mov	r3, r2
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	4413      	add	r3, r2
 800b3ea:	009b      	lsls	r3, r3, #2
 800b3ec:	4a09      	ldr	r2, [pc, #36]	; (800b414 <xTaskPriorityDisinherit+0xd8>)
 800b3ee:	441a      	add	r2, r3
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	3304      	adds	r3, #4
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	4610      	mov	r0, r2
 800b3f8:	f7fe f8bd 	bl	8009576 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b400:	697b      	ldr	r3, [r7, #20]
	}
 800b402:	4618      	mov	r0, r3
 800b404:	3718      	adds	r7, #24
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	20001994 	.word	0x20001994
 800b410:	20001e70 	.word	0x20001e70
 800b414:	20001998 	.word	0x20001998

0800b418 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b088      	sub	sp, #32
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b426:	2301      	movs	r3, #1
 800b428:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d06a      	beq.n	800b506 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b434:	2b00      	cmp	r3, #0
 800b436:	d10a      	bne.n	800b44e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43c:	f383 8811 	msr	BASEPRI, r3
 800b440:	f3bf 8f6f 	isb	sy
 800b444:	f3bf 8f4f 	dsb	sy
 800b448:	60fb      	str	r3, [r7, #12]
}
 800b44a:	bf00      	nop
 800b44c:	e7fe      	b.n	800b44c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b44e:	69bb      	ldr	r3, [r7, #24]
 800b450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b452:	683a      	ldr	r2, [r7, #0]
 800b454:	429a      	cmp	r2, r3
 800b456:	d902      	bls.n	800b45e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	61fb      	str	r3, [r7, #28]
 800b45c:	e002      	b.n	800b464 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b45e:	69bb      	ldr	r3, [r7, #24]
 800b460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b462:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b464:	69bb      	ldr	r3, [r7, #24]
 800b466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b468:	69fa      	ldr	r2, [r7, #28]
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d04b      	beq.n	800b506 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b46e:	69bb      	ldr	r3, [r7, #24]
 800b470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b472:	697a      	ldr	r2, [r7, #20]
 800b474:	429a      	cmp	r2, r3
 800b476:	d146      	bne.n	800b506 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b478:	4b25      	ldr	r3, [pc, #148]	; (800b510 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	69ba      	ldr	r2, [r7, #24]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d10a      	bne.n	800b498 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b486:	f383 8811 	msr	BASEPRI, r3
 800b48a:	f3bf 8f6f 	isb	sy
 800b48e:	f3bf 8f4f 	dsb	sy
 800b492:	60bb      	str	r3, [r7, #8]
}
 800b494:	bf00      	nop
 800b496:	e7fe      	b.n	800b496 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	69fa      	ldr	r2, [r7, #28]
 800b4a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b4a4:	69bb      	ldr	r3, [r7, #24]
 800b4a6:	699b      	ldr	r3, [r3, #24]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	db04      	blt.n	800b4b6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4ac:	69fb      	ldr	r3, [r7, #28]
 800b4ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b4b6:	69bb      	ldr	r3, [r7, #24]
 800b4b8:	6959      	ldr	r1, [r3, #20]
 800b4ba:	693a      	ldr	r2, [r7, #16]
 800b4bc:	4613      	mov	r3, r2
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	4413      	add	r3, r2
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	4a13      	ldr	r2, [pc, #76]	; (800b514 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b4c6:	4413      	add	r3, r2
 800b4c8:	4299      	cmp	r1, r3
 800b4ca:	d11c      	bne.n	800b506 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4cc:	69bb      	ldr	r3, [r7, #24]
 800b4ce:	3304      	adds	r3, #4
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7fe f8ad 	bl	8009630 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4da:	4b0f      	ldr	r3, [pc, #60]	; (800b518 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d903      	bls.n	800b4ea <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b4e2:	69bb      	ldr	r3, [r7, #24]
 800b4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e6:	4a0c      	ldr	r2, [pc, #48]	; (800b518 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b4e8:	6013      	str	r3, [r2, #0]
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ee:	4613      	mov	r3, r2
 800b4f0:	009b      	lsls	r3, r3, #2
 800b4f2:	4413      	add	r3, r2
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	4a07      	ldr	r2, [pc, #28]	; (800b514 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b4f8:	441a      	add	r2, r3
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	3304      	adds	r3, #4
 800b4fe:	4619      	mov	r1, r3
 800b500:	4610      	mov	r0, r2
 800b502:	f7fe f838 	bl	8009576 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b506:	bf00      	nop
 800b508:	3720      	adds	r7, #32
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	20001994 	.word	0x20001994
 800b514:	20001998 	.word	0x20001998
 800b518:	20001e70 	.word	0x20001e70

0800b51c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b51c:	b480      	push	{r7}
 800b51e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b520:	4b07      	ldr	r3, [pc, #28]	; (800b540 <pvTaskIncrementMutexHeldCount+0x24>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d004      	beq.n	800b532 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b528:	4b05      	ldr	r3, [pc, #20]	; (800b540 <pvTaskIncrementMutexHeldCount+0x24>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b52e:	3201      	adds	r2, #1
 800b530:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b532:	4b03      	ldr	r3, [pc, #12]	; (800b540 <pvTaskIncrementMutexHeldCount+0x24>)
 800b534:	681b      	ldr	r3, [r3, #0]
	}
 800b536:	4618      	mov	r0, r3
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr
 800b540:	20001994 	.word	0x20001994

0800b544 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b54e:	4b21      	ldr	r3, [pc, #132]	; (800b5d4 <prvAddCurrentTaskToDelayedList+0x90>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b554:	4b20      	ldr	r3, [pc, #128]	; (800b5d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	3304      	adds	r3, #4
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7fe f868 	bl	8009630 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b566:	d10a      	bne.n	800b57e <prvAddCurrentTaskToDelayedList+0x3a>
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d007      	beq.n	800b57e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b56e:	4b1a      	ldr	r3, [pc, #104]	; (800b5d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	3304      	adds	r3, #4
 800b574:	4619      	mov	r1, r3
 800b576:	4819      	ldr	r0, [pc, #100]	; (800b5dc <prvAddCurrentTaskToDelayedList+0x98>)
 800b578:	f7fd fffd 	bl	8009576 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b57c:	e026      	b.n	800b5cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b57e:	68fa      	ldr	r2, [r7, #12]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	4413      	add	r3, r2
 800b584:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b586:	4b14      	ldr	r3, [pc, #80]	; (800b5d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	68ba      	ldr	r2, [r7, #8]
 800b58c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b58e:	68ba      	ldr	r2, [r7, #8]
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	429a      	cmp	r2, r3
 800b594:	d209      	bcs.n	800b5aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b596:	4b12      	ldr	r3, [pc, #72]	; (800b5e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	4b0f      	ldr	r3, [pc, #60]	; (800b5d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	3304      	adds	r3, #4
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	4610      	mov	r0, r2
 800b5a4:	f7fe f80b 	bl	80095be <vListInsert>
}
 800b5a8:	e010      	b.n	800b5cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b5aa:	4b0e      	ldr	r3, [pc, #56]	; (800b5e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b5ac:	681a      	ldr	r2, [r3, #0]
 800b5ae:	4b0a      	ldr	r3, [pc, #40]	; (800b5d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	3304      	adds	r3, #4
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	4610      	mov	r0, r2
 800b5b8:	f7fe f801 	bl	80095be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b5bc:	4b0a      	ldr	r3, [pc, #40]	; (800b5e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	68ba      	ldr	r2, [r7, #8]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d202      	bcs.n	800b5cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b5c6:	4a08      	ldr	r2, [pc, #32]	; (800b5e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	6013      	str	r3, [r2, #0]
}
 800b5cc:	bf00      	nop
 800b5ce:	3710      	adds	r7, #16
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}
 800b5d4:	20001e6c 	.word	0x20001e6c
 800b5d8:	20001994 	.word	0x20001994
 800b5dc:	20001e54 	.word	0x20001e54
 800b5e0:	20001e24 	.word	0x20001e24
 800b5e4:	20001e20 	.word	0x20001e20
 800b5e8:	20001e88 	.word	0x20001e88

0800b5ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b08a      	sub	sp, #40	; 0x28
 800b5f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b5f6:	f000 fb07 	bl	800bc08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b5fa:	4b1c      	ldr	r3, [pc, #112]	; (800b66c <xTimerCreateTimerTask+0x80>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d021      	beq.n	800b646 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b602:	2300      	movs	r3, #0
 800b604:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b606:	2300      	movs	r3, #0
 800b608:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b60a:	1d3a      	adds	r2, r7, #4
 800b60c:	f107 0108 	add.w	r1, r7, #8
 800b610:	f107 030c 	add.w	r3, r7, #12
 800b614:	4618      	mov	r0, r3
 800b616:	f7fd ff67 	bl	80094e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b61a:	6879      	ldr	r1, [r7, #4]
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	68fa      	ldr	r2, [r7, #12]
 800b620:	9202      	str	r2, [sp, #8]
 800b622:	9301      	str	r3, [sp, #4]
 800b624:	2302      	movs	r3, #2
 800b626:	9300      	str	r3, [sp, #0]
 800b628:	2300      	movs	r3, #0
 800b62a:	460a      	mov	r2, r1
 800b62c:	4910      	ldr	r1, [pc, #64]	; (800b670 <xTimerCreateTimerTask+0x84>)
 800b62e:	4811      	ldr	r0, [pc, #68]	; (800b674 <xTimerCreateTimerTask+0x88>)
 800b630:	f7fe ffb6 	bl	800a5a0 <xTaskCreateStatic>
 800b634:	4603      	mov	r3, r0
 800b636:	4a10      	ldr	r2, [pc, #64]	; (800b678 <xTimerCreateTimerTask+0x8c>)
 800b638:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b63a:	4b0f      	ldr	r3, [pc, #60]	; (800b678 <xTimerCreateTimerTask+0x8c>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d001      	beq.n	800b646 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b642:	2301      	movs	r3, #1
 800b644:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d10a      	bne.n	800b662 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b650:	f383 8811 	msr	BASEPRI, r3
 800b654:	f3bf 8f6f 	isb	sy
 800b658:	f3bf 8f4f 	dsb	sy
 800b65c:	613b      	str	r3, [r7, #16]
}
 800b65e:	bf00      	nop
 800b660:	e7fe      	b.n	800b660 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b662:	697b      	ldr	r3, [r7, #20]
}
 800b664:	4618      	mov	r0, r3
 800b666:	3718      	adds	r7, #24
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}
 800b66c:	20001ec4 	.word	0x20001ec4
 800b670:	0800e32c 	.word	0x0800e32c
 800b674:	0800b7b1 	.word	0x0800b7b1
 800b678:	20001ec8 	.word	0x20001ec8

0800b67c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b08a      	sub	sp, #40	; 0x28
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	607a      	str	r2, [r7, #4]
 800b688:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b68a:	2300      	movs	r3, #0
 800b68c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d10a      	bne.n	800b6aa <xTimerGenericCommand+0x2e>
	__asm volatile
 800b694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b698:	f383 8811 	msr	BASEPRI, r3
 800b69c:	f3bf 8f6f 	isb	sy
 800b6a0:	f3bf 8f4f 	dsb	sy
 800b6a4:	623b      	str	r3, [r7, #32]
}
 800b6a6:	bf00      	nop
 800b6a8:	e7fe      	b.n	800b6a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b6aa:	4b1a      	ldr	r3, [pc, #104]	; (800b714 <xTimerGenericCommand+0x98>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d02a      	beq.n	800b708 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	2b05      	cmp	r3, #5
 800b6c2:	dc18      	bgt.n	800b6f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b6c4:	f7ff fdb4 	bl	800b230 <xTaskGetSchedulerState>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	2b02      	cmp	r3, #2
 800b6cc:	d109      	bne.n	800b6e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b6ce:	4b11      	ldr	r3, [pc, #68]	; (800b714 <xTimerGenericCommand+0x98>)
 800b6d0:	6818      	ldr	r0, [r3, #0]
 800b6d2:	f107 0110 	add.w	r1, r7, #16
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6da:	f7fe f97b 	bl	80099d4 <xQueueGenericSend>
 800b6de:	6278      	str	r0, [r7, #36]	; 0x24
 800b6e0:	e012      	b.n	800b708 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b6e2:	4b0c      	ldr	r3, [pc, #48]	; (800b714 <xTimerGenericCommand+0x98>)
 800b6e4:	6818      	ldr	r0, [r3, #0]
 800b6e6:	f107 0110 	add.w	r1, r7, #16
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	f7fe f971 	bl	80099d4 <xQueueGenericSend>
 800b6f2:	6278      	str	r0, [r7, #36]	; 0x24
 800b6f4:	e008      	b.n	800b708 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b6f6:	4b07      	ldr	r3, [pc, #28]	; (800b714 <xTimerGenericCommand+0x98>)
 800b6f8:	6818      	ldr	r0, [r3, #0]
 800b6fa:	f107 0110 	add.w	r1, r7, #16
 800b6fe:	2300      	movs	r3, #0
 800b700:	683a      	ldr	r2, [r7, #0]
 800b702:	f7fe fa65 	bl	8009bd0 <xQueueGenericSendFromISR>
 800b706:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3728      	adds	r7, #40	; 0x28
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
 800b712:	bf00      	nop
 800b714:	20001ec4 	.word	0x20001ec4

0800b718 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b088      	sub	sp, #32
 800b71c:	af02      	add	r7, sp, #8
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b722:	4b22      	ldr	r3, [pc, #136]	; (800b7ac <prvProcessExpiredTimer+0x94>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	68db      	ldr	r3, [r3, #12]
 800b72a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	3304      	adds	r3, #4
 800b730:	4618      	mov	r0, r3
 800b732:	f7fd ff7d 	bl	8009630 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b73c:	f003 0304 	and.w	r3, r3, #4
 800b740:	2b00      	cmp	r3, #0
 800b742:	d022      	beq.n	800b78a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	699a      	ldr	r2, [r3, #24]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	18d1      	adds	r1, r2, r3
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	683a      	ldr	r2, [r7, #0]
 800b750:	6978      	ldr	r0, [r7, #20]
 800b752:	f000 f8d1 	bl	800b8f8 <prvInsertTimerInActiveList>
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d01f      	beq.n	800b79c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b75c:	2300      	movs	r3, #0
 800b75e:	9300      	str	r3, [sp, #0]
 800b760:	2300      	movs	r3, #0
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	2100      	movs	r1, #0
 800b766:	6978      	ldr	r0, [r7, #20]
 800b768:	f7ff ff88 	bl	800b67c <xTimerGenericCommand>
 800b76c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d113      	bne.n	800b79c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b778:	f383 8811 	msr	BASEPRI, r3
 800b77c:	f3bf 8f6f 	isb	sy
 800b780:	f3bf 8f4f 	dsb	sy
 800b784:	60fb      	str	r3, [r7, #12]
}
 800b786:	bf00      	nop
 800b788:	e7fe      	b.n	800b788 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b790:	f023 0301 	bic.w	r3, r3, #1
 800b794:	b2da      	uxtb	r2, r3
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	6a1b      	ldr	r3, [r3, #32]
 800b7a0:	6978      	ldr	r0, [r7, #20]
 800b7a2:	4798      	blx	r3
}
 800b7a4:	bf00      	nop
 800b7a6:	3718      	adds	r7, #24
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	20001ebc 	.word	0x20001ebc

0800b7b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b7b8:	f107 0308 	add.w	r3, r7, #8
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f000 f857 	bl	800b870 <prvGetNextExpireTime>
 800b7c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	68f8      	ldr	r0, [r7, #12]
 800b7ca:	f000 f803 	bl	800b7d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b7ce:	f000 f8d5 	bl	800b97c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b7d2:	e7f1      	b.n	800b7b8 <prvTimerTask+0x8>

0800b7d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b7de:	f7ff f93b 	bl	800aa58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b7e2:	f107 0308 	add.w	r3, r7, #8
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f000 f866 	bl	800b8b8 <prvSampleTimeNow>
 800b7ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d130      	bne.n	800b856 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d10a      	bne.n	800b810 <prvProcessTimerOrBlockTask+0x3c>
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d806      	bhi.n	800b810 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b802:	f7ff f937 	bl	800aa74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b806:	68f9      	ldr	r1, [r7, #12]
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f7ff ff85 	bl	800b718 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b80e:	e024      	b.n	800b85a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d008      	beq.n	800b828 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b816:	4b13      	ldr	r3, [pc, #76]	; (800b864 <prvProcessTimerOrBlockTask+0x90>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d101      	bne.n	800b824 <prvProcessTimerOrBlockTask+0x50>
 800b820:	2301      	movs	r3, #1
 800b822:	e000      	b.n	800b826 <prvProcessTimerOrBlockTask+0x52>
 800b824:	2300      	movs	r3, #0
 800b826:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b828:	4b0f      	ldr	r3, [pc, #60]	; (800b868 <prvProcessTimerOrBlockTask+0x94>)
 800b82a:	6818      	ldr	r0, [r3, #0]
 800b82c:	687a      	ldr	r2, [r7, #4]
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	1ad3      	subs	r3, r2, r3
 800b832:	683a      	ldr	r2, [r7, #0]
 800b834:	4619      	mov	r1, r3
 800b836:	f7fe fe7f 	bl	800a538 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b83a:	f7ff f91b 	bl	800aa74 <xTaskResumeAll>
 800b83e:	4603      	mov	r3, r0
 800b840:	2b00      	cmp	r3, #0
 800b842:	d10a      	bne.n	800b85a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b844:	4b09      	ldr	r3, [pc, #36]	; (800b86c <prvProcessTimerOrBlockTask+0x98>)
 800b846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b84a:	601a      	str	r2, [r3, #0]
 800b84c:	f3bf 8f4f 	dsb	sy
 800b850:	f3bf 8f6f 	isb	sy
}
 800b854:	e001      	b.n	800b85a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b856:	f7ff f90d 	bl	800aa74 <xTaskResumeAll>
}
 800b85a:	bf00      	nop
 800b85c:	3710      	adds	r7, #16
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop
 800b864:	20001ec0 	.word	0x20001ec0
 800b868:	20001ec4 	.word	0x20001ec4
 800b86c:	e000ed04 	.word	0xe000ed04

0800b870 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b870:	b480      	push	{r7}
 800b872:	b085      	sub	sp, #20
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b878:	4b0e      	ldr	r3, [pc, #56]	; (800b8b4 <prvGetNextExpireTime+0x44>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d101      	bne.n	800b886 <prvGetNextExpireTime+0x16>
 800b882:	2201      	movs	r2, #1
 800b884:	e000      	b.n	800b888 <prvGetNextExpireTime+0x18>
 800b886:	2200      	movs	r2, #0
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d105      	bne.n	800b8a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b894:	4b07      	ldr	r3, [pc, #28]	; (800b8b4 <prvGetNextExpireTime+0x44>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	60fb      	str	r3, [r7, #12]
 800b89e:	e001      	b.n	800b8a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3714      	adds	r7, #20
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b0:	4770      	bx	lr
 800b8b2:	bf00      	nop
 800b8b4:	20001ebc 	.word	0x20001ebc

0800b8b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b8c0:	f7ff f976 	bl	800abb0 <xTaskGetTickCount>
 800b8c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b8c6:	4b0b      	ldr	r3, [pc, #44]	; (800b8f4 <prvSampleTimeNow+0x3c>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	68fa      	ldr	r2, [r7, #12]
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d205      	bcs.n	800b8dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b8d0:	f000 f936 	bl	800bb40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	601a      	str	r2, [r3, #0]
 800b8da:	e002      	b.n	800b8e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b8e2:	4a04      	ldr	r2, [pc, #16]	; (800b8f4 <prvSampleTimeNow+0x3c>)
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3710      	adds	r7, #16
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	20001ecc 	.word	0x20001ecc

0800b8f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b086      	sub	sp, #24
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	60b9      	str	r1, [r7, #8]
 800b902:	607a      	str	r2, [r7, #4]
 800b904:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b906:	2300      	movs	r3, #0
 800b908:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	68ba      	ldr	r2, [r7, #8]
 800b90e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	68fa      	ldr	r2, [r7, #12]
 800b914:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b916:	68ba      	ldr	r2, [r7, #8]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d812      	bhi.n	800b944 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	1ad2      	subs	r2, r2, r3
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	699b      	ldr	r3, [r3, #24]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d302      	bcc.n	800b932 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b92c:	2301      	movs	r3, #1
 800b92e:	617b      	str	r3, [r7, #20]
 800b930:	e01b      	b.n	800b96a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b932:	4b10      	ldr	r3, [pc, #64]	; (800b974 <prvInsertTimerInActiveList+0x7c>)
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	3304      	adds	r3, #4
 800b93a:	4619      	mov	r1, r3
 800b93c:	4610      	mov	r0, r2
 800b93e:	f7fd fe3e 	bl	80095be <vListInsert>
 800b942:	e012      	b.n	800b96a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	429a      	cmp	r2, r3
 800b94a:	d206      	bcs.n	800b95a <prvInsertTimerInActiveList+0x62>
 800b94c:	68ba      	ldr	r2, [r7, #8]
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	429a      	cmp	r2, r3
 800b952:	d302      	bcc.n	800b95a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b954:	2301      	movs	r3, #1
 800b956:	617b      	str	r3, [r7, #20]
 800b958:	e007      	b.n	800b96a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b95a:	4b07      	ldr	r3, [pc, #28]	; (800b978 <prvInsertTimerInActiveList+0x80>)
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	3304      	adds	r3, #4
 800b962:	4619      	mov	r1, r3
 800b964:	4610      	mov	r0, r2
 800b966:	f7fd fe2a 	bl	80095be <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b96a:	697b      	ldr	r3, [r7, #20]
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3718      	adds	r7, #24
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}
 800b974:	20001ec0 	.word	0x20001ec0
 800b978:	20001ebc 	.word	0x20001ebc

0800b97c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b08e      	sub	sp, #56	; 0x38
 800b980:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b982:	e0ca      	b.n	800bb1a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2b00      	cmp	r3, #0
 800b988:	da18      	bge.n	800b9bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b98a:	1d3b      	adds	r3, r7, #4
 800b98c:	3304      	adds	r3, #4
 800b98e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b992:	2b00      	cmp	r3, #0
 800b994:	d10a      	bne.n	800b9ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99a:	f383 8811 	msr	BASEPRI, r3
 800b99e:	f3bf 8f6f 	isb	sy
 800b9a2:	f3bf 8f4f 	dsb	sy
 800b9a6:	61fb      	str	r3, [r7, #28]
}
 800b9a8:	bf00      	nop
 800b9aa:	e7fe      	b.n	800b9aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9b2:	6850      	ldr	r0, [r2, #4]
 800b9b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9b6:	6892      	ldr	r2, [r2, #8]
 800b9b8:	4611      	mov	r1, r2
 800b9ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	f2c0 80aa 	blt.w	800bb18 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ca:	695b      	ldr	r3, [r3, #20]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d004      	beq.n	800b9da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d2:	3304      	adds	r3, #4
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7fd fe2b 	bl	8009630 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b9da:	463b      	mov	r3, r7
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7ff ff6b 	bl	800b8b8 <prvSampleTimeNow>
 800b9e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2b09      	cmp	r3, #9
 800b9e8:	f200 8097 	bhi.w	800bb1a <prvProcessReceivedCommands+0x19e>
 800b9ec:	a201      	add	r2, pc, #4	; (adr r2, 800b9f4 <prvProcessReceivedCommands+0x78>)
 800b9ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f2:	bf00      	nop
 800b9f4:	0800ba1d 	.word	0x0800ba1d
 800b9f8:	0800ba1d 	.word	0x0800ba1d
 800b9fc:	0800ba1d 	.word	0x0800ba1d
 800ba00:	0800ba91 	.word	0x0800ba91
 800ba04:	0800baa5 	.word	0x0800baa5
 800ba08:	0800baef 	.word	0x0800baef
 800ba0c:	0800ba1d 	.word	0x0800ba1d
 800ba10:	0800ba1d 	.word	0x0800ba1d
 800ba14:	0800ba91 	.word	0x0800ba91
 800ba18:	0800baa5 	.word	0x0800baa5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ba1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba22:	f043 0301 	orr.w	r3, r3, #1
 800ba26:	b2da      	uxtb	r2, r3
 800ba28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ba2e:	68ba      	ldr	r2, [r7, #8]
 800ba30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba32:	699b      	ldr	r3, [r3, #24]
 800ba34:	18d1      	adds	r1, r2, r3
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba3c:	f7ff ff5c 	bl	800b8f8 <prvInsertTimerInActiveList>
 800ba40:	4603      	mov	r3, r0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d069      	beq.n	800bb1a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba48:	6a1b      	ldr	r3, [r3, #32]
 800ba4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba54:	f003 0304 	and.w	r3, r3, #4
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d05e      	beq.n	800bb1a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ba5c:	68ba      	ldr	r2, [r7, #8]
 800ba5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba60:	699b      	ldr	r3, [r3, #24]
 800ba62:	441a      	add	r2, r3
 800ba64:	2300      	movs	r3, #0
 800ba66:	9300      	str	r3, [sp, #0]
 800ba68:	2300      	movs	r3, #0
 800ba6a:	2100      	movs	r1, #0
 800ba6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba6e:	f7ff fe05 	bl	800b67c <xTimerGenericCommand>
 800ba72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ba74:	6a3b      	ldr	r3, [r7, #32]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d14f      	bne.n	800bb1a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ba7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7e:	f383 8811 	msr	BASEPRI, r3
 800ba82:	f3bf 8f6f 	isb	sy
 800ba86:	f3bf 8f4f 	dsb	sy
 800ba8a:	61bb      	str	r3, [r7, #24]
}
 800ba8c:	bf00      	nop
 800ba8e:	e7fe      	b.n	800ba8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba96:	f023 0301 	bic.w	r3, r3, #1
 800ba9a:	b2da      	uxtb	r2, r3
 800ba9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800baa2:	e03a      	b.n	800bb1a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800baa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800baaa:	f043 0301 	orr.w	r3, r3, #1
 800baae:	b2da      	uxtb	r2, r3
 800bab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bab6:	68ba      	ldr	r2, [r7, #8]
 800bab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800babc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800babe:	699b      	ldr	r3, [r3, #24]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d10a      	bne.n	800bada <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac8:	f383 8811 	msr	BASEPRI, r3
 800bacc:	f3bf 8f6f 	isb	sy
 800bad0:	f3bf 8f4f 	dsb	sy
 800bad4:	617b      	str	r3, [r7, #20]
}
 800bad6:	bf00      	nop
 800bad8:	e7fe      	b.n	800bad8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800badc:	699a      	ldr	r2, [r3, #24]
 800bade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae0:	18d1      	adds	r1, r2, r3
 800bae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bae8:	f7ff ff06 	bl	800b8f8 <prvInsertTimerInActiveList>
					break;
 800baec:	e015      	b.n	800bb1a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800baee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800baf4:	f003 0302 	and.w	r3, r3, #2
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d103      	bne.n	800bb04 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bafc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bafe:	f000 fbdf 	bl	800c2c0 <vPortFree>
 800bb02:	e00a      	b.n	800bb1a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb0a:	f023 0301 	bic.w	r3, r3, #1
 800bb0e:	b2da      	uxtb	r2, r3
 800bb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bb16:	e000      	b.n	800bb1a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bb18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb1a:	4b08      	ldr	r3, [pc, #32]	; (800bb3c <prvProcessReceivedCommands+0x1c0>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	1d39      	adds	r1, r7, #4
 800bb20:	2200      	movs	r2, #0
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7fe f97c 	bl	8009e20 <xQueueReceive>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	f47f af2a 	bne.w	800b984 <prvProcessReceivedCommands+0x8>
	}
}
 800bb30:	bf00      	nop
 800bb32:	bf00      	nop
 800bb34:	3730      	adds	r7, #48	; 0x30
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	20001ec4 	.word	0x20001ec4

0800bb40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b088      	sub	sp, #32
 800bb44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb46:	e048      	b.n	800bbda <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb48:	4b2d      	ldr	r3, [pc, #180]	; (800bc00 <prvSwitchTimerLists+0xc0>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb52:	4b2b      	ldr	r3, [pc, #172]	; (800bc00 <prvSwitchTimerLists+0xc0>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	3304      	adds	r3, #4
 800bb60:	4618      	mov	r0, r3
 800bb62:	f7fd fd65 	bl	8009630 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	6a1b      	ldr	r3, [r3, #32]
 800bb6a:	68f8      	ldr	r0, [r7, #12]
 800bb6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb74:	f003 0304 	and.w	r3, r3, #4
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d02e      	beq.n	800bbda <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	699b      	ldr	r3, [r3, #24]
 800bb80:	693a      	ldr	r2, [r7, #16]
 800bb82:	4413      	add	r3, r2
 800bb84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bb86:	68ba      	ldr	r2, [r7, #8]
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d90e      	bls.n	800bbac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	68ba      	ldr	r2, [r7, #8]
 800bb92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	68fa      	ldr	r2, [r7, #12]
 800bb98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb9a:	4b19      	ldr	r3, [pc, #100]	; (800bc00 <prvSwitchTimerLists+0xc0>)
 800bb9c:	681a      	ldr	r2, [r3, #0]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	3304      	adds	r3, #4
 800bba2:	4619      	mov	r1, r3
 800bba4:	4610      	mov	r0, r2
 800bba6:	f7fd fd0a 	bl	80095be <vListInsert>
 800bbaa:	e016      	b.n	800bbda <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bbac:	2300      	movs	r3, #0
 800bbae:	9300      	str	r3, [sp, #0]
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	693a      	ldr	r2, [r7, #16]
 800bbb4:	2100      	movs	r1, #0
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f7ff fd60 	bl	800b67c <xTimerGenericCommand>
 800bbbc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d10a      	bne.n	800bbda <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc8:	f383 8811 	msr	BASEPRI, r3
 800bbcc:	f3bf 8f6f 	isb	sy
 800bbd0:	f3bf 8f4f 	dsb	sy
 800bbd4:	603b      	str	r3, [r7, #0]
}
 800bbd6:	bf00      	nop
 800bbd8:	e7fe      	b.n	800bbd8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bbda:	4b09      	ldr	r3, [pc, #36]	; (800bc00 <prvSwitchTimerLists+0xc0>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d1b1      	bne.n	800bb48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bbe4:	4b06      	ldr	r3, [pc, #24]	; (800bc00 <prvSwitchTimerLists+0xc0>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bbea:	4b06      	ldr	r3, [pc, #24]	; (800bc04 <prvSwitchTimerLists+0xc4>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4a04      	ldr	r2, [pc, #16]	; (800bc00 <prvSwitchTimerLists+0xc0>)
 800bbf0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bbf2:	4a04      	ldr	r2, [pc, #16]	; (800bc04 <prvSwitchTimerLists+0xc4>)
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	6013      	str	r3, [r2, #0]
}
 800bbf8:	bf00      	nop
 800bbfa:	3718      	adds	r7, #24
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	20001ebc 	.word	0x20001ebc
 800bc04:	20001ec0 	.word	0x20001ec0

0800bc08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bc0e:	f000 f969 	bl	800bee4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bc12:	4b15      	ldr	r3, [pc, #84]	; (800bc68 <prvCheckForValidListAndQueue+0x60>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d120      	bne.n	800bc5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bc1a:	4814      	ldr	r0, [pc, #80]	; (800bc6c <prvCheckForValidListAndQueue+0x64>)
 800bc1c:	f7fd fc7e 	bl	800951c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bc20:	4813      	ldr	r0, [pc, #76]	; (800bc70 <prvCheckForValidListAndQueue+0x68>)
 800bc22:	f7fd fc7b 	bl	800951c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bc26:	4b13      	ldr	r3, [pc, #76]	; (800bc74 <prvCheckForValidListAndQueue+0x6c>)
 800bc28:	4a10      	ldr	r2, [pc, #64]	; (800bc6c <prvCheckForValidListAndQueue+0x64>)
 800bc2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bc2c:	4b12      	ldr	r3, [pc, #72]	; (800bc78 <prvCheckForValidListAndQueue+0x70>)
 800bc2e:	4a10      	ldr	r2, [pc, #64]	; (800bc70 <prvCheckForValidListAndQueue+0x68>)
 800bc30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bc32:	2300      	movs	r3, #0
 800bc34:	9300      	str	r3, [sp, #0]
 800bc36:	4b11      	ldr	r3, [pc, #68]	; (800bc7c <prvCheckForValidListAndQueue+0x74>)
 800bc38:	4a11      	ldr	r2, [pc, #68]	; (800bc80 <prvCheckForValidListAndQueue+0x78>)
 800bc3a:	2110      	movs	r1, #16
 800bc3c:	200a      	movs	r0, #10
 800bc3e:	f7fd fd89 	bl	8009754 <xQueueGenericCreateStatic>
 800bc42:	4603      	mov	r3, r0
 800bc44:	4a08      	ldr	r2, [pc, #32]	; (800bc68 <prvCheckForValidListAndQueue+0x60>)
 800bc46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bc48:	4b07      	ldr	r3, [pc, #28]	; (800bc68 <prvCheckForValidListAndQueue+0x60>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d005      	beq.n	800bc5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bc50:	4b05      	ldr	r3, [pc, #20]	; (800bc68 <prvCheckForValidListAndQueue+0x60>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	490b      	ldr	r1, [pc, #44]	; (800bc84 <prvCheckForValidListAndQueue+0x7c>)
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7fe fc1a 	bl	800a490 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc5c:	f000 f972 	bl	800bf44 <vPortExitCritical>
}
 800bc60:	bf00      	nop
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	20001ec4 	.word	0x20001ec4
 800bc6c:	20001e94 	.word	0x20001e94
 800bc70:	20001ea8 	.word	0x20001ea8
 800bc74:	20001ebc 	.word	0x20001ebc
 800bc78:	20001ec0 	.word	0x20001ec0
 800bc7c:	20001f70 	.word	0x20001f70
 800bc80:	20001ed0 	.word	0x20001ed0
 800bc84:	0800e334 	.word	0x0800e334

0800bc88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b085      	sub	sp, #20
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	60f8      	str	r0, [r7, #12]
 800bc90:	60b9      	str	r1, [r7, #8]
 800bc92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	3b04      	subs	r3, #4
 800bc98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	3b04      	subs	r3, #4
 800bca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	f023 0201 	bic.w	r2, r3, #1
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	3b04      	subs	r3, #4
 800bcb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bcb8:	4a0c      	ldr	r2, [pc, #48]	; (800bcec <pxPortInitialiseStack+0x64>)
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	3b14      	subs	r3, #20
 800bcc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	3b04      	subs	r3, #4
 800bcce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f06f 0202 	mvn.w	r2, #2
 800bcd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	3b20      	subs	r3, #32
 800bcdc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bcde:	68fb      	ldr	r3, [r7, #12]
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3714      	adds	r7, #20
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr
 800bcec:	0800bcf1 	.word	0x0800bcf1

0800bcf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b085      	sub	sp, #20
 800bcf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bcfa:	4b12      	ldr	r3, [pc, #72]	; (800bd44 <prvTaskExitError+0x54>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd02:	d00a      	beq.n	800bd1a <prvTaskExitError+0x2a>
	__asm volatile
 800bd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd08:	f383 8811 	msr	BASEPRI, r3
 800bd0c:	f3bf 8f6f 	isb	sy
 800bd10:	f3bf 8f4f 	dsb	sy
 800bd14:	60fb      	str	r3, [r7, #12]
}
 800bd16:	bf00      	nop
 800bd18:	e7fe      	b.n	800bd18 <prvTaskExitError+0x28>
	__asm volatile
 800bd1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd1e:	f383 8811 	msr	BASEPRI, r3
 800bd22:	f3bf 8f6f 	isb	sy
 800bd26:	f3bf 8f4f 	dsb	sy
 800bd2a:	60bb      	str	r3, [r7, #8]
}
 800bd2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bd2e:	bf00      	nop
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d0fc      	beq.n	800bd30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bd36:	bf00      	nop
 800bd38:	bf00      	nop
 800bd3a:	3714      	adds	r7, #20
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr
 800bd44:	2000000c 	.word	0x2000000c
	...

0800bd50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bd50:	4b07      	ldr	r3, [pc, #28]	; (800bd70 <pxCurrentTCBConst2>)
 800bd52:	6819      	ldr	r1, [r3, #0]
 800bd54:	6808      	ldr	r0, [r1, #0]
 800bd56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd5a:	f380 8809 	msr	PSP, r0
 800bd5e:	f3bf 8f6f 	isb	sy
 800bd62:	f04f 0000 	mov.w	r0, #0
 800bd66:	f380 8811 	msr	BASEPRI, r0
 800bd6a:	4770      	bx	lr
 800bd6c:	f3af 8000 	nop.w

0800bd70 <pxCurrentTCBConst2>:
 800bd70:	20001994 	.word	0x20001994
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bd74:	bf00      	nop
 800bd76:	bf00      	nop

0800bd78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bd78:	4808      	ldr	r0, [pc, #32]	; (800bd9c <prvPortStartFirstTask+0x24>)
 800bd7a:	6800      	ldr	r0, [r0, #0]
 800bd7c:	6800      	ldr	r0, [r0, #0]
 800bd7e:	f380 8808 	msr	MSP, r0
 800bd82:	f04f 0000 	mov.w	r0, #0
 800bd86:	f380 8814 	msr	CONTROL, r0
 800bd8a:	b662      	cpsie	i
 800bd8c:	b661      	cpsie	f
 800bd8e:	f3bf 8f4f 	dsb	sy
 800bd92:	f3bf 8f6f 	isb	sy
 800bd96:	df00      	svc	0
 800bd98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bd9a:	bf00      	nop
 800bd9c:	e000ed08 	.word	0xe000ed08

0800bda0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b086      	sub	sp, #24
 800bda4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bda6:	4b46      	ldr	r3, [pc, #280]	; (800bec0 <xPortStartScheduler+0x120>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4a46      	ldr	r2, [pc, #280]	; (800bec4 <xPortStartScheduler+0x124>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d10a      	bne.n	800bdc6 <xPortStartScheduler+0x26>
	__asm volatile
 800bdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb4:	f383 8811 	msr	BASEPRI, r3
 800bdb8:	f3bf 8f6f 	isb	sy
 800bdbc:	f3bf 8f4f 	dsb	sy
 800bdc0:	613b      	str	r3, [r7, #16]
}
 800bdc2:	bf00      	nop
 800bdc4:	e7fe      	b.n	800bdc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bdc6:	4b3e      	ldr	r3, [pc, #248]	; (800bec0 <xPortStartScheduler+0x120>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4a3f      	ldr	r2, [pc, #252]	; (800bec8 <xPortStartScheduler+0x128>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d10a      	bne.n	800bde6 <xPortStartScheduler+0x46>
	__asm volatile
 800bdd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd4:	f383 8811 	msr	BASEPRI, r3
 800bdd8:	f3bf 8f6f 	isb	sy
 800bddc:	f3bf 8f4f 	dsb	sy
 800bde0:	60fb      	str	r3, [r7, #12]
}
 800bde2:	bf00      	nop
 800bde4:	e7fe      	b.n	800bde4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bde6:	4b39      	ldr	r3, [pc, #228]	; (800becc <xPortStartScheduler+0x12c>)
 800bde8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	b2db      	uxtb	r3, r3
 800bdf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	22ff      	movs	r2, #255	; 0xff
 800bdf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800be00:	78fb      	ldrb	r3, [r7, #3]
 800be02:	b2db      	uxtb	r3, r3
 800be04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800be08:	b2da      	uxtb	r2, r3
 800be0a:	4b31      	ldr	r3, [pc, #196]	; (800bed0 <xPortStartScheduler+0x130>)
 800be0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800be0e:	4b31      	ldr	r3, [pc, #196]	; (800bed4 <xPortStartScheduler+0x134>)
 800be10:	2207      	movs	r2, #7
 800be12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be14:	e009      	b.n	800be2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800be16:	4b2f      	ldr	r3, [pc, #188]	; (800bed4 <xPortStartScheduler+0x134>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	3b01      	subs	r3, #1
 800be1c:	4a2d      	ldr	r2, [pc, #180]	; (800bed4 <xPortStartScheduler+0x134>)
 800be1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800be20:	78fb      	ldrb	r3, [r7, #3]
 800be22:	b2db      	uxtb	r3, r3
 800be24:	005b      	lsls	r3, r3, #1
 800be26:	b2db      	uxtb	r3, r3
 800be28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be2a:	78fb      	ldrb	r3, [r7, #3]
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be32:	2b80      	cmp	r3, #128	; 0x80
 800be34:	d0ef      	beq.n	800be16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800be36:	4b27      	ldr	r3, [pc, #156]	; (800bed4 <xPortStartScheduler+0x134>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f1c3 0307 	rsb	r3, r3, #7
 800be3e:	2b04      	cmp	r3, #4
 800be40:	d00a      	beq.n	800be58 <xPortStartScheduler+0xb8>
	__asm volatile
 800be42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be46:	f383 8811 	msr	BASEPRI, r3
 800be4a:	f3bf 8f6f 	isb	sy
 800be4e:	f3bf 8f4f 	dsb	sy
 800be52:	60bb      	str	r3, [r7, #8]
}
 800be54:	bf00      	nop
 800be56:	e7fe      	b.n	800be56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800be58:	4b1e      	ldr	r3, [pc, #120]	; (800bed4 <xPortStartScheduler+0x134>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	021b      	lsls	r3, r3, #8
 800be5e:	4a1d      	ldr	r2, [pc, #116]	; (800bed4 <xPortStartScheduler+0x134>)
 800be60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800be62:	4b1c      	ldr	r3, [pc, #112]	; (800bed4 <xPortStartScheduler+0x134>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800be6a:	4a1a      	ldr	r2, [pc, #104]	; (800bed4 <xPortStartScheduler+0x134>)
 800be6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	b2da      	uxtb	r2, r3
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800be76:	4b18      	ldr	r3, [pc, #96]	; (800bed8 <xPortStartScheduler+0x138>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	4a17      	ldr	r2, [pc, #92]	; (800bed8 <xPortStartScheduler+0x138>)
 800be7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800be80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800be82:	4b15      	ldr	r3, [pc, #84]	; (800bed8 <xPortStartScheduler+0x138>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4a14      	ldr	r2, [pc, #80]	; (800bed8 <xPortStartScheduler+0x138>)
 800be88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800be8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800be8e:	f000 f8dd 	bl	800c04c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800be92:	4b12      	ldr	r3, [pc, #72]	; (800bedc <xPortStartScheduler+0x13c>)
 800be94:	2200      	movs	r2, #0
 800be96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800be98:	f000 f8fc 	bl	800c094 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800be9c:	4b10      	ldr	r3, [pc, #64]	; (800bee0 <xPortStartScheduler+0x140>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a0f      	ldr	r2, [pc, #60]	; (800bee0 <xPortStartScheduler+0x140>)
 800bea2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bea6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bea8:	f7ff ff66 	bl	800bd78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800beac:	f7fe ff4a 	bl	800ad44 <vTaskSwitchContext>
	prvTaskExitError();
 800beb0:	f7ff ff1e 	bl	800bcf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3718      	adds	r7, #24
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	e000ed00 	.word	0xe000ed00
 800bec4:	410fc271 	.word	0x410fc271
 800bec8:	410fc270 	.word	0x410fc270
 800becc:	e000e400 	.word	0xe000e400
 800bed0:	20001fc0 	.word	0x20001fc0
 800bed4:	20001fc4 	.word	0x20001fc4
 800bed8:	e000ed20 	.word	0xe000ed20
 800bedc:	2000000c 	.word	0x2000000c
 800bee0:	e000ef34 	.word	0xe000ef34

0800bee4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bee4:	b480      	push	{r7}
 800bee6:	b083      	sub	sp, #12
 800bee8:	af00      	add	r7, sp, #0
	__asm volatile
 800beea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beee:	f383 8811 	msr	BASEPRI, r3
 800bef2:	f3bf 8f6f 	isb	sy
 800bef6:	f3bf 8f4f 	dsb	sy
 800befa:	607b      	str	r3, [r7, #4]
}
 800befc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800befe:	4b0f      	ldr	r3, [pc, #60]	; (800bf3c <vPortEnterCritical+0x58>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	3301      	adds	r3, #1
 800bf04:	4a0d      	ldr	r2, [pc, #52]	; (800bf3c <vPortEnterCritical+0x58>)
 800bf06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bf08:	4b0c      	ldr	r3, [pc, #48]	; (800bf3c <vPortEnterCritical+0x58>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	d10f      	bne.n	800bf30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bf10:	4b0b      	ldr	r3, [pc, #44]	; (800bf40 <vPortEnterCritical+0x5c>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	b2db      	uxtb	r3, r3
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d00a      	beq.n	800bf30 <vPortEnterCritical+0x4c>
	__asm volatile
 800bf1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1e:	f383 8811 	msr	BASEPRI, r3
 800bf22:	f3bf 8f6f 	isb	sy
 800bf26:	f3bf 8f4f 	dsb	sy
 800bf2a:	603b      	str	r3, [r7, #0]
}
 800bf2c:	bf00      	nop
 800bf2e:	e7fe      	b.n	800bf2e <vPortEnterCritical+0x4a>
	}
}
 800bf30:	bf00      	nop
 800bf32:	370c      	adds	r7, #12
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr
 800bf3c:	2000000c 	.word	0x2000000c
 800bf40:	e000ed04 	.word	0xe000ed04

0800bf44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bf44:	b480      	push	{r7}
 800bf46:	b083      	sub	sp, #12
 800bf48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bf4a:	4b12      	ldr	r3, [pc, #72]	; (800bf94 <vPortExitCritical+0x50>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d10a      	bne.n	800bf68 <vPortExitCritical+0x24>
	__asm volatile
 800bf52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf56:	f383 8811 	msr	BASEPRI, r3
 800bf5a:	f3bf 8f6f 	isb	sy
 800bf5e:	f3bf 8f4f 	dsb	sy
 800bf62:	607b      	str	r3, [r7, #4]
}
 800bf64:	bf00      	nop
 800bf66:	e7fe      	b.n	800bf66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bf68:	4b0a      	ldr	r3, [pc, #40]	; (800bf94 <vPortExitCritical+0x50>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	3b01      	subs	r3, #1
 800bf6e:	4a09      	ldr	r2, [pc, #36]	; (800bf94 <vPortExitCritical+0x50>)
 800bf70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bf72:	4b08      	ldr	r3, [pc, #32]	; (800bf94 <vPortExitCritical+0x50>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d105      	bne.n	800bf86 <vPortExitCritical+0x42>
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	f383 8811 	msr	BASEPRI, r3
}
 800bf84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bf86:	bf00      	nop
 800bf88:	370c      	adds	r7, #12
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr
 800bf92:	bf00      	nop
 800bf94:	2000000c 	.word	0x2000000c
	...

0800bfa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bfa0:	f3ef 8009 	mrs	r0, PSP
 800bfa4:	f3bf 8f6f 	isb	sy
 800bfa8:	4b15      	ldr	r3, [pc, #84]	; (800c000 <pxCurrentTCBConst>)
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	f01e 0f10 	tst.w	lr, #16
 800bfb0:	bf08      	it	eq
 800bfb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bfb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfba:	6010      	str	r0, [r2, #0]
 800bfbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bfc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bfc4:	f380 8811 	msr	BASEPRI, r0
 800bfc8:	f3bf 8f4f 	dsb	sy
 800bfcc:	f3bf 8f6f 	isb	sy
 800bfd0:	f7fe feb8 	bl	800ad44 <vTaskSwitchContext>
 800bfd4:	f04f 0000 	mov.w	r0, #0
 800bfd8:	f380 8811 	msr	BASEPRI, r0
 800bfdc:	bc09      	pop	{r0, r3}
 800bfde:	6819      	ldr	r1, [r3, #0]
 800bfe0:	6808      	ldr	r0, [r1, #0]
 800bfe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe6:	f01e 0f10 	tst.w	lr, #16
 800bfea:	bf08      	it	eq
 800bfec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bff0:	f380 8809 	msr	PSP, r0
 800bff4:	f3bf 8f6f 	isb	sy
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	f3af 8000 	nop.w

0800c000 <pxCurrentTCBConst>:
 800c000:	20001994 	.word	0x20001994
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c004:	bf00      	nop
 800c006:	bf00      	nop

0800c008 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
	__asm volatile
 800c00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c012:	f383 8811 	msr	BASEPRI, r3
 800c016:	f3bf 8f6f 	isb	sy
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	607b      	str	r3, [r7, #4]
}
 800c020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c022:	f7fe fdd5 	bl	800abd0 <xTaskIncrementTick>
 800c026:	4603      	mov	r3, r0
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d003      	beq.n	800c034 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c02c:	4b06      	ldr	r3, [pc, #24]	; (800c048 <xPortSysTickHandler+0x40>)
 800c02e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c032:	601a      	str	r2, [r3, #0]
 800c034:	2300      	movs	r3, #0
 800c036:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	f383 8811 	msr	BASEPRI, r3
}
 800c03e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c040:	bf00      	nop
 800c042:	3708      	adds	r7, #8
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}
 800c048:	e000ed04 	.word	0xe000ed04

0800c04c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c04c:	b480      	push	{r7}
 800c04e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c050:	4b0b      	ldr	r3, [pc, #44]	; (800c080 <vPortSetupTimerInterrupt+0x34>)
 800c052:	2200      	movs	r2, #0
 800c054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c056:	4b0b      	ldr	r3, [pc, #44]	; (800c084 <vPortSetupTimerInterrupt+0x38>)
 800c058:	2200      	movs	r2, #0
 800c05a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c05c:	4b0a      	ldr	r3, [pc, #40]	; (800c088 <vPortSetupTimerInterrupt+0x3c>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4a0a      	ldr	r2, [pc, #40]	; (800c08c <vPortSetupTimerInterrupt+0x40>)
 800c062:	fba2 2303 	umull	r2, r3, r2, r3
 800c066:	099b      	lsrs	r3, r3, #6
 800c068:	4a09      	ldr	r2, [pc, #36]	; (800c090 <vPortSetupTimerInterrupt+0x44>)
 800c06a:	3b01      	subs	r3, #1
 800c06c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c06e:	4b04      	ldr	r3, [pc, #16]	; (800c080 <vPortSetupTimerInterrupt+0x34>)
 800c070:	2207      	movs	r2, #7
 800c072:	601a      	str	r2, [r3, #0]
}
 800c074:	bf00      	nop
 800c076:	46bd      	mov	sp, r7
 800c078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07c:	4770      	bx	lr
 800c07e:	bf00      	nop
 800c080:	e000e010 	.word	0xe000e010
 800c084:	e000e018 	.word	0xe000e018
 800c088:	20000000 	.word	0x20000000
 800c08c:	10624dd3 	.word	0x10624dd3
 800c090:	e000e014 	.word	0xe000e014

0800c094 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c094:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c0a4 <vPortEnableVFP+0x10>
 800c098:	6801      	ldr	r1, [r0, #0]
 800c09a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c09e:	6001      	str	r1, [r0, #0]
 800c0a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c0a2:	bf00      	nop
 800c0a4:	e000ed88 	.word	0xe000ed88

0800c0a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b085      	sub	sp, #20
 800c0ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c0ae:	f3ef 8305 	mrs	r3, IPSR
 800c0b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2b0f      	cmp	r3, #15
 800c0b8:	d914      	bls.n	800c0e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c0ba:	4a17      	ldr	r2, [pc, #92]	; (800c118 <vPortValidateInterruptPriority+0x70>)
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	4413      	add	r3, r2
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c0c4:	4b15      	ldr	r3, [pc, #84]	; (800c11c <vPortValidateInterruptPriority+0x74>)
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	7afa      	ldrb	r2, [r7, #11]
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d20a      	bcs.n	800c0e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d2:	f383 8811 	msr	BASEPRI, r3
 800c0d6:	f3bf 8f6f 	isb	sy
 800c0da:	f3bf 8f4f 	dsb	sy
 800c0de:	607b      	str	r3, [r7, #4]
}
 800c0e0:	bf00      	nop
 800c0e2:	e7fe      	b.n	800c0e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c0e4:	4b0e      	ldr	r3, [pc, #56]	; (800c120 <vPortValidateInterruptPriority+0x78>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c0ec:	4b0d      	ldr	r3, [pc, #52]	; (800c124 <vPortValidateInterruptPriority+0x7c>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d90a      	bls.n	800c10a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f8:	f383 8811 	msr	BASEPRI, r3
 800c0fc:	f3bf 8f6f 	isb	sy
 800c100:	f3bf 8f4f 	dsb	sy
 800c104:	603b      	str	r3, [r7, #0]
}
 800c106:	bf00      	nop
 800c108:	e7fe      	b.n	800c108 <vPortValidateInterruptPriority+0x60>
	}
 800c10a:	bf00      	nop
 800c10c:	3714      	adds	r7, #20
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr
 800c116:	bf00      	nop
 800c118:	e000e3f0 	.word	0xe000e3f0
 800c11c:	20001fc0 	.word	0x20001fc0
 800c120:	e000ed0c 	.word	0xe000ed0c
 800c124:	20001fc4 	.word	0x20001fc4

0800c128 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b08a      	sub	sp, #40	; 0x28
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c130:	2300      	movs	r3, #0
 800c132:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c134:	f7fe fc90 	bl	800aa58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c138:	4b5b      	ldr	r3, [pc, #364]	; (800c2a8 <pvPortMalloc+0x180>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d101      	bne.n	800c144 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c140:	f000 f920 	bl	800c384 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c144:	4b59      	ldr	r3, [pc, #356]	; (800c2ac <pvPortMalloc+0x184>)
 800c146:	681a      	ldr	r2, [r3, #0]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	4013      	ands	r3, r2
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	f040 8093 	bne.w	800c278 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d01d      	beq.n	800c194 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c158:	2208      	movs	r2, #8
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	4413      	add	r3, r2
 800c15e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f003 0307 	and.w	r3, r3, #7
 800c166:	2b00      	cmp	r3, #0
 800c168:	d014      	beq.n	800c194 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f023 0307 	bic.w	r3, r3, #7
 800c170:	3308      	adds	r3, #8
 800c172:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f003 0307 	and.w	r3, r3, #7
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d00a      	beq.n	800c194 <pvPortMalloc+0x6c>
	__asm volatile
 800c17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c182:	f383 8811 	msr	BASEPRI, r3
 800c186:	f3bf 8f6f 	isb	sy
 800c18a:	f3bf 8f4f 	dsb	sy
 800c18e:	617b      	str	r3, [r7, #20]
}
 800c190:	bf00      	nop
 800c192:	e7fe      	b.n	800c192 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d06e      	beq.n	800c278 <pvPortMalloc+0x150>
 800c19a:	4b45      	ldr	r3, [pc, #276]	; (800c2b0 <pvPortMalloc+0x188>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d869      	bhi.n	800c278 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c1a4:	4b43      	ldr	r3, [pc, #268]	; (800c2b4 <pvPortMalloc+0x18c>)
 800c1a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c1a8:	4b42      	ldr	r3, [pc, #264]	; (800c2b4 <pvPortMalloc+0x18c>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c1ae:	e004      	b.n	800c1ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d903      	bls.n	800c1cc <pvPortMalloc+0xa4>
 800c1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d1f1      	bne.n	800c1b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c1cc:	4b36      	ldr	r3, [pc, #216]	; (800c2a8 <pvPortMalloc+0x180>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d050      	beq.n	800c278 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c1d6:	6a3b      	ldr	r3, [r7, #32]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	2208      	movs	r2, #8
 800c1dc:	4413      	add	r3, r2
 800c1de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	6a3b      	ldr	r3, [r7, #32]
 800c1e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ea:	685a      	ldr	r2, [r3, #4]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	1ad2      	subs	r2, r2, r3
 800c1f0:	2308      	movs	r3, #8
 800c1f2:	005b      	lsls	r3, r3, #1
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d91f      	bls.n	800c238 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c1f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c200:	69bb      	ldr	r3, [r7, #24]
 800c202:	f003 0307 	and.w	r3, r3, #7
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00a      	beq.n	800c220 <pvPortMalloc+0xf8>
	__asm volatile
 800c20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20e:	f383 8811 	msr	BASEPRI, r3
 800c212:	f3bf 8f6f 	isb	sy
 800c216:	f3bf 8f4f 	dsb	sy
 800c21a:	613b      	str	r3, [r7, #16]
}
 800c21c:	bf00      	nop
 800c21e:	e7fe      	b.n	800c21e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c222:	685a      	ldr	r2, [r3, #4]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	1ad2      	subs	r2, r2, r3
 800c228:	69bb      	ldr	r3, [r7, #24]
 800c22a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c232:	69b8      	ldr	r0, [r7, #24]
 800c234:	f000 f908 	bl	800c448 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c238:	4b1d      	ldr	r3, [pc, #116]	; (800c2b0 <pvPortMalloc+0x188>)
 800c23a:	681a      	ldr	r2, [r3, #0]
 800c23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	1ad3      	subs	r3, r2, r3
 800c242:	4a1b      	ldr	r2, [pc, #108]	; (800c2b0 <pvPortMalloc+0x188>)
 800c244:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c246:	4b1a      	ldr	r3, [pc, #104]	; (800c2b0 <pvPortMalloc+0x188>)
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	4b1b      	ldr	r3, [pc, #108]	; (800c2b8 <pvPortMalloc+0x190>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	429a      	cmp	r2, r3
 800c250:	d203      	bcs.n	800c25a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c252:	4b17      	ldr	r3, [pc, #92]	; (800c2b0 <pvPortMalloc+0x188>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	4a18      	ldr	r2, [pc, #96]	; (800c2b8 <pvPortMalloc+0x190>)
 800c258:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25c:	685a      	ldr	r2, [r3, #4]
 800c25e:	4b13      	ldr	r3, [pc, #76]	; (800c2ac <pvPortMalloc+0x184>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	431a      	orrs	r2, r3
 800c264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c266:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26a:	2200      	movs	r2, #0
 800c26c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c26e:	4b13      	ldr	r3, [pc, #76]	; (800c2bc <pvPortMalloc+0x194>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	3301      	adds	r3, #1
 800c274:	4a11      	ldr	r2, [pc, #68]	; (800c2bc <pvPortMalloc+0x194>)
 800c276:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c278:	f7fe fbfc 	bl	800aa74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	f003 0307 	and.w	r3, r3, #7
 800c282:	2b00      	cmp	r3, #0
 800c284:	d00a      	beq.n	800c29c <pvPortMalloc+0x174>
	__asm volatile
 800c286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c28a:	f383 8811 	msr	BASEPRI, r3
 800c28e:	f3bf 8f6f 	isb	sy
 800c292:	f3bf 8f4f 	dsb	sy
 800c296:	60fb      	str	r3, [r7, #12]
}
 800c298:	bf00      	nop
 800c29a:	e7fe      	b.n	800c29a <pvPortMalloc+0x172>
	return pvReturn;
 800c29c:	69fb      	ldr	r3, [r7, #28]
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3728      	adds	r7, #40	; 0x28
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	20002b88 	.word	0x20002b88
 800c2ac:	20002b9c 	.word	0x20002b9c
 800c2b0:	20002b8c 	.word	0x20002b8c
 800c2b4:	20002b80 	.word	0x20002b80
 800c2b8:	20002b90 	.word	0x20002b90
 800c2bc:	20002b94 	.word	0x20002b94

0800c2c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b086      	sub	sp, #24
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d04d      	beq.n	800c36e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c2d2:	2308      	movs	r3, #8
 800c2d4:	425b      	negs	r3, r3
 800c2d6:	697a      	ldr	r2, [r7, #20]
 800c2d8:	4413      	add	r3, r2
 800c2da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	685a      	ldr	r2, [r3, #4]
 800c2e4:	4b24      	ldr	r3, [pc, #144]	; (800c378 <vPortFree+0xb8>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4013      	ands	r3, r2
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d10a      	bne.n	800c304 <vPortFree+0x44>
	__asm volatile
 800c2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f2:	f383 8811 	msr	BASEPRI, r3
 800c2f6:	f3bf 8f6f 	isb	sy
 800c2fa:	f3bf 8f4f 	dsb	sy
 800c2fe:	60fb      	str	r3, [r7, #12]
}
 800c300:	bf00      	nop
 800c302:	e7fe      	b.n	800c302 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d00a      	beq.n	800c322 <vPortFree+0x62>
	__asm volatile
 800c30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c310:	f383 8811 	msr	BASEPRI, r3
 800c314:	f3bf 8f6f 	isb	sy
 800c318:	f3bf 8f4f 	dsb	sy
 800c31c:	60bb      	str	r3, [r7, #8]
}
 800c31e:	bf00      	nop
 800c320:	e7fe      	b.n	800c320 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	685a      	ldr	r2, [r3, #4]
 800c326:	4b14      	ldr	r3, [pc, #80]	; (800c378 <vPortFree+0xb8>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4013      	ands	r3, r2
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d01e      	beq.n	800c36e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d11a      	bne.n	800c36e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	685a      	ldr	r2, [r3, #4]
 800c33c:	4b0e      	ldr	r3, [pc, #56]	; (800c378 <vPortFree+0xb8>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	43db      	mvns	r3, r3
 800c342:	401a      	ands	r2, r3
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c348:	f7fe fb86 	bl	800aa58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	685a      	ldr	r2, [r3, #4]
 800c350:	4b0a      	ldr	r3, [pc, #40]	; (800c37c <vPortFree+0xbc>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	4413      	add	r3, r2
 800c356:	4a09      	ldr	r2, [pc, #36]	; (800c37c <vPortFree+0xbc>)
 800c358:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c35a:	6938      	ldr	r0, [r7, #16]
 800c35c:	f000 f874 	bl	800c448 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c360:	4b07      	ldr	r3, [pc, #28]	; (800c380 <vPortFree+0xc0>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	3301      	adds	r3, #1
 800c366:	4a06      	ldr	r2, [pc, #24]	; (800c380 <vPortFree+0xc0>)
 800c368:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c36a:	f7fe fb83 	bl	800aa74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c36e:	bf00      	nop
 800c370:	3718      	adds	r7, #24
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
 800c376:	bf00      	nop
 800c378:	20002b9c 	.word	0x20002b9c
 800c37c:	20002b8c 	.word	0x20002b8c
 800c380:	20002b98 	.word	0x20002b98

0800c384 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c384:	b480      	push	{r7}
 800c386:	b085      	sub	sp, #20
 800c388:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c38a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800c38e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c390:	4b27      	ldr	r3, [pc, #156]	; (800c430 <prvHeapInit+0xac>)
 800c392:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f003 0307 	and.w	r3, r3, #7
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d00c      	beq.n	800c3b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	3307      	adds	r3, #7
 800c3a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f023 0307 	bic.w	r3, r3, #7
 800c3aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c3ac:	68ba      	ldr	r2, [r7, #8]
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	1ad3      	subs	r3, r2, r3
 800c3b2:	4a1f      	ldr	r2, [pc, #124]	; (800c430 <prvHeapInit+0xac>)
 800c3b4:	4413      	add	r3, r2
 800c3b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c3bc:	4a1d      	ldr	r2, [pc, #116]	; (800c434 <prvHeapInit+0xb0>)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c3c2:	4b1c      	ldr	r3, [pc, #112]	; (800c434 <prvHeapInit+0xb0>)
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	68ba      	ldr	r2, [r7, #8]
 800c3cc:	4413      	add	r3, r2
 800c3ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c3d0:	2208      	movs	r2, #8
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	1a9b      	subs	r3, r3, r2
 800c3d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	f023 0307 	bic.w	r3, r3, #7
 800c3de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	4a15      	ldr	r2, [pc, #84]	; (800c438 <prvHeapInit+0xb4>)
 800c3e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c3e6:	4b14      	ldr	r3, [pc, #80]	; (800c438 <prvHeapInit+0xb4>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c3ee:	4b12      	ldr	r3, [pc, #72]	; (800c438 <prvHeapInit+0xb4>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	68fa      	ldr	r2, [r7, #12]
 800c3fe:	1ad2      	subs	r2, r2, r3
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c404:	4b0c      	ldr	r3, [pc, #48]	; (800c438 <prvHeapInit+0xb4>)
 800c406:	681a      	ldr	r2, [r3, #0]
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	4a0a      	ldr	r2, [pc, #40]	; (800c43c <prvHeapInit+0xb8>)
 800c412:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	685b      	ldr	r3, [r3, #4]
 800c418:	4a09      	ldr	r2, [pc, #36]	; (800c440 <prvHeapInit+0xbc>)
 800c41a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c41c:	4b09      	ldr	r3, [pc, #36]	; (800c444 <prvHeapInit+0xc0>)
 800c41e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c422:	601a      	str	r2, [r3, #0]
}
 800c424:	bf00      	nop
 800c426:	3714      	adds	r7, #20
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr
 800c430:	20001fc8 	.word	0x20001fc8
 800c434:	20002b80 	.word	0x20002b80
 800c438:	20002b88 	.word	0x20002b88
 800c43c:	20002b90 	.word	0x20002b90
 800c440:	20002b8c 	.word	0x20002b8c
 800c444:	20002b9c 	.word	0x20002b9c

0800c448 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c448:	b480      	push	{r7}
 800c44a:	b085      	sub	sp, #20
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c450:	4b28      	ldr	r3, [pc, #160]	; (800c4f4 <prvInsertBlockIntoFreeList+0xac>)
 800c452:	60fb      	str	r3, [r7, #12]
 800c454:	e002      	b.n	800c45c <prvInsertBlockIntoFreeList+0x14>
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	60fb      	str	r3, [r7, #12]
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	429a      	cmp	r2, r3
 800c464:	d8f7      	bhi.n	800c456 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	68ba      	ldr	r2, [r7, #8]
 800c470:	4413      	add	r3, r2
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	429a      	cmp	r2, r3
 800c476:	d108      	bne.n	800c48a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	685a      	ldr	r2, [r3, #4]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	685b      	ldr	r3, [r3, #4]
 800c480:	441a      	add	r2, r3
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	68ba      	ldr	r2, [r7, #8]
 800c494:	441a      	add	r2, r3
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d118      	bne.n	800c4d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681a      	ldr	r2, [r3, #0]
 800c4a2:	4b15      	ldr	r3, [pc, #84]	; (800c4f8 <prvInsertBlockIntoFreeList+0xb0>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d00d      	beq.n	800c4c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	685a      	ldr	r2, [r3, #4]
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	441a      	add	r2, r3
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	681a      	ldr	r2, [r3, #0]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	601a      	str	r2, [r3, #0]
 800c4c4:	e008      	b.n	800c4d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c4c6:	4b0c      	ldr	r3, [pc, #48]	; (800c4f8 <prvInsertBlockIntoFreeList+0xb0>)
 800c4c8:	681a      	ldr	r2, [r3, #0]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	601a      	str	r2, [r3, #0]
 800c4ce:	e003      	b.n	800c4d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681a      	ldr	r2, [r3, #0]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c4d8:	68fa      	ldr	r2, [r7, #12]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	d002      	beq.n	800c4e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4e6:	bf00      	nop
 800c4e8:	3714      	adds	r7, #20
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr
 800c4f2:	bf00      	nop
 800c4f4:	20002b80 	.word	0x20002b80
 800c4f8:	20002b88 	.word	0x20002b88

0800c4fc <__errno>:
 800c4fc:	4b01      	ldr	r3, [pc, #4]	; (800c504 <__errno+0x8>)
 800c4fe:	6818      	ldr	r0, [r3, #0]
 800c500:	4770      	bx	lr
 800c502:	bf00      	nop
 800c504:	20000010 	.word	0x20000010

0800c508 <std>:
 800c508:	2300      	movs	r3, #0
 800c50a:	b510      	push	{r4, lr}
 800c50c:	4604      	mov	r4, r0
 800c50e:	e9c0 3300 	strd	r3, r3, [r0]
 800c512:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c516:	6083      	str	r3, [r0, #8]
 800c518:	8181      	strh	r1, [r0, #12]
 800c51a:	6643      	str	r3, [r0, #100]	; 0x64
 800c51c:	81c2      	strh	r2, [r0, #14]
 800c51e:	6183      	str	r3, [r0, #24]
 800c520:	4619      	mov	r1, r3
 800c522:	2208      	movs	r2, #8
 800c524:	305c      	adds	r0, #92	; 0x5c
 800c526:	f000 f93b 	bl	800c7a0 <memset>
 800c52a:	4b05      	ldr	r3, [pc, #20]	; (800c540 <std+0x38>)
 800c52c:	6263      	str	r3, [r4, #36]	; 0x24
 800c52e:	4b05      	ldr	r3, [pc, #20]	; (800c544 <std+0x3c>)
 800c530:	62a3      	str	r3, [r4, #40]	; 0x28
 800c532:	4b05      	ldr	r3, [pc, #20]	; (800c548 <std+0x40>)
 800c534:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c536:	4b05      	ldr	r3, [pc, #20]	; (800c54c <std+0x44>)
 800c538:	6224      	str	r4, [r4, #32]
 800c53a:	6323      	str	r3, [r4, #48]	; 0x30
 800c53c:	bd10      	pop	{r4, pc}
 800c53e:	bf00      	nop
 800c540:	0800cbc1 	.word	0x0800cbc1
 800c544:	0800cbe3 	.word	0x0800cbe3
 800c548:	0800cc1b 	.word	0x0800cc1b
 800c54c:	0800cc3f 	.word	0x0800cc3f

0800c550 <_cleanup_r>:
 800c550:	4901      	ldr	r1, [pc, #4]	; (800c558 <_cleanup_r+0x8>)
 800c552:	f000 b8af 	b.w	800c6b4 <_fwalk_reent>
 800c556:	bf00      	nop
 800c558:	0800d05d 	.word	0x0800d05d

0800c55c <__sfmoreglue>:
 800c55c:	b570      	push	{r4, r5, r6, lr}
 800c55e:	2268      	movs	r2, #104	; 0x68
 800c560:	1e4d      	subs	r5, r1, #1
 800c562:	4355      	muls	r5, r2
 800c564:	460e      	mov	r6, r1
 800c566:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c56a:	f000 f98d 	bl	800c888 <_malloc_r>
 800c56e:	4604      	mov	r4, r0
 800c570:	b140      	cbz	r0, 800c584 <__sfmoreglue+0x28>
 800c572:	2100      	movs	r1, #0
 800c574:	e9c0 1600 	strd	r1, r6, [r0]
 800c578:	300c      	adds	r0, #12
 800c57a:	60a0      	str	r0, [r4, #8]
 800c57c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c580:	f000 f90e 	bl	800c7a0 <memset>
 800c584:	4620      	mov	r0, r4
 800c586:	bd70      	pop	{r4, r5, r6, pc}

0800c588 <__sfp_lock_acquire>:
 800c588:	4801      	ldr	r0, [pc, #4]	; (800c590 <__sfp_lock_acquire+0x8>)
 800c58a:	f000 b8d8 	b.w	800c73e <__retarget_lock_acquire_recursive>
 800c58e:	bf00      	nop
 800c590:	20002ba1 	.word	0x20002ba1

0800c594 <__sfp_lock_release>:
 800c594:	4801      	ldr	r0, [pc, #4]	; (800c59c <__sfp_lock_release+0x8>)
 800c596:	f000 b8d3 	b.w	800c740 <__retarget_lock_release_recursive>
 800c59a:	bf00      	nop
 800c59c:	20002ba1 	.word	0x20002ba1

0800c5a0 <__sinit_lock_acquire>:
 800c5a0:	4801      	ldr	r0, [pc, #4]	; (800c5a8 <__sinit_lock_acquire+0x8>)
 800c5a2:	f000 b8cc 	b.w	800c73e <__retarget_lock_acquire_recursive>
 800c5a6:	bf00      	nop
 800c5a8:	20002ba2 	.word	0x20002ba2

0800c5ac <__sinit_lock_release>:
 800c5ac:	4801      	ldr	r0, [pc, #4]	; (800c5b4 <__sinit_lock_release+0x8>)
 800c5ae:	f000 b8c7 	b.w	800c740 <__retarget_lock_release_recursive>
 800c5b2:	bf00      	nop
 800c5b4:	20002ba2 	.word	0x20002ba2

0800c5b8 <__sinit>:
 800c5b8:	b510      	push	{r4, lr}
 800c5ba:	4604      	mov	r4, r0
 800c5bc:	f7ff fff0 	bl	800c5a0 <__sinit_lock_acquire>
 800c5c0:	69a3      	ldr	r3, [r4, #24]
 800c5c2:	b11b      	cbz	r3, 800c5cc <__sinit+0x14>
 800c5c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5c8:	f7ff bff0 	b.w	800c5ac <__sinit_lock_release>
 800c5cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c5d0:	6523      	str	r3, [r4, #80]	; 0x50
 800c5d2:	4b13      	ldr	r3, [pc, #76]	; (800c620 <__sinit+0x68>)
 800c5d4:	4a13      	ldr	r2, [pc, #76]	; (800c624 <__sinit+0x6c>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	62a2      	str	r2, [r4, #40]	; 0x28
 800c5da:	42a3      	cmp	r3, r4
 800c5dc:	bf04      	itt	eq
 800c5de:	2301      	moveq	r3, #1
 800c5e0:	61a3      	streq	r3, [r4, #24]
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	f000 f820 	bl	800c628 <__sfp>
 800c5e8:	6060      	str	r0, [r4, #4]
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	f000 f81c 	bl	800c628 <__sfp>
 800c5f0:	60a0      	str	r0, [r4, #8]
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	f000 f818 	bl	800c628 <__sfp>
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	60e0      	str	r0, [r4, #12]
 800c5fc:	2104      	movs	r1, #4
 800c5fe:	6860      	ldr	r0, [r4, #4]
 800c600:	f7ff ff82 	bl	800c508 <std>
 800c604:	68a0      	ldr	r0, [r4, #8]
 800c606:	2201      	movs	r2, #1
 800c608:	2109      	movs	r1, #9
 800c60a:	f7ff ff7d 	bl	800c508 <std>
 800c60e:	68e0      	ldr	r0, [r4, #12]
 800c610:	2202      	movs	r2, #2
 800c612:	2112      	movs	r1, #18
 800c614:	f7ff ff78 	bl	800c508 <std>
 800c618:	2301      	movs	r3, #1
 800c61a:	61a3      	str	r3, [r4, #24]
 800c61c:	e7d2      	b.n	800c5c4 <__sinit+0xc>
 800c61e:	bf00      	nop
 800c620:	0800e430 	.word	0x0800e430
 800c624:	0800c551 	.word	0x0800c551

0800c628 <__sfp>:
 800c628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c62a:	4607      	mov	r7, r0
 800c62c:	f7ff ffac 	bl	800c588 <__sfp_lock_acquire>
 800c630:	4b1e      	ldr	r3, [pc, #120]	; (800c6ac <__sfp+0x84>)
 800c632:	681e      	ldr	r6, [r3, #0]
 800c634:	69b3      	ldr	r3, [r6, #24]
 800c636:	b913      	cbnz	r3, 800c63e <__sfp+0x16>
 800c638:	4630      	mov	r0, r6
 800c63a:	f7ff ffbd 	bl	800c5b8 <__sinit>
 800c63e:	3648      	adds	r6, #72	; 0x48
 800c640:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c644:	3b01      	subs	r3, #1
 800c646:	d503      	bpl.n	800c650 <__sfp+0x28>
 800c648:	6833      	ldr	r3, [r6, #0]
 800c64a:	b30b      	cbz	r3, 800c690 <__sfp+0x68>
 800c64c:	6836      	ldr	r6, [r6, #0]
 800c64e:	e7f7      	b.n	800c640 <__sfp+0x18>
 800c650:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c654:	b9d5      	cbnz	r5, 800c68c <__sfp+0x64>
 800c656:	4b16      	ldr	r3, [pc, #88]	; (800c6b0 <__sfp+0x88>)
 800c658:	60e3      	str	r3, [r4, #12]
 800c65a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c65e:	6665      	str	r5, [r4, #100]	; 0x64
 800c660:	f000 f86c 	bl	800c73c <__retarget_lock_init_recursive>
 800c664:	f7ff ff96 	bl	800c594 <__sfp_lock_release>
 800c668:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c66c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c670:	6025      	str	r5, [r4, #0]
 800c672:	61a5      	str	r5, [r4, #24]
 800c674:	2208      	movs	r2, #8
 800c676:	4629      	mov	r1, r5
 800c678:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c67c:	f000 f890 	bl	800c7a0 <memset>
 800c680:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c684:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c688:	4620      	mov	r0, r4
 800c68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c68c:	3468      	adds	r4, #104	; 0x68
 800c68e:	e7d9      	b.n	800c644 <__sfp+0x1c>
 800c690:	2104      	movs	r1, #4
 800c692:	4638      	mov	r0, r7
 800c694:	f7ff ff62 	bl	800c55c <__sfmoreglue>
 800c698:	4604      	mov	r4, r0
 800c69a:	6030      	str	r0, [r6, #0]
 800c69c:	2800      	cmp	r0, #0
 800c69e:	d1d5      	bne.n	800c64c <__sfp+0x24>
 800c6a0:	f7ff ff78 	bl	800c594 <__sfp_lock_release>
 800c6a4:	230c      	movs	r3, #12
 800c6a6:	603b      	str	r3, [r7, #0]
 800c6a8:	e7ee      	b.n	800c688 <__sfp+0x60>
 800c6aa:	bf00      	nop
 800c6ac:	0800e430 	.word	0x0800e430
 800c6b0:	ffff0001 	.word	0xffff0001

0800c6b4 <_fwalk_reent>:
 800c6b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6b8:	4606      	mov	r6, r0
 800c6ba:	4688      	mov	r8, r1
 800c6bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c6c0:	2700      	movs	r7, #0
 800c6c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c6c6:	f1b9 0901 	subs.w	r9, r9, #1
 800c6ca:	d505      	bpl.n	800c6d8 <_fwalk_reent+0x24>
 800c6cc:	6824      	ldr	r4, [r4, #0]
 800c6ce:	2c00      	cmp	r4, #0
 800c6d0:	d1f7      	bne.n	800c6c2 <_fwalk_reent+0xe>
 800c6d2:	4638      	mov	r0, r7
 800c6d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6d8:	89ab      	ldrh	r3, [r5, #12]
 800c6da:	2b01      	cmp	r3, #1
 800c6dc:	d907      	bls.n	800c6ee <_fwalk_reent+0x3a>
 800c6de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	d003      	beq.n	800c6ee <_fwalk_reent+0x3a>
 800c6e6:	4629      	mov	r1, r5
 800c6e8:	4630      	mov	r0, r6
 800c6ea:	47c0      	blx	r8
 800c6ec:	4307      	orrs	r7, r0
 800c6ee:	3568      	adds	r5, #104	; 0x68
 800c6f0:	e7e9      	b.n	800c6c6 <_fwalk_reent+0x12>
	...

0800c6f4 <__libc_init_array>:
 800c6f4:	b570      	push	{r4, r5, r6, lr}
 800c6f6:	4d0d      	ldr	r5, [pc, #52]	; (800c72c <__libc_init_array+0x38>)
 800c6f8:	4c0d      	ldr	r4, [pc, #52]	; (800c730 <__libc_init_array+0x3c>)
 800c6fa:	1b64      	subs	r4, r4, r5
 800c6fc:	10a4      	asrs	r4, r4, #2
 800c6fe:	2600      	movs	r6, #0
 800c700:	42a6      	cmp	r6, r4
 800c702:	d109      	bne.n	800c718 <__libc_init_array+0x24>
 800c704:	4d0b      	ldr	r5, [pc, #44]	; (800c734 <__libc_init_array+0x40>)
 800c706:	4c0c      	ldr	r4, [pc, #48]	; (800c738 <__libc_init_array+0x44>)
 800c708:	f001 fa96 	bl	800dc38 <_init>
 800c70c:	1b64      	subs	r4, r4, r5
 800c70e:	10a4      	asrs	r4, r4, #2
 800c710:	2600      	movs	r6, #0
 800c712:	42a6      	cmp	r6, r4
 800c714:	d105      	bne.n	800c722 <__libc_init_array+0x2e>
 800c716:	bd70      	pop	{r4, r5, r6, pc}
 800c718:	f855 3b04 	ldr.w	r3, [r5], #4
 800c71c:	4798      	blx	r3
 800c71e:	3601      	adds	r6, #1
 800c720:	e7ee      	b.n	800c700 <__libc_init_array+0xc>
 800c722:	f855 3b04 	ldr.w	r3, [r5], #4
 800c726:	4798      	blx	r3
 800c728:	3601      	adds	r6, #1
 800c72a:	e7f2      	b.n	800c712 <__libc_init_array+0x1e>
 800c72c:	0800e520 	.word	0x0800e520
 800c730:	0800e520 	.word	0x0800e520
 800c734:	0800e520 	.word	0x0800e520
 800c738:	0800e524 	.word	0x0800e524

0800c73c <__retarget_lock_init_recursive>:
 800c73c:	4770      	bx	lr

0800c73e <__retarget_lock_acquire_recursive>:
 800c73e:	4770      	bx	lr

0800c740 <__retarget_lock_release_recursive>:
 800c740:	4770      	bx	lr
	...

0800c744 <malloc>:
 800c744:	4b02      	ldr	r3, [pc, #8]	; (800c750 <malloc+0xc>)
 800c746:	4601      	mov	r1, r0
 800c748:	6818      	ldr	r0, [r3, #0]
 800c74a:	f000 b89d 	b.w	800c888 <_malloc_r>
 800c74e:	bf00      	nop
 800c750:	20000010 	.word	0x20000010

0800c754 <free>:
 800c754:	4b02      	ldr	r3, [pc, #8]	; (800c760 <free+0xc>)
 800c756:	4601      	mov	r1, r0
 800c758:	6818      	ldr	r0, [r3, #0]
 800c75a:	f000 b829 	b.w	800c7b0 <_free_r>
 800c75e:	bf00      	nop
 800c760:	20000010 	.word	0x20000010

0800c764 <memcmp>:
 800c764:	b510      	push	{r4, lr}
 800c766:	3901      	subs	r1, #1
 800c768:	4402      	add	r2, r0
 800c76a:	4290      	cmp	r0, r2
 800c76c:	d101      	bne.n	800c772 <memcmp+0xe>
 800c76e:	2000      	movs	r0, #0
 800c770:	e005      	b.n	800c77e <memcmp+0x1a>
 800c772:	7803      	ldrb	r3, [r0, #0]
 800c774:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c778:	42a3      	cmp	r3, r4
 800c77a:	d001      	beq.n	800c780 <memcmp+0x1c>
 800c77c:	1b18      	subs	r0, r3, r4
 800c77e:	bd10      	pop	{r4, pc}
 800c780:	3001      	adds	r0, #1
 800c782:	e7f2      	b.n	800c76a <memcmp+0x6>

0800c784 <memcpy>:
 800c784:	440a      	add	r2, r1
 800c786:	4291      	cmp	r1, r2
 800c788:	f100 33ff 	add.w	r3, r0, #4294967295
 800c78c:	d100      	bne.n	800c790 <memcpy+0xc>
 800c78e:	4770      	bx	lr
 800c790:	b510      	push	{r4, lr}
 800c792:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c796:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c79a:	4291      	cmp	r1, r2
 800c79c:	d1f9      	bne.n	800c792 <memcpy+0xe>
 800c79e:	bd10      	pop	{r4, pc}

0800c7a0 <memset>:
 800c7a0:	4402      	add	r2, r0
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d100      	bne.n	800c7aa <memset+0xa>
 800c7a8:	4770      	bx	lr
 800c7aa:	f803 1b01 	strb.w	r1, [r3], #1
 800c7ae:	e7f9      	b.n	800c7a4 <memset+0x4>

0800c7b0 <_free_r>:
 800c7b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7b2:	2900      	cmp	r1, #0
 800c7b4:	d044      	beq.n	800c840 <_free_r+0x90>
 800c7b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7ba:	9001      	str	r0, [sp, #4]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	f1a1 0404 	sub.w	r4, r1, #4
 800c7c2:	bfb8      	it	lt
 800c7c4:	18e4      	addlt	r4, r4, r3
 800c7c6:	f000 fd0f 	bl	800d1e8 <__malloc_lock>
 800c7ca:	4a1e      	ldr	r2, [pc, #120]	; (800c844 <_free_r+0x94>)
 800c7cc:	9801      	ldr	r0, [sp, #4]
 800c7ce:	6813      	ldr	r3, [r2, #0]
 800c7d0:	b933      	cbnz	r3, 800c7e0 <_free_r+0x30>
 800c7d2:	6063      	str	r3, [r4, #4]
 800c7d4:	6014      	str	r4, [r2, #0]
 800c7d6:	b003      	add	sp, #12
 800c7d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c7dc:	f000 bd0a 	b.w	800d1f4 <__malloc_unlock>
 800c7e0:	42a3      	cmp	r3, r4
 800c7e2:	d908      	bls.n	800c7f6 <_free_r+0x46>
 800c7e4:	6825      	ldr	r5, [r4, #0]
 800c7e6:	1961      	adds	r1, r4, r5
 800c7e8:	428b      	cmp	r3, r1
 800c7ea:	bf01      	itttt	eq
 800c7ec:	6819      	ldreq	r1, [r3, #0]
 800c7ee:	685b      	ldreq	r3, [r3, #4]
 800c7f0:	1949      	addeq	r1, r1, r5
 800c7f2:	6021      	streq	r1, [r4, #0]
 800c7f4:	e7ed      	b.n	800c7d2 <_free_r+0x22>
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	685b      	ldr	r3, [r3, #4]
 800c7fa:	b10b      	cbz	r3, 800c800 <_free_r+0x50>
 800c7fc:	42a3      	cmp	r3, r4
 800c7fe:	d9fa      	bls.n	800c7f6 <_free_r+0x46>
 800c800:	6811      	ldr	r1, [r2, #0]
 800c802:	1855      	adds	r5, r2, r1
 800c804:	42a5      	cmp	r5, r4
 800c806:	d10b      	bne.n	800c820 <_free_r+0x70>
 800c808:	6824      	ldr	r4, [r4, #0]
 800c80a:	4421      	add	r1, r4
 800c80c:	1854      	adds	r4, r2, r1
 800c80e:	42a3      	cmp	r3, r4
 800c810:	6011      	str	r1, [r2, #0]
 800c812:	d1e0      	bne.n	800c7d6 <_free_r+0x26>
 800c814:	681c      	ldr	r4, [r3, #0]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	6053      	str	r3, [r2, #4]
 800c81a:	4421      	add	r1, r4
 800c81c:	6011      	str	r1, [r2, #0]
 800c81e:	e7da      	b.n	800c7d6 <_free_r+0x26>
 800c820:	d902      	bls.n	800c828 <_free_r+0x78>
 800c822:	230c      	movs	r3, #12
 800c824:	6003      	str	r3, [r0, #0]
 800c826:	e7d6      	b.n	800c7d6 <_free_r+0x26>
 800c828:	6825      	ldr	r5, [r4, #0]
 800c82a:	1961      	adds	r1, r4, r5
 800c82c:	428b      	cmp	r3, r1
 800c82e:	bf04      	itt	eq
 800c830:	6819      	ldreq	r1, [r3, #0]
 800c832:	685b      	ldreq	r3, [r3, #4]
 800c834:	6063      	str	r3, [r4, #4]
 800c836:	bf04      	itt	eq
 800c838:	1949      	addeq	r1, r1, r5
 800c83a:	6021      	streq	r1, [r4, #0]
 800c83c:	6054      	str	r4, [r2, #4]
 800c83e:	e7ca      	b.n	800c7d6 <_free_r+0x26>
 800c840:	b003      	add	sp, #12
 800c842:	bd30      	pop	{r4, r5, pc}
 800c844:	20002ba4 	.word	0x20002ba4

0800c848 <sbrk_aligned>:
 800c848:	b570      	push	{r4, r5, r6, lr}
 800c84a:	4e0e      	ldr	r6, [pc, #56]	; (800c884 <sbrk_aligned+0x3c>)
 800c84c:	460c      	mov	r4, r1
 800c84e:	6831      	ldr	r1, [r6, #0]
 800c850:	4605      	mov	r5, r0
 800c852:	b911      	cbnz	r1, 800c85a <sbrk_aligned+0x12>
 800c854:	f000 f984 	bl	800cb60 <_sbrk_r>
 800c858:	6030      	str	r0, [r6, #0]
 800c85a:	4621      	mov	r1, r4
 800c85c:	4628      	mov	r0, r5
 800c85e:	f000 f97f 	bl	800cb60 <_sbrk_r>
 800c862:	1c43      	adds	r3, r0, #1
 800c864:	d00a      	beq.n	800c87c <sbrk_aligned+0x34>
 800c866:	1cc4      	adds	r4, r0, #3
 800c868:	f024 0403 	bic.w	r4, r4, #3
 800c86c:	42a0      	cmp	r0, r4
 800c86e:	d007      	beq.n	800c880 <sbrk_aligned+0x38>
 800c870:	1a21      	subs	r1, r4, r0
 800c872:	4628      	mov	r0, r5
 800c874:	f000 f974 	bl	800cb60 <_sbrk_r>
 800c878:	3001      	adds	r0, #1
 800c87a:	d101      	bne.n	800c880 <sbrk_aligned+0x38>
 800c87c:	f04f 34ff 	mov.w	r4, #4294967295
 800c880:	4620      	mov	r0, r4
 800c882:	bd70      	pop	{r4, r5, r6, pc}
 800c884:	20002ba8 	.word	0x20002ba8

0800c888 <_malloc_r>:
 800c888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c88c:	1ccd      	adds	r5, r1, #3
 800c88e:	f025 0503 	bic.w	r5, r5, #3
 800c892:	3508      	adds	r5, #8
 800c894:	2d0c      	cmp	r5, #12
 800c896:	bf38      	it	cc
 800c898:	250c      	movcc	r5, #12
 800c89a:	2d00      	cmp	r5, #0
 800c89c:	4607      	mov	r7, r0
 800c89e:	db01      	blt.n	800c8a4 <_malloc_r+0x1c>
 800c8a0:	42a9      	cmp	r1, r5
 800c8a2:	d905      	bls.n	800c8b0 <_malloc_r+0x28>
 800c8a4:	230c      	movs	r3, #12
 800c8a6:	603b      	str	r3, [r7, #0]
 800c8a8:	2600      	movs	r6, #0
 800c8aa:	4630      	mov	r0, r6
 800c8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8b0:	4e2e      	ldr	r6, [pc, #184]	; (800c96c <_malloc_r+0xe4>)
 800c8b2:	f000 fc99 	bl	800d1e8 <__malloc_lock>
 800c8b6:	6833      	ldr	r3, [r6, #0]
 800c8b8:	461c      	mov	r4, r3
 800c8ba:	bb34      	cbnz	r4, 800c90a <_malloc_r+0x82>
 800c8bc:	4629      	mov	r1, r5
 800c8be:	4638      	mov	r0, r7
 800c8c0:	f7ff ffc2 	bl	800c848 <sbrk_aligned>
 800c8c4:	1c43      	adds	r3, r0, #1
 800c8c6:	4604      	mov	r4, r0
 800c8c8:	d14d      	bne.n	800c966 <_malloc_r+0xde>
 800c8ca:	6834      	ldr	r4, [r6, #0]
 800c8cc:	4626      	mov	r6, r4
 800c8ce:	2e00      	cmp	r6, #0
 800c8d0:	d140      	bne.n	800c954 <_malloc_r+0xcc>
 800c8d2:	6823      	ldr	r3, [r4, #0]
 800c8d4:	4631      	mov	r1, r6
 800c8d6:	4638      	mov	r0, r7
 800c8d8:	eb04 0803 	add.w	r8, r4, r3
 800c8dc:	f000 f940 	bl	800cb60 <_sbrk_r>
 800c8e0:	4580      	cmp	r8, r0
 800c8e2:	d13a      	bne.n	800c95a <_malloc_r+0xd2>
 800c8e4:	6821      	ldr	r1, [r4, #0]
 800c8e6:	3503      	adds	r5, #3
 800c8e8:	1a6d      	subs	r5, r5, r1
 800c8ea:	f025 0503 	bic.w	r5, r5, #3
 800c8ee:	3508      	adds	r5, #8
 800c8f0:	2d0c      	cmp	r5, #12
 800c8f2:	bf38      	it	cc
 800c8f4:	250c      	movcc	r5, #12
 800c8f6:	4629      	mov	r1, r5
 800c8f8:	4638      	mov	r0, r7
 800c8fa:	f7ff ffa5 	bl	800c848 <sbrk_aligned>
 800c8fe:	3001      	adds	r0, #1
 800c900:	d02b      	beq.n	800c95a <_malloc_r+0xd2>
 800c902:	6823      	ldr	r3, [r4, #0]
 800c904:	442b      	add	r3, r5
 800c906:	6023      	str	r3, [r4, #0]
 800c908:	e00e      	b.n	800c928 <_malloc_r+0xa0>
 800c90a:	6822      	ldr	r2, [r4, #0]
 800c90c:	1b52      	subs	r2, r2, r5
 800c90e:	d41e      	bmi.n	800c94e <_malloc_r+0xc6>
 800c910:	2a0b      	cmp	r2, #11
 800c912:	d916      	bls.n	800c942 <_malloc_r+0xba>
 800c914:	1961      	adds	r1, r4, r5
 800c916:	42a3      	cmp	r3, r4
 800c918:	6025      	str	r5, [r4, #0]
 800c91a:	bf18      	it	ne
 800c91c:	6059      	strne	r1, [r3, #4]
 800c91e:	6863      	ldr	r3, [r4, #4]
 800c920:	bf08      	it	eq
 800c922:	6031      	streq	r1, [r6, #0]
 800c924:	5162      	str	r2, [r4, r5]
 800c926:	604b      	str	r3, [r1, #4]
 800c928:	4638      	mov	r0, r7
 800c92a:	f104 060b 	add.w	r6, r4, #11
 800c92e:	f000 fc61 	bl	800d1f4 <__malloc_unlock>
 800c932:	f026 0607 	bic.w	r6, r6, #7
 800c936:	1d23      	adds	r3, r4, #4
 800c938:	1af2      	subs	r2, r6, r3
 800c93a:	d0b6      	beq.n	800c8aa <_malloc_r+0x22>
 800c93c:	1b9b      	subs	r3, r3, r6
 800c93e:	50a3      	str	r3, [r4, r2]
 800c940:	e7b3      	b.n	800c8aa <_malloc_r+0x22>
 800c942:	6862      	ldr	r2, [r4, #4]
 800c944:	42a3      	cmp	r3, r4
 800c946:	bf0c      	ite	eq
 800c948:	6032      	streq	r2, [r6, #0]
 800c94a:	605a      	strne	r2, [r3, #4]
 800c94c:	e7ec      	b.n	800c928 <_malloc_r+0xa0>
 800c94e:	4623      	mov	r3, r4
 800c950:	6864      	ldr	r4, [r4, #4]
 800c952:	e7b2      	b.n	800c8ba <_malloc_r+0x32>
 800c954:	4634      	mov	r4, r6
 800c956:	6876      	ldr	r6, [r6, #4]
 800c958:	e7b9      	b.n	800c8ce <_malloc_r+0x46>
 800c95a:	230c      	movs	r3, #12
 800c95c:	603b      	str	r3, [r7, #0]
 800c95e:	4638      	mov	r0, r7
 800c960:	f000 fc48 	bl	800d1f4 <__malloc_unlock>
 800c964:	e7a1      	b.n	800c8aa <_malloc_r+0x22>
 800c966:	6025      	str	r5, [r4, #0]
 800c968:	e7de      	b.n	800c928 <_malloc_r+0xa0>
 800c96a:	bf00      	nop
 800c96c:	20002ba4 	.word	0x20002ba4

0800c970 <iprintf>:
 800c970:	b40f      	push	{r0, r1, r2, r3}
 800c972:	4b0a      	ldr	r3, [pc, #40]	; (800c99c <iprintf+0x2c>)
 800c974:	b513      	push	{r0, r1, r4, lr}
 800c976:	681c      	ldr	r4, [r3, #0]
 800c978:	b124      	cbz	r4, 800c984 <iprintf+0x14>
 800c97a:	69a3      	ldr	r3, [r4, #24]
 800c97c:	b913      	cbnz	r3, 800c984 <iprintf+0x14>
 800c97e:	4620      	mov	r0, r4
 800c980:	f7ff fe1a 	bl	800c5b8 <__sinit>
 800c984:	ab05      	add	r3, sp, #20
 800c986:	9a04      	ldr	r2, [sp, #16]
 800c988:	68a1      	ldr	r1, [r4, #8]
 800c98a:	9301      	str	r3, [sp, #4]
 800c98c:	4620      	mov	r0, r4
 800c98e:	f000 fdbd 	bl	800d50c <_vfiprintf_r>
 800c992:	b002      	add	sp, #8
 800c994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c998:	b004      	add	sp, #16
 800c99a:	4770      	bx	lr
 800c99c:	20000010 	.word	0x20000010

0800c9a0 <_puts_r>:
 800c9a0:	b570      	push	{r4, r5, r6, lr}
 800c9a2:	460e      	mov	r6, r1
 800c9a4:	4605      	mov	r5, r0
 800c9a6:	b118      	cbz	r0, 800c9b0 <_puts_r+0x10>
 800c9a8:	6983      	ldr	r3, [r0, #24]
 800c9aa:	b90b      	cbnz	r3, 800c9b0 <_puts_r+0x10>
 800c9ac:	f7ff fe04 	bl	800c5b8 <__sinit>
 800c9b0:	69ab      	ldr	r3, [r5, #24]
 800c9b2:	68ac      	ldr	r4, [r5, #8]
 800c9b4:	b913      	cbnz	r3, 800c9bc <_puts_r+0x1c>
 800c9b6:	4628      	mov	r0, r5
 800c9b8:	f7ff fdfe 	bl	800c5b8 <__sinit>
 800c9bc:	4b2c      	ldr	r3, [pc, #176]	; (800ca70 <_puts_r+0xd0>)
 800c9be:	429c      	cmp	r4, r3
 800c9c0:	d120      	bne.n	800ca04 <_puts_r+0x64>
 800c9c2:	686c      	ldr	r4, [r5, #4]
 800c9c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9c6:	07db      	lsls	r3, r3, #31
 800c9c8:	d405      	bmi.n	800c9d6 <_puts_r+0x36>
 800c9ca:	89a3      	ldrh	r3, [r4, #12]
 800c9cc:	0598      	lsls	r0, r3, #22
 800c9ce:	d402      	bmi.n	800c9d6 <_puts_r+0x36>
 800c9d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9d2:	f7ff feb4 	bl	800c73e <__retarget_lock_acquire_recursive>
 800c9d6:	89a3      	ldrh	r3, [r4, #12]
 800c9d8:	0719      	lsls	r1, r3, #28
 800c9da:	d51d      	bpl.n	800ca18 <_puts_r+0x78>
 800c9dc:	6923      	ldr	r3, [r4, #16]
 800c9de:	b1db      	cbz	r3, 800ca18 <_puts_r+0x78>
 800c9e0:	3e01      	subs	r6, #1
 800c9e2:	68a3      	ldr	r3, [r4, #8]
 800c9e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c9e8:	3b01      	subs	r3, #1
 800c9ea:	60a3      	str	r3, [r4, #8]
 800c9ec:	bb39      	cbnz	r1, 800ca3e <_puts_r+0x9e>
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	da38      	bge.n	800ca64 <_puts_r+0xc4>
 800c9f2:	4622      	mov	r2, r4
 800c9f4:	210a      	movs	r1, #10
 800c9f6:	4628      	mov	r0, r5
 800c9f8:	f000 f9aa 	bl	800cd50 <__swbuf_r>
 800c9fc:	3001      	adds	r0, #1
 800c9fe:	d011      	beq.n	800ca24 <_puts_r+0x84>
 800ca00:	250a      	movs	r5, #10
 800ca02:	e011      	b.n	800ca28 <_puts_r+0x88>
 800ca04:	4b1b      	ldr	r3, [pc, #108]	; (800ca74 <_puts_r+0xd4>)
 800ca06:	429c      	cmp	r4, r3
 800ca08:	d101      	bne.n	800ca0e <_puts_r+0x6e>
 800ca0a:	68ac      	ldr	r4, [r5, #8]
 800ca0c:	e7da      	b.n	800c9c4 <_puts_r+0x24>
 800ca0e:	4b1a      	ldr	r3, [pc, #104]	; (800ca78 <_puts_r+0xd8>)
 800ca10:	429c      	cmp	r4, r3
 800ca12:	bf08      	it	eq
 800ca14:	68ec      	ldreq	r4, [r5, #12]
 800ca16:	e7d5      	b.n	800c9c4 <_puts_r+0x24>
 800ca18:	4621      	mov	r1, r4
 800ca1a:	4628      	mov	r0, r5
 800ca1c:	f000 f9fc 	bl	800ce18 <__swsetup_r>
 800ca20:	2800      	cmp	r0, #0
 800ca22:	d0dd      	beq.n	800c9e0 <_puts_r+0x40>
 800ca24:	f04f 35ff 	mov.w	r5, #4294967295
 800ca28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca2a:	07da      	lsls	r2, r3, #31
 800ca2c:	d405      	bmi.n	800ca3a <_puts_r+0x9a>
 800ca2e:	89a3      	ldrh	r3, [r4, #12]
 800ca30:	059b      	lsls	r3, r3, #22
 800ca32:	d402      	bmi.n	800ca3a <_puts_r+0x9a>
 800ca34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca36:	f7ff fe83 	bl	800c740 <__retarget_lock_release_recursive>
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	bd70      	pop	{r4, r5, r6, pc}
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	da04      	bge.n	800ca4c <_puts_r+0xac>
 800ca42:	69a2      	ldr	r2, [r4, #24]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	dc06      	bgt.n	800ca56 <_puts_r+0xb6>
 800ca48:	290a      	cmp	r1, #10
 800ca4a:	d004      	beq.n	800ca56 <_puts_r+0xb6>
 800ca4c:	6823      	ldr	r3, [r4, #0]
 800ca4e:	1c5a      	adds	r2, r3, #1
 800ca50:	6022      	str	r2, [r4, #0]
 800ca52:	7019      	strb	r1, [r3, #0]
 800ca54:	e7c5      	b.n	800c9e2 <_puts_r+0x42>
 800ca56:	4622      	mov	r2, r4
 800ca58:	4628      	mov	r0, r5
 800ca5a:	f000 f979 	bl	800cd50 <__swbuf_r>
 800ca5e:	3001      	adds	r0, #1
 800ca60:	d1bf      	bne.n	800c9e2 <_puts_r+0x42>
 800ca62:	e7df      	b.n	800ca24 <_puts_r+0x84>
 800ca64:	6823      	ldr	r3, [r4, #0]
 800ca66:	250a      	movs	r5, #10
 800ca68:	1c5a      	adds	r2, r3, #1
 800ca6a:	6022      	str	r2, [r4, #0]
 800ca6c:	701d      	strb	r5, [r3, #0]
 800ca6e:	e7db      	b.n	800ca28 <_puts_r+0x88>
 800ca70:	0800e3f0 	.word	0x0800e3f0
 800ca74:	0800e410 	.word	0x0800e410
 800ca78:	0800e3d0 	.word	0x0800e3d0

0800ca7c <puts>:
 800ca7c:	4b02      	ldr	r3, [pc, #8]	; (800ca88 <puts+0xc>)
 800ca7e:	4601      	mov	r1, r0
 800ca80:	6818      	ldr	r0, [r3, #0]
 800ca82:	f7ff bf8d 	b.w	800c9a0 <_puts_r>
 800ca86:	bf00      	nop
 800ca88:	20000010 	.word	0x20000010

0800ca8c <cleanup_glue>:
 800ca8c:	b538      	push	{r3, r4, r5, lr}
 800ca8e:	460c      	mov	r4, r1
 800ca90:	6809      	ldr	r1, [r1, #0]
 800ca92:	4605      	mov	r5, r0
 800ca94:	b109      	cbz	r1, 800ca9a <cleanup_glue+0xe>
 800ca96:	f7ff fff9 	bl	800ca8c <cleanup_glue>
 800ca9a:	4621      	mov	r1, r4
 800ca9c:	4628      	mov	r0, r5
 800ca9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800caa2:	f7ff be85 	b.w	800c7b0 <_free_r>
	...

0800caa8 <_reclaim_reent>:
 800caa8:	4b2c      	ldr	r3, [pc, #176]	; (800cb5c <_reclaim_reent+0xb4>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4283      	cmp	r3, r0
 800caae:	b570      	push	{r4, r5, r6, lr}
 800cab0:	4604      	mov	r4, r0
 800cab2:	d051      	beq.n	800cb58 <_reclaim_reent+0xb0>
 800cab4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cab6:	b143      	cbz	r3, 800caca <_reclaim_reent+0x22>
 800cab8:	68db      	ldr	r3, [r3, #12]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d14a      	bne.n	800cb54 <_reclaim_reent+0xac>
 800cabe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cac0:	6819      	ldr	r1, [r3, #0]
 800cac2:	b111      	cbz	r1, 800caca <_reclaim_reent+0x22>
 800cac4:	4620      	mov	r0, r4
 800cac6:	f7ff fe73 	bl	800c7b0 <_free_r>
 800caca:	6961      	ldr	r1, [r4, #20]
 800cacc:	b111      	cbz	r1, 800cad4 <_reclaim_reent+0x2c>
 800cace:	4620      	mov	r0, r4
 800cad0:	f7ff fe6e 	bl	800c7b0 <_free_r>
 800cad4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cad6:	b111      	cbz	r1, 800cade <_reclaim_reent+0x36>
 800cad8:	4620      	mov	r0, r4
 800cada:	f7ff fe69 	bl	800c7b0 <_free_r>
 800cade:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cae0:	b111      	cbz	r1, 800cae8 <_reclaim_reent+0x40>
 800cae2:	4620      	mov	r0, r4
 800cae4:	f7ff fe64 	bl	800c7b0 <_free_r>
 800cae8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800caea:	b111      	cbz	r1, 800caf2 <_reclaim_reent+0x4a>
 800caec:	4620      	mov	r0, r4
 800caee:	f7ff fe5f 	bl	800c7b0 <_free_r>
 800caf2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800caf4:	b111      	cbz	r1, 800cafc <_reclaim_reent+0x54>
 800caf6:	4620      	mov	r0, r4
 800caf8:	f7ff fe5a 	bl	800c7b0 <_free_r>
 800cafc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cafe:	b111      	cbz	r1, 800cb06 <_reclaim_reent+0x5e>
 800cb00:	4620      	mov	r0, r4
 800cb02:	f7ff fe55 	bl	800c7b0 <_free_r>
 800cb06:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cb08:	b111      	cbz	r1, 800cb10 <_reclaim_reent+0x68>
 800cb0a:	4620      	mov	r0, r4
 800cb0c:	f7ff fe50 	bl	800c7b0 <_free_r>
 800cb10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb12:	b111      	cbz	r1, 800cb1a <_reclaim_reent+0x72>
 800cb14:	4620      	mov	r0, r4
 800cb16:	f7ff fe4b 	bl	800c7b0 <_free_r>
 800cb1a:	69a3      	ldr	r3, [r4, #24]
 800cb1c:	b1e3      	cbz	r3, 800cb58 <_reclaim_reent+0xb0>
 800cb1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cb20:	4620      	mov	r0, r4
 800cb22:	4798      	blx	r3
 800cb24:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cb26:	b1b9      	cbz	r1, 800cb58 <_reclaim_reent+0xb0>
 800cb28:	4620      	mov	r0, r4
 800cb2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cb2e:	f7ff bfad 	b.w	800ca8c <cleanup_glue>
 800cb32:	5949      	ldr	r1, [r1, r5]
 800cb34:	b941      	cbnz	r1, 800cb48 <_reclaim_reent+0xa0>
 800cb36:	3504      	adds	r5, #4
 800cb38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb3a:	2d80      	cmp	r5, #128	; 0x80
 800cb3c:	68d9      	ldr	r1, [r3, #12]
 800cb3e:	d1f8      	bne.n	800cb32 <_reclaim_reent+0x8a>
 800cb40:	4620      	mov	r0, r4
 800cb42:	f7ff fe35 	bl	800c7b0 <_free_r>
 800cb46:	e7ba      	b.n	800cabe <_reclaim_reent+0x16>
 800cb48:	680e      	ldr	r6, [r1, #0]
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	f7ff fe30 	bl	800c7b0 <_free_r>
 800cb50:	4631      	mov	r1, r6
 800cb52:	e7ef      	b.n	800cb34 <_reclaim_reent+0x8c>
 800cb54:	2500      	movs	r5, #0
 800cb56:	e7ef      	b.n	800cb38 <_reclaim_reent+0x90>
 800cb58:	bd70      	pop	{r4, r5, r6, pc}
 800cb5a:	bf00      	nop
 800cb5c:	20000010 	.word	0x20000010

0800cb60 <_sbrk_r>:
 800cb60:	b538      	push	{r3, r4, r5, lr}
 800cb62:	4d06      	ldr	r5, [pc, #24]	; (800cb7c <_sbrk_r+0x1c>)
 800cb64:	2300      	movs	r3, #0
 800cb66:	4604      	mov	r4, r0
 800cb68:	4608      	mov	r0, r1
 800cb6a:	602b      	str	r3, [r5, #0]
 800cb6c:	f7f4 fe84 	bl	8001878 <_sbrk>
 800cb70:	1c43      	adds	r3, r0, #1
 800cb72:	d102      	bne.n	800cb7a <_sbrk_r+0x1a>
 800cb74:	682b      	ldr	r3, [r5, #0]
 800cb76:	b103      	cbz	r3, 800cb7a <_sbrk_r+0x1a>
 800cb78:	6023      	str	r3, [r4, #0]
 800cb7a:	bd38      	pop	{r3, r4, r5, pc}
 800cb7c:	20002bac 	.word	0x20002bac

0800cb80 <siprintf>:
 800cb80:	b40e      	push	{r1, r2, r3}
 800cb82:	b500      	push	{lr}
 800cb84:	b09c      	sub	sp, #112	; 0x70
 800cb86:	ab1d      	add	r3, sp, #116	; 0x74
 800cb88:	9002      	str	r0, [sp, #8]
 800cb8a:	9006      	str	r0, [sp, #24]
 800cb8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cb90:	4809      	ldr	r0, [pc, #36]	; (800cbb8 <siprintf+0x38>)
 800cb92:	9107      	str	r1, [sp, #28]
 800cb94:	9104      	str	r1, [sp, #16]
 800cb96:	4909      	ldr	r1, [pc, #36]	; (800cbbc <siprintf+0x3c>)
 800cb98:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb9c:	9105      	str	r1, [sp, #20]
 800cb9e:	6800      	ldr	r0, [r0, #0]
 800cba0:	9301      	str	r3, [sp, #4]
 800cba2:	a902      	add	r1, sp, #8
 800cba4:	f000 fb88 	bl	800d2b8 <_svfiprintf_r>
 800cba8:	9b02      	ldr	r3, [sp, #8]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	701a      	strb	r2, [r3, #0]
 800cbae:	b01c      	add	sp, #112	; 0x70
 800cbb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbb4:	b003      	add	sp, #12
 800cbb6:	4770      	bx	lr
 800cbb8:	20000010 	.word	0x20000010
 800cbbc:	ffff0208 	.word	0xffff0208

0800cbc0 <__sread>:
 800cbc0:	b510      	push	{r4, lr}
 800cbc2:	460c      	mov	r4, r1
 800cbc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbc8:	f000 ff64 	bl	800da94 <_read_r>
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	bfab      	itete	ge
 800cbd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cbd2:	89a3      	ldrhlt	r3, [r4, #12]
 800cbd4:	181b      	addge	r3, r3, r0
 800cbd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cbda:	bfac      	ite	ge
 800cbdc:	6563      	strge	r3, [r4, #84]	; 0x54
 800cbde:	81a3      	strhlt	r3, [r4, #12]
 800cbe0:	bd10      	pop	{r4, pc}

0800cbe2 <__swrite>:
 800cbe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbe6:	461f      	mov	r7, r3
 800cbe8:	898b      	ldrh	r3, [r1, #12]
 800cbea:	05db      	lsls	r3, r3, #23
 800cbec:	4605      	mov	r5, r0
 800cbee:	460c      	mov	r4, r1
 800cbf0:	4616      	mov	r6, r2
 800cbf2:	d505      	bpl.n	800cc00 <__swrite+0x1e>
 800cbf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbf8:	2302      	movs	r3, #2
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	f000 fa7c 	bl	800d0f8 <_lseek_r>
 800cc00:	89a3      	ldrh	r3, [r4, #12]
 800cc02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc0a:	81a3      	strh	r3, [r4, #12]
 800cc0c:	4632      	mov	r2, r6
 800cc0e:	463b      	mov	r3, r7
 800cc10:	4628      	mov	r0, r5
 800cc12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc16:	f000 b8ed 	b.w	800cdf4 <_write_r>

0800cc1a <__sseek>:
 800cc1a:	b510      	push	{r4, lr}
 800cc1c:	460c      	mov	r4, r1
 800cc1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc22:	f000 fa69 	bl	800d0f8 <_lseek_r>
 800cc26:	1c43      	adds	r3, r0, #1
 800cc28:	89a3      	ldrh	r3, [r4, #12]
 800cc2a:	bf15      	itete	ne
 800cc2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cc2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cc32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cc36:	81a3      	strheq	r3, [r4, #12]
 800cc38:	bf18      	it	ne
 800cc3a:	81a3      	strhne	r3, [r4, #12]
 800cc3c:	bd10      	pop	{r4, pc}

0800cc3e <__sclose>:
 800cc3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc42:	f000 b975 	b.w	800cf30 <_close_r>

0800cc46 <strncpy>:
 800cc46:	b510      	push	{r4, lr}
 800cc48:	3901      	subs	r1, #1
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	b132      	cbz	r2, 800cc5c <strncpy+0x16>
 800cc4e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cc52:	f803 4b01 	strb.w	r4, [r3], #1
 800cc56:	3a01      	subs	r2, #1
 800cc58:	2c00      	cmp	r4, #0
 800cc5a:	d1f7      	bne.n	800cc4c <strncpy+0x6>
 800cc5c:	441a      	add	r2, r3
 800cc5e:	2100      	movs	r1, #0
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d100      	bne.n	800cc66 <strncpy+0x20>
 800cc64:	bd10      	pop	{r4, pc}
 800cc66:	f803 1b01 	strb.w	r1, [r3], #1
 800cc6a:	e7f9      	b.n	800cc60 <strncpy+0x1a>

0800cc6c <strstr>:
 800cc6c:	780a      	ldrb	r2, [r1, #0]
 800cc6e:	b570      	push	{r4, r5, r6, lr}
 800cc70:	b96a      	cbnz	r2, 800cc8e <strstr+0x22>
 800cc72:	bd70      	pop	{r4, r5, r6, pc}
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d109      	bne.n	800cc8c <strstr+0x20>
 800cc78:	460c      	mov	r4, r1
 800cc7a:	4605      	mov	r5, r0
 800cc7c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d0f6      	beq.n	800cc72 <strstr+0x6>
 800cc84:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800cc88:	429e      	cmp	r6, r3
 800cc8a:	d0f7      	beq.n	800cc7c <strstr+0x10>
 800cc8c:	3001      	adds	r0, #1
 800cc8e:	7803      	ldrb	r3, [r0, #0]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d1ef      	bne.n	800cc74 <strstr+0x8>
 800cc94:	4618      	mov	r0, r3
 800cc96:	e7ec      	b.n	800cc72 <strstr+0x6>

0800cc98 <strtok>:
 800cc98:	4b16      	ldr	r3, [pc, #88]	; (800ccf4 <strtok+0x5c>)
 800cc9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cc9c:	681e      	ldr	r6, [r3, #0]
 800cc9e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800cca0:	4605      	mov	r5, r0
 800cca2:	b9fc      	cbnz	r4, 800cce4 <strtok+0x4c>
 800cca4:	2050      	movs	r0, #80	; 0x50
 800cca6:	9101      	str	r1, [sp, #4]
 800cca8:	f7ff fd4c 	bl	800c744 <malloc>
 800ccac:	9901      	ldr	r1, [sp, #4]
 800ccae:	65b0      	str	r0, [r6, #88]	; 0x58
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	b920      	cbnz	r0, 800ccbe <strtok+0x26>
 800ccb4:	4b10      	ldr	r3, [pc, #64]	; (800ccf8 <strtok+0x60>)
 800ccb6:	4811      	ldr	r0, [pc, #68]	; (800ccfc <strtok+0x64>)
 800ccb8:	2157      	movs	r1, #87	; 0x57
 800ccba:	f000 f91b 	bl	800cef4 <__assert_func>
 800ccbe:	e9c0 4400 	strd	r4, r4, [r0]
 800ccc2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ccc6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ccca:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ccce:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ccd2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ccd6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ccda:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ccde:	6184      	str	r4, [r0, #24]
 800cce0:	7704      	strb	r4, [r0, #28]
 800cce2:	6244      	str	r4, [r0, #36]	; 0x24
 800cce4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800cce6:	2301      	movs	r3, #1
 800cce8:	4628      	mov	r0, r5
 800ccea:	b002      	add	sp, #8
 800ccec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ccf0:	f000 b806 	b.w	800cd00 <__strtok_r>
 800ccf4:	20000010 	.word	0x20000010
 800ccf8:	0800e434 	.word	0x0800e434
 800ccfc:	0800e44b 	.word	0x0800e44b

0800cd00 <__strtok_r>:
 800cd00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd02:	b908      	cbnz	r0, 800cd08 <__strtok_r+0x8>
 800cd04:	6810      	ldr	r0, [r2, #0]
 800cd06:	b188      	cbz	r0, 800cd2c <__strtok_r+0x2c>
 800cd08:	4604      	mov	r4, r0
 800cd0a:	4620      	mov	r0, r4
 800cd0c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800cd10:	460f      	mov	r7, r1
 800cd12:	f817 6b01 	ldrb.w	r6, [r7], #1
 800cd16:	b91e      	cbnz	r6, 800cd20 <__strtok_r+0x20>
 800cd18:	b965      	cbnz	r5, 800cd34 <__strtok_r+0x34>
 800cd1a:	6015      	str	r5, [r2, #0]
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	e005      	b.n	800cd2c <__strtok_r+0x2c>
 800cd20:	42b5      	cmp	r5, r6
 800cd22:	d1f6      	bne.n	800cd12 <__strtok_r+0x12>
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d1f0      	bne.n	800cd0a <__strtok_r+0xa>
 800cd28:	6014      	str	r4, [r2, #0]
 800cd2a:	7003      	strb	r3, [r0, #0]
 800cd2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd2e:	461c      	mov	r4, r3
 800cd30:	e00c      	b.n	800cd4c <__strtok_r+0x4c>
 800cd32:	b915      	cbnz	r5, 800cd3a <__strtok_r+0x3a>
 800cd34:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cd38:	460e      	mov	r6, r1
 800cd3a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800cd3e:	42ab      	cmp	r3, r5
 800cd40:	d1f7      	bne.n	800cd32 <__strtok_r+0x32>
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d0f3      	beq.n	800cd2e <__strtok_r+0x2e>
 800cd46:	2300      	movs	r3, #0
 800cd48:	f804 3c01 	strb.w	r3, [r4, #-1]
 800cd4c:	6014      	str	r4, [r2, #0]
 800cd4e:	e7ed      	b.n	800cd2c <__strtok_r+0x2c>

0800cd50 <__swbuf_r>:
 800cd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd52:	460e      	mov	r6, r1
 800cd54:	4614      	mov	r4, r2
 800cd56:	4605      	mov	r5, r0
 800cd58:	b118      	cbz	r0, 800cd62 <__swbuf_r+0x12>
 800cd5a:	6983      	ldr	r3, [r0, #24]
 800cd5c:	b90b      	cbnz	r3, 800cd62 <__swbuf_r+0x12>
 800cd5e:	f7ff fc2b 	bl	800c5b8 <__sinit>
 800cd62:	4b21      	ldr	r3, [pc, #132]	; (800cde8 <__swbuf_r+0x98>)
 800cd64:	429c      	cmp	r4, r3
 800cd66:	d12b      	bne.n	800cdc0 <__swbuf_r+0x70>
 800cd68:	686c      	ldr	r4, [r5, #4]
 800cd6a:	69a3      	ldr	r3, [r4, #24]
 800cd6c:	60a3      	str	r3, [r4, #8]
 800cd6e:	89a3      	ldrh	r3, [r4, #12]
 800cd70:	071a      	lsls	r2, r3, #28
 800cd72:	d52f      	bpl.n	800cdd4 <__swbuf_r+0x84>
 800cd74:	6923      	ldr	r3, [r4, #16]
 800cd76:	b36b      	cbz	r3, 800cdd4 <__swbuf_r+0x84>
 800cd78:	6923      	ldr	r3, [r4, #16]
 800cd7a:	6820      	ldr	r0, [r4, #0]
 800cd7c:	1ac0      	subs	r0, r0, r3
 800cd7e:	6963      	ldr	r3, [r4, #20]
 800cd80:	b2f6      	uxtb	r6, r6
 800cd82:	4283      	cmp	r3, r0
 800cd84:	4637      	mov	r7, r6
 800cd86:	dc04      	bgt.n	800cd92 <__swbuf_r+0x42>
 800cd88:	4621      	mov	r1, r4
 800cd8a:	4628      	mov	r0, r5
 800cd8c:	f000 f966 	bl	800d05c <_fflush_r>
 800cd90:	bb30      	cbnz	r0, 800cde0 <__swbuf_r+0x90>
 800cd92:	68a3      	ldr	r3, [r4, #8]
 800cd94:	3b01      	subs	r3, #1
 800cd96:	60a3      	str	r3, [r4, #8]
 800cd98:	6823      	ldr	r3, [r4, #0]
 800cd9a:	1c5a      	adds	r2, r3, #1
 800cd9c:	6022      	str	r2, [r4, #0]
 800cd9e:	701e      	strb	r6, [r3, #0]
 800cda0:	6963      	ldr	r3, [r4, #20]
 800cda2:	3001      	adds	r0, #1
 800cda4:	4283      	cmp	r3, r0
 800cda6:	d004      	beq.n	800cdb2 <__swbuf_r+0x62>
 800cda8:	89a3      	ldrh	r3, [r4, #12]
 800cdaa:	07db      	lsls	r3, r3, #31
 800cdac:	d506      	bpl.n	800cdbc <__swbuf_r+0x6c>
 800cdae:	2e0a      	cmp	r6, #10
 800cdb0:	d104      	bne.n	800cdbc <__swbuf_r+0x6c>
 800cdb2:	4621      	mov	r1, r4
 800cdb4:	4628      	mov	r0, r5
 800cdb6:	f000 f951 	bl	800d05c <_fflush_r>
 800cdba:	b988      	cbnz	r0, 800cde0 <__swbuf_r+0x90>
 800cdbc:	4638      	mov	r0, r7
 800cdbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdc0:	4b0a      	ldr	r3, [pc, #40]	; (800cdec <__swbuf_r+0x9c>)
 800cdc2:	429c      	cmp	r4, r3
 800cdc4:	d101      	bne.n	800cdca <__swbuf_r+0x7a>
 800cdc6:	68ac      	ldr	r4, [r5, #8]
 800cdc8:	e7cf      	b.n	800cd6a <__swbuf_r+0x1a>
 800cdca:	4b09      	ldr	r3, [pc, #36]	; (800cdf0 <__swbuf_r+0xa0>)
 800cdcc:	429c      	cmp	r4, r3
 800cdce:	bf08      	it	eq
 800cdd0:	68ec      	ldreq	r4, [r5, #12]
 800cdd2:	e7ca      	b.n	800cd6a <__swbuf_r+0x1a>
 800cdd4:	4621      	mov	r1, r4
 800cdd6:	4628      	mov	r0, r5
 800cdd8:	f000 f81e 	bl	800ce18 <__swsetup_r>
 800cddc:	2800      	cmp	r0, #0
 800cdde:	d0cb      	beq.n	800cd78 <__swbuf_r+0x28>
 800cde0:	f04f 37ff 	mov.w	r7, #4294967295
 800cde4:	e7ea      	b.n	800cdbc <__swbuf_r+0x6c>
 800cde6:	bf00      	nop
 800cde8:	0800e3f0 	.word	0x0800e3f0
 800cdec:	0800e410 	.word	0x0800e410
 800cdf0:	0800e3d0 	.word	0x0800e3d0

0800cdf4 <_write_r>:
 800cdf4:	b538      	push	{r3, r4, r5, lr}
 800cdf6:	4d07      	ldr	r5, [pc, #28]	; (800ce14 <_write_r+0x20>)
 800cdf8:	4604      	mov	r4, r0
 800cdfa:	4608      	mov	r0, r1
 800cdfc:	4611      	mov	r1, r2
 800cdfe:	2200      	movs	r2, #0
 800ce00:	602a      	str	r2, [r5, #0]
 800ce02:	461a      	mov	r2, r3
 800ce04:	f7f4 fce7 	bl	80017d6 <_write>
 800ce08:	1c43      	adds	r3, r0, #1
 800ce0a:	d102      	bne.n	800ce12 <_write_r+0x1e>
 800ce0c:	682b      	ldr	r3, [r5, #0]
 800ce0e:	b103      	cbz	r3, 800ce12 <_write_r+0x1e>
 800ce10:	6023      	str	r3, [r4, #0]
 800ce12:	bd38      	pop	{r3, r4, r5, pc}
 800ce14:	20002bac 	.word	0x20002bac

0800ce18 <__swsetup_r>:
 800ce18:	4b32      	ldr	r3, [pc, #200]	; (800cee4 <__swsetup_r+0xcc>)
 800ce1a:	b570      	push	{r4, r5, r6, lr}
 800ce1c:	681d      	ldr	r5, [r3, #0]
 800ce1e:	4606      	mov	r6, r0
 800ce20:	460c      	mov	r4, r1
 800ce22:	b125      	cbz	r5, 800ce2e <__swsetup_r+0x16>
 800ce24:	69ab      	ldr	r3, [r5, #24]
 800ce26:	b913      	cbnz	r3, 800ce2e <__swsetup_r+0x16>
 800ce28:	4628      	mov	r0, r5
 800ce2a:	f7ff fbc5 	bl	800c5b8 <__sinit>
 800ce2e:	4b2e      	ldr	r3, [pc, #184]	; (800cee8 <__swsetup_r+0xd0>)
 800ce30:	429c      	cmp	r4, r3
 800ce32:	d10f      	bne.n	800ce54 <__swsetup_r+0x3c>
 800ce34:	686c      	ldr	r4, [r5, #4]
 800ce36:	89a3      	ldrh	r3, [r4, #12]
 800ce38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce3c:	0719      	lsls	r1, r3, #28
 800ce3e:	d42c      	bmi.n	800ce9a <__swsetup_r+0x82>
 800ce40:	06dd      	lsls	r5, r3, #27
 800ce42:	d411      	bmi.n	800ce68 <__swsetup_r+0x50>
 800ce44:	2309      	movs	r3, #9
 800ce46:	6033      	str	r3, [r6, #0]
 800ce48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ce4c:	81a3      	strh	r3, [r4, #12]
 800ce4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ce52:	e03e      	b.n	800ced2 <__swsetup_r+0xba>
 800ce54:	4b25      	ldr	r3, [pc, #148]	; (800ceec <__swsetup_r+0xd4>)
 800ce56:	429c      	cmp	r4, r3
 800ce58:	d101      	bne.n	800ce5e <__swsetup_r+0x46>
 800ce5a:	68ac      	ldr	r4, [r5, #8]
 800ce5c:	e7eb      	b.n	800ce36 <__swsetup_r+0x1e>
 800ce5e:	4b24      	ldr	r3, [pc, #144]	; (800cef0 <__swsetup_r+0xd8>)
 800ce60:	429c      	cmp	r4, r3
 800ce62:	bf08      	it	eq
 800ce64:	68ec      	ldreq	r4, [r5, #12]
 800ce66:	e7e6      	b.n	800ce36 <__swsetup_r+0x1e>
 800ce68:	0758      	lsls	r0, r3, #29
 800ce6a:	d512      	bpl.n	800ce92 <__swsetup_r+0x7a>
 800ce6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce6e:	b141      	cbz	r1, 800ce82 <__swsetup_r+0x6a>
 800ce70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce74:	4299      	cmp	r1, r3
 800ce76:	d002      	beq.n	800ce7e <__swsetup_r+0x66>
 800ce78:	4630      	mov	r0, r6
 800ce7a:	f7ff fc99 	bl	800c7b0 <_free_r>
 800ce7e:	2300      	movs	r3, #0
 800ce80:	6363      	str	r3, [r4, #52]	; 0x34
 800ce82:	89a3      	ldrh	r3, [r4, #12]
 800ce84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ce88:	81a3      	strh	r3, [r4, #12]
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	6063      	str	r3, [r4, #4]
 800ce8e:	6923      	ldr	r3, [r4, #16]
 800ce90:	6023      	str	r3, [r4, #0]
 800ce92:	89a3      	ldrh	r3, [r4, #12]
 800ce94:	f043 0308 	orr.w	r3, r3, #8
 800ce98:	81a3      	strh	r3, [r4, #12]
 800ce9a:	6923      	ldr	r3, [r4, #16]
 800ce9c:	b94b      	cbnz	r3, 800ceb2 <__swsetup_r+0x9a>
 800ce9e:	89a3      	ldrh	r3, [r4, #12]
 800cea0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cea8:	d003      	beq.n	800ceb2 <__swsetup_r+0x9a>
 800ceaa:	4621      	mov	r1, r4
 800ceac:	4630      	mov	r0, r6
 800ceae:	f000 f95b 	bl	800d168 <__smakebuf_r>
 800ceb2:	89a0      	ldrh	r0, [r4, #12]
 800ceb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ceb8:	f010 0301 	ands.w	r3, r0, #1
 800cebc:	d00a      	beq.n	800ced4 <__swsetup_r+0xbc>
 800cebe:	2300      	movs	r3, #0
 800cec0:	60a3      	str	r3, [r4, #8]
 800cec2:	6963      	ldr	r3, [r4, #20]
 800cec4:	425b      	negs	r3, r3
 800cec6:	61a3      	str	r3, [r4, #24]
 800cec8:	6923      	ldr	r3, [r4, #16]
 800ceca:	b943      	cbnz	r3, 800cede <__swsetup_r+0xc6>
 800cecc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ced0:	d1ba      	bne.n	800ce48 <__swsetup_r+0x30>
 800ced2:	bd70      	pop	{r4, r5, r6, pc}
 800ced4:	0781      	lsls	r1, r0, #30
 800ced6:	bf58      	it	pl
 800ced8:	6963      	ldrpl	r3, [r4, #20]
 800ceda:	60a3      	str	r3, [r4, #8]
 800cedc:	e7f4      	b.n	800cec8 <__swsetup_r+0xb0>
 800cede:	2000      	movs	r0, #0
 800cee0:	e7f7      	b.n	800ced2 <__swsetup_r+0xba>
 800cee2:	bf00      	nop
 800cee4:	20000010 	.word	0x20000010
 800cee8:	0800e3f0 	.word	0x0800e3f0
 800ceec:	0800e410 	.word	0x0800e410
 800cef0:	0800e3d0 	.word	0x0800e3d0

0800cef4 <__assert_func>:
 800cef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cef6:	4614      	mov	r4, r2
 800cef8:	461a      	mov	r2, r3
 800cefa:	4b09      	ldr	r3, [pc, #36]	; (800cf20 <__assert_func+0x2c>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	4605      	mov	r5, r0
 800cf00:	68d8      	ldr	r0, [r3, #12]
 800cf02:	b14c      	cbz	r4, 800cf18 <__assert_func+0x24>
 800cf04:	4b07      	ldr	r3, [pc, #28]	; (800cf24 <__assert_func+0x30>)
 800cf06:	9100      	str	r1, [sp, #0]
 800cf08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf0c:	4906      	ldr	r1, [pc, #24]	; (800cf28 <__assert_func+0x34>)
 800cf0e:	462b      	mov	r3, r5
 800cf10:	f000 f8e0 	bl	800d0d4 <fiprintf>
 800cf14:	f000 fdd0 	bl	800dab8 <abort>
 800cf18:	4b04      	ldr	r3, [pc, #16]	; (800cf2c <__assert_func+0x38>)
 800cf1a:	461c      	mov	r4, r3
 800cf1c:	e7f3      	b.n	800cf06 <__assert_func+0x12>
 800cf1e:	bf00      	nop
 800cf20:	20000010 	.word	0x20000010
 800cf24:	0800e4a8 	.word	0x0800e4a8
 800cf28:	0800e4b5 	.word	0x0800e4b5
 800cf2c:	0800e4e3 	.word	0x0800e4e3

0800cf30 <_close_r>:
 800cf30:	b538      	push	{r3, r4, r5, lr}
 800cf32:	4d06      	ldr	r5, [pc, #24]	; (800cf4c <_close_r+0x1c>)
 800cf34:	2300      	movs	r3, #0
 800cf36:	4604      	mov	r4, r0
 800cf38:	4608      	mov	r0, r1
 800cf3a:	602b      	str	r3, [r5, #0]
 800cf3c:	f7f4 fc67 	bl	800180e <_close>
 800cf40:	1c43      	adds	r3, r0, #1
 800cf42:	d102      	bne.n	800cf4a <_close_r+0x1a>
 800cf44:	682b      	ldr	r3, [r5, #0]
 800cf46:	b103      	cbz	r3, 800cf4a <_close_r+0x1a>
 800cf48:	6023      	str	r3, [r4, #0]
 800cf4a:	bd38      	pop	{r3, r4, r5, pc}
 800cf4c:	20002bac 	.word	0x20002bac

0800cf50 <__sflush_r>:
 800cf50:	898a      	ldrh	r2, [r1, #12]
 800cf52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf56:	4605      	mov	r5, r0
 800cf58:	0710      	lsls	r0, r2, #28
 800cf5a:	460c      	mov	r4, r1
 800cf5c:	d458      	bmi.n	800d010 <__sflush_r+0xc0>
 800cf5e:	684b      	ldr	r3, [r1, #4]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	dc05      	bgt.n	800cf70 <__sflush_r+0x20>
 800cf64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	dc02      	bgt.n	800cf70 <__sflush_r+0x20>
 800cf6a:	2000      	movs	r0, #0
 800cf6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf72:	2e00      	cmp	r6, #0
 800cf74:	d0f9      	beq.n	800cf6a <__sflush_r+0x1a>
 800cf76:	2300      	movs	r3, #0
 800cf78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf7c:	682f      	ldr	r7, [r5, #0]
 800cf7e:	602b      	str	r3, [r5, #0]
 800cf80:	d032      	beq.n	800cfe8 <__sflush_r+0x98>
 800cf82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf84:	89a3      	ldrh	r3, [r4, #12]
 800cf86:	075a      	lsls	r2, r3, #29
 800cf88:	d505      	bpl.n	800cf96 <__sflush_r+0x46>
 800cf8a:	6863      	ldr	r3, [r4, #4]
 800cf8c:	1ac0      	subs	r0, r0, r3
 800cf8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf90:	b10b      	cbz	r3, 800cf96 <__sflush_r+0x46>
 800cf92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf94:	1ac0      	subs	r0, r0, r3
 800cf96:	2300      	movs	r3, #0
 800cf98:	4602      	mov	r2, r0
 800cf9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf9c:	6a21      	ldr	r1, [r4, #32]
 800cf9e:	4628      	mov	r0, r5
 800cfa0:	47b0      	blx	r6
 800cfa2:	1c43      	adds	r3, r0, #1
 800cfa4:	89a3      	ldrh	r3, [r4, #12]
 800cfa6:	d106      	bne.n	800cfb6 <__sflush_r+0x66>
 800cfa8:	6829      	ldr	r1, [r5, #0]
 800cfaa:	291d      	cmp	r1, #29
 800cfac:	d82c      	bhi.n	800d008 <__sflush_r+0xb8>
 800cfae:	4a2a      	ldr	r2, [pc, #168]	; (800d058 <__sflush_r+0x108>)
 800cfb0:	40ca      	lsrs	r2, r1
 800cfb2:	07d6      	lsls	r6, r2, #31
 800cfb4:	d528      	bpl.n	800d008 <__sflush_r+0xb8>
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	6062      	str	r2, [r4, #4]
 800cfba:	04d9      	lsls	r1, r3, #19
 800cfbc:	6922      	ldr	r2, [r4, #16]
 800cfbe:	6022      	str	r2, [r4, #0]
 800cfc0:	d504      	bpl.n	800cfcc <__sflush_r+0x7c>
 800cfc2:	1c42      	adds	r2, r0, #1
 800cfc4:	d101      	bne.n	800cfca <__sflush_r+0x7a>
 800cfc6:	682b      	ldr	r3, [r5, #0]
 800cfc8:	b903      	cbnz	r3, 800cfcc <__sflush_r+0x7c>
 800cfca:	6560      	str	r0, [r4, #84]	; 0x54
 800cfcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfce:	602f      	str	r7, [r5, #0]
 800cfd0:	2900      	cmp	r1, #0
 800cfd2:	d0ca      	beq.n	800cf6a <__sflush_r+0x1a>
 800cfd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfd8:	4299      	cmp	r1, r3
 800cfda:	d002      	beq.n	800cfe2 <__sflush_r+0x92>
 800cfdc:	4628      	mov	r0, r5
 800cfde:	f7ff fbe7 	bl	800c7b0 <_free_r>
 800cfe2:	2000      	movs	r0, #0
 800cfe4:	6360      	str	r0, [r4, #52]	; 0x34
 800cfe6:	e7c1      	b.n	800cf6c <__sflush_r+0x1c>
 800cfe8:	6a21      	ldr	r1, [r4, #32]
 800cfea:	2301      	movs	r3, #1
 800cfec:	4628      	mov	r0, r5
 800cfee:	47b0      	blx	r6
 800cff0:	1c41      	adds	r1, r0, #1
 800cff2:	d1c7      	bne.n	800cf84 <__sflush_r+0x34>
 800cff4:	682b      	ldr	r3, [r5, #0]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d0c4      	beq.n	800cf84 <__sflush_r+0x34>
 800cffa:	2b1d      	cmp	r3, #29
 800cffc:	d001      	beq.n	800d002 <__sflush_r+0xb2>
 800cffe:	2b16      	cmp	r3, #22
 800d000:	d101      	bne.n	800d006 <__sflush_r+0xb6>
 800d002:	602f      	str	r7, [r5, #0]
 800d004:	e7b1      	b.n	800cf6a <__sflush_r+0x1a>
 800d006:	89a3      	ldrh	r3, [r4, #12]
 800d008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d00c:	81a3      	strh	r3, [r4, #12]
 800d00e:	e7ad      	b.n	800cf6c <__sflush_r+0x1c>
 800d010:	690f      	ldr	r7, [r1, #16]
 800d012:	2f00      	cmp	r7, #0
 800d014:	d0a9      	beq.n	800cf6a <__sflush_r+0x1a>
 800d016:	0793      	lsls	r3, r2, #30
 800d018:	680e      	ldr	r6, [r1, #0]
 800d01a:	bf08      	it	eq
 800d01c:	694b      	ldreq	r3, [r1, #20]
 800d01e:	600f      	str	r7, [r1, #0]
 800d020:	bf18      	it	ne
 800d022:	2300      	movne	r3, #0
 800d024:	eba6 0807 	sub.w	r8, r6, r7
 800d028:	608b      	str	r3, [r1, #8]
 800d02a:	f1b8 0f00 	cmp.w	r8, #0
 800d02e:	dd9c      	ble.n	800cf6a <__sflush_r+0x1a>
 800d030:	6a21      	ldr	r1, [r4, #32]
 800d032:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d034:	4643      	mov	r3, r8
 800d036:	463a      	mov	r2, r7
 800d038:	4628      	mov	r0, r5
 800d03a:	47b0      	blx	r6
 800d03c:	2800      	cmp	r0, #0
 800d03e:	dc06      	bgt.n	800d04e <__sflush_r+0xfe>
 800d040:	89a3      	ldrh	r3, [r4, #12]
 800d042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d046:	81a3      	strh	r3, [r4, #12]
 800d048:	f04f 30ff 	mov.w	r0, #4294967295
 800d04c:	e78e      	b.n	800cf6c <__sflush_r+0x1c>
 800d04e:	4407      	add	r7, r0
 800d050:	eba8 0800 	sub.w	r8, r8, r0
 800d054:	e7e9      	b.n	800d02a <__sflush_r+0xda>
 800d056:	bf00      	nop
 800d058:	20400001 	.word	0x20400001

0800d05c <_fflush_r>:
 800d05c:	b538      	push	{r3, r4, r5, lr}
 800d05e:	690b      	ldr	r3, [r1, #16]
 800d060:	4605      	mov	r5, r0
 800d062:	460c      	mov	r4, r1
 800d064:	b913      	cbnz	r3, 800d06c <_fflush_r+0x10>
 800d066:	2500      	movs	r5, #0
 800d068:	4628      	mov	r0, r5
 800d06a:	bd38      	pop	{r3, r4, r5, pc}
 800d06c:	b118      	cbz	r0, 800d076 <_fflush_r+0x1a>
 800d06e:	6983      	ldr	r3, [r0, #24]
 800d070:	b90b      	cbnz	r3, 800d076 <_fflush_r+0x1a>
 800d072:	f7ff faa1 	bl	800c5b8 <__sinit>
 800d076:	4b14      	ldr	r3, [pc, #80]	; (800d0c8 <_fflush_r+0x6c>)
 800d078:	429c      	cmp	r4, r3
 800d07a:	d11b      	bne.n	800d0b4 <_fflush_r+0x58>
 800d07c:	686c      	ldr	r4, [r5, #4]
 800d07e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d0ef      	beq.n	800d066 <_fflush_r+0xa>
 800d086:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d088:	07d0      	lsls	r0, r2, #31
 800d08a:	d404      	bmi.n	800d096 <_fflush_r+0x3a>
 800d08c:	0599      	lsls	r1, r3, #22
 800d08e:	d402      	bmi.n	800d096 <_fflush_r+0x3a>
 800d090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d092:	f7ff fb54 	bl	800c73e <__retarget_lock_acquire_recursive>
 800d096:	4628      	mov	r0, r5
 800d098:	4621      	mov	r1, r4
 800d09a:	f7ff ff59 	bl	800cf50 <__sflush_r>
 800d09e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d0a0:	07da      	lsls	r2, r3, #31
 800d0a2:	4605      	mov	r5, r0
 800d0a4:	d4e0      	bmi.n	800d068 <_fflush_r+0xc>
 800d0a6:	89a3      	ldrh	r3, [r4, #12]
 800d0a8:	059b      	lsls	r3, r3, #22
 800d0aa:	d4dd      	bmi.n	800d068 <_fflush_r+0xc>
 800d0ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0ae:	f7ff fb47 	bl	800c740 <__retarget_lock_release_recursive>
 800d0b2:	e7d9      	b.n	800d068 <_fflush_r+0xc>
 800d0b4:	4b05      	ldr	r3, [pc, #20]	; (800d0cc <_fflush_r+0x70>)
 800d0b6:	429c      	cmp	r4, r3
 800d0b8:	d101      	bne.n	800d0be <_fflush_r+0x62>
 800d0ba:	68ac      	ldr	r4, [r5, #8]
 800d0bc:	e7df      	b.n	800d07e <_fflush_r+0x22>
 800d0be:	4b04      	ldr	r3, [pc, #16]	; (800d0d0 <_fflush_r+0x74>)
 800d0c0:	429c      	cmp	r4, r3
 800d0c2:	bf08      	it	eq
 800d0c4:	68ec      	ldreq	r4, [r5, #12]
 800d0c6:	e7da      	b.n	800d07e <_fflush_r+0x22>
 800d0c8:	0800e3f0 	.word	0x0800e3f0
 800d0cc:	0800e410 	.word	0x0800e410
 800d0d0:	0800e3d0 	.word	0x0800e3d0

0800d0d4 <fiprintf>:
 800d0d4:	b40e      	push	{r1, r2, r3}
 800d0d6:	b503      	push	{r0, r1, lr}
 800d0d8:	4601      	mov	r1, r0
 800d0da:	ab03      	add	r3, sp, #12
 800d0dc:	4805      	ldr	r0, [pc, #20]	; (800d0f4 <fiprintf+0x20>)
 800d0de:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0e2:	6800      	ldr	r0, [r0, #0]
 800d0e4:	9301      	str	r3, [sp, #4]
 800d0e6:	f000 fa11 	bl	800d50c <_vfiprintf_r>
 800d0ea:	b002      	add	sp, #8
 800d0ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0f0:	b003      	add	sp, #12
 800d0f2:	4770      	bx	lr
 800d0f4:	20000010 	.word	0x20000010

0800d0f8 <_lseek_r>:
 800d0f8:	b538      	push	{r3, r4, r5, lr}
 800d0fa:	4d07      	ldr	r5, [pc, #28]	; (800d118 <_lseek_r+0x20>)
 800d0fc:	4604      	mov	r4, r0
 800d0fe:	4608      	mov	r0, r1
 800d100:	4611      	mov	r1, r2
 800d102:	2200      	movs	r2, #0
 800d104:	602a      	str	r2, [r5, #0]
 800d106:	461a      	mov	r2, r3
 800d108:	f7f4 fba8 	bl	800185c <_lseek>
 800d10c:	1c43      	adds	r3, r0, #1
 800d10e:	d102      	bne.n	800d116 <_lseek_r+0x1e>
 800d110:	682b      	ldr	r3, [r5, #0]
 800d112:	b103      	cbz	r3, 800d116 <_lseek_r+0x1e>
 800d114:	6023      	str	r3, [r4, #0]
 800d116:	bd38      	pop	{r3, r4, r5, pc}
 800d118:	20002bac 	.word	0x20002bac

0800d11c <__swhatbuf_r>:
 800d11c:	b570      	push	{r4, r5, r6, lr}
 800d11e:	460e      	mov	r6, r1
 800d120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d124:	2900      	cmp	r1, #0
 800d126:	b096      	sub	sp, #88	; 0x58
 800d128:	4614      	mov	r4, r2
 800d12a:	461d      	mov	r5, r3
 800d12c:	da08      	bge.n	800d140 <__swhatbuf_r+0x24>
 800d12e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d132:	2200      	movs	r2, #0
 800d134:	602a      	str	r2, [r5, #0]
 800d136:	061a      	lsls	r2, r3, #24
 800d138:	d410      	bmi.n	800d15c <__swhatbuf_r+0x40>
 800d13a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d13e:	e00e      	b.n	800d15e <__swhatbuf_r+0x42>
 800d140:	466a      	mov	r2, sp
 800d142:	f000 fcc1 	bl	800dac8 <_fstat_r>
 800d146:	2800      	cmp	r0, #0
 800d148:	dbf1      	blt.n	800d12e <__swhatbuf_r+0x12>
 800d14a:	9a01      	ldr	r2, [sp, #4]
 800d14c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d150:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d154:	425a      	negs	r2, r3
 800d156:	415a      	adcs	r2, r3
 800d158:	602a      	str	r2, [r5, #0]
 800d15a:	e7ee      	b.n	800d13a <__swhatbuf_r+0x1e>
 800d15c:	2340      	movs	r3, #64	; 0x40
 800d15e:	2000      	movs	r0, #0
 800d160:	6023      	str	r3, [r4, #0]
 800d162:	b016      	add	sp, #88	; 0x58
 800d164:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d168 <__smakebuf_r>:
 800d168:	898b      	ldrh	r3, [r1, #12]
 800d16a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d16c:	079d      	lsls	r5, r3, #30
 800d16e:	4606      	mov	r6, r0
 800d170:	460c      	mov	r4, r1
 800d172:	d507      	bpl.n	800d184 <__smakebuf_r+0x1c>
 800d174:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d178:	6023      	str	r3, [r4, #0]
 800d17a:	6123      	str	r3, [r4, #16]
 800d17c:	2301      	movs	r3, #1
 800d17e:	6163      	str	r3, [r4, #20]
 800d180:	b002      	add	sp, #8
 800d182:	bd70      	pop	{r4, r5, r6, pc}
 800d184:	ab01      	add	r3, sp, #4
 800d186:	466a      	mov	r2, sp
 800d188:	f7ff ffc8 	bl	800d11c <__swhatbuf_r>
 800d18c:	9900      	ldr	r1, [sp, #0]
 800d18e:	4605      	mov	r5, r0
 800d190:	4630      	mov	r0, r6
 800d192:	f7ff fb79 	bl	800c888 <_malloc_r>
 800d196:	b948      	cbnz	r0, 800d1ac <__smakebuf_r+0x44>
 800d198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d19c:	059a      	lsls	r2, r3, #22
 800d19e:	d4ef      	bmi.n	800d180 <__smakebuf_r+0x18>
 800d1a0:	f023 0303 	bic.w	r3, r3, #3
 800d1a4:	f043 0302 	orr.w	r3, r3, #2
 800d1a8:	81a3      	strh	r3, [r4, #12]
 800d1aa:	e7e3      	b.n	800d174 <__smakebuf_r+0xc>
 800d1ac:	4b0d      	ldr	r3, [pc, #52]	; (800d1e4 <__smakebuf_r+0x7c>)
 800d1ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800d1b0:	89a3      	ldrh	r3, [r4, #12]
 800d1b2:	6020      	str	r0, [r4, #0]
 800d1b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1b8:	81a3      	strh	r3, [r4, #12]
 800d1ba:	9b00      	ldr	r3, [sp, #0]
 800d1bc:	6163      	str	r3, [r4, #20]
 800d1be:	9b01      	ldr	r3, [sp, #4]
 800d1c0:	6120      	str	r0, [r4, #16]
 800d1c2:	b15b      	cbz	r3, 800d1dc <__smakebuf_r+0x74>
 800d1c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1c8:	4630      	mov	r0, r6
 800d1ca:	f000 fc8f 	bl	800daec <_isatty_r>
 800d1ce:	b128      	cbz	r0, 800d1dc <__smakebuf_r+0x74>
 800d1d0:	89a3      	ldrh	r3, [r4, #12]
 800d1d2:	f023 0303 	bic.w	r3, r3, #3
 800d1d6:	f043 0301 	orr.w	r3, r3, #1
 800d1da:	81a3      	strh	r3, [r4, #12]
 800d1dc:	89a0      	ldrh	r0, [r4, #12]
 800d1de:	4305      	orrs	r5, r0
 800d1e0:	81a5      	strh	r5, [r4, #12]
 800d1e2:	e7cd      	b.n	800d180 <__smakebuf_r+0x18>
 800d1e4:	0800c551 	.word	0x0800c551

0800d1e8 <__malloc_lock>:
 800d1e8:	4801      	ldr	r0, [pc, #4]	; (800d1f0 <__malloc_lock+0x8>)
 800d1ea:	f7ff baa8 	b.w	800c73e <__retarget_lock_acquire_recursive>
 800d1ee:	bf00      	nop
 800d1f0:	20002ba0 	.word	0x20002ba0

0800d1f4 <__malloc_unlock>:
 800d1f4:	4801      	ldr	r0, [pc, #4]	; (800d1fc <__malloc_unlock+0x8>)
 800d1f6:	f7ff baa3 	b.w	800c740 <__retarget_lock_release_recursive>
 800d1fa:	bf00      	nop
 800d1fc:	20002ba0 	.word	0x20002ba0

0800d200 <__ssputs_r>:
 800d200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d204:	688e      	ldr	r6, [r1, #8]
 800d206:	429e      	cmp	r6, r3
 800d208:	4682      	mov	sl, r0
 800d20a:	460c      	mov	r4, r1
 800d20c:	4690      	mov	r8, r2
 800d20e:	461f      	mov	r7, r3
 800d210:	d838      	bhi.n	800d284 <__ssputs_r+0x84>
 800d212:	898a      	ldrh	r2, [r1, #12]
 800d214:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d218:	d032      	beq.n	800d280 <__ssputs_r+0x80>
 800d21a:	6825      	ldr	r5, [r4, #0]
 800d21c:	6909      	ldr	r1, [r1, #16]
 800d21e:	eba5 0901 	sub.w	r9, r5, r1
 800d222:	6965      	ldr	r5, [r4, #20]
 800d224:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d228:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d22c:	3301      	adds	r3, #1
 800d22e:	444b      	add	r3, r9
 800d230:	106d      	asrs	r5, r5, #1
 800d232:	429d      	cmp	r5, r3
 800d234:	bf38      	it	cc
 800d236:	461d      	movcc	r5, r3
 800d238:	0553      	lsls	r3, r2, #21
 800d23a:	d531      	bpl.n	800d2a0 <__ssputs_r+0xa0>
 800d23c:	4629      	mov	r1, r5
 800d23e:	f7ff fb23 	bl	800c888 <_malloc_r>
 800d242:	4606      	mov	r6, r0
 800d244:	b950      	cbnz	r0, 800d25c <__ssputs_r+0x5c>
 800d246:	230c      	movs	r3, #12
 800d248:	f8ca 3000 	str.w	r3, [sl]
 800d24c:	89a3      	ldrh	r3, [r4, #12]
 800d24e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d252:	81a3      	strh	r3, [r4, #12]
 800d254:	f04f 30ff 	mov.w	r0, #4294967295
 800d258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d25c:	6921      	ldr	r1, [r4, #16]
 800d25e:	464a      	mov	r2, r9
 800d260:	f7ff fa90 	bl	800c784 <memcpy>
 800d264:	89a3      	ldrh	r3, [r4, #12]
 800d266:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d26a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d26e:	81a3      	strh	r3, [r4, #12]
 800d270:	6126      	str	r6, [r4, #16]
 800d272:	6165      	str	r5, [r4, #20]
 800d274:	444e      	add	r6, r9
 800d276:	eba5 0509 	sub.w	r5, r5, r9
 800d27a:	6026      	str	r6, [r4, #0]
 800d27c:	60a5      	str	r5, [r4, #8]
 800d27e:	463e      	mov	r6, r7
 800d280:	42be      	cmp	r6, r7
 800d282:	d900      	bls.n	800d286 <__ssputs_r+0x86>
 800d284:	463e      	mov	r6, r7
 800d286:	6820      	ldr	r0, [r4, #0]
 800d288:	4632      	mov	r2, r6
 800d28a:	4641      	mov	r1, r8
 800d28c:	f000 fc3e 	bl	800db0c <memmove>
 800d290:	68a3      	ldr	r3, [r4, #8]
 800d292:	1b9b      	subs	r3, r3, r6
 800d294:	60a3      	str	r3, [r4, #8]
 800d296:	6823      	ldr	r3, [r4, #0]
 800d298:	4433      	add	r3, r6
 800d29a:	6023      	str	r3, [r4, #0]
 800d29c:	2000      	movs	r0, #0
 800d29e:	e7db      	b.n	800d258 <__ssputs_r+0x58>
 800d2a0:	462a      	mov	r2, r5
 800d2a2:	f000 fc4d 	bl	800db40 <_realloc_r>
 800d2a6:	4606      	mov	r6, r0
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	d1e1      	bne.n	800d270 <__ssputs_r+0x70>
 800d2ac:	6921      	ldr	r1, [r4, #16]
 800d2ae:	4650      	mov	r0, sl
 800d2b0:	f7ff fa7e 	bl	800c7b0 <_free_r>
 800d2b4:	e7c7      	b.n	800d246 <__ssputs_r+0x46>
	...

0800d2b8 <_svfiprintf_r>:
 800d2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2bc:	4698      	mov	r8, r3
 800d2be:	898b      	ldrh	r3, [r1, #12]
 800d2c0:	061b      	lsls	r3, r3, #24
 800d2c2:	b09d      	sub	sp, #116	; 0x74
 800d2c4:	4607      	mov	r7, r0
 800d2c6:	460d      	mov	r5, r1
 800d2c8:	4614      	mov	r4, r2
 800d2ca:	d50e      	bpl.n	800d2ea <_svfiprintf_r+0x32>
 800d2cc:	690b      	ldr	r3, [r1, #16]
 800d2ce:	b963      	cbnz	r3, 800d2ea <_svfiprintf_r+0x32>
 800d2d0:	2140      	movs	r1, #64	; 0x40
 800d2d2:	f7ff fad9 	bl	800c888 <_malloc_r>
 800d2d6:	6028      	str	r0, [r5, #0]
 800d2d8:	6128      	str	r0, [r5, #16]
 800d2da:	b920      	cbnz	r0, 800d2e6 <_svfiprintf_r+0x2e>
 800d2dc:	230c      	movs	r3, #12
 800d2de:	603b      	str	r3, [r7, #0]
 800d2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2e4:	e0d1      	b.n	800d48a <_svfiprintf_r+0x1d2>
 800d2e6:	2340      	movs	r3, #64	; 0x40
 800d2e8:	616b      	str	r3, [r5, #20]
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	9309      	str	r3, [sp, #36]	; 0x24
 800d2ee:	2320      	movs	r3, #32
 800d2f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2f8:	2330      	movs	r3, #48	; 0x30
 800d2fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d4a4 <_svfiprintf_r+0x1ec>
 800d2fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d302:	f04f 0901 	mov.w	r9, #1
 800d306:	4623      	mov	r3, r4
 800d308:	469a      	mov	sl, r3
 800d30a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d30e:	b10a      	cbz	r2, 800d314 <_svfiprintf_r+0x5c>
 800d310:	2a25      	cmp	r2, #37	; 0x25
 800d312:	d1f9      	bne.n	800d308 <_svfiprintf_r+0x50>
 800d314:	ebba 0b04 	subs.w	fp, sl, r4
 800d318:	d00b      	beq.n	800d332 <_svfiprintf_r+0x7a>
 800d31a:	465b      	mov	r3, fp
 800d31c:	4622      	mov	r2, r4
 800d31e:	4629      	mov	r1, r5
 800d320:	4638      	mov	r0, r7
 800d322:	f7ff ff6d 	bl	800d200 <__ssputs_r>
 800d326:	3001      	adds	r0, #1
 800d328:	f000 80aa 	beq.w	800d480 <_svfiprintf_r+0x1c8>
 800d32c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d32e:	445a      	add	r2, fp
 800d330:	9209      	str	r2, [sp, #36]	; 0x24
 800d332:	f89a 3000 	ldrb.w	r3, [sl]
 800d336:	2b00      	cmp	r3, #0
 800d338:	f000 80a2 	beq.w	800d480 <_svfiprintf_r+0x1c8>
 800d33c:	2300      	movs	r3, #0
 800d33e:	f04f 32ff 	mov.w	r2, #4294967295
 800d342:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d346:	f10a 0a01 	add.w	sl, sl, #1
 800d34a:	9304      	str	r3, [sp, #16]
 800d34c:	9307      	str	r3, [sp, #28]
 800d34e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d352:	931a      	str	r3, [sp, #104]	; 0x68
 800d354:	4654      	mov	r4, sl
 800d356:	2205      	movs	r2, #5
 800d358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d35c:	4851      	ldr	r0, [pc, #324]	; (800d4a4 <_svfiprintf_r+0x1ec>)
 800d35e:	f7f2 ff3f 	bl	80001e0 <memchr>
 800d362:	9a04      	ldr	r2, [sp, #16]
 800d364:	b9d8      	cbnz	r0, 800d39e <_svfiprintf_r+0xe6>
 800d366:	06d0      	lsls	r0, r2, #27
 800d368:	bf44      	itt	mi
 800d36a:	2320      	movmi	r3, #32
 800d36c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d370:	0711      	lsls	r1, r2, #28
 800d372:	bf44      	itt	mi
 800d374:	232b      	movmi	r3, #43	; 0x2b
 800d376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d37a:	f89a 3000 	ldrb.w	r3, [sl]
 800d37e:	2b2a      	cmp	r3, #42	; 0x2a
 800d380:	d015      	beq.n	800d3ae <_svfiprintf_r+0xf6>
 800d382:	9a07      	ldr	r2, [sp, #28]
 800d384:	4654      	mov	r4, sl
 800d386:	2000      	movs	r0, #0
 800d388:	f04f 0c0a 	mov.w	ip, #10
 800d38c:	4621      	mov	r1, r4
 800d38e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d392:	3b30      	subs	r3, #48	; 0x30
 800d394:	2b09      	cmp	r3, #9
 800d396:	d94e      	bls.n	800d436 <_svfiprintf_r+0x17e>
 800d398:	b1b0      	cbz	r0, 800d3c8 <_svfiprintf_r+0x110>
 800d39a:	9207      	str	r2, [sp, #28]
 800d39c:	e014      	b.n	800d3c8 <_svfiprintf_r+0x110>
 800d39e:	eba0 0308 	sub.w	r3, r0, r8
 800d3a2:	fa09 f303 	lsl.w	r3, r9, r3
 800d3a6:	4313      	orrs	r3, r2
 800d3a8:	9304      	str	r3, [sp, #16]
 800d3aa:	46a2      	mov	sl, r4
 800d3ac:	e7d2      	b.n	800d354 <_svfiprintf_r+0x9c>
 800d3ae:	9b03      	ldr	r3, [sp, #12]
 800d3b0:	1d19      	adds	r1, r3, #4
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	9103      	str	r1, [sp, #12]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	bfbb      	ittet	lt
 800d3ba:	425b      	neglt	r3, r3
 800d3bc:	f042 0202 	orrlt.w	r2, r2, #2
 800d3c0:	9307      	strge	r3, [sp, #28]
 800d3c2:	9307      	strlt	r3, [sp, #28]
 800d3c4:	bfb8      	it	lt
 800d3c6:	9204      	strlt	r2, [sp, #16]
 800d3c8:	7823      	ldrb	r3, [r4, #0]
 800d3ca:	2b2e      	cmp	r3, #46	; 0x2e
 800d3cc:	d10c      	bne.n	800d3e8 <_svfiprintf_r+0x130>
 800d3ce:	7863      	ldrb	r3, [r4, #1]
 800d3d0:	2b2a      	cmp	r3, #42	; 0x2a
 800d3d2:	d135      	bne.n	800d440 <_svfiprintf_r+0x188>
 800d3d4:	9b03      	ldr	r3, [sp, #12]
 800d3d6:	1d1a      	adds	r2, r3, #4
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	9203      	str	r2, [sp, #12]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	bfb8      	it	lt
 800d3e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3e4:	3402      	adds	r4, #2
 800d3e6:	9305      	str	r3, [sp, #20]
 800d3e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d4b4 <_svfiprintf_r+0x1fc>
 800d3ec:	7821      	ldrb	r1, [r4, #0]
 800d3ee:	2203      	movs	r2, #3
 800d3f0:	4650      	mov	r0, sl
 800d3f2:	f7f2 fef5 	bl	80001e0 <memchr>
 800d3f6:	b140      	cbz	r0, 800d40a <_svfiprintf_r+0x152>
 800d3f8:	2340      	movs	r3, #64	; 0x40
 800d3fa:	eba0 000a 	sub.w	r0, r0, sl
 800d3fe:	fa03 f000 	lsl.w	r0, r3, r0
 800d402:	9b04      	ldr	r3, [sp, #16]
 800d404:	4303      	orrs	r3, r0
 800d406:	3401      	adds	r4, #1
 800d408:	9304      	str	r3, [sp, #16]
 800d40a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d40e:	4826      	ldr	r0, [pc, #152]	; (800d4a8 <_svfiprintf_r+0x1f0>)
 800d410:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d414:	2206      	movs	r2, #6
 800d416:	f7f2 fee3 	bl	80001e0 <memchr>
 800d41a:	2800      	cmp	r0, #0
 800d41c:	d038      	beq.n	800d490 <_svfiprintf_r+0x1d8>
 800d41e:	4b23      	ldr	r3, [pc, #140]	; (800d4ac <_svfiprintf_r+0x1f4>)
 800d420:	bb1b      	cbnz	r3, 800d46a <_svfiprintf_r+0x1b2>
 800d422:	9b03      	ldr	r3, [sp, #12]
 800d424:	3307      	adds	r3, #7
 800d426:	f023 0307 	bic.w	r3, r3, #7
 800d42a:	3308      	adds	r3, #8
 800d42c:	9303      	str	r3, [sp, #12]
 800d42e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d430:	4433      	add	r3, r6
 800d432:	9309      	str	r3, [sp, #36]	; 0x24
 800d434:	e767      	b.n	800d306 <_svfiprintf_r+0x4e>
 800d436:	fb0c 3202 	mla	r2, ip, r2, r3
 800d43a:	460c      	mov	r4, r1
 800d43c:	2001      	movs	r0, #1
 800d43e:	e7a5      	b.n	800d38c <_svfiprintf_r+0xd4>
 800d440:	2300      	movs	r3, #0
 800d442:	3401      	adds	r4, #1
 800d444:	9305      	str	r3, [sp, #20]
 800d446:	4619      	mov	r1, r3
 800d448:	f04f 0c0a 	mov.w	ip, #10
 800d44c:	4620      	mov	r0, r4
 800d44e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d452:	3a30      	subs	r2, #48	; 0x30
 800d454:	2a09      	cmp	r2, #9
 800d456:	d903      	bls.n	800d460 <_svfiprintf_r+0x1a8>
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d0c5      	beq.n	800d3e8 <_svfiprintf_r+0x130>
 800d45c:	9105      	str	r1, [sp, #20]
 800d45e:	e7c3      	b.n	800d3e8 <_svfiprintf_r+0x130>
 800d460:	fb0c 2101 	mla	r1, ip, r1, r2
 800d464:	4604      	mov	r4, r0
 800d466:	2301      	movs	r3, #1
 800d468:	e7f0      	b.n	800d44c <_svfiprintf_r+0x194>
 800d46a:	ab03      	add	r3, sp, #12
 800d46c:	9300      	str	r3, [sp, #0]
 800d46e:	462a      	mov	r2, r5
 800d470:	4b0f      	ldr	r3, [pc, #60]	; (800d4b0 <_svfiprintf_r+0x1f8>)
 800d472:	a904      	add	r1, sp, #16
 800d474:	4638      	mov	r0, r7
 800d476:	f3af 8000 	nop.w
 800d47a:	1c42      	adds	r2, r0, #1
 800d47c:	4606      	mov	r6, r0
 800d47e:	d1d6      	bne.n	800d42e <_svfiprintf_r+0x176>
 800d480:	89ab      	ldrh	r3, [r5, #12]
 800d482:	065b      	lsls	r3, r3, #25
 800d484:	f53f af2c 	bmi.w	800d2e0 <_svfiprintf_r+0x28>
 800d488:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d48a:	b01d      	add	sp, #116	; 0x74
 800d48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d490:	ab03      	add	r3, sp, #12
 800d492:	9300      	str	r3, [sp, #0]
 800d494:	462a      	mov	r2, r5
 800d496:	4b06      	ldr	r3, [pc, #24]	; (800d4b0 <_svfiprintf_r+0x1f8>)
 800d498:	a904      	add	r1, sp, #16
 800d49a:	4638      	mov	r0, r7
 800d49c:	f000 f9d4 	bl	800d848 <_printf_i>
 800d4a0:	e7eb      	b.n	800d47a <_svfiprintf_r+0x1c2>
 800d4a2:	bf00      	nop
 800d4a4:	0800e4e4 	.word	0x0800e4e4
 800d4a8:	0800e4ee 	.word	0x0800e4ee
 800d4ac:	00000000 	.word	0x00000000
 800d4b0:	0800d201 	.word	0x0800d201
 800d4b4:	0800e4ea 	.word	0x0800e4ea

0800d4b8 <__sfputc_r>:
 800d4b8:	6893      	ldr	r3, [r2, #8]
 800d4ba:	3b01      	subs	r3, #1
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	b410      	push	{r4}
 800d4c0:	6093      	str	r3, [r2, #8]
 800d4c2:	da08      	bge.n	800d4d6 <__sfputc_r+0x1e>
 800d4c4:	6994      	ldr	r4, [r2, #24]
 800d4c6:	42a3      	cmp	r3, r4
 800d4c8:	db01      	blt.n	800d4ce <__sfputc_r+0x16>
 800d4ca:	290a      	cmp	r1, #10
 800d4cc:	d103      	bne.n	800d4d6 <__sfputc_r+0x1e>
 800d4ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4d2:	f7ff bc3d 	b.w	800cd50 <__swbuf_r>
 800d4d6:	6813      	ldr	r3, [r2, #0]
 800d4d8:	1c58      	adds	r0, r3, #1
 800d4da:	6010      	str	r0, [r2, #0]
 800d4dc:	7019      	strb	r1, [r3, #0]
 800d4de:	4608      	mov	r0, r1
 800d4e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4e4:	4770      	bx	lr

0800d4e6 <__sfputs_r>:
 800d4e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4e8:	4606      	mov	r6, r0
 800d4ea:	460f      	mov	r7, r1
 800d4ec:	4614      	mov	r4, r2
 800d4ee:	18d5      	adds	r5, r2, r3
 800d4f0:	42ac      	cmp	r4, r5
 800d4f2:	d101      	bne.n	800d4f8 <__sfputs_r+0x12>
 800d4f4:	2000      	movs	r0, #0
 800d4f6:	e007      	b.n	800d508 <__sfputs_r+0x22>
 800d4f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4fc:	463a      	mov	r2, r7
 800d4fe:	4630      	mov	r0, r6
 800d500:	f7ff ffda 	bl	800d4b8 <__sfputc_r>
 800d504:	1c43      	adds	r3, r0, #1
 800d506:	d1f3      	bne.n	800d4f0 <__sfputs_r+0xa>
 800d508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d50c <_vfiprintf_r>:
 800d50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d510:	460d      	mov	r5, r1
 800d512:	b09d      	sub	sp, #116	; 0x74
 800d514:	4614      	mov	r4, r2
 800d516:	4698      	mov	r8, r3
 800d518:	4606      	mov	r6, r0
 800d51a:	b118      	cbz	r0, 800d524 <_vfiprintf_r+0x18>
 800d51c:	6983      	ldr	r3, [r0, #24]
 800d51e:	b90b      	cbnz	r3, 800d524 <_vfiprintf_r+0x18>
 800d520:	f7ff f84a 	bl	800c5b8 <__sinit>
 800d524:	4b89      	ldr	r3, [pc, #548]	; (800d74c <_vfiprintf_r+0x240>)
 800d526:	429d      	cmp	r5, r3
 800d528:	d11b      	bne.n	800d562 <_vfiprintf_r+0x56>
 800d52a:	6875      	ldr	r5, [r6, #4]
 800d52c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d52e:	07d9      	lsls	r1, r3, #31
 800d530:	d405      	bmi.n	800d53e <_vfiprintf_r+0x32>
 800d532:	89ab      	ldrh	r3, [r5, #12]
 800d534:	059a      	lsls	r2, r3, #22
 800d536:	d402      	bmi.n	800d53e <_vfiprintf_r+0x32>
 800d538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d53a:	f7ff f900 	bl	800c73e <__retarget_lock_acquire_recursive>
 800d53e:	89ab      	ldrh	r3, [r5, #12]
 800d540:	071b      	lsls	r3, r3, #28
 800d542:	d501      	bpl.n	800d548 <_vfiprintf_r+0x3c>
 800d544:	692b      	ldr	r3, [r5, #16]
 800d546:	b9eb      	cbnz	r3, 800d584 <_vfiprintf_r+0x78>
 800d548:	4629      	mov	r1, r5
 800d54a:	4630      	mov	r0, r6
 800d54c:	f7ff fc64 	bl	800ce18 <__swsetup_r>
 800d550:	b1c0      	cbz	r0, 800d584 <_vfiprintf_r+0x78>
 800d552:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d554:	07dc      	lsls	r4, r3, #31
 800d556:	d50e      	bpl.n	800d576 <_vfiprintf_r+0x6a>
 800d558:	f04f 30ff 	mov.w	r0, #4294967295
 800d55c:	b01d      	add	sp, #116	; 0x74
 800d55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d562:	4b7b      	ldr	r3, [pc, #492]	; (800d750 <_vfiprintf_r+0x244>)
 800d564:	429d      	cmp	r5, r3
 800d566:	d101      	bne.n	800d56c <_vfiprintf_r+0x60>
 800d568:	68b5      	ldr	r5, [r6, #8]
 800d56a:	e7df      	b.n	800d52c <_vfiprintf_r+0x20>
 800d56c:	4b79      	ldr	r3, [pc, #484]	; (800d754 <_vfiprintf_r+0x248>)
 800d56e:	429d      	cmp	r5, r3
 800d570:	bf08      	it	eq
 800d572:	68f5      	ldreq	r5, [r6, #12]
 800d574:	e7da      	b.n	800d52c <_vfiprintf_r+0x20>
 800d576:	89ab      	ldrh	r3, [r5, #12]
 800d578:	0598      	lsls	r0, r3, #22
 800d57a:	d4ed      	bmi.n	800d558 <_vfiprintf_r+0x4c>
 800d57c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d57e:	f7ff f8df 	bl	800c740 <__retarget_lock_release_recursive>
 800d582:	e7e9      	b.n	800d558 <_vfiprintf_r+0x4c>
 800d584:	2300      	movs	r3, #0
 800d586:	9309      	str	r3, [sp, #36]	; 0x24
 800d588:	2320      	movs	r3, #32
 800d58a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d58e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d592:	2330      	movs	r3, #48	; 0x30
 800d594:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d758 <_vfiprintf_r+0x24c>
 800d598:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d59c:	f04f 0901 	mov.w	r9, #1
 800d5a0:	4623      	mov	r3, r4
 800d5a2:	469a      	mov	sl, r3
 800d5a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5a8:	b10a      	cbz	r2, 800d5ae <_vfiprintf_r+0xa2>
 800d5aa:	2a25      	cmp	r2, #37	; 0x25
 800d5ac:	d1f9      	bne.n	800d5a2 <_vfiprintf_r+0x96>
 800d5ae:	ebba 0b04 	subs.w	fp, sl, r4
 800d5b2:	d00b      	beq.n	800d5cc <_vfiprintf_r+0xc0>
 800d5b4:	465b      	mov	r3, fp
 800d5b6:	4622      	mov	r2, r4
 800d5b8:	4629      	mov	r1, r5
 800d5ba:	4630      	mov	r0, r6
 800d5bc:	f7ff ff93 	bl	800d4e6 <__sfputs_r>
 800d5c0:	3001      	adds	r0, #1
 800d5c2:	f000 80aa 	beq.w	800d71a <_vfiprintf_r+0x20e>
 800d5c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5c8:	445a      	add	r2, fp
 800d5ca:	9209      	str	r2, [sp, #36]	; 0x24
 800d5cc:	f89a 3000 	ldrb.w	r3, [sl]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	f000 80a2 	beq.w	800d71a <_vfiprintf_r+0x20e>
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d5dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5e0:	f10a 0a01 	add.w	sl, sl, #1
 800d5e4:	9304      	str	r3, [sp, #16]
 800d5e6:	9307      	str	r3, [sp, #28]
 800d5e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d5ec:	931a      	str	r3, [sp, #104]	; 0x68
 800d5ee:	4654      	mov	r4, sl
 800d5f0:	2205      	movs	r2, #5
 800d5f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5f6:	4858      	ldr	r0, [pc, #352]	; (800d758 <_vfiprintf_r+0x24c>)
 800d5f8:	f7f2 fdf2 	bl	80001e0 <memchr>
 800d5fc:	9a04      	ldr	r2, [sp, #16]
 800d5fe:	b9d8      	cbnz	r0, 800d638 <_vfiprintf_r+0x12c>
 800d600:	06d1      	lsls	r1, r2, #27
 800d602:	bf44      	itt	mi
 800d604:	2320      	movmi	r3, #32
 800d606:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d60a:	0713      	lsls	r3, r2, #28
 800d60c:	bf44      	itt	mi
 800d60e:	232b      	movmi	r3, #43	; 0x2b
 800d610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d614:	f89a 3000 	ldrb.w	r3, [sl]
 800d618:	2b2a      	cmp	r3, #42	; 0x2a
 800d61a:	d015      	beq.n	800d648 <_vfiprintf_r+0x13c>
 800d61c:	9a07      	ldr	r2, [sp, #28]
 800d61e:	4654      	mov	r4, sl
 800d620:	2000      	movs	r0, #0
 800d622:	f04f 0c0a 	mov.w	ip, #10
 800d626:	4621      	mov	r1, r4
 800d628:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d62c:	3b30      	subs	r3, #48	; 0x30
 800d62e:	2b09      	cmp	r3, #9
 800d630:	d94e      	bls.n	800d6d0 <_vfiprintf_r+0x1c4>
 800d632:	b1b0      	cbz	r0, 800d662 <_vfiprintf_r+0x156>
 800d634:	9207      	str	r2, [sp, #28]
 800d636:	e014      	b.n	800d662 <_vfiprintf_r+0x156>
 800d638:	eba0 0308 	sub.w	r3, r0, r8
 800d63c:	fa09 f303 	lsl.w	r3, r9, r3
 800d640:	4313      	orrs	r3, r2
 800d642:	9304      	str	r3, [sp, #16]
 800d644:	46a2      	mov	sl, r4
 800d646:	e7d2      	b.n	800d5ee <_vfiprintf_r+0xe2>
 800d648:	9b03      	ldr	r3, [sp, #12]
 800d64a:	1d19      	adds	r1, r3, #4
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	9103      	str	r1, [sp, #12]
 800d650:	2b00      	cmp	r3, #0
 800d652:	bfbb      	ittet	lt
 800d654:	425b      	neglt	r3, r3
 800d656:	f042 0202 	orrlt.w	r2, r2, #2
 800d65a:	9307      	strge	r3, [sp, #28]
 800d65c:	9307      	strlt	r3, [sp, #28]
 800d65e:	bfb8      	it	lt
 800d660:	9204      	strlt	r2, [sp, #16]
 800d662:	7823      	ldrb	r3, [r4, #0]
 800d664:	2b2e      	cmp	r3, #46	; 0x2e
 800d666:	d10c      	bne.n	800d682 <_vfiprintf_r+0x176>
 800d668:	7863      	ldrb	r3, [r4, #1]
 800d66a:	2b2a      	cmp	r3, #42	; 0x2a
 800d66c:	d135      	bne.n	800d6da <_vfiprintf_r+0x1ce>
 800d66e:	9b03      	ldr	r3, [sp, #12]
 800d670:	1d1a      	adds	r2, r3, #4
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	9203      	str	r2, [sp, #12]
 800d676:	2b00      	cmp	r3, #0
 800d678:	bfb8      	it	lt
 800d67a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d67e:	3402      	adds	r4, #2
 800d680:	9305      	str	r3, [sp, #20]
 800d682:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d768 <_vfiprintf_r+0x25c>
 800d686:	7821      	ldrb	r1, [r4, #0]
 800d688:	2203      	movs	r2, #3
 800d68a:	4650      	mov	r0, sl
 800d68c:	f7f2 fda8 	bl	80001e0 <memchr>
 800d690:	b140      	cbz	r0, 800d6a4 <_vfiprintf_r+0x198>
 800d692:	2340      	movs	r3, #64	; 0x40
 800d694:	eba0 000a 	sub.w	r0, r0, sl
 800d698:	fa03 f000 	lsl.w	r0, r3, r0
 800d69c:	9b04      	ldr	r3, [sp, #16]
 800d69e:	4303      	orrs	r3, r0
 800d6a0:	3401      	adds	r4, #1
 800d6a2:	9304      	str	r3, [sp, #16]
 800d6a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6a8:	482c      	ldr	r0, [pc, #176]	; (800d75c <_vfiprintf_r+0x250>)
 800d6aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6ae:	2206      	movs	r2, #6
 800d6b0:	f7f2 fd96 	bl	80001e0 <memchr>
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	d03f      	beq.n	800d738 <_vfiprintf_r+0x22c>
 800d6b8:	4b29      	ldr	r3, [pc, #164]	; (800d760 <_vfiprintf_r+0x254>)
 800d6ba:	bb1b      	cbnz	r3, 800d704 <_vfiprintf_r+0x1f8>
 800d6bc:	9b03      	ldr	r3, [sp, #12]
 800d6be:	3307      	adds	r3, #7
 800d6c0:	f023 0307 	bic.w	r3, r3, #7
 800d6c4:	3308      	adds	r3, #8
 800d6c6:	9303      	str	r3, [sp, #12]
 800d6c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6ca:	443b      	add	r3, r7
 800d6cc:	9309      	str	r3, [sp, #36]	; 0x24
 800d6ce:	e767      	b.n	800d5a0 <_vfiprintf_r+0x94>
 800d6d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6d4:	460c      	mov	r4, r1
 800d6d6:	2001      	movs	r0, #1
 800d6d8:	e7a5      	b.n	800d626 <_vfiprintf_r+0x11a>
 800d6da:	2300      	movs	r3, #0
 800d6dc:	3401      	adds	r4, #1
 800d6de:	9305      	str	r3, [sp, #20]
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	f04f 0c0a 	mov.w	ip, #10
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6ec:	3a30      	subs	r2, #48	; 0x30
 800d6ee:	2a09      	cmp	r2, #9
 800d6f0:	d903      	bls.n	800d6fa <_vfiprintf_r+0x1ee>
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d0c5      	beq.n	800d682 <_vfiprintf_r+0x176>
 800d6f6:	9105      	str	r1, [sp, #20]
 800d6f8:	e7c3      	b.n	800d682 <_vfiprintf_r+0x176>
 800d6fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6fe:	4604      	mov	r4, r0
 800d700:	2301      	movs	r3, #1
 800d702:	e7f0      	b.n	800d6e6 <_vfiprintf_r+0x1da>
 800d704:	ab03      	add	r3, sp, #12
 800d706:	9300      	str	r3, [sp, #0]
 800d708:	462a      	mov	r2, r5
 800d70a:	4b16      	ldr	r3, [pc, #88]	; (800d764 <_vfiprintf_r+0x258>)
 800d70c:	a904      	add	r1, sp, #16
 800d70e:	4630      	mov	r0, r6
 800d710:	f3af 8000 	nop.w
 800d714:	4607      	mov	r7, r0
 800d716:	1c78      	adds	r0, r7, #1
 800d718:	d1d6      	bne.n	800d6c8 <_vfiprintf_r+0x1bc>
 800d71a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d71c:	07d9      	lsls	r1, r3, #31
 800d71e:	d405      	bmi.n	800d72c <_vfiprintf_r+0x220>
 800d720:	89ab      	ldrh	r3, [r5, #12]
 800d722:	059a      	lsls	r2, r3, #22
 800d724:	d402      	bmi.n	800d72c <_vfiprintf_r+0x220>
 800d726:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d728:	f7ff f80a 	bl	800c740 <__retarget_lock_release_recursive>
 800d72c:	89ab      	ldrh	r3, [r5, #12]
 800d72e:	065b      	lsls	r3, r3, #25
 800d730:	f53f af12 	bmi.w	800d558 <_vfiprintf_r+0x4c>
 800d734:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d736:	e711      	b.n	800d55c <_vfiprintf_r+0x50>
 800d738:	ab03      	add	r3, sp, #12
 800d73a:	9300      	str	r3, [sp, #0]
 800d73c:	462a      	mov	r2, r5
 800d73e:	4b09      	ldr	r3, [pc, #36]	; (800d764 <_vfiprintf_r+0x258>)
 800d740:	a904      	add	r1, sp, #16
 800d742:	4630      	mov	r0, r6
 800d744:	f000 f880 	bl	800d848 <_printf_i>
 800d748:	e7e4      	b.n	800d714 <_vfiprintf_r+0x208>
 800d74a:	bf00      	nop
 800d74c:	0800e3f0 	.word	0x0800e3f0
 800d750:	0800e410 	.word	0x0800e410
 800d754:	0800e3d0 	.word	0x0800e3d0
 800d758:	0800e4e4 	.word	0x0800e4e4
 800d75c:	0800e4ee 	.word	0x0800e4ee
 800d760:	00000000 	.word	0x00000000
 800d764:	0800d4e7 	.word	0x0800d4e7
 800d768:	0800e4ea 	.word	0x0800e4ea

0800d76c <_printf_common>:
 800d76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d770:	4616      	mov	r6, r2
 800d772:	4699      	mov	r9, r3
 800d774:	688a      	ldr	r2, [r1, #8]
 800d776:	690b      	ldr	r3, [r1, #16]
 800d778:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d77c:	4293      	cmp	r3, r2
 800d77e:	bfb8      	it	lt
 800d780:	4613      	movlt	r3, r2
 800d782:	6033      	str	r3, [r6, #0]
 800d784:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d788:	4607      	mov	r7, r0
 800d78a:	460c      	mov	r4, r1
 800d78c:	b10a      	cbz	r2, 800d792 <_printf_common+0x26>
 800d78e:	3301      	adds	r3, #1
 800d790:	6033      	str	r3, [r6, #0]
 800d792:	6823      	ldr	r3, [r4, #0]
 800d794:	0699      	lsls	r1, r3, #26
 800d796:	bf42      	ittt	mi
 800d798:	6833      	ldrmi	r3, [r6, #0]
 800d79a:	3302      	addmi	r3, #2
 800d79c:	6033      	strmi	r3, [r6, #0]
 800d79e:	6825      	ldr	r5, [r4, #0]
 800d7a0:	f015 0506 	ands.w	r5, r5, #6
 800d7a4:	d106      	bne.n	800d7b4 <_printf_common+0x48>
 800d7a6:	f104 0a19 	add.w	sl, r4, #25
 800d7aa:	68e3      	ldr	r3, [r4, #12]
 800d7ac:	6832      	ldr	r2, [r6, #0]
 800d7ae:	1a9b      	subs	r3, r3, r2
 800d7b0:	42ab      	cmp	r3, r5
 800d7b2:	dc26      	bgt.n	800d802 <_printf_common+0x96>
 800d7b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d7b8:	1e13      	subs	r3, r2, #0
 800d7ba:	6822      	ldr	r2, [r4, #0]
 800d7bc:	bf18      	it	ne
 800d7be:	2301      	movne	r3, #1
 800d7c0:	0692      	lsls	r2, r2, #26
 800d7c2:	d42b      	bmi.n	800d81c <_printf_common+0xb0>
 800d7c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d7c8:	4649      	mov	r1, r9
 800d7ca:	4638      	mov	r0, r7
 800d7cc:	47c0      	blx	r8
 800d7ce:	3001      	adds	r0, #1
 800d7d0:	d01e      	beq.n	800d810 <_printf_common+0xa4>
 800d7d2:	6823      	ldr	r3, [r4, #0]
 800d7d4:	68e5      	ldr	r5, [r4, #12]
 800d7d6:	6832      	ldr	r2, [r6, #0]
 800d7d8:	f003 0306 	and.w	r3, r3, #6
 800d7dc:	2b04      	cmp	r3, #4
 800d7de:	bf08      	it	eq
 800d7e0:	1aad      	subeq	r5, r5, r2
 800d7e2:	68a3      	ldr	r3, [r4, #8]
 800d7e4:	6922      	ldr	r2, [r4, #16]
 800d7e6:	bf0c      	ite	eq
 800d7e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d7ec:	2500      	movne	r5, #0
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	bfc4      	itt	gt
 800d7f2:	1a9b      	subgt	r3, r3, r2
 800d7f4:	18ed      	addgt	r5, r5, r3
 800d7f6:	2600      	movs	r6, #0
 800d7f8:	341a      	adds	r4, #26
 800d7fa:	42b5      	cmp	r5, r6
 800d7fc:	d11a      	bne.n	800d834 <_printf_common+0xc8>
 800d7fe:	2000      	movs	r0, #0
 800d800:	e008      	b.n	800d814 <_printf_common+0xa8>
 800d802:	2301      	movs	r3, #1
 800d804:	4652      	mov	r2, sl
 800d806:	4649      	mov	r1, r9
 800d808:	4638      	mov	r0, r7
 800d80a:	47c0      	blx	r8
 800d80c:	3001      	adds	r0, #1
 800d80e:	d103      	bne.n	800d818 <_printf_common+0xac>
 800d810:	f04f 30ff 	mov.w	r0, #4294967295
 800d814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d818:	3501      	adds	r5, #1
 800d81a:	e7c6      	b.n	800d7aa <_printf_common+0x3e>
 800d81c:	18e1      	adds	r1, r4, r3
 800d81e:	1c5a      	adds	r2, r3, #1
 800d820:	2030      	movs	r0, #48	; 0x30
 800d822:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d826:	4422      	add	r2, r4
 800d828:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d82c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d830:	3302      	adds	r3, #2
 800d832:	e7c7      	b.n	800d7c4 <_printf_common+0x58>
 800d834:	2301      	movs	r3, #1
 800d836:	4622      	mov	r2, r4
 800d838:	4649      	mov	r1, r9
 800d83a:	4638      	mov	r0, r7
 800d83c:	47c0      	blx	r8
 800d83e:	3001      	adds	r0, #1
 800d840:	d0e6      	beq.n	800d810 <_printf_common+0xa4>
 800d842:	3601      	adds	r6, #1
 800d844:	e7d9      	b.n	800d7fa <_printf_common+0x8e>
	...

0800d848 <_printf_i>:
 800d848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d84c:	7e0f      	ldrb	r7, [r1, #24]
 800d84e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d850:	2f78      	cmp	r7, #120	; 0x78
 800d852:	4691      	mov	r9, r2
 800d854:	4680      	mov	r8, r0
 800d856:	460c      	mov	r4, r1
 800d858:	469a      	mov	sl, r3
 800d85a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d85e:	d807      	bhi.n	800d870 <_printf_i+0x28>
 800d860:	2f62      	cmp	r7, #98	; 0x62
 800d862:	d80a      	bhi.n	800d87a <_printf_i+0x32>
 800d864:	2f00      	cmp	r7, #0
 800d866:	f000 80d8 	beq.w	800da1a <_printf_i+0x1d2>
 800d86a:	2f58      	cmp	r7, #88	; 0x58
 800d86c:	f000 80a3 	beq.w	800d9b6 <_printf_i+0x16e>
 800d870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d874:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d878:	e03a      	b.n	800d8f0 <_printf_i+0xa8>
 800d87a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d87e:	2b15      	cmp	r3, #21
 800d880:	d8f6      	bhi.n	800d870 <_printf_i+0x28>
 800d882:	a101      	add	r1, pc, #4	; (adr r1, 800d888 <_printf_i+0x40>)
 800d884:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d888:	0800d8e1 	.word	0x0800d8e1
 800d88c:	0800d8f5 	.word	0x0800d8f5
 800d890:	0800d871 	.word	0x0800d871
 800d894:	0800d871 	.word	0x0800d871
 800d898:	0800d871 	.word	0x0800d871
 800d89c:	0800d871 	.word	0x0800d871
 800d8a0:	0800d8f5 	.word	0x0800d8f5
 800d8a4:	0800d871 	.word	0x0800d871
 800d8a8:	0800d871 	.word	0x0800d871
 800d8ac:	0800d871 	.word	0x0800d871
 800d8b0:	0800d871 	.word	0x0800d871
 800d8b4:	0800da01 	.word	0x0800da01
 800d8b8:	0800d925 	.word	0x0800d925
 800d8bc:	0800d9e3 	.word	0x0800d9e3
 800d8c0:	0800d871 	.word	0x0800d871
 800d8c4:	0800d871 	.word	0x0800d871
 800d8c8:	0800da23 	.word	0x0800da23
 800d8cc:	0800d871 	.word	0x0800d871
 800d8d0:	0800d925 	.word	0x0800d925
 800d8d4:	0800d871 	.word	0x0800d871
 800d8d8:	0800d871 	.word	0x0800d871
 800d8dc:	0800d9eb 	.word	0x0800d9eb
 800d8e0:	682b      	ldr	r3, [r5, #0]
 800d8e2:	1d1a      	adds	r2, r3, #4
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	602a      	str	r2, [r5, #0]
 800d8e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	e0a3      	b.n	800da3c <_printf_i+0x1f4>
 800d8f4:	6820      	ldr	r0, [r4, #0]
 800d8f6:	6829      	ldr	r1, [r5, #0]
 800d8f8:	0606      	lsls	r6, r0, #24
 800d8fa:	f101 0304 	add.w	r3, r1, #4
 800d8fe:	d50a      	bpl.n	800d916 <_printf_i+0xce>
 800d900:	680e      	ldr	r6, [r1, #0]
 800d902:	602b      	str	r3, [r5, #0]
 800d904:	2e00      	cmp	r6, #0
 800d906:	da03      	bge.n	800d910 <_printf_i+0xc8>
 800d908:	232d      	movs	r3, #45	; 0x2d
 800d90a:	4276      	negs	r6, r6
 800d90c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d910:	485e      	ldr	r0, [pc, #376]	; (800da8c <_printf_i+0x244>)
 800d912:	230a      	movs	r3, #10
 800d914:	e019      	b.n	800d94a <_printf_i+0x102>
 800d916:	680e      	ldr	r6, [r1, #0]
 800d918:	602b      	str	r3, [r5, #0]
 800d91a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d91e:	bf18      	it	ne
 800d920:	b236      	sxthne	r6, r6
 800d922:	e7ef      	b.n	800d904 <_printf_i+0xbc>
 800d924:	682b      	ldr	r3, [r5, #0]
 800d926:	6820      	ldr	r0, [r4, #0]
 800d928:	1d19      	adds	r1, r3, #4
 800d92a:	6029      	str	r1, [r5, #0]
 800d92c:	0601      	lsls	r1, r0, #24
 800d92e:	d501      	bpl.n	800d934 <_printf_i+0xec>
 800d930:	681e      	ldr	r6, [r3, #0]
 800d932:	e002      	b.n	800d93a <_printf_i+0xf2>
 800d934:	0646      	lsls	r6, r0, #25
 800d936:	d5fb      	bpl.n	800d930 <_printf_i+0xe8>
 800d938:	881e      	ldrh	r6, [r3, #0]
 800d93a:	4854      	ldr	r0, [pc, #336]	; (800da8c <_printf_i+0x244>)
 800d93c:	2f6f      	cmp	r7, #111	; 0x6f
 800d93e:	bf0c      	ite	eq
 800d940:	2308      	moveq	r3, #8
 800d942:	230a      	movne	r3, #10
 800d944:	2100      	movs	r1, #0
 800d946:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d94a:	6865      	ldr	r5, [r4, #4]
 800d94c:	60a5      	str	r5, [r4, #8]
 800d94e:	2d00      	cmp	r5, #0
 800d950:	bfa2      	ittt	ge
 800d952:	6821      	ldrge	r1, [r4, #0]
 800d954:	f021 0104 	bicge.w	r1, r1, #4
 800d958:	6021      	strge	r1, [r4, #0]
 800d95a:	b90e      	cbnz	r6, 800d960 <_printf_i+0x118>
 800d95c:	2d00      	cmp	r5, #0
 800d95e:	d04d      	beq.n	800d9fc <_printf_i+0x1b4>
 800d960:	4615      	mov	r5, r2
 800d962:	fbb6 f1f3 	udiv	r1, r6, r3
 800d966:	fb03 6711 	mls	r7, r3, r1, r6
 800d96a:	5dc7      	ldrb	r7, [r0, r7]
 800d96c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d970:	4637      	mov	r7, r6
 800d972:	42bb      	cmp	r3, r7
 800d974:	460e      	mov	r6, r1
 800d976:	d9f4      	bls.n	800d962 <_printf_i+0x11a>
 800d978:	2b08      	cmp	r3, #8
 800d97a:	d10b      	bne.n	800d994 <_printf_i+0x14c>
 800d97c:	6823      	ldr	r3, [r4, #0]
 800d97e:	07de      	lsls	r6, r3, #31
 800d980:	d508      	bpl.n	800d994 <_printf_i+0x14c>
 800d982:	6923      	ldr	r3, [r4, #16]
 800d984:	6861      	ldr	r1, [r4, #4]
 800d986:	4299      	cmp	r1, r3
 800d988:	bfde      	ittt	le
 800d98a:	2330      	movle	r3, #48	; 0x30
 800d98c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d990:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d994:	1b52      	subs	r2, r2, r5
 800d996:	6122      	str	r2, [r4, #16]
 800d998:	f8cd a000 	str.w	sl, [sp]
 800d99c:	464b      	mov	r3, r9
 800d99e:	aa03      	add	r2, sp, #12
 800d9a0:	4621      	mov	r1, r4
 800d9a2:	4640      	mov	r0, r8
 800d9a4:	f7ff fee2 	bl	800d76c <_printf_common>
 800d9a8:	3001      	adds	r0, #1
 800d9aa:	d14c      	bne.n	800da46 <_printf_i+0x1fe>
 800d9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d9b0:	b004      	add	sp, #16
 800d9b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9b6:	4835      	ldr	r0, [pc, #212]	; (800da8c <_printf_i+0x244>)
 800d9b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d9bc:	6829      	ldr	r1, [r5, #0]
 800d9be:	6823      	ldr	r3, [r4, #0]
 800d9c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800d9c4:	6029      	str	r1, [r5, #0]
 800d9c6:	061d      	lsls	r5, r3, #24
 800d9c8:	d514      	bpl.n	800d9f4 <_printf_i+0x1ac>
 800d9ca:	07df      	lsls	r7, r3, #31
 800d9cc:	bf44      	itt	mi
 800d9ce:	f043 0320 	orrmi.w	r3, r3, #32
 800d9d2:	6023      	strmi	r3, [r4, #0]
 800d9d4:	b91e      	cbnz	r6, 800d9de <_printf_i+0x196>
 800d9d6:	6823      	ldr	r3, [r4, #0]
 800d9d8:	f023 0320 	bic.w	r3, r3, #32
 800d9dc:	6023      	str	r3, [r4, #0]
 800d9de:	2310      	movs	r3, #16
 800d9e0:	e7b0      	b.n	800d944 <_printf_i+0xfc>
 800d9e2:	6823      	ldr	r3, [r4, #0]
 800d9e4:	f043 0320 	orr.w	r3, r3, #32
 800d9e8:	6023      	str	r3, [r4, #0]
 800d9ea:	2378      	movs	r3, #120	; 0x78
 800d9ec:	4828      	ldr	r0, [pc, #160]	; (800da90 <_printf_i+0x248>)
 800d9ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d9f2:	e7e3      	b.n	800d9bc <_printf_i+0x174>
 800d9f4:	0659      	lsls	r1, r3, #25
 800d9f6:	bf48      	it	mi
 800d9f8:	b2b6      	uxthmi	r6, r6
 800d9fa:	e7e6      	b.n	800d9ca <_printf_i+0x182>
 800d9fc:	4615      	mov	r5, r2
 800d9fe:	e7bb      	b.n	800d978 <_printf_i+0x130>
 800da00:	682b      	ldr	r3, [r5, #0]
 800da02:	6826      	ldr	r6, [r4, #0]
 800da04:	6961      	ldr	r1, [r4, #20]
 800da06:	1d18      	adds	r0, r3, #4
 800da08:	6028      	str	r0, [r5, #0]
 800da0a:	0635      	lsls	r5, r6, #24
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	d501      	bpl.n	800da14 <_printf_i+0x1cc>
 800da10:	6019      	str	r1, [r3, #0]
 800da12:	e002      	b.n	800da1a <_printf_i+0x1d2>
 800da14:	0670      	lsls	r0, r6, #25
 800da16:	d5fb      	bpl.n	800da10 <_printf_i+0x1c8>
 800da18:	8019      	strh	r1, [r3, #0]
 800da1a:	2300      	movs	r3, #0
 800da1c:	6123      	str	r3, [r4, #16]
 800da1e:	4615      	mov	r5, r2
 800da20:	e7ba      	b.n	800d998 <_printf_i+0x150>
 800da22:	682b      	ldr	r3, [r5, #0]
 800da24:	1d1a      	adds	r2, r3, #4
 800da26:	602a      	str	r2, [r5, #0]
 800da28:	681d      	ldr	r5, [r3, #0]
 800da2a:	6862      	ldr	r2, [r4, #4]
 800da2c:	2100      	movs	r1, #0
 800da2e:	4628      	mov	r0, r5
 800da30:	f7f2 fbd6 	bl	80001e0 <memchr>
 800da34:	b108      	cbz	r0, 800da3a <_printf_i+0x1f2>
 800da36:	1b40      	subs	r0, r0, r5
 800da38:	6060      	str	r0, [r4, #4]
 800da3a:	6863      	ldr	r3, [r4, #4]
 800da3c:	6123      	str	r3, [r4, #16]
 800da3e:	2300      	movs	r3, #0
 800da40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da44:	e7a8      	b.n	800d998 <_printf_i+0x150>
 800da46:	6923      	ldr	r3, [r4, #16]
 800da48:	462a      	mov	r2, r5
 800da4a:	4649      	mov	r1, r9
 800da4c:	4640      	mov	r0, r8
 800da4e:	47d0      	blx	sl
 800da50:	3001      	adds	r0, #1
 800da52:	d0ab      	beq.n	800d9ac <_printf_i+0x164>
 800da54:	6823      	ldr	r3, [r4, #0]
 800da56:	079b      	lsls	r3, r3, #30
 800da58:	d413      	bmi.n	800da82 <_printf_i+0x23a>
 800da5a:	68e0      	ldr	r0, [r4, #12]
 800da5c:	9b03      	ldr	r3, [sp, #12]
 800da5e:	4298      	cmp	r0, r3
 800da60:	bfb8      	it	lt
 800da62:	4618      	movlt	r0, r3
 800da64:	e7a4      	b.n	800d9b0 <_printf_i+0x168>
 800da66:	2301      	movs	r3, #1
 800da68:	4632      	mov	r2, r6
 800da6a:	4649      	mov	r1, r9
 800da6c:	4640      	mov	r0, r8
 800da6e:	47d0      	blx	sl
 800da70:	3001      	adds	r0, #1
 800da72:	d09b      	beq.n	800d9ac <_printf_i+0x164>
 800da74:	3501      	adds	r5, #1
 800da76:	68e3      	ldr	r3, [r4, #12]
 800da78:	9903      	ldr	r1, [sp, #12]
 800da7a:	1a5b      	subs	r3, r3, r1
 800da7c:	42ab      	cmp	r3, r5
 800da7e:	dcf2      	bgt.n	800da66 <_printf_i+0x21e>
 800da80:	e7eb      	b.n	800da5a <_printf_i+0x212>
 800da82:	2500      	movs	r5, #0
 800da84:	f104 0619 	add.w	r6, r4, #25
 800da88:	e7f5      	b.n	800da76 <_printf_i+0x22e>
 800da8a:	bf00      	nop
 800da8c:	0800e4f5 	.word	0x0800e4f5
 800da90:	0800e506 	.word	0x0800e506

0800da94 <_read_r>:
 800da94:	b538      	push	{r3, r4, r5, lr}
 800da96:	4d07      	ldr	r5, [pc, #28]	; (800dab4 <_read_r+0x20>)
 800da98:	4604      	mov	r4, r0
 800da9a:	4608      	mov	r0, r1
 800da9c:	4611      	mov	r1, r2
 800da9e:	2200      	movs	r2, #0
 800daa0:	602a      	str	r2, [r5, #0]
 800daa2:	461a      	mov	r2, r3
 800daa4:	f7f3 fe7a 	bl	800179c <_read>
 800daa8:	1c43      	adds	r3, r0, #1
 800daaa:	d102      	bne.n	800dab2 <_read_r+0x1e>
 800daac:	682b      	ldr	r3, [r5, #0]
 800daae:	b103      	cbz	r3, 800dab2 <_read_r+0x1e>
 800dab0:	6023      	str	r3, [r4, #0]
 800dab2:	bd38      	pop	{r3, r4, r5, pc}
 800dab4:	20002bac 	.word	0x20002bac

0800dab8 <abort>:
 800dab8:	b508      	push	{r3, lr}
 800daba:	2006      	movs	r0, #6
 800dabc:	f000 f898 	bl	800dbf0 <raise>
 800dac0:	2001      	movs	r0, #1
 800dac2:	f7f3 fe61 	bl	8001788 <_exit>
	...

0800dac8 <_fstat_r>:
 800dac8:	b538      	push	{r3, r4, r5, lr}
 800daca:	4d07      	ldr	r5, [pc, #28]	; (800dae8 <_fstat_r+0x20>)
 800dacc:	2300      	movs	r3, #0
 800dace:	4604      	mov	r4, r0
 800dad0:	4608      	mov	r0, r1
 800dad2:	4611      	mov	r1, r2
 800dad4:	602b      	str	r3, [r5, #0]
 800dad6:	f7f3 fea6 	bl	8001826 <_fstat>
 800dada:	1c43      	adds	r3, r0, #1
 800dadc:	d102      	bne.n	800dae4 <_fstat_r+0x1c>
 800dade:	682b      	ldr	r3, [r5, #0]
 800dae0:	b103      	cbz	r3, 800dae4 <_fstat_r+0x1c>
 800dae2:	6023      	str	r3, [r4, #0]
 800dae4:	bd38      	pop	{r3, r4, r5, pc}
 800dae6:	bf00      	nop
 800dae8:	20002bac 	.word	0x20002bac

0800daec <_isatty_r>:
 800daec:	b538      	push	{r3, r4, r5, lr}
 800daee:	4d06      	ldr	r5, [pc, #24]	; (800db08 <_isatty_r+0x1c>)
 800daf0:	2300      	movs	r3, #0
 800daf2:	4604      	mov	r4, r0
 800daf4:	4608      	mov	r0, r1
 800daf6:	602b      	str	r3, [r5, #0]
 800daf8:	f7f3 fea5 	bl	8001846 <_isatty>
 800dafc:	1c43      	adds	r3, r0, #1
 800dafe:	d102      	bne.n	800db06 <_isatty_r+0x1a>
 800db00:	682b      	ldr	r3, [r5, #0]
 800db02:	b103      	cbz	r3, 800db06 <_isatty_r+0x1a>
 800db04:	6023      	str	r3, [r4, #0]
 800db06:	bd38      	pop	{r3, r4, r5, pc}
 800db08:	20002bac 	.word	0x20002bac

0800db0c <memmove>:
 800db0c:	4288      	cmp	r0, r1
 800db0e:	b510      	push	{r4, lr}
 800db10:	eb01 0402 	add.w	r4, r1, r2
 800db14:	d902      	bls.n	800db1c <memmove+0x10>
 800db16:	4284      	cmp	r4, r0
 800db18:	4623      	mov	r3, r4
 800db1a:	d807      	bhi.n	800db2c <memmove+0x20>
 800db1c:	1e43      	subs	r3, r0, #1
 800db1e:	42a1      	cmp	r1, r4
 800db20:	d008      	beq.n	800db34 <memmove+0x28>
 800db22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db26:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db2a:	e7f8      	b.n	800db1e <memmove+0x12>
 800db2c:	4402      	add	r2, r0
 800db2e:	4601      	mov	r1, r0
 800db30:	428a      	cmp	r2, r1
 800db32:	d100      	bne.n	800db36 <memmove+0x2a>
 800db34:	bd10      	pop	{r4, pc}
 800db36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db3e:	e7f7      	b.n	800db30 <memmove+0x24>

0800db40 <_realloc_r>:
 800db40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db44:	4680      	mov	r8, r0
 800db46:	4614      	mov	r4, r2
 800db48:	460e      	mov	r6, r1
 800db4a:	b921      	cbnz	r1, 800db56 <_realloc_r+0x16>
 800db4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db50:	4611      	mov	r1, r2
 800db52:	f7fe be99 	b.w	800c888 <_malloc_r>
 800db56:	b92a      	cbnz	r2, 800db64 <_realloc_r+0x24>
 800db58:	f7fe fe2a 	bl	800c7b0 <_free_r>
 800db5c:	4625      	mov	r5, r4
 800db5e:	4628      	mov	r0, r5
 800db60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db64:	f000 f860 	bl	800dc28 <_malloc_usable_size_r>
 800db68:	4284      	cmp	r4, r0
 800db6a:	4607      	mov	r7, r0
 800db6c:	d802      	bhi.n	800db74 <_realloc_r+0x34>
 800db6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800db72:	d812      	bhi.n	800db9a <_realloc_r+0x5a>
 800db74:	4621      	mov	r1, r4
 800db76:	4640      	mov	r0, r8
 800db78:	f7fe fe86 	bl	800c888 <_malloc_r>
 800db7c:	4605      	mov	r5, r0
 800db7e:	2800      	cmp	r0, #0
 800db80:	d0ed      	beq.n	800db5e <_realloc_r+0x1e>
 800db82:	42bc      	cmp	r4, r7
 800db84:	4622      	mov	r2, r4
 800db86:	4631      	mov	r1, r6
 800db88:	bf28      	it	cs
 800db8a:	463a      	movcs	r2, r7
 800db8c:	f7fe fdfa 	bl	800c784 <memcpy>
 800db90:	4631      	mov	r1, r6
 800db92:	4640      	mov	r0, r8
 800db94:	f7fe fe0c 	bl	800c7b0 <_free_r>
 800db98:	e7e1      	b.n	800db5e <_realloc_r+0x1e>
 800db9a:	4635      	mov	r5, r6
 800db9c:	e7df      	b.n	800db5e <_realloc_r+0x1e>

0800db9e <_raise_r>:
 800db9e:	291f      	cmp	r1, #31
 800dba0:	b538      	push	{r3, r4, r5, lr}
 800dba2:	4604      	mov	r4, r0
 800dba4:	460d      	mov	r5, r1
 800dba6:	d904      	bls.n	800dbb2 <_raise_r+0x14>
 800dba8:	2316      	movs	r3, #22
 800dbaa:	6003      	str	r3, [r0, #0]
 800dbac:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb0:	bd38      	pop	{r3, r4, r5, pc}
 800dbb2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dbb4:	b112      	cbz	r2, 800dbbc <_raise_r+0x1e>
 800dbb6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dbba:	b94b      	cbnz	r3, 800dbd0 <_raise_r+0x32>
 800dbbc:	4620      	mov	r0, r4
 800dbbe:	f000 f831 	bl	800dc24 <_getpid_r>
 800dbc2:	462a      	mov	r2, r5
 800dbc4:	4601      	mov	r1, r0
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbcc:	f000 b818 	b.w	800dc00 <_kill_r>
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d00a      	beq.n	800dbea <_raise_r+0x4c>
 800dbd4:	1c59      	adds	r1, r3, #1
 800dbd6:	d103      	bne.n	800dbe0 <_raise_r+0x42>
 800dbd8:	2316      	movs	r3, #22
 800dbda:	6003      	str	r3, [r0, #0]
 800dbdc:	2001      	movs	r0, #1
 800dbde:	e7e7      	b.n	800dbb0 <_raise_r+0x12>
 800dbe0:	2400      	movs	r4, #0
 800dbe2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dbe6:	4628      	mov	r0, r5
 800dbe8:	4798      	blx	r3
 800dbea:	2000      	movs	r0, #0
 800dbec:	e7e0      	b.n	800dbb0 <_raise_r+0x12>
	...

0800dbf0 <raise>:
 800dbf0:	4b02      	ldr	r3, [pc, #8]	; (800dbfc <raise+0xc>)
 800dbf2:	4601      	mov	r1, r0
 800dbf4:	6818      	ldr	r0, [r3, #0]
 800dbf6:	f7ff bfd2 	b.w	800db9e <_raise_r>
 800dbfa:	bf00      	nop
 800dbfc:	20000010 	.word	0x20000010

0800dc00 <_kill_r>:
 800dc00:	b538      	push	{r3, r4, r5, lr}
 800dc02:	4d07      	ldr	r5, [pc, #28]	; (800dc20 <_kill_r+0x20>)
 800dc04:	2300      	movs	r3, #0
 800dc06:	4604      	mov	r4, r0
 800dc08:	4608      	mov	r0, r1
 800dc0a:	4611      	mov	r1, r2
 800dc0c:	602b      	str	r3, [r5, #0]
 800dc0e:	f7f3 fdab 	bl	8001768 <_kill>
 800dc12:	1c43      	adds	r3, r0, #1
 800dc14:	d102      	bne.n	800dc1c <_kill_r+0x1c>
 800dc16:	682b      	ldr	r3, [r5, #0]
 800dc18:	b103      	cbz	r3, 800dc1c <_kill_r+0x1c>
 800dc1a:	6023      	str	r3, [r4, #0]
 800dc1c:	bd38      	pop	{r3, r4, r5, pc}
 800dc1e:	bf00      	nop
 800dc20:	20002bac 	.word	0x20002bac

0800dc24 <_getpid_r>:
 800dc24:	f7f3 bd98 	b.w	8001758 <_getpid>

0800dc28 <_malloc_usable_size_r>:
 800dc28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc2c:	1f18      	subs	r0, r3, #4
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	bfbc      	itt	lt
 800dc32:	580b      	ldrlt	r3, [r1, r0]
 800dc34:	18c0      	addlt	r0, r0, r3
 800dc36:	4770      	bx	lr

0800dc38 <_init>:
 800dc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc3a:	bf00      	nop
 800dc3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc3e:	bc08      	pop	{r3}
 800dc40:	469e      	mov	lr, r3
 800dc42:	4770      	bx	lr

0800dc44 <_fini>:
 800dc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc46:	bf00      	nop
 800dc48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc4a:	bc08      	pop	{r3}
 800dc4c:	469e      	mov	lr, r3
 800dc4e:	4770      	bx	lr
