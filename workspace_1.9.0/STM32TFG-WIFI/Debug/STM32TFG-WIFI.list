
STM32TFG-WIFI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dab0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f8  0800dc40  0800dc40  0001dc40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e538  0800e538  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800e538  0800e538  0001e538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e540  0800e540  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e540  0800e540  0001e540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e544  0800e544  0001e544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800e548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b3c  20000074  0800e5bc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002bb0  0800e5bc  00022bb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032040  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000612e  00000000  00000000  000520e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002920  00000000  00000000  00058218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000026b8  00000000  00000000  0005ab38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ec4d  00000000  00000000  0005d1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030377  00000000  00000000  0008be3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d3c6  00000000  00000000  000bc1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c957a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bc5c  00000000  00000000  001c95cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dc28 	.word	0x0800dc28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800dc28 	.word	0x0800dc28

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <S_SendInstructionStruct>:
	xSemaphoreGive(xSemaphoreSerialHandle);
	//Libero la memoria reservada por malloc
	free(pMov);
}

void S_SendInstructionStruct(MovementInstruction_t *pMov) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	//Transformo la instruccion a una cadena
	char *s_mov;
	I_MovementInstruction_toString(pMov, &s_mov);
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	4619      	mov	r1, r3
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f000 f918 	bl	80007c8 <I_MovementInstruction_toString>
	//Reservo el puerto serie
	while (xSemaphoreTake(xSemaphoreSerialHandle, portMAX_DELAY) != pdTRUE)
 8000598:	bf00      	nop
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <S_SendInstructionStruct+0x4c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f04f 31ff 	mov.w	r1, #4294967295
 80005a2:	4618      	mov	r0, r3
 80005a4:	f009 fd14 	bl	8009fd0 <xQueueSemaphoreTake>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d1f5      	bne.n	800059a <S_SendInstructionStruct+0x16>
		;
	//Envio el struct por el puerto serie
	printf("%s\r\n", s_mov);
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	4619      	mov	r1, r3
 80005b2:	4808      	ldr	r0, [pc, #32]	; (80005d4 <S_SendInstructionStruct+0x50>)
 80005b4:	f00c f9d4 	bl	800c960 <iprintf>
	//Devuelvo el control del puerto serie
	xSemaphoreGive(xSemaphoreSerialHandle);
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <S_SendInstructionStruct+0x4c>)
 80005ba:	6818      	ldr	r0, [r3, #0]
 80005bc:	2300      	movs	r3, #0
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	f009 f9ff 	bl	80099c4 <xQueueGenericSend>
}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200007e0 	.word	0x200007e0
 80005d4:	0800dc40 	.word	0x0800dc40

080005d8 <S_PrintOnSerial>:

void S_PrintOnSerial(const char *format, ...) {
 80005d8:	b40f      	push	{r0, r1, r2, r3}
 80005da:	b580      	push	{r7, lr}
 80005dc:	b082      	sub	sp, #8
 80005de:	af00      	add	r7, sp, #0
	while (xSemaphoreTake(xSemaphoreSerialHandle, portMAX_DELAY) != pdTRUE)
 80005e0:	bf00      	nop
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <S_PrintOnSerial+0x48>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f04f 31ff 	mov.w	r1, #4294967295
 80005ea:	4618      	mov	r0, r3
 80005ec:	f009 fcf0 	bl	8009fd0 <xQueueSemaphoreTake>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d1f5      	bne.n	80005e2 <S_PrintOnSerial+0xa>
		;
	va_list args;
	va_start(args, format);
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	607b      	str	r3, [r7, #4]
	printf(format, args);
 80005fc:	6879      	ldr	r1, [r7, #4]
 80005fe:	6938      	ldr	r0, [r7, #16]
 8000600:	f00c f9ae 	bl	800c960 <iprintf>
	va_end(args);
	// Give the semaphore to indicate that the transmission has finished
	xSemaphoreGiveFromISR(xSemaphoreSerialHandle, pdFALSE);
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <S_PrintOnSerial+0x48>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f009 fb73 	bl	8009cf6 <xQueueGiveFromISR>
	// Yield to higher priority task if necessary
	portYIELD_FROM_ISR(pdFALSE);
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800061a:	b004      	add	sp, #16
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	200007e0 	.word	0x200007e0

08000624 <__io_putchar>:
#include "SerialTask.h"

PUTCHAR_PROTOTYPE {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	// Transmits character ch over UART1 and UART4
	while (HAL_OK != HAL_UART_Transmit_IT(&huart1, (uint8_t*) &ch, 1)) {
 800062c:	bf00      	nop
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2201      	movs	r2, #1
 8000632:	4619      	mov	r1, r3
 8000634:	480a      	ldr	r0, [pc, #40]	; (8000660 <__io_putchar+0x3c>)
 8000636:	f005 fdc9 	bl	80061cc <HAL_UART_Transmit_IT>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1f6      	bne.n	800062e <__io_putchar+0xa>
		// Wait for transmit to finish
		;
	}
	while (HAL_OK != HAL_UART_Transmit_IT(&huart4, (uint8_t*) &ch, 1)) {
 8000640:	bf00      	nop
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2201      	movs	r2, #1
 8000646:	4619      	mov	r1, r3
 8000648:	4806      	ldr	r0, [pc, #24]	; (8000664 <__io_putchar+0x40>)
 800064a:	f005 fdbf 	bl	80061cc <HAL_UART_Transmit_IT>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d1f6      	bne.n	8000642 <__io_putchar+0x1e>
		// Wait for transmit to finish
		;
	}
	return ch;
 8000654:	687b      	ldr	r3, [r7, #4]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000248 	.word	0x20000248
 8000664:	200001c4 	.word	0x200001c4

08000668 <serialRxTask>:

int printTransmision = 0;

void serialRxTask(void *parg) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	uint8_t ins = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	73fb      	strb	r3, [r7, #15]
	uint8_t time = 20;
 8000674:	2314      	movs	r3, #20
 8000676:	737b      	strb	r3, [r7, #13]
	uint8_t i = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	73bb      	strb	r3, [r7, #14]

	printf("rxtask");
 800067c:	4817      	ldr	r0, [pc, #92]	; (80006dc <serialRxTask+0x74>)
 800067e:	f00c f96f 	bl	800c960 <iprintf>

	while (i < 25) {
 8000682:	e023      	b.n	80006cc <serialRxTask+0x64>
		// Allocate memory for a MovementInstruction_t struct
		MovementInstruction_t *pMov = malloc(sizeof(MovementInstruction_t));
 8000684:	2002      	movs	r0, #2
 8000686:	f00c f855 	bl	800c734 <malloc>
 800068a:	4603      	mov	r3, r0
 800068c:	60bb      	str	r3, [r7, #8]
		// Create the struct to be sent to the queue
		I_CreateInstructionStruct(ins, time, pMov);
 800068e:	7b79      	ldrb	r1, [r7, #13]
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	68ba      	ldr	r2, [r7, #8]
 8000694:	4618      	mov	r0, r3
 8000696:	f000 f8b5 	bl	8000804 <I_CreateInstructionStruct>
		// Send the struct to the queue
		xQueueSend(instructionQueueHandle, pMov, 1);
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <serialRxTask+0x78>)
 800069c:	6818      	ldr	r0, [r3, #0]
 800069e:	2300      	movs	r3, #0
 80006a0:	2201      	movs	r2, #1
 80006a2:	68b9      	ldr	r1, [r7, #8]
 80006a4:	f009 f98e 	bl	80099c4 <xQueueGenericSend>
		// Delay for 1 second
		vTaskDelay(10);
 80006a8:	200a      	movs	r0, #10
 80006aa:	f00a f929 	bl	800a900 <vTaskDelay>
		// Free the memory of the MovementInstruction_t struct
		free(pMov);
 80006ae:	68b8      	ldr	r0, [r7, #8]
 80006b0:	f00c f848 	bl	800c744 <free>
		// Update the instruction to be sent
		ins = (ins + 1) % I_NUM_INSTRUCTIONS;
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	3301      	adds	r3, #1
 80006b8:	2205      	movs	r2, #5
 80006ba:	fb93 f1f2 	sdiv	r1, r3, r2
 80006be:	fb01 f202 	mul.w	r2, r1, r2
 80006c2:	1a9b      	subs	r3, r3, r2
 80006c4:	73fb      	strb	r3, [r7, #15]
		i++;
 80006c6:	7bbb      	ldrb	r3, [r7, #14]
 80006c8:	3301      	adds	r3, #1
 80006ca:	73bb      	strb	r3, [r7, #14]
	while (i < 25) {
 80006cc:	7bbb      	ldrb	r3, [r7, #14]
 80006ce:	2b18      	cmp	r3, #24
 80006d0:	d9d8      	bls.n	8000684 <serialRxTask+0x1c>
	}

	while (1) {
		vTaskDelay(1000);
 80006d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006d6:	f00a f913 	bl	800a900 <vTaskDelay>
 80006da:	e7fa      	b.n	80006d2 <serialRxTask+0x6a>
 80006dc:	0800dc48 	.word	0x0800dc48
 80006e0:	200007dc 	.word	0x200007dc

080006e4 <serialTxTask>:
	}
}

void serialTxTask(void *parg) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	while (1) {
		MovementInstruction_t pMov;
		// Receive the instruction from the queue
		xQueueReceive(instructionQueueHandle, &pMov, portMAX_DELAY);
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <serialTxTask+0x2c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f107 010c 	add.w	r1, r7, #12
 80006f4:	f04f 32ff 	mov.w	r2, #4294967295
 80006f8:	4618      	mov	r0, r3
 80006fa:	f009 fb89 	bl	8009e10 <xQueueReceive>
		// Send the instruction over the serial port
		S_SendInstructionStruct(&pMov);
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff3e 	bl	8000584 <S_SendInstructionStruct>
		// Wait for the duration of the instruction
		vTaskDelay(50);
 8000708:	2032      	movs	r0, #50	; 0x32
 800070a:	f00a f8f9 	bl	800a900 <vTaskDelay>
	while (1) {
 800070e:	e7ed      	b.n	80006ec <serialTxTask+0x8>
 8000710:	200007dc 	.word	0x200007dc

08000714 <WebServerTask>:
	}
}

void WebServerTask(void *pArg) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]

	S_PrintOnSerial("ServidorWeb\r\n");
 800071c:	4807      	ldr	r0, [pc, #28]	; (800073c <WebServerTask+0x28>)
 800071e:	f7ff ff5b 	bl	80005d8 <S_PrintOnSerial>

	if(RequestJSONProcess() != 0)
 8000722:	f001 f8f1 	bl	8001908 <RequestJSONProcess>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d002      	beq.n	8000732 <WebServerTask+0x1e>
		S_PrintOnSerial("Se ha detenido el proceso de peticiones");
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <WebServerTask+0x2c>)
 800072e:	f7ff ff53 	bl	80005d8 <S_PrintOnSerial>

	while(1)
		vTaskDelay(1000);
 8000732:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000736:	f00a f8e3 	bl	800a900 <vTaskDelay>
 800073a:	e7fa      	b.n	8000732 <WebServerTask+0x1e>
 800073c:	0800dc50 	.word	0x0800dc50
 8000740:	0800dc60 	.word	0x0800dc60

08000744 <CreateSerialObjects>:
}

void CreateSerialObjects() {
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	// Create a queue with 16 elements, each element has a size of 1 byte
	instructionQueueHandle = xQueueCreate(16, 1);
 8000748:	2200      	movs	r2, #0
 800074a:	2101      	movs	r1, #1
 800074c:	2010      	movs	r0, #16
 800074e:	f009 f871 	bl	8009834 <xQueueGenericCreate>
 8000752:	4603      	mov	r3, r0
 8000754:	4a01      	ldr	r2, [pc, #4]	; (800075c <CreateSerialObjects+0x18>)
 8000756:	6013      	str	r3, [r2, #0]
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200007dc 	.word	0x200007dc

08000760 <CreateSerialTask>:

void CreateSerialTask() {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af02      	add	r7, sp, #8
	xTaskCreate(WebServerTask, "TareaWebServer", 256, NULL, 2, NULL);
 8000766:	2300      	movs	r3, #0
 8000768:	9301      	str	r3, [sp, #4]
 800076a:	2302      	movs	r3, #2
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	2300      	movs	r3, #0
 8000770:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000774:	490e      	ldr	r1, [pc, #56]	; (80007b0 <CreateSerialTask+0x50>)
 8000776:	480f      	ldr	r0, [pc, #60]	; (80007b4 <CreateSerialTask+0x54>)
 8000778:	f009 ff67 	bl	800a64a <xTaskCreate>
	xTaskCreate(serialTxTask, "serialTxTask", 256, NULL, 1, NULL);
 800077c:	2300      	movs	r3, #0
 800077e:	9301      	str	r3, [sp, #4]
 8000780:	2301      	movs	r3, #1
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2300      	movs	r3, #0
 8000786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800078a:	490b      	ldr	r1, [pc, #44]	; (80007b8 <CreateSerialTask+0x58>)
 800078c:	480b      	ldr	r0, [pc, #44]	; (80007bc <CreateSerialTask+0x5c>)
 800078e:	f009 ff5c 	bl	800a64a <xTaskCreate>
	xTaskCreate(serialRxTask, "serialRxTask", 256, NULL, 1, NULL);
 8000792:	2300      	movs	r3, #0
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	2300      	movs	r3, #0
 800079c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007a0:	4907      	ldr	r1, [pc, #28]	; (80007c0 <CreateSerialTask+0x60>)
 80007a2:	4808      	ldr	r0, [pc, #32]	; (80007c4 <CreateSerialTask+0x64>)
 80007a4:	f009 ff51 	bl	800a64a <xTaskCreate>
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	0800dc88 	.word	0x0800dc88
 80007b4:	08000715 	.word	0x08000715
 80007b8:	0800dc98 	.word	0x0800dc98
 80007bc:	080006e5 	.word	0x080006e5
 80007c0:	0800dca8 	.word	0x0800dca8
 80007c4:	08000669 	.word	0x08000669

080007c8 <I_MovementInstruction_toString>:
 *      Author: josec
 */

#include "generalTypes.h"

void I_MovementInstruction_toString(MovementInstruction_t *pMovIns, char **buf) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]

	char *s = (char*) malloc(NUM_CHARS_PER_INSTRUCTION);
 80007d2:	2307      	movs	r3, #7
 80007d4:	4618      	mov	r0, r3
 80007d6:	f00b ffad 	bl	800c734 <malloc>
 80007da:	4603      	mov	r3, r0
 80007dc:	60fb      	str	r3, [r7, #12]

	sprintf(s, "%d %d", pMovIns->instruction, pMovIns->duration);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	785b      	ldrb	r3, [r3, #1]
 80007e8:	4905      	ldr	r1, [pc, #20]	; (8000800 <I_MovementInstruction_toString+0x38>)
 80007ea:	68f8      	ldr	r0, [r7, #12]
 80007ec:	f00c f9c0 	bl	800cb70 <siprintf>

	*buf = s;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	601a      	str	r2, [r3, #0]
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	0800dcb8 	.word	0x0800dcb8

08000804 <I_CreateInstructionStruct>:

uint8_t I_CreateInstructionStruct(uint8_t instCode, uint8_t time,
		MovementInstruction_t *pMovOut) {
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	603a      	str	r2, [r7, #0]
 800080e:	71fb      	strb	r3, [r7, #7]
 8000810:	460b      	mov	r3, r1
 8000812:	71bb      	strb	r3, [r7, #6]
	// Comprueba que todos los parametros sean correctos
	if (instCode < I_NUM_INSTRUCTIONS) {
 8000814:	2205      	movs	r2, #5
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	4293      	cmp	r3, r2
 800081a:	d20e      	bcs.n	800083a <I_CreateInstructionStruct+0x36>
		if (time < I_MAX_TIME_EXECUTION) {
 800081c:	2264      	movs	r2, #100	; 0x64
 800081e:	79bb      	ldrb	r3, [r7, #6]
 8000820:	4293      	cmp	r3, r2
 8000822:	d208      	bcs.n	8000836 <I_CreateInstructionStruct+0x32>
			if (pMovOut != NULL) {
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d005      	beq.n	8000836 <I_CreateInstructionStruct+0x32>
				pMovOut->instruction = instCode;
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	79fa      	ldrb	r2, [r7, #7]
 800082e:	701a      	strb	r2, [r3, #0]
				pMovOut->duration = time;
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	79ba      	ldrb	r2, [r7, #6]
 8000834:	705a      	strb	r2, [r3, #1]
			}
		}
		return 1;
 8000836:	2301      	movs	r3, #1
 8000838:	e006      	b.n	8000848 <I_CreateInstructionStruct+0x44>
	}
	// Si no devuelve una instruccion NOPE
	else {
		pMovOut->instruction = I_NOPE;
 800083a:	2200      	movs	r2, #0
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	701a      	strb	r2, [r3, #0]
		pMovOut->duration = I_MAX_TIME_EXECUTION;
 8000840:	2264      	movs	r2, #100	; 0x64
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	705a      	strb	r2, [r3, #1]
		return 0;
 8000846:	2300      	movs	r3, #0
	}
}
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000858:	f001 fa0b 	bl	8001c72 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800085c:	f000 f840 	bl	80008e0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000860:	f000 fa0a 	bl	8000c78 <MX_GPIO_Init>
	MX_DFSDM1_Init();
 8000864:	f000 f89e 	bl	80009a4 <MX_DFSDM1_Init>
	MX_I2C2_Init();
 8000868:	f000 f8d4 	bl	8000a14 <MX_I2C2_Init>
	MX_QUADSPI_Init();
 800086c:	f000 f912 	bl	8000a94 <MX_QUADSPI_Init>
	MX_SPI3_Init();
 8000870:	f000 f936 	bl	8000ae0 <MX_SPI3_Init>
	MX_USART1_UART_Init();
 8000874:	f000 f9a2 	bl	8000bbc <MX_USART1_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000878:	f000 f9d0 	bl	8000c1c <MX_USB_OTG_FS_PCD_Init>
	MX_UART4_Init();
 800087c:	f000 f96e 	bl	8000b5c <MX_UART4_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000880:	f008 fc38 	bl	80090f4 <osKernelInitialize>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of xSemaphoreSerial */
	xSemaphoreSerialHandle = osSemaphoreNew(1, 1, &xSemaphoreSerial_attributes);
 8000884:	4a0f      	ldr	r2, [pc, #60]	; (80008c4 <main+0x70>)
 8000886:	2101      	movs	r1, #1
 8000888:	2001      	movs	r0, #1
 800088a:	f008 fd0f 	bl	80092ac <osSemaphoreNew>
 800088e:	4603      	mov	r3, r0
 8000890:	4a0d      	ldr	r2, [pc, #52]	; (80008c8 <main+0x74>)
 8000892:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_SEMAPHORES */
	/* add semaphores, ... */
	CreateSerialObjects();
 8000894:	f7ff ff56 	bl	8000744 <CreateSerialObjects>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of instructionQueue */
	instructionQueueHandle = osMessageQueueNew(100,
 8000898:	4a0c      	ldr	r2, [pc, #48]	; (80008cc <main+0x78>)
 800089a:	2102      	movs	r1, #2
 800089c:	2064      	movs	r0, #100	; 0x64
 800089e:	f008 fd8e 	bl	80093be <osMessageQueueNew>
 80008a2:	4603      	mov	r3, r0
 80008a4:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <main+0x7c>)
 80008a6:	6013      	str	r3, [r2, #0]
	/* creation of RxTask */
	//RxTaskHandle = osThreadNew(serialRxTask, NULL, &RxTask_attributes);
	/* creation of TxTask */
	//TxTaskHandle = osThreadNew(serialTxTask, NULL, &TxTask_attributes);
	/* creation of WebServerTask */
	WebServerTaskHandle = osThreadNew(WebServerTask, NULL,
 80008a8:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <main+0x80>)
 80008aa:	2100      	movs	r1, #0
 80008ac:	480a      	ldr	r0, [pc, #40]	; (80008d8 <main+0x84>)
 80008ae:	f008 fc6b 	bl	8009188 <osThreadNew>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4a09      	ldr	r2, [pc, #36]	; (80008dc <main+0x88>)
 80008b6:	6013      	str	r3, [r2, #0]
			&WebServerTask_attributes);

	/* USER CODE BEGIN RTOS_THREADS */
	CreateSerialTask();
 80008b8:	f7ff ff52 	bl	8000760 <CreateSerialTask>
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80008bc:	f008 fc3e 	bl	800913c <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80008c0:	e7fe      	b.n	80008c0 <main+0x6c>
 80008c2:	bf00      	nop
 80008c4:	0800e398 	.word	0x0800e398
 80008c8:	200007e0 	.word	0x200007e0
 80008cc:	0800e380 	.word	0x0800e380
 80008d0:	200007dc 	.word	0x200007dc
 80008d4:	0800e35c 	.word	0x0800e35c
 80008d8:	08000715 	.word	0x08000715
 80008dc:	200007d8 	.word	0x200007d8

080008e0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b096      	sub	sp, #88	; 0x58
 80008e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2244      	movs	r2, #68	; 0x44
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f00b ff4e 	bl	800c790 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80008f4:	463b      	mov	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000902:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000906:	f002 f9f1 	bl	8002cec <HAL_PWREx_ControlVoltageScaling>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000910:	f000 fb66 	bl	8000fe0 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000914:	f002 f9cc 	bl	8002cb0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000918:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <SystemClock_Config+0xc0>)
 800091a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800091e:	4a20      	ldr	r2, [pc, #128]	; (80009a0 <SystemClock_Config+0xc0>)
 8000920:	f023 0318 	bic.w	r3, r3, #24
 8000924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8000928:	2314      	movs	r3, #20
 800092a:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800092c:	2301      	movs	r3, #1
 800092e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000930:	2301      	movs	r3, #1
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000938:	2360      	movs	r3, #96	; 0x60
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093c:	2302      	movs	r3, #2
 800093e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000940:	2301      	movs	r3, #1
 8000942:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000944:	2301      	movs	r3, #1
 8000946:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 8000948:	2328      	movs	r3, #40	; 0x28
 800094a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800094c:	2307      	movs	r3, #7
 800094e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000950:	2302      	movs	r3, #2
 8000952:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000954:	2302      	movs	r3, #2
 8000956:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4618      	mov	r0, r3
 800095e:	f002 fae7 	bl	8002f30 <HAL_RCC_OscConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0x8c>
		Error_Handler();
 8000968:	f000 fb3a 	bl	8000fe0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800096c:	230f      	movs	r3, #15
 800096e:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000970:	2303      	movs	r3, #3
 8000972:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000980:	463b      	mov	r3, r7
 8000982:	2104      	movs	r1, #4
 8000984:	4618      	mov	r0, r3
 8000986:	f002 feaf 	bl	80036e8 <HAL_RCC_ClockConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0xb4>
		Error_Handler();
 8000990:	f000 fb26 	bl	8000fe0 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8000994:	f003 fbe8 	bl	8004168 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000998:	bf00      	nop
 800099a:	3758      	adds	r7, #88	; 0x58
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40021000 	.word	0x40021000

080009a4 <MX_DFSDM1_Init>:
/**
 * @brief DFSDM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DFSDM1_Init(void) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	/* USER CODE END DFSDM1_Init 0 */

	/* USER CODE BEGIN DFSDM1_Init 1 */

	/* USER CODE END DFSDM1_Init 1 */
	hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80009a8:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009aa:	4a19      	ldr	r2, [pc, #100]	; (8000a10 <MX_DFSDM1_Init+0x6c>)
 80009ac:	601a      	str	r2, [r3, #0]
	hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	711a      	strb	r2, [r3, #4]
	hdfsdm1_channel1.Init.OutputClock.Selection =
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
			DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
	hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009bc:	2202      	movs	r2, #2
 80009be:	60da      	str	r2, [r3, #12]
	hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
	hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
	hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009d2:	619a      	str	r2, [r3, #24]
	hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80009d4:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
	hdfsdm1_channel1.Init.SerialInterface.SpiClock =
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009dc:	2204      	movs	r2, #4
 80009de:	621a      	str	r2, [r3, #32]
			DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
	hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80009e0:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	; 0x24
	hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	629a      	str	r2, [r3, #40]	; 0x28
	hdfsdm1_channel1.Init.Offset = 0;
 80009ec:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	62da      	str	r2, [r3, #44]	; 0x2c
	hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK) {
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_DFSDM1_Init+0x68>)
 80009fa:	f001 fa79 	bl	8001ef0 <HAL_DFSDM_ChannelInit>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_DFSDM1_Init+0x64>
		Error_Handler();
 8000a04:	f000 faec 	bl	8000fe0 <Error_Handler>
	}
	/* USER CODE BEGIN DFSDM1_Init 2 */

	/* USER CODE END DFSDM1_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000090 	.word	0x20000090
 8000a10:	40016020 	.word	0x40016020

08000a14 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <MX_I2C2_Init+0x74>)
 8000a1a:	4a1c      	ldr	r2, [pc, #112]	; (8000a8c <MX_I2C2_Init+0x78>)
 8000a1c:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x10909CEC;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_I2C2_Init+0x74>)
 8000a20:	4a1b      	ldr	r2, [pc, #108]	; (8000a90 <MX_I2C2_Init+0x7c>)
 8000a22:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8000a24:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <MX_I2C2_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_I2C2_Init+0x74>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <MX_I2C2_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_I2C2_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_I2C2_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_I2C2_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_I2C2_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8000a4e:	480e      	ldr	r0, [pc, #56]	; (8000a88 <MX_I2C2_Init+0x74>)
 8000a50:	f001 fec0 	bl	80027d4 <HAL_I2C_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C2_Init+0x4a>
		Error_Handler();
 8000a5a:	f000 fac1 	bl	8000fe0 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4809      	ldr	r0, [pc, #36]	; (8000a88 <MX_I2C2_Init+0x74>)
 8000a62:	f001 ff46 	bl	80028f2 <HAL_I2CEx_ConfigAnalogFilter>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000a6c:	f000 fab8 	bl	8000fe0 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8000a70:	2100      	movs	r1, #0
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_I2C2_Init+0x74>)
 8000a74:	f001 ff88 	bl	8002988 <HAL_I2CEx_ConfigDigitalFilter>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_I2C2_Init+0x6e>
		Error_Handler();
 8000a7e:	f000 faaf 	bl	8000fe0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200000c8 	.word	0x200000c8
 8000a8c:	40005800 	.word	0x40005800
 8000a90:	10909cec 	.word	0x10909cec

08000a94 <MX_QUADSPI_Init>:
/**
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN QUADSPI_Init 1 */

	/* USER CODE END QUADSPI_Init 1 */
	/* QUADSPI parameter configuration*/
	hqspi.Instance = QUADSPI;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_QUADSPI_Init+0x44>)
 8000a9a:	4a10      	ldr	r2, [pc, #64]	; (8000adc <MX_QUADSPI_Init+0x48>)
 8000a9c:	601a      	str	r2, [r3, #0]
	hqspi.Init.ClockPrescaler = 2;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MX_QUADSPI_Init+0x44>)
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	605a      	str	r2, [r3, #4]
	hqspi.Init.FifoThreshold = 4;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MX_QUADSPI_Init+0x44>)
 8000aa6:	2204      	movs	r2, #4
 8000aa8:	609a      	str	r2, [r3, #8]
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <MX_QUADSPI_Init+0x44>)
 8000aac:	2210      	movs	r2, #16
 8000aae:	60da      	str	r2, [r3, #12]
	hqspi.Init.FlashSize = 23;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_QUADSPI_Init+0x44>)
 8000ab2:	2217      	movs	r2, #23
 8000ab4:	611a      	str	r2, [r3, #16]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <MX_QUADSPI_Init+0x44>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	615a      	str	r2, [r3, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_QUADSPI_Init+0x44>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK) {
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_QUADSPI_Init+0x44>)
 8000ac4:	f002 f978 	bl	8002db8 <HAL_QSPI_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_QUADSPI_Init+0x3e>
		Error_Handler();
 8000ace:	f000 fa87 	bl	8000fe0 <Error_Handler>
	}
	/* USER CODE BEGIN QUADSPI_Init 2 */

	/* USER CODE END QUADSPI_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000011c 	.word	0x2000011c
 8000adc:	a0001000 	.word	0xa0001000

08000ae0 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000ae6:	4a1c      	ldr	r2, [pc, #112]	; (8000b58 <MX_SPI3_Init+0x78>)
 8000ae8:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000aec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000af0:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000afa:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000afe:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b12:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 7;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000b2e:	2207      	movs	r2, #7
 8000b30:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	631a      	str	r2, [r3, #48]	; 0x30
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000b3a:	2208      	movs	r2, #8
 8000b3c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_SPI3_Init+0x74>)
 8000b40:	f003 fcf4 	bl	800452c <HAL_SPI_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_SPI3_Init+0x6e>
		Error_Handler();
 8000b4a:	f000 fa49 	bl	8000fe0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000160 	.word	0x20000160
 8000b58:	40003c00 	.word	0x40003c00

08000b5c <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_UART4_Init+0x58>)
 8000b62:	4a15      	ldr	r2, [pc, #84]	; (8000bb8 <MX_UART4_Init+0x5c>)
 8000b64:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 9600;
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_UART4_Init+0x58>)
 8000b68:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b6c:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_UART4_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <MX_UART4_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_UART4_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <MX_UART4_Init+0x58>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <MX_UART4_Init+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_UART4_Init+0x58>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <MX_UART4_Init+0x58>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_UART4_Init+0x58>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_UART4_Init+0x58>)
 8000ba0:	f005 fac6 	bl	8006130 <HAL_UART_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_UART4_Init+0x52>
		Error_Handler();
 8000baa:	f000 fa19 	bl	8000fe0 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200001c4 	.word	0x200001c4
 8000bb8:	40004c00 	.word	0x40004c00

08000bbc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bc2:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <MX_USART1_UART_Init+0x5c>)
 8000bc4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000bc6:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bcc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000be2:	220c      	movs	r2, #12
 8000be4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000c00:	f005 fa96 	bl	8006130 <HAL_UART_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000c0a:	f000 f9e9 	bl	8000fe0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000248 	.word	0x20000248
 8000c18:	40013800 	.word	0x40013800

08000c1c <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c22:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c26:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c2a:	2206      	movs	r2, #6
 8000c2c:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c30:	2202      	movs	r2, #2
 8000c32:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c36:	2202      	movs	r2, #2
 8000c38:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	629a      	str	r2, [r3, #40]	; 0x28
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	631a      	str	r2, [r3, #48]	; 0x30
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c60:	f001 fede 	bl	8002a20 <HAL_PCD_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 8000c6a:	f000 f9b9 	bl	8000fe0 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200002cc 	.word	0x200002cc

08000c78 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000c8e:	4bbc      	ldr	r3, [pc, #752]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	4abb      	ldr	r2, [pc, #748]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000c94:	f043 0310 	orr.w	r3, r3, #16
 8000c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9a:	4bb9      	ldr	r3, [pc, #740]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	f003 0310 	and.w	r3, r3, #16
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	4bb6      	ldr	r3, [pc, #728]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	4ab5      	ldr	r2, [pc, #724]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb2:	4bb3      	ldr	r3, [pc, #716]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4bb0      	ldr	r3, [pc, #704]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	4aaf      	ldr	r2, [pc, #700]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cca:	4bad      	ldr	r3, [pc, #692]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	4baa      	ldr	r3, [pc, #680]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	4aa9      	ldr	r2, [pc, #676]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce2:	4ba7      	ldr	r3, [pc, #668]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000cee:	4ba4      	ldr	r3, [pc, #656]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	4aa3      	ldr	r2, [pc, #652]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000cf4:	f043 0308 	orr.w	r3, r3, #8
 8000cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfa:	4ba1      	ldr	r3, [pc, #644]	; (8000f80 <MX_GPIO_Init+0x308>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	f003 0308 	and.w	r3, r3, #8
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000d0c:	489d      	ldr	r0, [pc, #628]	; (8000f84 <MX_GPIO_Init+0x30c>)
 8000d0e:	f001 fd31 	bl	8002774 <HAL_GPIO_WritePin>
			M24SR64_Y_RF_DISABLE_Pin | M24SR64_Y_GPO_Pin | ISM43362_RST_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin | SPBTLE_RF_RST_Pin | ARD_D9_Pin,
 8000d12:	2200      	movs	r2, #0
 8000d14:	f248 1104 	movw	r1, #33028	; 0x8104
 8000d18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1c:	f001 fd2a 	bl	8002774 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000d20:	2200      	movs	r2, #0
 8000d22:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000d26:	4898      	ldr	r0, [pc, #608]	; (8000f88 <MX_GPIO_Init+0x310>)
 8000d28:	f001 fd24 	bl	8002774 <HAL_GPIO_WritePin>
			ARD_D8_Pin | ISM43362_BOOT0_Pin | ISM43362_WAKEUP_Pin | LED2_Pin
					| SPSGRF_915_SDN_Pin | ARD_D5_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f241 0181 	movw	r1, #4225	; 0x1081
 8000d32:	4896      	ldr	r0, [pc, #600]	; (8000f8c <MX_GPIO_Init+0x314>)
 8000d34:	f001 fd1e 	bl	8002774 <HAL_GPIO_WritePin>
			USB_OTG_FS_PWR_EN_Pin | PMOD_RESET_Pin | STSAFE_A100_RESET_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin,
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d3e:	4893      	ldr	r0, [pc, #588]	; (8000f8c <MX_GPIO_Init+0x314>)
 8000d40:	f001 fd18 	bl	8002774 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin | LED3_WIFI__LED4_BLE_Pin,
 8000d44:	2200      	movs	r2, #0
 8000d46:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000d4a:	4891      	ldr	r0, [pc, #580]	; (8000f90 <MX_GPIO_Init+0x318>)
 8000d4c:	f001 fd12 	bl	8002774 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin,
 8000d50:	2201      	movs	r2, #1
 8000d52:	2120      	movs	r1, #32
 8000d54:	488c      	ldr	r0, [pc, #560]	; (8000f88 <MX_GPIO_Init+0x310>)
 8000d56:	f001 fd0d 	bl	8002774 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin,
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	4889      	ldr	r0, [pc, #548]	; (8000f84 <MX_GPIO_Init+0x30c>)
 8000d60:	f001 fd08 	bl	8002774 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
	GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin | M24SR64_Y_GPO_Pin
 8000d64:	f240 1315 	movw	r3, #277	; 0x115
 8000d68:	617b      	str	r3, [r7, #20]
			| ISM43362_RST_Pin | ISM43362_SPI3_CSN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4881      	ldr	r0, [pc, #516]	; (8000f84 <MX_GPIO_Init+0x30c>)
 8000d7e:	f001 fa43 	bl	8002208 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin
 8000d82:	236a      	movs	r3, #106	; 0x6a
 8000d84:	617b      	str	r3, [r7, #20]
			| SPSGRF_915_GPIO3_EXTI5_Pin | SPBTLE_RF_IRQ_EXTI6_Pin
			| ISM43362_DRDY_EXTI1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d86:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d8a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	487b      	ldr	r0, [pc, #492]	; (8000f84 <MX_GPIO_Init+0x30c>)
 8000d98:	f001 fa36 	bl	8002208 <HAL_GPIO_Init>

	/*Configure GPIO pin : BUTTON_EXTI13_Pin */
	GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000d9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000da2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000da6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4877      	ldr	r0, [pc, #476]	; (8000f90 <MX_GPIO_Init+0x318>)
 8000db4:	f001 fa28 	bl	8002208 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
	 ARD_A1_Pin ARD_A0_Pin */
	GPIO_InitStruct.Pin = ARD_A5_Pin | ARD_A4_Pin | ARD_A3_Pin | ARD_A2_Pin
 8000db8:	233f      	movs	r3, #63	; 0x3f
 8000dba:	617b      	str	r3, [r7, #20]
			| ARD_A1_Pin | ARD_A0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dbc:	230b      	movs	r3, #11
 8000dbe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4871      	ldr	r0, [pc, #452]	; (8000f90 <MX_GPIO_Init+0x318>)
 8000dcc:	f001 fa1c 	bl	8002208 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
	GPIO_InitStruct.Pin = ARD_D10_Pin | SPBTLE_RF_RST_Pin | ARD_D9_Pin;
 8000dd0:	f248 1304 	movw	r3, #33028	; 0x8104
 8000dd4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dec:	f001 fa0c 	bl	8002208 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D4_Pin */
	GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000df0:	2308      	movs	r3, #8
 8000df2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e00:	2301      	movs	r3, #1
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0e:	f001 f9fb 	bl	8002208 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
	GPIO_InitStruct.Pin = ARD_D13_Pin | ARD_D12_Pin | ARD_D11_Pin;
 8000e12:	23e0      	movs	r3, #224	; 0xe0
 8000e14:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e22:	2305      	movs	r3, #5
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e30:	f001 f9ea 	bl	8002208 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D3_Pin */
	GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000e34:	2301      	movs	r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e38:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e3c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	484f      	ldr	r0, [pc, #316]	; (8000f88 <MX_GPIO_Init+0x310>)
 8000e4a:	f001 f9dd 	bl	8002208 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D6_Pin */
	GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e52:	230b      	movs	r3, #11
 8000e54:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4849      	ldr	r0, [pc, #292]	; (8000f88 <MX_GPIO_Init+0x310>)
 8000e62:	f001 f9d1 	bl	8002208 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
	 SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
	GPIO_InitStruct.Pin = ARD_D8_Pin | ISM43362_BOOT0_Pin | ISM43362_WAKEUP_Pin
 8000e66:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000e6a:	617b      	str	r3, [r7, #20]
			| LED2_Pin | SPSGRF_915_SDN_Pin | ARD_D5_Pin
			| SPSGRF_915_SPI3_CSN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4842      	ldr	r0, [pc, #264]	; (8000f88 <MX_GPIO_Init+0x310>)
 8000e80:	f001 f9c2 	bl	8002208 <HAL_GPIO_Init>

	/*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
	GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin | INTERNAL_UART3_RX_Pin;
 8000e84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e88:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e96:	2307      	movs	r3, #7
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	483a      	ldr	r0, [pc, #232]	; (8000f8c <MX_GPIO_Init+0x314>)
 8000ea2:	f001 f9b1 	bl	8002208 <HAL_GPIO_Init>

	/*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
	 PMOD_IRQ_EXTI12_Pin */
	GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin | LSM6DSL_INT1_EXTI11_Pin
 8000ea6:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000eaa:	617b      	str	r3, [r7, #20]
			| ARD_D2_Pin | HTS221_DRDY_EXTI15_Pin | PMOD_IRQ_EXTI12_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eb0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4833      	ldr	r0, [pc, #204]	; (8000f8c <MX_GPIO_Init+0x314>)
 8000ebe:	f001 f9a3 	bl	8002208 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin | SPBTLE_RF_SPI3_CSN_Pin
 8000ec2:	f243 0381 	movw	r3, #12417	; 0x3081
 8000ec6:	617b      	str	r3, [r7, #20]
			| PMOD_RESET_Pin | STSAFE_A100_RESET_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	4619      	mov	r1, r3
 8000eda:	482c      	ldr	r0, [pc, #176]	; (8000f8c <MX_GPIO_Init+0x314>)
 8000edc:	f001 f994 	bl	8002208 <HAL_GPIO_Init>

	/*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
	GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin | LED3_WIFI__LED4_BLE_Pin;
 8000ee0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ee4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4825      	ldr	r0, [pc, #148]	; (8000f90 <MX_GPIO_Init+0x318>)
 8000efa:	f001 f985 	bl	8002208 <HAL_GPIO_Init>

	/*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
	GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin | LSM3MDL_DRDY_EXTI8_Pin;
 8000efe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f02:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f04:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f08:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	481e      	ldr	r0, [pc, #120]	; (8000f90 <MX_GPIO_Init+0x318>)
 8000f16:	f001 f977 	bl	8002208 <HAL_GPIO_Init>

	/*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
	GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f2a:	2305      	movs	r3, #5
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	4815      	ldr	r0, [pc, #84]	; (8000f8c <MX_GPIO_Init+0x314>)
 8000f36:	f001 f967 	bl	8002208 <HAL_GPIO_Init>

	/*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PD5 PMOD_UART2_RX_Pin */
	GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin | PMOD_UART2_RTS_Pin | GPIO_PIN_5
 8000f3a:	2378      	movs	r3, #120	; 0x78
 8000f3c:	617b      	str	r3, [r7, #20]
			| PMOD_UART2_RX_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <MX_GPIO_Init+0x314>)
 8000f56:	f001 f957 	bl	8002208 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
	GPIO_InitStruct.Pin = ARD_D15_Pin | ARD_D14_Pin;
 8000f5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f5e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f60:	2312      	movs	r3, #18
 8000f62:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	4804      	ldr	r0, [pc, #16]	; (8000f88 <MX_GPIO_Init+0x310>)
 8000f78:	f001 f946 	bl	8002208 <HAL_GPIO_Init>
 8000f7c:	e00a      	b.n	8000f94 <MX_GPIO_Init+0x31c>
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000
 8000f84:	48001000 	.word	0x48001000
 8000f88:	48000400 	.word	0x48000400
 8000f8c:	48000c00 	.word	0x48000c00
 8000f90:	48000800 	.word	0x48000800

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2105      	movs	r1, #5
 8000f98:	2017      	movs	r0, #23
 8000f9a:	f000 ff7f 	bl	8001e9c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f9e:	2017      	movs	r0, #23
 8000fa0:	f000 ff98 	bl	8001ed4 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2105      	movs	r1, #5
 8000fa8:	2028      	movs	r0, #40	; 0x28
 8000faa:	f000 ff77 	bl	8001e9c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fae:	2028      	movs	r0, #40	; 0x28
 8000fb0:	f000 ff90 	bl	8001ed4 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000fb4:	bf00      	nop
 8000fb6:	3728      	adds	r7, #40	; 0x28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d101      	bne.n	8000fd2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000fce:	f000 fe69 	bl	8001ca4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40000800 	.word	0x40000800

08000fe0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe4:	b672      	cpsid	i
}
 8000fe6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fe8:	e7fe      	b.n	8000fe8 <Error_Handler+0x8>
	...

08000fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <HAL_MspInit+0x4c>)
 8000ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff6:	4a10      	ldr	r2, [pc, #64]	; (8001038 <HAL_MspInit+0x4c>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_MspInit+0x4c>)
 8001000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <HAL_MspInit+0x4c>)
 800100c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <HAL_MspInit+0x4c>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001014:	6593      	str	r3, [r2, #88]	; 0x58
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <HAL_MspInit+0x4c>)
 8001018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	210f      	movs	r1, #15
 8001026:	f06f 0001 	mvn.w	r0, #1
 800102a:	f000 ff37 	bl	8001e9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000

0800103c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b0ac      	sub	sp, #176	; 0xb0
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2288      	movs	r2, #136	; 0x88
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f00b fb97 	bl	800c790 <memset>
  if(DFSDM1_Init == 0)
 8001062:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d142      	bne.n	80010f0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800106a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800106e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4618      	mov	r0, r3
 800107c:	f002 fd8a 	bl	8003b94 <HAL_RCCEx_PeriphCLKConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001086:	f7ff ffab 	bl	8000fe0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 800108c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108e:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001090:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001094:	6613      	str	r3, [r2, #96]	; 0x60
 8001096:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	4a15      	ldr	r2, [pc, #84]	; (80010fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010a8:	f043 0310 	orr.w	r3, r3, #16
 80010ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80010ba:	f44f 7320 	mov.w	r3, #640	; 0x280
 80010be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80010d4:	2306      	movs	r3, #6
 80010d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010de:	4619      	mov	r1, r3
 80010e0:	4807      	ldr	r0, [pc, #28]	; (8001100 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80010e2:	f001 f891 	bl	8002208 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	4a02      	ldr	r2, [pc, #8]	; (80010f8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010ee:	6013      	str	r3, [r2, #0]
  }

}
 80010f0:	bf00      	nop
 80010f2:	37b0      	adds	r7, #176	; 0xb0
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200007e4 	.word	0x200007e4
 80010fc:	40021000 	.word	0x40021000
 8001100:	48001000 	.word	0x48001000

08001104 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b0ac      	sub	sp, #176	; 0xb0
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2288      	movs	r2, #136	; 0x88
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f00b fb33 	bl	800c790 <memset>
  if(hi2c->Instance==I2C2)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a21      	ldr	r2, [pc, #132]	; (80011b4 <HAL_I2C_MspInit+0xb0>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d13b      	bne.n	80011ac <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001138:	2300      	movs	r3, #0
 800113a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4618      	mov	r0, r3
 8001142:	f002 fd27 	bl	8003b94 <HAL_RCCEx_PeriphCLKConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800114c:	f7ff ff48 	bl	8000fe0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <HAL_I2C_MspInit+0xb4>)
 8001152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001154:	4a18      	ldr	r2, [pc, #96]	; (80011b8 <HAL_I2C_MspInit+0xb4>)
 8001156:	f043 0302 	orr.w	r3, r3, #2
 800115a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115c:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <HAL_I2C_MspInit+0xb4>)
 800115e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001168:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800116c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001170:	2312      	movs	r3, #18
 8001172:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001176:	2301      	movs	r3, #1
 8001178:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001182:	2304      	movs	r3, #4
 8001184:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800118c:	4619      	mov	r1, r3
 800118e:	480b      	ldr	r0, [pc, #44]	; (80011bc <HAL_I2C_MspInit+0xb8>)
 8001190:	f001 f83a 	bl	8002208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_I2C_MspInit+0xb4>)
 8001196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001198:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <HAL_I2C_MspInit+0xb4>)
 800119a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800119e:	6593      	str	r3, [r2, #88]	; 0x58
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <HAL_I2C_MspInit+0xb4>)
 80011a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011ac:	bf00      	nop
 80011ae:	37b0      	adds	r7, #176	; 0xb0
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40005800 	.word	0x40005800
 80011b8:	40021000 	.word	0x40021000
 80011bc:	48000400 	.word	0x48000400

080011c0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a17      	ldr	r2, [pc, #92]	; (800123c <HAL_QSPI_MspInit+0x7c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d128      	bne.n	8001234 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <HAL_QSPI_MspInit+0x80>)
 80011e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011e6:	4a16      	ldr	r2, [pc, #88]	; (8001240 <HAL_QSPI_MspInit+0x80>)
 80011e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ec:	6513      	str	r3, [r2, #80]	; 0x50
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <HAL_QSPI_MspInit+0x80>)
 80011f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <HAL_QSPI_MspInit+0x80>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	4a10      	ldr	r2, [pc, #64]	; (8001240 <HAL_QSPI_MspInit+0x80>)
 8001200:	f043 0310 	orr.w	r3, r3, #16
 8001204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <HAL_QSPI_MspInit+0x80>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	f003 0310 	and.w	r3, r3, #16
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001212:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001216:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001224:	230a      	movs	r3, #10
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <HAL_QSPI_MspInit+0x84>)
 8001230:	f000 ffea 	bl	8002208 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001234:	bf00      	nop
 8001236:	3728      	adds	r7, #40	; 0x28
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	a0001000 	.word	0xa0001000
 8001240:	40021000 	.word	0x40021000
 8001244:	48001000 	.word	0x48001000

08001248 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a17      	ldr	r2, [pc, #92]	; (80012c4 <HAL_SPI_MspInit+0x7c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d128      	bne.n	80012bc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <HAL_SPI_MspInit+0x80>)
 800126c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126e:	4a16      	ldr	r2, [pc, #88]	; (80012c8 <HAL_SPI_MspInit+0x80>)
 8001270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001274:	6593      	str	r3, [r2, #88]	; 0x58
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <HAL_SPI_MspInit+0x80>)
 8001278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <HAL_SPI_MspInit+0x80>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	4a10      	ldr	r2, [pc, #64]	; (80012c8 <HAL_SPI_MspInit+0x80>)
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <HAL_SPI_MspInit+0x80>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800129a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800129e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012ac:	2306      	movs	r3, #6
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	4619      	mov	r1, r3
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <HAL_SPI_MspInit+0x84>)
 80012b8:	f000 ffa6 	bl	8002208 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012bc:	bf00      	nop
 80012be:	3728      	adds	r7, #40	; 0x28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40003c00 	.word	0x40003c00
 80012c8:	40021000 	.word	0x40021000
 80012cc:	48000800 	.word	0x48000800

080012d0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a08      	ldr	r2, [pc, #32]	; (8001300 <HAL_SPI_MspDeInit+0x30>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d10a      	bne.n	80012f8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <HAL_SPI_MspDeInit+0x34>)
 80012e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e6:	4a07      	ldr	r2, [pc, #28]	; (8001304 <HAL_SPI_MspDeInit+0x34>)
 80012e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80012ec:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 80012ee:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <HAL_SPI_MspDeInit+0x38>)
 80012f4:	f001 f932 	bl	800255c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40003c00 	.word	0x40003c00
 8001304:	40021000 	.word	0x40021000
 8001308:	48000800 	.word	0x48000800

0800130c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b0ae      	sub	sp, #184	; 0xb8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	2288      	movs	r2, #136	; 0x88
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f00b fa2f 	bl	800c790 <memset>
  if(huart->Instance==UART4)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a4a      	ldr	r2, [pc, #296]	; (8001460 <HAL_UART_MspInit+0x154>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d144      	bne.n	80013c6 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800133c:	2308      	movs	r3, #8
 800133e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001340:	2300      	movs	r3, #0
 8001342:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	4618      	mov	r0, r3
 800134a:	f002 fc23 	bl	8003b94 <HAL_RCCEx_PeriphCLKConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001354:	f7ff fe44 	bl	8000fe0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001358:	4b42      	ldr	r3, [pc, #264]	; (8001464 <HAL_UART_MspInit+0x158>)
 800135a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135c:	4a41      	ldr	r2, [pc, #260]	; (8001464 <HAL_UART_MspInit+0x158>)
 800135e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001362:	6593      	str	r3, [r2, #88]	; 0x58
 8001364:	4b3f      	ldr	r3, [pc, #252]	; (8001464 <HAL_UART_MspInit+0x158>)
 8001366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001368:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800136c:	61bb      	str	r3, [r7, #24]
 800136e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001370:	4b3c      	ldr	r3, [pc, #240]	; (8001464 <HAL_UART_MspInit+0x158>)
 8001372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001374:	4a3b      	ldr	r2, [pc, #236]	; (8001464 <HAL_UART_MspInit+0x158>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137c:	4b39      	ldr	r3, [pc, #228]	; (8001464 <HAL_UART_MspInit+0x158>)
 800137e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001388:	2303      	movs	r3, #3
 800138a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80013a0:	2308      	movs	r3, #8
 80013a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013aa:	4619      	mov	r1, r3
 80013ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b0:	f000 ff2a 	bl	8002208 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2105      	movs	r1, #5
 80013b8:	2034      	movs	r0, #52	; 0x34
 80013ba:	f000 fd6f 	bl	8001e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80013be:	2034      	movs	r0, #52	; 0x34
 80013c0:	f000 fd88 	bl	8001ed4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013c4:	e047      	b.n	8001456 <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART1)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a27      	ldr	r2, [pc, #156]	; (8001468 <HAL_UART_MspInit+0x15c>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d142      	bne.n	8001456 <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013d4:	2300      	movs	r3, #0
 80013d6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	4618      	mov	r0, r3
 80013de:	f002 fbd9 	bl	8003b94 <HAL_RCCEx_PeriphCLKConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80013e8:	f7ff fdfa 	bl	8000fe0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ec:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <HAL_UART_MspInit+0x158>)
 80013ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f0:	4a1c      	ldr	r2, [pc, #112]	; (8001464 <HAL_UART_MspInit+0x158>)
 80013f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f6:	6613      	str	r3, [r2, #96]	; 0x60
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <HAL_UART_MspInit+0x158>)
 80013fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <HAL_UART_MspInit+0x158>)
 8001406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001408:	4a16      	ldr	r2, [pc, #88]	; (8001464 <HAL_UART_MspInit+0x158>)
 800140a:	f043 0302 	orr.w	r3, r3, #2
 800140e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <HAL_UART_MspInit+0x158>)
 8001412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800141c:	23c0      	movs	r3, #192	; 0xc0
 800141e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001434:	2307      	movs	r3, #7
 8001436:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800143e:	4619      	mov	r1, r3
 8001440:	480a      	ldr	r0, [pc, #40]	; (800146c <HAL_UART_MspInit+0x160>)
 8001442:	f000 fee1 	bl	8002208 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2105      	movs	r1, #5
 800144a:	2025      	movs	r0, #37	; 0x25
 800144c:	f000 fd26 	bl	8001e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001450:	2025      	movs	r0, #37	; 0x25
 8001452:	f000 fd3f 	bl	8001ed4 <HAL_NVIC_EnableIRQ>
}
 8001456:	bf00      	nop
 8001458:	37b8      	adds	r7, #184	; 0xb8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40004c00 	.word	0x40004c00
 8001464:	40021000 	.word	0x40021000
 8001468:	40013800 	.word	0x40013800
 800146c:	48000400 	.word	0x48000400

08001470 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b0ac      	sub	sp, #176	; 0xb0
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	2288      	movs	r2, #136	; 0x88
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f00b f97d 	bl	800c790 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800149e:	d17c      	bne.n	800159a <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80014a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80014a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80014aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80014ae:	2301      	movs	r3, #1
 80014b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80014b2:	2301      	movs	r3, #1
 80014b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80014b6:	2318      	movs	r3, #24
 80014b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80014ba:	2307      	movs	r3, #7
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80014be:	2302      	movs	r3, #2
 80014c0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80014c2:	2302      	movs	r3, #2
 80014c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80014c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4618      	mov	r0, r3
 80014d2:	f002 fb5f 	bl	8003b94 <HAL_RCCEx_PeriphCLKConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80014dc:	f7ff fd80 	bl	8000fe0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e0:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <HAL_PCD_MspInit+0x134>)
 80014e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e4:	4a2f      	ldr	r2, [pc, #188]	; (80015a4 <HAL_PCD_MspInit+0x134>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ec:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <HAL_PCD_MspInit+0x134>)
 80014ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80014f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800150c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001510:	4619      	mov	r1, r3
 8001512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001516:	f000 fe77 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800151a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800151e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001534:	230a      	movs	r3, #10
 8001536:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800153e:	4619      	mov	r1, r3
 8001540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001544:	f000 fe60 	bl	8002208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_PCD_MspInit+0x134>)
 800154a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154c:	4a15      	ldr	r2, [pc, #84]	; (80015a4 <HAL_PCD_MspInit+0x134>)
 800154e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001552:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <HAL_PCD_MspInit+0x134>)
 8001556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001560:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <HAL_PCD_MspInit+0x134>)
 8001562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d114      	bne.n	8001596 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800156c:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <HAL_PCD_MspInit+0x134>)
 800156e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001570:	4a0c      	ldr	r2, [pc, #48]	; (80015a4 <HAL_PCD_MspInit+0x134>)
 8001572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001576:	6593      	str	r3, [r2, #88]	; 0x58
 8001578:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_PCD_MspInit+0x134>)
 800157a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001584:	f001 fc08 	bl	8002d98 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_PCD_MspInit+0x134>)
 800158a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158c:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <HAL_PCD_MspInit+0x134>)
 800158e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001592:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001594:	e001      	b.n	800159a <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001596:	f001 fbff 	bl	8002d98 <HAL_PWREx_EnableVddUSB>
}
 800159a:	bf00      	nop
 800159c:	37b0      	adds	r7, #176	; 0xb0
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000

080015a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08e      	sub	sp, #56	; 0x38
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80015b6:	4b34      	ldr	r3, [pc, #208]	; (8001688 <HAL_InitTick+0xe0>)
 80015b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ba:	4a33      	ldr	r2, [pc, #204]	; (8001688 <HAL_InitTick+0xe0>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	6593      	str	r3, [r2, #88]	; 0x58
 80015c2:	4b31      	ldr	r3, [pc, #196]	; (8001688 <HAL_InitTick+0xe0>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015ce:	f107 0210 	add.w	r2, r7, #16
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f002 fa49 	bl	8003a70 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d103      	bne.n	80015f0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015e8:	f002 fa16 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 80015ec:	6378      	str	r0, [r7, #52]	; 0x34
 80015ee:	e004      	b.n	80015fa <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015f0:	f002 fa12 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 80015f4:	4603      	mov	r3, r0
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015fc:	4a23      	ldr	r2, [pc, #140]	; (800168c <HAL_InitTick+0xe4>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	0c9b      	lsrs	r3, r3, #18
 8001604:	3b01      	subs	r3, #1
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001608:	4b21      	ldr	r3, [pc, #132]	; (8001690 <HAL_InitTick+0xe8>)
 800160a:	4a22      	ldr	r2, [pc, #136]	; (8001694 <HAL_InitTick+0xec>)
 800160c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <HAL_InitTick+0xe8>)
 8001610:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001614:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001616:	4a1e      	ldr	r2, [pc, #120]	; (8001690 <HAL_InitTick+0xe8>)
 8001618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <HAL_InitTick+0xe8>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001622:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <HAL_InitTick+0xe8>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <HAL_InitTick+0xe8>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800162e:	4818      	ldr	r0, [pc, #96]	; (8001690 <HAL_InitTick+0xe8>)
 8001630:	f004 faad 	bl	8005b8e <HAL_TIM_Base_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800163a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800163e:	2b00      	cmp	r3, #0
 8001640:	d11b      	bne.n	800167a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001642:	4813      	ldr	r0, [pc, #76]	; (8001690 <HAL_InitTick+0xe8>)
 8001644:	f004 fb04 	bl	8005c50 <HAL_TIM_Base_Start_IT>
 8001648:	4603      	mov	r3, r0
 800164a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800164e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001652:	2b00      	cmp	r3, #0
 8001654:	d111      	bne.n	800167a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001656:	201e      	movs	r0, #30
 8001658:	f000 fc3c 	bl	8001ed4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b0f      	cmp	r3, #15
 8001660:	d808      	bhi.n	8001674 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001662:	2200      	movs	r2, #0
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	201e      	movs	r0, #30
 8001668:	f000 fc18 	bl	8001e9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800166c:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <HAL_InitTick+0xf0>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e002      	b.n	800167a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800167a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800167e:	4618      	mov	r0, r3
 8001680:	3738      	adds	r7, #56	; 0x38
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40021000 	.word	0x40021000
 800168c:	431bde83 	.word	0x431bde83
 8001690:	200007e8 	.word	0x200007e8
 8001694:	40000800 	.word	0x40000800
 8001698:	20000004 	.word	0x20000004

0800169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <NMI_Handler+0x4>

080016a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <HardFault_Handler+0x4>

080016a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <MemManage_Handler+0x4>

080016ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <BusFault_Handler+0x4>

080016b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <UsageFault_Handler+0x4>

080016ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80016cc:	2020      	movs	r0, #32
 80016ce:	f001 f869 	bl	80027a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80016d2:	2040      	movs	r0, #64	; 0x40
 80016d4:	f001 f866 	bl	80027a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80016d8:	2080      	movs	r0, #128	; 0x80
 80016da:	f001 f863 	bl	80027a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80016de:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016e2:	f001 f85f 	bl	80027a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <TIM4_IRQHandler+0x10>)
 80016f2:	f004 fb1d 	bl	8005d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200007e8 	.word	0x200007e8

08001700 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <USART1_IRQHandler+0x10>)
 8001706:	f004 fdcf 	bl	80062a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000248 	.word	0x20000248

08001714 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001718:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800171c:	f001 f842 	bl	80027a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001720:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001724:	f001 f83e 	bl	80027a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001728:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800172c:	f001 f83a 	bl	80027a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001730:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001734:	f001 f836 	bl	80027a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001738:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800173c:	f001 f832 	bl	80027a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}

08001744 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <UART4_IRQHandler+0x10>)
 800174a:	f004 fdad 	bl	80062a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200001c4 	.word	0x200001c4

08001758 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	return 1;
 800175c:	2301      	movs	r3, #1
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <_kill>:

int _kill(int pid, int sig)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001772:	f00a febb 	bl	800c4ec <__errno>
 8001776:	4603      	mov	r3, r0
 8001778:	2216      	movs	r2, #22
 800177a:	601a      	str	r2, [r3, #0]
	return -1;
 800177c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_exit>:

void _exit (int status)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001790:	f04f 31ff 	mov.w	r1, #4294967295
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff ffe7 	bl	8001768 <_kill>
	while (1) {}		/* Make sure we hang here */
 800179a:	e7fe      	b.n	800179a <_exit+0x12>

0800179c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	e00a      	b.n	80017c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017ae:	f3af 8000 	nop.w
 80017b2:	4601      	mov	r1, r0
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	60ba      	str	r2, [r7, #8]
 80017ba:	b2ca      	uxtb	r2, r1
 80017bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	3301      	adds	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	dbf0      	blt.n	80017ae <_read+0x12>
	}

return len;
 80017cc:	687b      	ldr	r3, [r7, #4]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	60f8      	str	r0, [r7, #12]
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	e009      	b.n	80017fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	60ba      	str	r2, [r7, #8]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe ff17 	bl	8000624 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	3301      	adds	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	429a      	cmp	r2, r3
 8001802:	dbf1      	blt.n	80017e8 <_write+0x12>
	}
	return len;
 8001804:	687b      	ldr	r3, [r7, #4]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <_close>:

int _close(int file)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
	return -1;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001836:	605a      	str	r2, [r3, #4]
	return 0;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <_isatty>:

int _isatty(int file)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
	return 1;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
	return 0;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001880:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <_sbrk+0x5c>)
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <_sbrk+0x60>)
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <_sbrk+0x64>)
 8001896:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <_sbrk+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d207      	bcs.n	80018b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a8:	f00a fe20 	bl	800c4ec <__errno>
 80018ac:	4603      	mov	r3, r0
 80018ae:	220c      	movs	r2, #12
 80018b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	e009      	b.n	80018cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <_sbrk+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <_sbrk+0x64>)
 80018c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20018000 	.word	0x20018000
 80018d8:	00000400 	.word	0x00000400
 80018dc:	20000834 	.word	0x20000834
 80018e0:	20002bb0 	.word	0x20002bb0

080018e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <SystemInit+0x20>)
 80018ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ee:	4a05      	ldr	r2, [pc, #20]	; (8001904 <SystemInit+0x20>)
 80018f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <RequestJSONProcess>:
//static int wifi_connect(void);
//static bool WebServerProcess(void);
bool RequestJSON();
int RequestJSONProcess();

int RequestJSONProcess() {
 8001908:	b5b0      	push	{r4, r5, r7, lr}
 800190a:	b090      	sub	sp, #64	; 0x40
 800190c:	af02      	add	r7, sp, #8
	bool StopServer = false;
 800190e:	2300      	movs	r3, #0
 8001910:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint16_t serverPort = 5000;
 8001914:	f241 3388 	movw	r3, #5000	; 0x1388
 8001918:	86bb      	strh	r3, [r7, #52]	; 0x34

	WIFI_Ecn_t ecn = WIFI_ECN_WPA2_PSK; // Adjust the network encryption type as per your network configuration
 800191a:	2303      	movs	r3, #3
 800191c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	char ssid[] = "ONSICOM_CRESPO"; // Replace with your WiFi SSID
 8001920:	4b33      	ldr	r3, [pc, #204]	; (80019f0 <RequestJSONProcess+0xe8>)
 8001922:	f107 041c 	add.w	r4, r7, #28
 8001926:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001928:	c407      	stmia	r4!, {r0, r1, r2}
 800192a:	8023      	strh	r3, [r4, #0]
 800192c:	3402      	adds	r4, #2
 800192e:	0c1b      	lsrs	r3, r3, #16
 8001930:	7023      	strb	r3, [r4, #0]
	char password[] = "1971J1998JC2002J2009A"; // Replace with your WiFi password
 8001932:	4b30      	ldr	r3, [pc, #192]	; (80019f4 <RequestJSONProcess+0xec>)
 8001934:	1d3c      	adds	r4, r7, #4
 8001936:	461d      	mov	r5, r3
 8001938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800193a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800193c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001940:	6020      	str	r0, [r4, #0]
 8001942:	3404      	adds	r4, #4
 8001944:	8021      	strh	r1, [r4, #0]

	if (WIFI_Init() != WIFI_STATUS_OK)
 8001946:	f007 fa95 	bl	8008e74 <WIFI_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <RequestJSONProcess+0x4c>
		return 1;
 8001950:	2301      	movs	r3, #1
 8001952:	e049      	b.n	80019e8 <RequestJSONProcess+0xe0>
	printf("-init\r\n");
 8001954:	4828      	ldr	r0, [pc, #160]	; (80019f8 <RequestJSONProcess+0xf0>)
 8001956:	f00b f889 	bl	800ca6c <puts>

	if (WIFI_Connect(ssid, password, ecn) == WIFI_STATUS_OK) {
 800195a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800195e:	1d39      	adds	r1, r7, #4
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	4618      	mov	r0, r3
 8001966:	f007 fab1 	bl	8008ecc <WIFI_Connect>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d137      	bne.n	80019e0 <RequestJSONProcess+0xd8>
		S_PrintOnSerial("-connected\r\n");
 8001970:	4822      	ldr	r0, [pc, #136]	; (80019fc <RequestJSONProcess+0xf4>)
 8001972:	f7fe fe31 	bl	80005d8 <S_PrintOnSerial>

		uint8_t serverIPAddr[4] = { 192, 168, 18, 3 };
 8001976:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <RequestJSONProcess+0xf8>)
 8001978:	603b      	str	r3, [r7, #0]
		uint32_t clientSocket = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (WIFI_OpenClientConnection(clientSocket, WIFI_TCP_PROTOCOL, "",
 800197e:	463a      	mov	r2, r7
 8001980:	2300      	movs	r3, #0
 8001982:	9301      	str	r3, [sp, #4]
 8001984:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	4613      	mov	r3, r2
 800198a:	4a1e      	ldr	r2, [pc, #120]	; (8001a04 <RequestJSONProcess+0xfc>)
 800198c:	2100      	movs	r1, #0
 800198e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001990:	f007 fad2 	bl	8008f38 <WIFI_OpenClientConnection>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d113      	bne.n	80019c2 <RequestJSONProcess+0xba>
				serverIPAddr, serverPort, 0) == WIFI_STATUS_OK) {
			S_PrintOnSerial("-client\r\n");
 800199a:	481b      	ldr	r0, [pc, #108]	; (8001a08 <RequestJSONProcess+0x100>)
 800199c:	f7fe fe1c 	bl	80005d8 <S_PrintOnSerial>
			//Infinite bucle of API requests
			do {
				StopServer = RequestJSON();
 80019a0:	f000 f83c 	bl	8001a1c <RequestJSON>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				vTaskDelay(2000);
 80019aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019ae:	f008 ffa7 	bl	800a900 <vTaskDelay>
			} while (StopServer == false);
 80019b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80019b6:	f083 0301 	eor.w	r3, r3, #1
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1ef      	bne.n	80019a0 <RequestJSONProcess+0x98>
 80019c0:	e002      	b.n	80019c8 <RequestJSONProcess+0xc0>
		} else {
			S_PrintOnSerial("-fail client\r\n");
 80019c2:	4812      	ldr	r0, [pc, #72]	; (8001a0c <RequestJSONProcess+0x104>)
 80019c4:	f7fe fe08 	bl	80005d8 <S_PrintOnSerial>
		}
		//Disconnect from server
		S_PrintOnSerial("-clossing client");
 80019c8:	4811      	ldr	r0, [pc, #68]	; (8001a10 <RequestJSONProcess+0x108>)
 80019ca:	f7fe fe05 	bl	80005d8 <S_PrintOnSerial>
		WIFI_CloseClientConnection(clientSocket);
 80019ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019d0:	f007 faec 	bl	8008fac <WIFI_CloseClientConnection>
		// Disconnect from WiFi
		WIFI_Disconnect();
 80019d4:	f007 fa9c 	bl	8008f10 <WIFI_Disconnect>
		S_PrintOnSerial("-clossing wifi");
 80019d8:	480e      	ldr	r0, [pc, #56]	; (8001a14 <RequestJSONProcess+0x10c>)
 80019da:	f7fe fdfd 	bl	80005d8 <S_PrintOnSerial>
 80019de:	e002      	b.n	80019e6 <RequestJSONProcess+0xde>
	} else {
		S_PrintOnSerial("-fail host\r\n");
 80019e0:	480d      	ldr	r0, [pc, #52]	; (8001a18 <RequestJSONProcess+0x110>)
 80019e2:	f7fe fdf9 	bl	80005d8 <S_PrintOnSerial>
	}

	return 1;
 80019e6:	2301      	movs	r3, #1
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3738      	adds	r7, #56	; 0x38
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bdb0      	pop	{r4, r5, r7, pc}
 80019f0:	0800dd74 	.word	0x0800dd74
 80019f4:	0800dd84 	.word	0x0800dd84
 80019f8:	0800dd08 	.word	0x0800dd08
 80019fc:	0800dd10 	.word	0x0800dd10
 8001a00:	0312a8c0 	.word	0x0312a8c0
 8001a04:	0800dd20 	.word	0x0800dd20
 8001a08:	0800dd24 	.word	0x0800dd24
 8001a0c:	0800dd30 	.word	0x0800dd30
 8001a10:	0800dd40 	.word	0x0800dd40
 8001a14:	0800dd54 	.word	0x0800dd54
 8001a18:	0800dd64 	.word	0x0800dd64

08001a1c <RequestJSON>:

bool RequestJSON() {
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	f5ad 7d2d 	sub.w	sp, sp, #692	; 0x2b4
 8001a22:	af02      	add	r7, sp, #8
	uint32_t clientSocket = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
	//Send an HTTP GET request
	const char *getRequest =
 8001a2a:	4b64      	ldr	r3, [pc, #400]	; (8001bbc <RequestJSON+0x1a0>)
 8001a2c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
			"GET /mi-api HTTP/1.1\r\nHost: 192.168.18.3\r\n\r\n";
	uint8_t response[512]; // Adjust the response buffer size as per your requirements
	uint16_t getRequestLength = strlen(getRequest);
 8001a30:	f8d7 029c 	ldr.w	r0, [r7, #668]	; 0x29c
 8001a34:	f7fe fbcc 	bl	80001d0 <strlen>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f8a7 329a 	strh.w	r3, [r7, #666]	; 0x29a

	// Send data in smaller chunks
	uint16_t sentDataLength = 0;
 8001a3e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001a42:	f2a3 231e 	subw	r3, r3, #542	; 0x21e
 8001a46:	2200      	movs	r2, #0
 8001a48:	801a      	strh	r2, [r3, #0]
	uint16_t remainingDataLength = getRequestLength;
 8001a4a:	f8b7 329a 	ldrh.w	r3, [r7, #666]	; 0x29a
 8001a4e:	f8a7 32a6 	strh.w	r3, [r7, #678]	; 0x2a6
	while (remainingDataLength > 0) {
 8001a52:	e02d      	b.n	8001ab0 <RequestJSON+0x94>
		uint16_t chunkSize =
 8001a54:	f8b7 32a6 	ldrh.w	r3, [r7, #678]	; 0x2a6
 8001a58:	2b40      	cmp	r3, #64	; 0x40
 8001a5a:	bf28      	it	cs
 8001a5c:	2340      	movcs	r3, #64	; 0x40
 8001a5e:	f8a7 3298 	strh.w	r3, [r7, #664]	; 0x298
				(remainingDataLength > MAX_CHUNK_SIZE) ?
				MAX_CHUNK_SIZE :
															remainingDataLength;
		if (WIFI_SendData(clientSocket,
 8001a62:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001a66:	b2d8      	uxtb	r0, r3
 8001a68:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001a6c:	f2a3 231e 	subw	r3, r3, #542	; 0x21e
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
				(uint8_t*) (getRequest + sentDataLength), chunkSize,
 8001a74:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001a78:	1899      	adds	r1, r3, r2
		if (WIFI_SendData(clientSocket,
 8001a7a:	f107 038a 	add.w	r3, r7, #138	; 0x8a
 8001a7e:	f8b7 2298 	ldrh.w	r2, [r7, #664]	; 0x298
 8001a82:	f242 7410 	movw	r4, #10000	; 0x2710
 8001a86:	9400      	str	r4, [sp, #0]
 8001a88:	f007 faac 	bl	8008fe4 <WIFI_SendData>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10a      	bne.n	8001aa8 <RequestJSON+0x8c>
				&sentDataLength, WIFI_WRITE_TIMEOUT) == WIFI_STATUS_OK) {
			remainingDataLength -= sentDataLength;
 8001a92:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001a96:	f2a3 231e 	subw	r3, r3, #542	; 0x21e
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	f8b7 22a6 	ldrh.w	r2, [r7, #678]	; 0x2a6
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f8a7 32a6 	strh.w	r3, [r7, #678]	; 0x2a6
 8001aa6:	e003      	b.n	8001ab0 <RequestJSON+0x94>
		} else {
			printf("Failed to send the request.\n");
 8001aa8:	4845      	ldr	r0, [pc, #276]	; (8001bc0 <RequestJSON+0x1a4>)
 8001aaa:	f00a ffdf 	bl	800ca6c <puts>
			break;
 8001aae:	e003      	b.n	8001ab8 <RequestJSON+0x9c>
	while (remainingDataLength > 0) {
 8001ab0:	f8b7 32a6 	ldrh.w	r3, [r7, #678]	; 0x2a6
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1cd      	bne.n	8001a54 <RequestJSON+0x38>
		}
	}

	// Receive the response
	uint16_t receivedDataLength = 0;
 8001ab8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001abc:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	801a      	strh	r2, [r3, #0]
	uint32_t receiveTimeout = 10000; // Adjust the receive timeout value as per your requirements
 8001ac4:	f242 7310 	movw	r3, #10000	; 0x2710
 8001ac8:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

	// Receive the HTTP response headers
	if (WIFI_ReceiveData(clientSocket, response, sizeof(response) - 1,
 8001acc:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001ad0:	b2d8      	uxtb	r0, r3
 8001ad2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001ad6:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001ada:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001ae6:	f007 fa9f 	bl	8009028 <WIFI_ReceiveData>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d15c      	bne.n	8001baa <RequestJSON+0x18e>
			&receivedDataLength, receiveTimeout) == WIFI_STATUS_OK) {
		response[receivedDataLength] = '\0'; // Null-terminate the response
 8001af0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001af4:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001b00:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001b04:	2100      	movs	r1, #0
 8001b06:	5499      	strb	r1, [r3, r2]

		// Find the end of headers marker "\r\n\r\n"
		char *endOfHeaders = strstr((char*) response, "\r\n\r\n");
 8001b08:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001b0c:	492d      	ldr	r1, [pc, #180]	; (8001bc4 <RequestJSON+0x1a8>)
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f00b f8a4 	bl	800cc5c <strstr>
 8001b14:	f8c7 0290 	str.w	r0, [r7, #656]	; 0x290
		if (endOfHeaders) {
 8001b18:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d040      	beq.n	8001ba2 <RequestJSON+0x186>
			// Print the JSON body
			printf("Received JSON body:\n");
 8001b20:	4829      	ldr	r0, [pc, #164]	; (8001bc8 <RequestJSON+0x1ac>)
 8001b22:	f00a ffa3 	bl	800ca6c <puts>

			// Print the remaining JSON body
			printf("%s", endOfHeaders + 4);
 8001b26:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4827      	ldr	r0, [pc, #156]	; (8001bcc <RequestJSON+0x1b0>)
 8001b30:	f00a ff16 	bl	800c960 <iprintf>

			// Receive and print the remaining JSON body
			while (1) {
				uint8_t chunk[128]; // Adjust the chunk size as per your requirements
				uint16_t receivedChunkLength = 0;
 8001b34:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001b38:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	801a      	strh	r2, [r3, #0]
				uint32_t receiveTimeout = 1000; // Adjust the receive timeout value as per your requirements
 8001b40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b44:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c

				// Receive a chunk of data
				if (WIFI_ReceiveData(clientSocket, chunk, sizeof(chunk) - 1,
 8001b48:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001b4c:	b2d8      	uxtb	r0, r3
 8001b4e:	f107 0286 	add.w	r2, r7, #134	; 0x86
 8001b52:	1d39      	adds	r1, r7, #4
 8001b54:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	227f      	movs	r2, #127	; 0x7f
 8001b5e:	f007 fa63 	bl	8009028 <WIFI_ReceiveData>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d118      	bne.n	8001b9a <RequestJSON+0x17e>
						&receivedChunkLength, receiveTimeout)
						== WIFI_STATUS_OK) {
					chunk[receivedChunkLength] = '\0'; // Null-terminate the chunk
 8001b68:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001b6c:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001b78:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	5499      	strb	r1, [r3, r2]

					// Print the received chunk
					printf("%s", chunk);
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	4619      	mov	r1, r3
 8001b84:	4811      	ldr	r0, [pc, #68]	; (8001bcc <RequestJSON+0x1b0>)
 8001b86:	f00a feeb 	bl	800c960 <iprintf>

					// Check if the chunk is the end of the response
					if (receivedChunkLength < sizeof(chunk) - 1) {
 8001b8a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001b8e:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	2b7e      	cmp	r3, #126	; 0x7e
 8001b96:	d8cd      	bhi.n	8001b34 <RequestJSON+0x118>
						break;
 8001b98:	e00a      	b.n	8001bb0 <RequestJSON+0x194>
					}
				} else {
					printf("Failed to receive the JSON body.\n");
 8001b9a:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <RequestJSON+0x1b4>)
 8001b9c:	f00a ff66 	bl	800ca6c <puts>
					break;
 8001ba0:	e006      	b.n	8001bb0 <RequestJSON+0x194>
				}
			}
		} else {
			printf("Failed to find the end of headers marker.\n");
 8001ba2:	480c      	ldr	r0, [pc, #48]	; (8001bd4 <RequestJSON+0x1b8>)
 8001ba4:	f00a ff62 	bl	800ca6c <puts>
 8001ba8:	e002      	b.n	8001bb0 <RequestJSON+0x194>
		}
	} else {
		printf("Failed to receive the response headers.\n");
 8001baa:	480b      	ldr	r0, [pc, #44]	; (8001bd8 <RequestJSON+0x1bc>)
 8001bac:	f00a ff5e 	bl	800ca6c <puts>
	}

	return 0;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f507 772b 	add.w	r7, r7, #684	; 0x2ac
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd90      	pop	{r4, r7, pc}
 8001bbc:	0800dd9c 	.word	0x0800dd9c
 8001bc0:	0800ddcc 	.word	0x0800ddcc
 8001bc4:	0800dde8 	.word	0x0800dde8
 8001bc8:	0800ddf0 	.word	0x0800ddf0
 8001bcc:	0800de04 	.word	0x0800de04
 8001bd0:	0800de08 	.word	0x0800de08
 8001bd4:	0800de2c 	.word	0x0800de2c
 8001bd8:	0800de58 	.word	0x0800de58

08001bdc <EXTI1_IRQHandler>:
/**
 * @brief  This function handles external lines 1interrupt request.
 * @param  None
 * @retval None
 */
void EXTI1_IRQHandler(void) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001be0:	2002      	movs	r0, #2
 8001be2:	f000 fddf 	bl	80027a4 <HAL_GPIO_EXTI_IRQHandler>
	portYIELD_FROM_ISR(pdFALSE);
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_GPIO_EXTI_Callback>:
/**
 * @brief  EXTI line detection callback.
 * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d102      	bne.n	8001c00 <HAL_GPIO_EXTI_Callback+0x16>
	case (GPIO_PIN_1): {
		SPI_WIFI_ISR();
 8001bfa:	f007 f92b 	bl	8008e54 <SPI_WIFI_ISR>
		break;
 8001bfe:	e000      	b.n	8001c02 <HAL_GPIO_EXTI_Callback+0x18>
	}
	default: {
		break;
 8001c00:	bf00      	nop
	}
	}
	portYIELD_FROM_ISR(pdFALSE);
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <SPI3_IRQHandler>:
 * @brief  SPI3 line detection callback.
 * @param  None
 * @retval None
 */
extern SPI_HandleTypeDef hspi;
void SPI3_IRQHandler(void) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
	HAL_SPI_IRQHandler(&hspi);
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <SPI3_IRQHandler+0x10>)
 8001c12:	f003 fa87 	bl	8005124 <HAL_SPI_IRQHandler>
	portYIELD_FROM_ISR(pdFALSE);
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000864 	.word	0x20000864

08001c20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c24:	f7ff fe5e 	bl	80018e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c28:	480c      	ldr	r0, [pc, #48]	; (8001c5c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c2a:	490d      	ldr	r1, [pc, #52]	; (8001c60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	; (8001c64 <LoopForever+0xe>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c30:	e002      	b.n	8001c38 <LoopCopyDataInit>

08001c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c36:	3304      	adds	r3, #4

08001c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c3c:	d3f9      	bcc.n	8001c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c40:	4c0a      	ldr	r4, [pc, #40]	; (8001c6c <LoopForever+0x16>)
  movs r3, #0
 8001c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c44:	e001      	b.n	8001c4a <LoopFillZerobss>

08001c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c48:	3204      	adds	r2, #4

08001c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c4c:	d3fb      	bcc.n	8001c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c4e:	f00a fd49 	bl	800c6e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c52:	f7fe fdff 	bl	8000854 <main>

08001c56 <LoopForever>:

LoopForever:
    b LoopForever
 8001c56:	e7fe      	b.n	8001c56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c60:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001c64:	0800e548 	.word	0x0800e548
  ldr r2, =_sbss
 8001c68:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001c6c:	20002bb0 	.word	0x20002bb0

08001c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c70:	e7fe      	b.n	8001c70 <ADC1_2_IRQHandler>

08001c72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f000 f902 	bl	8001e86 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c82:	200f      	movs	r0, #15
 8001c84:	f7ff fc90 	bl	80015a8 <HAL_InitTick>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	71fb      	strb	r3, [r7, #7]
 8001c92:	e001      	b.n	8001c98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c94:	f7ff f9aa 	bl	8000fec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c98:	79fb      	ldrb	r3, [r7, #7]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_IncTick+0x20>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_IncTick+0x24>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <HAL_IncTick+0x24>)
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000008 	.word	0x20000008
 8001cc8:	20000838 	.word	0x20000838

08001ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <HAL_GetTick+0x14>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000838 	.word	0x20000838

08001ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cec:	f7ff ffee 	bl	8001ccc <HAL_GetTick>
 8001cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfc:	d005      	beq.n	8001d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_Delay+0x44>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4413      	add	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d0a:	bf00      	nop
 8001d0c:	f7ff ffde 	bl	8001ccc <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d8f7      	bhi.n	8001d0c <HAL_Delay+0x28>
  {
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000008 	.word	0x20000008

08001d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5e:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	60d3      	str	r3, [r2, #12]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <__NVIC_GetPriorityGrouping+0x18>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	f003 0307 	and.w	r3, r3, #7
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	db0b      	blt.n	8001dba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	f003 021f 	and.w	r2, r3, #31
 8001da8:	4907      	ldr	r1, [pc, #28]	; (8001dc8 <__NVIC_EnableIRQ+0x38>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	2001      	movs	r0, #1
 8001db2:	fa00 f202 	lsl.w	r2, r0, r2
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000e100 	.word	0xe000e100

08001dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db0a      	blt.n	8001df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	490c      	ldr	r1, [pc, #48]	; (8001e18 <__NVIC_SetPriority+0x4c>)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	0112      	lsls	r2, r2, #4
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	440b      	add	r3, r1
 8001df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df4:	e00a      	b.n	8001e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4908      	ldr	r1, [pc, #32]	; (8001e1c <__NVIC_SetPriority+0x50>)
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	3b04      	subs	r3, #4
 8001e04:	0112      	lsls	r2, r2, #4
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	440b      	add	r3, r1
 8001e0a:	761a      	strb	r2, [r3, #24]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000e100 	.word	0xe000e100
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	; 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f1c3 0307 	rsb	r3, r3, #7
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	bf28      	it	cs
 8001e3e:	2304      	movcs	r3, #4
 8001e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3304      	adds	r3, #4
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d902      	bls.n	8001e50 <NVIC_EncodePriority+0x30>
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3b03      	subs	r3, #3
 8001e4e:	e000      	b.n	8001e52 <NVIC_EncodePriority+0x32>
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	f04f 32ff 	mov.w	r2, #4294967295
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	401a      	ands	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e68:	f04f 31ff 	mov.w	r1, #4294967295
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	43d9      	mvns	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	4313      	orrs	r3, r2
         );
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3724      	adds	r7, #36	; 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ff4c 	bl	8001d2c <__NVIC_SetPriorityGrouping>
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
 8001ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001eae:	f7ff ff61 	bl	8001d74 <__NVIC_GetPriorityGrouping>
 8001eb2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	68b9      	ldr	r1, [r7, #8]
 8001eb8:	6978      	ldr	r0, [r7, #20]
 8001eba:	f7ff ffb1 	bl	8001e20 <NVIC_EncodePriority>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff ff80 	bl	8001dcc <__NVIC_SetPriority>
}
 8001ecc:	bf00      	nop
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff ff54 	bl	8001d90 <__NVIC_EnableIRQ>
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0ac      	b.n	800205c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 f8b2 	bl	8002070 <DFSDM_GetChannelFromInstance>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	4a55      	ldr	r2, [pc, #340]	; (8002064 <HAL_DFSDM_ChannelInit+0x174>)
 8001f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e09f      	b.n	800205c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff f88d 	bl	800103c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001f22:	4b51      	ldr	r3, [pc, #324]	; (8002068 <HAL_DFSDM_ChannelInit+0x178>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	3301      	adds	r3, #1
 8001f28:	4a4f      	ldr	r2, [pc, #316]	; (8002068 <HAL_DFSDM_ChannelInit+0x178>)
 8001f2a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001f2c:	4b4e      	ldr	r3, [pc, #312]	; (8002068 <HAL_DFSDM_ChannelInit+0x178>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d125      	bne.n	8001f80 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001f34:	4b4d      	ldr	r3, [pc, #308]	; (800206c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a4c      	ldr	r2, [pc, #304]	; (800206c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f3e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001f40:	4b4a      	ldr	r3, [pc, #296]	; (800206c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4948      	ldr	r1, [pc, #288]	; (800206c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001f4e:	4b47      	ldr	r3, [pc, #284]	; (800206c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a46      	ldr	r2, [pc, #280]	; (800206c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f54:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001f58:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	791b      	ldrb	r3, [r3, #4]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d108      	bne.n	8001f74 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001f62:	4b42      	ldr	r3, [pc, #264]	; (800206c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	041b      	lsls	r3, r3, #16
 8001f6e:	493f      	ldr	r1, [pc, #252]	; (800206c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001f74:	4b3d      	ldr	r3, [pc, #244]	; (800206c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a3c      	ldr	r2, [pc, #240]	; (800206c <HAL_DFSDM_ChannelInit+0x17c>)
 8001f7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f7e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001f8e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6819      	ldr	r1, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001f9e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001fa4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 020f 	bic.w	r2, r2, #15
 8001fbc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6819      	ldr	r1, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001fe4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6899      	ldr	r1, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f002 0207 	and.w	r2, r2, #7
 8002010:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6859      	ldr	r1, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800203c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f000 f810 	bl	8002070 <DFSDM_GetChannelFromInstance>
 8002050:	4602      	mov	r2, r0
 8002052:	4904      	ldr	r1, [pc, #16]	; (8002064 <HAL_DFSDM_ChannelInit+0x174>)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000840 	.word	0x20000840
 8002068:	2000083c 	.word	0x2000083c
 800206c:	40016000 	.word	0x40016000

08002070 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a1c      	ldr	r2, [pc, #112]	; (80020ec <DFSDM_GetChannelFromInstance+0x7c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d102      	bne.n	8002086 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	e02b      	b.n	80020de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a19      	ldr	r2, [pc, #100]	; (80020f0 <DFSDM_GetChannelFromInstance+0x80>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d102      	bne.n	8002094 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800208e:	2301      	movs	r3, #1
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	e024      	b.n	80020de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a17      	ldr	r2, [pc, #92]	; (80020f4 <DFSDM_GetChannelFromInstance+0x84>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d102      	bne.n	80020a2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800209c:	2302      	movs	r3, #2
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	e01d      	b.n	80020de <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a14      	ldr	r2, [pc, #80]	; (80020f8 <DFSDM_GetChannelFromInstance+0x88>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d102      	bne.n	80020b0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80020aa:	2304      	movs	r3, #4
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	e016      	b.n	80020de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a12      	ldr	r2, [pc, #72]	; (80020fc <DFSDM_GetChannelFromInstance+0x8c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d102      	bne.n	80020be <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80020b8:	2305      	movs	r3, #5
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	e00f      	b.n	80020de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a0f      	ldr	r2, [pc, #60]	; (8002100 <DFSDM_GetChannelFromInstance+0x90>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d102      	bne.n	80020cc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80020c6:	2306      	movs	r3, #6
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	e008      	b.n	80020de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a0d      	ldr	r2, [pc, #52]	; (8002104 <DFSDM_GetChannelFromInstance+0x94>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d102      	bne.n	80020da <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80020d4:	2307      	movs	r3, #7
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	e001      	b.n	80020de <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80020da:	2303      	movs	r3, #3
 80020dc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80020de:	68fb      	ldr	r3, [r7, #12]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	40016000 	.word	0x40016000
 80020f0:	40016020 	.word	0x40016020
 80020f4:	40016040 	.word	0x40016040
 80020f8:	40016080 	.word	0x40016080
 80020fc:	400160a0 	.word	0x400160a0
 8002100:	400160c0 	.word	0x400160c0
 8002104:	400160e0 	.word	0x400160e0

08002108 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d008      	beq.n	8002132 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2204      	movs	r2, #4
 8002124:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e022      	b.n	8002178 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 020e 	bic.w	r2, r2, #14
 8002140:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0201 	bic.w	r2, r2, #1
 8002150:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	f003 021c 	and.w	r2, r3, #28
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	2101      	movs	r1, #1
 8002160:	fa01 f202 	lsl.w	r2, r1, r2
 8002164:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002176:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002178:	4618      	mov	r0, r3
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d005      	beq.n	80021a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2204      	movs	r2, #4
 80021a0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	e029      	b.n	80021fc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 020e 	bic.w	r2, r2, #14
 80021b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0201 	bic.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021cc:	f003 021c 	and.w	r2, r3, #28
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	2101      	movs	r1, #1
 80021d6:	fa01 f202 	lsl.w	r2, r1, r2
 80021da:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	4798      	blx	r3
    }
  }
  return status;
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002208:	b480      	push	{r7}
 800220a:	b087      	sub	sp, #28
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002216:	e17f      	b.n	8002518 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	2101      	movs	r1, #1
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	fa01 f303 	lsl.w	r3, r1, r3
 8002224:	4013      	ands	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 8171 	beq.w	8002512 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d005      	beq.n	8002248 <HAL_GPIO_Init+0x40>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d130      	bne.n	80022aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	2203      	movs	r2, #3
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4013      	ands	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800227e:	2201      	movs	r2, #1
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4013      	ands	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	091b      	lsrs	r3, r3, #4
 8002294:	f003 0201 	and.w	r2, r3, #1
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d118      	bne.n	80022e8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80022bc:	2201      	movs	r2, #1
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	08db      	lsrs	r3, r3, #3
 80022d2:	f003 0201 	and.w	r2, r3, #1
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4313      	orrs	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d017      	beq.n	8002324 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	2203      	movs	r2, #3
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4013      	ands	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d123      	bne.n	8002378 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	08da      	lsrs	r2, r3, #3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3208      	adds	r2, #8
 8002338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800233c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	220f      	movs	r2, #15
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4313      	orrs	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	08da      	lsrs	r2, r3, #3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3208      	adds	r2, #8
 8002372:	6939      	ldr	r1, [r7, #16]
 8002374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	2203      	movs	r2, #3
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0203 	and.w	r2, r3, #3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80ac 	beq.w	8002512 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ba:	4b5f      	ldr	r3, [pc, #380]	; (8002538 <HAL_GPIO_Init+0x330>)
 80023bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023be:	4a5e      	ldr	r2, [pc, #376]	; (8002538 <HAL_GPIO_Init+0x330>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6613      	str	r3, [r2, #96]	; 0x60
 80023c6:	4b5c      	ldr	r3, [pc, #368]	; (8002538 <HAL_GPIO_Init+0x330>)
 80023c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023d2:	4a5a      	ldr	r2, [pc, #360]	; (800253c <HAL_GPIO_Init+0x334>)
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	089b      	lsrs	r3, r3, #2
 80023d8:	3302      	adds	r3, #2
 80023da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	220f      	movs	r2, #15
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023fc:	d025      	beq.n	800244a <HAL_GPIO_Init+0x242>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4f      	ldr	r2, [pc, #316]	; (8002540 <HAL_GPIO_Init+0x338>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d01f      	beq.n	8002446 <HAL_GPIO_Init+0x23e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4e      	ldr	r2, [pc, #312]	; (8002544 <HAL_GPIO_Init+0x33c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d019      	beq.n	8002442 <HAL_GPIO_Init+0x23a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a4d      	ldr	r2, [pc, #308]	; (8002548 <HAL_GPIO_Init+0x340>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d013      	beq.n	800243e <HAL_GPIO_Init+0x236>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a4c      	ldr	r2, [pc, #304]	; (800254c <HAL_GPIO_Init+0x344>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d00d      	beq.n	800243a <HAL_GPIO_Init+0x232>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a4b      	ldr	r2, [pc, #300]	; (8002550 <HAL_GPIO_Init+0x348>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d007      	beq.n	8002436 <HAL_GPIO_Init+0x22e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a4a      	ldr	r2, [pc, #296]	; (8002554 <HAL_GPIO_Init+0x34c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d101      	bne.n	8002432 <HAL_GPIO_Init+0x22a>
 800242e:	2306      	movs	r3, #6
 8002430:	e00c      	b.n	800244c <HAL_GPIO_Init+0x244>
 8002432:	2307      	movs	r3, #7
 8002434:	e00a      	b.n	800244c <HAL_GPIO_Init+0x244>
 8002436:	2305      	movs	r3, #5
 8002438:	e008      	b.n	800244c <HAL_GPIO_Init+0x244>
 800243a:	2304      	movs	r3, #4
 800243c:	e006      	b.n	800244c <HAL_GPIO_Init+0x244>
 800243e:	2303      	movs	r3, #3
 8002440:	e004      	b.n	800244c <HAL_GPIO_Init+0x244>
 8002442:	2302      	movs	r3, #2
 8002444:	e002      	b.n	800244c <HAL_GPIO_Init+0x244>
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <HAL_GPIO_Init+0x244>
 800244a:	2300      	movs	r3, #0
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	f002 0203 	and.w	r2, r2, #3
 8002452:	0092      	lsls	r2, r2, #2
 8002454:	4093      	lsls	r3, r2
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800245c:	4937      	ldr	r1, [pc, #220]	; (800253c <HAL_GPIO_Init+0x334>)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	089b      	lsrs	r3, r3, #2
 8002462:	3302      	adds	r3, #2
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800246a:	4b3b      	ldr	r3, [pc, #236]	; (8002558 <HAL_GPIO_Init+0x350>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	43db      	mvns	r3, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4013      	ands	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4313      	orrs	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800248e:	4a32      	ldr	r2, [pc, #200]	; (8002558 <HAL_GPIO_Init+0x350>)
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002494:	4b30      	ldr	r3, [pc, #192]	; (8002558 <HAL_GPIO_Init+0x350>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	43db      	mvns	r3, r3
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024b8:	4a27      	ldr	r2, [pc, #156]	; (8002558 <HAL_GPIO_Init+0x350>)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024be:	4b26      	ldr	r3, [pc, #152]	; (8002558 <HAL_GPIO_Init+0x350>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4013      	ands	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024e2:	4a1d      	ldr	r2, [pc, #116]	; (8002558 <HAL_GPIO_Init+0x350>)
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024e8:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_GPIO_Init+0x350>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800250c:	4a12      	ldr	r2, [pc, #72]	; (8002558 <HAL_GPIO_Init+0x350>)
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	3301      	adds	r3, #1
 8002516:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	fa22 f303 	lsr.w	r3, r2, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	f47f ae78 	bne.w	8002218 <HAL_GPIO_Init+0x10>
  }
}
 8002528:	bf00      	nop
 800252a:	bf00      	nop
 800252c:	371c      	adds	r7, #28
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40021000 	.word	0x40021000
 800253c:	40010000 	.word	0x40010000
 8002540:	48000400 	.word	0x48000400
 8002544:	48000800 	.word	0x48000800
 8002548:	48000c00 	.word	0x48000c00
 800254c:	48001000 	.word	0x48001000
 8002550:	48001400 	.word	0x48001400
 8002554:	48001800 	.word	0x48001800
 8002558:	40010400 	.word	0x40010400

0800255c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800256a:	e0cd      	b.n	8002708 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800256c:	2201      	movs	r2, #1
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	4013      	ands	r3, r2
 8002578:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 80c0 	beq.w	8002702 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002582:	4a68      	ldr	r2, [pc, #416]	; (8002724 <HAL_GPIO_DeInit+0x1c8>)
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	089b      	lsrs	r3, r3, #2
 8002588:	3302      	adds	r3, #2
 800258a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	220f      	movs	r2, #15
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	4013      	ands	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025aa:	d025      	beq.n	80025f8 <HAL_GPIO_DeInit+0x9c>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a5e      	ldr	r2, [pc, #376]	; (8002728 <HAL_GPIO_DeInit+0x1cc>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d01f      	beq.n	80025f4 <HAL_GPIO_DeInit+0x98>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a5d      	ldr	r2, [pc, #372]	; (800272c <HAL_GPIO_DeInit+0x1d0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d019      	beq.n	80025f0 <HAL_GPIO_DeInit+0x94>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a5c      	ldr	r2, [pc, #368]	; (8002730 <HAL_GPIO_DeInit+0x1d4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d013      	beq.n	80025ec <HAL_GPIO_DeInit+0x90>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a5b      	ldr	r2, [pc, #364]	; (8002734 <HAL_GPIO_DeInit+0x1d8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d00d      	beq.n	80025e8 <HAL_GPIO_DeInit+0x8c>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a5a      	ldr	r2, [pc, #360]	; (8002738 <HAL_GPIO_DeInit+0x1dc>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d007      	beq.n	80025e4 <HAL_GPIO_DeInit+0x88>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a59      	ldr	r2, [pc, #356]	; (800273c <HAL_GPIO_DeInit+0x1e0>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d101      	bne.n	80025e0 <HAL_GPIO_DeInit+0x84>
 80025dc:	2306      	movs	r3, #6
 80025de:	e00c      	b.n	80025fa <HAL_GPIO_DeInit+0x9e>
 80025e0:	2307      	movs	r3, #7
 80025e2:	e00a      	b.n	80025fa <HAL_GPIO_DeInit+0x9e>
 80025e4:	2305      	movs	r3, #5
 80025e6:	e008      	b.n	80025fa <HAL_GPIO_DeInit+0x9e>
 80025e8:	2304      	movs	r3, #4
 80025ea:	e006      	b.n	80025fa <HAL_GPIO_DeInit+0x9e>
 80025ec:	2303      	movs	r3, #3
 80025ee:	e004      	b.n	80025fa <HAL_GPIO_DeInit+0x9e>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e002      	b.n	80025fa <HAL_GPIO_DeInit+0x9e>
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <HAL_GPIO_DeInit+0x9e>
 80025f8:	2300      	movs	r3, #0
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	f002 0203 	and.w	r2, r2, #3
 8002600:	0092      	lsls	r2, r2, #2
 8002602:	4093      	lsls	r3, r2
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	429a      	cmp	r2, r3
 8002608:	d132      	bne.n	8002670 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800260a:	4b4d      	ldr	r3, [pc, #308]	; (8002740 <HAL_GPIO_DeInit+0x1e4>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	43db      	mvns	r3, r3
 8002612:	494b      	ldr	r1, [pc, #300]	; (8002740 <HAL_GPIO_DeInit+0x1e4>)
 8002614:	4013      	ands	r3, r2
 8002616:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002618:	4b49      	ldr	r3, [pc, #292]	; (8002740 <HAL_GPIO_DeInit+0x1e4>)
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	43db      	mvns	r3, r3
 8002620:	4947      	ldr	r1, [pc, #284]	; (8002740 <HAL_GPIO_DeInit+0x1e4>)
 8002622:	4013      	ands	r3, r2
 8002624:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002626:	4b46      	ldr	r3, [pc, #280]	; (8002740 <HAL_GPIO_DeInit+0x1e4>)
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	43db      	mvns	r3, r3
 800262e:	4944      	ldr	r1, [pc, #272]	; (8002740 <HAL_GPIO_DeInit+0x1e4>)
 8002630:	4013      	ands	r3, r2
 8002632:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002634:	4b42      	ldr	r3, [pc, #264]	; (8002740 <HAL_GPIO_DeInit+0x1e4>)
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	43db      	mvns	r3, r3
 800263c:	4940      	ldr	r1, [pc, #256]	; (8002740 <HAL_GPIO_DeInit+0x1e4>)
 800263e:	4013      	ands	r3, r2
 8002640:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	220f      	movs	r2, #15
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002652:	4a34      	ldr	r2, [pc, #208]	; (8002724 <HAL_GPIO_DeInit+0x1c8>)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	089b      	lsrs	r3, r3, #2
 8002658:	3302      	adds	r3, #2
 800265a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	43da      	mvns	r2, r3
 8002662:	4830      	ldr	r0, [pc, #192]	; (8002724 <HAL_GPIO_DeInit+0x1c8>)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	400a      	ands	r2, r1
 800266a:	3302      	adds	r3, #2
 800266c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	2103      	movs	r1, #3
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	08da      	lsrs	r2, r3, #3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3208      	adds	r2, #8
 800268c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	220f      	movs	r2, #15
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	08d2      	lsrs	r2, r2, #3
 80026a4:	4019      	ands	r1, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3208      	adds	r2, #8
 80026aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	2103      	movs	r1, #3
 80026b8:	fa01 f303 	lsl.w	r3, r1, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	401a      	ands	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	2101      	movs	r1, #1
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	fa01 f303 	lsl.w	r3, r1, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	401a      	ands	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	2103      	movs	r1, #3
 80026e2:	fa01 f303 	lsl.w	r3, r1, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	401a      	ands	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f2:	2101      	movs	r1, #1
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	fa01 f303 	lsl.w	r3, r1, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	401a      	ands	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	3301      	adds	r3, #1
 8002706:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	fa22 f303 	lsr.w	r3, r2, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	f47f af2b 	bne.w	800256c <HAL_GPIO_DeInit+0x10>
  }
}
 8002716:	bf00      	nop
 8002718:	bf00      	nop
 800271a:	371c      	adds	r7, #28
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	40010000 	.word	0x40010000
 8002728:	48000400 	.word	0x48000400
 800272c:	48000800 	.word	0x48000800
 8002730:	48000c00 	.word	0x48000c00
 8002734:	48001000 	.word	0x48001000
 8002738:	48001400 	.word	0x48001400
 800273c:	48001800 	.word	0x48001800
 8002740:	40010400 	.word	0x40010400

08002744 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	887b      	ldrh	r3, [r7, #2]
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800275c:	2301      	movs	r3, #1
 800275e:	73fb      	strb	r3, [r7, #15]
 8002760:	e001      	b.n	8002766 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002762:	2300      	movs	r3, #0
 8002764:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002766:	7bfb      	ldrb	r3, [r7, #15]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
 8002780:	4613      	mov	r3, r2
 8002782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002784:	787b      	ldrb	r3, [r7, #1]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800278a:	887a      	ldrh	r2, [r7, #2]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002790:	e002      	b.n	8002798 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002792:	887a      	ldrh	r2, [r7, #2]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027ae:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	88fb      	ldrh	r3, [r7, #6]
 80027b4:	4013      	ands	r3, r2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d006      	beq.n	80027c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027ba:	4a05      	ldr	r2, [pc, #20]	; (80027d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027bc:	88fb      	ldrh	r3, [r7, #6]
 80027be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fa11 	bl	8001bea <HAL_GPIO_EXTI_Callback>
  }
}
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40010400 	.word	0x40010400

080027d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e081      	b.n	80028ea <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7fe fc82 	bl	8001104 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2224      	movs	r2, #36	; 0x24
 8002804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0201 	bic.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002824:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002834:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d107      	bne.n	800284e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	e006      	b.n	800285c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800285a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d104      	bne.n	800286e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800286c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800287c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002880:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002890:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691a      	ldr	r2, [r3, #16]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69d9      	ldr	r1, [r3, #28]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1a      	ldr	r2, [r3, #32]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b20      	cmp	r3, #32
 8002906:	d138      	bne.n	800297a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800290e:	2b01      	cmp	r3, #1
 8002910:	d101      	bne.n	8002916 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002912:	2302      	movs	r3, #2
 8002914:	e032      	b.n	800297c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2224      	movs	r2, #36	; 0x24
 8002922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0201 	bic.w	r2, r2, #1
 8002934:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002944:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6819      	ldr	r1, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0201 	orr.w	r2, r2, #1
 8002964:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2220      	movs	r2, #32
 800296a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	e000      	b.n	800297c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800297a:	2302      	movs	r3, #2
  }
}
 800297c:	4618      	mov	r0, r3
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b20      	cmp	r3, #32
 800299c:	d139      	bne.n	8002a12 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e033      	b.n	8002a14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2224      	movs	r2, #36	; 0x24
 80029b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0201 	bic.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	021b      	lsls	r3, r3, #8
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 0201 	orr.w	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	e000      	b.n	8002a14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a12:	2302      	movs	r3, #2
  }
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a22:	b08f      	sub	sp, #60	; 0x3c
 8002a24:	af0a      	add	r7, sp, #40	; 0x28
 8002a26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e116      	b.n	8002c60 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d106      	bne.n	8002a52 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7fe fd0f 	bl	8001470 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2203      	movs	r2, #3
 8002a56:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d102      	bne.n	8002a6c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f004 fd17 	bl	80074a4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	687e      	ldr	r6, [r7, #4]
 8002a7e:	466d      	mov	r5, sp
 8002a80:	f106 0410 	add.w	r4, r6, #16
 8002a84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a90:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a94:	1d33      	adds	r3, r6, #4
 8002a96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a98:	6838      	ldr	r0, [r7, #0]
 8002a9a:	f004 fcd7 	bl	800744c <USB_CoreInit>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0d7      	b.n	8002c60 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f004 fd05 	bl	80074c6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002abc:	2300      	movs	r3, #0
 8002abe:	73fb      	strb	r3, [r7, #15]
 8002ac0:	e04a      	b.n	8002b58 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ac2:	7bfa      	ldrb	r2, [r7, #15]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	4413      	add	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	333d      	adds	r3, #61	; 0x3d
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ad6:	7bfa      	ldrb	r2, [r7, #15]
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	4613      	mov	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4413      	add	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	333c      	adds	r3, #60	; 0x3c
 8002ae6:	7bfa      	ldrb	r2, [r7, #15]
 8002ae8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002aea:	7bfa      	ldrb	r2, [r7, #15]
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	b298      	uxth	r0, r3
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	4413      	add	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	3344      	adds	r3, #68	; 0x44
 8002afe:	4602      	mov	r2, r0
 8002b00:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b02:	7bfa      	ldrb	r2, [r7, #15]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	3340      	adds	r3, #64	; 0x40
 8002b12:	2200      	movs	r2, #0
 8002b14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b16:	7bfa      	ldrb	r2, [r7, #15]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	3348      	adds	r3, #72	; 0x48
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b2a:	7bfa      	ldrb	r2, [r7, #15]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	334c      	adds	r3, #76	; 0x4c
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b3e:	7bfa      	ldrb	r2, [r7, #15]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	3354      	adds	r3, #84	; 0x54
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	3301      	adds	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
 8002b58:	7bfa      	ldrb	r2, [r7, #15]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d3af      	bcc.n	8002ac2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b62:	2300      	movs	r3, #0
 8002b64:	73fb      	strb	r3, [r7, #15]
 8002b66:	e044      	b.n	8002bf2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b68:	7bfa      	ldrb	r2, [r7, #15]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4413      	add	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b7e:	7bfa      	ldrb	r2, [r7, #15]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002b90:	7bfa      	ldrb	r2, [r7, #15]
 8002b92:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b94:	7bfa      	ldrb	r2, [r7, #15]
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002baa:	7bfa      	ldrb	r2, [r7, #15]
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bc0:	7bfa      	ldrb	r2, [r7, #15]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bd6:	7bfa      	ldrb	r2, [r7, #15]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	73fb      	strb	r3, [r7, #15]
 8002bf2:	7bfa      	ldrb	r2, [r7, #15]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d3b5      	bcc.n	8002b68 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	603b      	str	r3, [r7, #0]
 8002c02:	687e      	ldr	r6, [r7, #4]
 8002c04:	466d      	mov	r5, sp
 8002c06:	f106 0410 	add.w	r4, r6, #16
 8002c0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c16:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c1a:	1d33      	adds	r3, r6, #4
 8002c1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c1e:	6838      	ldr	r0, [r7, #0]
 8002c20:	f004 fc9e 	bl	8007560 <USB_DevInit>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d005      	beq.n	8002c36 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e014      	b.n	8002c60 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d102      	bne.n	8002c54 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f80a 	bl	8002c68 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f004 fe4a 	bl	80078f2 <USB_DevDisconnect>

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c68 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	f043 0303 	orr.w	r3, r3, #3
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a04      	ldr	r2, [pc, #16]	; (8002ccc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cbe:	6013      	str	r3, [r2, #0]
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40007000 	.word	0x40007000

08002cd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002cd4:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40007000 	.word	0x40007000

08002cec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cfa:	d130      	bne.n	8002d5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cfc:	4b23      	ldr	r3, [pc, #140]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d08:	d038      	beq.n	8002d7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d0a:	4b20      	ldr	r3, [pc, #128]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d12:	4a1e      	ldr	r2, [pc, #120]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d1a:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2232      	movs	r2, #50	; 0x32
 8002d20:	fb02 f303 	mul.w	r3, r2, r3
 8002d24:	4a1b      	ldr	r2, [pc, #108]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d26:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2a:	0c9b      	lsrs	r3, r3, #18
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d30:	e002      	b.n	8002d38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d38:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d44:	d102      	bne.n	8002d4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f2      	bne.n	8002d32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d4c:	4b0f      	ldr	r3, [pc, #60]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d58:	d110      	bne.n	8002d7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e00f      	b.n	8002d7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d6a:	d007      	beq.n	8002d7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d6c:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d74:	4a05      	ldr	r2, [pc, #20]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40007000 	.word	0x40007000
 8002d90:	20000000 	.word	0x20000000
 8002d94:	431bde83 	.word	0x431bde83

08002d98 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002d9c:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4a04      	ldr	r2, [pc, #16]	; (8002db4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002da6:	6053      	str	r3, [r2, #4]
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40007000 	.word	0x40007000

08002db8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002dc0:	f7fe ff84 	bl	8001ccc <HAL_GetTick>
 8002dc4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e063      	b.n	8002e98 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10b      	bne.n	8002df4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7fe f9eb 	bl	80011c0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002dea:	f241 3188 	movw	r1, #5000	; 0x1388
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f858 	bl	8002ea4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	021a      	lsls	r2, r3, #8
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	2120      	movs	r1, #32
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f850 	bl	8002ec0 <QSPI_WaitFlagStateUntilTimeout>
 8002e20:	4603      	mov	r3, r0
 8002e22:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002e24:	7afb      	ldrb	r3, [r7, #11]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d131      	bne.n	8002e8e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e34:	f023 0310 	bic.w	r3, r3, #16
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6852      	ldr	r2, [r2, #4]
 8002e3c:	0611      	lsls	r1, r2, #24
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68d2      	ldr	r2, [r2, #12]
 8002e42:	4311      	orrs	r1, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <HAL_QSPI_Init+0xe8>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6912      	ldr	r2, [r2, #16]
 8002e5a:	0411      	lsls	r1, r2, #16
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6952      	ldr	r2, [r2, #20]
 8002e60:	4311      	orrs	r1, r2
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6992      	ldr	r2, [r2, #24]
 8002e66:	4311      	orrs	r1, r2
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	430b      	orrs	r3, r1
 8002e6e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002e96:	7afb      	ldrb	r3, [r7, #11]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	ffe0f8fe 	.word	0xffe0f8fe

08002ea4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002ed0:	e01a      	b.n	8002f08 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed8:	d016      	beq.n	8002f08 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eda:	f7fe fef7 	bl	8001ccc <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d302      	bcc.n	8002ef0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10b      	bne.n	8002f08 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2204      	movs	r2, #4
 8002ef4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efc:	f043 0201 	orr.w	r2, r3, #1
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e00e      	b.n	8002f26 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	bf14      	ite	ne
 8002f16:	2301      	movne	r3, #1
 8002f18:	2300      	moveq	r3, #0
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d1d6      	bne.n	8002ed2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e3ca      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f42:	4b97      	ldr	r3, [pc, #604]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f4c:	4b94      	ldr	r3, [pc, #592]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 80e4 	beq.w	800312c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d007      	beq.n	8002f7a <HAL_RCC_OscConfig+0x4a>
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b0c      	cmp	r3, #12
 8002f6e:	f040 808b 	bne.w	8003088 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	f040 8087 	bne.w	8003088 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f7a:	4b89      	ldr	r3, [pc, #548]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <HAL_RCC_OscConfig+0x62>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e3a2      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1a      	ldr	r2, [r3, #32]
 8002f96:	4b82      	ldr	r3, [pc, #520]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d004      	beq.n	8002fac <HAL_RCC_OscConfig+0x7c>
 8002fa2:	4b7f      	ldr	r3, [pc, #508]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002faa:	e005      	b.n	8002fb8 <HAL_RCC_OscConfig+0x88>
 8002fac:	4b7c      	ldr	r3, [pc, #496]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb2:	091b      	lsrs	r3, r3, #4
 8002fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d223      	bcs.n	8003004 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 fd87 	bl	8003ad4 <RCC_SetFlashLatencyFromMSIRange>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e383      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fd0:	4b73      	ldr	r3, [pc, #460]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a72      	ldr	r2, [pc, #456]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002fd6:	f043 0308 	orr.w	r3, r3, #8
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	4b70      	ldr	r3, [pc, #448]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	496d      	ldr	r1, [pc, #436]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fee:	4b6c      	ldr	r3, [pc, #432]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	021b      	lsls	r3, r3, #8
 8002ffc:	4968      	ldr	r1, [pc, #416]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	604b      	str	r3, [r1, #4]
 8003002:	e025      	b.n	8003050 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003004:	4b66      	ldr	r3, [pc, #408]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a65      	ldr	r2, [pc, #404]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 800300a:	f043 0308 	orr.w	r3, r3, #8
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	4b63      	ldr	r3, [pc, #396]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	4960      	ldr	r1, [pc, #384]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 800301e:	4313      	orrs	r3, r2
 8003020:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003022:	4b5f      	ldr	r3, [pc, #380]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	021b      	lsls	r3, r3, #8
 8003030:	495b      	ldr	r1, [pc, #364]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003032:	4313      	orrs	r3, r2
 8003034:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d109      	bne.n	8003050 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	4618      	mov	r0, r3
 8003042:	f000 fd47 	bl	8003ad4 <RCC_SetFlashLatencyFromMSIRange>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e343      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003050:	f000 fc4a 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 8003054:	4602      	mov	r2, r0
 8003056:	4b52      	ldr	r3, [pc, #328]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	091b      	lsrs	r3, r3, #4
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	4950      	ldr	r1, [pc, #320]	; (80031a4 <HAL_RCC_OscConfig+0x274>)
 8003062:	5ccb      	ldrb	r3, [r1, r3]
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
 800306c:	4a4e      	ldr	r2, [pc, #312]	; (80031a8 <HAL_RCC_OscConfig+0x278>)
 800306e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003070:	4b4e      	ldr	r3, [pc, #312]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7fe fa97 	bl	80015a8 <HAL_InitTick>
 800307a:	4603      	mov	r3, r0
 800307c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d052      	beq.n	800312a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003084:	7bfb      	ldrb	r3, [r7, #15]
 8003086:	e327      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d032      	beq.n	80030f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003090:	4b43      	ldr	r3, [pc, #268]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a42      	ldr	r2, [pc, #264]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800309c:	f7fe fe16 	bl	8001ccc <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030a4:	f7fe fe12 	bl	8001ccc <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e310      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030b6:	4b3a      	ldr	r3, [pc, #232]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030c2:	4b37      	ldr	r3, [pc, #220]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a36      	ldr	r2, [pc, #216]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 80030c8:	f043 0308 	orr.w	r3, r3, #8
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	4b34      	ldr	r3, [pc, #208]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	4931      	ldr	r1, [pc, #196]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030e0:	4b2f      	ldr	r3, [pc, #188]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	021b      	lsls	r3, r3, #8
 80030ee:	492c      	ldr	r1, [pc, #176]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	604b      	str	r3, [r1, #4]
 80030f4:	e01a      	b.n	800312c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030f6:	4b2a      	ldr	r3, [pc, #168]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a29      	ldr	r2, [pc, #164]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 80030fc:	f023 0301 	bic.w	r3, r3, #1
 8003100:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003102:	f7fe fde3 	bl	8001ccc <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800310a:	f7fe fddf 	bl	8001ccc <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e2dd      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800311c:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f0      	bne.n	800310a <HAL_RCC_OscConfig+0x1da>
 8003128:	e000      	b.n	800312c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800312a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d074      	beq.n	8003222 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	2b08      	cmp	r3, #8
 800313c:	d005      	beq.n	800314a <HAL_RCC_OscConfig+0x21a>
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	2b0c      	cmp	r3, #12
 8003142:	d10e      	bne.n	8003162 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	2b03      	cmp	r3, #3
 8003148:	d10b      	bne.n	8003162 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314a:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d064      	beq.n	8003220 <HAL_RCC_OscConfig+0x2f0>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d160      	bne.n	8003220 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e2ba      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316a:	d106      	bne.n	800317a <HAL_RCC_OscConfig+0x24a>
 800316c:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a0b      	ldr	r2, [pc, #44]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	e026      	b.n	80031c8 <HAL_RCC_OscConfig+0x298>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003182:	d115      	bne.n	80031b0 <HAL_RCC_OscConfig+0x280>
 8003184:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a05      	ldr	r2, [pc, #20]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 800318a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	4b03      	ldr	r3, [pc, #12]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a02      	ldr	r2, [pc, #8]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	e014      	b.n	80031c8 <HAL_RCC_OscConfig+0x298>
 800319e:	bf00      	nop
 80031a0:	40021000 	.word	0x40021000
 80031a4:	0800e3a8 	.word	0x0800e3a8
 80031a8:	20000000 	.word	0x20000000
 80031ac:	20000004 	.word	0x20000004
 80031b0:	4ba0      	ldr	r3, [pc, #640]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a9f      	ldr	r2, [pc, #636]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 80031b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	4b9d      	ldr	r3, [pc, #628]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a9c      	ldr	r2, [pc, #624]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 80031c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d013      	beq.n	80031f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fe fd7c 	bl	8001ccc <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d8:	f7fe fd78 	bl	8001ccc <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b64      	cmp	r3, #100	; 0x64
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e276      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ea:	4b92      	ldr	r3, [pc, #584]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0f0      	beq.n	80031d8 <HAL_RCC_OscConfig+0x2a8>
 80031f6:	e014      	b.n	8003222 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7fe fd68 	bl	8001ccc <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003200:	f7fe fd64 	bl	8001ccc <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b64      	cmp	r3, #100	; 0x64
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e262      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003212:	4b88      	ldr	r3, [pc, #544]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f0      	bne.n	8003200 <HAL_RCC_OscConfig+0x2d0>
 800321e:	e000      	b.n	8003222 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d060      	beq.n	80032f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	2b04      	cmp	r3, #4
 8003232:	d005      	beq.n	8003240 <HAL_RCC_OscConfig+0x310>
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	2b0c      	cmp	r3, #12
 8003238:	d119      	bne.n	800326e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2b02      	cmp	r3, #2
 800323e:	d116      	bne.n	800326e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003240:	4b7c      	ldr	r3, [pc, #496]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_OscConfig+0x328>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e23f      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003258:	4b76      	ldr	r3, [pc, #472]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	061b      	lsls	r3, r3, #24
 8003266:	4973      	ldr	r1, [pc, #460]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 8003268:	4313      	orrs	r3, r2
 800326a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800326c:	e040      	b.n	80032f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d023      	beq.n	80032be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003276:	4b6f      	ldr	r3, [pc, #444]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a6e      	ldr	r2, [pc, #440]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 800327c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003282:	f7fe fd23 	bl	8001ccc <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800328a:	f7fe fd1f 	bl	8001ccc <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e21d      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800329c:	4b65      	ldr	r3, [pc, #404]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a8:	4b62      	ldr	r3, [pc, #392]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	061b      	lsls	r3, r3, #24
 80032b6:	495f      	ldr	r1, [pc, #380]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	604b      	str	r3, [r1, #4]
 80032bc:	e018      	b.n	80032f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032be:	4b5d      	ldr	r3, [pc, #372]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a5c      	ldr	r2, [pc, #368]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 80032c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ca:	f7fe fcff 	bl	8001ccc <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d2:	f7fe fcfb 	bl	8001ccc <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e1f9      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032e4:	4b53      	ldr	r3, [pc, #332]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1f0      	bne.n	80032d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d03c      	beq.n	8003376 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d01c      	beq.n	800333e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003304:	4b4b      	ldr	r3, [pc, #300]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 8003306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800330a:	4a4a      	ldr	r2, [pc, #296]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003314:	f7fe fcda 	bl	8001ccc <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800331c:	f7fe fcd6 	bl	8001ccc <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e1d4      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800332e:	4b41      	ldr	r3, [pc, #260]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 8003330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0ef      	beq.n	800331c <HAL_RCC_OscConfig+0x3ec>
 800333c:	e01b      	b.n	8003376 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800333e:	4b3d      	ldr	r3, [pc, #244]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 8003340:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003344:	4a3b      	ldr	r2, [pc, #236]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 8003346:	f023 0301 	bic.w	r3, r3, #1
 800334a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334e:	f7fe fcbd 	bl	8001ccc <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003356:	f7fe fcb9 	bl	8001ccc <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e1b7      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003368:	4b32      	ldr	r3, [pc, #200]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 800336a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1ef      	bne.n	8003356 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 80a6 	beq.w	80034d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003384:	2300      	movs	r3, #0
 8003386:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003388:	4b2a      	ldr	r3, [pc, #168]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 800338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10d      	bne.n	80033b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003394:	4b27      	ldr	r3, [pc, #156]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 8003396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003398:	4a26      	ldr	r2, [pc, #152]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 800339a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800339e:	6593      	str	r3, [r2, #88]	; 0x58
 80033a0:	4b24      	ldr	r3, [pc, #144]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 80033a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ac:	2301      	movs	r3, #1
 80033ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033b0:	4b21      	ldr	r3, [pc, #132]	; (8003438 <HAL_RCC_OscConfig+0x508>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d118      	bne.n	80033ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033bc:	4b1e      	ldr	r3, [pc, #120]	; (8003438 <HAL_RCC_OscConfig+0x508>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a1d      	ldr	r2, [pc, #116]	; (8003438 <HAL_RCC_OscConfig+0x508>)
 80033c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033c8:	f7fe fc80 	bl	8001ccc <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d0:	f7fe fc7c 	bl	8001ccc <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e17a      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033e2:	4b15      	ldr	r3, [pc, #84]	; (8003438 <HAL_RCC_OscConfig+0x508>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d108      	bne.n	8003408 <HAL_RCC_OscConfig+0x4d8>
 80033f6:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 80033f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fc:	4a0d      	ldr	r2, [pc, #52]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 80033fe:	f043 0301 	orr.w	r3, r3, #1
 8003402:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003406:	e029      	b.n	800345c <HAL_RCC_OscConfig+0x52c>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2b05      	cmp	r3, #5
 800340e:	d115      	bne.n	800343c <HAL_RCC_OscConfig+0x50c>
 8003410:	4b08      	ldr	r3, [pc, #32]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003416:	4a07      	ldr	r2, [pc, #28]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 8003418:	f043 0304 	orr.w	r3, r3, #4
 800341c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003420:	4b04      	ldr	r3, [pc, #16]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003426:	4a03      	ldr	r2, [pc, #12]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 8003428:	f043 0301 	orr.w	r3, r3, #1
 800342c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003430:	e014      	b.n	800345c <HAL_RCC_OscConfig+0x52c>
 8003432:	bf00      	nop
 8003434:	40021000 	.word	0x40021000
 8003438:	40007000 	.word	0x40007000
 800343c:	4b9c      	ldr	r3, [pc, #624]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003442:	4a9b      	ldr	r2, [pc, #620]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 8003444:	f023 0301 	bic.w	r3, r3, #1
 8003448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800344c:	4b98      	ldr	r3, [pc, #608]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003452:	4a97      	ldr	r2, [pc, #604]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 8003454:	f023 0304 	bic.w	r3, r3, #4
 8003458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d016      	beq.n	8003492 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003464:	f7fe fc32 	bl	8001ccc <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800346a:	e00a      	b.n	8003482 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346c:	f7fe fc2e 	bl	8001ccc <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	; 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e12a      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003482:	4b8b      	ldr	r3, [pc, #556]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 8003484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0ed      	beq.n	800346c <HAL_RCC_OscConfig+0x53c>
 8003490:	e015      	b.n	80034be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003492:	f7fe fc1b 	bl	8001ccc <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003498:	e00a      	b.n	80034b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349a:	f7fe fc17 	bl	8001ccc <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e113      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034b0:	4b7f      	ldr	r3, [pc, #508]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1ed      	bne.n	800349a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034be:	7ffb      	ldrb	r3, [r7, #31]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d105      	bne.n	80034d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c4:	4b7a      	ldr	r3, [pc, #488]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 80034c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c8:	4a79      	ldr	r2, [pc, #484]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 80034ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80fe 	beq.w	80036d6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	2b02      	cmp	r3, #2
 80034e0:	f040 80d0 	bne.w	8003684 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034e4:	4b72      	ldr	r3, [pc, #456]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f003 0203 	and.w	r2, r3, #3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d130      	bne.n	800355a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	3b01      	subs	r3, #1
 8003504:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003506:	429a      	cmp	r2, r3
 8003508:	d127      	bne.n	800355a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003514:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003516:	429a      	cmp	r2, r3
 8003518:	d11f      	bne.n	800355a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003524:	2a07      	cmp	r2, #7
 8003526:	bf14      	ite	ne
 8003528:	2201      	movne	r2, #1
 800352a:	2200      	moveq	r2, #0
 800352c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800352e:	4293      	cmp	r3, r2
 8003530:	d113      	bne.n	800355a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353c:	085b      	lsrs	r3, r3, #1
 800353e:	3b01      	subs	r3, #1
 8003540:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003542:	429a      	cmp	r2, r3
 8003544:	d109      	bne.n	800355a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	085b      	lsrs	r3, r3, #1
 8003552:	3b01      	subs	r3, #1
 8003554:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003556:	429a      	cmp	r2, r3
 8003558:	d06e      	beq.n	8003638 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	2b0c      	cmp	r3, #12
 800355e:	d069      	beq.n	8003634 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003560:	4b53      	ldr	r3, [pc, #332]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d105      	bne.n	8003578 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800356c:	4b50      	ldr	r3, [pc, #320]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0ad      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800357c:	4b4c      	ldr	r3, [pc, #304]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a4b      	ldr	r2, [pc, #300]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 8003582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003586:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003588:	f7fe fba0 	bl	8001ccc <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003590:	f7fe fb9c 	bl	8001ccc <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e09a      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035a2:	4b43      	ldr	r3, [pc, #268]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ae:	4b40      	ldr	r3, [pc, #256]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	4b40      	ldr	r3, [pc, #256]	; (80036b4 <HAL_RCC_OscConfig+0x784>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035be:	3a01      	subs	r2, #1
 80035c0:	0112      	lsls	r2, r2, #4
 80035c2:	4311      	orrs	r1, r2
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035c8:	0212      	lsls	r2, r2, #8
 80035ca:	4311      	orrs	r1, r2
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035d0:	0852      	lsrs	r2, r2, #1
 80035d2:	3a01      	subs	r2, #1
 80035d4:	0552      	lsls	r2, r2, #21
 80035d6:	4311      	orrs	r1, r2
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035dc:	0852      	lsrs	r2, r2, #1
 80035de:	3a01      	subs	r2, #1
 80035e0:	0652      	lsls	r2, r2, #25
 80035e2:	4311      	orrs	r1, r2
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035e8:	0912      	lsrs	r2, r2, #4
 80035ea:	0452      	lsls	r2, r2, #17
 80035ec:	430a      	orrs	r2, r1
 80035ee:	4930      	ldr	r1, [pc, #192]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035f4:	4b2e      	ldr	r3, [pc, #184]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a2d      	ldr	r2, [pc, #180]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 80035fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003600:	4b2b      	ldr	r3, [pc, #172]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	4a2a      	ldr	r2, [pc, #168]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 8003606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800360a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800360c:	f7fe fb5e 	bl	8001ccc <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003614:	f7fe fb5a 	bl	8001ccc <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e058      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003626:	4b22      	ldr	r3, [pc, #136]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003632:	e050      	b.n	80036d6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e04f      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003638:	4b1d      	ldr	r3, [pc, #116]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d148      	bne.n	80036d6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003644:	4b1a      	ldr	r3, [pc, #104]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a19      	ldr	r2, [pc, #100]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 800364a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800364e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003650:	4b17      	ldr	r3, [pc, #92]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4a16      	ldr	r2, [pc, #88]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 8003656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800365a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800365c:	f7fe fb36 	bl	8001ccc <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003664:	f7fe fb32 	bl	8001ccc <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e030      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003676:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f0      	beq.n	8003664 <HAL_RCC_OscConfig+0x734>
 8003682:	e028      	b.n	80036d6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	2b0c      	cmp	r3, #12
 8003688:	d023      	beq.n	80036d2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368a:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a08      	ldr	r2, [pc, #32]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 8003690:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003696:	f7fe fb19 	bl	8001ccc <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800369c:	e00c      	b.n	80036b8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369e:	f7fe fb15 	bl	8001ccc <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d905      	bls.n	80036b8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e013      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
 80036b0:	40021000 	.word	0x40021000
 80036b4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036b8:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <HAL_RCC_OscConfig+0x7b0>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1ec      	bne.n	800369e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036c4:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <HAL_RCC_OscConfig+0x7b0>)
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	4905      	ldr	r1, [pc, #20]	; (80036e0 <HAL_RCC_OscConfig+0x7b0>)
 80036ca:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <HAL_RCC_OscConfig+0x7b4>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	60cb      	str	r3, [r1, #12]
 80036d0:	e001      	b.n	80036d6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3720      	adds	r7, #32
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40021000 	.word	0x40021000
 80036e4:	feeefffc 	.word	0xfeeefffc

080036e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0e7      	b.n	80038cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036fc:	4b75      	ldr	r3, [pc, #468]	; (80038d4 <HAL_RCC_ClockConfig+0x1ec>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d910      	bls.n	800372c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370a:	4b72      	ldr	r3, [pc, #456]	; (80038d4 <HAL_RCC_ClockConfig+0x1ec>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f023 0207 	bic.w	r2, r3, #7
 8003712:	4970      	ldr	r1, [pc, #448]	; (80038d4 <HAL_RCC_ClockConfig+0x1ec>)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	4313      	orrs	r3, r2
 8003718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800371a:	4b6e      	ldr	r3, [pc, #440]	; (80038d4 <HAL_RCC_ClockConfig+0x1ec>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d001      	beq.n	800372c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0cf      	b.n	80038cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d010      	beq.n	800375a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	4b66      	ldr	r3, [pc, #408]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003744:	429a      	cmp	r2, r3
 8003746:	d908      	bls.n	800375a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003748:	4b63      	ldr	r3, [pc, #396]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	4960      	ldr	r1, [pc, #384]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003756:	4313      	orrs	r3, r2
 8003758:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d04c      	beq.n	8003800 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b03      	cmp	r3, #3
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800376e:	4b5a      	ldr	r3, [pc, #360]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d121      	bne.n	80037be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e0a6      	b.n	80038cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d107      	bne.n	8003796 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003786:	4b54      	ldr	r3, [pc, #336]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d115      	bne.n	80037be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e09a      	b.n	80038cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d107      	bne.n	80037ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800379e:	4b4e      	ldr	r3, [pc, #312]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d109      	bne.n	80037be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e08e      	b.n	80038cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037ae:	4b4a      	ldr	r3, [pc, #296]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e086      	b.n	80038cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037be:	4b46      	ldr	r3, [pc, #280]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f023 0203 	bic.w	r2, r3, #3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	4943      	ldr	r1, [pc, #268]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d0:	f7fe fa7c 	bl	8001ccc <HAL_GetTick>
 80037d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d6:	e00a      	b.n	80037ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d8:	f7fe fa78 	bl	8001ccc <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e06e      	b.n	80038cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ee:	4b3a      	ldr	r3, [pc, #232]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 020c 	and.w	r2, r3, #12
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d1eb      	bne.n	80037d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d010      	beq.n	800382e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	4b31      	ldr	r3, [pc, #196]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003818:	429a      	cmp	r2, r3
 800381a:	d208      	bcs.n	800382e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800381c:	4b2e      	ldr	r3, [pc, #184]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	492b      	ldr	r1, [pc, #172]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 800382a:	4313      	orrs	r3, r2
 800382c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800382e:	4b29      	ldr	r3, [pc, #164]	; (80038d4 <HAL_RCC_ClockConfig+0x1ec>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d210      	bcs.n	800385e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383c:	4b25      	ldr	r3, [pc, #148]	; (80038d4 <HAL_RCC_ClockConfig+0x1ec>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f023 0207 	bic.w	r2, r3, #7
 8003844:	4923      	ldr	r1, [pc, #140]	; (80038d4 <HAL_RCC_ClockConfig+0x1ec>)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	4313      	orrs	r3, r2
 800384a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800384c:	4b21      	ldr	r3, [pc, #132]	; (80038d4 <HAL_RCC_ClockConfig+0x1ec>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d001      	beq.n	800385e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e036      	b.n	80038cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	2b00      	cmp	r3, #0
 8003868:	d008      	beq.n	800387c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800386a:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	4918      	ldr	r1, [pc, #96]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003878:	4313      	orrs	r3, r2
 800387a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d009      	beq.n	800389c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003888:	4b13      	ldr	r3, [pc, #76]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	4910      	ldr	r1, [pc, #64]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003898:	4313      	orrs	r3, r2
 800389a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800389c:	f000 f824 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 80038a0:	4602      	mov	r2, r0
 80038a2:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	091b      	lsrs	r3, r3, #4
 80038a8:	f003 030f 	and.w	r3, r3, #15
 80038ac:	490b      	ldr	r1, [pc, #44]	; (80038dc <HAL_RCC_ClockConfig+0x1f4>)
 80038ae:	5ccb      	ldrb	r3, [r1, r3]
 80038b0:	f003 031f 	and.w	r3, r3, #31
 80038b4:	fa22 f303 	lsr.w	r3, r2, r3
 80038b8:	4a09      	ldr	r2, [pc, #36]	; (80038e0 <HAL_RCC_ClockConfig+0x1f8>)
 80038ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038bc:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <HAL_RCC_ClockConfig+0x1fc>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fd fe71 	bl	80015a8 <HAL_InitTick>
 80038c6:	4603      	mov	r3, r0
 80038c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80038ca:	7afb      	ldrb	r3, [r7, #11]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40022000 	.word	0x40022000
 80038d8:	40021000 	.word	0x40021000
 80038dc:	0800e3a8 	.word	0x0800e3a8
 80038e0:	20000000 	.word	0x20000000
 80038e4:	20000004 	.word	0x20000004

080038e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b089      	sub	sp, #36	; 0x24
 80038ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	2300      	movs	r3, #0
 80038f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038f6:	4b3e      	ldr	r3, [pc, #248]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
 80038fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003900:	4b3b      	ldr	r3, [pc, #236]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RCC_GetSysClockFreq+0x34>
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	2b0c      	cmp	r3, #12
 8003914:	d121      	bne.n	800395a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d11e      	bne.n	800395a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800391c:	4b34      	ldr	r3, [pc, #208]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d107      	bne.n	8003938 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003928:	4b31      	ldr	r3, [pc, #196]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800392a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800392e:	0a1b      	lsrs	r3, r3, #8
 8003930:	f003 030f 	and.w	r3, r3, #15
 8003934:	61fb      	str	r3, [r7, #28]
 8003936:	e005      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003938:	4b2d      	ldr	r3, [pc, #180]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003944:	4a2b      	ldr	r2, [pc, #172]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10d      	bne.n	8003970 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003958:	e00a      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b04      	cmp	r3, #4
 800395e:	d102      	bne.n	8003966 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003960:	4b25      	ldr	r3, [pc, #148]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003962:	61bb      	str	r3, [r7, #24]
 8003964:	e004      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2b08      	cmp	r3, #8
 800396a:	d101      	bne.n	8003970 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800396c:	4b23      	ldr	r3, [pc, #140]	; (80039fc <HAL_RCC_GetSysClockFreq+0x114>)
 800396e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	2b0c      	cmp	r3, #12
 8003974:	d134      	bne.n	80039e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003976:	4b1e      	ldr	r3, [pc, #120]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d003      	beq.n	800398e <HAL_RCC_GetSysClockFreq+0xa6>
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2b03      	cmp	r3, #3
 800398a:	d003      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0xac>
 800398c:	e005      	b.n	800399a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800398e:	4b1a      	ldr	r3, [pc, #104]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003990:	617b      	str	r3, [r7, #20]
      break;
 8003992:	e005      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003994:	4b19      	ldr	r3, [pc, #100]	; (80039fc <HAL_RCC_GetSysClockFreq+0x114>)
 8003996:	617b      	str	r3, [r7, #20]
      break;
 8003998:	e002      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	617b      	str	r3, [r7, #20]
      break;
 800399e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039a0:	4b13      	ldr	r3, [pc, #76]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	3301      	adds	r3, #1
 80039ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039ae:	4b10      	ldr	r3, [pc, #64]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	0a1b      	lsrs	r3, r3, #8
 80039b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	fb03 f202 	mul.w	r2, r3, r2
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039c6:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	0e5b      	lsrs	r3, r3, #25
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	3301      	adds	r3, #1
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	fbb2 f3f3 	udiv	r3, r2, r3
 80039de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039e0:	69bb      	ldr	r3, [r7, #24]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3724      	adds	r7, #36	; 0x24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40021000 	.word	0x40021000
 80039f4:	0800e3c0 	.word	0x0800e3c0
 80039f8:	00f42400 	.word	0x00f42400
 80039fc:	007a1200 	.word	0x007a1200

08003a00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a04:	4b03      	ldr	r3, [pc, #12]	; (8003a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a06:	681b      	ldr	r3, [r3, #0]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	20000000 	.word	0x20000000

08003a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a1c:	f7ff fff0 	bl	8003a00 <HAL_RCC_GetHCLKFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	4904      	ldr	r1, [pc, #16]	; (8003a40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	0800e3b8 	.word	0x0800e3b8

08003a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a48:	f7ff ffda 	bl	8003a00 <HAL_RCC_GetHCLKFreq>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	0adb      	lsrs	r3, r3, #11
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	4904      	ldr	r1, [pc, #16]	; (8003a6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a5a:	5ccb      	ldrb	r3, [r1, r3]
 8003a5c:	f003 031f 	and.w	r3, r3, #31
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	0800e3b8 	.word	0x0800e3b8

08003a70 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	220f      	movs	r2, #15
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003a80:	4b12      	ldr	r3, [pc, #72]	; (8003acc <HAL_RCC_GetClockConfig+0x5c>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 0203 	and.w	r2, r3, #3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <HAL_RCC_GetClockConfig+0x5c>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003a98:	4b0c      	ldr	r3, [pc, #48]	; (8003acc <HAL_RCC_GetClockConfig+0x5c>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003aa4:	4b09      	ldr	r3, [pc, #36]	; (8003acc <HAL_RCC_GetClockConfig+0x5c>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	08db      	lsrs	r3, r3, #3
 8003aaa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003ab2:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <HAL_RCC_GetClockConfig+0x60>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0207 	and.w	r2, r3, #7
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	601a      	str	r2, [r3, #0]
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	40022000 	.word	0x40022000

08003ad4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003adc:	2300      	movs	r3, #0
 8003ade:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ae0:	4b2a      	ldr	r3, [pc, #168]	; (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003aec:	f7ff f8f0 	bl	8002cd0 <HAL_PWREx_GetVoltageRange>
 8003af0:	6178      	str	r0, [r7, #20]
 8003af2:	e014      	b.n	8003b1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003af4:	4b25      	ldr	r3, [pc, #148]	; (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af8:	4a24      	ldr	r2, [pc, #144]	; (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003afe:	6593      	str	r3, [r2, #88]	; 0x58
 8003b00:	4b22      	ldr	r3, [pc, #136]	; (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b0c:	f7ff f8e0 	bl	8002cd0 <HAL_PWREx_GetVoltageRange>
 8003b10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b12:	4b1e      	ldr	r3, [pc, #120]	; (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b16:	4a1d      	ldr	r2, [pc, #116]	; (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b24:	d10b      	bne.n	8003b3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b80      	cmp	r3, #128	; 0x80
 8003b2a:	d919      	bls.n	8003b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2ba0      	cmp	r3, #160	; 0xa0
 8003b30:	d902      	bls.n	8003b38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b32:	2302      	movs	r3, #2
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	e013      	b.n	8003b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b38:	2301      	movs	r3, #1
 8003b3a:	613b      	str	r3, [r7, #16]
 8003b3c:	e010      	b.n	8003b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b80      	cmp	r3, #128	; 0x80
 8003b42:	d902      	bls.n	8003b4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b44:	2303      	movs	r3, #3
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	e00a      	b.n	8003b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b80      	cmp	r3, #128	; 0x80
 8003b4e:	d102      	bne.n	8003b56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b50:	2302      	movs	r3, #2
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	e004      	b.n	8003b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b70      	cmp	r3, #112	; 0x70
 8003b5a:	d101      	bne.n	8003b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f023 0207 	bic.w	r2, r3, #7
 8003b68:	4909      	ldr	r1, [pc, #36]	; (8003b90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b70:	4b07      	ldr	r3, [pc, #28]	; (8003b90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d001      	beq.n	8003b82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	40022000 	.word	0x40022000

08003b94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d041      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bb4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bb8:	d02a      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003bba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bbe:	d824      	bhi.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bc4:	d008      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003bc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bca:	d81e      	bhi.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003bd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd4:	d010      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bd6:	e018      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bd8:	4b86      	ldr	r3, [pc, #536]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4a85      	ldr	r2, [pc, #532]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003be4:	e015      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	3304      	adds	r3, #4
 8003bea:	2100      	movs	r1, #0
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 facb 	bl	8004188 <RCCEx_PLLSAI1_Config>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bf6:	e00c      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3320      	adds	r3, #32
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fbb6 	bl	8004370 <RCCEx_PLLSAI2_Config>
 8003c04:	4603      	mov	r3, r0
 8003c06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c08:	e003      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	74fb      	strb	r3, [r7, #19]
      break;
 8003c0e:	e000      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c12:	7cfb      	ldrb	r3, [r7, #19]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10b      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c18:	4b76      	ldr	r3, [pc, #472]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c26:	4973      	ldr	r1, [pc, #460]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c2e:	e001      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c30:	7cfb      	ldrb	r3, [r7, #19]
 8003c32:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d041      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c48:	d02a      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c4e:	d824      	bhi.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c54:	d008      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c5a:	d81e      	bhi.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c64:	d010      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c66:	e018      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c68:	4b62      	ldr	r3, [pc, #392]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4a61      	ldr	r2, [pc, #388]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c72:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c74:	e015      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 fa83 	bl	8004188 <RCCEx_PLLSAI1_Config>
 8003c82:	4603      	mov	r3, r0
 8003c84:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c86:	e00c      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3320      	adds	r3, #32
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fb6e 	bl	8004370 <RCCEx_PLLSAI2_Config>
 8003c94:	4603      	mov	r3, r0
 8003c96:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c98:	e003      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	74fb      	strb	r3, [r7, #19]
      break;
 8003c9e:	e000      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003ca0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ca2:	7cfb      	ldrb	r3, [r7, #19]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10b      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ca8:	4b52      	ldr	r3, [pc, #328]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cb6:	494f      	ldr	r1, [pc, #316]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cbe:	e001      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc0:	7cfb      	ldrb	r3, [r7, #19]
 8003cc2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 80a0 	beq.w	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cd6:	4b47      	ldr	r3, [pc, #284]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00d      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cec:	4b41      	ldr	r3, [pc, #260]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf0:	4a40      	ldr	r2, [pc, #256]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8003cf8:	4b3e      	ldr	r3, [pc, #248]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d04:	2301      	movs	r3, #1
 8003d06:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d08:	4b3b      	ldr	r3, [pc, #236]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a3a      	ldr	r2, [pc, #232]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d14:	f7fd ffda 	bl	8001ccc <HAL_GetTick>
 8003d18:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d1a:	e009      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d1c:	f7fd ffd6 	bl	8001ccc <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d902      	bls.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	74fb      	strb	r3, [r7, #19]
        break;
 8003d2e:	e005      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d30:	4b31      	ldr	r3, [pc, #196]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0ef      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d3c:	7cfb      	ldrb	r3, [r7, #19]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d15c      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d42:	4b2c      	ldr	r3, [pc, #176]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d01f      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d019      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d60:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d6a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d6c:	4b21      	ldr	r3, [pc, #132]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d72:	4a20      	ldr	r2, [pc, #128]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d7c:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d82:	4a1c      	ldr	r2, [pc, #112]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d8c:	4a19      	ldr	r2, [pc, #100]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d016      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9e:	f7fd ff95 	bl	8001ccc <HAL_GetTick>
 8003da2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003da4:	e00b      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da6:	f7fd ff91 	bl	8001ccc <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d902      	bls.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	74fb      	strb	r3, [r7, #19]
            break;
 8003dbc:	e006      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0ec      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003dcc:	7cfb      	ldrb	r3, [r7, #19]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10c      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dd2:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de2:	4904      	ldr	r1, [pc, #16]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003dea:	e009      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dec:	7cfb      	ldrb	r3, [r7, #19]
 8003dee:	74bb      	strb	r3, [r7, #18]
 8003df0:	e006      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003df2:	bf00      	nop
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfc:	7cfb      	ldrb	r3, [r7, #19]
 8003dfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e00:	7c7b      	ldrb	r3, [r7, #17]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d105      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e06:	4b9e      	ldr	r3, [pc, #632]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0a:	4a9d      	ldr	r2, [pc, #628]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e1e:	4b98      	ldr	r3, [pc, #608]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e24:	f023 0203 	bic.w	r2, r3, #3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	4994      	ldr	r1, [pc, #592]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e40:	4b8f      	ldr	r3, [pc, #572]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e46:	f023 020c 	bic.w	r2, r3, #12
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4e:	498c      	ldr	r1, [pc, #560]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e62:	4b87      	ldr	r3, [pc, #540]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	4983      	ldr	r1, [pc, #524]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0308 	and.w	r3, r3, #8
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00a      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e84:	4b7e      	ldr	r3, [pc, #504]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e92:	497b      	ldr	r1, [pc, #492]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0310 	and.w	r3, r3, #16
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ea6:	4b76      	ldr	r3, [pc, #472]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb4:	4972      	ldr	r1, [pc, #456]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ec8:	4b6d      	ldr	r3, [pc, #436]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ece:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed6:	496a      	ldr	r1, [pc, #424]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eea:	4b65      	ldr	r3, [pc, #404]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef8:	4961      	ldr	r1, [pc, #388]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f0c:	4b5c      	ldr	r3, [pc, #368]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f1a:	4959      	ldr	r1, [pc, #356]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f2e:	4b54      	ldr	r3, [pc, #336]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3c:	4950      	ldr	r1, [pc, #320]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f50:	4b4b      	ldr	r3, [pc, #300]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5e:	4948      	ldr	r1, [pc, #288]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f72:	4b43      	ldr	r3, [pc, #268]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f80:	493f      	ldr	r1, [pc, #252]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d028      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f94:	4b3a      	ldr	r3, [pc, #232]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fa2:	4937      	ldr	r1, [pc, #220]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fb2:	d106      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fb4:	4b32      	ldr	r3, [pc, #200]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	4a31      	ldr	r2, [pc, #196]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fbe:	60d3      	str	r3, [r2, #12]
 8003fc0:	e011      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fca:	d10c      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 f8d8 	bl	8004188 <RCCEx_PLLSAI1_Config>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fdc:	7cfb      	ldrb	r3, [r7, #19]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003fe2:	7cfb      	ldrb	r3, [r7, #19]
 8003fe4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d028      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ff2:	4b23      	ldr	r3, [pc, #140]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004000:	491f      	ldr	r1, [pc, #124]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004010:	d106      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004012:	4b1b      	ldr	r3, [pc, #108]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	4a1a      	ldr	r2, [pc, #104]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004018:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800401c:	60d3      	str	r3, [r2, #12]
 800401e:	e011      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004024:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004028:	d10c      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3304      	adds	r3, #4
 800402e:	2101      	movs	r1, #1
 8004030:	4618      	mov	r0, r3
 8004032:	f000 f8a9 	bl	8004188 <RCCEx_PLLSAI1_Config>
 8004036:	4603      	mov	r3, r0
 8004038:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800403a:	7cfb      	ldrb	r3, [r7, #19]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004040:	7cfb      	ldrb	r3, [r7, #19]
 8004042:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d02b      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004050:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004056:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800405e:	4908      	ldr	r1, [pc, #32]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800406a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800406e:	d109      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004070:	4b03      	ldr	r3, [pc, #12]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	4a02      	ldr	r2, [pc, #8]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004076:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800407a:	60d3      	str	r3, [r2, #12]
 800407c:	e014      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800407e:	bf00      	nop
 8004080:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004088:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800408c:	d10c      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	3304      	adds	r3, #4
 8004092:	2101      	movs	r1, #1
 8004094:	4618      	mov	r0, r3
 8004096:	f000 f877 	bl	8004188 <RCCEx_PLLSAI1_Config>
 800409a:	4603      	mov	r3, r0
 800409c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800409e:	7cfb      	ldrb	r3, [r7, #19]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80040a4:	7cfb      	ldrb	r3, [r7, #19]
 80040a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d02f      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040b4:	4b2b      	ldr	r3, [pc, #172]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040c2:	4928      	ldr	r1, [pc, #160]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040d2:	d10d      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3304      	adds	r3, #4
 80040d8:	2102      	movs	r1, #2
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 f854 	bl	8004188 <RCCEx_PLLSAI1_Config>
 80040e0:	4603      	mov	r3, r0
 80040e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040e4:	7cfb      	ldrb	r3, [r7, #19]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d014      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040ea:	7cfb      	ldrb	r3, [r7, #19]
 80040ec:	74bb      	strb	r3, [r7, #18]
 80040ee:	e011      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040f8:	d10c      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3320      	adds	r3, #32
 80040fe:	2102      	movs	r1, #2
 8004100:	4618      	mov	r0, r3
 8004102:	f000 f935 	bl	8004370 <RCCEx_PLLSAI2_Config>
 8004106:	4603      	mov	r3, r0
 8004108:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800410a:	7cfb      	ldrb	r3, [r7, #19]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004110:	7cfb      	ldrb	r3, [r7, #19]
 8004112:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004120:	4b10      	ldr	r3, [pc, #64]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004126:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800412e:	490d      	ldr	r1, [pc, #52]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00b      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004142:	4b08      	ldr	r3, [pc, #32]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004148:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004152:	4904      	ldr	r1, [pc, #16]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004154:	4313      	orrs	r3, r2
 8004156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800415a:	7cbb      	ldrb	r3, [r7, #18]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40021000 	.word	0x40021000

08004168 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800416c:	4b05      	ldr	r3, [pc, #20]	; (8004184 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a04      	ldr	r2, [pc, #16]	; (8004184 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004172:	f043 0304 	orr.w	r3, r3, #4
 8004176:	6013      	str	r3, [r2, #0]
}
 8004178:	bf00      	nop
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40021000 	.word	0x40021000

08004188 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004196:	4b75      	ldr	r3, [pc, #468]	; (800436c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d018      	beq.n	80041d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80041a2:	4b72      	ldr	r3, [pc, #456]	; (800436c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f003 0203 	and.w	r2, r3, #3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d10d      	bne.n	80041ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
       ||
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d009      	beq.n	80041ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80041ba:	4b6c      	ldr	r3, [pc, #432]	; (800436c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	091b      	lsrs	r3, r3, #4
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
       ||
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d047      	beq.n	800425e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	73fb      	strb	r3, [r7, #15]
 80041d2:	e044      	b.n	800425e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d018      	beq.n	800420e <RCCEx_PLLSAI1_Config+0x86>
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d825      	bhi.n	800422c <RCCEx_PLLSAI1_Config+0xa4>
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d002      	beq.n	80041ea <RCCEx_PLLSAI1_Config+0x62>
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d009      	beq.n	80041fc <RCCEx_PLLSAI1_Config+0x74>
 80041e8:	e020      	b.n	800422c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041ea:	4b60      	ldr	r3, [pc, #384]	; (800436c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d11d      	bne.n	8004232 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041fa:	e01a      	b.n	8004232 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041fc:	4b5b      	ldr	r3, [pc, #364]	; (800436c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004204:	2b00      	cmp	r3, #0
 8004206:	d116      	bne.n	8004236 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800420c:	e013      	b.n	8004236 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800420e:	4b57      	ldr	r3, [pc, #348]	; (800436c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10f      	bne.n	800423a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800421a:	4b54      	ldr	r3, [pc, #336]	; (800436c <RCCEx_PLLSAI1_Config+0x1e4>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d109      	bne.n	800423a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800422a:	e006      	b.n	800423a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	73fb      	strb	r3, [r7, #15]
      break;
 8004230:	e004      	b.n	800423c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004232:	bf00      	nop
 8004234:	e002      	b.n	800423c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004236:	bf00      	nop
 8004238:	e000      	b.n	800423c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800423a:	bf00      	nop
    }

    if(status == HAL_OK)
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10d      	bne.n	800425e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004242:	4b4a      	ldr	r3, [pc, #296]	; (800436c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6819      	ldr	r1, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	3b01      	subs	r3, #1
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	430b      	orrs	r3, r1
 8004258:	4944      	ldr	r1, [pc, #272]	; (800436c <RCCEx_PLLSAI1_Config+0x1e4>)
 800425a:	4313      	orrs	r3, r2
 800425c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d17d      	bne.n	8004360 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004264:	4b41      	ldr	r3, [pc, #260]	; (800436c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a40      	ldr	r2, [pc, #256]	; (800436c <RCCEx_PLLSAI1_Config+0x1e4>)
 800426a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800426e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004270:	f7fd fd2c 	bl	8001ccc <HAL_GetTick>
 8004274:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004276:	e009      	b.n	800428c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004278:	f7fd fd28 	bl	8001ccc <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d902      	bls.n	800428c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	73fb      	strb	r3, [r7, #15]
        break;
 800428a:	e005      	b.n	8004298 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800428c:	4b37      	ldr	r3, [pc, #220]	; (800436c <RCCEx_PLLSAI1_Config+0x1e4>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1ef      	bne.n	8004278 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004298:	7bfb      	ldrb	r3, [r7, #15]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d160      	bne.n	8004360 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d111      	bne.n	80042c8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042a4:	4b31      	ldr	r3, [pc, #196]	; (800436c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80042ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6892      	ldr	r2, [r2, #8]
 80042b4:	0211      	lsls	r1, r2, #8
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	68d2      	ldr	r2, [r2, #12]
 80042ba:	0912      	lsrs	r2, r2, #4
 80042bc:	0452      	lsls	r2, r2, #17
 80042be:	430a      	orrs	r2, r1
 80042c0:	492a      	ldr	r1, [pc, #168]	; (800436c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	610b      	str	r3, [r1, #16]
 80042c6:	e027      	b.n	8004318 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d112      	bne.n	80042f4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042ce:	4b27      	ldr	r3, [pc, #156]	; (800436c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80042d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6892      	ldr	r2, [r2, #8]
 80042de:	0211      	lsls	r1, r2, #8
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6912      	ldr	r2, [r2, #16]
 80042e4:	0852      	lsrs	r2, r2, #1
 80042e6:	3a01      	subs	r2, #1
 80042e8:	0552      	lsls	r2, r2, #21
 80042ea:	430a      	orrs	r2, r1
 80042ec:	491f      	ldr	r1, [pc, #124]	; (800436c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	610b      	str	r3, [r1, #16]
 80042f2:	e011      	b.n	8004318 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042f4:	4b1d      	ldr	r3, [pc, #116]	; (800436c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6892      	ldr	r2, [r2, #8]
 8004304:	0211      	lsls	r1, r2, #8
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6952      	ldr	r2, [r2, #20]
 800430a:	0852      	lsrs	r2, r2, #1
 800430c:	3a01      	subs	r2, #1
 800430e:	0652      	lsls	r2, r2, #25
 8004310:	430a      	orrs	r2, r1
 8004312:	4916      	ldr	r1, [pc, #88]	; (800436c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004314:	4313      	orrs	r3, r2
 8004316:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004318:	4b14      	ldr	r3, [pc, #80]	; (800436c <RCCEx_PLLSAI1_Config+0x1e4>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a13      	ldr	r2, [pc, #76]	; (800436c <RCCEx_PLLSAI1_Config+0x1e4>)
 800431e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004322:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004324:	f7fd fcd2 	bl	8001ccc <HAL_GetTick>
 8004328:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800432a:	e009      	b.n	8004340 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800432c:	f7fd fcce 	bl	8001ccc <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d902      	bls.n	8004340 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	73fb      	strb	r3, [r7, #15]
          break;
 800433e:	e005      	b.n	800434c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004340:	4b0a      	ldr	r3, [pc, #40]	; (800436c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0ef      	beq.n	800432c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d106      	bne.n	8004360 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004352:	4b06      	ldr	r3, [pc, #24]	; (800436c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	4904      	ldr	r1, [pc, #16]	; (800436c <RCCEx_PLLSAI1_Config+0x1e4>)
 800435c:	4313      	orrs	r3, r2
 800435e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004360:	7bfb      	ldrb	r3, [r7, #15]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40021000 	.word	0x40021000

08004370 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800437e:	4b6a      	ldr	r3, [pc, #424]	; (8004528 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d018      	beq.n	80043bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800438a:	4b67      	ldr	r3, [pc, #412]	; (8004528 <RCCEx_PLLSAI2_Config+0x1b8>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f003 0203 	and.w	r2, r3, #3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d10d      	bne.n	80043b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
       ||
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d009      	beq.n	80043b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80043a2:	4b61      	ldr	r3, [pc, #388]	; (8004528 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	091b      	lsrs	r3, r3, #4
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
       ||
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d047      	beq.n	8004446 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	73fb      	strb	r3, [r7, #15]
 80043ba:	e044      	b.n	8004446 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d018      	beq.n	80043f6 <RCCEx_PLLSAI2_Config+0x86>
 80043c4:	2b03      	cmp	r3, #3
 80043c6:	d825      	bhi.n	8004414 <RCCEx_PLLSAI2_Config+0xa4>
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d002      	beq.n	80043d2 <RCCEx_PLLSAI2_Config+0x62>
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d009      	beq.n	80043e4 <RCCEx_PLLSAI2_Config+0x74>
 80043d0:	e020      	b.n	8004414 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043d2:	4b55      	ldr	r3, [pc, #340]	; (8004528 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d11d      	bne.n	800441a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043e2:	e01a      	b.n	800441a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043e4:	4b50      	ldr	r3, [pc, #320]	; (8004528 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d116      	bne.n	800441e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043f4:	e013      	b.n	800441e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043f6:	4b4c      	ldr	r3, [pc, #304]	; (8004528 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10f      	bne.n	8004422 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004402:	4b49      	ldr	r3, [pc, #292]	; (8004528 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d109      	bne.n	8004422 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004412:	e006      	b.n	8004422 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	73fb      	strb	r3, [r7, #15]
      break;
 8004418:	e004      	b.n	8004424 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800441a:	bf00      	nop
 800441c:	e002      	b.n	8004424 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800441e:	bf00      	nop
 8004420:	e000      	b.n	8004424 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004422:	bf00      	nop
    }

    if(status == HAL_OK)
 8004424:	7bfb      	ldrb	r3, [r7, #15]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10d      	bne.n	8004446 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800442a:	4b3f      	ldr	r3, [pc, #252]	; (8004528 <RCCEx_PLLSAI2_Config+0x1b8>)
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6819      	ldr	r1, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	3b01      	subs	r3, #1
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	430b      	orrs	r3, r1
 8004440:	4939      	ldr	r1, [pc, #228]	; (8004528 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004442:	4313      	orrs	r3, r2
 8004444:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d167      	bne.n	800451c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800444c:	4b36      	ldr	r3, [pc, #216]	; (8004528 <RCCEx_PLLSAI2_Config+0x1b8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a35      	ldr	r2, [pc, #212]	; (8004528 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004456:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004458:	f7fd fc38 	bl	8001ccc <HAL_GetTick>
 800445c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800445e:	e009      	b.n	8004474 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004460:	f7fd fc34 	bl	8001ccc <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d902      	bls.n	8004474 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	73fb      	strb	r3, [r7, #15]
        break;
 8004472:	e005      	b.n	8004480 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004474:	4b2c      	ldr	r3, [pc, #176]	; (8004528 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1ef      	bne.n	8004460 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004480:	7bfb      	ldrb	r3, [r7, #15]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d14a      	bne.n	800451c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d111      	bne.n	80044b0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800448c:	4b26      	ldr	r3, [pc, #152]	; (8004528 <RCCEx_PLLSAI2_Config+0x1b8>)
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6892      	ldr	r2, [r2, #8]
 800449c:	0211      	lsls	r1, r2, #8
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	68d2      	ldr	r2, [r2, #12]
 80044a2:	0912      	lsrs	r2, r2, #4
 80044a4:	0452      	lsls	r2, r2, #17
 80044a6:	430a      	orrs	r2, r1
 80044a8:	491f      	ldr	r1, [pc, #124]	; (8004528 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	614b      	str	r3, [r1, #20]
 80044ae:	e011      	b.n	80044d4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044b0:	4b1d      	ldr	r3, [pc, #116]	; (8004528 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6892      	ldr	r2, [r2, #8]
 80044c0:	0211      	lsls	r1, r2, #8
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6912      	ldr	r2, [r2, #16]
 80044c6:	0852      	lsrs	r2, r2, #1
 80044c8:	3a01      	subs	r2, #1
 80044ca:	0652      	lsls	r2, r2, #25
 80044cc:	430a      	orrs	r2, r1
 80044ce:	4916      	ldr	r1, [pc, #88]	; (8004528 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80044d4:	4b14      	ldr	r3, [pc, #80]	; (8004528 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a13      	ldr	r2, [pc, #76]	; (8004528 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e0:	f7fd fbf4 	bl	8001ccc <HAL_GetTick>
 80044e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044e6:	e009      	b.n	80044fc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044e8:	f7fd fbf0 	bl	8001ccc <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d902      	bls.n	80044fc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	73fb      	strb	r3, [r7, #15]
          break;
 80044fa:	e005      	b.n	8004508 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044fc:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0ef      	beq.n	80044e8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004508:	7bfb      	ldrb	r3, [r7, #15]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d106      	bne.n	800451c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800450e:	4b06      	ldr	r3, [pc, #24]	; (8004528 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004510:	695a      	ldr	r2, [r3, #20]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	4904      	ldr	r1, [pc, #16]	; (8004528 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004518:	4313      	orrs	r3, r2
 800451a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800451c:	7bfb      	ldrb	r3, [r7, #15]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40021000 	.word	0x40021000

0800452c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e095      	b.n	800466a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	2b00      	cmp	r3, #0
 8004544:	d108      	bne.n	8004558 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800454e:	d009      	beq.n	8004564 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	61da      	str	r2, [r3, #28]
 8004556:	e005      	b.n	8004564 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d106      	bne.n	8004584 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fc fe62 	bl	8001248 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800459a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045a4:	d902      	bls.n	80045ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	e002      	b.n	80045b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80045ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80045ba:	d007      	beq.n	80045cc <HAL_SPI_Init+0xa0>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045c4:	d002      	beq.n	80045cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460e:	ea42 0103 	orr.w	r1, r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004616:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	0c1b      	lsrs	r3, r3, #16
 8004628:	f003 0204 	and.w	r2, r3, #4
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	f003 0310 	and.w	r3, r3, #16
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004648:	ea42 0103 	orr.w	r1, r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e01a      	b.n	80046ba <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800469a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7fc fe17 	bl	80012d0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b088      	sub	sp, #32
 80046c6:	af02      	add	r7, sp, #8
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	603b      	str	r3, [r7, #0]
 80046ce:	4613      	mov	r3, r2
 80046d0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046de:	d112      	bne.n	8004706 <HAL_SPI_Receive+0x44>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10e      	bne.n	8004706 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2204      	movs	r2, #4
 80046ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80046f0:	88fa      	ldrh	r2, [r7, #6]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	4613      	mov	r3, r2
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	68b9      	ldr	r1, [r7, #8]
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 f910 	bl	8004922 <HAL_SPI_TransmitReceive>
 8004702:	4603      	mov	r3, r0
 8004704:	e109      	b.n	800491a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_SPI_Receive+0x52>
 8004710:	2302      	movs	r3, #2
 8004712:	e102      	b.n	800491a <HAL_SPI_Receive+0x258>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800471c:	f7fd fad6 	bl	8001ccc <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b01      	cmp	r3, #1
 800472c:	d002      	beq.n	8004734 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800472e:	2302      	movs	r3, #2
 8004730:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004732:	e0e9      	b.n	8004908 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <HAL_SPI_Receive+0x7e>
 800473a:	88fb      	ldrh	r3, [r7, #6]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d102      	bne.n	8004746 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004744:	e0e0      	b.n	8004908 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2204      	movs	r2, #4
 800474a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	88fa      	ldrh	r2, [r7, #6]
 800475e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	88fa      	ldrh	r2, [r7, #6]
 8004766:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004790:	d908      	bls.n	80047a4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047a0:	605a      	str	r2, [r3, #4]
 80047a2:	e007      	b.n	80047b4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047b2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047bc:	d10f      	bne.n	80047de <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047dc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e8:	2b40      	cmp	r3, #64	; 0x40
 80047ea:	d007      	beq.n	80047fc <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047fa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004804:	d867      	bhi.n	80048d6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004806:	e030      	b.n	800486a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b01      	cmp	r3, #1
 8004814:	d117      	bne.n	8004846 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f103 020c 	add.w	r2, r3, #12
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	7812      	ldrb	r2, [r2, #0]
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004838:	b29b      	uxth	r3, r3
 800483a:	3b01      	subs	r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004844:	e011      	b.n	800486a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004846:	f7fd fa41 	bl	8001ccc <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d803      	bhi.n	800485e <HAL_SPI_Receive+0x19c>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485c:	d102      	bne.n	8004864 <HAL_SPI_Receive+0x1a2>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d102      	bne.n	800486a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004868:	e04e      	b.n	8004908 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1c8      	bne.n	8004808 <HAL_SPI_Receive+0x146>
 8004876:	e034      	b.n	80048e2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b01      	cmp	r3, #1
 8004884:	d115      	bne.n	80048b2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004890:	b292      	uxth	r2, r2
 8004892:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004898:	1c9a      	adds	r2, r3, #2
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	3b01      	subs	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80048b0:	e011      	b.n	80048d6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048b2:	f7fd fa0b 	bl	8001ccc <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d803      	bhi.n	80048ca <HAL_SPI_Receive+0x208>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c8:	d102      	bne.n	80048d0 <HAL_SPI_Receive+0x20e>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d102      	bne.n	80048d6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80048d4:	e018      	b.n	8004908 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1ca      	bne.n	8004878 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	6839      	ldr	r1, [r7, #0]
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f001 f802 	bl	80058f0 <SPI_EndRxTransaction>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2220      	movs	r2, #32
 80048f6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	75fb      	strb	r3, [r7, #23]
 8004904:	e000      	b.n	8004908 <HAL_SPI_Receive+0x246>
  }

error :
 8004906:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004918:	7dfb      	ldrb	r3, [r7, #23]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b08a      	sub	sp, #40	; 0x28
 8004926:	af00      	add	r7, sp, #0
 8004928:	60f8      	str	r0, [r7, #12]
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	607a      	str	r2, [r7, #4]
 800492e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004930:	2301      	movs	r3, #1
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <HAL_SPI_TransmitReceive+0x26>
 8004944:	2302      	movs	r3, #2
 8004946:	e1fb      	b.n	8004d40 <HAL_SPI_TransmitReceive+0x41e>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004950:	f7fd f9bc 	bl	8001ccc <HAL_GetTick>
 8004954:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800495c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004964:	887b      	ldrh	r3, [r7, #2]
 8004966:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004968:	887b      	ldrh	r3, [r7, #2]
 800496a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800496c:	7efb      	ldrb	r3, [r7, #27]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d00e      	beq.n	8004990 <HAL_SPI_TransmitReceive+0x6e>
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004978:	d106      	bne.n	8004988 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d102      	bne.n	8004988 <HAL_SPI_TransmitReceive+0x66>
 8004982:	7efb      	ldrb	r3, [r7, #27]
 8004984:	2b04      	cmp	r3, #4
 8004986:	d003      	beq.n	8004990 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004988:	2302      	movs	r3, #2
 800498a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800498e:	e1cd      	b.n	8004d2c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d005      	beq.n	80049a2 <HAL_SPI_TransmitReceive+0x80>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <HAL_SPI_TransmitReceive+0x80>
 800499c:	887b      	ldrh	r3, [r7, #2]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d103      	bne.n	80049aa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80049a8:	e1c0      	b.n	8004d2c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d003      	beq.n	80049be <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2205      	movs	r2, #5
 80049ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	887a      	ldrh	r2, [r7, #2]
 80049ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	887a      	ldrh	r2, [r7, #2]
 80049d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	887a      	ldrh	r2, [r7, #2]
 80049e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	887a      	ldrh	r2, [r7, #2]
 80049ea:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a00:	d802      	bhi.n	8004a08 <HAL_SPI_TransmitReceive+0xe6>
 8004a02:	8a3b      	ldrh	r3, [r7, #16]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d908      	bls.n	8004a1a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a16:	605a      	str	r2, [r3, #4]
 8004a18:	e007      	b.n	8004a2a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a28:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a34:	2b40      	cmp	r3, #64	; 0x40
 8004a36:	d007      	beq.n	8004a48 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a50:	d97c      	bls.n	8004b4c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <HAL_SPI_TransmitReceive+0x13e>
 8004a5a:	8a7b      	ldrh	r3, [r7, #18]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d169      	bne.n	8004b34 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	881a      	ldrh	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a70:	1c9a      	adds	r2, r3, #2
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a84:	e056      	b.n	8004b34 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d11b      	bne.n	8004acc <HAL_SPI_TransmitReceive+0x1aa>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d016      	beq.n	8004acc <HAL_SPI_TransmitReceive+0x1aa>
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d113      	bne.n	8004acc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa8:	881a      	ldrh	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab4:	1c9a      	adds	r2, r3, #2
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d11c      	bne.n	8004b14 <HAL_SPI_TransmitReceive+0x1f2>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d016      	beq.n	8004b14 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	b292      	uxth	r2, r2
 8004af2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af8:	1c9a      	adds	r2, r3, #2
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	3b01      	subs	r3, #1
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b10:	2301      	movs	r3, #1
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b14:	f7fd f8da 	bl	8001ccc <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d807      	bhi.n	8004b34 <HAL_SPI_TransmitReceive+0x212>
 8004b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2a:	d003      	beq.n	8004b34 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004b32:	e0fb      	b.n	8004d2c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1a3      	bne.n	8004a86 <HAL_SPI_TransmitReceive+0x164>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d19d      	bne.n	8004a86 <HAL_SPI_TransmitReceive+0x164>
 8004b4a:	e0df      	b.n	8004d0c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d003      	beq.n	8004b5c <HAL_SPI_TransmitReceive+0x23a>
 8004b54:	8a7b      	ldrh	r3, [r7, #18]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	f040 80cb 	bne.w	8004cf2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d912      	bls.n	8004b8c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6a:	881a      	ldrh	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b76:	1c9a      	adds	r2, r3, #2
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	3b02      	subs	r3, #2
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b8a:	e0b2      	b.n	8004cf2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	330c      	adds	r3, #12
 8004b96:	7812      	ldrb	r2, [r2, #0]
 8004b98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bb2:	e09e      	b.n	8004cf2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d134      	bne.n	8004c2c <HAL_SPI_TransmitReceive+0x30a>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d02f      	beq.n	8004c2c <HAL_SPI_TransmitReceive+0x30a>
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d12c      	bne.n	8004c2c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d912      	bls.n	8004c02 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	881a      	ldrh	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bec:	1c9a      	adds	r2, r3, #2
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	3b02      	subs	r3, #2
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c00:	e012      	b.n	8004c28 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	330c      	adds	r3, #12
 8004c0c:	7812      	ldrb	r2, [r2, #0]
 8004c0e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	3b01      	subs	r3, #1
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d148      	bne.n	8004ccc <HAL_SPI_TransmitReceive+0x3aa>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d042      	beq.n	8004ccc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d923      	bls.n	8004c9a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	b292      	uxth	r2, r2
 8004c5e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c64:	1c9a      	adds	r2, r3, #2
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	3b02      	subs	r3, #2
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d81f      	bhi.n	8004cc8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c96:	605a      	str	r2, [r3, #4]
 8004c98:	e016      	b.n	8004cc8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f103 020c 	add.w	r2, r3, #12
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	7812      	ldrb	r2, [r2, #0]
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ccc:	f7fc fffe 	bl	8001ccc <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d803      	bhi.n	8004ce4 <HAL_SPI_TransmitReceive+0x3c2>
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce2:	d102      	bne.n	8004cea <HAL_SPI_TransmitReceive+0x3c8>
 8004ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d103      	bne.n	8004cf2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004cf0:	e01c      	b.n	8004d2c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f47f af5b 	bne.w	8004bb4 <HAL_SPI_TransmitReceive+0x292>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f47f af54 	bne.w	8004bb4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d0c:	69fa      	ldr	r2, [r7, #28]
 8004d0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 fe45 	bl	80059a0 <SPI_EndRxTxTransaction>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d006      	beq.n	8004d2a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2220      	movs	r2, #32
 8004d26:	661a      	str	r2, [r3, #96]	; 0x60
 8004d28:	e000      	b.n	8004d2c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004d2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3728      	adds	r7, #40	; 0x28
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	4613      	mov	r3, r2
 8004d54:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <HAL_SPI_Transmit_IT+0x20>
 8004d64:	2302      	movs	r3, #2
 8004d66:	e072      	b.n	8004e4e <HAL_SPI_Transmit_IT+0x106>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <HAL_SPI_Transmit_IT+0x34>
 8004d76:	88fb      	ldrh	r3, [r7, #6]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d102      	bne.n	8004d82 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d80:	e060      	b.n	8004e44 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d002      	beq.n	8004d94 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004d8e:	2302      	movs	r3, #2
 8004d90:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d92:	e057      	b.n	8004e44 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2203      	movs	r2, #3
 8004d98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	88fa      	ldrh	r2, [r7, #6]
 8004dac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	88fa      	ldrh	r2, [r7, #6]
 8004db2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dd8:	d903      	bls.n	8004de2 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4a1f      	ldr	r2, [pc, #124]	; (8004e5c <HAL_SPI_Transmit_IT+0x114>)
 8004dde:	651a      	str	r2, [r3, #80]	; 0x50
 8004de0:	e002      	b.n	8004de8 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4a1e      	ldr	r2, [pc, #120]	; (8004e60 <HAL_SPI_Transmit_IT+0x118>)
 8004de6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df0:	d10f      	bne.n	8004e12 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004e20:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2c:	2b40      	cmp	r3, #64	; 0x40
 8004e2e:	d008      	beq.n	8004e42 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	e000      	b.n	8004e44 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8004e42:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	0800566f 	.word	0x0800566f
 8004e60:	08005629 	.word	0x08005629

08004e64 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d110      	bne.n	8004ea0 <HAL_SPI_Receive_IT+0x3c>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e86:	d10b      	bne.n	8004ea0 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2204      	movs	r2, #4
 8004e8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8004e90:	88fb      	ldrh	r3, [r7, #6]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	68b9      	ldr	r1, [r7, #8]
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 f894 	bl	8004fc4 <HAL_SPI_TransmitReceive_IT>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	e089      	b.n	8004fb4 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d101      	bne.n	8004eae <HAL_SPI_Receive_IT+0x4a>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	e082      	b.n	8004fb4 <HAL_SPI_Receive_IT+0x150>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d002      	beq.n	8004ec8 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ec6:	e070      	b.n	8004faa <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <HAL_SPI_Receive_IT+0x70>
 8004ece:	88fb      	ldrh	r3, [r7, #6]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d102      	bne.n	8004eda <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ed8:	e067      	b.n	8004faa <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2204      	movs	r2, #4
 8004ede:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	88fa      	ldrh	r2, [r7, #6]
 8004ef2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	88fa      	ldrh	r2, [r7, #6]
 8004efa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f1e:	d90b      	bls.n	8004f38 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f2e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4a22      	ldr	r2, [pc, #136]	; (8004fbc <HAL_SPI_Receive_IT+0x158>)
 8004f34:	64da      	str	r2, [r3, #76]	; 0x4c
 8004f36:	e00a      	b.n	8004f4e <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f46:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4a1d      	ldr	r2, [pc, #116]	; (8004fc0 <HAL_SPI_Receive_IT+0x15c>)
 8004f4c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f56:	d10f      	bne.n	8004f78 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f76:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004f86:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f92:	2b40      	cmp	r3, #64	; 0x40
 8004f94:	d008      	beq.n	8004fa8 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	e000      	b.n	8004faa <HAL_SPI_Receive_IT+0x146>
  }

error :
 8004fa8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3718      	adds	r7, #24
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	080055dd 	.word	0x080055dd
 8004fc0:	0800558d 	.word	0x0800558d

08004fc4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d101      	bne.n	8004fe4 <HAL_SPI_TransmitReceive_IT+0x20>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	e091      	b.n	8005108 <HAL_SPI_TransmitReceive_IT+0x144>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ff2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ffa:	7dbb      	ldrb	r3, [r7, #22]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d00d      	beq.n	800501c <HAL_SPI_TransmitReceive_IT+0x58>
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005006:	d106      	bne.n	8005016 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d102      	bne.n	8005016 <HAL_SPI_TransmitReceive_IT+0x52>
 8005010:	7dbb      	ldrb	r3, [r7, #22]
 8005012:	2b04      	cmp	r3, #4
 8005014:	d002      	beq.n	800501c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8005016:	2302      	movs	r3, #2
 8005018:	75fb      	strb	r3, [r7, #23]
    goto error;
 800501a:	e070      	b.n	80050fe <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d005      	beq.n	800502e <HAL_SPI_TransmitReceive_IT+0x6a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <HAL_SPI_TransmitReceive_IT+0x6a>
 8005028:	887b      	ldrh	r3, [r7, #2]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d102      	bne.n	8005034 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005032:	e064      	b.n	80050fe <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b04      	cmp	r3, #4
 800503e:	d003      	beq.n	8005048 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2205      	movs	r2, #5
 8005044:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	887a      	ldrh	r2, [r7, #2]
 8005058:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	887a      	ldrh	r2, [r7, #2]
 800505e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	887a      	ldrh	r2, [r7, #2]
 800506a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	887a      	ldrh	r2, [r7, #2]
 8005072:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800507e:	d906      	bls.n	800508e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4a24      	ldr	r2, [pc, #144]	; (8005114 <HAL_SPI_TransmitReceive_IT+0x150>)
 8005084:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4a23      	ldr	r2, [pc, #140]	; (8005118 <HAL_SPI_TransmitReceive_IT+0x154>)
 800508a:	651a      	str	r2, [r3, #80]	; 0x50
 800508c:	e005      	b.n	800509a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	4a22      	ldr	r2, [pc, #136]	; (800511c <HAL_SPI_TransmitReceive_IT+0x158>)
 8005092:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4a22      	ldr	r2, [pc, #136]	; (8005120 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8005098:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050a2:	d802      	bhi.n	80050aa <HAL_SPI_TransmitReceive_IT+0xe6>
 80050a4:	887b      	ldrh	r3, [r7, #2]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d908      	bls.n	80050bc <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050b8:	605a      	str	r2, [r3, #4]
 80050ba:	e007      	b.n	80050cc <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050ca:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80050da:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e6:	2b40      	cmp	r3, #64	; 0x40
 80050e8:	d008      	beq.n	80050fc <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	e000      	b.n	80050fe <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 80050fc:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005106:	7dfb      	ldrb	r3, [r7, #23]
}
 8005108:	4618      	mov	r0, r3
 800510a:	371c      	adds	r7, #28
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	080054c7 	.word	0x080054c7
 8005118:	0800552d 	.word	0x0800552d
 800511c:	08005377 	.word	0x08005377
 8005120:	08005435 	.word	0x08005435

08005124 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b088      	sub	sp, #32
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	099b      	lsrs	r3, r3, #6
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10f      	bne.n	8005168 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	099b      	lsrs	r3, r3, #6
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d004      	beq.n	8005168 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	4798      	blx	r3
    return;
 8005166:	e0d7      	b.n	8005318 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	085b      	lsrs	r3, r3, #1
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00a      	beq.n	800518a <HAL_SPI_IRQHandler+0x66>
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	09db      	lsrs	r3, r3, #7
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d004      	beq.n	800518a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	4798      	blx	r3
    return;
 8005188:	e0c6      	b.n	8005318 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	095b      	lsrs	r3, r3, #5
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10c      	bne.n	80051b0 <HAL_SPI_IRQHandler+0x8c>
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	099b      	lsrs	r3, r3, #6
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	0a1b      	lsrs	r3, r3, #8
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 80b4 	beq.w	8005318 <HAL_SPI_IRQHandler+0x1f4>
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 80ad 	beq.w	8005318 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	099b      	lsrs	r3, r3, #6
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d023      	beq.n	8005212 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	d011      	beq.n	80051fa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051da:	f043 0204 	orr.w	r2, r3, #4
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051e2:	2300      	movs	r3, #0
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	e00b      	b.n	8005212 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051fa:	2300      	movs	r3, #0
 80051fc:	613b      	str	r3, [r7, #16]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	613b      	str	r3, [r7, #16]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	613b      	str	r3, [r7, #16]
 800520e:	693b      	ldr	r3, [r7, #16]
        return;
 8005210:	e082      	b.n	8005318 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	095b      	lsrs	r3, r3, #5
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d014      	beq.n	8005248 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005222:	f043 0201 	orr.w	r2, r3, #1
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800522a:	2300      	movs	r3, #0
 800522c:	60fb      	str	r3, [r7, #12]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	0a1b      	lsrs	r3, r3, #8
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00c      	beq.n	800526e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005258:	f043 0208 	orr.w	r2, r3, #8
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005260:	2300      	movs	r3, #0
 8005262:	60bb      	str	r3, [r7, #8]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	60bb      	str	r3, [r7, #8]
 800526c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005272:	2b00      	cmp	r3, #0
 8005274:	d04f      	beq.n	8005316 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005284:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d104      	bne.n	80052a2 <HAL_SPI_IRQHandler+0x17e>
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d034      	beq.n	800530c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0203 	bic.w	r2, r2, #3
 80052b0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d011      	beq.n	80052de <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052be:	4a18      	ldr	r2, [pc, #96]	; (8005320 <HAL_SPI_IRQHandler+0x1fc>)
 80052c0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fc ff5c 	bl	8002184 <HAL_DMA_Abort_IT>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d005      	beq.n	80052de <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d016      	beq.n	8005314 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ea:	4a0d      	ldr	r2, [pc, #52]	; (8005320 <HAL_SPI_IRQHandler+0x1fc>)
 80052ec:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fc ff46 	bl	8002184 <HAL_DMA_Abort_IT>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005302:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800530a:	e003      	b.n	8005314 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f813 	bl	8005338 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005312:	e000      	b.n	8005316 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005314:	bf00      	nop
    return;
 8005316:	bf00      	nop
  }
}
 8005318:	3720      	adds	r7, #32
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	0800534d 	.word	0x0800534d

08005324 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005358:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f7ff ffe5 	bl	8005338 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800536e:	bf00      	nop
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b082      	sub	sp, #8
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005384:	b29b      	uxth	r3, r3
 8005386:	2b01      	cmp	r3, #1
 8005388:	d923      	bls.n	80053d2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	b292      	uxth	r2, r2
 8005396:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539c:	1c9a      	adds	r2, r3, #2
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	3b02      	subs	r3, #2
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d11f      	bne.n	8005400 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053ce:	605a      	str	r2, [r3, #4]
 80053d0:	e016      	b.n	8005400 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f103 020c 	add.w	r2, r3, #12
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	7812      	ldrb	r2, [r2, #0]
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10f      	bne.n	800542c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800541a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d102      	bne.n	800542c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fb00 	bl	8005a2c <SPI_CloseRxTx_ISR>
    }
  }
}
 800542c:	bf00      	nop
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005440:	b29b      	uxth	r3, r3
 8005442:	2b01      	cmp	r3, #1
 8005444:	d912      	bls.n	800546c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544a:	881a      	ldrh	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005456:	1c9a      	adds	r2, r3, #2
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005460:	b29b      	uxth	r3, r3
 8005462:	3b02      	subs	r3, #2
 8005464:	b29a      	uxth	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	87da      	strh	r2, [r3, #62]	; 0x3e
 800546a:	e012      	b.n	8005492 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	330c      	adds	r3, #12
 8005476:	7812      	ldrb	r2, [r2, #0]
 8005478:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547e:	1c5a      	adds	r2, r3, #1
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005488:	b29b      	uxth	r3, r3
 800548a:	3b01      	subs	r3, #1
 800548c:	b29a      	uxth	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005496:	b29b      	uxth	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d110      	bne.n	80054be <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054aa:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d102      	bne.n	80054be <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fab7 	bl	8005a2c <SPI_CloseRxTx_ISR>
    }
  }
}
 80054be:	bf00      	nop
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b082      	sub	sp, #8
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68da      	ldr	r2, [r3, #12]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d8:	b292      	uxth	r2, r2
 80054da:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	1c9a      	adds	r2, r3, #2
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054fe:	b29b      	uxth	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10f      	bne.n	8005524 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005512:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005518:	b29b      	uxth	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d102      	bne.n	8005524 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fa84 	bl	8005a2c <SPI_CloseRxTx_ISR>
    }
  }
}
 8005524:	bf00      	nop
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005538:	881a      	ldrh	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005544:	1c9a      	adds	r2, r3, #2
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800554e:	b29b      	uxth	r3, r3
 8005550:	3b01      	subs	r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800555c:	b29b      	uxth	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d110      	bne.n	8005584 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005570:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005578:	b29b      	uxth	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d102      	bne.n	8005584 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fa54 	bl	8005a2c <SPI_CloseRxTx_ISR>
    }
  }
}
 8005584:	bf00      	nop
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f103 020c 	add.w	r2, r3, #12
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a0:	7812      	ldrb	r2, [r2, #0]
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d102      	bne.n	80055d4 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fa6e 	bl	8005ab0 <SPI_CloseRx_ISR>
  }
}
 80055d4:	bf00      	nop
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	b292      	uxth	r2, r2
 80055f0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	1c9a      	adds	r2, r3, #2
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005602:	b29b      	uxth	r3, r3
 8005604:	3b01      	subs	r3, #1
 8005606:	b29a      	uxth	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005614:	b29b      	uxth	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d102      	bne.n	8005620 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fa48 	bl	8005ab0 <SPI_CloseRx_ISR>
  }
}
 8005620:	bf00      	nop
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	330c      	adds	r3, #12
 800563a:	7812      	ldrb	r2, [r2, #0]
 800563c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800564c:	b29b      	uxth	r3, r3
 800564e:	3b01      	subs	r3, #1
 8005650:	b29a      	uxth	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800565a:	b29b      	uxth	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d102      	bne.n	8005666 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 fa55 	bl	8005b10 <SPI_CloseTx_ISR>
  }
}
 8005666:	bf00      	nop
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b082      	sub	sp, #8
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567a:	881a      	ldrh	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005686:	1c9a      	adds	r2, r3, #2
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005690:	b29b      	uxth	r3, r3
 8005692:	3b01      	subs	r3, #1
 8005694:	b29a      	uxth	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800569e:	b29b      	uxth	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d102      	bne.n	80056aa <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fa33 	bl	8005b10 <SPI_CloseTx_ISR>
  }
}
 80056aa:	bf00      	nop
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
	...

080056b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	603b      	str	r3, [r7, #0]
 80056c0:	4613      	mov	r3, r2
 80056c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056c4:	f7fc fb02 	bl	8001ccc <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056cc:	1a9b      	subs	r3, r3, r2
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	4413      	add	r3, r2
 80056d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056d4:	f7fc fafa 	bl	8001ccc <HAL_GetTick>
 80056d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056da:	4b39      	ldr	r3, [pc, #228]	; (80057c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	015b      	lsls	r3, r3, #5
 80056e0:	0d1b      	lsrs	r3, r3, #20
 80056e2:	69fa      	ldr	r2, [r7, #28]
 80056e4:	fb02 f303 	mul.w	r3, r2, r3
 80056e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056ea:	e054      	b.n	8005796 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f2:	d050      	beq.n	8005796 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056f4:	f7fc faea 	bl	8001ccc <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	69fa      	ldr	r2, [r7, #28]
 8005700:	429a      	cmp	r2, r3
 8005702:	d902      	bls.n	800570a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d13d      	bne.n	8005786 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005718:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005722:	d111      	bne.n	8005748 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800572c:	d004      	beq.n	8005738 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005736:	d107      	bne.n	8005748 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005746:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005750:	d10f      	bne.n	8005772 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005770:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e017      	b.n	80057b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	3b01      	subs	r3, #1
 8005794:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	4013      	ands	r3, r2
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	bf0c      	ite	eq
 80057a6:	2301      	moveq	r3, #1
 80057a8:	2300      	movne	r3, #0
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	461a      	mov	r2, r3
 80057ae:	79fb      	ldrb	r3, [r7, #7]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d19b      	bne.n	80056ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3720      	adds	r7, #32
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	20000000 	.word	0x20000000

080057c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08a      	sub	sp, #40	; 0x28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80057d2:	2300      	movs	r3, #0
 80057d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80057d6:	f7fc fa79 	bl	8001ccc <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057de:	1a9b      	subs	r3, r3, r2
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	4413      	add	r3, r2
 80057e4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80057e6:	f7fc fa71 	bl	8001ccc <HAL_GetTick>
 80057ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	330c      	adds	r3, #12
 80057f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80057f4:	4b3d      	ldr	r3, [pc, #244]	; (80058ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	4613      	mov	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	00da      	lsls	r2, r3, #3
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	0d1b      	lsrs	r3, r3, #20
 8005804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005806:	fb02 f303 	mul.w	r3, r2, r3
 800580a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800580c:	e060      	b.n	80058d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005814:	d107      	bne.n	8005826 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d104      	bne.n	8005826 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	b2db      	uxtb	r3, r3
 8005822:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005824:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582c:	d050      	beq.n	80058d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800582e:	f7fc fa4d 	bl	8001ccc <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800583a:	429a      	cmp	r2, r3
 800583c:	d902      	bls.n	8005844 <SPI_WaitFifoStateUntilTimeout+0x80>
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	2b00      	cmp	r3, #0
 8005842:	d13d      	bne.n	80058c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005852:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800585c:	d111      	bne.n	8005882 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005866:	d004      	beq.n	8005872 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005870:	d107      	bne.n	8005882 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005880:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800588a:	d10f      	bne.n	80058ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e010      	b.n	80058e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	3b01      	subs	r3, #1
 80058ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689a      	ldr	r2, [r3, #8]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	4013      	ands	r3, r2
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d196      	bne.n	800580e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3728      	adds	r7, #40	; 0x28
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	20000000 	.word	0x20000000

080058f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af02      	add	r7, sp, #8
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005904:	d111      	bne.n	800592a <SPI_EndRxTransaction+0x3a>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800590e:	d004      	beq.n	800591a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005918:	d107      	bne.n	800592a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005928:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2200      	movs	r2, #0
 8005932:	2180      	movs	r1, #128	; 0x80
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f7ff febd 	bl	80056b4 <SPI_WaitFlagStateUntilTimeout>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d007      	beq.n	8005950 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005944:	f043 0220 	orr.w	r2, r3, #32
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e023      	b.n	8005998 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005958:	d11d      	bne.n	8005996 <SPI_EndRxTransaction+0xa6>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005962:	d004      	beq.n	800596e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800596c:	d113      	bne.n	8005996 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2200      	movs	r2, #0
 8005976:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f7ff ff22 	bl	80057c4 <SPI_WaitFifoStateUntilTimeout>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d007      	beq.n	8005996 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800598a:	f043 0220 	orr.w	r2, r3, #32
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e000      	b.n	8005998 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af02      	add	r7, sp, #8
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f7ff ff03 	bl	80057c4 <SPI_WaitFifoStateUntilTimeout>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d007      	beq.n	80059d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c8:	f043 0220 	orr.w	r2, r3, #32
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e027      	b.n	8005a24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2200      	movs	r2, #0
 80059dc:	2180      	movs	r1, #128	; 0x80
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f7ff fe68 	bl	80056b4 <SPI_WaitFlagStateUntilTimeout>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d007      	beq.n	80059fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ee:	f043 0220 	orr.w	r2, r3, #32
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e014      	b.n	8005a24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f7ff fedc 	bl	80057c4 <SPI_WaitFifoStateUntilTimeout>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d007      	beq.n	8005a22 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a16:	f043 0220 	orr.w	r2, r3, #32
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e000      	b.n	8005a24 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a34:	f7fc f94a 	bl	8001ccc <HAL_GetTick>
 8005a38:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 0220 	bic.w	r2, r2, #32
 8005a48:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	2164      	movs	r1, #100	; 0x64
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7ff ffa6 	bl	80059a0 <SPI_EndRxTxTransaction>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d005      	beq.n	8005a66 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a5e:	f043 0220 	orr.w	r2, r3, #32
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d115      	bne.n	8005a9a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	d107      	bne.n	8005a8a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f003 f9be 	bl	8008e04 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005a88:	e00e      	b.n	8005aa8 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff fc46 	bl	8005324 <HAL_SPI_TxRxCpltCallback>
}
 8005a98:	e006      	b.n	8005aa8 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7ff fc48 	bl	8005338 <HAL_SPI_ErrorCallback>
}
 8005aa8:	bf00      	nop
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ac6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8005ac8:	f7fc f900 	bl	8001ccc <HAL_GetTick>
 8005acc:	4603      	mov	r3, r0
 8005ace:	461a      	mov	r2, r3
 8005ad0:	2164      	movs	r1, #100	; 0x64
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7ff ff0c 	bl	80058f0 <SPI_EndRxTransaction>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d005      	beq.n	8005aea <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ae2:	f043 0220 	orr.w	r2, r3, #32
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d103      	bne.n	8005b02 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f003 f982 	bl	8008e04 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005b00:	e002      	b.n	8005b08 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7ff fc18 	bl	8005338 <HAL_SPI_ErrorCallback>
}
 8005b08:	bf00      	nop
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b18:	f7fc f8d8 	bl	8001ccc <HAL_GetTick>
 8005b1c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b2c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	2164      	movs	r1, #100	; 0x64
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7ff ff34 	bl	80059a0 <SPI_EndRxTxTransaction>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d005      	beq.n	8005b4a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b42:	f043 0220 	orr.w	r2, r3, #32
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10a      	bne.n	8005b68 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b52:	2300      	movs	r3, #0
 8005b54:	60bb      	str	r3, [r7, #8]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	60bb      	str	r3, [r7, #8]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	60bb      	str	r3, [r7, #8]
 8005b66:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d003      	beq.n	8005b80 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7ff fbdd 	bl	8005338 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005b7e:	e002      	b.n	8005b86 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f003 f953 	bl	8008e2c <HAL_SPI_TxCpltCallback>
}
 8005b86:	bf00      	nop
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b082      	sub	sp, #8
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e049      	b.n	8005c34 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d106      	bne.n	8005bba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f841 	bl	8005c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	3304      	adds	r3, #4
 8005bca:	4619      	mov	r1, r3
 8005bcc:	4610      	mov	r0, r2
 8005bce:	f000 f9f7 	bl	8005fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d001      	beq.n	8005c68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e04f      	b.n	8005d08 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0201 	orr.w	r2, r2, #1
 8005c7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a23      	ldr	r2, [pc, #140]	; (8005d14 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d01d      	beq.n	8005cc6 <HAL_TIM_Base_Start_IT+0x76>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c92:	d018      	beq.n	8005cc6 <HAL_TIM_Base_Start_IT+0x76>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a1f      	ldr	r2, [pc, #124]	; (8005d18 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d013      	beq.n	8005cc6 <HAL_TIM_Base_Start_IT+0x76>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a1e      	ldr	r2, [pc, #120]	; (8005d1c <HAL_TIM_Base_Start_IT+0xcc>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d00e      	beq.n	8005cc6 <HAL_TIM_Base_Start_IT+0x76>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a1c      	ldr	r2, [pc, #112]	; (8005d20 <HAL_TIM_Base_Start_IT+0xd0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d009      	beq.n	8005cc6 <HAL_TIM_Base_Start_IT+0x76>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a1b      	ldr	r2, [pc, #108]	; (8005d24 <HAL_TIM_Base_Start_IT+0xd4>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d004      	beq.n	8005cc6 <HAL_TIM_Base_Start_IT+0x76>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a19      	ldr	r2, [pc, #100]	; (8005d28 <HAL_TIM_Base_Start_IT+0xd8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d115      	bne.n	8005cf2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	4b17      	ldr	r3, [pc, #92]	; (8005d2c <HAL_TIM_Base_Start_IT+0xdc>)
 8005cce:	4013      	ands	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2b06      	cmp	r3, #6
 8005cd6:	d015      	beq.n	8005d04 <HAL_TIM_Base_Start_IT+0xb4>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cde:	d011      	beq.n	8005d04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0201 	orr.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf0:	e008      	b.n	8005d04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f042 0201 	orr.w	r2, r2, #1
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	e000      	b.n	8005d06 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d04:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	40012c00 	.word	0x40012c00
 8005d18:	40000400 	.word	0x40000400
 8005d1c:	40000800 	.word	0x40000800
 8005d20:	40000c00 	.word	0x40000c00
 8005d24:	40013400 	.word	0x40013400
 8005d28:	40014000 	.word	0x40014000
 8005d2c:	00010007 	.word	0x00010007

08005d30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d122      	bne.n	8005d8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d11b      	bne.n	8005d8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f06f 0202 	mvn.w	r2, #2
 8005d5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	f003 0303 	and.w	r3, r3, #3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f905 	bl	8005f82 <HAL_TIM_IC_CaptureCallback>
 8005d78:	e005      	b.n	8005d86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f8f7 	bl	8005f6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 f908 	bl	8005f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	f003 0304 	and.w	r3, r3, #4
 8005d96:	2b04      	cmp	r3, #4
 8005d98:	d122      	bne.n	8005de0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b04      	cmp	r3, #4
 8005da6:	d11b      	bne.n	8005de0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f06f 0204 	mvn.w	r2, #4
 8005db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2202      	movs	r2, #2
 8005db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f8db 	bl	8005f82 <HAL_TIM_IC_CaptureCallback>
 8005dcc:	e005      	b.n	8005dda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f8cd 	bl	8005f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f8de 	bl	8005f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	f003 0308 	and.w	r3, r3, #8
 8005dea:	2b08      	cmp	r3, #8
 8005dec:	d122      	bne.n	8005e34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f003 0308 	and.w	r3, r3, #8
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d11b      	bne.n	8005e34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f06f 0208 	mvn.w	r2, #8
 8005e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2204      	movs	r2, #4
 8005e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	f003 0303 	and.w	r3, r3, #3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f8b1 	bl	8005f82 <HAL_TIM_IC_CaptureCallback>
 8005e20:	e005      	b.n	8005e2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f8a3 	bl	8005f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 f8b4 	bl	8005f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	f003 0310 	and.w	r3, r3, #16
 8005e3e:	2b10      	cmp	r3, #16
 8005e40:	d122      	bne.n	8005e88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	f003 0310 	and.w	r3, r3, #16
 8005e4c:	2b10      	cmp	r3, #16
 8005e4e:	d11b      	bne.n	8005e88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f06f 0210 	mvn.w	r2, #16
 8005e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2208      	movs	r2, #8
 8005e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f887 	bl	8005f82 <HAL_TIM_IC_CaptureCallback>
 8005e74:	e005      	b.n	8005e82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f879 	bl	8005f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f88a 	bl	8005f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d10e      	bne.n	8005eb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d107      	bne.n	8005eb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f06f 0201 	mvn.w	r2, #1
 8005eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7fb f884 	bl	8000fbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ebe:	2b80      	cmp	r3, #128	; 0x80
 8005ec0:	d10e      	bne.n	8005ee0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ecc:	2b80      	cmp	r3, #128	; 0x80
 8005ece:	d107      	bne.n	8005ee0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f914 	bl	8006108 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eee:	d10e      	bne.n	8005f0e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005efa:	2b80      	cmp	r3, #128	; 0x80
 8005efc:	d107      	bne.n	8005f0e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f907 	bl	800611c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f18:	2b40      	cmp	r3, #64	; 0x40
 8005f1a:	d10e      	bne.n	8005f3a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f26:	2b40      	cmp	r3, #64	; 0x40
 8005f28:	d107      	bne.n	8005f3a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f838 	bl	8005faa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	f003 0320 	and.w	r3, r3, #32
 8005f44:	2b20      	cmp	r3, #32
 8005f46:	d10e      	bne.n	8005f66 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f003 0320 	and.w	r3, r3, #32
 8005f52:	2b20      	cmp	r3, #32
 8005f54:	d107      	bne.n	8005f66 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f06f 0220 	mvn.w	r2, #32
 8005f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f8c7 	bl	80060f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f66:	bf00      	nop
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b083      	sub	sp, #12
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f8a:	bf00      	nop
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f9e:	bf00      	nop
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
	...

08005fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a40      	ldr	r2, [pc, #256]	; (80060d4 <TIM_Base_SetConfig+0x114>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d013      	beq.n	8006000 <TIM_Base_SetConfig+0x40>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fde:	d00f      	beq.n	8006000 <TIM_Base_SetConfig+0x40>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a3d      	ldr	r2, [pc, #244]	; (80060d8 <TIM_Base_SetConfig+0x118>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d00b      	beq.n	8006000 <TIM_Base_SetConfig+0x40>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a3c      	ldr	r2, [pc, #240]	; (80060dc <TIM_Base_SetConfig+0x11c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d007      	beq.n	8006000 <TIM_Base_SetConfig+0x40>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a3b      	ldr	r2, [pc, #236]	; (80060e0 <TIM_Base_SetConfig+0x120>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d003      	beq.n	8006000 <TIM_Base_SetConfig+0x40>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a3a      	ldr	r2, [pc, #232]	; (80060e4 <TIM_Base_SetConfig+0x124>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d108      	bne.n	8006012 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	4313      	orrs	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a2f      	ldr	r2, [pc, #188]	; (80060d4 <TIM_Base_SetConfig+0x114>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d01f      	beq.n	800605a <TIM_Base_SetConfig+0x9a>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006020:	d01b      	beq.n	800605a <TIM_Base_SetConfig+0x9a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a2c      	ldr	r2, [pc, #176]	; (80060d8 <TIM_Base_SetConfig+0x118>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d017      	beq.n	800605a <TIM_Base_SetConfig+0x9a>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a2b      	ldr	r2, [pc, #172]	; (80060dc <TIM_Base_SetConfig+0x11c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d013      	beq.n	800605a <TIM_Base_SetConfig+0x9a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a2a      	ldr	r2, [pc, #168]	; (80060e0 <TIM_Base_SetConfig+0x120>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00f      	beq.n	800605a <TIM_Base_SetConfig+0x9a>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a29      	ldr	r2, [pc, #164]	; (80060e4 <TIM_Base_SetConfig+0x124>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d00b      	beq.n	800605a <TIM_Base_SetConfig+0x9a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a28      	ldr	r2, [pc, #160]	; (80060e8 <TIM_Base_SetConfig+0x128>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d007      	beq.n	800605a <TIM_Base_SetConfig+0x9a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a27      	ldr	r2, [pc, #156]	; (80060ec <TIM_Base_SetConfig+0x12c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d003      	beq.n	800605a <TIM_Base_SetConfig+0x9a>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a26      	ldr	r2, [pc, #152]	; (80060f0 <TIM_Base_SetConfig+0x130>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d108      	bne.n	800606c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006060:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	4313      	orrs	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	4313      	orrs	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	689a      	ldr	r2, [r3, #8]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a10      	ldr	r2, [pc, #64]	; (80060d4 <TIM_Base_SetConfig+0x114>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d00f      	beq.n	80060b8 <TIM_Base_SetConfig+0xf8>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a12      	ldr	r2, [pc, #72]	; (80060e4 <TIM_Base_SetConfig+0x124>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d00b      	beq.n	80060b8 <TIM_Base_SetConfig+0xf8>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a11      	ldr	r2, [pc, #68]	; (80060e8 <TIM_Base_SetConfig+0x128>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d007      	beq.n	80060b8 <TIM_Base_SetConfig+0xf8>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a10      	ldr	r2, [pc, #64]	; (80060ec <TIM_Base_SetConfig+0x12c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d003      	beq.n	80060b8 <TIM_Base_SetConfig+0xf8>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a0f      	ldr	r2, [pc, #60]	; (80060f0 <TIM_Base_SetConfig+0x130>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d103      	bne.n	80060c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	615a      	str	r2, [r3, #20]
}
 80060c6:	bf00      	nop
 80060c8:	3714      	adds	r7, #20
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	40012c00 	.word	0x40012c00
 80060d8:	40000400 	.word	0x40000400
 80060dc:	40000800 	.word	0x40000800
 80060e0:	40000c00 	.word	0x40000c00
 80060e4:	40013400 	.word	0x40013400
 80060e8:	40014000 	.word	0x40014000
 80060ec:	40014400 	.word	0x40014400
 80060f0:	40014800 	.word	0x40014800

080060f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e040      	b.n	80061c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006146:	2b00      	cmp	r3, #0
 8006148:	d106      	bne.n	8006158 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7fb f8da 	bl	800130c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2224      	movs	r2, #36	; 0x24
 800615c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0201 	bic.w	r2, r2, #1
 800616c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fb9c 	bl	80068ac <UART_SetConfig>
 8006174:	4603      	mov	r3, r0
 8006176:	2b01      	cmp	r3, #1
 8006178:	d101      	bne.n	800617e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e022      	b.n	80061c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	2b00      	cmp	r3, #0
 8006184:	d002      	beq.n	800618c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 fe48 	bl	8006e1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800619a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	689a      	ldr	r2, [r3, #8]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f042 0201 	orr.w	r2, r2, #1
 80061ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 fecf 	bl	8006f60 <UART_CheckIdleState>
 80061c2:	4603      	mov	r3, r0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b08b      	sub	sp, #44	; 0x2c
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	4613      	mov	r3, r2
 80061d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061de:	2b20      	cmp	r3, #32
 80061e0:	d156      	bne.n	8006290 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <HAL_UART_Transmit_IT+0x22>
 80061e8:	88fb      	ldrh	r3, [r7, #6]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e04f      	b.n	8006292 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d101      	bne.n	8006200 <HAL_UART_Transmit_IT+0x34>
 80061fc:	2302      	movs	r3, #2
 80061fe:	e048      	b.n	8006292 <HAL_UART_Transmit_IT+0xc6>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	88fa      	ldrh	r2, [r7, #6]
 8006212:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	88fa      	ldrh	r2, [r7, #6]
 800621a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2221      	movs	r2, #33	; 0x21
 8006230:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800623a:	d107      	bne.n	800624c <HAL_UART_Transmit_IT+0x80>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d103      	bne.n	800624c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	4a16      	ldr	r2, [pc, #88]	; (80062a0 <HAL_UART_Transmit_IT+0xd4>)
 8006248:	669a      	str	r2, [r3, #104]	; 0x68
 800624a:	e002      	b.n	8006252 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4a15      	ldr	r2, [pc, #84]	; (80062a4 <HAL_UART_Transmit_IT+0xd8>)
 8006250:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	e853 3f00 	ldrex	r3, [r3]
 8006266:	613b      	str	r3, [r7, #16]
   return(result);
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800626e:	627b      	str	r3, [r7, #36]	; 0x24
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	461a      	mov	r2, r3
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	623b      	str	r3, [r7, #32]
 800627a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627c:	69f9      	ldr	r1, [r7, #28]
 800627e:	6a3a      	ldr	r2, [r7, #32]
 8006280:	e841 2300 	strex	r3, r2, [r1]
 8006284:	61bb      	str	r3, [r7, #24]
   return(result);
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1e6      	bne.n	800625a <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800628c:	2300      	movs	r3, #0
 800628e:	e000      	b.n	8006292 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006290:	2302      	movs	r3, #2
  }
}
 8006292:	4618      	mov	r0, r3
 8006294:	372c      	adds	r7, #44	; 0x2c
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	08007325 	.word	0x08007325
 80062a4:	0800726d 	.word	0x0800726d

080062a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b0ba      	sub	sp, #232	; 0xe8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80062ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80062d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80062d6:	4013      	ands	r3, r2
 80062d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80062dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d115      	bne.n	8006310 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80062e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e8:	f003 0320 	and.w	r3, r3, #32
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00f      	beq.n	8006310 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f4:	f003 0320 	and.w	r3, r3, #32
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d009      	beq.n	8006310 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 82a6 	beq.w	8006852 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	4798      	blx	r3
      }
      return;
 800630e:	e2a0      	b.n	8006852 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006310:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 8117 	beq.w	8006548 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800631a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d106      	bne.n	8006334 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006326:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800632a:	4b85      	ldr	r3, [pc, #532]	; (8006540 <HAL_UART_IRQHandler+0x298>)
 800632c:	4013      	ands	r3, r2
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 810a 	beq.w	8006548 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	2b00      	cmp	r3, #0
 800633e:	d011      	beq.n	8006364 <HAL_UART_IRQHandler+0xbc>
 8006340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00b      	beq.n	8006364 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2201      	movs	r2, #1
 8006352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800635a:	f043 0201 	orr.w	r2, r3, #1
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d011      	beq.n	8006394 <HAL_UART_IRQHandler+0xec>
 8006370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00b      	beq.n	8006394 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2202      	movs	r2, #2
 8006382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800638a:	f043 0204 	orr.w	r2, r3, #4
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b00      	cmp	r3, #0
 800639e:	d011      	beq.n	80063c4 <HAL_UART_IRQHandler+0x11c>
 80063a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00b      	beq.n	80063c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2204      	movs	r2, #4
 80063b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063ba:	f043 0202 	orr.w	r2, r3, #2
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80063c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c8:	f003 0308 	and.w	r3, r3, #8
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d017      	beq.n	8006400 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063d4:	f003 0320 	and.w	r3, r3, #32
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d105      	bne.n	80063e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80063dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00b      	beq.n	8006400 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2208      	movs	r2, #8
 80063ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063f6:	f043 0208 	orr.w	r2, r3, #8
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006408:	2b00      	cmp	r3, #0
 800640a:	d012      	beq.n	8006432 <HAL_UART_IRQHandler+0x18a>
 800640c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006410:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00c      	beq.n	8006432 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006420:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006428:	f043 0220 	orr.w	r2, r3, #32
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 820c 	beq.w	8006856 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800643e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006442:	f003 0320 	and.w	r3, r3, #32
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00d      	beq.n	8006466 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800644a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800644e:	f003 0320 	and.w	r3, r3, #32
 8006452:	2b00      	cmp	r3, #0
 8006454:	d007      	beq.n	8006466 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800646c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800647a:	2b40      	cmp	r3, #64	; 0x40
 800647c:	d005      	beq.n	800648a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800647e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006482:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006486:	2b00      	cmp	r3, #0
 8006488:	d04f      	beq.n	800652a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fe75 	bl	800717a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649a:	2b40      	cmp	r3, #64	; 0x40
 800649c:	d141      	bne.n	8006522 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3308      	adds	r3, #8
 80064a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064ac:	e853 3f00 	ldrex	r3, [r3]
 80064b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80064b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3308      	adds	r3, #8
 80064c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80064ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80064ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80064d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80064e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1d9      	bne.n	800649e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d013      	beq.n	800651a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f6:	4a13      	ldr	r2, [pc, #76]	; (8006544 <HAL_UART_IRQHandler+0x29c>)
 80064f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fb fe40 	bl	8002184 <HAL_DMA_Abort_IT>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d017      	beq.n	800653a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800650e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006514:	4610      	mov	r0, r2
 8006516:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006518:	e00f      	b.n	800653a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f9b0 	bl	8006880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006520:	e00b      	b.n	800653a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f9ac 	bl	8006880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006528:	e007      	b.n	800653a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f9a8 	bl	8006880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006538:	e18d      	b.n	8006856 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800653a:	bf00      	nop
    return;
 800653c:	e18b      	b.n	8006856 <HAL_UART_IRQHandler+0x5ae>
 800653e:	bf00      	nop
 8006540:	04000120 	.word	0x04000120
 8006544:	08007241 	.word	0x08007241

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800654c:	2b01      	cmp	r3, #1
 800654e:	f040 8146 	bne.w	80067de <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006556:	f003 0310 	and.w	r3, r3, #16
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 813f 	beq.w	80067de <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006564:	f003 0310 	and.w	r3, r3, #16
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 8138 	beq.w	80067de <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2210      	movs	r2, #16
 8006574:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006580:	2b40      	cmp	r3, #64	; 0x40
 8006582:	f040 80b4 	bne.w	80066ee <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006592:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 815f 	beq.w	800685a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80065a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065a6:	429a      	cmp	r2, r3
 80065a8:	f080 8157 	bcs.w	800685a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0320 	and.w	r3, r3, #32
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f040 8085 	bne.w	80066d2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80065dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	461a      	mov	r2, r3
 80065ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80065f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80065fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800660a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1da      	bne.n	80065c8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3308      	adds	r3, #8
 8006618:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800661c:	e853 3f00 	ldrex	r3, [r3]
 8006620:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006624:	f023 0301 	bic.w	r3, r3, #1
 8006628:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3308      	adds	r3, #8
 8006632:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006636:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800663a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800663e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006642:	e841 2300 	strex	r3, r2, [r1]
 8006646:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1e1      	bne.n	8006612 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3308      	adds	r3, #8
 8006654:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006658:	e853 3f00 	ldrex	r3, [r3]
 800665c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800665e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3308      	adds	r3, #8
 800666e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006672:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006674:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006676:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006678:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800667a:	e841 2300 	strex	r3, r2, [r1]
 800667e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1e3      	bne.n	800664e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2220      	movs	r2, #32
 800668a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800669a:	e853 3f00 	ldrex	r3, [r3]
 800669e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066a2:	f023 0310 	bic.w	r3, r3, #16
 80066a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	461a      	mov	r2, r3
 80066b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80066b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066bc:	e841 2300 	strex	r3, r2, [r1]
 80066c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1e4      	bne.n	8006692 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fb fd1b 	bl	8002108 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066de:	b29b      	uxth	r3, r3
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	4619      	mov	r1, r3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f8d4 	bl	8006894 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066ec:	e0b5      	b.n	800685a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006708:	b29b      	uxth	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 80a7 	beq.w	800685e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006710:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 80a2 	beq.w	800685e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006722:	e853 3f00 	ldrex	r3, [r3]
 8006726:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800672e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	461a      	mov	r2, r3
 8006738:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800673c:	647b      	str	r3, [r7, #68]	; 0x44
 800673e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006740:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006744:	e841 2300 	strex	r3, r2, [r1]
 8006748:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800674a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1e4      	bne.n	800671a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3308      	adds	r3, #8
 8006756:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	e853 3f00 	ldrex	r3, [r3]
 800675e:	623b      	str	r3, [r7, #32]
   return(result);
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	f023 0301 	bic.w	r3, r3, #1
 8006766:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	3308      	adds	r3, #8
 8006770:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006774:	633a      	str	r2, [r7, #48]	; 0x30
 8006776:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006778:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800677a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800677c:	e841 2300 	strex	r3, r2, [r1]
 8006780:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1e3      	bne.n	8006750 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2220      	movs	r2, #32
 800678c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	e853 3f00 	ldrex	r3, [r3]
 80067a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0310 	bic.w	r3, r3, #16
 80067ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067bc:	61fb      	str	r3, [r7, #28]
 80067be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c0:	69b9      	ldr	r1, [r7, #24]
 80067c2:	69fa      	ldr	r2, [r7, #28]
 80067c4:	e841 2300 	strex	r3, r2, [r1]
 80067c8:	617b      	str	r3, [r7, #20]
   return(result);
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e4      	bne.n	800679a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067d4:	4619      	mov	r1, r3
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f85c 	bl	8006894 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067dc:	e03f      	b.n	800685e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80067de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00e      	beq.n	8006808 <HAL_UART_IRQHandler+0x560>
 80067ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d008      	beq.n	8006808 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80067fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fe19 	bl	8007438 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006806:	e02d      	b.n	8006864 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800680c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00e      	beq.n	8006832 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800681c:	2b00      	cmp	r3, #0
 800681e:	d008      	beq.n	8006832 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006824:	2b00      	cmp	r3, #0
 8006826:	d01c      	beq.n	8006862 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	4798      	blx	r3
    }
    return;
 8006830:	e017      	b.n	8006862 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800683a:	2b00      	cmp	r3, #0
 800683c:	d012      	beq.n	8006864 <HAL_UART_IRQHandler+0x5bc>
 800683e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00c      	beq.n	8006864 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fdca 	bl	80073e4 <UART_EndTransmit_IT>
    return;
 8006850:	e008      	b.n	8006864 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006852:	bf00      	nop
 8006854:	e006      	b.n	8006864 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006856:	bf00      	nop
 8006858:	e004      	b.n	8006864 <HAL_UART_IRQHandler+0x5bc>
      return;
 800685a:	bf00      	nop
 800685c:	e002      	b.n	8006864 <HAL_UART_IRQHandler+0x5bc>
      return;
 800685e:	bf00      	nop
 8006860:	e000      	b.n	8006864 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006862:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006864:	37e8      	adds	r7, #232	; 0xe8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop

0800686c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068b0:	b08a      	sub	sp, #40	; 0x28
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	431a      	orrs	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	431a      	orrs	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	4ba4      	ldr	r3, [pc, #656]	; (8006b6c <UART_SetConfig+0x2c0>)
 80068dc:	4013      	ands	r3, r2
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	6812      	ldr	r2, [r2, #0]
 80068e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068e4:	430b      	orrs	r3, r1
 80068e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a99      	ldr	r2, [pc, #612]	; (8006b70 <UART_SetConfig+0x2c4>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d004      	beq.n	8006918 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006914:	4313      	orrs	r3, r2
 8006916:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006928:	430a      	orrs	r2, r1
 800692a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a90      	ldr	r2, [pc, #576]	; (8006b74 <UART_SetConfig+0x2c8>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d126      	bne.n	8006984 <UART_SetConfig+0xd8>
 8006936:	4b90      	ldr	r3, [pc, #576]	; (8006b78 <UART_SetConfig+0x2cc>)
 8006938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800693c:	f003 0303 	and.w	r3, r3, #3
 8006940:	2b03      	cmp	r3, #3
 8006942:	d81b      	bhi.n	800697c <UART_SetConfig+0xd0>
 8006944:	a201      	add	r2, pc, #4	; (adr r2, 800694c <UART_SetConfig+0xa0>)
 8006946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694a:	bf00      	nop
 800694c:	0800695d 	.word	0x0800695d
 8006950:	0800696d 	.word	0x0800696d
 8006954:	08006965 	.word	0x08006965
 8006958:	08006975 	.word	0x08006975
 800695c:	2301      	movs	r3, #1
 800695e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006962:	e116      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006964:	2302      	movs	r3, #2
 8006966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800696a:	e112      	b.n	8006b92 <UART_SetConfig+0x2e6>
 800696c:	2304      	movs	r3, #4
 800696e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006972:	e10e      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006974:	2308      	movs	r3, #8
 8006976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800697a:	e10a      	b.n	8006b92 <UART_SetConfig+0x2e6>
 800697c:	2310      	movs	r3, #16
 800697e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006982:	e106      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a7c      	ldr	r2, [pc, #496]	; (8006b7c <UART_SetConfig+0x2d0>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d138      	bne.n	8006a00 <UART_SetConfig+0x154>
 800698e:	4b7a      	ldr	r3, [pc, #488]	; (8006b78 <UART_SetConfig+0x2cc>)
 8006990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006994:	f003 030c 	and.w	r3, r3, #12
 8006998:	2b0c      	cmp	r3, #12
 800699a:	d82d      	bhi.n	80069f8 <UART_SetConfig+0x14c>
 800699c:	a201      	add	r2, pc, #4	; (adr r2, 80069a4 <UART_SetConfig+0xf8>)
 800699e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a2:	bf00      	nop
 80069a4:	080069d9 	.word	0x080069d9
 80069a8:	080069f9 	.word	0x080069f9
 80069ac:	080069f9 	.word	0x080069f9
 80069b0:	080069f9 	.word	0x080069f9
 80069b4:	080069e9 	.word	0x080069e9
 80069b8:	080069f9 	.word	0x080069f9
 80069bc:	080069f9 	.word	0x080069f9
 80069c0:	080069f9 	.word	0x080069f9
 80069c4:	080069e1 	.word	0x080069e1
 80069c8:	080069f9 	.word	0x080069f9
 80069cc:	080069f9 	.word	0x080069f9
 80069d0:	080069f9 	.word	0x080069f9
 80069d4:	080069f1 	.word	0x080069f1
 80069d8:	2300      	movs	r3, #0
 80069da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069de:	e0d8      	b.n	8006b92 <UART_SetConfig+0x2e6>
 80069e0:	2302      	movs	r3, #2
 80069e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e6:	e0d4      	b.n	8006b92 <UART_SetConfig+0x2e6>
 80069e8:	2304      	movs	r3, #4
 80069ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ee:	e0d0      	b.n	8006b92 <UART_SetConfig+0x2e6>
 80069f0:	2308      	movs	r3, #8
 80069f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069f6:	e0cc      	b.n	8006b92 <UART_SetConfig+0x2e6>
 80069f8:	2310      	movs	r3, #16
 80069fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069fe:	e0c8      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a5e      	ldr	r2, [pc, #376]	; (8006b80 <UART_SetConfig+0x2d4>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d125      	bne.n	8006a56 <UART_SetConfig+0x1aa>
 8006a0a:	4b5b      	ldr	r3, [pc, #364]	; (8006b78 <UART_SetConfig+0x2cc>)
 8006a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a14:	2b30      	cmp	r3, #48	; 0x30
 8006a16:	d016      	beq.n	8006a46 <UART_SetConfig+0x19a>
 8006a18:	2b30      	cmp	r3, #48	; 0x30
 8006a1a:	d818      	bhi.n	8006a4e <UART_SetConfig+0x1a2>
 8006a1c:	2b20      	cmp	r3, #32
 8006a1e:	d00a      	beq.n	8006a36 <UART_SetConfig+0x18a>
 8006a20:	2b20      	cmp	r3, #32
 8006a22:	d814      	bhi.n	8006a4e <UART_SetConfig+0x1a2>
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d002      	beq.n	8006a2e <UART_SetConfig+0x182>
 8006a28:	2b10      	cmp	r3, #16
 8006a2a:	d008      	beq.n	8006a3e <UART_SetConfig+0x192>
 8006a2c:	e00f      	b.n	8006a4e <UART_SetConfig+0x1a2>
 8006a2e:	2300      	movs	r3, #0
 8006a30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a34:	e0ad      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a36:	2302      	movs	r3, #2
 8006a38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a3c:	e0a9      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a3e:	2304      	movs	r3, #4
 8006a40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a44:	e0a5      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a46:	2308      	movs	r3, #8
 8006a48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a4c:	e0a1      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a4e:	2310      	movs	r3, #16
 8006a50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a54:	e09d      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a4a      	ldr	r2, [pc, #296]	; (8006b84 <UART_SetConfig+0x2d8>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d125      	bne.n	8006aac <UART_SetConfig+0x200>
 8006a60:	4b45      	ldr	r3, [pc, #276]	; (8006b78 <UART_SetConfig+0x2cc>)
 8006a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a6a:	2bc0      	cmp	r3, #192	; 0xc0
 8006a6c:	d016      	beq.n	8006a9c <UART_SetConfig+0x1f0>
 8006a6e:	2bc0      	cmp	r3, #192	; 0xc0
 8006a70:	d818      	bhi.n	8006aa4 <UART_SetConfig+0x1f8>
 8006a72:	2b80      	cmp	r3, #128	; 0x80
 8006a74:	d00a      	beq.n	8006a8c <UART_SetConfig+0x1e0>
 8006a76:	2b80      	cmp	r3, #128	; 0x80
 8006a78:	d814      	bhi.n	8006aa4 <UART_SetConfig+0x1f8>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d002      	beq.n	8006a84 <UART_SetConfig+0x1d8>
 8006a7e:	2b40      	cmp	r3, #64	; 0x40
 8006a80:	d008      	beq.n	8006a94 <UART_SetConfig+0x1e8>
 8006a82:	e00f      	b.n	8006aa4 <UART_SetConfig+0x1f8>
 8006a84:	2300      	movs	r3, #0
 8006a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a8a:	e082      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a92:	e07e      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a94:	2304      	movs	r3, #4
 8006a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a9a:	e07a      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006a9c:	2308      	movs	r3, #8
 8006a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aa2:	e076      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006aa4:	2310      	movs	r3, #16
 8006aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aaa:	e072      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a35      	ldr	r2, [pc, #212]	; (8006b88 <UART_SetConfig+0x2dc>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d12a      	bne.n	8006b0c <UART_SetConfig+0x260>
 8006ab6:	4b30      	ldr	r3, [pc, #192]	; (8006b78 <UART_SetConfig+0x2cc>)
 8006ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006abc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ac0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ac4:	d01a      	beq.n	8006afc <UART_SetConfig+0x250>
 8006ac6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aca:	d81b      	bhi.n	8006b04 <UART_SetConfig+0x258>
 8006acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ad0:	d00c      	beq.n	8006aec <UART_SetConfig+0x240>
 8006ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ad6:	d815      	bhi.n	8006b04 <UART_SetConfig+0x258>
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <UART_SetConfig+0x238>
 8006adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ae0:	d008      	beq.n	8006af4 <UART_SetConfig+0x248>
 8006ae2:	e00f      	b.n	8006b04 <UART_SetConfig+0x258>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aea:	e052      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006aec:	2302      	movs	r3, #2
 8006aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006af2:	e04e      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006af4:	2304      	movs	r3, #4
 8006af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006afa:	e04a      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006afc:	2308      	movs	r3, #8
 8006afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b02:	e046      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006b04:	2310      	movs	r3, #16
 8006b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b0a:	e042      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a17      	ldr	r2, [pc, #92]	; (8006b70 <UART_SetConfig+0x2c4>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d13a      	bne.n	8006b8c <UART_SetConfig+0x2e0>
 8006b16:	4b18      	ldr	r3, [pc, #96]	; (8006b78 <UART_SetConfig+0x2cc>)
 8006b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b24:	d01a      	beq.n	8006b5c <UART_SetConfig+0x2b0>
 8006b26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b2a:	d81b      	bhi.n	8006b64 <UART_SetConfig+0x2b8>
 8006b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b30:	d00c      	beq.n	8006b4c <UART_SetConfig+0x2a0>
 8006b32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b36:	d815      	bhi.n	8006b64 <UART_SetConfig+0x2b8>
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d003      	beq.n	8006b44 <UART_SetConfig+0x298>
 8006b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b40:	d008      	beq.n	8006b54 <UART_SetConfig+0x2a8>
 8006b42:	e00f      	b.n	8006b64 <UART_SetConfig+0x2b8>
 8006b44:	2300      	movs	r3, #0
 8006b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b4a:	e022      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b52:	e01e      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006b54:	2304      	movs	r3, #4
 8006b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b5a:	e01a      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006b5c:	2308      	movs	r3, #8
 8006b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b62:	e016      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006b64:	2310      	movs	r3, #16
 8006b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b6a:	e012      	b.n	8006b92 <UART_SetConfig+0x2e6>
 8006b6c:	efff69f3 	.word	0xefff69f3
 8006b70:	40008000 	.word	0x40008000
 8006b74:	40013800 	.word	0x40013800
 8006b78:	40021000 	.word	0x40021000
 8006b7c:	40004400 	.word	0x40004400
 8006b80:	40004800 	.word	0x40004800
 8006b84:	40004c00 	.word	0x40004c00
 8006b88:	40005000 	.word	0x40005000
 8006b8c:	2310      	movs	r3, #16
 8006b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a9f      	ldr	r2, [pc, #636]	; (8006e14 <UART_SetConfig+0x568>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d17a      	bne.n	8006c92 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ba0:	2b08      	cmp	r3, #8
 8006ba2:	d824      	bhi.n	8006bee <UART_SetConfig+0x342>
 8006ba4:	a201      	add	r2, pc, #4	; (adr r2, 8006bac <UART_SetConfig+0x300>)
 8006ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006baa:	bf00      	nop
 8006bac:	08006bd1 	.word	0x08006bd1
 8006bb0:	08006bef 	.word	0x08006bef
 8006bb4:	08006bd9 	.word	0x08006bd9
 8006bb8:	08006bef 	.word	0x08006bef
 8006bbc:	08006bdf 	.word	0x08006bdf
 8006bc0:	08006bef 	.word	0x08006bef
 8006bc4:	08006bef 	.word	0x08006bef
 8006bc8:	08006bef 	.word	0x08006bef
 8006bcc:	08006be7 	.word	0x08006be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bd0:	f7fc ff22 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8006bd4:	61f8      	str	r0, [r7, #28]
        break;
 8006bd6:	e010      	b.n	8006bfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bd8:	4b8f      	ldr	r3, [pc, #572]	; (8006e18 <UART_SetConfig+0x56c>)
 8006bda:	61fb      	str	r3, [r7, #28]
        break;
 8006bdc:	e00d      	b.n	8006bfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bde:	f7fc fe83 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 8006be2:	61f8      	str	r0, [r7, #28]
        break;
 8006be4:	e009      	b.n	8006bfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bea:	61fb      	str	r3, [r7, #28]
        break;
 8006bec:	e005      	b.n	8006bfa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006bf8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f000 80fb 	beq.w	8006df8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	4613      	mov	r3, r2
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	4413      	add	r3, r2
 8006c0c:	69fa      	ldr	r2, [r7, #28]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d305      	bcc.n	8006c1e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c18:	69fa      	ldr	r2, [r7, #28]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d903      	bls.n	8006c26 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c24:	e0e8      	b.n	8006df8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	461c      	mov	r4, r3
 8006c2c:	4615      	mov	r5, r2
 8006c2e:	f04f 0200 	mov.w	r2, #0
 8006c32:	f04f 0300 	mov.w	r3, #0
 8006c36:	022b      	lsls	r3, r5, #8
 8006c38:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006c3c:	0222      	lsls	r2, r4, #8
 8006c3e:	68f9      	ldr	r1, [r7, #12]
 8006c40:	6849      	ldr	r1, [r1, #4]
 8006c42:	0849      	lsrs	r1, r1, #1
 8006c44:	2000      	movs	r0, #0
 8006c46:	4688      	mov	r8, r1
 8006c48:	4681      	mov	r9, r0
 8006c4a:	eb12 0a08 	adds.w	sl, r2, r8
 8006c4e:	eb43 0b09 	adc.w	fp, r3, r9
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	603b      	str	r3, [r7, #0]
 8006c5a:	607a      	str	r2, [r7, #4]
 8006c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c60:	4650      	mov	r0, sl
 8006c62:	4659      	mov	r1, fp
 8006c64:	f7f9 fb0c 	bl	8000280 <__aeabi_uldivmod>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c76:	d308      	bcc.n	8006c8a <UART_SetConfig+0x3de>
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c7e:	d204      	bcs.n	8006c8a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	69ba      	ldr	r2, [r7, #24]
 8006c86:	60da      	str	r2, [r3, #12]
 8006c88:	e0b6      	b.n	8006df8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c90:	e0b2      	b.n	8006df8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c9a:	d15e      	bne.n	8006d5a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006c9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d828      	bhi.n	8006cf6 <UART_SetConfig+0x44a>
 8006ca4:	a201      	add	r2, pc, #4	; (adr r2, 8006cac <UART_SetConfig+0x400>)
 8006ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006caa:	bf00      	nop
 8006cac:	08006cd1 	.word	0x08006cd1
 8006cb0:	08006cd9 	.word	0x08006cd9
 8006cb4:	08006ce1 	.word	0x08006ce1
 8006cb8:	08006cf7 	.word	0x08006cf7
 8006cbc:	08006ce7 	.word	0x08006ce7
 8006cc0:	08006cf7 	.word	0x08006cf7
 8006cc4:	08006cf7 	.word	0x08006cf7
 8006cc8:	08006cf7 	.word	0x08006cf7
 8006ccc:	08006cef 	.word	0x08006cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cd0:	f7fc fea2 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8006cd4:	61f8      	str	r0, [r7, #28]
        break;
 8006cd6:	e014      	b.n	8006d02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cd8:	f7fc feb4 	bl	8003a44 <HAL_RCC_GetPCLK2Freq>
 8006cdc:	61f8      	str	r0, [r7, #28]
        break;
 8006cde:	e010      	b.n	8006d02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ce0:	4b4d      	ldr	r3, [pc, #308]	; (8006e18 <UART_SetConfig+0x56c>)
 8006ce2:	61fb      	str	r3, [r7, #28]
        break;
 8006ce4:	e00d      	b.n	8006d02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ce6:	f7fc fdff 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 8006cea:	61f8      	str	r0, [r7, #28]
        break;
 8006cec:	e009      	b.n	8006d02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cf2:	61fb      	str	r3, [r7, #28]
        break;
 8006cf4:	e005      	b.n	8006d02 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d077      	beq.n	8006df8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	005a      	lsls	r2, r3, #1
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	085b      	lsrs	r3, r3, #1
 8006d12:	441a      	add	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	2b0f      	cmp	r3, #15
 8006d22:	d916      	bls.n	8006d52 <UART_SetConfig+0x4a6>
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d2a:	d212      	bcs.n	8006d52 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	f023 030f 	bic.w	r3, r3, #15
 8006d34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	085b      	lsrs	r3, r3, #1
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	f003 0307 	and.w	r3, r3, #7
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	8afb      	ldrh	r3, [r7, #22]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	8afa      	ldrh	r2, [r7, #22]
 8006d4e:	60da      	str	r2, [r3, #12]
 8006d50:	e052      	b.n	8006df8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d58:	e04e      	b.n	8006df8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d5e:	2b08      	cmp	r3, #8
 8006d60:	d827      	bhi.n	8006db2 <UART_SetConfig+0x506>
 8006d62:	a201      	add	r2, pc, #4	; (adr r2, 8006d68 <UART_SetConfig+0x4bc>)
 8006d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d68:	08006d8d 	.word	0x08006d8d
 8006d6c:	08006d95 	.word	0x08006d95
 8006d70:	08006d9d 	.word	0x08006d9d
 8006d74:	08006db3 	.word	0x08006db3
 8006d78:	08006da3 	.word	0x08006da3
 8006d7c:	08006db3 	.word	0x08006db3
 8006d80:	08006db3 	.word	0x08006db3
 8006d84:	08006db3 	.word	0x08006db3
 8006d88:	08006dab 	.word	0x08006dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d8c:	f7fc fe44 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8006d90:	61f8      	str	r0, [r7, #28]
        break;
 8006d92:	e014      	b.n	8006dbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d94:	f7fc fe56 	bl	8003a44 <HAL_RCC_GetPCLK2Freq>
 8006d98:	61f8      	str	r0, [r7, #28]
        break;
 8006d9a:	e010      	b.n	8006dbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d9c:	4b1e      	ldr	r3, [pc, #120]	; (8006e18 <UART_SetConfig+0x56c>)
 8006d9e:	61fb      	str	r3, [r7, #28]
        break;
 8006da0:	e00d      	b.n	8006dbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006da2:	f7fc fda1 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 8006da6:	61f8      	str	r0, [r7, #28]
        break;
 8006da8:	e009      	b.n	8006dbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dae:	61fb      	str	r3, [r7, #28]
        break;
 8006db0:	e005      	b.n	8006dbe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006dbc:	bf00      	nop
    }

    if (pclk != 0U)
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d019      	beq.n	8006df8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	085a      	lsrs	r2, r3, #1
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	441a      	add	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	2b0f      	cmp	r3, #15
 8006ddc:	d909      	bls.n	8006df2 <UART_SetConfig+0x546>
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006de4:	d205      	bcs.n	8006df2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	60da      	str	r2, [r3, #12]
 8006df0:	e002      	b.n	8006df8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006e04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3728      	adds	r7, #40	; 0x28
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e12:	bf00      	nop
 8006e14:	40008000 	.word	0x40008000
 8006e18:	00f42400 	.word	0x00f42400

08006e1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00a      	beq.n	8006e46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4a:	f003 0302 	and.w	r3, r3, #2
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00a      	beq.n	8006e68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	430a      	orrs	r2, r1
 8006e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6c:	f003 0304 	and.w	r3, r3, #4
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00a      	beq.n	8006e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8e:	f003 0308 	and.w	r3, r3, #8
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00a      	beq.n	8006eac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb0:	f003 0310 	and.w	r3, r3, #16
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00a      	beq.n	8006ece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed2:	f003 0320 	and.w	r3, r3, #32
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	430a      	orrs	r2, r1
 8006eee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d01a      	beq.n	8006f32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f1a:	d10a      	bne.n	8006f32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	430a      	orrs	r2, r1
 8006f52:	605a      	str	r2, [r3, #4]
  }
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af02      	add	r7, sp, #8
 8006f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f70:	f7fa feac 	bl	8001ccc <HAL_GetTick>
 8006f74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0308 	and.w	r3, r3, #8
 8006f80:	2b08      	cmp	r3, #8
 8006f82:	d10e      	bne.n	8006fa2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f82d 	bl	8006ff2 <UART_WaitOnFlagUntilTimeout>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e023      	b.n	8006fea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0304 	and.w	r3, r3, #4
 8006fac:	2b04      	cmp	r3, #4
 8006fae:	d10e      	bne.n	8006fce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f817 	bl	8006ff2 <UART_WaitOnFlagUntilTimeout>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d001      	beq.n	8006fce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e00d      	b.n	8006fea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2220      	movs	r2, #32
 8006fd2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b09c      	sub	sp, #112	; 0x70
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	60f8      	str	r0, [r7, #12]
 8006ffa:	60b9      	str	r1, [r7, #8]
 8006ffc:	603b      	str	r3, [r7, #0]
 8006ffe:	4613      	mov	r3, r2
 8007000:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007002:	e0a5      	b.n	8007150 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700a:	f000 80a1 	beq.w	8007150 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800700e:	f7fa fe5d 	bl	8001ccc <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800701a:	429a      	cmp	r2, r3
 800701c:	d302      	bcc.n	8007024 <UART_WaitOnFlagUntilTimeout+0x32>
 800701e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007020:	2b00      	cmp	r3, #0
 8007022:	d13e      	bne.n	80070a2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800702c:	e853 3f00 	ldrex	r3, [r3]
 8007030:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007034:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007038:	667b      	str	r3, [r7, #100]	; 0x64
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	461a      	mov	r2, r3
 8007040:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007042:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007044:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007046:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007048:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800704a:	e841 2300 	strex	r3, r2, [r1]
 800704e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1e6      	bne.n	8007024 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3308      	adds	r3, #8
 800705c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007060:	e853 3f00 	ldrex	r3, [r3]
 8007064:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007068:	f023 0301 	bic.w	r3, r3, #1
 800706c:	663b      	str	r3, [r7, #96]	; 0x60
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3308      	adds	r3, #8
 8007074:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007076:	64ba      	str	r2, [r7, #72]	; 0x48
 8007078:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800707c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800707e:	e841 2300 	strex	r3, r2, [r1]
 8007082:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1e5      	bne.n	8007056 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2220      	movs	r2, #32
 800708e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2220      	movs	r2, #32
 8007094:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e067      	b.n	8007172 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0304 	and.w	r3, r3, #4
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d04f      	beq.n	8007150 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070be:	d147      	bne.n	8007150 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070c8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	461a      	mov	r2, r3
 80070e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e8:	637b      	str	r3, [r7, #52]	; 0x34
 80070ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070f0:	e841 2300 	strex	r3, r2, [r1]
 80070f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e6      	bne.n	80070ca <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3308      	adds	r3, #8
 8007102:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	e853 3f00 	ldrex	r3, [r3]
 800710a:	613b      	str	r3, [r7, #16]
   return(result);
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	f023 0301 	bic.w	r3, r3, #1
 8007112:	66bb      	str	r3, [r7, #104]	; 0x68
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	3308      	adds	r3, #8
 800711a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800711c:	623a      	str	r2, [r7, #32]
 800711e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007120:	69f9      	ldr	r1, [r7, #28]
 8007122:	6a3a      	ldr	r2, [r7, #32]
 8007124:	e841 2300 	strex	r3, r2, [r1]
 8007128:	61bb      	str	r3, [r7, #24]
   return(result);
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1e5      	bne.n	80070fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2220      	movs	r2, #32
 8007134:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2220      	movs	r2, #32
 800713a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2220      	movs	r2, #32
 8007140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e010      	b.n	8007172 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	69da      	ldr	r2, [r3, #28]
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	4013      	ands	r3, r2
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	429a      	cmp	r2, r3
 800715e:	bf0c      	ite	eq
 8007160:	2301      	moveq	r3, #1
 8007162:	2300      	movne	r3, #0
 8007164:	b2db      	uxtb	r3, r3
 8007166:	461a      	mov	r2, r3
 8007168:	79fb      	ldrb	r3, [r7, #7]
 800716a:	429a      	cmp	r2, r3
 800716c:	f43f af4a 	beq.w	8007004 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3770      	adds	r7, #112	; 0x70
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800717a:	b480      	push	{r7}
 800717c:	b095      	sub	sp, #84	; 0x54
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800718a:	e853 3f00 	ldrex	r3, [r3]
 800718e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	461a      	mov	r2, r3
 800719e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071a0:	643b      	str	r3, [r7, #64]	; 0x40
 80071a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071a8:	e841 2300 	strex	r3, r2, [r1]
 80071ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1e6      	bne.n	8007182 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	3308      	adds	r3, #8
 80071ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	e853 3f00 	ldrex	r3, [r3]
 80071c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	f023 0301 	bic.w	r3, r3, #1
 80071ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	3308      	adds	r3, #8
 80071d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071dc:	e841 2300 	strex	r3, r2, [r1]
 80071e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1e5      	bne.n	80071b4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d118      	bne.n	8007222 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	e853 3f00 	ldrex	r3, [r3]
 80071fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	f023 0310 	bic.w	r3, r3, #16
 8007204:	647b      	str	r3, [r7, #68]	; 0x44
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800720e:	61bb      	str	r3, [r7, #24]
 8007210:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007212:	6979      	ldr	r1, [r7, #20]
 8007214:	69ba      	ldr	r2, [r7, #24]
 8007216:	e841 2300 	strex	r3, r2, [r1]
 800721a:	613b      	str	r3, [r7, #16]
   return(result);
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1e6      	bne.n	80071f0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2220      	movs	r2, #32
 8007226:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007234:	bf00      	nop
 8007236:	3754      	adds	r7, #84	; 0x54
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f7ff fb0e 	bl	8006880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007264:	bf00      	nop
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800726c:	b480      	push	{r7}
 800726e:	b08f      	sub	sp, #60	; 0x3c
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007278:	2b21      	cmp	r3, #33	; 0x21
 800727a:	d14d      	bne.n	8007318 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007282:	b29b      	uxth	r3, r3
 8007284:	2b00      	cmp	r3, #0
 8007286:	d132      	bne.n	80072ee <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728e:	6a3b      	ldr	r3, [r7, #32]
 8007290:	e853 3f00 	ldrex	r3, [r3]
 8007294:	61fb      	str	r3, [r7, #28]
   return(result);
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800729c:	637b      	str	r3, [r7, #52]	; 0x34
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	461a      	mov	r2, r3
 80072a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072a8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072ae:	e841 2300 	strex	r3, r2, [r1]
 80072b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1e6      	bne.n	8007288 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	e853 3f00 	ldrex	r3, [r3]
 80072c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072ce:	633b      	str	r3, [r7, #48]	; 0x30
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	461a      	mov	r2, r3
 80072d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d8:	61bb      	str	r3, [r7, #24]
 80072da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072dc:	6979      	ldr	r1, [r7, #20]
 80072de:	69ba      	ldr	r2, [r7, #24]
 80072e0:	e841 2300 	strex	r3, r2, [r1]
 80072e4:	613b      	str	r3, [r7, #16]
   return(result);
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1e6      	bne.n	80072ba <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80072ec:	e014      	b.n	8007318 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072f2:	781a      	ldrb	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	b292      	uxth	r2, r2
 80072fa:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007300:	1c5a      	adds	r2, r3, #1
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800730c:	b29b      	uxth	r3, r3
 800730e:	3b01      	subs	r3, #1
 8007310:	b29a      	uxth	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007318:	bf00      	nop
 800731a:	373c      	adds	r7, #60	; 0x3c
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007324:	b480      	push	{r7}
 8007326:	b091      	sub	sp, #68	; 0x44
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007330:	2b21      	cmp	r3, #33	; 0x21
 8007332:	d151      	bne.n	80073d8 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800733a:	b29b      	uxth	r3, r3
 800733c:	2b00      	cmp	r3, #0
 800733e:	d132      	bne.n	80073a6 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	e853 3f00 	ldrex	r3, [r3]
 800734c:	623b      	str	r3, [r7, #32]
   return(result);
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007354:	63bb      	str	r3, [r7, #56]	; 0x38
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	461a      	mov	r2, r3
 800735c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735e:	633b      	str	r3, [r7, #48]	; 0x30
 8007360:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007362:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007366:	e841 2300 	strex	r3, r2, [r1]
 800736a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800736c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1e6      	bne.n	8007340 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	e853 3f00 	ldrex	r3, [r3]
 800737e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007386:	637b      	str	r3, [r7, #52]	; 0x34
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	461a      	mov	r2, r3
 800738e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007390:	61fb      	str	r3, [r7, #28]
 8007392:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007394:	69b9      	ldr	r1, [r7, #24]
 8007396:	69fa      	ldr	r2, [r7, #28]
 8007398:	e841 2300 	strex	r3, r2, [r1]
 800739c:	617b      	str	r3, [r7, #20]
   return(result);
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1e6      	bne.n	8007372 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80073a4:	e018      	b.n	80073d8 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80073ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ae:	881a      	ldrh	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073b8:	b292      	uxth	r2, r2
 80073ba:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073c0:	1c9a      	adds	r2, r3, #2
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	3b01      	subs	r3, #1
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80073d8:	bf00      	nop
 80073da:	3744      	adds	r7, #68	; 0x44
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b088      	sub	sp, #32
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	e853 3f00 	ldrex	r3, [r3]
 80073f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007400:	61fb      	str	r3, [r7, #28]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	61bb      	str	r3, [r7, #24]
 800740c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740e:	6979      	ldr	r1, [r7, #20]
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	e841 2300 	strex	r3, r2, [r1]
 8007416:	613b      	str	r3, [r7, #16]
   return(result);
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1e6      	bne.n	80073ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2220      	movs	r2, #32
 8007422:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f7ff fa1e 	bl	800686c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007430:	bf00      	nop
 8007432:	3720      	adds	r7, #32
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800744c:	b084      	sub	sp, #16
 800744e:	b580      	push	{r7, lr}
 8007450:	b084      	sub	sp, #16
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	f107 001c 	add.w	r0, r7, #28
 800745a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fa70 	bl	8007950 <USB_CoreReset>
 8007470:	4603      	mov	r3, r0
 8007472:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007476:	2b00      	cmp	r3, #0
 8007478:	d106      	bne.n	8007488 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	639a      	str	r2, [r3, #56]	; 0x38
 8007486:	e005      	b.n	8007494 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007494:	7bfb      	ldrb	r3, [r7, #15]
}
 8007496:	4618      	mov	r0, r3
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074a0:	b004      	add	sp, #16
 80074a2:	4770      	bx	lr

080074a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f023 0201 	bic.w	r2, r3, #1
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	370c      	adds	r7, #12
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	460b      	mov	r3, r1
 80074d0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80074e2:	78fb      	ldrb	r3, [r7, #3]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d115      	bne.n	8007514 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80074f4:	2001      	movs	r0, #1
 80074f6:	f7fa fbf5 	bl	8001ce4 <HAL_Delay>
      ms++;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3301      	adds	r3, #1
 80074fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fa17 	bl	8007934 <USB_GetMode>
 8007506:	4603      	mov	r3, r0
 8007508:	2b01      	cmp	r3, #1
 800750a:	d01e      	beq.n	800754a <USB_SetCurrentMode+0x84>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2b31      	cmp	r3, #49	; 0x31
 8007510:	d9f0      	bls.n	80074f4 <USB_SetCurrentMode+0x2e>
 8007512:	e01a      	b.n	800754a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007514:	78fb      	ldrb	r3, [r7, #3]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d115      	bne.n	8007546 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007526:	2001      	movs	r0, #1
 8007528:	f7fa fbdc 	bl	8001ce4 <HAL_Delay>
      ms++;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	3301      	adds	r3, #1
 8007530:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f9fe 	bl	8007934 <USB_GetMode>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d005      	beq.n	800754a <USB_SetCurrentMode+0x84>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2b31      	cmp	r3, #49	; 0x31
 8007542:	d9f0      	bls.n	8007526 <USB_SetCurrentMode+0x60>
 8007544:	e001      	b.n	800754a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e005      	b.n	8007556 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2b32      	cmp	r3, #50	; 0x32
 800754e:	d101      	bne.n	8007554 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e000      	b.n	8007556 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
	...

08007560 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007560:	b084      	sub	sp, #16
 8007562:	b580      	push	{r7, lr}
 8007564:	b086      	sub	sp, #24
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800756e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800757a:	2300      	movs	r3, #0
 800757c:	613b      	str	r3, [r7, #16]
 800757e:	e009      	b.n	8007594 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	3340      	adds	r3, #64	; 0x40
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	2200      	movs	r2, #0
 800758c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	3301      	adds	r3, #1
 8007592:	613b      	str	r3, [r7, #16]
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	2b0e      	cmp	r3, #14
 8007598:	d9f2      	bls.n	8007580 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800759a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800759c:	2b00      	cmp	r3, #0
 800759e:	d11c      	bne.n	80075da <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075ae:	f043 0302 	orr.w	r3, r3, #2
 80075b2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	601a      	str	r2, [r3, #0]
 80075d8:	e005      	b.n	80075e6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075ec:	461a      	mov	r2, r3
 80075ee:	2300      	movs	r3, #0
 80075f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075f8:	4619      	mov	r1, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007600:	461a      	mov	r2, r3
 8007602:	680b      	ldr	r3, [r1, #0]
 8007604:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007606:	2103      	movs	r1, #3
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f959 	bl	80078c0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800760e:	2110      	movs	r1, #16
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f8f1 	bl	80077f8 <USB_FlushTxFifo>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f91d 	bl	8007860 <USB_FlushRxFifo>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007636:	461a      	mov	r2, r3
 8007638:	2300      	movs	r3, #0
 800763a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007642:	461a      	mov	r2, r3
 8007644:	2300      	movs	r3, #0
 8007646:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800764e:	461a      	mov	r2, r3
 8007650:	2300      	movs	r3, #0
 8007652:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007654:	2300      	movs	r3, #0
 8007656:	613b      	str	r3, [r7, #16]
 8007658:	e043      	b.n	80076e2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	015a      	lsls	r2, r3, #5
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	4413      	add	r3, r2
 8007662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800766c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007670:	d118      	bne.n	80076a4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10a      	bne.n	800768e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007684:	461a      	mov	r2, r3
 8007686:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800768a:	6013      	str	r3, [r2, #0]
 800768c:	e013      	b.n	80076b6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769a:	461a      	mov	r2, r3
 800769c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80076a0:	6013      	str	r3, [r2, #0]
 80076a2:	e008      	b.n	80076b6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b0:	461a      	mov	r2, r3
 80076b2:	2300      	movs	r3, #0
 80076b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c2:	461a      	mov	r2, r3
 80076c4:	2300      	movs	r3, #0
 80076c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d4:	461a      	mov	r2, r3
 80076d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80076da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	3301      	adds	r3, #1
 80076e0:	613b      	str	r3, [r7, #16]
 80076e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d3b7      	bcc.n	800765a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076ea:	2300      	movs	r3, #0
 80076ec:	613b      	str	r3, [r7, #16]
 80076ee:	e043      	b.n	8007778 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	015a      	lsls	r2, r3, #5
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	4413      	add	r3, r2
 80076f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007702:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007706:	d118      	bne.n	800773a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10a      	bne.n	8007724 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	015a      	lsls	r2, r3, #5
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	4413      	add	r3, r2
 8007716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771a:	461a      	mov	r2, r3
 800771c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007720:	6013      	str	r3, [r2, #0]
 8007722:	e013      	b.n	800774c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4413      	add	r3, r2
 800772c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007730:	461a      	mov	r2, r3
 8007732:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	e008      	b.n	800774c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	4413      	add	r3, r2
 8007742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007746:	461a      	mov	r2, r3
 8007748:	2300      	movs	r3, #0
 800774a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	015a      	lsls	r2, r3, #5
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4413      	add	r3, r2
 8007754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007758:	461a      	mov	r2, r3
 800775a:	2300      	movs	r3, #0
 800775c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	015a      	lsls	r2, r3, #5
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	4413      	add	r3, r2
 8007766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800776a:	461a      	mov	r2, r3
 800776c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007770:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	3301      	adds	r3, #1
 8007776:	613b      	str	r3, [r7, #16]
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	429a      	cmp	r2, r3
 800777e:	d3b7      	bcc.n	80076f0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800778e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007792:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80077a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	699b      	ldr	r3, [r3, #24]
 80077a6:	f043 0210 	orr.w	r2, r3, #16
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	699a      	ldr	r2, [r3, #24]
 80077b2:	4b10      	ldr	r3, [pc, #64]	; (80077f4 <USB_DevInit+0x294>)
 80077b4:	4313      	orrs	r3, r2
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80077ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d005      	beq.n	80077cc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	f043 0208 	orr.w	r2, r3, #8
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80077cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d107      	bne.n	80077e2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077da:	f043 0304 	orr.w	r3, r3, #4
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80077e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3718      	adds	r7, #24
 80077e8:	46bd      	mov	sp, r7
 80077ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077ee:	b004      	add	sp, #16
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	803c3800 	.word	0x803c3800

080077f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007802:	2300      	movs	r3, #0
 8007804:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	3301      	adds	r3, #1
 800780a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4a13      	ldr	r2, [pc, #76]	; (800785c <USB_FlushTxFifo+0x64>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d901      	bls.n	8007818 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	e01b      	b.n	8007850 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	2b00      	cmp	r3, #0
 800781e:	daf2      	bge.n	8007806 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007820:	2300      	movs	r3, #0
 8007822:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	019b      	lsls	r3, r3, #6
 8007828:	f043 0220 	orr.w	r2, r3, #32
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	3301      	adds	r3, #1
 8007834:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	4a08      	ldr	r2, [pc, #32]	; (800785c <USB_FlushTxFifo+0x64>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d901      	bls.n	8007842 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e006      	b.n	8007850 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	f003 0320 	and.w	r3, r3, #32
 800784a:	2b20      	cmp	r3, #32
 800784c:	d0f0      	beq.n	8007830 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr
 800785c:	00030d40 	.word	0x00030d40

08007860 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007868:	2300      	movs	r3, #0
 800786a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3301      	adds	r3, #1
 8007870:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	4a11      	ldr	r2, [pc, #68]	; (80078bc <USB_FlushRxFifo+0x5c>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d901      	bls.n	800787e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e018      	b.n	80078b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	2b00      	cmp	r3, #0
 8007884:	daf2      	bge.n	800786c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007886:	2300      	movs	r3, #0
 8007888:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2210      	movs	r2, #16
 800788e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	3301      	adds	r3, #1
 8007894:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	4a08      	ldr	r2, [pc, #32]	; (80078bc <USB_FlushRxFifo+0x5c>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d901      	bls.n	80078a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e006      	b.n	80078b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	f003 0310 	and.w	r3, r3, #16
 80078aa:	2b10      	cmp	r3, #16
 80078ac:	d0f0      	beq.n	8007890 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	00030d40 	.word	0x00030d40

080078c0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	460b      	mov	r3, r1
 80078ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	78fb      	ldrb	r3, [r7, #3]
 80078da:	68f9      	ldr	r1, [r7, #12]
 80078dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078e0:	4313      	orrs	r3, r2
 80078e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b085      	sub	sp, #20
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800790c:	f023 0303 	bic.w	r3, r3, #3
 8007910:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007920:	f043 0302 	orr.w	r3, r3, #2
 8007924:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3714      	adds	r7, #20
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	695b      	ldr	r3, [r3, #20]
 8007940:	f003 0301 	and.w	r3, r3, #1
}
 8007944:	4618      	mov	r0, r3
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007958:	2300      	movs	r3, #0
 800795a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	3301      	adds	r3, #1
 8007960:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	4a13      	ldr	r2, [pc, #76]	; (80079b4 <USB_CoreReset+0x64>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d901      	bls.n	800796e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e01b      	b.n	80079a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	2b00      	cmp	r3, #0
 8007974:	daf2      	bge.n	800795c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	f043 0201 	orr.w	r2, r3, #1
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	3301      	adds	r3, #1
 800798a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	4a09      	ldr	r2, [pc, #36]	; (80079b4 <USB_CoreReset+0x64>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d901      	bls.n	8007998 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	e006      	b.n	80079a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	f003 0301 	and.w	r3, r3, #1
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d0f0      	beq.n	8007986 <USB_CoreReset+0x36>

  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3714      	adds	r7, #20
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	00030d40 	.word	0x00030d40

080079b8 <ParseNumber>:
 * @brief  Parses and returns number from string.
 * @param  ptr: pointer to string
 * @param  cnt: pointer to the number of parsed digit
 * @retval integer value.
 */
static int32_t ParseNumber(char *ptr, uint8_t *cnt) {
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
	uint8_t minus = 0, i = 0;
 80079c2:	2300      	movs	r3, #0
 80079c4:	73fb      	strb	r3, [r7, #15]
 80079c6:	2300      	movs	r3, #0
 80079c8:	73bb      	strb	r3, [r7, #14]
	int32_t sum = 0;
 80079ca:	2300      	movs	r3, #0
 80079cc:	60bb      	str	r3, [r7, #8]

	if (*ptr == '-') { /* Check for minus character */
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	2b2d      	cmp	r3, #45	; 0x2d
 80079d4:	d119      	bne.n	8007a0a <ParseNumber+0x52>
		minus = 1;
 80079d6:	2301      	movs	r3, #1
 80079d8:	73fb      	strb	r3, [r7, #15]
		ptr++;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	3301      	adds	r3, #1
 80079de:	607b      	str	r3, [r7, #4]
		i++;
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	3301      	adds	r3, #1
 80079e4:	73bb      	strb	r3, [r7, #14]
	}
	while (CHARISNUM(*ptr)) { /* Parse number */
 80079e6:	e010      	b.n	8007a0a <ParseNumber+0x52>
		sum = 10 * sum + CHAR2NUM(*ptr);
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	4613      	mov	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4413      	add	r3, r2
 80079f0:	005b      	lsls	r3, r3, #1
 80079f2:	461a      	mov	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	3b30      	subs	r3, #48	; 0x30
 80079fa:	4413      	add	r3, r2
 80079fc:	60bb      	str	r3, [r7, #8]
		ptr++;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	3301      	adds	r3, #1
 8007a02:	607b      	str	r3, [r7, #4]
		i++;
 8007a04:	7bbb      	ldrb	r3, [r7, #14]
 8007a06:	3301      	adds	r3, #1
 8007a08:	73bb      	strb	r3, [r7, #14]
	while (CHARISNUM(*ptr)) { /* Parse number */
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	2b2f      	cmp	r3, #47	; 0x2f
 8007a10:	d903      	bls.n	8007a1a <ParseNumber+0x62>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	2b39      	cmp	r3, #57	; 0x39
 8007a18:	d9e6      	bls.n	80079e8 <ParseNumber+0x30>
	}
	if (cnt != NULL) { /* Save number of characters used for number */
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d002      	beq.n	8007a26 <ParseNumber+0x6e>
		*cnt = i;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	7bba      	ldrb	r2, [r7, #14]
 8007a24:	701a      	strb	r2, [r3, #0]
	}
	if (minus) { /* Minus detected */
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d002      	beq.n	8007a32 <ParseNumber+0x7a>
		return 0 - sum;
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	425b      	negs	r3, r3
 8007a30:	e000      	b.n	8007a34 <ParseNumber+0x7c>
	}
	return sum; /* Return number */
 8007a32:	68bb      	ldr	r3, [r7, #8]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <ParseIP>:
 * @brief  Parses and returns IP address.
 * @param  ptr: pointer to string
 * @param  arr: pointer to IP array
 * @retval None.
 */
static void ParseIP(char *ptr, uint8_t *arr) {
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
	uint8_t hexnum = 0, hexcnt;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	73fb      	strb	r3, [r7, #15]

	while (*ptr) {
 8007a4e:	e019      	b.n	8007a84 <ParseIP+0x44>
		hexcnt = 1;
 8007a50:	2301      	movs	r3, #1
 8007a52:	73bb      	strb	r3, [r7, #14]
		if (*ptr != '.') {
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	2b2e      	cmp	r3, #46	; 0x2e
 8007a5a:	d00e      	beq.n	8007a7a <ParseIP+0x3a>
			arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8007a5c:	f107 030e 	add.w	r3, r7, #14
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7ff ffa8 	bl	80079b8 <ParseNumber>
 8007a68:	4601      	mov	r1, r0
 8007a6a:	7bfb      	ldrb	r3, [r7, #15]
 8007a6c:	1c5a      	adds	r2, r3, #1
 8007a6e:	73fa      	strb	r2, [r7, #15]
 8007a70:	461a      	mov	r2, r3
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	4413      	add	r3, r2
 8007a76:	b2ca      	uxtb	r2, r1
 8007a78:	701a      	strb	r2, [r3, #0]
		}
		ptr = ptr + hexcnt;
 8007a7a:	7bbb      	ldrb	r3, [r7, #14]
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4413      	add	r3, r2
 8007a82:	607b      	str	r3, [r7, #4]
	while (*ptr) {
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1e1      	bne.n	8007a50 <ParseIP+0x10>
	}
}
 8007a8c:	bf00      	nop
 8007a8e:	bf00      	nop
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
	...

08007a98 <AT_ParseInfo>:
 * @brief  Parses ES module informations and save them in the handle.
 * @param  Obj: pointer to module handle
 * @param  ptr: pointer to string
 * @retval None.
 */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata) {
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
	char *ptr;
	uint8_t num = 0;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	72fb      	strb	r3, [r7, #11]

	ptr = strtok((char*) pdata + 2, ",");
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	3302      	adds	r3, #2
 8007aaa:	4934      	ldr	r1, [pc, #208]	; (8007b7c <AT_ParseInfo+0xe4>)
 8007aac:	4618      	mov	r0, r3
 8007aae:	f005 f8eb 	bl	800cc88 <strtok>
 8007ab2:	60f8      	str	r0, [r7, #12]

	while (ptr != NULL) {
 8007ab4:	e05a      	b.n	8007b6c <AT_ParseInfo+0xd4>
		switch (num++) {
 8007ab6:	7afb      	ldrb	r3, [r7, #11]
 8007ab8:	1c5a      	adds	r2, r3, #1
 8007aba:	72fa      	strb	r2, [r7, #11]
 8007abc:	2b06      	cmp	r3, #6
 8007abe:	d84f      	bhi.n	8007b60 <AT_ParseInfo+0xc8>
 8007ac0:	a201      	add	r2, pc, #4	; (adr r2, 8007ac8 <AT_ParseInfo+0x30>)
 8007ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac6:	bf00      	nop
 8007ac8:	08007ae5 	.word	0x08007ae5
 8007acc:	08007af3 	.word	0x08007af3
 8007ad0:	08007b03 	.word	0x08007b03
 8007ad4:	08007b13 	.word	0x08007b13
 8007ad8:	08007b23 	.word	0x08007b23
 8007adc:	08007b33 	.word	0x08007b33
 8007ae0:	08007b47 	.word	0x08007b47
		case 0:
			strncpy((char*) Obj->Product_ID, ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	68f9      	ldr	r1, [r7, #12]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f005 f8a3 	bl	800cc36 <strncpy>
			break;
 8007af0:	e037      	b.n	8007b62 <AT_ParseInfo+0xca>

		case 1:
			strncpy((char*) Obj->FW_Rev, ptr, ES_WIFI_FW_REV_SIZE);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	3320      	adds	r3, #32
 8007af6:	2218      	movs	r2, #24
 8007af8:	68f9      	ldr	r1, [r7, #12]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f005 f89b 	bl	800cc36 <strncpy>
			break;
 8007b00:	e02f      	b.n	8007b62 <AT_ParseInfo+0xca>

		case 2:
			strncpy((char*) Obj->API_Rev, ptr, ES_WIFI_API_REV_SIZE);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	3338      	adds	r3, #56	; 0x38
 8007b06:	2210      	movs	r2, #16
 8007b08:	68f9      	ldr	r1, [r7, #12]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f005 f893 	bl	800cc36 <strncpy>
			break;
 8007b10:	e027      	b.n	8007b62 <AT_ParseInfo+0xca>

		case 3:
			strncpy((char*) Obj->Stack_Rev, ptr, ES_WIFI_STACK_REV_SIZE);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	3348      	adds	r3, #72	; 0x48
 8007b16:	2210      	movs	r2, #16
 8007b18:	68f9      	ldr	r1, [r7, #12]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f005 f88b 	bl	800cc36 <strncpy>
			break;
 8007b20:	e01f      	b.n	8007b62 <AT_ParseInfo+0xca>

		case 4:
			strncpy((char*) Obj->RTOS_Rev, ptr, ES_WIFI_RTOS_REV_SIZE);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	3358      	adds	r3, #88	; 0x58
 8007b26:	2210      	movs	r2, #16
 8007b28:	68f9      	ldr	r1, [r7, #12]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f005 f883 	bl	800cc36 <strncpy>
			break;
 8007b30:	e017      	b.n	8007b62 <AT_ParseInfo+0xca>

		case 5:
			Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8007b32:	2100      	movs	r1, #0
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f7ff ff3f 	bl	80079b8 <ParseNumber>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8007b44:	e00d      	b.n	8007b62 <AT_ParseInfo+0xca>

		case 6:
			ptr = strtok(ptr, "\r");
 8007b46:	490e      	ldr	r1, [pc, #56]	; (8007b80 <AT_ParseInfo+0xe8>)
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f005 f89d 	bl	800cc88 <strtok>
 8007b4e:	60f8      	str	r0, [r7, #12]
			strncpy((char*) Obj->Product_Name, ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	3368      	adds	r3, #104	; 0x68
 8007b54:	2220      	movs	r2, #32
 8007b56:	68f9      	ldr	r1, [r7, #12]
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f005 f86c 	bl	800cc36 <strncpy>
			break;
 8007b5e:	e000      	b.n	8007b62 <AT_ParseInfo+0xca>

		default:
			break;
 8007b60:	bf00      	nop
		}
		ptr = strtok(NULL, ",");
 8007b62:	4906      	ldr	r1, [pc, #24]	; (8007b7c <AT_ParseInfo+0xe4>)
 8007b64:	2000      	movs	r0, #0
 8007b66:	f005 f88f 	bl	800cc88 <strtok>
 8007b6a:	60f8      	str	r0, [r7, #12]
	while (ptr != NULL) {
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1a1      	bne.n	8007ab6 <AT_ParseInfo+0x1e>
	}
}
 8007b72:	bf00      	nop
 8007b74:	bf00      	nop
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	0800deb0 	.word	0x0800deb0
 8007b80:	0800deb4 	.word	0x0800deb4

08007b84 <AT_ParseConnSettings>:
 * @brief  Parses WIFI connection settings.
 * @param  NetSettings: settings
 * @param  pdata: pointer to data
 * @retval None.
 */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings) {
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
	uint8_t num = 0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	73fb      	strb	r3, [r7, #15]
	char *ptr;

	ptr = strtok(pdata + 2, ",");
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	3302      	adds	r3, #2
 8007b96:	4952      	ldr	r1, [pc, #328]	; (8007ce0 <AT_ParseConnSettings+0x15c>)
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f005 f875 	bl	800cc88 <strtok>
 8007b9e:	60b8      	str	r0, [r7, #8]

	while (ptr != NULL) {
 8007ba0:	e095      	b.n	8007cce <AT_ParseConnSettings+0x14a>
		switch (num++) {
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	73fa      	strb	r2, [r7, #15]
 8007ba8:	2b0b      	cmp	r3, #11
 8007baa:	d87f      	bhi.n	8007cac <AT_ParseConnSettings+0x128>
 8007bac:	a201      	add	r2, pc, #4	; (adr r2, 8007bb4 <AT_ParseConnSettings+0x30>)
 8007bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb2:	bf00      	nop
 8007bb4:	08007be5 	.word	0x08007be5
 8007bb8:	08007bf3 	.word	0x08007bf3
 8007bbc:	08007c03 	.word	0x08007c03
 8007bc0:	08007c17 	.word	0x08007c17
 8007bc4:	08007c2b 	.word	0x08007c2b
 8007bc8:	08007c3f 	.word	0x08007c3f
 8007bcc:	08007c4d 	.word	0x08007c4d
 8007bd0:	08007c5b 	.word	0x08007c5b
 8007bd4:	08007c69 	.word	0x08007c69
 8007bd8:	08007c77 	.word	0x08007c77
 8007bdc:	08007c85 	.word	0x08007c85
 8007be0:	08007c99 	.word	0x08007c99
		case 0:
			strncpy((char*) NetSettings->SSID, ptr,
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	2221      	movs	r2, #33	; 0x21
 8007be8:	68b9      	ldr	r1, [r7, #8]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f005 f823 	bl	800cc36 <strncpy>
			ES_WIFI_MAX_SSID_NAME_SIZE + 1);
			break;
 8007bf0:	e05d      	b.n	8007cae <AT_ParseConnSettings+0x12a>

		case 1:
			strncpy((char*) NetSettings->pswd, ptr,
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	3321      	adds	r3, #33	; 0x21
 8007bf6:	2221      	movs	r2, #33	; 0x21
 8007bf8:	68b9      	ldr	r1, [r7, #8]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f005 f81b 	bl	800cc36 <strncpy>
			ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
			break;
 8007c00:	e055      	b.n	8007cae <AT_ParseConnSettings+0x12a>

		case 2:
			NetSettings->Security = (ES_WIFI_SecurityType_t) ParseNumber(ptr,
 8007c02:	2100      	movs	r1, #0
 8007c04:	68b8      	ldr	r0, [r7, #8]
 8007c06:	f7ff fed7 	bl	80079b8 <ParseNumber>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	b2da      	uxtb	r2, r3
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			NULL);
			break;
 8007c14:	e04b      	b.n	8007cae <AT_ParseConnSettings+0x12a>

		case 3:
			NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8007c16:	2100      	movs	r1, #0
 8007c18:	68b8      	ldr	r0, [r7, #8]
 8007c1a:	f7ff fecd 	bl	80079b8 <ParseNumber>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
			break;
 8007c28:	e041      	b.n	8007cae <AT_ParseConnSettings+0x12a>

		case 4:
			NetSettings->IP_Ver = (ES_WIFI_IPVer_t) ParseNumber(ptr, NULL);
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	68b8      	ldr	r0, [r7, #8]
 8007c2e:	f7ff fec3 	bl	80079b8 <ParseNumber>
 8007c32:	4603      	mov	r3, r0
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			break;
 8007c3c:	e037      	b.n	8007cae <AT_ParseConnSettings+0x12a>

		case 5:
			ParseIP(ptr, NetSettings->IP_Addr);
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	3348      	adds	r3, #72	; 0x48
 8007c42:	4619      	mov	r1, r3
 8007c44:	68b8      	ldr	r0, [r7, #8]
 8007c46:	f7ff fefb 	bl	8007a40 <ParseIP>
			break;
 8007c4a:	e030      	b.n	8007cae <AT_ParseConnSettings+0x12a>

		case 6:
			ParseIP(ptr, NetSettings->IP_Mask);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	334c      	adds	r3, #76	; 0x4c
 8007c50:	4619      	mov	r1, r3
 8007c52:	68b8      	ldr	r0, [r7, #8]
 8007c54:	f7ff fef4 	bl	8007a40 <ParseIP>
			break;
 8007c58:	e029      	b.n	8007cae <AT_ParseConnSettings+0x12a>

		case 7:
			ParseIP(ptr, NetSettings->Gateway_Addr);
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	3350      	adds	r3, #80	; 0x50
 8007c5e:	4619      	mov	r1, r3
 8007c60:	68b8      	ldr	r0, [r7, #8]
 8007c62:	f7ff feed 	bl	8007a40 <ParseIP>
			break;
 8007c66:	e022      	b.n	8007cae <AT_ParseConnSettings+0x12a>

		case 8:
			ParseIP(ptr, NetSettings->DNS1);
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	3354      	adds	r3, #84	; 0x54
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	68b8      	ldr	r0, [r7, #8]
 8007c70:	f7ff fee6 	bl	8007a40 <ParseIP>
			break;
 8007c74:	e01b      	b.n	8007cae <AT_ParseConnSettings+0x12a>

		case 9:
			ParseIP(ptr, NetSettings->DNS2);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	3358      	adds	r3, #88	; 0x58
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	68b8      	ldr	r0, [r7, #8]
 8007c7e:	f7ff fedf 	bl	8007a40 <ParseIP>
			break;
 8007c82:	e014      	b.n	8007cae <AT_ParseConnSettings+0x12a>

		case 10:
			NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8007c84:	2100      	movs	r1, #0
 8007c86:	68b8      	ldr	r0, [r7, #8]
 8007c88:	f7ff fe96 	bl	80079b8 <ParseNumber>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			break;
 8007c96:	e00a      	b.n	8007cae <AT_ParseConnSettings+0x12a>

		case 11:
			NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8007c98:	2100      	movs	r1, #0
 8007c9a:	68b8      	ldr	r0, [r7, #8]
 8007c9c:	f7ff fe8c 	bl	80079b8 <ParseNumber>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	b2da      	uxtb	r2, r3
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			break;
 8007caa:	e000      	b.n	8007cae <AT_ParseConnSettings+0x12a>

		default:
			break;
 8007cac:	bf00      	nop
		}
		ptr = strtok(NULL, ",");
 8007cae:	490c      	ldr	r1, [pc, #48]	; (8007ce0 <AT_ParseConnSettings+0x15c>)
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	f004 ffe9 	bl	800cc88 <strtok>
 8007cb6:	60b8      	str	r0, [r7, #8]
		if ((ptr != NULL) && (ptr[-1] == ',')) { /* Ignore empty fields */
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d007      	beq.n	8007cce <AT_ParseConnSettings+0x14a>
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	2b2c      	cmp	r3, #44	; 0x2c
 8007cc6:	d102      	bne.n	8007cce <AT_ParseConnSettings+0x14a>
			num++;
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	73fb      	strb	r3, [r7, #15]
	while (ptr != NULL) {
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f47f af66 	bne.w	8007ba2 <AT_ParseConnSettings+0x1e>
		}
	}
}
 8007cd6:	bf00      	nop
 8007cd8:	bf00      	nop
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	0800deb0 	.word	0x0800deb0

08007ce4 <AT_ExecuteCommand>:
 * @param  cmd: pointer to command string
 * @param  pdata: pointer to returned data
 * @retval Operation Status.
 */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t *cmd,
		uint8_t *pdata) {
 8007ce4:	b590      	push	{r4, r7, lr}
 8007ce6:	b087      	sub	sp, #28
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
	int ret = 0;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	613b      	str	r3, [r7, #16]
	int16_t recv_len = 0;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	82fb      	strh	r3, [r7, #22]
	LOCK_WIFI();

	ret = Obj->fops.IO_Send(cmd, strlen((char*) cmd), Obj->Timeout);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8007cfe:	68b8      	ldr	r0, [r7, #8]
 8007d00:	f7f8 fa66 	bl	80001d0 <strlen>
 8007d04:	4603      	mov	r3, r0
 8007d06:	b299      	uxth	r1, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8007d0e:	461a      	mov	r2, r3
 8007d10:	68b8      	ldr	r0, [r7, #8]
 8007d12:	47a0      	blx	r4
 8007d14:	4603      	mov	r3, r0
 8007d16:	613b      	str	r3, [r7, #16]

	if (ret > 0) {
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	dd3e      	ble.n	8007d9c <AT_ExecuteCommand+0xb8>
		recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007d2a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	4798      	blx	r3
 8007d32:	4603      	mov	r3, r0
 8007d34:	82fb      	strh	r3, [r7, #22]
		if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE)) {
 8007d36:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	dd27      	ble.n	8007d8e <AT_ExecuteCommand+0xaa>
 8007d3e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007d42:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007d46:	dc22      	bgt.n	8007d8e <AT_ExecuteCommand+0xaa>
			if (recv_len == ES_WIFI_DATA_SIZE) {
 8007d48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007d4c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007d50:	d105      	bne.n	8007d5e <AT_ExecuteCommand+0x7a>
				// ES_WIFI_DATA_SIZE maybe too small !!
				recv_len--;
 8007d52:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	82fb      	strh	r3, [r7, #22]
			}
			*(pdata + recv_len) = 0;
 8007d5e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	4413      	add	r3, r2
 8007d66:	2200      	movs	r2, #0
 8007d68:	701a      	strb	r2, [r3, #0]
			if (strstr((char*) pdata, AT_OK_STRING)) {
 8007d6a:	490f      	ldr	r1, [pc, #60]	; (8007da8 <AT_ExecuteCommand+0xc4>)
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f004 ff75 	bl	800cc5c <strstr>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d001      	beq.n	8007d7c <AT_ExecuteCommand+0x98>
				UNLOCK_WIFI();
				return ES_WIFI_STATUS_OK;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	e010      	b.n	8007d9e <AT_ExecuteCommand+0xba>
			} else if (strstr((char*) pdata, AT_ERROR_STRING)) {
 8007d7c:	490b      	ldr	r1, [pc, #44]	; (8007dac <AT_ExecuteCommand+0xc8>)
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f004 ff6c 	bl	800cc5c <strstr>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d001      	beq.n	8007d8e <AT_ExecuteCommand+0xaa>
				UNLOCK_WIFI();
				return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007d8a:	2305      	movs	r3, #5
 8007d8c:	e007      	b.n	8007d9e <AT_ExecuteCommand+0xba>
			}
		}
		if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER) {
 8007d8e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007d92:	f113 0f04 	cmn.w	r3, #4
 8007d96:	d101      	bne.n	8007d9c <AT_ExecuteCommand+0xb8>
			UNLOCK_WIFI();
			return ES_WIFI_STATUS_MODULE_CRASH;
 8007d98:	2306      	movs	r3, #6
 8007d9a:	e000      	b.n	8007d9e <AT_ExecuteCommand+0xba>
		}
	}UNLOCK_WIFI();
	return ES_WIFI_STATUS_IO_ERROR;
 8007d9c:	2304      	movs	r3, #4
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	371c      	adds	r7, #28
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd90      	pop	{r4, r7, pc}
 8007da6:	bf00      	nop
 8007da8:	0800dec4 	.word	0x0800dec4
 8007dac:	0800ded0 	.word	0x0800ded0

08007db0 <AT_RequestSendData>:
 * @param  pdata: pointer to returned data
 * @retval Operation Status.
 */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t *cmd,
		uint8_t *pcmd_data, uint16_t len, uint8_t *pdata) {
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
 8007dbc:	807b      	strh	r3, [r7, #2]
	int16_t send_len = 0;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	82fb      	strh	r3, [r7, #22]
	int16_t recv_len = 0;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	82bb      	strh	r3, [r7, #20]
	uint16_t cmd_len = 0;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	827b      	strh	r3, [r7, #18]
	uint16_t n;

	LOCK_WIFI();
	cmd_len = strlen((char*) cmd);
 8007dca:	68b8      	ldr	r0, [r7, #8]
 8007dcc:	f7f8 fa00 	bl	80001d0 <strlen>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	827b      	strh	r3, [r7, #18]

	/* can send only even number of byte on first send */
	if (cmd_len & 1)
 8007dd4:	8a7b      	ldrh	r3, [r7, #18]
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <AT_RequestSendData+0x32>
		return ES_WIFI_STATUS_ERROR;
 8007dde:	2302      	movs	r3, #2
 8007de0:	e053      	b.n	8007e8a <AT_RequestSendData+0xda>
	n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007dee:	8a79      	ldrh	r1, [r7, #18]
 8007df0:	68b8      	ldr	r0, [r7, #8]
 8007df2:	4798      	blx	r3
 8007df4:	4603      	mov	r3, r0
 8007df6:	823b      	strh	r3, [r7, #16]
	if (n == cmd_len) {
 8007df8:	8a3a      	ldrh	r2, [r7, #16]
 8007dfa:	8a7b      	ldrh	r3, [r7, #18]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d143      	bne.n	8007e88 <AT_RequestSendData+0xd8>
		send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007e0c:	8879      	ldrh	r1, [r7, #2]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	4798      	blx	r3
 8007e12:	4603      	mov	r3, r0
 8007e14:	82fb      	strh	r3, [r7, #22]
		if (send_len == len) {
 8007e16:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007e1a:	887b      	ldrh	r3, [r7, #2]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d131      	bne.n	8007e84 <AT_RequestSendData+0xd4>
			recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	6a38      	ldr	r0, [r7, #32]
 8007e30:	4798      	blx	r3
 8007e32:	4603      	mov	r3, r0
 8007e34:	82bb      	strh	r3, [r7, #20]
			if (recv_len > 0) {
 8007e36:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	dd19      	ble.n	8007e72 <AT_RequestSendData+0xc2>
				*(pdata + recv_len) = 0;
 8007e3e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007e42:	6a3a      	ldr	r2, [r7, #32]
 8007e44:	4413      	add	r3, r2
 8007e46:	2200      	movs	r2, #0
 8007e48:	701a      	strb	r2, [r3, #0]
				if (strstr((char*) pdata, AT_OK_STRING)) {
 8007e4a:	4912      	ldr	r1, [pc, #72]	; (8007e94 <AT_RequestSendData+0xe4>)
 8007e4c:	6a38      	ldr	r0, [r7, #32]
 8007e4e:	f004 ff05 	bl	800cc5c <strstr>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d001      	beq.n	8007e5c <AT_RequestSendData+0xac>
					UNLOCK_WIFI();
					return ES_WIFI_STATUS_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	e016      	b.n	8007e8a <AT_RequestSendData+0xda>
				} else if (strstr((char*) pdata, AT_ERROR_STRING)) {
 8007e5c:	490e      	ldr	r1, [pc, #56]	; (8007e98 <AT_RequestSendData+0xe8>)
 8007e5e:	6a38      	ldr	r0, [r7, #32]
 8007e60:	f004 fefc 	bl	800cc5c <strstr>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <AT_RequestSendData+0xbe>
					UNLOCK_WIFI();
					return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007e6a:	2305      	movs	r3, #5
 8007e6c:	e00d      	b.n	8007e8a <AT_RequestSendData+0xda>
				} else {
					UNLOCK_WIFI();
					return ES_WIFI_STATUS_ERROR;
 8007e6e:	2302      	movs	r3, #2
 8007e70:	e00b      	b.n	8007e8a <AT_RequestSendData+0xda>
				}
			}UNLOCK_WIFI();
			if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER) {
 8007e72:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007e76:	f113 0f04 	cmn.w	r3, #4
 8007e7a:	d101      	bne.n	8007e80 <AT_RequestSendData+0xd0>
				return ES_WIFI_STATUS_MODULE_CRASH;
 8007e7c:	2306      	movs	r3, #6
 8007e7e:	e004      	b.n	8007e8a <AT_RequestSendData+0xda>
			}
			return ES_WIFI_STATUS_ERROR;
 8007e80:	2302      	movs	r3, #2
 8007e82:	e002      	b.n	8007e8a <AT_RequestSendData+0xda>
		} else {
			return ES_WIFI_STATUS_ERROR;
 8007e84:	2302      	movs	r3, #2
 8007e86:	e000      	b.n	8007e8a <AT_RequestSendData+0xda>
		}
	}
	return ES_WIFI_STATUS_IO_ERROR;
 8007e88:	2304      	movs	r3, #4
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3718      	adds	r7, #24
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	0800dec4 	.word	0x0800dec4
 8007e98:	0800ded0 	.word	0x0800ded0

08007e9c <AT_RequestReceiveData>:
 * @param  Reqlen : requested Data length.
 * @param  ReadData : pointer to received data length.
 * @retval Operation Status.
 */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj,
		uint8_t *cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData) {
 8007e9c:	b590      	push	{r4, r7, lr}
 8007e9e:	b087      	sub	sp, #28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
 8007ea8:	807b      	strh	r3, [r7, #2]
	int len;
	uint8_t *p = Obj->CmdData;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007eb0:	613b      	str	r3, [r7, #16]

	LOCK_WIFI();
	if (Obj->fops.IO_Send(cmd, strlen((char*) cmd), Obj->Timeout) > 0) {
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8007eb8:	68b8      	ldr	r0, [r7, #8]
 8007eba:	f7f8 f989 	bl	80001d0 <strlen>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	b299      	uxth	r1, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8007ec8:	461a      	mov	r2, r3
 8007eca:	68b8      	ldr	r0, [r7, #8]
 8007ecc:	47a0      	blx	r4
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	dd6f      	ble.n	8007fb4 <AT_RequestReceiveData+0x118>
		len = Obj->fops.IO_Receive(p, 0, Obj->Timeout);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	6938      	ldr	r0, [r7, #16]
 8007ee4:	4798      	blx	r3
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	617b      	str	r3, [r7, #20]
		if ((p[0] != '\r') || (p[1] != '\n')) {
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	2b0d      	cmp	r3, #13
 8007ef0:	d104      	bne.n	8007efc <AT_RequestReceiveData+0x60>
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	2b0a      	cmp	r3, #10
 8007efa:	d001      	beq.n	8007f00 <AT_RequestReceiveData+0x64>
			return ES_WIFI_STATUS_IO_ERROR;
 8007efc:	2304      	movs	r3, #4
 8007efe:	e05a      	b.n	8007fb6 <AT_RequestReceiveData+0x11a>
		}
		len -= 2;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	3b02      	subs	r3, #2
 8007f04:	617b      	str	r3, [r7, #20]
		p += 2;
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	3302      	adds	r3, #2
 8007f0a:	613b      	str	r3, [r7, #16]
		if (len >= AT_OK_STRING_LEN) {
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	2b07      	cmp	r3, #7
 8007f10:	d94a      	bls.n	8007fa8 <AT_RequestReceiveData+0x10c>
			while (len && (p[len - 1] == 0x15))
 8007f12:	e002      	b.n	8007f1a <AT_RequestReceiveData+0x7e>
				len--;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	3b01      	subs	r3, #1
 8007f18:	617b      	str	r3, [r7, #20]
			while (len && (p[len - 1] == 0x15))
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d006      	beq.n	8007f2e <AT_RequestReceiveData+0x92>
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	4413      	add	r3, r2
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	2b15      	cmp	r3, #21
 8007f2c:	d0f2      	beq.n	8007f14 <AT_RequestReceiveData+0x78>
			p[len] = '\0';
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	4413      	add	r3, r2
 8007f34:	2200      	movs	r2, #0
 8007f36:	701a      	strb	r2, [r3, #0]
			if (strstr((char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING)) {
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	3b08      	subs	r3, #8
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	4413      	add	r3, r2
 8007f40:	491f      	ldr	r1, [pc, #124]	; (8007fc0 <AT_RequestReceiveData+0x124>)
 8007f42:	4618      	mov	r0, r3
 8007f44:	f004 fe8a 	bl	800cc5c <strstr>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d016      	beq.n	8007f7c <AT_RequestReceiveData+0xe0>
				*ReadData = len - AT_OK_STRING_LEN;
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	3b08      	subs	r3, #8
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f58:	801a      	strh	r2, [r3, #0]
				if (*ReadData > Reqlen) {
 8007f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5c:	881b      	ldrh	r3, [r3, #0]
 8007f5e:	887a      	ldrh	r2, [r7, #2]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d202      	bcs.n	8007f6a <AT_RequestReceiveData+0xce>
					*ReadData = Reqlen;
 8007f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f66:	887a      	ldrh	r2, [r7, #2]
 8007f68:	801a      	strh	r2, [r3, #0]
				}
				memcpy(pdata, p, *ReadData);
 8007f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	6939      	ldr	r1, [r7, #16]
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f004 fbfe 	bl	800c774 <memcpy>
				UNLOCK_WIFI();
				return ES_WIFI_STATUS_OK;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	e01c      	b.n	8007fb6 <AT_RequestReceiveData+0x11a>
			} else if (memcmp((char*) p + len - AT_DELIMETER_LEN,
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	3b04      	subs	r3, #4
 8007f80:	693a      	ldr	r2, [r7, #16]
 8007f82:	4413      	add	r3, r2
 8007f84:	2204      	movs	r2, #4
 8007f86:	490f      	ldr	r1, [pc, #60]	; (8007fc4 <AT_RequestReceiveData+0x128>)
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f004 fbe3 	bl	800c754 <memcmp>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d104      	bne.n	8007f9e <AT_RequestReceiveData+0x102>
			AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0) {
				*ReadData = 0;
 8007f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f96:	2200      	movs	r2, #0
 8007f98:	801a      	strh	r2, [r3, #0]
				UNLOCK_WIFI();
				return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007f9a:	2305      	movs	r3, #5
 8007f9c:	e00b      	b.n	8007fb6 <AT_RequestReceiveData+0x11a>
			}

			UNLOCK_WIFI();
			*ReadData = 0;
 8007f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	801a      	strh	r2, [r3, #0]
			return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007fa4:	2305      	movs	r3, #5
 8007fa6:	e006      	b.n	8007fb6 <AT_RequestReceiveData+0x11a>
		}
		if (len == ES_WIFI_ERROR_STUFFING_FOREVER) {
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	f113 0f04 	cmn.w	r3, #4
 8007fae:	d101      	bne.n	8007fb4 <AT_RequestReceiveData+0x118>
			UNLOCK_WIFI();
			return ES_WIFI_STATUS_MODULE_CRASH;
 8007fb0:	2306      	movs	r3, #6
 8007fb2:	e000      	b.n	8007fb6 <AT_RequestReceiveData+0x11a>
		}
	}UNLOCK_WIFI();
	return ES_WIFI_STATUS_IO_ERROR;
 8007fb4:	2304      	movs	r3, #4
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	371c      	adds	r7, #28
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd90      	pop	{r4, r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	0800dec4 	.word	0x0800dec4
 8007fc4:	0800ded8 	.word	0x0800ded8

08007fc8 <ES_WIFI_Init>:
/**
 * @brief  Initialize WIFI module.
 * @param  Obj: pointer to module handle
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj) {
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
	ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	73fb      	strb	r3, [r7, #15]

	LOCK_WIFI();

	Obj->Timeout = ES_WIFI_TIMEOUT;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f247 5230 	movw	r2, #30000	; 0x7530
 8007fda:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

	if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0) {
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	4798      	blx	r3
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d113      	bne.n	8008016 <ES_WIFI_Init+0x4e>
		ret = AT_ExecuteCommand(Obj, (uint8_t*) "I?\r\n", Obj->CmdData);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	490a      	ldr	r1, [pc, #40]	; (8008020 <ES_WIFI_Init+0x58>)
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f7ff fe73 	bl	8007ce4 <AT_ExecuteCommand>
 8007ffe:	4603      	mov	r3, r0
 8008000:	73fb      	strb	r3, [r7, #15]

		if (ret == ES_WIFI_STATUS_OK) {
 8008002:	7bfb      	ldrb	r3, [r7, #15]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d106      	bne.n	8008016 <ES_WIFI_Init+0x4e>
			AT_ParseInfo(Obj, Obj->CmdData);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800800e:	4619      	mov	r1, r3
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f7ff fd41 	bl	8007a98 <AT_ParseInfo>
		}
	}UNLOCK_WIFI();
	return ret;
 8008016:	7bfb      	ldrb	r3, [r7, #15]
}
 8008018:	4618      	mov	r0, r3
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	0800dee0 	.word	0x0800dee0

08008024 <ES_WIFI_RegisterBusIO>:
 * @param  Obj: pointer to module handle
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj,
		IO_Init_Func IO_Init, IO_DeInit_Func IO_DeInit, IO_Delay_Func IO_Delay,
		IO_Send_Func IO_Send, IO_Receive_Func IO_Receive) {
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
 8008030:	603b      	str	r3, [r7, #0]
	if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive) {
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00b      	beq.n	8008050 <ES_WIFI_RegisterBusIO+0x2c>
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d008      	beq.n	8008050 <ES_WIFI_RegisterBusIO+0x2c>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d005      	beq.n	8008050 <ES_WIFI_RegisterBusIO+0x2c>
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d002      	beq.n	8008050 <ES_WIFI_RegisterBusIO+0x2c>
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <ES_WIFI_RegisterBusIO+0x30>
		return ES_WIFI_STATUS_ERROR;
 8008050:	2302      	movs	r3, #2
 8008052:	e014      	b.n	800807e <ES_WIFI_RegisterBusIO+0x5a>
	}

	Obj->fops.IO_Init = IO_Init;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	Obj->fops.IO_DeInit = IO_DeInit;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	Obj->fops.IO_Send = IO_Send;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	69ba      	ldr	r2, [r7, #24]
 8008068:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	Obj->fops.IO_Receive = IO_Receive;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	69fa      	ldr	r2, [r7, #28]
 8008070:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	Obj->fops.IO_Delay = IO_Delay;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	683a      	ldr	r2, [r7, #0]
 8008078:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	return ES_WIFI_STATUS_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3714      	adds	r7, #20
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
	...

0800808c <ES_WIFI_Connect>:
 * @param  Password: the Access point password.
 * @param  SecType: Security type.
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
		const char *Password, ES_WIFI_SecurityType_t SecType) {
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
 8008098:	70fb      	strb	r3, [r7, #3]
	ES_WIFI_Status_t ret;
	LOCK_WIFI();

	sprintf((char*) Obj->CmdData, "C1=%s\r", SSID);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	4932      	ldr	r1, [pc, #200]	; (800816c <ES_WIFI_Connect+0xe0>)
 80080a4:	4618      	mov	r0, r3
 80080a6:	f004 fd63 	bl	800cb70 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80080b6:	461a      	mov	r2, r3
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f7ff fe13 	bl	8007ce4 <AT_ExecuteCommand>
 80080be:	4603      	mov	r3, r0
 80080c0:	75fb      	strb	r3, [r7, #23]
	if (ret == ES_WIFI_STATUS_OK) {
 80080c2:	7dfb      	ldrb	r3, [r7, #23]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d14b      	bne.n	8008160 <ES_WIFI_Connect+0xd4>
		sprintf((char*) Obj->CmdData, "C2=%s\r", Password);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	4927      	ldr	r1, [pc, #156]	; (8008170 <ES_WIFI_Connect+0xe4>)
 80080d2:	4618      	mov	r0, r3
 80080d4:	f004 fd4c 	bl	800cb70 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80080e4:	461a      	mov	r2, r3
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f7ff fdfc 	bl	8007ce4 <AT_ExecuteCommand>
 80080ec:	4603      	mov	r3, r0
 80080ee:	75fb      	strb	r3, [r7, #23]

		if (ret == ES_WIFI_STATUS_OK) {
 80080f0:	7dfb      	ldrb	r3, [r7, #23]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d134      	bne.n	8008160 <ES_WIFI_Connect+0xd4>
			Obj->Security = SecType;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	78fa      	ldrb	r2, [r7, #3]
 80080fa:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
			sprintf((char*) Obj->CmdData, "C3=%d\r", (uint8_t) SecType);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008104:	78fa      	ldrb	r2, [r7, #3]
 8008106:	491b      	ldr	r1, [pc, #108]	; (8008174 <ES_WIFI_Connect+0xe8>)
 8008108:	4618      	mov	r0, r3
 800810a:	f004 fd31 	bl	800cb70 <siprintf>
			ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800811a:	461a      	mov	r2, r3
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f7ff fde1 	bl	8007ce4 <AT_ExecuteCommand>
 8008122:	4603      	mov	r3, r0
 8008124:	75fb      	strb	r3, [r7, #23]

			if (ret == ES_WIFI_STATUS_OK) {
 8008126:	7dfb      	ldrb	r3, [r7, #23]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d119      	bne.n	8008160 <ES_WIFI_Connect+0xd4>
				sprintf((char*) Obj->CmdData, "C0\r");
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008132:	4911      	ldr	r1, [pc, #68]	; (8008178 <ES_WIFI_Connect+0xec>)
 8008134:	4618      	mov	r0, r3
 8008136:	f004 fd1b 	bl	800cb70 <siprintf>
				ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008146:	461a      	mov	r2, r3
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f7ff fdcb 	bl	8007ce4 <AT_ExecuteCommand>
 800814e:	4603      	mov	r3, r0
 8008150:	75fb      	strb	r3, [r7, #23]
				if (ret == ES_WIFI_STATUS_OK) {
 8008152:	7dfb      	ldrb	r3, [r7, #23]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d103      	bne.n	8008160 <ES_WIFI_Connect+0xd4>
					Obj->NetSettings.IsConnected = 1;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
				}
			}
		}
	}UNLOCK_WIFI();
	return ret;
 8008160:	7dfb      	ldrb	r3, [r7, #23]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3718      	adds	r7, #24
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	0800def8 	.word	0x0800def8
 8008170:	0800df00 	.word	0x0800df00
 8008174:	0800df08 	.word	0x0800df08
 8008178:	0800df10 	.word	0x0800df10

0800817c <ES_WIFI_Disconnect>:
/**
 * @brief  Disconnect from a network.
 * @param  Obj: pointer to module handle
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_Disconnect(ES_WIFIObject_t *Obj) {
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
	ES_WIFI_Status_t ret;
	LOCK_WIFI();
	sprintf((char*) Obj->CmdData, "CD\r");
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800818a:	490a      	ldr	r1, [pc, #40]	; (80081b4 <ES_WIFI_Disconnect+0x38>)
 800818c:	4618      	mov	r0, r3
 800818e:	f004 fcef 	bl	800cb70 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800819e:	461a      	mov	r2, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff fd9f 	bl	8007ce4 <AT_ExecuteCommand>
 80081a6:	4603      	mov	r3, r0
 80081a8:	73fb      	strb	r3, [r7, #15]
	UNLOCK_WIFI();
	return ret;
 80081aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	0800df18 	.word	0x0800df18

080081b8 <ES_WIFI_GetNetworkSettings>:
 * @brief  Return network settings.
 * @param  Obj: pointer to module handle
 * @param  Pointer to network setting structure.
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj) {
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
	ES_WIFI_Status_t ret;
	LOCK_WIFI();

	sprintf((char*) Obj->CmdData, "C?\r");
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80081c6:	4910      	ldr	r1, [pc, #64]	; (8008208 <ES_WIFI_GetNetworkSettings+0x50>)
 80081c8:	4618      	mov	r0, r3
 80081ca:	f004 fcd1 	bl	800cb70 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80081da:	461a      	mov	r2, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7ff fd81 	bl	8007ce4 <AT_ExecuteCommand>
 80081e2:	4603      	mov	r3, r0
 80081e4:	73fb      	strb	r3, [r7, #15]

	if (ret == ES_WIFI_STATUS_OK) {
 80081e6:	7bfb      	ldrb	r3, [r7, #15]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d108      	bne.n	80081fe <ES_WIFI_GetNetworkSettings+0x46>
		AT_ParseConnSettings((char*) Obj->CmdData, &Obj->NetSettings);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f503 7294 	add.w	r2, r3, #296	; 0x128
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	338d      	adds	r3, #141	; 0x8d
 80081f6:	4619      	mov	r1, r3
 80081f8:	4610      	mov	r0, r2
 80081fa:	f7ff fcc3 	bl	8007b84 <AT_ParseConnSettings>
	}

	UNLOCK_WIFI();
	return ret;
 80081fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	0800df1c 	.word	0x0800df1c

0800820c <ES_WIFI_StartClientConnection>:
 * @param  Obj: pointer to module handle
 * @param  conn: pointer to the connection structure
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj,
		ES_WIFI_Conn_t *conn) {
 800820c:	b590      	push	{r4, r7, lr}
 800820e:	b087      	sub	sp, #28
 8008210:	af02      	add	r7, sp, #8
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
	ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8008216:	2300      	movs	r3, #0
 8008218:	73fb      	strb	r3, [r7, #15]

	if (((conn->Type == ES_WIFI_TCP_CONNECTION)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <ES_WIFI_StartClientConnection+0x1e>
			|| (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	2b03      	cmp	r3, #3
 8008228:	d105      	bne.n	8008236 <ES_WIFI_StartClientConnection+0x2a>
			&& (conn->RemotePort == 0))
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	885b      	ldrh	r3, [r3, #2]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d101      	bne.n	8008236 <ES_WIFI_StartClientConnection+0x2a>
		return ES_WIFI_STATUS_ERROR;
 8008232:	2302      	movs	r3, #2
 8008234:	e0c1      	b.n	80083ba <ES_WIFI_StartClientConnection+0x1ae>

	LOCK_WIFI();

	sprintf((char*) Obj->CmdData, "P0=%d\r", conn->Number);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	785b      	ldrb	r3, [r3, #1]
 8008240:	461a      	mov	r2, r3
 8008242:	4960      	ldr	r1, [pc, #384]	; (80083c4 <ES_WIFI_StartClientConnection+0x1b8>)
 8008244:	f004 fc94 	bl	800cb70 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008254:	461a      	mov	r2, r3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f7ff fd44 	bl	8007ce4 <AT_ExecuteCommand>
 800825c:	4603      	mov	r3, r0
 800825e:	73fb      	strb	r3, [r7, #15]

	if (ret == ES_WIFI_STATUS_OK) {
 8008260:	7bfb      	ldrb	r3, [r7, #15]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d114      	bne.n	8008290 <ES_WIFI_StartClientConnection+0x84>
		sprintf((char*) Obj->CmdData, "P1=%d\r", conn->Type);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	461a      	mov	r2, r3
 8008272:	4955      	ldr	r1, [pc, #340]	; (80083c8 <ES_WIFI_StartClientConnection+0x1bc>)
 8008274:	f004 fc7c 	bl	800cb70 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008284:	461a      	mov	r2, r3
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7ff fd2c 	bl	8007ce4 <AT_ExecuteCommand>
 800828c:	4603      	mov	r3, r0
 800828e:	73fb      	strb	r3, [r7, #15]
	}

	if (ret == ES_WIFI_STATUS_OK) {
 8008290:	7bfb      	ldrb	r3, [r7, #15]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d114      	bne.n	80082c0 <ES_WIFI_StartClientConnection+0xb4>
		sprintf((char*) Obj->CmdData, "P2=%d\r", conn->LocalPort);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	889b      	ldrh	r3, [r3, #4]
 80082a0:	461a      	mov	r2, r3
 80082a2:	494a      	ldr	r1, [pc, #296]	; (80083cc <ES_WIFI_StartClientConnection+0x1c0>)
 80082a4:	f004 fc64 	bl	800cb70 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80082b4:	461a      	mov	r2, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7ff fd14 	bl	8007ce4 <AT_ExecuteCommand>
 80082bc:	4603      	mov	r3, r0
 80082be:	73fb      	strb	r3, [r7, #15]
	}

	if ((ret == ES_WIFI_STATUS_OK)
 80082c0:	7bfb      	ldrb	r3, [r7, #15]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d11c      	bne.n	8008300 <ES_WIFI_StartClientConnection+0xf4>
			&& ((conn->Type == ES_WIFI_TCP_CONNECTION)
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d003      	beq.n	80082d6 <ES_WIFI_StartClientConnection+0xca>
					|| (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))) {
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	2b03      	cmp	r3, #3
 80082d4:	d114      	bne.n	8008300 <ES_WIFI_StartClientConnection+0xf4>
		sprintf((char*) Obj->CmdData, "P4=%d\r", conn->RemotePort);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	885b      	ldrh	r3, [r3, #2]
 80082e0:	461a      	mov	r2, r3
 80082e2:	493b      	ldr	r1, [pc, #236]	; (80083d0 <ES_WIFI_StartClientConnection+0x1c4>)
 80082e4:	f004 fc44 	bl	800cb70 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80082f4:	461a      	mov	r2, r3
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7ff fcf4 	bl	8007ce4 <AT_ExecuteCommand>
 80082fc:	4603      	mov	r3, r0
 80082fe:	73fb      	strb	r3, [r7, #15]
	}

	if ((ret == ES_WIFI_STATUS_OK)
 8008300:	7bfb      	ldrb	r3, [r7, #15]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d128      	bne.n	8008358 <ES_WIFI_StartClientConnection+0x14c>
			&& ((conn->Type == ES_WIFI_TCP_CONNECTION)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d003      	beq.n	8008316 <ES_WIFI_StartClientConnection+0x10a>
					|| (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))) {
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	2b03      	cmp	r3, #3
 8008314:	d120      	bne.n	8008358 <ES_WIFI_StartClientConnection+0x14c>
		sprintf((char*) Obj->CmdData, "P3=%d.%d.%d.%d\r", conn->RemoteIP[0],
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	799b      	ldrb	r3, [r3, #6]
 8008320:	4619      	mov	r1, r3
				conn->RemoteIP[1], conn->RemoteIP[2], conn->RemoteIP[3]);
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	79db      	ldrb	r3, [r3, #7]
		sprintf((char*) Obj->CmdData, "P3=%d.%d.%d.%d\r", conn->RemoteIP[0],
 8008326:	461c      	mov	r4, r3
				conn->RemoteIP[1], conn->RemoteIP[2], conn->RemoteIP[3]);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	7a1b      	ldrb	r3, [r3, #8]
		sprintf((char*) Obj->CmdData, "P3=%d.%d.%d.%d\r", conn->RemoteIP[0],
 800832c:	461a      	mov	r2, r3
				conn->RemoteIP[1], conn->RemoteIP[2], conn->RemoteIP[3]);
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	7a5b      	ldrb	r3, [r3, #9]
		sprintf((char*) Obj->CmdData, "P3=%d.%d.%d.%d\r", conn->RemoteIP[0],
 8008332:	9301      	str	r3, [sp, #4]
 8008334:	9200      	str	r2, [sp, #0]
 8008336:	4623      	mov	r3, r4
 8008338:	460a      	mov	r2, r1
 800833a:	4926      	ldr	r1, [pc, #152]	; (80083d4 <ES_WIFI_StartClientConnection+0x1c8>)
 800833c:	f004 fc18 	bl	800cb70 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800834c:	461a      	mov	r2, r3
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f7ff fcc8 	bl	8007ce4 <AT_ExecuteCommand>
 8008354:	4603      	mov	r3, r0
 8008356:	73fb      	strb	r3, [r7, #15]
	}

	if ((ret == ES_WIFI_STATUS_OK)
 8008358:	7bfb      	ldrb	r3, [r7, #15]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d116      	bne.n	800838c <ES_WIFI_StartClientConnection+0x180>
			&& (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) {
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	2b03      	cmp	r3, #3
 8008364:	d112      	bne.n	800838c <ES_WIFI_StartClientConnection+0x180>
		sprintf((char*) Obj->CmdData, "P9=2\r");
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800836c:	491a      	ldr	r1, [pc, #104]	; (80083d8 <ES_WIFI_StartClientConnection+0x1cc>)
 800836e:	4618      	mov	r0, r3
 8008370:	f004 fbfe 	bl	800cb70 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008380:	461a      	mov	r2, r3
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f7ff fcae 	bl	8007ce4 <AT_ExecuteCommand>
 8008388:	4603      	mov	r3, r0
 800838a:	73fb      	strb	r3, [r7, #15]
	}

	if (ret == ES_WIFI_STATUS_OK) {
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d112      	bne.n	80083b8 <ES_WIFI_StartClientConnection+0x1ac>
		sprintf((char*) Obj->CmdData, "P6=1\r");
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008398:	4910      	ldr	r1, [pc, #64]	; (80083dc <ES_WIFI_StartClientConnection+0x1d0>)
 800839a:	4618      	mov	r0, r3
 800839c:	f004 fbe8 	bl	800cb70 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80083ac:	461a      	mov	r2, r3
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f7ff fc98 	bl	8007ce4 <AT_ExecuteCommand>
 80083b4:	4603      	mov	r3, r0
 80083b6:	73fb      	strb	r3, [r7, #15]
	}

	UNLOCK_WIFI();
	return ret;
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd90      	pop	{r4, r7, pc}
 80083c2:	bf00      	nop
 80083c4:	0800dfe0 	.word	0x0800dfe0
 80083c8:	0800dfe8 	.word	0x0800dfe8
 80083cc:	0800dff0 	.word	0x0800dff0
 80083d0:	0800dff8 	.word	0x0800dff8
 80083d4:	0800e000 	.word	0x0800e000
 80083d8:	0800e010 	.word	0x0800e010
 80083dc:	0800e018 	.word	0x0800e018

080083e0 <ES_WIFI_StopClientConnection>:
 * @brief  Stop Client connection.
 * @param  Obj: pointer to module handle
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj,
		ES_WIFI_Conn_t *conn) {
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
	ES_WIFI_Status_t ret;
	LOCK_WIFI();

	sprintf((char*) Obj->CmdData, "P0=%d\r", conn->Number);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	785b      	ldrb	r3, [r3, #1]
 80083f4:	461a      	mov	r2, r3
 80083f6:	4915      	ldr	r1, [pc, #84]	; (800844c <ES_WIFI_StopClientConnection+0x6c>)
 80083f8:	f004 fbba 	bl	800cb70 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008408:	461a      	mov	r2, r3
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f7ff fc6a 	bl	8007ce4 <AT_ExecuteCommand>
 8008410:	4603      	mov	r3, r0
 8008412:	73fb      	strb	r3, [r7, #15]

	if (ret == ES_WIFI_STATUS_OK) {
 8008414:	7bfb      	ldrb	r3, [r7, #15]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d112      	bne.n	8008440 <ES_WIFI_StopClientConnection+0x60>
		sprintf((char*) Obj->CmdData, "P6=0\r");
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008420:	490b      	ldr	r1, [pc, #44]	; (8008450 <ES_WIFI_StopClientConnection+0x70>)
 8008422:	4618      	mov	r0, r3
 8008424:	f004 fba4 	bl	800cb70 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008434:	461a      	mov	r2, r3
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7ff fc54 	bl	8007ce4 <AT_ExecuteCommand>
 800843c:	4603      	mov	r3, r0
 800843e:	73fb      	strb	r3, [r7, #15]
	}UNLOCK_WIFI();
	return ret;
 8008440:	7bfb      	ldrb	r3, [r7, #15]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	0800dfe0 	.word	0x0800dfe0
 8008450:	0800e020 	.word	0x0800e020

08008454 <ES_WIFI_SendData>:
 * @param  pdata: pointer to data
 * @param  len : length of the data to be sent
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
		uint8_t *pdata, uint16_t Reqlen, uint16_t *SentLen, uint32_t Timeout) {
 8008454:	b580      	push	{r7, lr}
 8008456:	b088      	sub	sp, #32
 8008458:	af02      	add	r7, sp, #8
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	607a      	str	r2, [r7, #4]
 800845e:	461a      	mov	r2, r3
 8008460:	460b      	mov	r3, r1
 8008462:	72fb      	strb	r3, [r7, #11]
 8008464:	4613      	mov	r3, r2
 8008466:	813b      	strh	r3, [r7, #8]
	uint32_t wkgTimeOut;

	ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8008468:	2302      	movs	r3, #2
 800846a:	74fb      	strb	r3, [r7, #19]

	if (Timeout == 0) {
 800846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846e:	2b00      	cmp	r3, #0
 8008470:	d102      	bne.n	8008478 <ES_WIFI_SendData+0x24>
		wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8008472:	2301      	movs	r3, #1
 8008474:	617b      	str	r3, [r7, #20]
 8008476:	e001      	b.n	800847c <ES_WIFI_SendData+0x28>
	} else {
		wkgTimeOut = Timeout;
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	617b      	str	r3, [r7, #20]
	}

	LOCK_WIFI();
	if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 800847c:	893b      	ldrh	r3, [r7, #8]
 800847e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8008482:	d302      	bcc.n	800848a <ES_WIFI_SendData+0x36>
		Reqlen = ES_WIFI_PAYLOAD_SIZE;
 8008484:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008488:	813b      	strh	r3, [r7, #8]

	*SentLen = Reqlen;
 800848a:	6a3b      	ldr	r3, [r7, #32]
 800848c:	893a      	ldrh	r2, [r7, #8]
 800848e:	801a      	strh	r2, [r3, #0]
	sprintf((char*) Obj->CmdData, "P0=%d\r", Socket);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008496:	7afa      	ldrb	r2, [r7, #11]
 8008498:	4942      	ldr	r1, [pc, #264]	; (80085a4 <ES_WIFI_SendData+0x150>)
 800849a:	4618      	mov	r0, r3
 800849c:	f004 fb68 	bl	800cb70 <siprintf>
	ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80084ac:	461a      	mov	r2, r3
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f7ff fc18 	bl	8007ce4 <AT_ExecuteCommand>
 80084b4:	4603      	mov	r3, r0
 80084b6:	74fb      	strb	r3, [r7, #19]
	if (ret == ES_WIFI_STATUS_OK) {
 80084b8:	7cfb      	ldrb	r3, [r7, #19]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d15e      	bne.n	800857c <ES_WIFI_SendData+0x128>
		sprintf((char*) Obj->CmdData, "S2=%lu\r", wkgTimeOut);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80084c4:	697a      	ldr	r2, [r7, #20]
 80084c6:	4938      	ldr	r1, [pc, #224]	; (80085a8 <ES_WIFI_SendData+0x154>)
 80084c8:	4618      	mov	r0, r3
 80084ca:	f004 fb51 	bl	800cb70 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80084da:	461a      	mov	r2, r3
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f7ff fc01 	bl	8007ce4 <AT_ExecuteCommand>
 80084e2:	4603      	mov	r3, r0
 80084e4:	74fb      	strb	r3, [r7, #19]

		if (ret == ES_WIFI_STATUS_OK) {
 80084e6:	7cfb      	ldrb	r3, [r7, #19]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d13d      	bne.n	8008568 <ES_WIFI_SendData+0x114>
			sprintf((char*) Obj->CmdData, "S3=%04d\r", Reqlen);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80084f2:	893a      	ldrh	r2, [r7, #8]
 80084f4:	492d      	ldr	r1, [pc, #180]	; (80085ac <ES_WIFI_SendData+0x158>)
 80084f6:	4618      	mov	r0, r3
 80084f8:	f004 fb3a 	bl	800cb70 <siprintf>
			ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen,
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f503 7194 	add.w	r1, r3, #296	; 0x128
					Obj->CmdData);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f503 7394 	add.w	r3, r3, #296	; 0x128
			ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen,
 8008508:	893a      	ldrh	r2, [r7, #8]
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	4613      	mov	r3, r2
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f7ff fc4d 	bl	8007db0 <AT_RequestSendData>
 8008516:	4603      	mov	r3, r0
 8008518:	74fb      	strb	r3, [r7, #19]

			if (ret == ES_WIFI_STATUS_OK) {
 800851a:	7cfb      	ldrb	r3, [r7, #19]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d119      	bne.n	8008554 <ES_WIFI_SendData+0x100>
				if (strstr((char*) Obj->CmdData, "-1\r\n")) {
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008526:	4922      	ldr	r1, [pc, #136]	; (80085b0 <ES_WIFI_SendData+0x15c>)
 8008528:	4618      	mov	r0, r3
 800852a:	f004 fb97 	bl	800cc5c <strstr>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d02c      	beq.n	800858e <ES_WIFI_SendData+0x13a>
					DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData)
 8008534:	f240 72c7 	movw	r2, #1991	; 0x7c7
 8008538:	491e      	ldr	r1, [pc, #120]	; (80085b4 <ES_WIFI_SendData+0x160>)
 800853a:	481f      	ldr	r0, [pc, #124]	; (80085b8 <ES_WIFI_SendData+0x164>)
 800853c:	f004 fa10 	bl	800c960 <iprintf>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008546:	4619      	mov	r1, r3
 8008548:	481c      	ldr	r0, [pc, #112]	; (80085bc <ES_WIFI_SendData+0x168>)
 800854a:	f004 fa09 	bl	800c960 <iprintf>
					;
					ret = ES_WIFI_STATUS_ERROR;
 800854e:	2302      	movs	r3, #2
 8008550:	74fb      	strb	r3, [r7, #19]
 8008552:	e01c      	b.n	800858e <ES_WIFI_SendData+0x13a>
				}
			} else {
				DEBUG("Send Data command failed\n")
 8008554:	f240 72cc 	movw	r2, #1996	; 0x7cc
 8008558:	4916      	ldr	r1, [pc, #88]	; (80085b4 <ES_WIFI_SendData+0x160>)
 800855a:	4817      	ldr	r0, [pc, #92]	; (80085b8 <ES_WIFI_SendData+0x164>)
 800855c:	f004 fa00 	bl	800c960 <iprintf>
 8008560:	4817      	ldr	r0, [pc, #92]	; (80085c0 <ES_WIFI_SendData+0x16c>)
 8008562:	f004 fa83 	bl	800ca6c <puts>
 8008566:	e012      	b.n	800858e <ES_WIFI_SendData+0x13a>
				;
			}
		} else {
			DEBUG("S2 command failed\n")
 8008568:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800856c:	4911      	ldr	r1, [pc, #68]	; (80085b4 <ES_WIFI_SendData+0x160>)
 800856e:	4812      	ldr	r0, [pc, #72]	; (80085b8 <ES_WIFI_SendData+0x164>)
 8008570:	f004 f9f6 	bl	800c960 <iprintf>
 8008574:	4813      	ldr	r0, [pc, #76]	; (80085c4 <ES_WIFI_SendData+0x170>)
 8008576:	f004 fa79 	bl	800ca6c <puts>
 800857a:	e008      	b.n	800858e <ES_WIFI_SendData+0x13a>
			;
		}
	} else {
		DEBUG("P0 command failed\n")
 800857c:	f240 72d4 	movw	r2, #2004	; 0x7d4
 8008580:	490c      	ldr	r1, [pc, #48]	; (80085b4 <ES_WIFI_SendData+0x160>)
 8008582:	480d      	ldr	r0, [pc, #52]	; (80085b8 <ES_WIFI_SendData+0x164>)
 8008584:	f004 f9ec 	bl	800c960 <iprintf>
 8008588:	480f      	ldr	r0, [pc, #60]	; (80085c8 <ES_WIFI_SendData+0x174>)
 800858a:	f004 fa6f 	bl	800ca6c <puts>
		;
	}

	if (ret == ES_WIFI_STATUS_ERROR) {
 800858e:	7cfb      	ldrb	r3, [r7, #19]
 8008590:	2b02      	cmp	r3, #2
 8008592:	d102      	bne.n	800859a <ES_WIFI_SendData+0x146>
		*SentLen = 0;
 8008594:	6a3b      	ldr	r3, [r7, #32]
 8008596:	2200      	movs	r2, #0
 8008598:	801a      	strh	r2, [r3, #0]
	}UNLOCK_WIFI();
	return ret;
 800859a:	7cfb      	ldrb	r3, [r7, #19]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3718      	adds	r7, #24
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	0800dfe0 	.word	0x0800dfe0
 80085a8:	0800e198 	.word	0x0800e198
 80085ac:	0800e1a0 	.word	0x0800e1a0
 80085b0:	0800e1ac 	.word	0x0800e1ac
 80085b4:	0800e070 	.word	0x0800e070
 80085b8:	0800e08c 	.word	0x0800e08c
 80085bc:	0800e1b4 	.word	0x0800e1b4
 80085c0:	0800e1d0 	.word	0x0800e1d0
 80085c4:	0800e1ec 	.word	0x0800e1ec
 80085c8:	0800e200 	.word	0x0800e200

080085cc <ES_WIFI_ReceiveData>:
 * @param  len : pointer to the length of the data to be received
 * @retval Operation Status.
 */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket,
		uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen,
		uint32_t Timeout) {
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b088      	sub	sp, #32
 80085d0:	af02      	add	r7, sp, #8
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	607a      	str	r2, [r7, #4]
 80085d6:	461a      	mov	r2, r3
 80085d8:	460b      	mov	r3, r1
 80085da:	72fb      	strb	r3, [r7, #11]
 80085dc:	4613      	mov	r3, r2
 80085de:	813b      	strh	r3, [r7, #8]
	uint32_t wkgTimeOut;

	ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80085e0:	2302      	movs	r3, #2
 80085e2:	74fb      	strb	r3, [r7, #19]

	if (Timeout == 0) {
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d102      	bne.n	80085f0 <ES_WIFI_ReceiveData+0x24>
		wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 80085ea:	2301      	movs	r3, #1
 80085ec:	617b      	str	r3, [r7, #20]
 80085ee:	e001      	b.n	80085f4 <ES_WIFI_ReceiveData+0x28>
	} else {
		wkgTimeOut = Timeout;
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	617b      	str	r3, [r7, #20]
	}

	LOCK_WIFI();

	if (Reqlen <= ES_WIFI_PAYLOAD_SIZE) {
 80085f4:	893b      	ldrh	r3, [r7, #8]
 80085f6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80085fa:	f200 808b 	bhi.w	8008714 <ES_WIFI_ReceiveData+0x148>
		sprintf((char*) Obj->CmdData, "P0=%d\r", Socket);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008604:	7afa      	ldrb	r2, [r7, #11]
 8008606:	4946      	ldr	r1, [pc, #280]	; (8008720 <ES_WIFI_ReceiveData+0x154>)
 8008608:	4618      	mov	r0, r3
 800860a:	f004 fab1 	bl	800cb70 <siprintf>
		ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800861a:	461a      	mov	r2, r3
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f7ff fb61 	bl	8007ce4 <AT_ExecuteCommand>
 8008622:	4603      	mov	r3, r0
 8008624:	74fb      	strb	r3, [r7, #19]

		if (ret == ES_WIFI_STATUS_OK) {
 8008626:	7cfb      	ldrb	r3, [r7, #19]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d165      	bne.n	80086f8 <ES_WIFI_ReceiveData+0x12c>
			sprintf((char*) Obj->CmdData, "R1=%d\r", Reqlen);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008632:	893a      	ldrh	r2, [r7, #8]
 8008634:	493b      	ldr	r1, [pc, #236]	; (8008724 <ES_WIFI_ReceiveData+0x158>)
 8008636:	4618      	mov	r0, r3
 8008638:	f004 fa9a 	bl	800cb70 <siprintf>
			ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008648:	461a      	mov	r2, r3
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f7ff fb4a 	bl	8007ce4 <AT_ExecuteCommand>
 8008650:	4603      	mov	r3, r0
 8008652:	74fb      	strb	r3, [r7, #19]
			if (ret == ES_WIFI_STATUS_OK) {
 8008654:	7cfb      	ldrb	r3, [r7, #19]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d141      	bne.n	80086de <ES_WIFI_ReceiveData+0x112>
				sprintf((char*) Obj->CmdData, "R2=%lu\r", wkgTimeOut);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	4931      	ldr	r1, [pc, #196]	; (8008728 <ES_WIFI_ReceiveData+0x15c>)
 8008664:	4618      	mov	r0, r3
 8008666:	f004 fa83 	bl	800cb70 <siprintf>
				ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008676:	461a      	mov	r2, r3
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	f7ff fb33 	bl	8007ce4 <AT_ExecuteCommand>
 800867e:	4603      	mov	r3, r0
 8008680:	74fb      	strb	r3, [r7, #19]
				if (ret == ES_WIFI_STATUS_OK) {
 8008682:	7cfb      	ldrb	r3, [r7, #19]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d120      	bne.n	80086ca <ES_WIFI_ReceiveData+0xfe>
					sprintf((char*) Obj->CmdData, "R0\r");
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800868e:	4927      	ldr	r1, [pc, #156]	; (800872c <ES_WIFI_ReceiveData+0x160>)
 8008690:	4618      	mov	r0, r3
 8008692:	f004 fa6d 	bl	800cb70 <siprintf>
					ret = AT_RequestReceiveData(Obj, Obj->CmdData,
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800869c:	893a      	ldrh	r2, [r7, #8]
 800869e:	6a3b      	ldr	r3, [r7, #32]
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	4613      	mov	r3, r2
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f7ff fbf8 	bl	8007e9c <AT_RequestReceiveData>
 80086ac:	4603      	mov	r3, r0
 80086ae:	74fb      	strb	r3, [r7, #19]
							(char*) pdata, Reqlen, Receivedlen);
					if (ret != ES_WIFI_STATUS_OK) {
 80086b0:	7cfb      	ldrb	r3, [r7, #19]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d02e      	beq.n	8008714 <ES_WIFI_ReceiveData+0x148>
						DEBUG("AT_RequestReceiveData  failed\n")
 80086b6:	f44f 6205 	mov.w	r2, #2128	; 0x850
 80086ba:	491d      	ldr	r1, [pc, #116]	; (8008730 <ES_WIFI_ReceiveData+0x164>)
 80086bc:	481d      	ldr	r0, [pc, #116]	; (8008734 <ES_WIFI_ReceiveData+0x168>)
 80086be:	f004 f94f 	bl	800c960 <iprintf>
 80086c2:	481d      	ldr	r0, [pc, #116]	; (8008738 <ES_WIFI_ReceiveData+0x16c>)
 80086c4:	f004 f9d2 	bl	800ca6c <puts>
 80086c8:	e024      	b.n	8008714 <ES_WIFI_ReceiveData+0x148>
						;
					}
				} else {
					DEBUG("setting timeout failed\n")
 80086ca:	f640 0254 	movw	r2, #2132	; 0x854
 80086ce:	4918      	ldr	r1, [pc, #96]	; (8008730 <ES_WIFI_ReceiveData+0x164>)
 80086d0:	4818      	ldr	r0, [pc, #96]	; (8008734 <ES_WIFI_ReceiveData+0x168>)
 80086d2:	f004 f945 	bl	800c960 <iprintf>
 80086d6:	4819      	ldr	r0, [pc, #100]	; (800873c <ES_WIFI_ReceiveData+0x170>)
 80086d8:	f004 f9c8 	bl	800ca6c <puts>
 80086dc:	e01a      	b.n	8008714 <ES_WIFI_ReceiveData+0x148>
					;
				}
			} else {
				DEBUG("setting requested len failed\n")
 80086de:	f640 0258 	movw	r2, #2136	; 0x858
 80086e2:	4913      	ldr	r1, [pc, #76]	; (8008730 <ES_WIFI_ReceiveData+0x164>)
 80086e4:	4813      	ldr	r0, [pc, #76]	; (8008734 <ES_WIFI_ReceiveData+0x168>)
 80086e6:	f004 f93b 	bl	800c960 <iprintf>
 80086ea:	4815      	ldr	r0, [pc, #84]	; (8008740 <ES_WIFI_ReceiveData+0x174>)
 80086ec:	f004 f9be 	bl	800ca6c <puts>
				;
				*Receivedlen = 0;
 80086f0:	6a3b      	ldr	r3, [r7, #32]
 80086f2:	2200      	movs	r2, #0
 80086f4:	801a      	strh	r2, [r3, #0]
 80086f6:	e00d      	b.n	8008714 <ES_WIFI_ReceiveData+0x148>
			}
		} else {
			DEBUG("setting socket for read failed\n")
 80086f8:	f640 025d 	movw	r2, #2141	; 0x85d
 80086fc:	490c      	ldr	r1, [pc, #48]	; (8008730 <ES_WIFI_ReceiveData+0x164>)
 80086fe:	480d      	ldr	r0, [pc, #52]	; (8008734 <ES_WIFI_ReceiveData+0x168>)
 8008700:	f004 f92e 	bl	800c960 <iprintf>
 8008704:	480f      	ldr	r0, [pc, #60]	; (8008744 <ES_WIFI_ReceiveData+0x178>)
 8008706:	f004 f9b1 	bl	800ca6c <puts>
			;
			issue15++;
 800870a:	4b0f      	ldr	r3, [pc, #60]	; (8008748 <ES_WIFI_ReceiveData+0x17c>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	3301      	adds	r3, #1
 8008710:	4a0d      	ldr	r2, [pc, #52]	; (8008748 <ES_WIFI_ReceiveData+0x17c>)
 8008712:	6013      	str	r3, [r2, #0]
		}
	}UNLOCK_WIFI();
	return ret;
 8008714:	7cfb      	ldrb	r3, [r7, #19]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	0800dfe0 	.word	0x0800dfe0
 8008724:	0800e224 	.word	0x0800e224
 8008728:	0800e22c 	.word	0x0800e22c
 800872c:	0800e234 	.word	0x0800e234
 8008730:	0800e070 	.word	0x0800e070
 8008734:	0800e08c 	.word	0x0800e08c
 8008738:	0800e238 	.word	0x0800e238
 800873c:	0800e258 	.word	0x0800e258
 8008740:	0800e270 	.word	0x0800e270
 8008744:	0800e290 	.word	0x0800e290
 8008748:	20000860 	.word	0x20000860

0800874c <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b08c      	sub	sp, #48	; 0x30
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8008754:	4b57      	ldr	r3, [pc, #348]	; (80088b4 <SPI_WIFI_MspInit+0x168>)
 8008756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008758:	4a56      	ldr	r2, [pc, #344]	; (80088b4 <SPI_WIFI_MspInit+0x168>)
 800875a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800875e:	6593      	str	r3, [r2, #88]	; 0x58
 8008760:	4b54      	ldr	r3, [pc, #336]	; (80088b4 <SPI_WIFI_MspInit+0x168>)
 8008762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008768:	61bb      	str	r3, [r7, #24]
 800876a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800876c:	4b51      	ldr	r3, [pc, #324]	; (80088b4 <SPI_WIFI_MspInit+0x168>)
 800876e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008770:	4a50      	ldr	r2, [pc, #320]	; (80088b4 <SPI_WIFI_MspInit+0x168>)
 8008772:	f043 0302 	orr.w	r3, r3, #2
 8008776:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008778:	4b4e      	ldr	r3, [pc, #312]	; (80088b4 <SPI_WIFI_MspInit+0x168>)
 800877a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800877c:	f003 0302 	and.w	r3, r3, #2
 8008780:	617b      	str	r3, [r7, #20]
 8008782:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008784:	4b4b      	ldr	r3, [pc, #300]	; (80088b4 <SPI_WIFI_MspInit+0x168>)
 8008786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008788:	4a4a      	ldr	r2, [pc, #296]	; (80088b4 <SPI_WIFI_MspInit+0x168>)
 800878a:	f043 0304 	orr.w	r3, r3, #4
 800878e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008790:	4b48      	ldr	r3, [pc, #288]	; (80088b4 <SPI_WIFI_MspInit+0x168>)
 8008792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008794:	f003 0304 	and.w	r3, r3, #4
 8008798:	613b      	str	r3, [r7, #16]
 800879a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800879c:	4b45      	ldr	r3, [pc, #276]	; (80088b4 <SPI_WIFI_MspInit+0x168>)
 800879e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087a0:	4a44      	ldr	r2, [pc, #272]	; (80088b4 <SPI_WIFI_MspInit+0x168>)
 80087a2:	f043 0310 	orr.w	r3, r3, #16
 80087a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80087a8:	4b42      	ldr	r3, [pc, #264]	; (80088b4 <SPI_WIFI_MspInit+0x168>)
 80087aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ac:	f003 0310 	and.w	r3, r3, #16
 80087b0:	60fb      	str	r3, [r7, #12]
 80087b2:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 80087b4:	2200      	movs	r2, #0
 80087b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80087ba:	483f      	ldr	r0, [pc, #252]	; (80088b8 <SPI_WIFI_MspInit+0x16c>)
 80087bc:	f7f9 ffda 	bl	8002774 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 80087c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087c4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80087c6:	2301      	movs	r3, #1
 80087c8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80087ca:	2300      	movs	r3, #0
 80087cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80087ce:	2300      	movs	r3, #0
 80087d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80087d2:	f107 031c 	add.w	r3, r7, #28
 80087d6:	4619      	mov	r1, r3
 80087d8:	4837      	ldr	r0, [pc, #220]	; (80088b8 <SPI_WIFI_MspInit+0x16c>)
 80087da:	f7f9 fd15 	bl	8002208 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 80087de:	2302      	movs	r3, #2
 80087e0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80087e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80087e6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80087e8:	2300      	movs	r3, #0
 80087ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80087ec:	2300      	movs	r3, #0
 80087ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80087f0:	f107 031c 	add.w	r3, r7, #28
 80087f4:	4619      	mov	r1, r3
 80087f6:	4831      	ldr	r0, [pc, #196]	; (80088bc <SPI_WIFI_MspInit+0x170>)
 80087f8:	f7f9 fd06 	bl	8002208 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 80087fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008800:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8008802:	2301      	movs	r3, #1
 8008804:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008806:	2300      	movs	r3, #0
 8008808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800880a:	2300      	movs	r3, #0
 800880c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 800880e:	2300      	movs	r3, #0
 8008810:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8008812:	f107 031c 	add.w	r3, r7, #28
 8008816:	4619      	mov	r1, r3
 8008818:	4828      	ldr	r0, [pc, #160]	; (80088bc <SPI_WIFI_MspInit+0x170>)
 800881a:	f7f9 fcf5 	bl	8002208 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 800881e:	2201      	movs	r2, #1
 8008820:	2101      	movs	r1, #1
 8008822:	4826      	ldr	r0, [pc, #152]	; (80088bc <SPI_WIFI_MspInit+0x170>)
 8008824:	f7f9 ffa6 	bl	8002774 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8008828:	2301      	movs	r3, #1
 800882a:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800882c:	2301      	movs	r3, #1
 800882e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008830:	2300      	movs	r3, #0
 8008832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008834:	2301      	movs	r3, #1
 8008836:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8008838:	f107 031c 	add.w	r3, r7, #28
 800883c:	4619      	mov	r1, r3
 800883e:	481f      	ldr	r0, [pc, #124]	; (80088bc <SPI_WIFI_MspInit+0x170>)
 8008840:	f7f9 fce2 	bl	8002208 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8008844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008848:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800884a:	2302      	movs	r3, #2
 800884c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800884e:	2300      	movs	r3, #0
 8008850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008852:	2301      	movs	r3, #1
 8008854:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8008856:	2306      	movs	r3, #6
 8008858:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800885a:	f107 031c 	add.w	r3, r7, #28
 800885e:	4619      	mov	r1, r3
 8008860:	4817      	ldr	r0, [pc, #92]	; (80088c0 <SPI_WIFI_MspInit+0x174>)
 8008862:	f7f9 fcd1 	bl	8002208 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8008866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800886a:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800886c:	2302      	movs	r3, #2
 800886e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008870:	2300      	movs	r3, #0
 8008872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008874:	2301      	movs	r3, #1
 8008876:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8008878:	2306      	movs	r3, #6
 800887a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800887c:	f107 031c 	add.w	r3, r7, #28
 8008880:	4619      	mov	r1, r3
 8008882:	480f      	ldr	r0, [pc, #60]	; (80088c0 <SPI_WIFI_MspInit+0x174>)
 8008884:	f7f9 fcc0 	bl	8002208 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8008888:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800888c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800888e:	2302      	movs	r3, #2
 8008890:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8008892:	2301      	movs	r3, #1
 8008894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008896:	2301      	movs	r3, #1
 8008898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800889a:	2306      	movs	r3, #6
 800889c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800889e:	f107 031c 	add.w	r3, r7, #28
 80088a2:	4619      	mov	r1, r3
 80088a4:	4806      	ldr	r0, [pc, #24]	; (80088c0 <SPI_WIFI_MspInit+0x174>)
 80088a6:	f7f9 fcaf 	bl	8002208 <HAL_GPIO_Init>
}
 80088aa:	bf00      	nop
 80088ac:	3730      	adds	r7, #48	; 0x30
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	40021000 	.word	0x40021000
 80088b8:	48000400 	.word	0x48000400
 80088bc:	48001000 	.word	0x48001000
 80088c0:	48000800 	.word	0x48000800

080088c4 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	4603      	mov	r3, r0
 80088cc:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 80088ce:	2300      	movs	r3, #0
 80088d0:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 80088d2:	88fb      	ldrh	r3, [r7, #6]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d145      	bne.n	8008964 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 80088d8:	4b27      	ldr	r3, [pc, #156]	; (8008978 <SPI_WIFI_Init+0xb4>)
 80088da:	4a28      	ldr	r2, [pc, #160]	; (800897c <SPI_WIFI_Init+0xb8>)
 80088dc:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 80088de:	4826      	ldr	r0, [pc, #152]	; (8008978 <SPI_WIFI_Init+0xb4>)
 80088e0:	f7ff ff34 	bl	800874c <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 80088e4:	4b24      	ldr	r3, [pc, #144]	; (8008978 <SPI_WIFI_Init+0xb4>)
 80088e6:	f44f 7282 	mov.w	r2, #260	; 0x104
 80088ea:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 80088ec:	4b22      	ldr	r3, [pc, #136]	; (8008978 <SPI_WIFI_Init+0xb4>)
 80088ee:	2200      	movs	r2, #0
 80088f0:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 80088f2:	4b21      	ldr	r3, [pc, #132]	; (8008978 <SPI_WIFI_Init+0xb4>)
 80088f4:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80088f8:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80088fa:	4b1f      	ldr	r3, [pc, #124]	; (8008978 <SPI_WIFI_Init+0xb4>)
 80088fc:	2200      	movs	r2, #0
 80088fe:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8008900:	4b1d      	ldr	r3, [pc, #116]	; (8008978 <SPI_WIFI_Init+0xb4>)
 8008902:	2200      	movs	r2, #0
 8008904:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8008906:	4b1c      	ldr	r3, [pc, #112]	; (8008978 <SPI_WIFI_Init+0xb4>)
 8008908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800890c:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 800890e:	4b1a      	ldr	r3, [pc, #104]	; (8008978 <SPI_WIFI_Init+0xb4>)
 8008910:	2210      	movs	r2, #16
 8008912:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8008914:	4b18      	ldr	r3, [pc, #96]	; (8008978 <SPI_WIFI_Init+0xb4>)
 8008916:	2200      	movs	r2, #0
 8008918:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 800891a:	4b17      	ldr	r3, [pc, #92]	; (8008978 <SPI_WIFI_Init+0xb4>)
 800891c:	2200      	movs	r2, #0
 800891e:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8008920:	4b15      	ldr	r3, [pc, #84]	; (8008978 <SPI_WIFI_Init+0xb4>)
 8008922:	2200      	movs	r2, #0
 8008924:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8008926:	4b14      	ldr	r3, [pc, #80]	; (8008978 <SPI_WIFI_Init+0xb4>)
 8008928:	2200      	movs	r2, #0
 800892a:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 800892c:	4812      	ldr	r0, [pc, #72]	; (8008978 <SPI_WIFI_Init+0xb4>)
 800892e:	f7fb fdfd 	bl	800452c <HAL_SPI_Init>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d002      	beq.n	800893e <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8008938:	f04f 33ff 	mov.w	r3, #4294967295
 800893c:	e018      	b.n	8008970 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 800893e:	2200      	movs	r2, #0
 8008940:	2100      	movs	r1, #0
 8008942:	2007      	movs	r0, #7
 8008944:	f7f9 faaa 	bl	8001e9c <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8008948:	2007      	movs	r0, #7
 800894a:	f7f9 fac3 	bl	8001ed4 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 800894e:	2200      	movs	r2, #0
 8008950:	2100      	movs	r1, #0
 8008952:	2033      	movs	r0, #51	; 0x33
 8008954:	f7f9 faa2 	bl	8001e9c <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8008958:	2033      	movs	r0, #51	; 0x33
 800895a:	f7f9 fabb 	bl	8001ed4 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 800895e:	200a      	movs	r0, #10
 8008960:	f000 f9fe 	bl	8008d60 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 8008964:	f000 f80c 	bl	8008980 <SPI_WIFI_ResetModule>
 8008968:	4603      	mov	r3, r0
 800896a:	73fb      	strb	r3, [r7, #15]

  return rc;
 800896c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	20000864 	.word	0x20000864
 800897c:	40003c00 	.word	0x40003c00

08008980 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8008986:	f7f9 f9a1 	bl	8001ccc <HAL_GetTick>
 800898a:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 800898c:	2300      	movs	r3, #0
 800898e:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8008990:	2200      	movs	r2, #0
 8008992:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008996:	4830      	ldr	r0, [pc, #192]	; (8008a58 <SPI_WIFI_ResetModule+0xd8>)
 8008998:	f7f9 feec 	bl	8002774 <HAL_GPIO_WritePin>
 800899c:	200a      	movs	r0, #10
 800899e:	f7f9 f9a1 	bl	8001ce4 <HAL_Delay>
 80089a2:	2201      	movs	r2, #1
 80089a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80089a8:	482b      	ldr	r0, [pc, #172]	; (8008a58 <SPI_WIFI_ResetModule+0xd8>)
 80089aa:	f7f9 fee3 	bl	8002774 <HAL_GPIO_WritePin>
 80089ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80089b2:	f7f9 f997 	bl	8001ce4 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 80089b6:	2200      	movs	r2, #0
 80089b8:	2101      	movs	r1, #1
 80089ba:	4827      	ldr	r0, [pc, #156]	; (8008a58 <SPI_WIFI_ResetModule+0xd8>)
 80089bc:	f7f9 feda 	bl	8002774 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80089c0:	200f      	movs	r0, #15
 80089c2:	f000 f9cd 	bl	8008d60 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 80089c6:	e020      	b.n	8008a0a <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
 80089ca:	463a      	mov	r2, r7
 80089cc:	18d1      	adds	r1, r2, r3
 80089ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80089d2:	2201      	movs	r2, #1
 80089d4:	4821      	ldr	r0, [pc, #132]	; (8008a5c <SPI_WIFI_ResetModule+0xdc>)
 80089d6:	f7fb fe74 	bl	80046c2 <HAL_SPI_Receive>
 80089da:	4603      	mov	r3, r0
 80089dc:	71fb      	strb	r3, [r7, #7]
    count += 2;
 80089de:	7bfb      	ldrb	r3, [r7, #15]
 80089e0:	3302      	adds	r3, #2
 80089e2:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 80089e4:	f7f9 f972 	bl	8001ccc <HAL_GetTick>
 80089e8:	4602      	mov	r2, r0
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089f2:	d202      	bcs.n	80089fa <SPI_WIFI_ResetModule+0x7a>
 80089f4:	79fb      	ldrb	r3, [r7, #7]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d007      	beq.n	8008a0a <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 80089fa:	2201      	movs	r2, #1
 80089fc:	2101      	movs	r1, #1
 80089fe:	4816      	ldr	r0, [pc, #88]	; (8008a58 <SPI_WIFI_ResetModule+0xd8>)
 8008a00:	f7f9 feb8 	bl	8002774 <HAL_GPIO_WritePin>
      return -1;
 8008a04:	f04f 33ff 	mov.w	r3, #4294967295
 8008a08:	e021      	b.n	8008a4e <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8008a0a:	2102      	movs	r1, #2
 8008a0c:	4812      	ldr	r0, [pc, #72]	; (8008a58 <SPI_WIFI_ResetModule+0xd8>)
 8008a0e:	f7f9 fe99 	bl	8002744 <HAL_GPIO_ReadPin>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d0d7      	beq.n	80089c8 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 8008a18:	2201      	movs	r2, #1
 8008a1a:	2101      	movs	r1, #1
 8008a1c:	480e      	ldr	r0, [pc, #56]	; (8008a58 <SPI_WIFI_ResetModule+0xd8>)
 8008a1e:	f7f9 fea9 	bl	8002774 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8008a22:	783b      	ldrb	r3, [r7, #0]
 8008a24:	2b15      	cmp	r3, #21
 8008a26:	d10e      	bne.n	8008a46 <SPI_WIFI_ResetModule+0xc6>
 8008a28:	787b      	ldrb	r3, [r7, #1]
 8008a2a:	2b15      	cmp	r3, #21
 8008a2c:	d10b      	bne.n	8008a46 <SPI_WIFI_ResetModule+0xc6>
 8008a2e:	78bb      	ldrb	r3, [r7, #2]
 8008a30:	2b0d      	cmp	r3, #13
 8008a32:	d108      	bne.n	8008a46 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8008a34:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8008a36:	2b0a      	cmp	r3, #10
 8008a38:	d105      	bne.n	8008a46 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8008a3a:	793b      	ldrb	r3, [r7, #4]
 8008a3c:	2b3e      	cmp	r3, #62	; 0x3e
 8008a3e:	d102      	bne.n	8008a46 <SPI_WIFI_ResetModule+0xc6>
 8008a40:	797b      	ldrb	r3, [r7, #5]
 8008a42:	2b20      	cmp	r3, #32
 8008a44:	d002      	beq.n	8008a4c <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8008a46:	f04f 33ff 	mov.w	r3, #4294967295
 8008a4a:	e000      	b.n	8008a4e <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	48001000 	.word	0x48001000
 8008a5c:	20000864 	.word	0x20000864

08008a60 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8008a64:	4802      	ldr	r0, [pc, #8]	; (8008a70 <SPI_WIFI_DeInit+0x10>)
 8008a66:	f7fb fe04 	bl	8004672 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	20000864 	.word	0x20000864

08008a74 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8008a7c:	f7f9 f926 	bl	8001ccc <HAL_GetTick>
 8008a80:	4603      	mov	r3, r0
 8008a82:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8008a84:	e00a      	b.n	8008a9c <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8008a86:	f7f9 f921 	bl	8001ccc <HAL_GetTick>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	1ad2      	subs	r2, r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d902      	bls.n	8008a9c <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8008a96:	f04f 33ff 	mov.w	r3, #4294967295
 8008a9a:	e007      	b.n	8008aac <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8008a9c:	2102      	movs	r1, #2
 8008a9e:	4805      	ldr	r0, [pc, #20]	; (8008ab4 <wait_cmddata_rdy_high+0x40>)
 8008aa0:	f7f9 fe50 	bl	8002744 <HAL_GPIO_ReadPin>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d1ed      	bne.n	8008a86 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	48001000 	.word	0x48001000

08008ab8 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8008ac0:	f7f9 f904 	bl	8001ccc <HAL_GetTick>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8008ac8:	e00a      	b.n	8008ae0 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8008aca:	f7f9 f8ff 	bl	8001ccc <HAL_GetTick>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	1ad2      	subs	r2, r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d902      	bls.n	8008ae0 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8008ada:	f04f 33ff 	mov.w	r3, #4294967295
 8008ade:	e004      	b.n	8008aea <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8008ae0:	4b04      	ldr	r3, [pc, #16]	; (8008af4 <wait_cmddata_rdy_rising_event+0x3c>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d0f0      	beq.n	8008aca <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8008ae8:	2300      	movs	r3, #0
#endif
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	200008d0 	.word	0x200008d0

08008af8 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8008b00:	f7f9 f8e4 	bl	8001ccc <HAL_GetTick>
 8008b04:	4603      	mov	r3, r0
 8008b06:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 8008b08:	e00a      	b.n	8008b20 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8008b0a:	f7f9 f8df 	bl	8001ccc <HAL_GetTick>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	1ad2      	subs	r2, r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d902      	bls.n	8008b20 <wait_spi_rx_event+0x28>
    {
      return -1;
 8008b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b1e:	e004      	b.n	8008b2a <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 8008b20:	4b04      	ldr	r3, [pc, #16]	; (8008b34 <wait_spi_rx_event+0x3c>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d0f0      	beq.n	8008b0a <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8008b28:	2300      	movs	r3, #0
#endif
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	200008c8 	.word	0x200008c8

08008b38 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8008b40:	f7f9 f8c4 	bl	8001ccc <HAL_GetTick>
 8008b44:	4603      	mov	r3, r0
 8008b46:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 8008b48:	e00a      	b.n	8008b60 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8008b4a:	f7f9 f8bf 	bl	8001ccc <HAL_GetTick>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	1ad2      	subs	r2, r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d902      	bls.n	8008b60 <wait_spi_tx_event+0x28>
    {
      return -1;
 8008b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b5e:	e004      	b.n	8008b6a <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 8008b60:	4b04      	ldr	r3, [pc, #16]	; (8008b74 <wait_spi_tx_event+0x3c>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d0f0      	beq.n	8008b4a <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8008b68:	2300      	movs	r3, #0
#endif
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	200008cc 	.word	0x200008cc

08008b78 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	460b      	mov	r3, r1
 8008b82:	607a      	str	r2, [r7, #4]
 8008b84:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8008b86:	2300      	movs	r3, #0
 8008b88:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	2101      	movs	r1, #1
 8008b8e:	4834      	ldr	r0, [pc, #208]	; (8008c60 <SPI_WIFI_ReceiveData+0xe8>)
 8008b90:	f7f9 fdf0 	bl	8002774 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8008b94:	2003      	movs	r0, #3
 8008b96:	f000 f8e3 	bl	8008d60 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7ff ff8b 	bl	8008ab8 <wait_cmddata_rdy_rising_event>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	da02      	bge.n	8008bae <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8008ba8:	f06f 0302 	mvn.w	r3, #2
 8008bac:	e054      	b.n	8008c58 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8008bae:	2200      	movs	r2, #0
 8008bb0:	2101      	movs	r1, #1
 8008bb2:	482b      	ldr	r0, [pc, #172]	; (8008c60 <SPI_WIFI_ReceiveData+0xe8>)
 8008bb4:	f7f9 fdde 	bl	8002774 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8008bb8:	200f      	movs	r0, #15
 8008bba:	f000 f8d1 	bl	8008d60 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8008bbe:	e03d      	b.n	8008c3c <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8008bc0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008bc4:	897b      	ldrh	r3, [r7, #10]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	db02      	blt.n	8008bd0 <SPI_WIFI_ReceiveData+0x58>
 8008bca:	897b      	ldrh	r3, [r7, #10]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d13c      	bne.n	8008c4a <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8008bd0:	4b24      	ldr	r3, [pc, #144]	; (8008c64 <SPI_WIFI_ReceiveData+0xec>)
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8008bd6:	f107 0314 	add.w	r3, r7, #20
 8008bda:	2201      	movs	r2, #1
 8008bdc:	4619      	mov	r1, r3
 8008bde:	4822      	ldr	r0, [pc, #136]	; (8008c68 <SPI_WIFI_ReceiveData+0xf0>)
 8008be0:	f7fc f940 	bl	8004e64 <HAL_SPI_Receive_IT>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d007      	beq.n	8008bfa <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8008bea:	2201      	movs	r2, #1
 8008bec:	2101      	movs	r1, #1
 8008bee:	481c      	ldr	r0, [pc, #112]	; (8008c60 <SPI_WIFI_ReceiveData+0xe8>)
 8008bf0:	f7f9 fdc0 	bl	8002774 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8008bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8008bf8:	e02e      	b.n	8008c58 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7ff ff7b 	bl	8008af8 <wait_spi_rx_event>

      pData[0] = tmp[0];
 8008c02:	7d3a      	ldrb	r2, [r7, #20]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	7d7a      	ldrb	r2, [r7, #21]
 8008c0e:	701a      	strb	r2, [r3, #0]
      length += 2;
 8008c10:	8afb      	ldrh	r3, [r7, #22]
 8008c12:	3302      	adds	r3, #2
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	3302      	adds	r3, #2
 8008c1c:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8008c1e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008c22:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008c26:	db09      	blt.n	8008c3c <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8008c28:	2201      	movs	r2, #1
 8008c2a:	2101      	movs	r1, #1
 8008c2c:	480c      	ldr	r0, [pc, #48]	; (8008c60 <SPI_WIFI_ReceiveData+0xe8>)
 8008c2e:	f7f9 fda1 	bl	8002774 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8008c32:	f7ff fea5 	bl	8008980 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8008c36:	f06f 0303 	mvn.w	r3, #3
 8008c3a:	e00d      	b.n	8008c58 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8008c3c:	2102      	movs	r1, #2
 8008c3e:	4808      	ldr	r0, [pc, #32]	; (8008c60 <SPI_WIFI_ReceiveData+0xe8>)
 8008c40:	f7f9 fd80 	bl	8002744 <HAL_GPIO_ReadPin>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d0ba      	beq.n	8008bc0 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	2101      	movs	r1, #1
 8008c4e:	4804      	ldr	r0, [pc, #16]	; (8008c60 <SPI_WIFI_ReceiveData+0xe8>)
 8008c50:	f7f9 fd90 	bl	8002774 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8008c54:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3718      	adds	r7, #24
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	48001000 	.word	0x48001000
 8008c64:	200008c8 	.word	0x200008c8
 8008c68:	20000864 	.word	0x20000864

08008c6c <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b086      	sub	sp, #24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	460b      	mov	r3, r1
 8008c76:	607a      	str	r2, [r7, #4]
 8008c78:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7ff fef9 	bl	8008a74 <wait_cmddata_rdy_high>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	da02      	bge.n	8008c8e <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8008c88:	f04f 33ff 	mov.w	r3, #4294967295
 8008c8c:	e04f      	b.n	8008d2e <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 8008c8e:	4b2a      	ldr	r3, [pc, #168]	; (8008d38 <SPI_WIFI_SendData+0xcc>)
 8008c90:	2201      	movs	r2, #1
 8008c92:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8008c94:	2200      	movs	r2, #0
 8008c96:	2101      	movs	r1, #1
 8008c98:	4828      	ldr	r0, [pc, #160]	; (8008d3c <SPI_WIFI_SendData+0xd0>)
 8008c9a:	f7f9 fd6b 	bl	8002774 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8008c9e:	200f      	movs	r0, #15
 8008ca0:	f000 f85e 	bl	8008d60 <SPI_WIFI_DelayUs>
  if (len > 1)
 8008ca4:	897b      	ldrh	r3, [r7, #10]
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d919      	bls.n	8008cde <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 8008caa:	4b25      	ldr	r3, [pc, #148]	; (8008d40 <SPI_WIFI_SendData+0xd4>)
 8008cac:	2201      	movs	r2, #1
 8008cae:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8008cb0:	897b      	ldrh	r3, [r7, #10]
 8008cb2:	085b      	lsrs	r3, r3, #1
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	68f9      	ldr	r1, [r7, #12]
 8008cba:	4822      	ldr	r0, [pc, #136]	; (8008d44 <SPI_WIFI_SendData+0xd8>)
 8008cbc:	f7fc f844 	bl	8004d48 <HAL_SPI_Transmit_IT>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d007      	beq.n	8008cd6 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	2101      	movs	r1, #1
 8008cca:	481c      	ldr	r0, [pc, #112]	; (8008d3c <SPI_WIFI_SendData+0xd0>)
 8008ccc:	f7f9 fd52 	bl	8002774 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8008cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8008cd4:	e02b      	b.n	8008d2e <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7ff ff2d 	bl	8008b38 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 8008cde:	897b      	ldrh	r3, [r7, #10]
 8008ce0:	f003 0301 	and.w	r3, r3, #1
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d020      	beq.n	8008d2a <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 8008ce8:	897b      	ldrh	r3, [r7, #10]
 8008cea:	3b01      	subs	r3, #1
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	4413      	add	r3, r2
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8008cf4:	230a      	movs	r3, #10
 8008cf6:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8008cf8:	4b11      	ldr	r3, [pc, #68]	; (8008d40 <SPI_WIFI_SendData+0xd4>)
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8008cfe:	f107 0314 	add.w	r3, r7, #20
 8008d02:	2201      	movs	r2, #1
 8008d04:	4619      	mov	r1, r3
 8008d06:	480f      	ldr	r0, [pc, #60]	; (8008d44 <SPI_WIFI_SendData+0xd8>)
 8008d08:	f7fc f81e 	bl	8004d48 <HAL_SPI_Transmit_IT>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d007      	beq.n	8008d22 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8008d12:	2201      	movs	r2, #1
 8008d14:	2101      	movs	r1, #1
 8008d16:	4809      	ldr	r0, [pc, #36]	; (8008d3c <SPI_WIFI_SendData+0xd0>)
 8008d18:	f7f9 fd2c 	bl	8002774 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8008d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d20:	e005      	b.n	8008d2e <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7ff ff07 	bl	8008b38 <wait_spi_tx_event>
    
  }
  return len;
 8008d2a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3718      	adds	r7, #24
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	200008d0 	.word	0x200008d0
 8008d3c:	48001000 	.word	0x48001000
 8008d40:	200008cc 	.word	0x200008cc
 8008d44:	20000864 	.word	0x20000864

08008d48 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7f8 ffc7 	bl	8001ce4 <HAL_Delay>
}
 8008d56:	bf00      	nop
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
	...

08008d60 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8008d70:	4b20      	ldr	r3, [pc, #128]	; (8008df4 <SPI_WIFI_DelayUs+0x94>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d122      	bne.n	8008dbe <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8008d78:	4b1f      	ldr	r3, [pc, #124]	; (8008df8 <SPI_WIFI_DelayUs+0x98>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a1f      	ldr	r2, [pc, #124]	; (8008dfc <SPI_WIFI_DelayUs+0x9c>)
 8008d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d82:	099b      	lsrs	r3, r3, #6
 8008d84:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8008d86:	2300      	movs	r3, #0
 8008d88:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8008d8e:	f7f8 ff9d 	bl	8001ccc <HAL_GetTick>
 8008d92:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8008d94:	e002      	b.n	8008d9c <SPI_WIFI_DelayUs+0x3c>
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	60bb      	str	r3, [r7, #8]
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1f9      	bne.n	8008d96 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 8008da2:	f7f8 ff93 	bl	8001ccc <HAL_GetTick>
 8008da6:	4602      	mov	r2, r0
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	1ad3      	subs	r3, r2, r3
 8008dac:	4a11      	ldr	r2, [pc, #68]	; (8008df4 <SPI_WIFI_DelayUs+0x94>)
 8008dae:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8008db0:	4b10      	ldr	r3, [pc, #64]	; (8008df4 <SPI_WIFI_DelayUs+0x94>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d102      	bne.n	8008dbe <SPI_WIFI_DelayUs+0x5e>
 8008db8:	4b0e      	ldr	r3, [pc, #56]	; (8008df4 <SPI_WIFI_DelayUs+0x94>)
 8008dba:	2201      	movs	r2, #1
 8008dbc:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8008dbe:	4b0e      	ldr	r3, [pc, #56]	; (8008df8 <SPI_WIFI_DelayUs+0x98>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a0f      	ldr	r2, [pc, #60]	; (8008e00 <SPI_WIFI_DelayUs+0xa0>)
 8008dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8008dc8:	0c9a      	lsrs	r2, r3, #18
 8008dca:	4b0a      	ldr	r3, [pc, #40]	; (8008df4 <SPI_WIFI_DelayUs+0x94>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dd2:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	fb02 f303 	mul.w	r3, r2, r3
 8008ddc:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8008dde:	e002      	b.n	8008de6 <SPI_WIFI_DelayUs+0x86>
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	3b01      	subs	r3, #1
 8008de4:	60bb      	str	r3, [r7, #8]
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d1f9      	bne.n	8008de0 <SPI_WIFI_DelayUs+0x80>
  return;
 8008dec:	bf00      	nop
}
 8008dee:	3718      	adds	r7, #24
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	200008d4 	.word	0x200008d4
 8008df8:	20000000 	.word	0x20000000
 8008dfc:	10624dd3 	.word	0x10624dd3
 8008e00:	431bde83 	.word	0x431bde83

08008e04 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8008e0c:	4b06      	ldr	r3, [pc, #24]	; (8008e28 <HAL_SPI_RxCpltCallback+0x24>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d002      	beq.n	8008e1a <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8008e14:	4b04      	ldr	r3, [pc, #16]	; (8008e28 <HAL_SPI_RxCpltCallback+0x24>)
 8008e16:	2200      	movs	r2, #0
 8008e18:	601a      	str	r2, [r3, #0]
  }
}
 8008e1a:	bf00      	nop
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	200008c8 	.word	0x200008c8

08008e2c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8008e34:	4b06      	ldr	r3, [pc, #24]	; (8008e50 <HAL_SPI_TxCpltCallback+0x24>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d002      	beq.n	8008e42 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8008e3c:	4b04      	ldr	r3, [pc, #16]	; (8008e50 <HAL_SPI_TxCpltCallback+0x24>)
 8008e3e:	2200      	movs	r2, #0
 8008e40:	601a      	str	r2, [r3, #0]
  }
}
 8008e42:	bf00      	nop
 8008e44:	370c      	adds	r7, #12
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	200008cc 	.word	0x200008cc

08008e54 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8008e54:	b480      	push	{r7}
 8008e56:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8008e58:	4b05      	ldr	r3, [pc, #20]	; (8008e70 <SPI_WIFI_ISR+0x1c>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d102      	bne.n	8008e66 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8008e60:	4b03      	ldr	r3, [pc, #12]	; (8008e70 <SPI_WIFI_ISR+0x1c>)
 8008e62:	2200      	movs	r2, #0
 8008e64:	601a      	str	r2, [r3, #0]
   }
}
 8008e66:	bf00      	nop
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr
 8008e70:	200008d0 	.word	0x200008d0

08008e74 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8008e7e:	4b0d      	ldr	r3, [pc, #52]	; (8008eb4 <WIFI_Init+0x40>)
 8008e80:	9301      	str	r3, [sp, #4]
 8008e82:	4b0d      	ldr	r3, [pc, #52]	; (8008eb8 <WIFI_Init+0x44>)
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	4b0d      	ldr	r3, [pc, #52]	; (8008ebc <WIFI_Init+0x48>)
 8008e88:	4a0d      	ldr	r2, [pc, #52]	; (8008ec0 <WIFI_Init+0x4c>)
 8008e8a:	490e      	ldr	r1, [pc, #56]	; (8008ec4 <WIFI_Init+0x50>)
 8008e8c:	480e      	ldr	r0, [pc, #56]	; (8008ec8 <WIFI_Init+0x54>)
 8008e8e:	f7ff f8c9 	bl	8008024 <ES_WIFI_RegisterBusIO>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d107      	bne.n	8008ea8 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8008e98:	480b      	ldr	r0, [pc, #44]	; (8008ec8 <WIFI_Init+0x54>)
 8008e9a:	f7ff f895 	bl	8007fc8 <ES_WIFI_Init>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d101      	bne.n	8008ea8 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8008ea8:	79fb      	ldrb	r3, [r7, #7]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	08008b79 	.word	0x08008b79
 8008eb8:	08008c6d 	.word	0x08008c6d
 8008ebc:	08008d49 	.word	0x08008d49
 8008ec0:	08008a61 	.word	0x08008a61
 8008ec4:	080088c5 	.word	0x080088c5
 8008ec8:	200008d8 	.word	0x200008d8

08008ecc <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b086      	sub	sp, #24
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8008ede:	79fb      	ldrb	r3, [r7, #7]
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	68f9      	ldr	r1, [r7, #12]
 8008ee4:	4809      	ldr	r0, [pc, #36]	; (8008f0c <WIFI_Connect+0x40>)
 8008ee6:	f7ff f8d1 	bl	800808c <ES_WIFI_Connect>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d107      	bne.n	8008f00 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8008ef0:	4806      	ldr	r0, [pc, #24]	; (8008f0c <WIFI_Connect+0x40>)
 8008ef2:	f7ff f961 	bl	80081b8 <ES_WIFI_GetNetworkSettings>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d101      	bne.n	8008f00 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8008efc:	2300      	movs	r3, #0
 8008efe:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3718      	adds	r7, #24
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	200008d8 	.word	0x200008d8

08008f10 <WIFI_Disconnect>:
  * @brief  Disconnect from a network
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Disconnect(void)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	71fb      	strb	r3, [r7, #7]
  if( ES_WIFI_Disconnect(&EsWifiObj)== ES_WIFI_STATUS_OK)
 8008f1a:	4806      	ldr	r0, [pc, #24]	; (8008f34 <WIFI_Disconnect+0x24>)
 8008f1c:	f7ff f92e 	bl	800817c <ES_WIFI_Disconnect>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d101      	bne.n	8008f2a <WIFI_Disconnect+0x1a>
  {
    ret = WIFI_STATUS_OK;
 8008f26:	2300      	movs	r3, #0
 8008f28:	71fb      	strb	r3, [r7, #7]
  }
  
  return ret;
 8008f2a:	79fb      	ldrb	r3, [r7, #7]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	200008d8 	.word	0x200008d8

08008f38 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b08a      	sub	sp, #40	; 0x28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	607a      	str	r2, [r7, #4]
 8008f42:	603b      	str	r3, [r7, #0]
 8008f44:	460b      	mov	r3, r1
 8008f46:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 8008f54:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008f56:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 8008f58:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008f5a:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8008f5c:	7afb      	ldrb	r3, [r7, #11]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	bf14      	ite	ne
 8008f62:	2301      	movne	r3, #1
 8008f64:	2300      	moveq	r3, #0
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	785b      	ldrb	r3, [r3, #1]
 8008f74:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	789b      	ldrb	r3, [r3, #2]
 8008f7a:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	78db      	ldrb	r3, [r3, #3]
 8008f80:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8008f82:	f107 0310 	add.w	r3, r7, #16
 8008f86:	4619      	mov	r1, r3
 8008f88:	4807      	ldr	r0, [pc, #28]	; (8008fa8 <WIFI_OpenClientConnection+0x70>)
 8008f8a:	f7ff f93f 	bl	800820c <ES_WIFI_StartClientConnection>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d102      	bne.n	8008f9a <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8008f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3728      	adds	r7, #40	; 0x28
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	200008d8 	.word	0x200008d8

08008fac <WIFI_CloseClientConnection>:
/**
  * @brief  Close client connection
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseClientConnection(uint32_t socket)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b088      	sub	sp, #32
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	77fb      	strb	r3, [r7, #31]
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	727b      	strb	r3, [r7, #9]
  
  if(ES_WIFI_StopClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8008fbe:	f107 0308 	add.w	r3, r7, #8
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	4806      	ldr	r0, [pc, #24]	; (8008fe0 <WIFI_CloseClientConnection+0x34>)
 8008fc6:	f7ff fa0b 	bl	80083e0 <ES_WIFI_StopClientConnection>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d101      	bne.n	8008fd4 <WIFI_CloseClientConnection+0x28>
  {
    ret = WIFI_STATUS_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 8008fd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3720      	adds	r7, #32
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	200008d8 	.word	0x200008d8

08008fe4 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b088      	sub	sp, #32
 8008fe8:	af02      	add	r7, sp, #8
 8008fea:	60b9      	str	r1, [r7, #8]
 8008fec:	607b      	str	r3, [r7, #4]
 8008fee:	4603      	mov	r3, r0
 8008ff0:	73fb      	strb	r3, [r7, #15]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8008ffa:	89ba      	ldrh	r2, [r7, #12]
 8008ffc:	7bf9      	ldrb	r1, [r7, #15]
 8008ffe:	6a3b      	ldr	r3, [r7, #32]
 8009000:	9301      	str	r3, [sp, #4]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	4613      	mov	r3, r2
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	4806      	ldr	r0, [pc, #24]	; (8009024 <WIFI_SendData+0x40>)
 800900c:	f7ff fa22 	bl	8008454 <ES_WIFI_SendData>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d101      	bne.n	800901a <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 800901a:	7dfb      	ldrb	r3, [r7, #23]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3718      	adds	r7, #24
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	200008d8 	.word	0x200008d8

08009028 <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b088      	sub	sp, #32
 800902c:	af02      	add	r7, sp, #8
 800902e:	60b9      	str	r1, [r7, #8]
 8009030:	607b      	str	r3, [r7, #4]
 8009032:	4603      	mov	r3, r0
 8009034:	73fb      	strb	r3, [r7, #15]
 8009036:	4613      	mov	r3, r2
 8009038:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800903e:	89ba      	ldrh	r2, [r7, #12]
 8009040:	7bf9      	ldrb	r1, [r7, #15]
 8009042:	6a3b      	ldr	r3, [r7, #32]
 8009044:	9301      	str	r3, [sp, #4]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	9300      	str	r3, [sp, #0]
 800904a:	4613      	mov	r3, r2
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	4806      	ldr	r0, [pc, #24]	; (8009068 <WIFI_ReceiveData+0x40>)
 8009050:	f7ff fabc 	bl	80085cc <ES_WIFI_ReceiveData>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d101      	bne.n	800905e <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 800905a:	2300      	movs	r3, #0
 800905c:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 800905e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009060:	4618      	mov	r0, r3
 8009062:	3718      	adds	r7, #24
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	200008d8 	.word	0x200008d8

0800906c <__NVIC_SetPriority>:
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	4603      	mov	r3, r0
 8009074:	6039      	str	r1, [r7, #0]
 8009076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800907c:	2b00      	cmp	r3, #0
 800907e:	db0a      	blt.n	8009096 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	b2da      	uxtb	r2, r3
 8009084:	490c      	ldr	r1, [pc, #48]	; (80090b8 <__NVIC_SetPriority+0x4c>)
 8009086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800908a:	0112      	lsls	r2, r2, #4
 800908c:	b2d2      	uxtb	r2, r2
 800908e:	440b      	add	r3, r1
 8009090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009094:	e00a      	b.n	80090ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	b2da      	uxtb	r2, r3
 800909a:	4908      	ldr	r1, [pc, #32]	; (80090bc <__NVIC_SetPriority+0x50>)
 800909c:	79fb      	ldrb	r3, [r7, #7]
 800909e:	f003 030f 	and.w	r3, r3, #15
 80090a2:	3b04      	subs	r3, #4
 80090a4:	0112      	lsls	r2, r2, #4
 80090a6:	b2d2      	uxtb	r2, r2
 80090a8:	440b      	add	r3, r1
 80090aa:	761a      	strb	r2, [r3, #24]
}
 80090ac:	bf00      	nop
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr
 80090b8:	e000e100 	.word	0xe000e100
 80090bc:	e000ed00 	.word	0xe000ed00

080090c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80090c0:	b580      	push	{r7, lr}
 80090c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80090c4:	4b05      	ldr	r3, [pc, #20]	; (80090dc <SysTick_Handler+0x1c>)
 80090c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80090c8:	f002 f8aa 	bl	800b220 <xTaskGetSchedulerState>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d001      	beq.n	80090d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80090d2:	f002 ff91 	bl	800bff8 <xPortSysTickHandler>
  }
}
 80090d6:	bf00      	nop
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	e000e010 	.word	0xe000e010

080090e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80090e0:	b580      	push	{r7, lr}
 80090e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80090e4:	2100      	movs	r1, #0
 80090e6:	f06f 0004 	mvn.w	r0, #4
 80090ea:	f7ff ffbf 	bl	800906c <__NVIC_SetPriority>
#endif
}
 80090ee:	bf00      	nop
 80090f0:	bd80      	pop	{r7, pc}
	...

080090f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090fa:	f3ef 8305 	mrs	r3, IPSR
 80090fe:	603b      	str	r3, [r7, #0]
  return(result);
 8009100:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009102:	2b00      	cmp	r3, #0
 8009104:	d003      	beq.n	800910e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009106:	f06f 0305 	mvn.w	r3, #5
 800910a:	607b      	str	r3, [r7, #4]
 800910c:	e00c      	b.n	8009128 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800910e:	4b0a      	ldr	r3, [pc, #40]	; (8009138 <osKernelInitialize+0x44>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d105      	bne.n	8009122 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009116:	4b08      	ldr	r3, [pc, #32]	; (8009138 <osKernelInitialize+0x44>)
 8009118:	2201      	movs	r2, #1
 800911a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800911c:	2300      	movs	r3, #0
 800911e:	607b      	str	r3, [r7, #4]
 8009120:	e002      	b.n	8009128 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009122:	f04f 33ff 	mov.w	r3, #4294967295
 8009126:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009128:	687b      	ldr	r3, [r7, #4]
}
 800912a:	4618      	mov	r0, r3
 800912c:	370c      	adds	r7, #12
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	200011d8 	.word	0x200011d8

0800913c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009142:	f3ef 8305 	mrs	r3, IPSR
 8009146:	603b      	str	r3, [r7, #0]
  return(result);
 8009148:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800914a:	2b00      	cmp	r3, #0
 800914c:	d003      	beq.n	8009156 <osKernelStart+0x1a>
    stat = osErrorISR;
 800914e:	f06f 0305 	mvn.w	r3, #5
 8009152:	607b      	str	r3, [r7, #4]
 8009154:	e010      	b.n	8009178 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009156:	4b0b      	ldr	r3, [pc, #44]	; (8009184 <osKernelStart+0x48>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2b01      	cmp	r3, #1
 800915c:	d109      	bne.n	8009172 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800915e:	f7ff ffbf 	bl	80090e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009162:	4b08      	ldr	r3, [pc, #32]	; (8009184 <osKernelStart+0x48>)
 8009164:	2202      	movs	r2, #2
 8009166:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009168:	f001 fbfe 	bl	800a968 <vTaskStartScheduler>
      stat = osOK;
 800916c:	2300      	movs	r3, #0
 800916e:	607b      	str	r3, [r7, #4]
 8009170:	e002      	b.n	8009178 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009172:	f04f 33ff 	mov.w	r3, #4294967295
 8009176:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009178:	687b      	ldr	r3, [r7, #4]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3708      	adds	r7, #8
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	200011d8 	.word	0x200011d8

08009188 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009188:	b580      	push	{r7, lr}
 800918a:	b08e      	sub	sp, #56	; 0x38
 800918c:	af04      	add	r7, sp, #16
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009194:	2300      	movs	r3, #0
 8009196:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009198:	f3ef 8305 	mrs	r3, IPSR
 800919c:	617b      	str	r3, [r7, #20]
  return(result);
 800919e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d17e      	bne.n	80092a2 <osThreadNew+0x11a>
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d07b      	beq.n	80092a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80091aa:	2380      	movs	r3, #128	; 0x80
 80091ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80091ae:	2318      	movs	r3, #24
 80091b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80091b2:	2300      	movs	r3, #0
 80091b4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80091b6:	f04f 33ff 	mov.w	r3, #4294967295
 80091ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d045      	beq.n	800924e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d002      	beq.n	80091d0 <osThreadNew+0x48>
        name = attr->name;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	699b      	ldr	r3, [r3, #24]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d002      	beq.n	80091de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	699b      	ldr	r3, [r3, #24]
 80091dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d008      	beq.n	80091f6 <osThreadNew+0x6e>
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	2b38      	cmp	r3, #56	; 0x38
 80091e8:	d805      	bhi.n	80091f6 <osThreadNew+0x6e>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d001      	beq.n	80091fa <osThreadNew+0x72>
        return (NULL);
 80091f6:	2300      	movs	r3, #0
 80091f8:	e054      	b.n	80092a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d003      	beq.n	800920a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	695b      	ldr	r3, [r3, #20]
 8009206:	089b      	lsrs	r3, r3, #2
 8009208:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d00e      	beq.n	8009230 <osThreadNew+0xa8>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	2bbb      	cmp	r3, #187	; 0xbb
 8009218:	d90a      	bls.n	8009230 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800921e:	2b00      	cmp	r3, #0
 8009220:	d006      	beq.n	8009230 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	695b      	ldr	r3, [r3, #20]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d002      	beq.n	8009230 <osThreadNew+0xa8>
        mem = 1;
 800922a:	2301      	movs	r3, #1
 800922c:	61bb      	str	r3, [r7, #24]
 800922e:	e010      	b.n	8009252 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d10c      	bne.n	8009252 <osThreadNew+0xca>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d108      	bne.n	8009252 <osThreadNew+0xca>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d104      	bne.n	8009252 <osThreadNew+0xca>
          mem = 0;
 8009248:	2300      	movs	r3, #0
 800924a:	61bb      	str	r3, [r7, #24]
 800924c:	e001      	b.n	8009252 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800924e:	2300      	movs	r3, #0
 8009250:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d110      	bne.n	800927a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009260:	9202      	str	r2, [sp, #8]
 8009262:	9301      	str	r3, [sp, #4]
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	9300      	str	r3, [sp, #0]
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	6a3a      	ldr	r2, [r7, #32]
 800926c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f001 f98e 	bl	800a590 <xTaskCreateStatic>
 8009274:	4603      	mov	r3, r0
 8009276:	613b      	str	r3, [r7, #16]
 8009278:	e013      	b.n	80092a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d110      	bne.n	80092a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009280:	6a3b      	ldr	r3, [r7, #32]
 8009282:	b29a      	uxth	r2, r3
 8009284:	f107 0310 	add.w	r3, r7, #16
 8009288:	9301      	str	r3, [sp, #4]
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	9300      	str	r3, [sp, #0]
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f001 f9d9 	bl	800a64a <xTaskCreate>
 8009298:	4603      	mov	r3, r0
 800929a:	2b01      	cmp	r3, #1
 800929c:	d001      	beq.n	80092a2 <osThreadNew+0x11a>
            hTask = NULL;
 800929e:	2300      	movs	r3, #0
 80092a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80092a2:	693b      	ldr	r3, [r7, #16]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3728      	adds	r7, #40	; 0x28
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b08a      	sub	sp, #40	; 0x28
 80092b0:	af02      	add	r7, sp, #8
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80092b8:	2300      	movs	r3, #0
 80092ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092bc:	f3ef 8305 	mrs	r3, IPSR
 80092c0:	613b      	str	r3, [r7, #16]
  return(result);
 80092c2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d175      	bne.n	80093b4 <osSemaphoreNew+0x108>
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d072      	beq.n	80093b4 <osSemaphoreNew+0x108>
 80092ce:	68ba      	ldr	r2, [r7, #8]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d86e      	bhi.n	80093b4 <osSemaphoreNew+0x108>
    mem = -1;
 80092d6:	f04f 33ff 	mov.w	r3, #4294967295
 80092da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d015      	beq.n	800930e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d006      	beq.n	80092f8 <osSemaphoreNew+0x4c>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	2b4f      	cmp	r3, #79	; 0x4f
 80092f0:	d902      	bls.n	80092f8 <osSemaphoreNew+0x4c>
        mem = 1;
 80092f2:	2301      	movs	r3, #1
 80092f4:	61bb      	str	r3, [r7, #24]
 80092f6:	e00c      	b.n	8009312 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d108      	bne.n	8009312 <osSemaphoreNew+0x66>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d104      	bne.n	8009312 <osSemaphoreNew+0x66>
          mem = 0;
 8009308:	2300      	movs	r3, #0
 800930a:	61bb      	str	r3, [r7, #24]
 800930c:	e001      	b.n	8009312 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800930e:	2300      	movs	r3, #0
 8009310:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009318:	d04c      	beq.n	80093b4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d128      	bne.n	8009372 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	2b01      	cmp	r3, #1
 8009324:	d10a      	bne.n	800933c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	2203      	movs	r2, #3
 800932c:	9200      	str	r2, [sp, #0]
 800932e:	2200      	movs	r2, #0
 8009330:	2100      	movs	r1, #0
 8009332:	2001      	movs	r0, #1
 8009334:	f000 fa06 	bl	8009744 <xQueueGenericCreateStatic>
 8009338:	61f8      	str	r0, [r7, #28]
 800933a:	e005      	b.n	8009348 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800933c:	2203      	movs	r2, #3
 800933e:	2100      	movs	r1, #0
 8009340:	2001      	movs	r0, #1
 8009342:	f000 fa77 	bl	8009834 <xQueueGenericCreate>
 8009346:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d022      	beq.n	8009394 <osSemaphoreNew+0xe8>
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d01f      	beq.n	8009394 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009354:	2300      	movs	r3, #0
 8009356:	2200      	movs	r2, #0
 8009358:	2100      	movs	r1, #0
 800935a:	69f8      	ldr	r0, [r7, #28]
 800935c:	f000 fb32 	bl	80099c4 <xQueueGenericSend>
 8009360:	4603      	mov	r3, r0
 8009362:	2b01      	cmp	r3, #1
 8009364:	d016      	beq.n	8009394 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009366:	69f8      	ldr	r0, [r7, #28]
 8009368:	f000 ff3e 	bl	800a1e8 <vQueueDelete>
            hSemaphore = NULL;
 800936c:	2300      	movs	r3, #0
 800936e:	61fb      	str	r3, [r7, #28]
 8009370:	e010      	b.n	8009394 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d108      	bne.n	800938a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	461a      	mov	r2, r3
 800937e:	68b9      	ldr	r1, [r7, #8]
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f000 fab4 	bl	80098ee <xQueueCreateCountingSemaphoreStatic>
 8009386:	61f8      	str	r0, [r7, #28]
 8009388:	e004      	b.n	8009394 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800938a:	68b9      	ldr	r1, [r7, #8]
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	f000 fae5 	bl	800995c <xQueueCreateCountingSemaphore>
 8009392:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00c      	beq.n	80093b4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d003      	beq.n	80093a8 <osSemaphoreNew+0xfc>
          name = attr->name;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	617b      	str	r3, [r7, #20]
 80093a6:	e001      	b.n	80093ac <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80093a8:	2300      	movs	r3, #0
 80093aa:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80093ac:	6979      	ldr	r1, [r7, #20]
 80093ae:	69f8      	ldr	r0, [r7, #28]
 80093b0:	f001 f866 	bl	800a480 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80093b4:	69fb      	ldr	r3, [r7, #28]
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3720      	adds	r7, #32
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80093be:	b580      	push	{r7, lr}
 80093c0:	b08a      	sub	sp, #40	; 0x28
 80093c2:	af02      	add	r7, sp, #8
 80093c4:	60f8      	str	r0, [r7, #12]
 80093c6:	60b9      	str	r1, [r7, #8]
 80093c8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80093ca:	2300      	movs	r3, #0
 80093cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093ce:	f3ef 8305 	mrs	r3, IPSR
 80093d2:	613b      	str	r3, [r7, #16]
  return(result);
 80093d4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d15f      	bne.n	800949a <osMessageQueueNew+0xdc>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d05c      	beq.n	800949a <osMessageQueueNew+0xdc>
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d059      	beq.n	800949a <osMessageQueueNew+0xdc>
    mem = -1;
 80093e6:	f04f 33ff 	mov.w	r3, #4294967295
 80093ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d029      	beq.n	8009446 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d012      	beq.n	8009420 <osMessageQueueNew+0x62>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	2b4f      	cmp	r3, #79	; 0x4f
 8009400:	d90e      	bls.n	8009420 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00a      	beq.n	8009420 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	695a      	ldr	r2, [r3, #20]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	68b9      	ldr	r1, [r7, #8]
 8009412:	fb01 f303 	mul.w	r3, r1, r3
 8009416:	429a      	cmp	r2, r3
 8009418:	d302      	bcc.n	8009420 <osMessageQueueNew+0x62>
        mem = 1;
 800941a:	2301      	movs	r3, #1
 800941c:	61bb      	str	r3, [r7, #24]
 800941e:	e014      	b.n	800944a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d110      	bne.n	800944a <osMessageQueueNew+0x8c>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d10c      	bne.n	800944a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009434:	2b00      	cmp	r3, #0
 8009436:	d108      	bne.n	800944a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	695b      	ldr	r3, [r3, #20]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d104      	bne.n	800944a <osMessageQueueNew+0x8c>
          mem = 0;
 8009440:	2300      	movs	r3, #0
 8009442:	61bb      	str	r3, [r7, #24]
 8009444:	e001      	b.n	800944a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009446:	2300      	movs	r3, #0
 8009448:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	2b01      	cmp	r3, #1
 800944e:	d10b      	bne.n	8009468 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	691a      	ldr	r2, [r3, #16]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	2100      	movs	r1, #0
 800945a:	9100      	str	r1, [sp, #0]
 800945c:	68b9      	ldr	r1, [r7, #8]
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f000 f970 	bl	8009744 <xQueueGenericCreateStatic>
 8009464:	61f8      	str	r0, [r7, #28]
 8009466:	e008      	b.n	800947a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d105      	bne.n	800947a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800946e:	2200      	movs	r2, #0
 8009470:	68b9      	ldr	r1, [r7, #8]
 8009472:	68f8      	ldr	r0, [r7, #12]
 8009474:	f000 f9de 	bl	8009834 <xQueueGenericCreate>
 8009478:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00c      	beq.n	800949a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d003      	beq.n	800948e <osMessageQueueNew+0xd0>
        name = attr->name;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	617b      	str	r3, [r7, #20]
 800948c:	e001      	b.n	8009492 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800948e:	2300      	movs	r3, #0
 8009490:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009492:	6979      	ldr	r1, [r7, #20]
 8009494:	69f8      	ldr	r0, [r7, #28]
 8009496:	f000 fff3 	bl	800a480 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800949a:	69fb      	ldr	r3, [r7, #28]
}
 800949c:	4618      	mov	r0, r3
 800949e:	3720      	adds	r7, #32
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	4a07      	ldr	r2, [pc, #28]	; (80094d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80094b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	4a06      	ldr	r2, [pc, #24]	; (80094d4 <vApplicationGetIdleTaskMemory+0x30>)
 80094ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2280      	movs	r2, #128	; 0x80
 80094c0:	601a      	str	r2, [r3, #0]
}
 80094c2:	bf00      	nop
 80094c4:	3714      	adds	r7, #20
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	200011dc 	.word	0x200011dc
 80094d4:	20001298 	.word	0x20001298

080094d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	4a07      	ldr	r2, [pc, #28]	; (8009504 <vApplicationGetTimerTaskMemory+0x2c>)
 80094e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	4a06      	ldr	r2, [pc, #24]	; (8009508 <vApplicationGetTimerTaskMemory+0x30>)
 80094ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80094f6:	601a      	str	r2, [r3, #0]
}
 80094f8:	bf00      	nop
 80094fa:	3714      	adds	r7, #20
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr
 8009504:	20001498 	.word	0x20001498
 8009508:	20001554 	.word	0x20001554

0800950c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f103 0208 	add.w	r2, r3, #8
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f04f 32ff 	mov.w	r2, #4294967295
 8009524:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f103 0208 	add.w	r2, r3, #8
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f103 0208 	add.w	r2, r3, #8
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800955a:	bf00      	nop
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009566:	b480      	push	{r7}
 8009568:	b085      	sub	sp, #20
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	689a      	ldr	r2, [r3, #8]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	683a      	ldr	r2, [r7, #0]
 8009590:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	1c5a      	adds	r2, r3, #1
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	601a      	str	r2, [r3, #0]
}
 80095a2:	bf00      	nop
 80095a4:	3714      	adds	r7, #20
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80095ae:	b480      	push	{r7}
 80095b0:	b085      	sub	sp, #20
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
 80095b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c4:	d103      	bne.n	80095ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	60fb      	str	r3, [r7, #12]
 80095cc:	e00c      	b.n	80095e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	3308      	adds	r3, #8
 80095d2:	60fb      	str	r3, [r7, #12]
 80095d4:	e002      	b.n	80095dc <vListInsert+0x2e>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	60fb      	str	r3, [r7, #12]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68ba      	ldr	r2, [r7, #8]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d2f6      	bcs.n	80095d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	685a      	ldr	r2, [r3, #4]
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	683a      	ldr	r2, [r7, #0]
 80095f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	683a      	ldr	r2, [r7, #0]
 8009602:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	1c5a      	adds	r2, r3, #1
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	601a      	str	r2, [r3, #0]
}
 8009614:	bf00      	nop
 8009616:	3714      	adds	r7, #20
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	6892      	ldr	r2, [r2, #8]
 8009636:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	6852      	ldr	r2, [r2, #4]
 8009640:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	429a      	cmp	r2, r3
 800964a:	d103      	bne.n	8009654 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	689a      	ldr	r2, [r3, #8]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	1e5a      	subs	r2, r3, #1
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
}
 8009668:	4618      	mov	r0, r3
 800966a:	3714      	adds	r7, #20
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d10a      	bne.n	800969e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968c:	f383 8811 	msr	BASEPRI, r3
 8009690:	f3bf 8f6f 	isb	sy
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800969a:	bf00      	nop
 800969c:	e7fe      	b.n	800969c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800969e:	f002 fc19 	bl	800bed4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096aa:	68f9      	ldr	r1, [r7, #12]
 80096ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80096ae:	fb01 f303 	mul.w	r3, r1, r3
 80096b2:	441a      	add	r2, r3
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2200      	movs	r2, #0
 80096bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ce:	3b01      	subs	r3, #1
 80096d0:	68f9      	ldr	r1, [r7, #12]
 80096d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80096d4:	fb01 f303 	mul.w	r3, r1, r3
 80096d8:	441a      	add	r2, r3
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	22ff      	movs	r2, #255	; 0xff
 80096e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	22ff      	movs	r2, #255	; 0xff
 80096ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d114      	bne.n	800971e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d01a      	beq.n	8009732 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	3310      	adds	r3, #16
 8009700:	4618      	mov	r0, r3
 8009702:	f001 fbcb 	bl	800ae9c <xTaskRemoveFromEventList>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d012      	beq.n	8009732 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800970c:	4b0c      	ldr	r3, [pc, #48]	; (8009740 <xQueueGenericReset+0xcc>)
 800970e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009712:	601a      	str	r2, [r3, #0]
 8009714:	f3bf 8f4f 	dsb	sy
 8009718:	f3bf 8f6f 	isb	sy
 800971c:	e009      	b.n	8009732 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	3310      	adds	r3, #16
 8009722:	4618      	mov	r0, r3
 8009724:	f7ff fef2 	bl	800950c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	3324      	adds	r3, #36	; 0x24
 800972c:	4618      	mov	r0, r3
 800972e:	f7ff feed 	bl	800950c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009732:	f002 fbff 	bl	800bf34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009736:	2301      	movs	r3, #1
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	e000ed04 	.word	0xe000ed04

08009744 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009744:	b580      	push	{r7, lr}
 8009746:	b08e      	sub	sp, #56	; 0x38
 8009748:	af02      	add	r7, sp, #8
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	607a      	str	r2, [r7, #4]
 8009750:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10a      	bne.n	800976e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975c:	f383 8811 	msr	BASEPRI, r3
 8009760:	f3bf 8f6f 	isb	sy
 8009764:	f3bf 8f4f 	dsb	sy
 8009768:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800976a:	bf00      	nop
 800976c:	e7fe      	b.n	800976c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d10a      	bne.n	800978a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009778:	f383 8811 	msr	BASEPRI, r3
 800977c:	f3bf 8f6f 	isb	sy
 8009780:	f3bf 8f4f 	dsb	sy
 8009784:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009786:	bf00      	nop
 8009788:	e7fe      	b.n	8009788 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d002      	beq.n	8009796 <xQueueGenericCreateStatic+0x52>
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d001      	beq.n	800979a <xQueueGenericCreateStatic+0x56>
 8009796:	2301      	movs	r3, #1
 8009798:	e000      	b.n	800979c <xQueueGenericCreateStatic+0x58>
 800979a:	2300      	movs	r3, #0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d10a      	bne.n	80097b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80097a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a4:	f383 8811 	msr	BASEPRI, r3
 80097a8:	f3bf 8f6f 	isb	sy
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	623b      	str	r3, [r7, #32]
}
 80097b2:	bf00      	nop
 80097b4:	e7fe      	b.n	80097b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d102      	bne.n	80097c2 <xQueueGenericCreateStatic+0x7e>
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d101      	bne.n	80097c6 <xQueueGenericCreateStatic+0x82>
 80097c2:	2301      	movs	r3, #1
 80097c4:	e000      	b.n	80097c8 <xQueueGenericCreateStatic+0x84>
 80097c6:	2300      	movs	r3, #0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10a      	bne.n	80097e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80097cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	61fb      	str	r3, [r7, #28]
}
 80097de:	bf00      	nop
 80097e0:	e7fe      	b.n	80097e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80097e2:	2350      	movs	r3, #80	; 0x50
 80097e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	2b50      	cmp	r3, #80	; 0x50
 80097ea:	d00a      	beq.n	8009802 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80097ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f0:	f383 8811 	msr	BASEPRI, r3
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	61bb      	str	r3, [r7, #24]
}
 80097fe:	bf00      	nop
 8009800:	e7fe      	b.n	8009800 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009802:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00d      	beq.n	800982a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800980e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009810:	2201      	movs	r2, #1
 8009812:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009816:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800981a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800981c:	9300      	str	r3, [sp, #0]
 800981e:	4613      	mov	r3, r2
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	68b9      	ldr	r1, [r7, #8]
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f000 f83f 	bl	80098a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800982a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800982c:	4618      	mov	r0, r3
 800982e:	3730      	adds	r7, #48	; 0x30
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009834:	b580      	push	{r7, lr}
 8009836:	b08a      	sub	sp, #40	; 0x28
 8009838:	af02      	add	r7, sp, #8
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	4613      	mov	r3, r2
 8009840:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d10a      	bne.n	800985e <xQueueGenericCreate+0x2a>
	__asm volatile
 8009848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984c:	f383 8811 	msr	BASEPRI, r3
 8009850:	f3bf 8f6f 	isb	sy
 8009854:	f3bf 8f4f 	dsb	sy
 8009858:	613b      	str	r3, [r7, #16]
}
 800985a:	bf00      	nop
 800985c:	e7fe      	b.n	800985c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	68ba      	ldr	r2, [r7, #8]
 8009862:	fb02 f303 	mul.w	r3, r2, r3
 8009866:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	3350      	adds	r3, #80	; 0x50
 800986c:	4618      	mov	r0, r3
 800986e:	f002 fc53 	bl	800c118 <pvPortMalloc>
 8009872:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d011      	beq.n	800989e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	3350      	adds	r3, #80	; 0x50
 8009882:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800988c:	79fa      	ldrb	r2, [r7, #7]
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	9300      	str	r3, [sp, #0]
 8009892:	4613      	mov	r3, r2
 8009894:	697a      	ldr	r2, [r7, #20]
 8009896:	68b9      	ldr	r1, [r7, #8]
 8009898:	68f8      	ldr	r0, [r7, #12]
 800989a:	f000 f805 	bl	80098a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800989e:	69bb      	ldr	r3, [r7, #24]
	}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3720      	adds	r7, #32
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	607a      	str	r2, [r7, #4]
 80098b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d103      	bne.n	80098c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80098bc:	69bb      	ldr	r3, [r7, #24]
 80098be:	69ba      	ldr	r2, [r7, #24]
 80098c0:	601a      	str	r2, [r3, #0]
 80098c2:	e002      	b.n	80098ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	68fa      	ldr	r2, [r7, #12]
 80098ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80098d6:	2101      	movs	r1, #1
 80098d8:	69b8      	ldr	r0, [r7, #24]
 80098da:	f7ff fecb 	bl	8009674 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	78fa      	ldrb	r2, [r7, #3]
 80098e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80098e6:	bf00      	nop
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b08a      	sub	sp, #40	; 0x28
 80098f2:	af02      	add	r7, sp, #8
 80098f4:	60f8      	str	r0, [r7, #12]
 80098f6:	60b9      	str	r1, [r7, #8]
 80098f8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d10a      	bne.n	8009916 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009904:	f383 8811 	msr	BASEPRI, r3
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	61bb      	str	r3, [r7, #24]
}
 8009912:	bf00      	nop
 8009914:	e7fe      	b.n	8009914 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009916:	68ba      	ldr	r2, [r7, #8]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	429a      	cmp	r2, r3
 800991c:	d90a      	bls.n	8009934 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800991e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009922:	f383 8811 	msr	BASEPRI, r3
 8009926:	f3bf 8f6f 	isb	sy
 800992a:	f3bf 8f4f 	dsb	sy
 800992e:	617b      	str	r3, [r7, #20]
}
 8009930:	bf00      	nop
 8009932:	e7fe      	b.n	8009932 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009934:	2302      	movs	r3, #2
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	2100      	movs	r1, #0
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f7ff ff00 	bl	8009744 <xQueueGenericCreateStatic>
 8009944:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d002      	beq.n	8009952 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009952:	69fb      	ldr	r3, [r7, #28]
	}
 8009954:	4618      	mov	r0, r3
 8009956:	3720      	adds	r7, #32
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800995c:	b580      	push	{r7, lr}
 800995e:	b086      	sub	sp, #24
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d10a      	bne.n	8009982 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800996c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009970:	f383 8811 	msr	BASEPRI, r3
 8009974:	f3bf 8f6f 	isb	sy
 8009978:	f3bf 8f4f 	dsb	sy
 800997c:	613b      	str	r3, [r7, #16]
}
 800997e:	bf00      	nop
 8009980:	e7fe      	b.n	8009980 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009982:	683a      	ldr	r2, [r7, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	429a      	cmp	r2, r3
 8009988:	d90a      	bls.n	80099a0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800998a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998e:	f383 8811 	msr	BASEPRI, r3
 8009992:	f3bf 8f6f 	isb	sy
 8009996:	f3bf 8f4f 	dsb	sy
 800999a:	60fb      	str	r3, [r7, #12]
}
 800999c:	bf00      	nop
 800999e:	e7fe      	b.n	800999e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80099a0:	2202      	movs	r2, #2
 80099a2:	2100      	movs	r1, #0
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f7ff ff45 	bl	8009834 <xQueueGenericCreate>
 80099aa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d002      	beq.n	80099b8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	683a      	ldr	r2, [r7, #0]
 80099b6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80099b8:	697b      	ldr	r3, [r7, #20]
	}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3718      	adds	r7, #24
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
	...

080099c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b08e      	sub	sp, #56	; 0x38
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
 80099d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80099d2:	2300      	movs	r3, #0
 80099d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80099da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10a      	bne.n	80099f6 <xQueueGenericSend+0x32>
	__asm volatile
 80099e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80099f2:	bf00      	nop
 80099f4:	e7fe      	b.n	80099f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d103      	bne.n	8009a04 <xQueueGenericSend+0x40>
 80099fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d101      	bne.n	8009a08 <xQueueGenericSend+0x44>
 8009a04:	2301      	movs	r3, #1
 8009a06:	e000      	b.n	8009a0a <xQueueGenericSend+0x46>
 8009a08:	2300      	movs	r3, #0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10a      	bne.n	8009a24 <xQueueGenericSend+0x60>
	__asm volatile
 8009a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a20:	bf00      	nop
 8009a22:	e7fe      	b.n	8009a22 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d103      	bne.n	8009a32 <xQueueGenericSend+0x6e>
 8009a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d101      	bne.n	8009a36 <xQueueGenericSend+0x72>
 8009a32:	2301      	movs	r3, #1
 8009a34:	e000      	b.n	8009a38 <xQueueGenericSend+0x74>
 8009a36:	2300      	movs	r3, #0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d10a      	bne.n	8009a52 <xQueueGenericSend+0x8e>
	__asm volatile
 8009a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a40:	f383 8811 	msr	BASEPRI, r3
 8009a44:	f3bf 8f6f 	isb	sy
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	623b      	str	r3, [r7, #32]
}
 8009a4e:	bf00      	nop
 8009a50:	e7fe      	b.n	8009a50 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a52:	f001 fbe5 	bl	800b220 <xTaskGetSchedulerState>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d102      	bne.n	8009a62 <xQueueGenericSend+0x9e>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d101      	bne.n	8009a66 <xQueueGenericSend+0xa2>
 8009a62:	2301      	movs	r3, #1
 8009a64:	e000      	b.n	8009a68 <xQueueGenericSend+0xa4>
 8009a66:	2300      	movs	r3, #0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d10a      	bne.n	8009a82 <xQueueGenericSend+0xbe>
	__asm volatile
 8009a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a70:	f383 8811 	msr	BASEPRI, r3
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	61fb      	str	r3, [r7, #28]
}
 8009a7e:	bf00      	nop
 8009a80:	e7fe      	b.n	8009a80 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a82:	f002 fa27 	bl	800bed4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d302      	bcc.n	8009a98 <xQueueGenericSend+0xd4>
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d129      	bne.n	8009aec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a98:	683a      	ldr	r2, [r7, #0]
 8009a9a:	68b9      	ldr	r1, [r7, #8]
 8009a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a9e:	f000 fbde 	bl	800a25e <prvCopyDataToQueue>
 8009aa2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d010      	beq.n	8009ace <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aae:	3324      	adds	r3, #36	; 0x24
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f001 f9f3 	bl	800ae9c <xTaskRemoveFromEventList>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d013      	beq.n	8009ae4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009abc:	4b3f      	ldr	r3, [pc, #252]	; (8009bbc <xQueueGenericSend+0x1f8>)
 8009abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ac2:	601a      	str	r2, [r3, #0]
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	f3bf 8f6f 	isb	sy
 8009acc:	e00a      	b.n	8009ae4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d007      	beq.n	8009ae4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ad4:	4b39      	ldr	r3, [pc, #228]	; (8009bbc <xQueueGenericSend+0x1f8>)
 8009ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ada:	601a      	str	r2, [r3, #0]
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009ae4:	f002 fa26 	bl	800bf34 <vPortExitCritical>
				return pdPASS;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e063      	b.n	8009bb4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d103      	bne.n	8009afa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009af2:	f002 fa1f 	bl	800bf34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009af6:	2300      	movs	r3, #0
 8009af8:	e05c      	b.n	8009bb4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d106      	bne.n	8009b0e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b00:	f107 0314 	add.w	r3, r7, #20
 8009b04:	4618      	mov	r0, r3
 8009b06:	f001 fa2d 	bl	800af64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b0e:	f002 fa11 	bl	800bf34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b12:	f000 ff99 	bl	800aa48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b16:	f002 f9dd 	bl	800bed4 <vPortEnterCritical>
 8009b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b20:	b25b      	sxtb	r3, r3
 8009b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b26:	d103      	bne.n	8009b30 <xQueueGenericSend+0x16c>
 8009b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b36:	b25b      	sxtb	r3, r3
 8009b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b3c:	d103      	bne.n	8009b46 <xQueueGenericSend+0x182>
 8009b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b40:	2200      	movs	r2, #0
 8009b42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b46:	f002 f9f5 	bl	800bf34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b4a:	1d3a      	adds	r2, r7, #4
 8009b4c:	f107 0314 	add.w	r3, r7, #20
 8009b50:	4611      	mov	r1, r2
 8009b52:	4618      	mov	r0, r3
 8009b54:	f001 fa1c 	bl	800af90 <xTaskCheckForTimeOut>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d124      	bne.n	8009ba8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009b5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b60:	f000 fc75 	bl	800a44e <prvIsQueueFull>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d018      	beq.n	8009b9c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6c:	3310      	adds	r3, #16
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	4611      	mov	r1, r2
 8009b72:	4618      	mov	r0, r3
 8009b74:	f001 f942 	bl	800adfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b7a:	f000 fc00 	bl	800a37e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009b7e:	f000 ff71 	bl	800aa64 <xTaskResumeAll>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f47f af7c 	bne.w	8009a82 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009b8a:	4b0c      	ldr	r3, [pc, #48]	; (8009bbc <xQueueGenericSend+0x1f8>)
 8009b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b90:	601a      	str	r2, [r3, #0]
 8009b92:	f3bf 8f4f 	dsb	sy
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	e772      	b.n	8009a82 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b9e:	f000 fbee 	bl	800a37e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ba2:	f000 ff5f 	bl	800aa64 <xTaskResumeAll>
 8009ba6:	e76c      	b.n	8009a82 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009baa:	f000 fbe8 	bl	800a37e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009bae:	f000 ff59 	bl	800aa64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009bb2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3738      	adds	r7, #56	; 0x38
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	e000ed04 	.word	0xe000ed04

08009bc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b090      	sub	sp, #64	; 0x40
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
 8009bcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d10a      	bne.n	8009bee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bdc:	f383 8811 	msr	BASEPRI, r3
 8009be0:	f3bf 8f6f 	isb	sy
 8009be4:	f3bf 8f4f 	dsb	sy
 8009be8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009bea:	bf00      	nop
 8009bec:	e7fe      	b.n	8009bec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d103      	bne.n	8009bfc <xQueueGenericSendFromISR+0x3c>
 8009bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d101      	bne.n	8009c00 <xQueueGenericSendFromISR+0x40>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e000      	b.n	8009c02 <xQueueGenericSendFromISR+0x42>
 8009c00:	2300      	movs	r3, #0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10a      	bne.n	8009c1c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0a:	f383 8811 	msr	BASEPRI, r3
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c18:	bf00      	nop
 8009c1a:	e7fe      	b.n	8009c1a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d103      	bne.n	8009c2a <xQueueGenericSendFromISR+0x6a>
 8009c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d101      	bne.n	8009c2e <xQueueGenericSendFromISR+0x6e>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e000      	b.n	8009c30 <xQueueGenericSendFromISR+0x70>
 8009c2e:	2300      	movs	r3, #0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10a      	bne.n	8009c4a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c38:	f383 8811 	msr	BASEPRI, r3
 8009c3c:	f3bf 8f6f 	isb	sy
 8009c40:	f3bf 8f4f 	dsb	sy
 8009c44:	623b      	str	r3, [r7, #32]
}
 8009c46:	bf00      	nop
 8009c48:	e7fe      	b.n	8009c48 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c4a:	f002 fa25 	bl	800c098 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009c4e:	f3ef 8211 	mrs	r2, BASEPRI
 8009c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c56:	f383 8811 	msr	BASEPRI, r3
 8009c5a:	f3bf 8f6f 	isb	sy
 8009c5e:	f3bf 8f4f 	dsb	sy
 8009c62:	61fa      	str	r2, [r7, #28]
 8009c64:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009c66:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c68:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d302      	bcc.n	8009c7c <xQueueGenericSendFromISR+0xbc>
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d12f      	bne.n	8009cdc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c8c:	683a      	ldr	r2, [r7, #0]
 8009c8e:	68b9      	ldr	r1, [r7, #8]
 8009c90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009c92:	f000 fae4 	bl	800a25e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009c96:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c9e:	d112      	bne.n	8009cc6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d016      	beq.n	8009cd6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009caa:	3324      	adds	r3, #36	; 0x24
 8009cac:	4618      	mov	r0, r3
 8009cae:	f001 f8f5 	bl	800ae9c <xTaskRemoveFromEventList>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00e      	beq.n	8009cd6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00b      	beq.n	8009cd6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	601a      	str	r2, [r3, #0]
 8009cc4:	e007      	b.n	8009cd6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009cc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009cca:	3301      	adds	r3, #1
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	b25a      	sxtb	r2, r3
 8009cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009cda:	e001      	b.n	8009ce0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ce2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009cea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3740      	adds	r7, #64	; 0x40
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b08e      	sub	sp, #56	; 0x38
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
 8009cfe:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d10a      	bne.n	8009d20 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0e:	f383 8811 	msr	BASEPRI, r3
 8009d12:	f3bf 8f6f 	isb	sy
 8009d16:	f3bf 8f4f 	dsb	sy
 8009d1a:	623b      	str	r3, [r7, #32]
}
 8009d1c:	bf00      	nop
 8009d1e:	e7fe      	b.n	8009d1e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d00a      	beq.n	8009d3e <xQueueGiveFromISR+0x48>
	__asm volatile
 8009d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2c:	f383 8811 	msr	BASEPRI, r3
 8009d30:	f3bf 8f6f 	isb	sy
 8009d34:	f3bf 8f4f 	dsb	sy
 8009d38:	61fb      	str	r3, [r7, #28]
}
 8009d3a:	bf00      	nop
 8009d3c:	e7fe      	b.n	8009d3c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d103      	bne.n	8009d4e <xQueueGiveFromISR+0x58>
 8009d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d101      	bne.n	8009d52 <xQueueGiveFromISR+0x5c>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e000      	b.n	8009d54 <xQueueGiveFromISR+0x5e>
 8009d52:	2300      	movs	r3, #0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10a      	bne.n	8009d6e <xQueueGiveFromISR+0x78>
	__asm volatile
 8009d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5c:	f383 8811 	msr	BASEPRI, r3
 8009d60:	f3bf 8f6f 	isb	sy
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	61bb      	str	r3, [r7, #24]
}
 8009d6a:	bf00      	nop
 8009d6c:	e7fe      	b.n	8009d6c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d6e:	f002 f993 	bl	800c098 <vPortValidateInterruptPriority>
	__asm volatile
 8009d72:	f3ef 8211 	mrs	r2, BASEPRI
 8009d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7a:	f383 8811 	msr	BASEPRI, r3
 8009d7e:	f3bf 8f6f 	isb	sy
 8009d82:	f3bf 8f4f 	dsb	sy
 8009d86:	617a      	str	r2, [r7, #20]
 8009d88:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009d8a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d22b      	bcs.n	8009df6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009daa:	1c5a      	adds	r2, r3, #1
 8009dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009db0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db8:	d112      	bne.n	8009de0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d016      	beq.n	8009df0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc4:	3324      	adds	r3, #36	; 0x24
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f001 f868 	bl	800ae9c <xTaskRemoveFromEventList>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00e      	beq.n	8009df0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00b      	beq.n	8009df0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	601a      	str	r2, [r3, #0]
 8009dde:	e007      	b.n	8009df0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009de0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009de4:	3301      	adds	r3, #1
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	b25a      	sxtb	r2, r3
 8009dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009df0:	2301      	movs	r3, #1
 8009df2:	637b      	str	r3, [r7, #52]	; 0x34
 8009df4:	e001      	b.n	8009dfa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009df6:	2300      	movs	r3, #0
 8009df8:	637b      	str	r3, [r7, #52]	; 0x34
 8009dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f383 8811 	msr	BASEPRI, r3
}
 8009e04:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3738      	adds	r7, #56	; 0x38
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b08c      	sub	sp, #48	; 0x30
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d10a      	bne.n	8009e40 <xQueueReceive+0x30>
	__asm volatile
 8009e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2e:	f383 8811 	msr	BASEPRI, r3
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	623b      	str	r3, [r7, #32]
}
 8009e3c:	bf00      	nop
 8009e3e:	e7fe      	b.n	8009e3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d103      	bne.n	8009e4e <xQueueReceive+0x3e>
 8009e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d101      	bne.n	8009e52 <xQueueReceive+0x42>
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e000      	b.n	8009e54 <xQueueReceive+0x44>
 8009e52:	2300      	movs	r3, #0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d10a      	bne.n	8009e6e <xQueueReceive+0x5e>
	__asm volatile
 8009e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5c:	f383 8811 	msr	BASEPRI, r3
 8009e60:	f3bf 8f6f 	isb	sy
 8009e64:	f3bf 8f4f 	dsb	sy
 8009e68:	61fb      	str	r3, [r7, #28]
}
 8009e6a:	bf00      	nop
 8009e6c:	e7fe      	b.n	8009e6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e6e:	f001 f9d7 	bl	800b220 <xTaskGetSchedulerState>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d102      	bne.n	8009e7e <xQueueReceive+0x6e>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d101      	bne.n	8009e82 <xQueueReceive+0x72>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e000      	b.n	8009e84 <xQueueReceive+0x74>
 8009e82:	2300      	movs	r3, #0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10a      	bne.n	8009e9e <xQueueReceive+0x8e>
	__asm volatile
 8009e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8c:	f383 8811 	msr	BASEPRI, r3
 8009e90:	f3bf 8f6f 	isb	sy
 8009e94:	f3bf 8f4f 	dsb	sy
 8009e98:	61bb      	str	r3, [r7, #24]
}
 8009e9a:	bf00      	nop
 8009e9c:	e7fe      	b.n	8009e9c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e9e:	f002 f819 	bl	800bed4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d01f      	beq.n	8009eee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009eae:	68b9      	ldr	r1, [r7, #8]
 8009eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009eb2:	f000 fa3e 	bl	800a332 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb8:	1e5a      	subs	r2, r3, #1
 8009eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ebc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00f      	beq.n	8009ee6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec8:	3310      	adds	r3, #16
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f000 ffe6 	bl	800ae9c <xTaskRemoveFromEventList>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d007      	beq.n	8009ee6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009ed6:	4b3d      	ldr	r3, [pc, #244]	; (8009fcc <xQueueReceive+0x1bc>)
 8009ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009edc:	601a      	str	r2, [r3, #0]
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009ee6:	f002 f825 	bl	800bf34 <vPortExitCritical>
				return pdPASS;
 8009eea:	2301      	movs	r3, #1
 8009eec:	e069      	b.n	8009fc2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d103      	bne.n	8009efc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ef4:	f002 f81e 	bl	800bf34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	e062      	b.n	8009fc2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d106      	bne.n	8009f10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f02:	f107 0310 	add.w	r3, r7, #16
 8009f06:	4618      	mov	r0, r3
 8009f08:	f001 f82c 	bl	800af64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f10:	f002 f810 	bl	800bf34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f14:	f000 fd98 	bl	800aa48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f18:	f001 ffdc 	bl	800bed4 <vPortEnterCritical>
 8009f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f22:	b25b      	sxtb	r3, r3
 8009f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f28:	d103      	bne.n	8009f32 <xQueueReceive+0x122>
 8009f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f38:	b25b      	sxtb	r3, r3
 8009f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f3e:	d103      	bne.n	8009f48 <xQueueReceive+0x138>
 8009f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f42:	2200      	movs	r2, #0
 8009f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f48:	f001 fff4 	bl	800bf34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f4c:	1d3a      	adds	r2, r7, #4
 8009f4e:	f107 0310 	add.w	r3, r7, #16
 8009f52:	4611      	mov	r1, r2
 8009f54:	4618      	mov	r0, r3
 8009f56:	f001 f81b 	bl	800af90 <xTaskCheckForTimeOut>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d123      	bne.n	8009fa8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f62:	f000 fa5e 	bl	800a422 <prvIsQueueEmpty>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d017      	beq.n	8009f9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6e:	3324      	adds	r3, #36	; 0x24
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	4611      	mov	r1, r2
 8009f74:	4618      	mov	r0, r3
 8009f76:	f000 ff41 	bl	800adfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f7c:	f000 f9ff 	bl	800a37e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009f80:	f000 fd70 	bl	800aa64 <xTaskResumeAll>
 8009f84:	4603      	mov	r3, r0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d189      	bne.n	8009e9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009f8a:	4b10      	ldr	r3, [pc, #64]	; (8009fcc <xQueueReceive+0x1bc>)
 8009f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f90:	601a      	str	r2, [r3, #0]
 8009f92:	f3bf 8f4f 	dsb	sy
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	e780      	b.n	8009e9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f9e:	f000 f9ee 	bl	800a37e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fa2:	f000 fd5f 	bl	800aa64 <xTaskResumeAll>
 8009fa6:	e77a      	b.n	8009e9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009fa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009faa:	f000 f9e8 	bl	800a37e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fae:	f000 fd59 	bl	800aa64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009fb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fb4:	f000 fa35 	bl	800a422 <prvIsQueueEmpty>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f43f af6f 	beq.w	8009e9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009fc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3730      	adds	r7, #48	; 0x30
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	e000ed04 	.word	0xe000ed04

08009fd0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b08e      	sub	sp, #56	; 0x38
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10a      	bne.n	800a002 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff0:	f383 8811 	msr	BASEPRI, r3
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	623b      	str	r3, [r7, #32]
}
 8009ffe:	bf00      	nop
 800a000:	e7fe      	b.n	800a000 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a006:	2b00      	cmp	r3, #0
 800a008:	d00a      	beq.n	800a020 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00e:	f383 8811 	msr	BASEPRI, r3
 800a012:	f3bf 8f6f 	isb	sy
 800a016:	f3bf 8f4f 	dsb	sy
 800a01a:	61fb      	str	r3, [r7, #28]
}
 800a01c:	bf00      	nop
 800a01e:	e7fe      	b.n	800a01e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a020:	f001 f8fe 	bl	800b220 <xTaskGetSchedulerState>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d102      	bne.n	800a030 <xQueueSemaphoreTake+0x60>
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d101      	bne.n	800a034 <xQueueSemaphoreTake+0x64>
 800a030:	2301      	movs	r3, #1
 800a032:	e000      	b.n	800a036 <xQueueSemaphoreTake+0x66>
 800a034:	2300      	movs	r3, #0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d10a      	bne.n	800a050 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03e:	f383 8811 	msr	BASEPRI, r3
 800a042:	f3bf 8f6f 	isb	sy
 800a046:	f3bf 8f4f 	dsb	sy
 800a04a:	61bb      	str	r3, [r7, #24]
}
 800a04c:	bf00      	nop
 800a04e:	e7fe      	b.n	800a04e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a050:	f001 ff40 	bl	800bed4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a058:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d024      	beq.n	800a0aa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a062:	1e5a      	subs	r2, r3, #1
 800a064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a066:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d104      	bne.n	800a07a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a070:	f001 fa4c 	bl	800b50c <pvTaskIncrementMutexHeldCount>
 800a074:	4602      	mov	r2, r0
 800a076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a078:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d00f      	beq.n	800a0a2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a084:	3310      	adds	r3, #16
 800a086:	4618      	mov	r0, r3
 800a088:	f000 ff08 	bl	800ae9c <xTaskRemoveFromEventList>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d007      	beq.n	800a0a2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a092:	4b54      	ldr	r3, [pc, #336]	; (800a1e4 <xQueueSemaphoreTake+0x214>)
 800a094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a098:	601a      	str	r2, [r3, #0]
 800a09a:	f3bf 8f4f 	dsb	sy
 800a09e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a0a2:	f001 ff47 	bl	800bf34 <vPortExitCritical>
				return pdPASS;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	e097      	b.n	800a1da <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d111      	bne.n	800a0d4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d00a      	beq.n	800a0cc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ba:	f383 8811 	msr	BASEPRI, r3
 800a0be:	f3bf 8f6f 	isb	sy
 800a0c2:	f3bf 8f4f 	dsb	sy
 800a0c6:	617b      	str	r3, [r7, #20]
}
 800a0c8:	bf00      	nop
 800a0ca:	e7fe      	b.n	800a0ca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a0cc:	f001 ff32 	bl	800bf34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	e082      	b.n	800a1da <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d106      	bne.n	800a0e8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0da:	f107 030c 	add.w	r3, r7, #12
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f000 ff40 	bl	800af64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0e8:	f001 ff24 	bl	800bf34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0ec:	f000 fcac 	bl	800aa48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0f0:	f001 fef0 	bl	800bed4 <vPortEnterCritical>
 800a0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0fa:	b25b      	sxtb	r3, r3
 800a0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a100:	d103      	bne.n	800a10a <xQueueSemaphoreTake+0x13a>
 800a102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a104:	2200      	movs	r2, #0
 800a106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a110:	b25b      	sxtb	r3, r3
 800a112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a116:	d103      	bne.n	800a120 <xQueueSemaphoreTake+0x150>
 800a118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a120:	f001 ff08 	bl	800bf34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a124:	463a      	mov	r2, r7
 800a126:	f107 030c 	add.w	r3, r7, #12
 800a12a:	4611      	mov	r1, r2
 800a12c:	4618      	mov	r0, r3
 800a12e:	f000 ff2f 	bl	800af90 <xTaskCheckForTimeOut>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d132      	bne.n	800a19e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a138:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a13a:	f000 f972 	bl	800a422 <prvIsQueueEmpty>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d026      	beq.n	800a192 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d109      	bne.n	800a160 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a14c:	f001 fec2 	bl	800bed4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	4618      	mov	r0, r3
 800a156:	f001 f881 	bl	800b25c <xTaskPriorityInherit>
 800a15a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a15c:	f001 feea 	bl	800bf34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a162:	3324      	adds	r3, #36	; 0x24
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	4611      	mov	r1, r2
 800a168:	4618      	mov	r0, r3
 800a16a:	f000 fe47 	bl	800adfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a16e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a170:	f000 f905 	bl	800a37e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a174:	f000 fc76 	bl	800aa64 <xTaskResumeAll>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	f47f af68 	bne.w	800a050 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a180:	4b18      	ldr	r3, [pc, #96]	; (800a1e4 <xQueueSemaphoreTake+0x214>)
 800a182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a186:	601a      	str	r2, [r3, #0]
 800a188:	f3bf 8f4f 	dsb	sy
 800a18c:	f3bf 8f6f 	isb	sy
 800a190:	e75e      	b.n	800a050 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a192:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a194:	f000 f8f3 	bl	800a37e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a198:	f000 fc64 	bl	800aa64 <xTaskResumeAll>
 800a19c:	e758      	b.n	800a050 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a19e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1a0:	f000 f8ed 	bl	800a37e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1a4:	f000 fc5e 	bl	800aa64 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1aa:	f000 f93a 	bl	800a422 <prvIsQueueEmpty>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f43f af4d 	beq.w	800a050 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d00d      	beq.n	800a1d8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a1bc:	f001 fe8a 	bl	800bed4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a1c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1c2:	f000 f834 	bl	800a22e <prvGetDisinheritPriorityAfterTimeout>
 800a1c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f001 f91a 	bl	800b408 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a1d4:	f001 feae 	bl	800bf34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a1d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3738      	adds	r7, #56	; 0x38
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	e000ed04 	.word	0xe000ed04

0800a1e8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d10a      	bne.n	800a210 <vQueueDelete+0x28>
	__asm volatile
 800a1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fe:	f383 8811 	msr	BASEPRI, r3
 800a202:	f3bf 8f6f 	isb	sy
 800a206:	f3bf 8f4f 	dsb	sy
 800a20a:	60bb      	str	r3, [r7, #8]
}
 800a20c:	bf00      	nop
 800a20e:	e7fe      	b.n	800a20e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f000 f95f 	bl	800a4d4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d102      	bne.n	800a226 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f002 f845 	bl	800c2b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a226:	bf00      	nop
 800a228:	3710      	adds	r7, #16
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a22e:	b480      	push	{r7}
 800a230:	b085      	sub	sp, #20
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d006      	beq.n	800a24c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a248:	60fb      	str	r3, [r7, #12]
 800a24a:	e001      	b.n	800a250 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a24c:	2300      	movs	r3, #0
 800a24e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a250:	68fb      	ldr	r3, [r7, #12]
	}
 800a252:	4618      	mov	r0, r3
 800a254:	3714      	adds	r7, #20
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr

0800a25e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b086      	sub	sp, #24
 800a262:	af00      	add	r7, sp, #0
 800a264:	60f8      	str	r0, [r7, #12]
 800a266:	60b9      	str	r1, [r7, #8]
 800a268:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a26a:	2300      	movs	r3, #0
 800a26c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a272:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d10d      	bne.n	800a298 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d14d      	bne.n	800a320 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	4618      	mov	r0, r3
 800a28a:	f001 f84f 	bl	800b32c <xTaskPriorityDisinherit>
 800a28e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2200      	movs	r2, #0
 800a294:	609a      	str	r2, [r3, #8]
 800a296:	e043      	b.n	800a320 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d119      	bne.n	800a2d2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6858      	ldr	r0, [r3, #4]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	68b9      	ldr	r1, [r7, #8]
 800a2aa:	f002 fa63 	bl	800c774 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	685a      	ldr	r2, [r3, #4]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b6:	441a      	add	r2, r3
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	685a      	ldr	r2, [r3, #4]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d32b      	bcc.n	800a320 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	605a      	str	r2, [r3, #4]
 800a2d0:	e026      	b.n	800a320 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	68d8      	ldr	r0, [r3, #12]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2da:	461a      	mov	r2, r3
 800a2dc:	68b9      	ldr	r1, [r7, #8]
 800a2de:	f002 fa49 	bl	800c774 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	68da      	ldr	r2, [r3, #12]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ea:	425b      	negs	r3, r3
 800a2ec:	441a      	add	r2, r3
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	68da      	ldr	r2, [r3, #12]
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d207      	bcs.n	800a30e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	689a      	ldr	r2, [r3, #8]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a306:	425b      	negs	r3, r3
 800a308:	441a      	add	r2, r3
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2b02      	cmp	r3, #2
 800a312:	d105      	bne.n	800a320 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d002      	beq.n	800a320 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	3b01      	subs	r3, #1
 800a31e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	1c5a      	adds	r2, r3, #1
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a328:	697b      	ldr	r3, [r7, #20]
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3718      	adds	r7, #24
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a332:	b580      	push	{r7, lr}
 800a334:	b082      	sub	sp, #8
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
 800a33a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a340:	2b00      	cmp	r3, #0
 800a342:	d018      	beq.n	800a376 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	68da      	ldr	r2, [r3, #12]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34c:	441a      	add	r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	68da      	ldr	r2, [r3, #12]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d303      	bcc.n	800a366 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	68d9      	ldr	r1, [r3, #12]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36e:	461a      	mov	r2, r3
 800a370:	6838      	ldr	r0, [r7, #0]
 800a372:	f002 f9ff 	bl	800c774 <memcpy>
	}
}
 800a376:	bf00      	nop
 800a378:	3708      	adds	r7, #8
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b084      	sub	sp, #16
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a386:	f001 fda5 	bl	800bed4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a390:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a392:	e011      	b.n	800a3b8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d012      	beq.n	800a3c2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	3324      	adds	r3, #36	; 0x24
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f000 fd7b 	bl	800ae9c <xTaskRemoveFromEventList>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d001      	beq.n	800a3b0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a3ac:	f000 fe52 	bl	800b054 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a3b0:	7bfb      	ldrb	r3, [r7, #15]
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	dce9      	bgt.n	800a394 <prvUnlockQueue+0x16>
 800a3c0:	e000      	b.n	800a3c4 <prvUnlockQueue+0x46>
					break;
 800a3c2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	22ff      	movs	r2, #255	; 0xff
 800a3c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a3cc:	f001 fdb2 	bl	800bf34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a3d0:	f001 fd80 	bl	800bed4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3da:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a3dc:	e011      	b.n	800a402 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d012      	beq.n	800a40c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	3310      	adds	r3, #16
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f000 fd56 	bl	800ae9c <xTaskRemoveFromEventList>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d001      	beq.n	800a3fa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a3f6:	f000 fe2d 	bl	800b054 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a3fa:	7bbb      	ldrb	r3, [r7, #14]
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a402:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a406:	2b00      	cmp	r3, #0
 800a408:	dce9      	bgt.n	800a3de <prvUnlockQueue+0x60>
 800a40a:	e000      	b.n	800a40e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a40c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	22ff      	movs	r2, #255	; 0xff
 800a412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a416:	f001 fd8d 	bl	800bf34 <vPortExitCritical>
}
 800a41a:	bf00      	nop
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b084      	sub	sp, #16
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a42a:	f001 fd53 	bl	800bed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a432:	2b00      	cmp	r3, #0
 800a434:	d102      	bne.n	800a43c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a436:	2301      	movs	r3, #1
 800a438:	60fb      	str	r3, [r7, #12]
 800a43a:	e001      	b.n	800a440 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a43c:	2300      	movs	r3, #0
 800a43e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a440:	f001 fd78 	bl	800bf34 <vPortExitCritical>

	return xReturn;
 800a444:	68fb      	ldr	r3, [r7, #12]
}
 800a446:	4618      	mov	r0, r3
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b084      	sub	sp, #16
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a456:	f001 fd3d 	bl	800bed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a462:	429a      	cmp	r2, r3
 800a464:	d102      	bne.n	800a46c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a466:	2301      	movs	r3, #1
 800a468:	60fb      	str	r3, [r7, #12]
 800a46a:	e001      	b.n	800a470 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a46c:	2300      	movs	r3, #0
 800a46e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a470:	f001 fd60 	bl	800bf34 <vPortExitCritical>

	return xReturn;
 800a474:	68fb      	ldr	r3, [r7, #12]
}
 800a476:	4618      	mov	r0, r3
 800a478:	3710      	adds	r7, #16
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
	...

0800a480 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a480:	b480      	push	{r7}
 800a482:	b085      	sub	sp, #20
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a48a:	2300      	movs	r3, #0
 800a48c:	60fb      	str	r3, [r7, #12]
 800a48e:	e014      	b.n	800a4ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a490:	4a0f      	ldr	r2, [pc, #60]	; (800a4d0 <vQueueAddToRegistry+0x50>)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d10b      	bne.n	800a4b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a49c:	490c      	ldr	r1, [pc, #48]	; (800a4d0 <vQueueAddToRegistry+0x50>)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	683a      	ldr	r2, [r7, #0]
 800a4a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a4a6:	4a0a      	ldr	r2, [pc, #40]	; (800a4d0 <vQueueAddToRegistry+0x50>)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	00db      	lsls	r3, r3, #3
 800a4ac:	4413      	add	r3, r2
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a4b2:	e006      	b.n	800a4c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	60fb      	str	r3, [r7, #12]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2b07      	cmp	r3, #7
 800a4be:	d9e7      	bls.n	800a490 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a4c0:	bf00      	nop
 800a4c2:	bf00      	nop
 800a4c4:	3714      	adds	r7, #20
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	20001954 	.word	0x20001954

0800a4d4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b085      	sub	sp, #20
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4dc:	2300      	movs	r3, #0
 800a4de:	60fb      	str	r3, [r7, #12]
 800a4e0:	e016      	b.n	800a510 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a4e2:	4a10      	ldr	r2, [pc, #64]	; (800a524 <vQueueUnregisterQueue+0x50>)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	00db      	lsls	r3, r3, #3
 800a4e8:	4413      	add	r3, r2
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d10b      	bne.n	800a50a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a4f2:	4a0c      	ldr	r2, [pc, #48]	; (800a524 <vQueueUnregisterQueue+0x50>)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a4fc:	4a09      	ldr	r2, [pc, #36]	; (800a524 <vQueueUnregisterQueue+0x50>)
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	00db      	lsls	r3, r3, #3
 800a502:	4413      	add	r3, r2
 800a504:	2200      	movs	r2, #0
 800a506:	605a      	str	r2, [r3, #4]
				break;
 800a508:	e006      	b.n	800a518 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	3301      	adds	r3, #1
 800a50e:	60fb      	str	r3, [r7, #12]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2b07      	cmp	r3, #7
 800a514:	d9e5      	bls.n	800a4e2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a516:	bf00      	nop
 800a518:	bf00      	nop
 800a51a:	3714      	adds	r7, #20
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr
 800a524:	20001954 	.word	0x20001954

0800a528 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b086      	sub	sp, #24
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a538:	f001 fccc 	bl	800bed4 <vPortEnterCritical>
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a542:	b25b      	sxtb	r3, r3
 800a544:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a548:	d103      	bne.n	800a552 <vQueueWaitForMessageRestricted+0x2a>
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	2200      	movs	r2, #0
 800a54e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a558:	b25b      	sxtb	r3, r3
 800a55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a55e:	d103      	bne.n	800a568 <vQueueWaitForMessageRestricted+0x40>
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	2200      	movs	r2, #0
 800a564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a568:	f001 fce4 	bl	800bf34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a570:	2b00      	cmp	r3, #0
 800a572:	d106      	bne.n	800a582 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	3324      	adds	r3, #36	; 0x24
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	68b9      	ldr	r1, [r7, #8]
 800a57c:	4618      	mov	r0, r3
 800a57e:	f000 fc61 	bl	800ae44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a582:	6978      	ldr	r0, [r7, #20]
 800a584:	f7ff fefb 	bl	800a37e <prvUnlockQueue>
	}
 800a588:	bf00      	nop
 800a58a:	3718      	adds	r7, #24
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a590:	b580      	push	{r7, lr}
 800a592:	b08e      	sub	sp, #56	; 0x38
 800a594:	af04      	add	r7, sp, #16
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	607a      	str	r2, [r7, #4]
 800a59c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d10a      	bne.n	800a5ba <xTaskCreateStatic+0x2a>
	__asm volatile
 800a5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a8:	f383 8811 	msr	BASEPRI, r3
 800a5ac:	f3bf 8f6f 	isb	sy
 800a5b0:	f3bf 8f4f 	dsb	sy
 800a5b4:	623b      	str	r3, [r7, #32]
}
 800a5b6:	bf00      	nop
 800a5b8:	e7fe      	b.n	800a5b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d10a      	bne.n	800a5d6 <xTaskCreateStatic+0x46>
	__asm volatile
 800a5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c4:	f383 8811 	msr	BASEPRI, r3
 800a5c8:	f3bf 8f6f 	isb	sy
 800a5cc:	f3bf 8f4f 	dsb	sy
 800a5d0:	61fb      	str	r3, [r7, #28]
}
 800a5d2:	bf00      	nop
 800a5d4:	e7fe      	b.n	800a5d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a5d6:	23bc      	movs	r3, #188	; 0xbc
 800a5d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	2bbc      	cmp	r3, #188	; 0xbc
 800a5de:	d00a      	beq.n	800a5f6 <xTaskCreateStatic+0x66>
	__asm volatile
 800a5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e4:	f383 8811 	msr	BASEPRI, r3
 800a5e8:	f3bf 8f6f 	isb	sy
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	61bb      	str	r3, [r7, #24]
}
 800a5f2:	bf00      	nop
 800a5f4:	e7fe      	b.n	800a5f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a5f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d01e      	beq.n	800a63c <xTaskCreateStatic+0xac>
 800a5fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a600:	2b00      	cmp	r3, #0
 800a602:	d01b      	beq.n	800a63c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a606:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a60c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a610:	2202      	movs	r2, #2
 800a612:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a616:	2300      	movs	r3, #0
 800a618:	9303      	str	r3, [sp, #12]
 800a61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61c:	9302      	str	r3, [sp, #8]
 800a61e:	f107 0314 	add.w	r3, r7, #20
 800a622:	9301      	str	r3, [sp, #4]
 800a624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a626:	9300      	str	r3, [sp, #0]
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	68b9      	ldr	r1, [r7, #8]
 800a62e:	68f8      	ldr	r0, [r7, #12]
 800a630:	f000 f850 	bl	800a6d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a634:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a636:	f000 f8f3 	bl	800a820 <prvAddNewTaskToReadyList>
 800a63a:	e001      	b.n	800a640 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a63c:	2300      	movs	r3, #0
 800a63e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a640:	697b      	ldr	r3, [r7, #20]
	}
 800a642:	4618      	mov	r0, r3
 800a644:	3728      	adds	r7, #40	; 0x28
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b08c      	sub	sp, #48	; 0x30
 800a64e:	af04      	add	r7, sp, #16
 800a650:	60f8      	str	r0, [r7, #12]
 800a652:	60b9      	str	r1, [r7, #8]
 800a654:	603b      	str	r3, [r7, #0]
 800a656:	4613      	mov	r3, r2
 800a658:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a65a:	88fb      	ldrh	r3, [r7, #6]
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	4618      	mov	r0, r3
 800a660:	f001 fd5a 	bl	800c118 <pvPortMalloc>
 800a664:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00e      	beq.n	800a68a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a66c:	20bc      	movs	r0, #188	; 0xbc
 800a66e:	f001 fd53 	bl	800c118 <pvPortMalloc>
 800a672:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a674:	69fb      	ldr	r3, [r7, #28]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d003      	beq.n	800a682 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a67a:	69fb      	ldr	r3, [r7, #28]
 800a67c:	697a      	ldr	r2, [r7, #20]
 800a67e:	631a      	str	r2, [r3, #48]	; 0x30
 800a680:	e005      	b.n	800a68e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a682:	6978      	ldr	r0, [r7, #20]
 800a684:	f001 fe14 	bl	800c2b0 <vPortFree>
 800a688:	e001      	b.n	800a68e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a68a:	2300      	movs	r3, #0
 800a68c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d017      	beq.n	800a6c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	2200      	movs	r2, #0
 800a698:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a69c:	88fa      	ldrh	r2, [r7, #6]
 800a69e:	2300      	movs	r3, #0
 800a6a0:	9303      	str	r3, [sp, #12]
 800a6a2:	69fb      	ldr	r3, [r7, #28]
 800a6a4:	9302      	str	r3, [sp, #8]
 800a6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a8:	9301      	str	r3, [sp, #4]
 800a6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ac:	9300      	str	r3, [sp, #0]
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	68b9      	ldr	r1, [r7, #8]
 800a6b2:	68f8      	ldr	r0, [r7, #12]
 800a6b4:	f000 f80e 	bl	800a6d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6b8:	69f8      	ldr	r0, [r7, #28]
 800a6ba:	f000 f8b1 	bl	800a820 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	61bb      	str	r3, [r7, #24]
 800a6c2:	e002      	b.n	800a6ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a6c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a6c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a6ca:	69bb      	ldr	r3, [r7, #24]
	}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3720      	adds	r7, #32
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b088      	sub	sp, #32
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	60b9      	str	r1, [r7, #8]
 800a6de:	607a      	str	r2, [r7, #4]
 800a6e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	21a5      	movs	r1, #165	; 0xa5
 800a6ee:	f002 f84f 	bl	800c790 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a6fc:	3b01      	subs	r3, #1
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	4413      	add	r3, r2
 800a702:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a704:	69bb      	ldr	r3, [r7, #24]
 800a706:	f023 0307 	bic.w	r3, r3, #7
 800a70a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a70c:	69bb      	ldr	r3, [r7, #24]
 800a70e:	f003 0307 	and.w	r3, r3, #7
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00a      	beq.n	800a72c <prvInitialiseNewTask+0x58>
	__asm volatile
 800a716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71a:	f383 8811 	msr	BASEPRI, r3
 800a71e:	f3bf 8f6f 	isb	sy
 800a722:	f3bf 8f4f 	dsb	sy
 800a726:	617b      	str	r3, [r7, #20]
}
 800a728:	bf00      	nop
 800a72a:	e7fe      	b.n	800a72a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d01f      	beq.n	800a772 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a732:	2300      	movs	r3, #0
 800a734:	61fb      	str	r3, [r7, #28]
 800a736:	e012      	b.n	800a75e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a738:	68ba      	ldr	r2, [r7, #8]
 800a73a:	69fb      	ldr	r3, [r7, #28]
 800a73c:	4413      	add	r3, r2
 800a73e:	7819      	ldrb	r1, [r3, #0]
 800a740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	4413      	add	r3, r2
 800a746:	3334      	adds	r3, #52	; 0x34
 800a748:	460a      	mov	r2, r1
 800a74a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	4413      	add	r3, r2
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d006      	beq.n	800a766 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	3301      	adds	r3, #1
 800a75c:	61fb      	str	r3, [r7, #28]
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	2b0f      	cmp	r3, #15
 800a762:	d9e9      	bls.n	800a738 <prvInitialiseNewTask+0x64>
 800a764:	e000      	b.n	800a768 <prvInitialiseNewTask+0x94>
			{
				break;
 800a766:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76a:	2200      	movs	r2, #0
 800a76c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a770:	e003      	b.n	800a77a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a774:	2200      	movs	r2, #0
 800a776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77c:	2b37      	cmp	r3, #55	; 0x37
 800a77e:	d901      	bls.n	800a784 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a780:	2337      	movs	r3, #55	; 0x37
 800a782:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a788:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a78e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a792:	2200      	movs	r2, #0
 800a794:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a798:	3304      	adds	r3, #4
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7fe fed6 	bl	800954c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a2:	3318      	adds	r3, #24
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7fe fed1 	bl	800954c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d2:	3354      	adds	r3, #84	; 0x54
 800a7d4:	2260      	movs	r2, #96	; 0x60
 800a7d6:	2100      	movs	r1, #0
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f001 ffd9 	bl	800c790 <memset>
 800a7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e0:	4a0c      	ldr	r2, [pc, #48]	; (800a814 <prvInitialiseNewTask+0x140>)
 800a7e2:	659a      	str	r2, [r3, #88]	; 0x58
 800a7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e6:	4a0c      	ldr	r2, [pc, #48]	; (800a818 <prvInitialiseNewTask+0x144>)
 800a7e8:	65da      	str	r2, [r3, #92]	; 0x5c
 800a7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ec:	4a0b      	ldr	r2, [pc, #44]	; (800a81c <prvInitialiseNewTask+0x148>)
 800a7ee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a7f0:	683a      	ldr	r2, [r7, #0]
 800a7f2:	68f9      	ldr	r1, [r7, #12]
 800a7f4:	69b8      	ldr	r0, [r7, #24]
 800a7f6:	f001 fa3f 	bl	800bc78 <pxPortInitialiseStack>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a802:	2b00      	cmp	r3, #0
 800a804:	d002      	beq.n	800a80c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a80a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a80c:	bf00      	nop
 800a80e:	3720      	adds	r7, #32
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	0800e410 	.word	0x0800e410
 800a818:	0800e430 	.word	0x0800e430
 800a81c:	0800e3f0 	.word	0x0800e3f0

0800a820 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a828:	f001 fb54 	bl	800bed4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a82c:	4b2d      	ldr	r3, [pc, #180]	; (800a8e4 <prvAddNewTaskToReadyList+0xc4>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	3301      	adds	r3, #1
 800a832:	4a2c      	ldr	r2, [pc, #176]	; (800a8e4 <prvAddNewTaskToReadyList+0xc4>)
 800a834:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a836:	4b2c      	ldr	r3, [pc, #176]	; (800a8e8 <prvAddNewTaskToReadyList+0xc8>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d109      	bne.n	800a852 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a83e:	4a2a      	ldr	r2, [pc, #168]	; (800a8e8 <prvAddNewTaskToReadyList+0xc8>)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a844:	4b27      	ldr	r3, [pc, #156]	; (800a8e4 <prvAddNewTaskToReadyList+0xc4>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d110      	bne.n	800a86e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a84c:	f000 fc26 	bl	800b09c <prvInitialiseTaskLists>
 800a850:	e00d      	b.n	800a86e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a852:	4b26      	ldr	r3, [pc, #152]	; (800a8ec <prvAddNewTaskToReadyList+0xcc>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d109      	bne.n	800a86e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a85a:	4b23      	ldr	r3, [pc, #140]	; (800a8e8 <prvAddNewTaskToReadyList+0xc8>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a864:	429a      	cmp	r2, r3
 800a866:	d802      	bhi.n	800a86e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a868:	4a1f      	ldr	r2, [pc, #124]	; (800a8e8 <prvAddNewTaskToReadyList+0xc8>)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a86e:	4b20      	ldr	r3, [pc, #128]	; (800a8f0 <prvAddNewTaskToReadyList+0xd0>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	3301      	adds	r3, #1
 800a874:	4a1e      	ldr	r2, [pc, #120]	; (800a8f0 <prvAddNewTaskToReadyList+0xd0>)
 800a876:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a878:	4b1d      	ldr	r3, [pc, #116]	; (800a8f0 <prvAddNewTaskToReadyList+0xd0>)
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a884:	4b1b      	ldr	r3, [pc, #108]	; (800a8f4 <prvAddNewTaskToReadyList+0xd4>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	429a      	cmp	r2, r3
 800a88a:	d903      	bls.n	800a894 <prvAddNewTaskToReadyList+0x74>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a890:	4a18      	ldr	r2, [pc, #96]	; (800a8f4 <prvAddNewTaskToReadyList+0xd4>)
 800a892:	6013      	str	r3, [r2, #0]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a898:	4613      	mov	r3, r2
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	4413      	add	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4a15      	ldr	r2, [pc, #84]	; (800a8f8 <prvAddNewTaskToReadyList+0xd8>)
 800a8a2:	441a      	add	r2, r3
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	3304      	adds	r3, #4
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	4610      	mov	r0, r2
 800a8ac:	f7fe fe5b 	bl	8009566 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a8b0:	f001 fb40 	bl	800bf34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a8b4:	4b0d      	ldr	r3, [pc, #52]	; (800a8ec <prvAddNewTaskToReadyList+0xcc>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d00e      	beq.n	800a8da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a8bc:	4b0a      	ldr	r3, [pc, #40]	; (800a8e8 <prvAddNewTaskToReadyList+0xc8>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d207      	bcs.n	800a8da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a8ca:	4b0c      	ldr	r3, [pc, #48]	; (800a8fc <prvAddNewTaskToReadyList+0xdc>)
 800a8cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8d0:	601a      	str	r2, [r3, #0]
 800a8d2:	f3bf 8f4f 	dsb	sy
 800a8d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8da:	bf00      	nop
 800a8dc:	3708      	adds	r7, #8
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	20001e68 	.word	0x20001e68
 800a8e8:	20001994 	.word	0x20001994
 800a8ec:	20001e74 	.word	0x20001e74
 800a8f0:	20001e84 	.word	0x20001e84
 800a8f4:	20001e70 	.word	0x20001e70
 800a8f8:	20001998 	.word	0x20001998
 800a8fc:	e000ed04 	.word	0xe000ed04

0800a900 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a908:	2300      	movs	r3, #0
 800a90a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d017      	beq.n	800a942 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a912:	4b13      	ldr	r3, [pc, #76]	; (800a960 <vTaskDelay+0x60>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d00a      	beq.n	800a930 <vTaskDelay+0x30>
	__asm volatile
 800a91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91e:	f383 8811 	msr	BASEPRI, r3
 800a922:	f3bf 8f6f 	isb	sy
 800a926:	f3bf 8f4f 	dsb	sy
 800a92a:	60bb      	str	r3, [r7, #8]
}
 800a92c:	bf00      	nop
 800a92e:	e7fe      	b.n	800a92e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a930:	f000 f88a 	bl	800aa48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a934:	2100      	movs	r1, #0
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 fdfc 	bl	800b534 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a93c:	f000 f892 	bl	800aa64 <xTaskResumeAll>
 800a940:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d107      	bne.n	800a958 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a948:	4b06      	ldr	r3, [pc, #24]	; (800a964 <vTaskDelay+0x64>)
 800a94a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a94e:	601a      	str	r2, [r3, #0]
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a958:	bf00      	nop
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	20001e90 	.word	0x20001e90
 800a964:	e000ed04 	.word	0xe000ed04

0800a968 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b08a      	sub	sp, #40	; 0x28
 800a96c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a96e:	2300      	movs	r3, #0
 800a970:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a972:	2300      	movs	r3, #0
 800a974:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a976:	463a      	mov	r2, r7
 800a978:	1d39      	adds	r1, r7, #4
 800a97a:	f107 0308 	add.w	r3, r7, #8
 800a97e:	4618      	mov	r0, r3
 800a980:	f7fe fd90 	bl	80094a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a984:	6839      	ldr	r1, [r7, #0]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	68ba      	ldr	r2, [r7, #8]
 800a98a:	9202      	str	r2, [sp, #8]
 800a98c:	9301      	str	r3, [sp, #4]
 800a98e:	2300      	movs	r3, #0
 800a990:	9300      	str	r3, [sp, #0]
 800a992:	2300      	movs	r3, #0
 800a994:	460a      	mov	r2, r1
 800a996:	4924      	ldr	r1, [pc, #144]	; (800aa28 <vTaskStartScheduler+0xc0>)
 800a998:	4824      	ldr	r0, [pc, #144]	; (800aa2c <vTaskStartScheduler+0xc4>)
 800a99a:	f7ff fdf9 	bl	800a590 <xTaskCreateStatic>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	4a23      	ldr	r2, [pc, #140]	; (800aa30 <vTaskStartScheduler+0xc8>)
 800a9a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a9a4:	4b22      	ldr	r3, [pc, #136]	; (800aa30 <vTaskStartScheduler+0xc8>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d002      	beq.n	800a9b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	617b      	str	r3, [r7, #20]
 800a9b0:	e001      	b.n	800a9b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d102      	bne.n	800a9c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a9bc:	f000 fe0e 	bl	800b5dc <xTimerCreateTimerTask>
 800a9c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d11b      	bne.n	800aa00 <vTaskStartScheduler+0x98>
	__asm volatile
 800a9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9cc:	f383 8811 	msr	BASEPRI, r3
 800a9d0:	f3bf 8f6f 	isb	sy
 800a9d4:	f3bf 8f4f 	dsb	sy
 800a9d8:	613b      	str	r3, [r7, #16]
}
 800a9da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a9dc:	4b15      	ldr	r3, [pc, #84]	; (800aa34 <vTaskStartScheduler+0xcc>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	3354      	adds	r3, #84	; 0x54
 800a9e2:	4a15      	ldr	r2, [pc, #84]	; (800aa38 <vTaskStartScheduler+0xd0>)
 800a9e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a9e6:	4b15      	ldr	r3, [pc, #84]	; (800aa3c <vTaskStartScheduler+0xd4>)
 800a9e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a9ee:	4b14      	ldr	r3, [pc, #80]	; (800aa40 <vTaskStartScheduler+0xd8>)
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a9f4:	4b13      	ldr	r3, [pc, #76]	; (800aa44 <vTaskStartScheduler+0xdc>)
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a9fa:	f001 f9c9 	bl	800bd90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a9fe:	e00e      	b.n	800aa1e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa06:	d10a      	bne.n	800aa1e <vTaskStartScheduler+0xb6>
	__asm volatile
 800aa08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0c:	f383 8811 	msr	BASEPRI, r3
 800aa10:	f3bf 8f6f 	isb	sy
 800aa14:	f3bf 8f4f 	dsb	sy
 800aa18:	60fb      	str	r3, [r7, #12]
}
 800aa1a:	bf00      	nop
 800aa1c:	e7fe      	b.n	800aa1c <vTaskStartScheduler+0xb4>
}
 800aa1e:	bf00      	nop
 800aa20:	3718      	adds	r7, #24
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	0800e344 	.word	0x0800e344
 800aa2c:	0800b06d 	.word	0x0800b06d
 800aa30:	20001e8c 	.word	0x20001e8c
 800aa34:	20001994 	.word	0x20001994
 800aa38:	20000010 	.word	0x20000010
 800aa3c:	20001e88 	.word	0x20001e88
 800aa40:	20001e74 	.word	0x20001e74
 800aa44:	20001e6c 	.word	0x20001e6c

0800aa48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aa48:	b480      	push	{r7}
 800aa4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aa4c:	4b04      	ldr	r3, [pc, #16]	; (800aa60 <vTaskSuspendAll+0x18>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	3301      	adds	r3, #1
 800aa52:	4a03      	ldr	r2, [pc, #12]	; (800aa60 <vTaskSuspendAll+0x18>)
 800aa54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aa56:	bf00      	nop
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr
 800aa60:	20001e90 	.word	0x20001e90

0800aa64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aa72:	4b42      	ldr	r3, [pc, #264]	; (800ab7c <xTaskResumeAll+0x118>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d10a      	bne.n	800aa90 <xTaskResumeAll+0x2c>
	__asm volatile
 800aa7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7e:	f383 8811 	msr	BASEPRI, r3
 800aa82:	f3bf 8f6f 	isb	sy
 800aa86:	f3bf 8f4f 	dsb	sy
 800aa8a:	603b      	str	r3, [r7, #0]
}
 800aa8c:	bf00      	nop
 800aa8e:	e7fe      	b.n	800aa8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aa90:	f001 fa20 	bl	800bed4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aa94:	4b39      	ldr	r3, [pc, #228]	; (800ab7c <xTaskResumeAll+0x118>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	4a38      	ldr	r2, [pc, #224]	; (800ab7c <xTaskResumeAll+0x118>)
 800aa9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa9e:	4b37      	ldr	r3, [pc, #220]	; (800ab7c <xTaskResumeAll+0x118>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d162      	bne.n	800ab6c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aaa6:	4b36      	ldr	r3, [pc, #216]	; (800ab80 <xTaskResumeAll+0x11c>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d05e      	beq.n	800ab6c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aaae:	e02f      	b.n	800ab10 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aab0:	4b34      	ldr	r3, [pc, #208]	; (800ab84 <xTaskResumeAll+0x120>)
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	68db      	ldr	r3, [r3, #12]
 800aab6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	3318      	adds	r3, #24
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7fe fdaf 	bl	8009620 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	3304      	adds	r3, #4
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7fe fdaa 	bl	8009620 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aad0:	4b2d      	ldr	r3, [pc, #180]	; (800ab88 <xTaskResumeAll+0x124>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d903      	bls.n	800aae0 <xTaskResumeAll+0x7c>
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aadc:	4a2a      	ldr	r2, [pc, #168]	; (800ab88 <xTaskResumeAll+0x124>)
 800aade:	6013      	str	r3, [r2, #0]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aae4:	4613      	mov	r3, r2
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	4413      	add	r3, r2
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	4a27      	ldr	r2, [pc, #156]	; (800ab8c <xTaskResumeAll+0x128>)
 800aaee:	441a      	add	r2, r3
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	3304      	adds	r3, #4
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	4610      	mov	r0, r2
 800aaf8:	f7fe fd35 	bl	8009566 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab00:	4b23      	ldr	r3, [pc, #140]	; (800ab90 <xTaskResumeAll+0x12c>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d302      	bcc.n	800ab10 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ab0a:	4b22      	ldr	r3, [pc, #136]	; (800ab94 <xTaskResumeAll+0x130>)
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab10:	4b1c      	ldr	r3, [pc, #112]	; (800ab84 <xTaskResumeAll+0x120>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d1cb      	bne.n	800aab0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d001      	beq.n	800ab22 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ab1e:	f000 fb5f 	bl	800b1e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ab22:	4b1d      	ldr	r3, [pc, #116]	; (800ab98 <xTaskResumeAll+0x134>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d010      	beq.n	800ab50 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ab2e:	f000 f847 	bl	800abc0 <xTaskIncrementTick>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d002      	beq.n	800ab3e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ab38:	4b16      	ldr	r3, [pc, #88]	; (800ab94 <xTaskResumeAll+0x130>)
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	3b01      	subs	r3, #1
 800ab42:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d1f1      	bne.n	800ab2e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ab4a:	4b13      	ldr	r3, [pc, #76]	; (800ab98 <xTaskResumeAll+0x134>)
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ab50:	4b10      	ldr	r3, [pc, #64]	; (800ab94 <xTaskResumeAll+0x130>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d009      	beq.n	800ab6c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ab5c:	4b0f      	ldr	r3, [pc, #60]	; (800ab9c <xTaskResumeAll+0x138>)
 800ab5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab62:	601a      	str	r2, [r3, #0]
 800ab64:	f3bf 8f4f 	dsb	sy
 800ab68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab6c:	f001 f9e2 	bl	800bf34 <vPortExitCritical>

	return xAlreadyYielded;
 800ab70:	68bb      	ldr	r3, [r7, #8]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	20001e90 	.word	0x20001e90
 800ab80:	20001e68 	.word	0x20001e68
 800ab84:	20001e28 	.word	0x20001e28
 800ab88:	20001e70 	.word	0x20001e70
 800ab8c:	20001998 	.word	0x20001998
 800ab90:	20001994 	.word	0x20001994
 800ab94:	20001e7c 	.word	0x20001e7c
 800ab98:	20001e78 	.word	0x20001e78
 800ab9c:	e000ed04 	.word	0xe000ed04

0800aba0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aba6:	4b05      	ldr	r3, [pc, #20]	; (800abbc <xTaskGetTickCount+0x1c>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800abac:	687b      	ldr	r3, [r7, #4]
}
 800abae:	4618      	mov	r0, r3
 800abb0:	370c      	adds	r7, #12
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	20001e6c 	.word	0x20001e6c

0800abc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800abc6:	2300      	movs	r3, #0
 800abc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abca:	4b4f      	ldr	r3, [pc, #316]	; (800ad08 <xTaskIncrementTick+0x148>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	f040 808f 	bne.w	800acf2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800abd4:	4b4d      	ldr	r3, [pc, #308]	; (800ad0c <xTaskIncrementTick+0x14c>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	3301      	adds	r3, #1
 800abda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800abdc:	4a4b      	ldr	r2, [pc, #300]	; (800ad0c <xTaskIncrementTick+0x14c>)
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d120      	bne.n	800ac2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800abe8:	4b49      	ldr	r3, [pc, #292]	; (800ad10 <xTaskIncrementTick+0x150>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00a      	beq.n	800ac08 <xTaskIncrementTick+0x48>
	__asm volatile
 800abf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf6:	f383 8811 	msr	BASEPRI, r3
 800abfa:	f3bf 8f6f 	isb	sy
 800abfe:	f3bf 8f4f 	dsb	sy
 800ac02:	603b      	str	r3, [r7, #0]
}
 800ac04:	bf00      	nop
 800ac06:	e7fe      	b.n	800ac06 <xTaskIncrementTick+0x46>
 800ac08:	4b41      	ldr	r3, [pc, #260]	; (800ad10 <xTaskIncrementTick+0x150>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	60fb      	str	r3, [r7, #12]
 800ac0e:	4b41      	ldr	r3, [pc, #260]	; (800ad14 <xTaskIncrementTick+0x154>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4a3f      	ldr	r2, [pc, #252]	; (800ad10 <xTaskIncrementTick+0x150>)
 800ac14:	6013      	str	r3, [r2, #0]
 800ac16:	4a3f      	ldr	r2, [pc, #252]	; (800ad14 <xTaskIncrementTick+0x154>)
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	6013      	str	r3, [r2, #0]
 800ac1c:	4b3e      	ldr	r3, [pc, #248]	; (800ad18 <xTaskIncrementTick+0x158>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	3301      	adds	r3, #1
 800ac22:	4a3d      	ldr	r2, [pc, #244]	; (800ad18 <xTaskIncrementTick+0x158>)
 800ac24:	6013      	str	r3, [r2, #0]
 800ac26:	f000 fadb 	bl	800b1e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ac2a:	4b3c      	ldr	r3, [pc, #240]	; (800ad1c <xTaskIncrementTick+0x15c>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	693a      	ldr	r2, [r7, #16]
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d349      	bcc.n	800acc8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac34:	4b36      	ldr	r3, [pc, #216]	; (800ad10 <xTaskIncrementTick+0x150>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d104      	bne.n	800ac48 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac3e:	4b37      	ldr	r3, [pc, #220]	; (800ad1c <xTaskIncrementTick+0x15c>)
 800ac40:	f04f 32ff 	mov.w	r2, #4294967295
 800ac44:	601a      	str	r2, [r3, #0]
					break;
 800ac46:	e03f      	b.n	800acc8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac48:	4b31      	ldr	r3, [pc, #196]	; (800ad10 <xTaskIncrementTick+0x150>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	68db      	ldr	r3, [r3, #12]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ac58:	693a      	ldr	r2, [r7, #16]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d203      	bcs.n	800ac68 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ac60:	4a2e      	ldr	r2, [pc, #184]	; (800ad1c <xTaskIncrementTick+0x15c>)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ac66:	e02f      	b.n	800acc8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	3304      	adds	r3, #4
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7fe fcd7 	bl	8009620 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d004      	beq.n	800ac84 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	3318      	adds	r3, #24
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7fe fcce 	bl	8009620 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac88:	4b25      	ldr	r3, [pc, #148]	; (800ad20 <xTaskIncrementTick+0x160>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d903      	bls.n	800ac98 <xTaskIncrementTick+0xd8>
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac94:	4a22      	ldr	r2, [pc, #136]	; (800ad20 <xTaskIncrementTick+0x160>)
 800ac96:	6013      	str	r3, [r2, #0]
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac9c:	4613      	mov	r3, r2
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	4413      	add	r3, r2
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	4a1f      	ldr	r2, [pc, #124]	; (800ad24 <xTaskIncrementTick+0x164>)
 800aca6:	441a      	add	r2, r3
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	3304      	adds	r3, #4
 800acac:	4619      	mov	r1, r3
 800acae:	4610      	mov	r0, r2
 800acb0:	f7fe fc59 	bl	8009566 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acb8:	4b1b      	ldr	r3, [pc, #108]	; (800ad28 <xTaskIncrementTick+0x168>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d3b8      	bcc.n	800ac34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800acc2:	2301      	movs	r3, #1
 800acc4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acc6:	e7b5      	b.n	800ac34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800acc8:	4b17      	ldr	r3, [pc, #92]	; (800ad28 <xTaskIncrementTick+0x168>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acce:	4915      	ldr	r1, [pc, #84]	; (800ad24 <xTaskIncrementTick+0x164>)
 800acd0:	4613      	mov	r3, r2
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	4413      	add	r3, r2
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	440b      	add	r3, r1
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d901      	bls.n	800ace4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ace0:	2301      	movs	r3, #1
 800ace2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ace4:	4b11      	ldr	r3, [pc, #68]	; (800ad2c <xTaskIncrementTick+0x16c>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d007      	beq.n	800acfc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800acec:	2301      	movs	r3, #1
 800acee:	617b      	str	r3, [r7, #20]
 800acf0:	e004      	b.n	800acfc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800acf2:	4b0f      	ldr	r3, [pc, #60]	; (800ad30 <xTaskIncrementTick+0x170>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	3301      	adds	r3, #1
 800acf8:	4a0d      	ldr	r2, [pc, #52]	; (800ad30 <xTaskIncrementTick+0x170>)
 800acfa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800acfc:	697b      	ldr	r3, [r7, #20]
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3718      	adds	r7, #24
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	20001e90 	.word	0x20001e90
 800ad0c:	20001e6c 	.word	0x20001e6c
 800ad10:	20001e20 	.word	0x20001e20
 800ad14:	20001e24 	.word	0x20001e24
 800ad18:	20001e80 	.word	0x20001e80
 800ad1c:	20001e88 	.word	0x20001e88
 800ad20:	20001e70 	.word	0x20001e70
 800ad24:	20001998 	.word	0x20001998
 800ad28:	20001994 	.word	0x20001994
 800ad2c:	20001e7c 	.word	0x20001e7c
 800ad30:	20001e78 	.word	0x20001e78

0800ad34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ad34:	b480      	push	{r7}
 800ad36:	b085      	sub	sp, #20
 800ad38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ad3a:	4b2a      	ldr	r3, [pc, #168]	; (800ade4 <vTaskSwitchContext+0xb0>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d003      	beq.n	800ad4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ad42:	4b29      	ldr	r3, [pc, #164]	; (800ade8 <vTaskSwitchContext+0xb4>)
 800ad44:	2201      	movs	r2, #1
 800ad46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ad48:	e046      	b.n	800add8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ad4a:	4b27      	ldr	r3, [pc, #156]	; (800ade8 <vTaskSwitchContext+0xb4>)
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad50:	4b26      	ldr	r3, [pc, #152]	; (800adec <vTaskSwitchContext+0xb8>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	60fb      	str	r3, [r7, #12]
 800ad56:	e010      	b.n	800ad7a <vTaskSwitchContext+0x46>
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d10a      	bne.n	800ad74 <vTaskSwitchContext+0x40>
	__asm volatile
 800ad5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad62:	f383 8811 	msr	BASEPRI, r3
 800ad66:	f3bf 8f6f 	isb	sy
 800ad6a:	f3bf 8f4f 	dsb	sy
 800ad6e:	607b      	str	r3, [r7, #4]
}
 800ad70:	bf00      	nop
 800ad72:	e7fe      	b.n	800ad72 <vTaskSwitchContext+0x3e>
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	3b01      	subs	r3, #1
 800ad78:	60fb      	str	r3, [r7, #12]
 800ad7a:	491d      	ldr	r1, [pc, #116]	; (800adf0 <vTaskSwitchContext+0xbc>)
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	4613      	mov	r3, r2
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	4413      	add	r3, r2
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	440b      	add	r3, r1
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d0e4      	beq.n	800ad58 <vTaskSwitchContext+0x24>
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	4613      	mov	r3, r2
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	4413      	add	r3, r2
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	4a15      	ldr	r2, [pc, #84]	; (800adf0 <vTaskSwitchContext+0xbc>)
 800ad9a:	4413      	add	r3, r2
 800ad9c:	60bb      	str	r3, [r7, #8]
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	685a      	ldr	r2, [r3, #4]
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	605a      	str	r2, [r3, #4]
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	685a      	ldr	r2, [r3, #4]
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	3308      	adds	r3, #8
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d104      	bne.n	800adbe <vTaskSwitchContext+0x8a>
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	685a      	ldr	r2, [r3, #4]
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	605a      	str	r2, [r3, #4]
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	4a0b      	ldr	r2, [pc, #44]	; (800adf4 <vTaskSwitchContext+0xc0>)
 800adc6:	6013      	str	r3, [r2, #0]
 800adc8:	4a08      	ldr	r2, [pc, #32]	; (800adec <vTaskSwitchContext+0xb8>)
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800adce:	4b09      	ldr	r3, [pc, #36]	; (800adf4 <vTaskSwitchContext+0xc0>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	3354      	adds	r3, #84	; 0x54
 800add4:	4a08      	ldr	r2, [pc, #32]	; (800adf8 <vTaskSwitchContext+0xc4>)
 800add6:	6013      	str	r3, [r2, #0]
}
 800add8:	bf00      	nop
 800adda:	3714      	adds	r7, #20
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr
 800ade4:	20001e90 	.word	0x20001e90
 800ade8:	20001e7c 	.word	0x20001e7c
 800adec:	20001e70 	.word	0x20001e70
 800adf0:	20001998 	.word	0x20001998
 800adf4:	20001994 	.word	0x20001994
 800adf8:	20000010 	.word	0x20000010

0800adfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10a      	bne.n	800ae22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ae0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae10:	f383 8811 	msr	BASEPRI, r3
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	f3bf 8f4f 	dsb	sy
 800ae1c:	60fb      	str	r3, [r7, #12]
}
 800ae1e:	bf00      	nop
 800ae20:	e7fe      	b.n	800ae20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae22:	4b07      	ldr	r3, [pc, #28]	; (800ae40 <vTaskPlaceOnEventList+0x44>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	3318      	adds	r3, #24
 800ae28:	4619      	mov	r1, r3
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f7fe fbbf 	bl	80095ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ae30:	2101      	movs	r1, #1
 800ae32:	6838      	ldr	r0, [r7, #0]
 800ae34:	f000 fb7e 	bl	800b534 <prvAddCurrentTaskToDelayedList>
}
 800ae38:	bf00      	nop
 800ae3a:	3710      	adds	r7, #16
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	20001994 	.word	0x20001994

0800ae44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d10a      	bne.n	800ae6c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ae56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae5a:	f383 8811 	msr	BASEPRI, r3
 800ae5e:	f3bf 8f6f 	isb	sy
 800ae62:	f3bf 8f4f 	dsb	sy
 800ae66:	617b      	str	r3, [r7, #20]
}
 800ae68:	bf00      	nop
 800ae6a:	e7fe      	b.n	800ae6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae6c:	4b0a      	ldr	r3, [pc, #40]	; (800ae98 <vTaskPlaceOnEventListRestricted+0x54>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	3318      	adds	r3, #24
 800ae72:	4619      	mov	r1, r3
 800ae74:	68f8      	ldr	r0, [r7, #12]
 800ae76:	f7fe fb76 	bl	8009566 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d002      	beq.n	800ae86 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ae80:	f04f 33ff 	mov.w	r3, #4294967295
 800ae84:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ae86:	6879      	ldr	r1, [r7, #4]
 800ae88:	68b8      	ldr	r0, [r7, #8]
 800ae8a:	f000 fb53 	bl	800b534 <prvAddCurrentTaskToDelayedList>
	}
 800ae8e:	bf00      	nop
 800ae90:	3718      	adds	r7, #24
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	20001994 	.word	0x20001994

0800ae9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b086      	sub	sp, #24
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	68db      	ldr	r3, [r3, #12]
 800aea8:	68db      	ldr	r3, [r3, #12]
 800aeaa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d10a      	bne.n	800aec8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800aeb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb6:	f383 8811 	msr	BASEPRI, r3
 800aeba:	f3bf 8f6f 	isb	sy
 800aebe:	f3bf 8f4f 	dsb	sy
 800aec2:	60fb      	str	r3, [r7, #12]
}
 800aec4:	bf00      	nop
 800aec6:	e7fe      	b.n	800aec6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	3318      	adds	r3, #24
 800aecc:	4618      	mov	r0, r3
 800aece:	f7fe fba7 	bl	8009620 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aed2:	4b1e      	ldr	r3, [pc, #120]	; (800af4c <xTaskRemoveFromEventList+0xb0>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d11d      	bne.n	800af16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	3304      	adds	r3, #4
 800aede:	4618      	mov	r0, r3
 800aee0:	f7fe fb9e 	bl	8009620 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aee8:	4b19      	ldr	r3, [pc, #100]	; (800af50 <xTaskRemoveFromEventList+0xb4>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d903      	bls.n	800aef8 <xTaskRemoveFromEventList+0x5c>
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef4:	4a16      	ldr	r2, [pc, #88]	; (800af50 <xTaskRemoveFromEventList+0xb4>)
 800aef6:	6013      	str	r3, [r2, #0]
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aefc:	4613      	mov	r3, r2
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4413      	add	r3, r2
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	4a13      	ldr	r2, [pc, #76]	; (800af54 <xTaskRemoveFromEventList+0xb8>)
 800af06:	441a      	add	r2, r3
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	3304      	adds	r3, #4
 800af0c:	4619      	mov	r1, r3
 800af0e:	4610      	mov	r0, r2
 800af10:	f7fe fb29 	bl	8009566 <vListInsertEnd>
 800af14:	e005      	b.n	800af22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	3318      	adds	r3, #24
 800af1a:	4619      	mov	r1, r3
 800af1c:	480e      	ldr	r0, [pc, #56]	; (800af58 <xTaskRemoveFromEventList+0xbc>)
 800af1e:	f7fe fb22 	bl	8009566 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af26:	4b0d      	ldr	r3, [pc, #52]	; (800af5c <xTaskRemoveFromEventList+0xc0>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d905      	bls.n	800af3c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800af30:	2301      	movs	r3, #1
 800af32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800af34:	4b0a      	ldr	r3, [pc, #40]	; (800af60 <xTaskRemoveFromEventList+0xc4>)
 800af36:	2201      	movs	r2, #1
 800af38:	601a      	str	r2, [r3, #0]
 800af3a:	e001      	b.n	800af40 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800af3c:	2300      	movs	r3, #0
 800af3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800af40:	697b      	ldr	r3, [r7, #20]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3718      	adds	r7, #24
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	20001e90 	.word	0x20001e90
 800af50:	20001e70 	.word	0x20001e70
 800af54:	20001998 	.word	0x20001998
 800af58:	20001e28 	.word	0x20001e28
 800af5c:	20001994 	.word	0x20001994
 800af60:	20001e7c 	.word	0x20001e7c

0800af64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800af6c:	4b06      	ldr	r3, [pc, #24]	; (800af88 <vTaskInternalSetTimeOutState+0x24>)
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800af74:	4b05      	ldr	r3, [pc, #20]	; (800af8c <vTaskInternalSetTimeOutState+0x28>)
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	605a      	str	r2, [r3, #4]
}
 800af7c:	bf00      	nop
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr
 800af88:	20001e80 	.word	0x20001e80
 800af8c:	20001e6c 	.word	0x20001e6c

0800af90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b088      	sub	sp, #32
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d10a      	bne.n	800afb6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800afa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa4:	f383 8811 	msr	BASEPRI, r3
 800afa8:	f3bf 8f6f 	isb	sy
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	613b      	str	r3, [r7, #16]
}
 800afb2:	bf00      	nop
 800afb4:	e7fe      	b.n	800afb4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d10a      	bne.n	800afd2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800afbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc0:	f383 8811 	msr	BASEPRI, r3
 800afc4:	f3bf 8f6f 	isb	sy
 800afc8:	f3bf 8f4f 	dsb	sy
 800afcc:	60fb      	str	r3, [r7, #12]
}
 800afce:	bf00      	nop
 800afd0:	e7fe      	b.n	800afd0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800afd2:	f000 ff7f 	bl	800bed4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800afd6:	4b1d      	ldr	r3, [pc, #116]	; (800b04c <xTaskCheckForTimeOut+0xbc>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	69ba      	ldr	r2, [r7, #24]
 800afe2:	1ad3      	subs	r3, r2, r3
 800afe4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afee:	d102      	bne.n	800aff6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aff0:	2300      	movs	r3, #0
 800aff2:	61fb      	str	r3, [r7, #28]
 800aff4:	e023      	b.n	800b03e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	4b15      	ldr	r3, [pc, #84]	; (800b050 <xTaskCheckForTimeOut+0xc0>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	429a      	cmp	r2, r3
 800b000:	d007      	beq.n	800b012 <xTaskCheckForTimeOut+0x82>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	69ba      	ldr	r2, [r7, #24]
 800b008:	429a      	cmp	r2, r3
 800b00a:	d302      	bcc.n	800b012 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b00c:	2301      	movs	r3, #1
 800b00e:	61fb      	str	r3, [r7, #28]
 800b010:	e015      	b.n	800b03e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	697a      	ldr	r2, [r7, #20]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d20b      	bcs.n	800b034 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	681a      	ldr	r2, [r3, #0]
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	1ad2      	subs	r2, r2, r3
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f7ff ff9b 	bl	800af64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b02e:	2300      	movs	r3, #0
 800b030:	61fb      	str	r3, [r7, #28]
 800b032:	e004      	b.n	800b03e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	2200      	movs	r2, #0
 800b038:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b03a:	2301      	movs	r3, #1
 800b03c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b03e:	f000 ff79 	bl	800bf34 <vPortExitCritical>

	return xReturn;
 800b042:	69fb      	ldr	r3, [r7, #28]
}
 800b044:	4618      	mov	r0, r3
 800b046:	3720      	adds	r7, #32
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	20001e6c 	.word	0x20001e6c
 800b050:	20001e80 	.word	0x20001e80

0800b054 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b054:	b480      	push	{r7}
 800b056:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b058:	4b03      	ldr	r3, [pc, #12]	; (800b068 <vTaskMissedYield+0x14>)
 800b05a:	2201      	movs	r2, #1
 800b05c:	601a      	str	r2, [r3, #0]
}
 800b05e:	bf00      	nop
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr
 800b068:	20001e7c 	.word	0x20001e7c

0800b06c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b074:	f000 f852 	bl	800b11c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b078:	4b06      	ldr	r3, [pc, #24]	; (800b094 <prvIdleTask+0x28>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d9f9      	bls.n	800b074 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b080:	4b05      	ldr	r3, [pc, #20]	; (800b098 <prvIdleTask+0x2c>)
 800b082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b086:	601a      	str	r2, [r3, #0]
 800b088:	f3bf 8f4f 	dsb	sy
 800b08c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b090:	e7f0      	b.n	800b074 <prvIdleTask+0x8>
 800b092:	bf00      	nop
 800b094:	20001998 	.word	0x20001998
 800b098:	e000ed04 	.word	0xe000ed04

0800b09c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	607b      	str	r3, [r7, #4]
 800b0a6:	e00c      	b.n	800b0c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	4413      	add	r3, r2
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	4a12      	ldr	r2, [pc, #72]	; (800b0fc <prvInitialiseTaskLists+0x60>)
 800b0b4:	4413      	add	r3, r2
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7fe fa28 	bl	800950c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	607b      	str	r3, [r7, #4]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2b37      	cmp	r3, #55	; 0x37
 800b0c6:	d9ef      	bls.n	800b0a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b0c8:	480d      	ldr	r0, [pc, #52]	; (800b100 <prvInitialiseTaskLists+0x64>)
 800b0ca:	f7fe fa1f 	bl	800950c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b0ce:	480d      	ldr	r0, [pc, #52]	; (800b104 <prvInitialiseTaskLists+0x68>)
 800b0d0:	f7fe fa1c 	bl	800950c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b0d4:	480c      	ldr	r0, [pc, #48]	; (800b108 <prvInitialiseTaskLists+0x6c>)
 800b0d6:	f7fe fa19 	bl	800950c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b0da:	480c      	ldr	r0, [pc, #48]	; (800b10c <prvInitialiseTaskLists+0x70>)
 800b0dc:	f7fe fa16 	bl	800950c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b0e0:	480b      	ldr	r0, [pc, #44]	; (800b110 <prvInitialiseTaskLists+0x74>)
 800b0e2:	f7fe fa13 	bl	800950c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b0e6:	4b0b      	ldr	r3, [pc, #44]	; (800b114 <prvInitialiseTaskLists+0x78>)
 800b0e8:	4a05      	ldr	r2, [pc, #20]	; (800b100 <prvInitialiseTaskLists+0x64>)
 800b0ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b0ec:	4b0a      	ldr	r3, [pc, #40]	; (800b118 <prvInitialiseTaskLists+0x7c>)
 800b0ee:	4a05      	ldr	r2, [pc, #20]	; (800b104 <prvInitialiseTaskLists+0x68>)
 800b0f0:	601a      	str	r2, [r3, #0]
}
 800b0f2:	bf00      	nop
 800b0f4:	3708      	adds	r7, #8
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	20001998 	.word	0x20001998
 800b100:	20001df8 	.word	0x20001df8
 800b104:	20001e0c 	.word	0x20001e0c
 800b108:	20001e28 	.word	0x20001e28
 800b10c:	20001e3c 	.word	0x20001e3c
 800b110:	20001e54 	.word	0x20001e54
 800b114:	20001e20 	.word	0x20001e20
 800b118:	20001e24 	.word	0x20001e24

0800b11c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b122:	e019      	b.n	800b158 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b124:	f000 fed6 	bl	800bed4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b128:	4b10      	ldr	r3, [pc, #64]	; (800b16c <prvCheckTasksWaitingTermination+0x50>)
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	68db      	ldr	r3, [r3, #12]
 800b12e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	3304      	adds	r3, #4
 800b134:	4618      	mov	r0, r3
 800b136:	f7fe fa73 	bl	8009620 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b13a:	4b0d      	ldr	r3, [pc, #52]	; (800b170 <prvCheckTasksWaitingTermination+0x54>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	3b01      	subs	r3, #1
 800b140:	4a0b      	ldr	r2, [pc, #44]	; (800b170 <prvCheckTasksWaitingTermination+0x54>)
 800b142:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b144:	4b0b      	ldr	r3, [pc, #44]	; (800b174 <prvCheckTasksWaitingTermination+0x58>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	3b01      	subs	r3, #1
 800b14a:	4a0a      	ldr	r2, [pc, #40]	; (800b174 <prvCheckTasksWaitingTermination+0x58>)
 800b14c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b14e:	f000 fef1 	bl	800bf34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 f810 	bl	800b178 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b158:	4b06      	ldr	r3, [pc, #24]	; (800b174 <prvCheckTasksWaitingTermination+0x58>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d1e1      	bne.n	800b124 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b160:	bf00      	nop
 800b162:	bf00      	nop
 800b164:	3708      	adds	r7, #8
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	20001e3c 	.word	0x20001e3c
 800b170:	20001e68 	.word	0x20001e68
 800b174:	20001e50 	.word	0x20001e50

0800b178 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	3354      	adds	r3, #84	; 0x54
 800b184:	4618      	mov	r0, r3
 800b186:	f001 fc87 	bl	800ca98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b190:	2b00      	cmp	r3, #0
 800b192:	d108      	bne.n	800b1a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b198:	4618      	mov	r0, r3
 800b19a:	f001 f889 	bl	800c2b0 <vPortFree>
				vPortFree( pxTCB );
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f001 f886 	bl	800c2b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b1a4:	e018      	b.n	800b1d8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d103      	bne.n	800b1b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f001 f87d 	bl	800c2b0 <vPortFree>
	}
 800b1b6:	e00f      	b.n	800b1d8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b1be:	2b02      	cmp	r3, #2
 800b1c0:	d00a      	beq.n	800b1d8 <prvDeleteTCB+0x60>
	__asm volatile
 800b1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c6:	f383 8811 	msr	BASEPRI, r3
 800b1ca:	f3bf 8f6f 	isb	sy
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	60fb      	str	r3, [r7, #12]
}
 800b1d4:	bf00      	nop
 800b1d6:	e7fe      	b.n	800b1d6 <prvDeleteTCB+0x5e>
	}
 800b1d8:	bf00      	nop
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1e6:	4b0c      	ldr	r3, [pc, #48]	; (800b218 <prvResetNextTaskUnblockTime+0x38>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d104      	bne.n	800b1fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b1f0:	4b0a      	ldr	r3, [pc, #40]	; (800b21c <prvResetNextTaskUnblockTime+0x3c>)
 800b1f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b1f8:	e008      	b.n	800b20c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1fa:	4b07      	ldr	r3, [pc, #28]	; (800b218 <prvResetNextTaskUnblockTime+0x38>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	68db      	ldr	r3, [r3, #12]
 800b200:	68db      	ldr	r3, [r3, #12]
 800b202:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	4a04      	ldr	r2, [pc, #16]	; (800b21c <prvResetNextTaskUnblockTime+0x3c>)
 800b20a:	6013      	str	r3, [r2, #0]
}
 800b20c:	bf00      	nop
 800b20e:	370c      	adds	r7, #12
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr
 800b218:	20001e20 	.word	0x20001e20
 800b21c:	20001e88 	.word	0x20001e88

0800b220 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b226:	4b0b      	ldr	r3, [pc, #44]	; (800b254 <xTaskGetSchedulerState+0x34>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d102      	bne.n	800b234 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b22e:	2301      	movs	r3, #1
 800b230:	607b      	str	r3, [r7, #4]
 800b232:	e008      	b.n	800b246 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b234:	4b08      	ldr	r3, [pc, #32]	; (800b258 <xTaskGetSchedulerState+0x38>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d102      	bne.n	800b242 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b23c:	2302      	movs	r3, #2
 800b23e:	607b      	str	r3, [r7, #4]
 800b240:	e001      	b.n	800b246 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b242:	2300      	movs	r3, #0
 800b244:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b246:	687b      	ldr	r3, [r7, #4]
	}
 800b248:	4618      	mov	r0, r3
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr
 800b254:	20001e74 	.word	0x20001e74
 800b258:	20001e90 	.word	0x20001e90

0800b25c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b268:	2300      	movs	r3, #0
 800b26a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d051      	beq.n	800b316 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b276:	4b2a      	ldr	r3, [pc, #168]	; (800b320 <xTaskPriorityInherit+0xc4>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d241      	bcs.n	800b304 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	699b      	ldr	r3, [r3, #24]
 800b284:	2b00      	cmp	r3, #0
 800b286:	db06      	blt.n	800b296 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b288:	4b25      	ldr	r3, [pc, #148]	; (800b320 <xTaskPriorityInherit+0xc4>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b28e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	6959      	ldr	r1, [r3, #20]
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b29e:	4613      	mov	r3, r2
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	4413      	add	r3, r2
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	4a1f      	ldr	r2, [pc, #124]	; (800b324 <xTaskPriorityInherit+0xc8>)
 800b2a8:	4413      	add	r3, r2
 800b2aa:	4299      	cmp	r1, r3
 800b2ac:	d122      	bne.n	800b2f4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	3304      	adds	r3, #4
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7fe f9b4 	bl	8009620 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b2b8:	4b19      	ldr	r3, [pc, #100]	; (800b320 <xTaskPriorityInherit+0xc4>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c6:	4b18      	ldr	r3, [pc, #96]	; (800b328 <xTaskPriorityInherit+0xcc>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d903      	bls.n	800b2d6 <xTaskPriorityInherit+0x7a>
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d2:	4a15      	ldr	r2, [pc, #84]	; (800b328 <xTaskPriorityInherit+0xcc>)
 800b2d4:	6013      	str	r3, [r2, #0]
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2da:	4613      	mov	r3, r2
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	4413      	add	r3, r2
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	4a10      	ldr	r2, [pc, #64]	; (800b324 <xTaskPriorityInherit+0xc8>)
 800b2e4:	441a      	add	r2, r3
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	3304      	adds	r3, #4
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	4610      	mov	r0, r2
 800b2ee:	f7fe f93a 	bl	8009566 <vListInsertEnd>
 800b2f2:	e004      	b.n	800b2fe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b2f4:	4b0a      	ldr	r3, [pc, #40]	; (800b320 <xTaskPriorityInherit+0xc4>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b2fe:	2301      	movs	r3, #1
 800b300:	60fb      	str	r3, [r7, #12]
 800b302:	e008      	b.n	800b316 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b308:	4b05      	ldr	r3, [pc, #20]	; (800b320 <xTaskPriorityInherit+0xc4>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b30e:	429a      	cmp	r2, r3
 800b310:	d201      	bcs.n	800b316 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b312:	2301      	movs	r3, #1
 800b314:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b316:	68fb      	ldr	r3, [r7, #12]
	}
 800b318:	4618      	mov	r0, r3
 800b31a:	3710      	adds	r7, #16
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	20001994 	.word	0x20001994
 800b324:	20001998 	.word	0x20001998
 800b328:	20001e70 	.word	0x20001e70

0800b32c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b086      	sub	sp, #24
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b338:	2300      	movs	r3, #0
 800b33a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d056      	beq.n	800b3f0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b342:	4b2e      	ldr	r3, [pc, #184]	; (800b3fc <xTaskPriorityDisinherit+0xd0>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	693a      	ldr	r2, [r7, #16]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d00a      	beq.n	800b362 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b350:	f383 8811 	msr	BASEPRI, r3
 800b354:	f3bf 8f6f 	isb	sy
 800b358:	f3bf 8f4f 	dsb	sy
 800b35c:	60fb      	str	r3, [r7, #12]
}
 800b35e:	bf00      	nop
 800b360:	e7fe      	b.n	800b360 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b366:	2b00      	cmp	r3, #0
 800b368:	d10a      	bne.n	800b380 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36e:	f383 8811 	msr	BASEPRI, r3
 800b372:	f3bf 8f6f 	isb	sy
 800b376:	f3bf 8f4f 	dsb	sy
 800b37a:	60bb      	str	r3, [r7, #8]
}
 800b37c:	bf00      	nop
 800b37e:	e7fe      	b.n	800b37e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b384:	1e5a      	subs	r2, r3, #1
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b392:	429a      	cmp	r2, r3
 800b394:	d02c      	beq.n	800b3f0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d128      	bne.n	800b3f0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	3304      	adds	r3, #4
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7fe f93c 	bl	8009620 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3c0:	4b0f      	ldr	r3, [pc, #60]	; (800b400 <xTaskPriorityDisinherit+0xd4>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d903      	bls.n	800b3d0 <xTaskPriorityDisinherit+0xa4>
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3cc:	4a0c      	ldr	r2, [pc, #48]	; (800b400 <xTaskPriorityDisinherit+0xd4>)
 800b3ce:	6013      	str	r3, [r2, #0]
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d4:	4613      	mov	r3, r2
 800b3d6:	009b      	lsls	r3, r3, #2
 800b3d8:	4413      	add	r3, r2
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	4a09      	ldr	r2, [pc, #36]	; (800b404 <xTaskPriorityDisinherit+0xd8>)
 800b3de:	441a      	add	r2, r3
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	3304      	adds	r3, #4
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	4610      	mov	r0, r2
 800b3e8:	f7fe f8bd 	bl	8009566 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b3f0:	697b      	ldr	r3, [r7, #20]
	}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3718      	adds	r7, #24
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	20001994 	.word	0x20001994
 800b400:	20001e70 	.word	0x20001e70
 800b404:	20001998 	.word	0x20001998

0800b408 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b088      	sub	sp, #32
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b416:	2301      	movs	r3, #1
 800b418:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d06a      	beq.n	800b4f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b420:	69bb      	ldr	r3, [r7, #24]
 800b422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b424:	2b00      	cmp	r3, #0
 800b426:	d10a      	bne.n	800b43e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b42c:	f383 8811 	msr	BASEPRI, r3
 800b430:	f3bf 8f6f 	isb	sy
 800b434:	f3bf 8f4f 	dsb	sy
 800b438:	60fb      	str	r3, [r7, #12]
}
 800b43a:	bf00      	nop
 800b43c:	e7fe      	b.n	800b43c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b43e:	69bb      	ldr	r3, [r7, #24]
 800b440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b442:	683a      	ldr	r2, [r7, #0]
 800b444:	429a      	cmp	r2, r3
 800b446:	d902      	bls.n	800b44e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	61fb      	str	r3, [r7, #28]
 800b44c:	e002      	b.n	800b454 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b44e:	69bb      	ldr	r3, [r7, #24]
 800b450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b452:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b458:	69fa      	ldr	r2, [r7, #28]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d04b      	beq.n	800b4f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b45e:	69bb      	ldr	r3, [r7, #24]
 800b460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b462:	697a      	ldr	r2, [r7, #20]
 800b464:	429a      	cmp	r2, r3
 800b466:	d146      	bne.n	800b4f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b468:	4b25      	ldr	r3, [pc, #148]	; (800b500 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	69ba      	ldr	r2, [r7, #24]
 800b46e:	429a      	cmp	r2, r3
 800b470:	d10a      	bne.n	800b488 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b476:	f383 8811 	msr	BASEPRI, r3
 800b47a:	f3bf 8f6f 	isb	sy
 800b47e:	f3bf 8f4f 	dsb	sy
 800b482:	60bb      	str	r3, [r7, #8]
}
 800b484:	bf00      	nop
 800b486:	e7fe      	b.n	800b486 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b488:	69bb      	ldr	r3, [r7, #24]
 800b48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b48c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	69fa      	ldr	r2, [r7, #28]
 800b492:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b494:	69bb      	ldr	r3, [r7, #24]
 800b496:	699b      	ldr	r3, [r3, #24]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	db04      	blt.n	800b4a6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b49c:	69fb      	ldr	r3, [r7, #28]
 800b49e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b4a2:	69bb      	ldr	r3, [r7, #24]
 800b4a4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	6959      	ldr	r1, [r3, #20]
 800b4aa:	693a      	ldr	r2, [r7, #16]
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	4413      	add	r3, r2
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	4a13      	ldr	r2, [pc, #76]	; (800b504 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b4b6:	4413      	add	r3, r2
 800b4b8:	4299      	cmp	r1, r3
 800b4ba:	d11c      	bne.n	800b4f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4bc:	69bb      	ldr	r3, [r7, #24]
 800b4be:	3304      	adds	r3, #4
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f7fe f8ad 	bl	8009620 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b4c6:	69bb      	ldr	r3, [r7, #24]
 800b4c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ca:	4b0f      	ldr	r3, [pc, #60]	; (800b508 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	429a      	cmp	r2, r3
 800b4d0:	d903      	bls.n	800b4da <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b4d2:	69bb      	ldr	r3, [r7, #24]
 800b4d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d6:	4a0c      	ldr	r2, [pc, #48]	; (800b508 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b4d8:	6013      	str	r3, [r2, #0]
 800b4da:	69bb      	ldr	r3, [r7, #24]
 800b4dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4de:	4613      	mov	r3, r2
 800b4e0:	009b      	lsls	r3, r3, #2
 800b4e2:	4413      	add	r3, r2
 800b4e4:	009b      	lsls	r3, r3, #2
 800b4e6:	4a07      	ldr	r2, [pc, #28]	; (800b504 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b4e8:	441a      	add	r2, r3
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	3304      	adds	r3, #4
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	4610      	mov	r0, r2
 800b4f2:	f7fe f838 	bl	8009566 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b4f6:	bf00      	nop
 800b4f8:	3720      	adds	r7, #32
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	20001994 	.word	0x20001994
 800b504:	20001998 	.word	0x20001998
 800b508:	20001e70 	.word	0x20001e70

0800b50c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b50c:	b480      	push	{r7}
 800b50e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b510:	4b07      	ldr	r3, [pc, #28]	; (800b530 <pvTaskIncrementMutexHeldCount+0x24>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d004      	beq.n	800b522 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b518:	4b05      	ldr	r3, [pc, #20]	; (800b530 <pvTaskIncrementMutexHeldCount+0x24>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b51e:	3201      	adds	r2, #1
 800b520:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b522:	4b03      	ldr	r3, [pc, #12]	; (800b530 <pvTaskIncrementMutexHeldCount+0x24>)
 800b524:	681b      	ldr	r3, [r3, #0]
	}
 800b526:	4618      	mov	r0, r3
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr
 800b530:	20001994 	.word	0x20001994

0800b534 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b53e:	4b21      	ldr	r3, [pc, #132]	; (800b5c4 <prvAddCurrentTaskToDelayedList+0x90>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b544:	4b20      	ldr	r3, [pc, #128]	; (800b5c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	3304      	adds	r3, #4
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7fe f868 	bl	8009620 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b556:	d10a      	bne.n	800b56e <prvAddCurrentTaskToDelayedList+0x3a>
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d007      	beq.n	800b56e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b55e:	4b1a      	ldr	r3, [pc, #104]	; (800b5c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	3304      	adds	r3, #4
 800b564:	4619      	mov	r1, r3
 800b566:	4819      	ldr	r0, [pc, #100]	; (800b5cc <prvAddCurrentTaskToDelayedList+0x98>)
 800b568:	f7fd fffd 	bl	8009566 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b56c:	e026      	b.n	800b5bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b56e:	68fa      	ldr	r2, [r7, #12]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4413      	add	r3, r2
 800b574:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b576:	4b14      	ldr	r3, [pc, #80]	; (800b5c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	68ba      	ldr	r2, [r7, #8]
 800b57c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	429a      	cmp	r2, r3
 800b584:	d209      	bcs.n	800b59a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b586:	4b12      	ldr	r3, [pc, #72]	; (800b5d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	4b0f      	ldr	r3, [pc, #60]	; (800b5c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	3304      	adds	r3, #4
 800b590:	4619      	mov	r1, r3
 800b592:	4610      	mov	r0, r2
 800b594:	f7fe f80b 	bl	80095ae <vListInsert>
}
 800b598:	e010      	b.n	800b5bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b59a:	4b0e      	ldr	r3, [pc, #56]	; (800b5d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	4b0a      	ldr	r3, [pc, #40]	; (800b5c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	3304      	adds	r3, #4
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	4610      	mov	r0, r2
 800b5a8:	f7fe f801 	bl	80095ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b5ac:	4b0a      	ldr	r3, [pc, #40]	; (800b5d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	68ba      	ldr	r2, [r7, #8]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d202      	bcs.n	800b5bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b5b6:	4a08      	ldr	r2, [pc, #32]	; (800b5d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	6013      	str	r3, [r2, #0]
}
 800b5bc:	bf00      	nop
 800b5be:	3710      	adds	r7, #16
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	20001e6c 	.word	0x20001e6c
 800b5c8:	20001994 	.word	0x20001994
 800b5cc:	20001e54 	.word	0x20001e54
 800b5d0:	20001e24 	.word	0x20001e24
 800b5d4:	20001e20 	.word	0x20001e20
 800b5d8:	20001e88 	.word	0x20001e88

0800b5dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b08a      	sub	sp, #40	; 0x28
 800b5e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b5e6:	f000 fb07 	bl	800bbf8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b5ea:	4b1c      	ldr	r3, [pc, #112]	; (800b65c <xTimerCreateTimerTask+0x80>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d021      	beq.n	800b636 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b5fa:	1d3a      	adds	r2, r7, #4
 800b5fc:	f107 0108 	add.w	r1, r7, #8
 800b600:	f107 030c 	add.w	r3, r7, #12
 800b604:	4618      	mov	r0, r3
 800b606:	f7fd ff67 	bl	80094d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b60a:	6879      	ldr	r1, [r7, #4]
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	68fa      	ldr	r2, [r7, #12]
 800b610:	9202      	str	r2, [sp, #8]
 800b612:	9301      	str	r3, [sp, #4]
 800b614:	2302      	movs	r3, #2
 800b616:	9300      	str	r3, [sp, #0]
 800b618:	2300      	movs	r3, #0
 800b61a:	460a      	mov	r2, r1
 800b61c:	4910      	ldr	r1, [pc, #64]	; (800b660 <xTimerCreateTimerTask+0x84>)
 800b61e:	4811      	ldr	r0, [pc, #68]	; (800b664 <xTimerCreateTimerTask+0x88>)
 800b620:	f7fe ffb6 	bl	800a590 <xTaskCreateStatic>
 800b624:	4603      	mov	r3, r0
 800b626:	4a10      	ldr	r2, [pc, #64]	; (800b668 <xTimerCreateTimerTask+0x8c>)
 800b628:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b62a:	4b0f      	ldr	r3, [pc, #60]	; (800b668 <xTimerCreateTimerTask+0x8c>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d001      	beq.n	800b636 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b632:	2301      	movs	r3, #1
 800b634:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d10a      	bne.n	800b652 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b640:	f383 8811 	msr	BASEPRI, r3
 800b644:	f3bf 8f6f 	isb	sy
 800b648:	f3bf 8f4f 	dsb	sy
 800b64c:	613b      	str	r3, [r7, #16]
}
 800b64e:	bf00      	nop
 800b650:	e7fe      	b.n	800b650 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b652:	697b      	ldr	r3, [r7, #20]
}
 800b654:	4618      	mov	r0, r3
 800b656:	3718      	adds	r7, #24
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	20001ec4 	.word	0x20001ec4
 800b660:	0800e34c 	.word	0x0800e34c
 800b664:	0800b7a1 	.word	0x0800b7a1
 800b668:	20001ec8 	.word	0x20001ec8

0800b66c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b08a      	sub	sp, #40	; 0x28
 800b670:	af00      	add	r7, sp, #0
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	60b9      	str	r1, [r7, #8]
 800b676:	607a      	str	r2, [r7, #4]
 800b678:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b67a:	2300      	movs	r3, #0
 800b67c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d10a      	bne.n	800b69a <xTimerGenericCommand+0x2e>
	__asm volatile
 800b684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b688:	f383 8811 	msr	BASEPRI, r3
 800b68c:	f3bf 8f6f 	isb	sy
 800b690:	f3bf 8f4f 	dsb	sy
 800b694:	623b      	str	r3, [r7, #32]
}
 800b696:	bf00      	nop
 800b698:	e7fe      	b.n	800b698 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b69a:	4b1a      	ldr	r3, [pc, #104]	; (800b704 <xTimerGenericCommand+0x98>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d02a      	beq.n	800b6f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	2b05      	cmp	r3, #5
 800b6b2:	dc18      	bgt.n	800b6e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b6b4:	f7ff fdb4 	bl	800b220 <xTaskGetSchedulerState>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2b02      	cmp	r3, #2
 800b6bc:	d109      	bne.n	800b6d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b6be:	4b11      	ldr	r3, [pc, #68]	; (800b704 <xTimerGenericCommand+0x98>)
 800b6c0:	6818      	ldr	r0, [r3, #0]
 800b6c2:	f107 0110 	add.w	r1, r7, #16
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6ca:	f7fe f97b 	bl	80099c4 <xQueueGenericSend>
 800b6ce:	6278      	str	r0, [r7, #36]	; 0x24
 800b6d0:	e012      	b.n	800b6f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b6d2:	4b0c      	ldr	r3, [pc, #48]	; (800b704 <xTimerGenericCommand+0x98>)
 800b6d4:	6818      	ldr	r0, [r3, #0]
 800b6d6:	f107 0110 	add.w	r1, r7, #16
 800b6da:	2300      	movs	r3, #0
 800b6dc:	2200      	movs	r2, #0
 800b6de:	f7fe f971 	bl	80099c4 <xQueueGenericSend>
 800b6e2:	6278      	str	r0, [r7, #36]	; 0x24
 800b6e4:	e008      	b.n	800b6f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b6e6:	4b07      	ldr	r3, [pc, #28]	; (800b704 <xTimerGenericCommand+0x98>)
 800b6e8:	6818      	ldr	r0, [r3, #0]
 800b6ea:	f107 0110 	add.w	r1, r7, #16
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	683a      	ldr	r2, [r7, #0]
 800b6f2:	f7fe fa65 	bl	8009bc0 <xQueueGenericSendFromISR>
 800b6f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3728      	adds	r7, #40	; 0x28
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	20001ec4 	.word	0x20001ec4

0800b708 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b088      	sub	sp, #32
 800b70c:	af02      	add	r7, sp, #8
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b712:	4b22      	ldr	r3, [pc, #136]	; (800b79c <prvProcessExpiredTimer+0x94>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	68db      	ldr	r3, [r3, #12]
 800b71a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	3304      	adds	r3, #4
 800b720:	4618      	mov	r0, r3
 800b722:	f7fd ff7d 	bl	8009620 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b72c:	f003 0304 	and.w	r3, r3, #4
 800b730:	2b00      	cmp	r3, #0
 800b732:	d022      	beq.n	800b77a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	699a      	ldr	r2, [r3, #24]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	18d1      	adds	r1, r2, r3
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	683a      	ldr	r2, [r7, #0]
 800b740:	6978      	ldr	r0, [r7, #20]
 800b742:	f000 f8d1 	bl	800b8e8 <prvInsertTimerInActiveList>
 800b746:	4603      	mov	r3, r0
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d01f      	beq.n	800b78c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b74c:	2300      	movs	r3, #0
 800b74e:	9300      	str	r3, [sp, #0]
 800b750:	2300      	movs	r3, #0
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	2100      	movs	r1, #0
 800b756:	6978      	ldr	r0, [r7, #20]
 800b758:	f7ff ff88 	bl	800b66c <xTimerGenericCommand>
 800b75c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d113      	bne.n	800b78c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b768:	f383 8811 	msr	BASEPRI, r3
 800b76c:	f3bf 8f6f 	isb	sy
 800b770:	f3bf 8f4f 	dsb	sy
 800b774:	60fb      	str	r3, [r7, #12]
}
 800b776:	bf00      	nop
 800b778:	e7fe      	b.n	800b778 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b780:	f023 0301 	bic.w	r3, r3, #1
 800b784:	b2da      	uxtb	r2, r3
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	6a1b      	ldr	r3, [r3, #32]
 800b790:	6978      	ldr	r0, [r7, #20]
 800b792:	4798      	blx	r3
}
 800b794:	bf00      	nop
 800b796:	3718      	adds	r7, #24
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	20001ebc 	.word	0x20001ebc

0800b7a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b7a8:	f107 0308 	add.w	r3, r7, #8
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f000 f857 	bl	800b860 <prvGetNextExpireTime>
 800b7b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	68f8      	ldr	r0, [r7, #12]
 800b7ba:	f000 f803 	bl	800b7c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b7be:	f000 f8d5 	bl	800b96c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b7c2:	e7f1      	b.n	800b7a8 <prvTimerTask+0x8>

0800b7c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b084      	sub	sp, #16
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b7ce:	f7ff f93b 	bl	800aa48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b7d2:	f107 0308 	add.w	r3, r7, #8
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f000 f866 	bl	800b8a8 <prvSampleTimeNow>
 800b7dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d130      	bne.n	800b846 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d10a      	bne.n	800b800 <prvProcessTimerOrBlockTask+0x3c>
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d806      	bhi.n	800b800 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b7f2:	f7ff f937 	bl	800aa64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b7f6:	68f9      	ldr	r1, [r7, #12]
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f7ff ff85 	bl	800b708 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b7fe:	e024      	b.n	800b84a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d008      	beq.n	800b818 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b806:	4b13      	ldr	r3, [pc, #76]	; (800b854 <prvProcessTimerOrBlockTask+0x90>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d101      	bne.n	800b814 <prvProcessTimerOrBlockTask+0x50>
 800b810:	2301      	movs	r3, #1
 800b812:	e000      	b.n	800b816 <prvProcessTimerOrBlockTask+0x52>
 800b814:	2300      	movs	r3, #0
 800b816:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b818:	4b0f      	ldr	r3, [pc, #60]	; (800b858 <prvProcessTimerOrBlockTask+0x94>)
 800b81a:	6818      	ldr	r0, [r3, #0]
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	1ad3      	subs	r3, r2, r3
 800b822:	683a      	ldr	r2, [r7, #0]
 800b824:	4619      	mov	r1, r3
 800b826:	f7fe fe7f 	bl	800a528 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b82a:	f7ff f91b 	bl	800aa64 <xTaskResumeAll>
 800b82e:	4603      	mov	r3, r0
 800b830:	2b00      	cmp	r3, #0
 800b832:	d10a      	bne.n	800b84a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b834:	4b09      	ldr	r3, [pc, #36]	; (800b85c <prvProcessTimerOrBlockTask+0x98>)
 800b836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b83a:	601a      	str	r2, [r3, #0]
 800b83c:	f3bf 8f4f 	dsb	sy
 800b840:	f3bf 8f6f 	isb	sy
}
 800b844:	e001      	b.n	800b84a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b846:	f7ff f90d 	bl	800aa64 <xTaskResumeAll>
}
 800b84a:	bf00      	nop
 800b84c:	3710      	adds	r7, #16
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	20001ec0 	.word	0x20001ec0
 800b858:	20001ec4 	.word	0x20001ec4
 800b85c:	e000ed04 	.word	0xe000ed04

0800b860 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b860:	b480      	push	{r7}
 800b862:	b085      	sub	sp, #20
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b868:	4b0e      	ldr	r3, [pc, #56]	; (800b8a4 <prvGetNextExpireTime+0x44>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d101      	bne.n	800b876 <prvGetNextExpireTime+0x16>
 800b872:	2201      	movs	r2, #1
 800b874:	e000      	b.n	800b878 <prvGetNextExpireTime+0x18>
 800b876:	2200      	movs	r2, #0
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d105      	bne.n	800b890 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b884:	4b07      	ldr	r3, [pc, #28]	; (800b8a4 <prvGetNextExpireTime+0x44>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	68db      	ldr	r3, [r3, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	60fb      	str	r3, [r7, #12]
 800b88e:	e001      	b.n	800b894 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b890:	2300      	movs	r3, #0
 800b892:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b894:	68fb      	ldr	r3, [r7, #12]
}
 800b896:	4618      	mov	r0, r3
 800b898:	3714      	adds	r7, #20
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	20001ebc 	.word	0x20001ebc

0800b8a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b084      	sub	sp, #16
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b8b0:	f7ff f976 	bl	800aba0 <xTaskGetTickCount>
 800b8b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b8b6:	4b0b      	ldr	r3, [pc, #44]	; (800b8e4 <prvSampleTimeNow+0x3c>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	68fa      	ldr	r2, [r7, #12]
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d205      	bcs.n	800b8cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b8c0:	f000 f936 	bl	800bb30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	601a      	str	r2, [r3, #0]
 800b8ca:	e002      	b.n	800b8d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b8d2:	4a04      	ldr	r2, [pc, #16]	; (800b8e4 <prvSampleTimeNow+0x3c>)
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3710      	adds	r7, #16
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	20001ecc 	.word	0x20001ecc

0800b8e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b086      	sub	sp, #24
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	607a      	str	r2, [r7, #4]
 800b8f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	68ba      	ldr	r2, [r7, #8]
 800b8fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	68fa      	ldr	r2, [r7, #12]
 800b904:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b906:	68ba      	ldr	r2, [r7, #8]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d812      	bhi.n	800b934 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	1ad2      	subs	r2, r2, r3
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	699b      	ldr	r3, [r3, #24]
 800b918:	429a      	cmp	r2, r3
 800b91a:	d302      	bcc.n	800b922 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b91c:	2301      	movs	r3, #1
 800b91e:	617b      	str	r3, [r7, #20]
 800b920:	e01b      	b.n	800b95a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b922:	4b10      	ldr	r3, [pc, #64]	; (800b964 <prvInsertTimerInActiveList+0x7c>)
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	3304      	adds	r3, #4
 800b92a:	4619      	mov	r1, r3
 800b92c:	4610      	mov	r0, r2
 800b92e:	f7fd fe3e 	bl	80095ae <vListInsert>
 800b932:	e012      	b.n	800b95a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d206      	bcs.n	800b94a <prvInsertTimerInActiveList+0x62>
 800b93c:	68ba      	ldr	r2, [r7, #8]
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	429a      	cmp	r2, r3
 800b942:	d302      	bcc.n	800b94a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b944:	2301      	movs	r3, #1
 800b946:	617b      	str	r3, [r7, #20]
 800b948:	e007      	b.n	800b95a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b94a:	4b07      	ldr	r3, [pc, #28]	; (800b968 <prvInsertTimerInActiveList+0x80>)
 800b94c:	681a      	ldr	r2, [r3, #0]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	3304      	adds	r3, #4
 800b952:	4619      	mov	r1, r3
 800b954:	4610      	mov	r0, r2
 800b956:	f7fd fe2a 	bl	80095ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b95a:	697b      	ldr	r3, [r7, #20]
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3718      	adds	r7, #24
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}
 800b964:	20001ec0 	.word	0x20001ec0
 800b968:	20001ebc 	.word	0x20001ebc

0800b96c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b08e      	sub	sp, #56	; 0x38
 800b970:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b972:	e0ca      	b.n	800bb0a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2b00      	cmp	r3, #0
 800b978:	da18      	bge.n	800b9ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b97a:	1d3b      	adds	r3, r7, #4
 800b97c:	3304      	adds	r3, #4
 800b97e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b982:	2b00      	cmp	r3, #0
 800b984:	d10a      	bne.n	800b99c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98a:	f383 8811 	msr	BASEPRI, r3
 800b98e:	f3bf 8f6f 	isb	sy
 800b992:	f3bf 8f4f 	dsb	sy
 800b996:	61fb      	str	r3, [r7, #28]
}
 800b998:	bf00      	nop
 800b99a:	e7fe      	b.n	800b99a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9a2:	6850      	ldr	r0, [r2, #4]
 800b9a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9a6:	6892      	ldr	r2, [r2, #8]
 800b9a8:	4611      	mov	r1, r2
 800b9aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	f2c0 80aa 	blt.w	800bb08 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ba:	695b      	ldr	r3, [r3, #20]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d004      	beq.n	800b9ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c2:	3304      	adds	r3, #4
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7fd fe2b 	bl	8009620 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b9ca:	463b      	mov	r3, r7
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7ff ff6b 	bl	800b8a8 <prvSampleTimeNow>
 800b9d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2b09      	cmp	r3, #9
 800b9d8:	f200 8097 	bhi.w	800bb0a <prvProcessReceivedCommands+0x19e>
 800b9dc:	a201      	add	r2, pc, #4	; (adr r2, 800b9e4 <prvProcessReceivedCommands+0x78>)
 800b9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9e2:	bf00      	nop
 800b9e4:	0800ba0d 	.word	0x0800ba0d
 800b9e8:	0800ba0d 	.word	0x0800ba0d
 800b9ec:	0800ba0d 	.word	0x0800ba0d
 800b9f0:	0800ba81 	.word	0x0800ba81
 800b9f4:	0800ba95 	.word	0x0800ba95
 800b9f8:	0800badf 	.word	0x0800badf
 800b9fc:	0800ba0d 	.word	0x0800ba0d
 800ba00:	0800ba0d 	.word	0x0800ba0d
 800ba04:	0800ba81 	.word	0x0800ba81
 800ba08:	0800ba95 	.word	0x0800ba95
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ba0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba12:	f043 0301 	orr.w	r3, r3, #1
 800ba16:	b2da      	uxtb	r2, r3
 800ba18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ba1e:	68ba      	ldr	r2, [r7, #8]
 800ba20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba22:	699b      	ldr	r3, [r3, #24]
 800ba24:	18d1      	adds	r1, r2, r3
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba2c:	f7ff ff5c 	bl	800b8e8 <prvInsertTimerInActiveList>
 800ba30:	4603      	mov	r3, r0
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d069      	beq.n	800bb0a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba38:	6a1b      	ldr	r3, [r3, #32]
 800ba3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba44:	f003 0304 	and.w	r3, r3, #4
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d05e      	beq.n	800bb0a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ba4c:	68ba      	ldr	r2, [r7, #8]
 800ba4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba50:	699b      	ldr	r3, [r3, #24]
 800ba52:	441a      	add	r2, r3
 800ba54:	2300      	movs	r3, #0
 800ba56:	9300      	str	r3, [sp, #0]
 800ba58:	2300      	movs	r3, #0
 800ba5a:	2100      	movs	r1, #0
 800ba5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba5e:	f7ff fe05 	bl	800b66c <xTimerGenericCommand>
 800ba62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ba64:	6a3b      	ldr	r3, [r7, #32]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d14f      	bne.n	800bb0a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ba6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba6e:	f383 8811 	msr	BASEPRI, r3
 800ba72:	f3bf 8f6f 	isb	sy
 800ba76:	f3bf 8f4f 	dsb	sy
 800ba7a:	61bb      	str	r3, [r7, #24]
}
 800ba7c:	bf00      	nop
 800ba7e:	e7fe      	b.n	800ba7e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba86:	f023 0301 	bic.w	r3, r3, #1
 800ba8a:	b2da      	uxtb	r2, r3
 800ba8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ba92:	e03a      	b.n	800bb0a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ba94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba9a:	f043 0301 	orr.w	r3, r3, #1
 800ba9e:	b2da      	uxtb	r2, r3
 800baa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800baa6:	68ba      	ldr	r2, [r7, #8]
 800baa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baaa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800baac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baae:	699b      	ldr	r3, [r3, #24]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d10a      	bne.n	800baca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab8:	f383 8811 	msr	BASEPRI, r3
 800babc:	f3bf 8f6f 	isb	sy
 800bac0:	f3bf 8f4f 	dsb	sy
 800bac4:	617b      	str	r3, [r7, #20]
}
 800bac6:	bf00      	nop
 800bac8:	e7fe      	b.n	800bac8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800baca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bacc:	699a      	ldr	r2, [r3, #24]
 800bace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad0:	18d1      	adds	r1, r2, r3
 800bad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bad8:	f7ff ff06 	bl	800b8e8 <prvInsertTimerInActiveList>
					break;
 800badc:	e015      	b.n	800bb0a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bae4:	f003 0302 	and.w	r3, r3, #2
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d103      	bne.n	800baf4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800baec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baee:	f000 fbdf 	bl	800c2b0 <vPortFree>
 800baf2:	e00a      	b.n	800bb0a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800baf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bafa:	f023 0301 	bic.w	r3, r3, #1
 800bafe:	b2da      	uxtb	r2, r3
 800bb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bb06:	e000      	b.n	800bb0a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bb08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb0a:	4b08      	ldr	r3, [pc, #32]	; (800bb2c <prvProcessReceivedCommands+0x1c0>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	1d39      	adds	r1, r7, #4
 800bb10:	2200      	movs	r2, #0
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7fe f97c 	bl	8009e10 <xQueueReceive>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	f47f af2a 	bne.w	800b974 <prvProcessReceivedCommands+0x8>
	}
}
 800bb20:	bf00      	nop
 800bb22:	bf00      	nop
 800bb24:	3730      	adds	r7, #48	; 0x30
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	20001ec4 	.word	0x20001ec4

0800bb30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b088      	sub	sp, #32
 800bb34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb36:	e048      	b.n	800bbca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb38:	4b2d      	ldr	r3, [pc, #180]	; (800bbf0 <prvSwitchTimerLists+0xc0>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	68db      	ldr	r3, [r3, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb42:	4b2b      	ldr	r3, [pc, #172]	; (800bbf0 <prvSwitchTimerLists+0xc0>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	68db      	ldr	r3, [r3, #12]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	3304      	adds	r3, #4
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7fd fd65 	bl	8009620 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	6a1b      	ldr	r3, [r3, #32]
 800bb5a:	68f8      	ldr	r0, [r7, #12]
 800bb5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb64:	f003 0304 	and.w	r3, r3, #4
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d02e      	beq.n	800bbca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	699b      	ldr	r3, [r3, #24]
 800bb70:	693a      	ldr	r2, [r7, #16]
 800bb72:	4413      	add	r3, r2
 800bb74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bb76:	68ba      	ldr	r2, [r7, #8]
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d90e      	bls.n	800bb9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	68ba      	ldr	r2, [r7, #8]
 800bb82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	68fa      	ldr	r2, [r7, #12]
 800bb88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb8a:	4b19      	ldr	r3, [pc, #100]	; (800bbf0 <prvSwitchTimerLists+0xc0>)
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	3304      	adds	r3, #4
 800bb92:	4619      	mov	r1, r3
 800bb94:	4610      	mov	r0, r2
 800bb96:	f7fd fd0a 	bl	80095ae <vListInsert>
 800bb9a:	e016      	b.n	800bbca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	9300      	str	r3, [sp, #0]
 800bba0:	2300      	movs	r3, #0
 800bba2:	693a      	ldr	r2, [r7, #16]
 800bba4:	2100      	movs	r1, #0
 800bba6:	68f8      	ldr	r0, [r7, #12]
 800bba8:	f7ff fd60 	bl	800b66c <xTimerGenericCommand>
 800bbac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d10a      	bne.n	800bbca <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb8:	f383 8811 	msr	BASEPRI, r3
 800bbbc:	f3bf 8f6f 	isb	sy
 800bbc0:	f3bf 8f4f 	dsb	sy
 800bbc4:	603b      	str	r3, [r7, #0]
}
 800bbc6:	bf00      	nop
 800bbc8:	e7fe      	b.n	800bbc8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bbca:	4b09      	ldr	r3, [pc, #36]	; (800bbf0 <prvSwitchTimerLists+0xc0>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d1b1      	bne.n	800bb38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bbd4:	4b06      	ldr	r3, [pc, #24]	; (800bbf0 <prvSwitchTimerLists+0xc0>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bbda:	4b06      	ldr	r3, [pc, #24]	; (800bbf4 <prvSwitchTimerLists+0xc4>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4a04      	ldr	r2, [pc, #16]	; (800bbf0 <prvSwitchTimerLists+0xc0>)
 800bbe0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bbe2:	4a04      	ldr	r2, [pc, #16]	; (800bbf4 <prvSwitchTimerLists+0xc4>)
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	6013      	str	r3, [r2, #0]
}
 800bbe8:	bf00      	nop
 800bbea:	3718      	adds	r7, #24
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	20001ebc 	.word	0x20001ebc
 800bbf4:	20001ec0 	.word	0x20001ec0

0800bbf8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bbfe:	f000 f969 	bl	800bed4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bc02:	4b15      	ldr	r3, [pc, #84]	; (800bc58 <prvCheckForValidListAndQueue+0x60>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d120      	bne.n	800bc4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bc0a:	4814      	ldr	r0, [pc, #80]	; (800bc5c <prvCheckForValidListAndQueue+0x64>)
 800bc0c:	f7fd fc7e 	bl	800950c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bc10:	4813      	ldr	r0, [pc, #76]	; (800bc60 <prvCheckForValidListAndQueue+0x68>)
 800bc12:	f7fd fc7b 	bl	800950c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bc16:	4b13      	ldr	r3, [pc, #76]	; (800bc64 <prvCheckForValidListAndQueue+0x6c>)
 800bc18:	4a10      	ldr	r2, [pc, #64]	; (800bc5c <prvCheckForValidListAndQueue+0x64>)
 800bc1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bc1c:	4b12      	ldr	r3, [pc, #72]	; (800bc68 <prvCheckForValidListAndQueue+0x70>)
 800bc1e:	4a10      	ldr	r2, [pc, #64]	; (800bc60 <prvCheckForValidListAndQueue+0x68>)
 800bc20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bc22:	2300      	movs	r3, #0
 800bc24:	9300      	str	r3, [sp, #0]
 800bc26:	4b11      	ldr	r3, [pc, #68]	; (800bc6c <prvCheckForValidListAndQueue+0x74>)
 800bc28:	4a11      	ldr	r2, [pc, #68]	; (800bc70 <prvCheckForValidListAndQueue+0x78>)
 800bc2a:	2110      	movs	r1, #16
 800bc2c:	200a      	movs	r0, #10
 800bc2e:	f7fd fd89 	bl	8009744 <xQueueGenericCreateStatic>
 800bc32:	4603      	mov	r3, r0
 800bc34:	4a08      	ldr	r2, [pc, #32]	; (800bc58 <prvCheckForValidListAndQueue+0x60>)
 800bc36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bc38:	4b07      	ldr	r3, [pc, #28]	; (800bc58 <prvCheckForValidListAndQueue+0x60>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d005      	beq.n	800bc4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bc40:	4b05      	ldr	r3, [pc, #20]	; (800bc58 <prvCheckForValidListAndQueue+0x60>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	490b      	ldr	r1, [pc, #44]	; (800bc74 <prvCheckForValidListAndQueue+0x7c>)
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fe fc1a 	bl	800a480 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc4c:	f000 f972 	bl	800bf34 <vPortExitCritical>
}
 800bc50:	bf00      	nop
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	20001ec4 	.word	0x20001ec4
 800bc5c:	20001e94 	.word	0x20001e94
 800bc60:	20001ea8 	.word	0x20001ea8
 800bc64:	20001ebc 	.word	0x20001ebc
 800bc68:	20001ec0 	.word	0x20001ec0
 800bc6c:	20001f70 	.word	0x20001f70
 800bc70:	20001ed0 	.word	0x20001ed0
 800bc74:	0800e354 	.word	0x0800e354

0800bc78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b085      	sub	sp, #20
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	3b04      	subs	r3, #4
 800bc88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bc90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	3b04      	subs	r3, #4
 800bc96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	f023 0201 	bic.w	r2, r3, #1
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	3b04      	subs	r3, #4
 800bca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bca8:	4a0c      	ldr	r2, [pc, #48]	; (800bcdc <pxPortInitialiseStack+0x64>)
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	3b14      	subs	r3, #20
 800bcb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	3b04      	subs	r3, #4
 800bcbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f06f 0202 	mvn.w	r2, #2
 800bcc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	3b20      	subs	r3, #32
 800bccc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bcce:	68fb      	ldr	r3, [r7, #12]
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3714      	adds	r7, #20
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr
 800bcdc:	0800bce1 	.word	0x0800bce1

0800bce0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bce0:	b480      	push	{r7}
 800bce2:	b085      	sub	sp, #20
 800bce4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bce6:	2300      	movs	r3, #0
 800bce8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bcea:	4b12      	ldr	r3, [pc, #72]	; (800bd34 <prvTaskExitError+0x54>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcf2:	d00a      	beq.n	800bd0a <prvTaskExitError+0x2a>
	__asm volatile
 800bcf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf8:	f383 8811 	msr	BASEPRI, r3
 800bcfc:	f3bf 8f6f 	isb	sy
 800bd00:	f3bf 8f4f 	dsb	sy
 800bd04:	60fb      	str	r3, [r7, #12]
}
 800bd06:	bf00      	nop
 800bd08:	e7fe      	b.n	800bd08 <prvTaskExitError+0x28>
	__asm volatile
 800bd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0e:	f383 8811 	msr	BASEPRI, r3
 800bd12:	f3bf 8f6f 	isb	sy
 800bd16:	f3bf 8f4f 	dsb	sy
 800bd1a:	60bb      	str	r3, [r7, #8]
}
 800bd1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bd1e:	bf00      	nop
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d0fc      	beq.n	800bd20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bd26:	bf00      	nop
 800bd28:	bf00      	nop
 800bd2a:	3714      	adds	r7, #20
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr
 800bd34:	2000000c 	.word	0x2000000c
	...

0800bd40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bd40:	4b07      	ldr	r3, [pc, #28]	; (800bd60 <pxCurrentTCBConst2>)
 800bd42:	6819      	ldr	r1, [r3, #0]
 800bd44:	6808      	ldr	r0, [r1, #0]
 800bd46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd4a:	f380 8809 	msr	PSP, r0
 800bd4e:	f3bf 8f6f 	isb	sy
 800bd52:	f04f 0000 	mov.w	r0, #0
 800bd56:	f380 8811 	msr	BASEPRI, r0
 800bd5a:	4770      	bx	lr
 800bd5c:	f3af 8000 	nop.w

0800bd60 <pxCurrentTCBConst2>:
 800bd60:	20001994 	.word	0x20001994
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bd64:	bf00      	nop
 800bd66:	bf00      	nop

0800bd68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bd68:	4808      	ldr	r0, [pc, #32]	; (800bd8c <prvPortStartFirstTask+0x24>)
 800bd6a:	6800      	ldr	r0, [r0, #0]
 800bd6c:	6800      	ldr	r0, [r0, #0]
 800bd6e:	f380 8808 	msr	MSP, r0
 800bd72:	f04f 0000 	mov.w	r0, #0
 800bd76:	f380 8814 	msr	CONTROL, r0
 800bd7a:	b662      	cpsie	i
 800bd7c:	b661      	cpsie	f
 800bd7e:	f3bf 8f4f 	dsb	sy
 800bd82:	f3bf 8f6f 	isb	sy
 800bd86:	df00      	svc	0
 800bd88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bd8a:	bf00      	nop
 800bd8c:	e000ed08 	.word	0xe000ed08

0800bd90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b086      	sub	sp, #24
 800bd94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bd96:	4b46      	ldr	r3, [pc, #280]	; (800beb0 <xPortStartScheduler+0x120>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4a46      	ldr	r2, [pc, #280]	; (800beb4 <xPortStartScheduler+0x124>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d10a      	bne.n	800bdb6 <xPortStartScheduler+0x26>
	__asm volatile
 800bda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda4:	f383 8811 	msr	BASEPRI, r3
 800bda8:	f3bf 8f6f 	isb	sy
 800bdac:	f3bf 8f4f 	dsb	sy
 800bdb0:	613b      	str	r3, [r7, #16]
}
 800bdb2:	bf00      	nop
 800bdb4:	e7fe      	b.n	800bdb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bdb6:	4b3e      	ldr	r3, [pc, #248]	; (800beb0 <xPortStartScheduler+0x120>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4a3f      	ldr	r2, [pc, #252]	; (800beb8 <xPortStartScheduler+0x128>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d10a      	bne.n	800bdd6 <xPortStartScheduler+0x46>
	__asm volatile
 800bdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc4:	f383 8811 	msr	BASEPRI, r3
 800bdc8:	f3bf 8f6f 	isb	sy
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	60fb      	str	r3, [r7, #12]
}
 800bdd2:	bf00      	nop
 800bdd4:	e7fe      	b.n	800bdd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bdd6:	4b39      	ldr	r3, [pc, #228]	; (800bebc <xPortStartScheduler+0x12c>)
 800bdd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	b2db      	uxtb	r3, r3
 800bde0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	22ff      	movs	r2, #255	; 0xff
 800bde6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bdf0:	78fb      	ldrb	r3, [r7, #3]
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bdf8:	b2da      	uxtb	r2, r3
 800bdfa:	4b31      	ldr	r3, [pc, #196]	; (800bec0 <xPortStartScheduler+0x130>)
 800bdfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bdfe:	4b31      	ldr	r3, [pc, #196]	; (800bec4 <xPortStartScheduler+0x134>)
 800be00:	2207      	movs	r2, #7
 800be02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be04:	e009      	b.n	800be1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800be06:	4b2f      	ldr	r3, [pc, #188]	; (800bec4 <xPortStartScheduler+0x134>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	3b01      	subs	r3, #1
 800be0c:	4a2d      	ldr	r2, [pc, #180]	; (800bec4 <xPortStartScheduler+0x134>)
 800be0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800be10:	78fb      	ldrb	r3, [r7, #3]
 800be12:	b2db      	uxtb	r3, r3
 800be14:	005b      	lsls	r3, r3, #1
 800be16:	b2db      	uxtb	r3, r3
 800be18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be1a:	78fb      	ldrb	r3, [r7, #3]
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be22:	2b80      	cmp	r3, #128	; 0x80
 800be24:	d0ef      	beq.n	800be06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800be26:	4b27      	ldr	r3, [pc, #156]	; (800bec4 <xPortStartScheduler+0x134>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f1c3 0307 	rsb	r3, r3, #7
 800be2e:	2b04      	cmp	r3, #4
 800be30:	d00a      	beq.n	800be48 <xPortStartScheduler+0xb8>
	__asm volatile
 800be32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be36:	f383 8811 	msr	BASEPRI, r3
 800be3a:	f3bf 8f6f 	isb	sy
 800be3e:	f3bf 8f4f 	dsb	sy
 800be42:	60bb      	str	r3, [r7, #8]
}
 800be44:	bf00      	nop
 800be46:	e7fe      	b.n	800be46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800be48:	4b1e      	ldr	r3, [pc, #120]	; (800bec4 <xPortStartScheduler+0x134>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	021b      	lsls	r3, r3, #8
 800be4e:	4a1d      	ldr	r2, [pc, #116]	; (800bec4 <xPortStartScheduler+0x134>)
 800be50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800be52:	4b1c      	ldr	r3, [pc, #112]	; (800bec4 <xPortStartScheduler+0x134>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800be5a:	4a1a      	ldr	r2, [pc, #104]	; (800bec4 <xPortStartScheduler+0x134>)
 800be5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	b2da      	uxtb	r2, r3
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800be66:	4b18      	ldr	r3, [pc, #96]	; (800bec8 <xPortStartScheduler+0x138>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a17      	ldr	r2, [pc, #92]	; (800bec8 <xPortStartScheduler+0x138>)
 800be6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800be70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800be72:	4b15      	ldr	r3, [pc, #84]	; (800bec8 <xPortStartScheduler+0x138>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4a14      	ldr	r2, [pc, #80]	; (800bec8 <xPortStartScheduler+0x138>)
 800be78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800be7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800be7e:	f000 f8dd 	bl	800c03c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800be82:	4b12      	ldr	r3, [pc, #72]	; (800becc <xPortStartScheduler+0x13c>)
 800be84:	2200      	movs	r2, #0
 800be86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800be88:	f000 f8fc 	bl	800c084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800be8c:	4b10      	ldr	r3, [pc, #64]	; (800bed0 <xPortStartScheduler+0x140>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a0f      	ldr	r2, [pc, #60]	; (800bed0 <xPortStartScheduler+0x140>)
 800be92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800be96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800be98:	f7ff ff66 	bl	800bd68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800be9c:	f7fe ff4a 	bl	800ad34 <vTaskSwitchContext>
	prvTaskExitError();
 800bea0:	f7ff ff1e 	bl	800bce0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bea4:	2300      	movs	r3, #0
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3718      	adds	r7, #24
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	e000ed00 	.word	0xe000ed00
 800beb4:	410fc271 	.word	0x410fc271
 800beb8:	410fc270 	.word	0x410fc270
 800bebc:	e000e400 	.word	0xe000e400
 800bec0:	20001fc0 	.word	0x20001fc0
 800bec4:	20001fc4 	.word	0x20001fc4
 800bec8:	e000ed20 	.word	0xe000ed20
 800becc:	2000000c 	.word	0x2000000c
 800bed0:	e000ef34 	.word	0xe000ef34

0800bed4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bed4:	b480      	push	{r7}
 800bed6:	b083      	sub	sp, #12
 800bed8:	af00      	add	r7, sp, #0
	__asm volatile
 800beda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bede:	f383 8811 	msr	BASEPRI, r3
 800bee2:	f3bf 8f6f 	isb	sy
 800bee6:	f3bf 8f4f 	dsb	sy
 800beea:	607b      	str	r3, [r7, #4]
}
 800beec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800beee:	4b0f      	ldr	r3, [pc, #60]	; (800bf2c <vPortEnterCritical+0x58>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	3301      	adds	r3, #1
 800bef4:	4a0d      	ldr	r2, [pc, #52]	; (800bf2c <vPortEnterCritical+0x58>)
 800bef6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bef8:	4b0c      	ldr	r3, [pc, #48]	; (800bf2c <vPortEnterCritical+0x58>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	2b01      	cmp	r3, #1
 800befe:	d10f      	bne.n	800bf20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bf00:	4b0b      	ldr	r3, [pc, #44]	; (800bf30 <vPortEnterCritical+0x5c>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d00a      	beq.n	800bf20 <vPortEnterCritical+0x4c>
	__asm volatile
 800bf0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0e:	f383 8811 	msr	BASEPRI, r3
 800bf12:	f3bf 8f6f 	isb	sy
 800bf16:	f3bf 8f4f 	dsb	sy
 800bf1a:	603b      	str	r3, [r7, #0]
}
 800bf1c:	bf00      	nop
 800bf1e:	e7fe      	b.n	800bf1e <vPortEnterCritical+0x4a>
	}
}
 800bf20:	bf00      	nop
 800bf22:	370c      	adds	r7, #12
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr
 800bf2c:	2000000c 	.word	0x2000000c
 800bf30:	e000ed04 	.word	0xe000ed04

0800bf34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bf34:	b480      	push	{r7}
 800bf36:	b083      	sub	sp, #12
 800bf38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bf3a:	4b12      	ldr	r3, [pc, #72]	; (800bf84 <vPortExitCritical+0x50>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d10a      	bne.n	800bf58 <vPortExitCritical+0x24>
	__asm volatile
 800bf42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf46:	f383 8811 	msr	BASEPRI, r3
 800bf4a:	f3bf 8f6f 	isb	sy
 800bf4e:	f3bf 8f4f 	dsb	sy
 800bf52:	607b      	str	r3, [r7, #4]
}
 800bf54:	bf00      	nop
 800bf56:	e7fe      	b.n	800bf56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bf58:	4b0a      	ldr	r3, [pc, #40]	; (800bf84 <vPortExitCritical+0x50>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	3b01      	subs	r3, #1
 800bf5e:	4a09      	ldr	r2, [pc, #36]	; (800bf84 <vPortExitCritical+0x50>)
 800bf60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bf62:	4b08      	ldr	r3, [pc, #32]	; (800bf84 <vPortExitCritical+0x50>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d105      	bne.n	800bf76 <vPortExitCritical+0x42>
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	f383 8811 	msr	BASEPRI, r3
}
 800bf74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bf76:	bf00      	nop
 800bf78:	370c      	adds	r7, #12
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf80:	4770      	bx	lr
 800bf82:	bf00      	nop
 800bf84:	2000000c 	.word	0x2000000c
	...

0800bf90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bf90:	f3ef 8009 	mrs	r0, PSP
 800bf94:	f3bf 8f6f 	isb	sy
 800bf98:	4b15      	ldr	r3, [pc, #84]	; (800bff0 <pxCurrentTCBConst>)
 800bf9a:	681a      	ldr	r2, [r3, #0]
 800bf9c:	f01e 0f10 	tst.w	lr, #16
 800bfa0:	bf08      	it	eq
 800bfa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bfa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfaa:	6010      	str	r0, [r2, #0]
 800bfac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bfb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bfb4:	f380 8811 	msr	BASEPRI, r0
 800bfb8:	f3bf 8f4f 	dsb	sy
 800bfbc:	f3bf 8f6f 	isb	sy
 800bfc0:	f7fe feb8 	bl	800ad34 <vTaskSwitchContext>
 800bfc4:	f04f 0000 	mov.w	r0, #0
 800bfc8:	f380 8811 	msr	BASEPRI, r0
 800bfcc:	bc09      	pop	{r0, r3}
 800bfce:	6819      	ldr	r1, [r3, #0]
 800bfd0:	6808      	ldr	r0, [r1, #0]
 800bfd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd6:	f01e 0f10 	tst.w	lr, #16
 800bfda:	bf08      	it	eq
 800bfdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bfe0:	f380 8809 	msr	PSP, r0
 800bfe4:	f3bf 8f6f 	isb	sy
 800bfe8:	4770      	bx	lr
 800bfea:	bf00      	nop
 800bfec:	f3af 8000 	nop.w

0800bff0 <pxCurrentTCBConst>:
 800bff0:	20001994 	.word	0x20001994
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bff4:	bf00      	nop
 800bff6:	bf00      	nop

0800bff8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b082      	sub	sp, #8
 800bffc:	af00      	add	r7, sp, #0
	__asm volatile
 800bffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c002:	f383 8811 	msr	BASEPRI, r3
 800c006:	f3bf 8f6f 	isb	sy
 800c00a:	f3bf 8f4f 	dsb	sy
 800c00e:	607b      	str	r3, [r7, #4]
}
 800c010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c012:	f7fe fdd5 	bl	800abc0 <xTaskIncrementTick>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d003      	beq.n	800c024 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c01c:	4b06      	ldr	r3, [pc, #24]	; (800c038 <xPortSysTickHandler+0x40>)
 800c01e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c022:	601a      	str	r2, [r3, #0]
 800c024:	2300      	movs	r3, #0
 800c026:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	f383 8811 	msr	BASEPRI, r3
}
 800c02e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c030:	bf00      	nop
 800c032:	3708      	adds	r7, #8
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	e000ed04 	.word	0xe000ed04

0800c03c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c03c:	b480      	push	{r7}
 800c03e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c040:	4b0b      	ldr	r3, [pc, #44]	; (800c070 <vPortSetupTimerInterrupt+0x34>)
 800c042:	2200      	movs	r2, #0
 800c044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c046:	4b0b      	ldr	r3, [pc, #44]	; (800c074 <vPortSetupTimerInterrupt+0x38>)
 800c048:	2200      	movs	r2, #0
 800c04a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c04c:	4b0a      	ldr	r3, [pc, #40]	; (800c078 <vPortSetupTimerInterrupt+0x3c>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4a0a      	ldr	r2, [pc, #40]	; (800c07c <vPortSetupTimerInterrupt+0x40>)
 800c052:	fba2 2303 	umull	r2, r3, r2, r3
 800c056:	099b      	lsrs	r3, r3, #6
 800c058:	4a09      	ldr	r2, [pc, #36]	; (800c080 <vPortSetupTimerInterrupt+0x44>)
 800c05a:	3b01      	subs	r3, #1
 800c05c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c05e:	4b04      	ldr	r3, [pc, #16]	; (800c070 <vPortSetupTimerInterrupt+0x34>)
 800c060:	2207      	movs	r2, #7
 800c062:	601a      	str	r2, [r3, #0]
}
 800c064:	bf00      	nop
 800c066:	46bd      	mov	sp, r7
 800c068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06c:	4770      	bx	lr
 800c06e:	bf00      	nop
 800c070:	e000e010 	.word	0xe000e010
 800c074:	e000e018 	.word	0xe000e018
 800c078:	20000000 	.word	0x20000000
 800c07c:	10624dd3 	.word	0x10624dd3
 800c080:	e000e014 	.word	0xe000e014

0800c084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c084:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c094 <vPortEnableVFP+0x10>
 800c088:	6801      	ldr	r1, [r0, #0]
 800c08a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c08e:	6001      	str	r1, [r0, #0]
 800c090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c092:	bf00      	nop
 800c094:	e000ed88 	.word	0xe000ed88

0800c098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c098:	b480      	push	{r7}
 800c09a:	b085      	sub	sp, #20
 800c09c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c09e:	f3ef 8305 	mrs	r3, IPSR
 800c0a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2b0f      	cmp	r3, #15
 800c0a8:	d914      	bls.n	800c0d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c0aa:	4a17      	ldr	r2, [pc, #92]	; (800c108 <vPortValidateInterruptPriority+0x70>)
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	4413      	add	r3, r2
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c0b4:	4b15      	ldr	r3, [pc, #84]	; (800c10c <vPortValidateInterruptPriority+0x74>)
 800c0b6:	781b      	ldrb	r3, [r3, #0]
 800c0b8:	7afa      	ldrb	r2, [r7, #11]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d20a      	bcs.n	800c0d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c2:	f383 8811 	msr	BASEPRI, r3
 800c0c6:	f3bf 8f6f 	isb	sy
 800c0ca:	f3bf 8f4f 	dsb	sy
 800c0ce:	607b      	str	r3, [r7, #4]
}
 800c0d0:	bf00      	nop
 800c0d2:	e7fe      	b.n	800c0d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c0d4:	4b0e      	ldr	r3, [pc, #56]	; (800c110 <vPortValidateInterruptPriority+0x78>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c0dc:	4b0d      	ldr	r3, [pc, #52]	; (800c114 <vPortValidateInterruptPriority+0x7c>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d90a      	bls.n	800c0fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e8:	f383 8811 	msr	BASEPRI, r3
 800c0ec:	f3bf 8f6f 	isb	sy
 800c0f0:	f3bf 8f4f 	dsb	sy
 800c0f4:	603b      	str	r3, [r7, #0]
}
 800c0f6:	bf00      	nop
 800c0f8:	e7fe      	b.n	800c0f8 <vPortValidateInterruptPriority+0x60>
	}
 800c0fa:	bf00      	nop
 800c0fc:	3714      	adds	r7, #20
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr
 800c106:	bf00      	nop
 800c108:	e000e3f0 	.word	0xe000e3f0
 800c10c:	20001fc0 	.word	0x20001fc0
 800c110:	e000ed0c 	.word	0xe000ed0c
 800c114:	20001fc4 	.word	0x20001fc4

0800c118 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b08a      	sub	sp, #40	; 0x28
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c120:	2300      	movs	r3, #0
 800c122:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c124:	f7fe fc90 	bl	800aa48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c128:	4b5b      	ldr	r3, [pc, #364]	; (800c298 <pvPortMalloc+0x180>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d101      	bne.n	800c134 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c130:	f000 f920 	bl	800c374 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c134:	4b59      	ldr	r3, [pc, #356]	; (800c29c <pvPortMalloc+0x184>)
 800c136:	681a      	ldr	r2, [r3, #0]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	4013      	ands	r3, r2
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	f040 8093 	bne.w	800c268 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d01d      	beq.n	800c184 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c148:	2208      	movs	r2, #8
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	4413      	add	r3, r2
 800c14e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f003 0307 	and.w	r3, r3, #7
 800c156:	2b00      	cmp	r3, #0
 800c158:	d014      	beq.n	800c184 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f023 0307 	bic.w	r3, r3, #7
 800c160:	3308      	adds	r3, #8
 800c162:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f003 0307 	and.w	r3, r3, #7
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d00a      	beq.n	800c184 <pvPortMalloc+0x6c>
	__asm volatile
 800c16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c172:	f383 8811 	msr	BASEPRI, r3
 800c176:	f3bf 8f6f 	isb	sy
 800c17a:	f3bf 8f4f 	dsb	sy
 800c17e:	617b      	str	r3, [r7, #20]
}
 800c180:	bf00      	nop
 800c182:	e7fe      	b.n	800c182 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d06e      	beq.n	800c268 <pvPortMalloc+0x150>
 800c18a:	4b45      	ldr	r3, [pc, #276]	; (800c2a0 <pvPortMalloc+0x188>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	429a      	cmp	r2, r3
 800c192:	d869      	bhi.n	800c268 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c194:	4b43      	ldr	r3, [pc, #268]	; (800c2a4 <pvPortMalloc+0x18c>)
 800c196:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c198:	4b42      	ldr	r3, [pc, #264]	; (800c2a4 <pvPortMalloc+0x18c>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c19e:	e004      	b.n	800c1aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ac:	685b      	ldr	r3, [r3, #4]
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d903      	bls.n	800c1bc <pvPortMalloc+0xa4>
 800c1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d1f1      	bne.n	800c1a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c1bc:	4b36      	ldr	r3, [pc, #216]	; (800c298 <pvPortMalloc+0x180>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d050      	beq.n	800c268 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c1c6:	6a3b      	ldr	r3, [r7, #32]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	2208      	movs	r2, #8
 800c1cc:	4413      	add	r3, r2
 800c1ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	6a3b      	ldr	r3, [r7, #32]
 800c1d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1da:	685a      	ldr	r2, [r3, #4]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	1ad2      	subs	r2, r2, r3
 800c1e0:	2308      	movs	r3, #8
 800c1e2:	005b      	lsls	r3, r3, #1
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d91f      	bls.n	800c228 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1f0:	69bb      	ldr	r3, [r7, #24]
 800c1f2:	f003 0307 	and.w	r3, r3, #7
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d00a      	beq.n	800c210 <pvPortMalloc+0xf8>
	__asm volatile
 800c1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1fe:	f383 8811 	msr	BASEPRI, r3
 800c202:	f3bf 8f6f 	isb	sy
 800c206:	f3bf 8f4f 	dsb	sy
 800c20a:	613b      	str	r3, [r7, #16]
}
 800c20c:	bf00      	nop
 800c20e:	e7fe      	b.n	800c20e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c212:	685a      	ldr	r2, [r3, #4]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	1ad2      	subs	r2, r2, r3
 800c218:	69bb      	ldr	r3, [r7, #24]
 800c21a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c222:	69b8      	ldr	r0, [r7, #24]
 800c224:	f000 f908 	bl	800c438 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c228:	4b1d      	ldr	r3, [pc, #116]	; (800c2a0 <pvPortMalloc+0x188>)
 800c22a:	681a      	ldr	r2, [r3, #0]
 800c22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	1ad3      	subs	r3, r2, r3
 800c232:	4a1b      	ldr	r2, [pc, #108]	; (800c2a0 <pvPortMalloc+0x188>)
 800c234:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c236:	4b1a      	ldr	r3, [pc, #104]	; (800c2a0 <pvPortMalloc+0x188>)
 800c238:	681a      	ldr	r2, [r3, #0]
 800c23a:	4b1b      	ldr	r3, [pc, #108]	; (800c2a8 <pvPortMalloc+0x190>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d203      	bcs.n	800c24a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c242:	4b17      	ldr	r3, [pc, #92]	; (800c2a0 <pvPortMalloc+0x188>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	4a18      	ldr	r2, [pc, #96]	; (800c2a8 <pvPortMalloc+0x190>)
 800c248:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24c:	685a      	ldr	r2, [r3, #4]
 800c24e:	4b13      	ldr	r3, [pc, #76]	; (800c29c <pvPortMalloc+0x184>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	431a      	orrs	r2, r3
 800c254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c256:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25a:	2200      	movs	r2, #0
 800c25c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c25e:	4b13      	ldr	r3, [pc, #76]	; (800c2ac <pvPortMalloc+0x194>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	3301      	adds	r3, #1
 800c264:	4a11      	ldr	r2, [pc, #68]	; (800c2ac <pvPortMalloc+0x194>)
 800c266:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c268:	f7fe fbfc 	bl	800aa64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c26c:	69fb      	ldr	r3, [r7, #28]
 800c26e:	f003 0307 	and.w	r3, r3, #7
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00a      	beq.n	800c28c <pvPortMalloc+0x174>
	__asm volatile
 800c276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27a:	f383 8811 	msr	BASEPRI, r3
 800c27e:	f3bf 8f6f 	isb	sy
 800c282:	f3bf 8f4f 	dsb	sy
 800c286:	60fb      	str	r3, [r7, #12]
}
 800c288:	bf00      	nop
 800c28a:	e7fe      	b.n	800c28a <pvPortMalloc+0x172>
	return pvReturn;
 800c28c:	69fb      	ldr	r3, [r7, #28]
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3728      	adds	r7, #40	; 0x28
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	20002b88 	.word	0x20002b88
 800c29c:	20002b9c 	.word	0x20002b9c
 800c2a0:	20002b8c 	.word	0x20002b8c
 800c2a4:	20002b80 	.word	0x20002b80
 800c2a8:	20002b90 	.word	0x20002b90
 800c2ac:	20002b94 	.word	0x20002b94

0800c2b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b086      	sub	sp, #24
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d04d      	beq.n	800c35e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c2c2:	2308      	movs	r3, #8
 800c2c4:	425b      	negs	r3, r3
 800c2c6:	697a      	ldr	r2, [r7, #20]
 800c2c8:	4413      	add	r3, r2
 800c2ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	685a      	ldr	r2, [r3, #4]
 800c2d4:	4b24      	ldr	r3, [pc, #144]	; (800c368 <vPortFree+0xb8>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4013      	ands	r3, r2
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d10a      	bne.n	800c2f4 <vPortFree+0x44>
	__asm volatile
 800c2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e2:	f383 8811 	msr	BASEPRI, r3
 800c2e6:	f3bf 8f6f 	isb	sy
 800c2ea:	f3bf 8f4f 	dsb	sy
 800c2ee:	60fb      	str	r3, [r7, #12]
}
 800c2f0:	bf00      	nop
 800c2f2:	e7fe      	b.n	800c2f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d00a      	beq.n	800c312 <vPortFree+0x62>
	__asm volatile
 800c2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c300:	f383 8811 	msr	BASEPRI, r3
 800c304:	f3bf 8f6f 	isb	sy
 800c308:	f3bf 8f4f 	dsb	sy
 800c30c:	60bb      	str	r3, [r7, #8]
}
 800c30e:	bf00      	nop
 800c310:	e7fe      	b.n	800c310 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	685a      	ldr	r2, [r3, #4]
 800c316:	4b14      	ldr	r3, [pc, #80]	; (800c368 <vPortFree+0xb8>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	4013      	ands	r3, r2
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d01e      	beq.n	800c35e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d11a      	bne.n	800c35e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	685a      	ldr	r2, [r3, #4]
 800c32c:	4b0e      	ldr	r3, [pc, #56]	; (800c368 <vPortFree+0xb8>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	43db      	mvns	r3, r3
 800c332:	401a      	ands	r2, r3
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c338:	f7fe fb86 	bl	800aa48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	685a      	ldr	r2, [r3, #4]
 800c340:	4b0a      	ldr	r3, [pc, #40]	; (800c36c <vPortFree+0xbc>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4413      	add	r3, r2
 800c346:	4a09      	ldr	r2, [pc, #36]	; (800c36c <vPortFree+0xbc>)
 800c348:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c34a:	6938      	ldr	r0, [r7, #16]
 800c34c:	f000 f874 	bl	800c438 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c350:	4b07      	ldr	r3, [pc, #28]	; (800c370 <vPortFree+0xc0>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	3301      	adds	r3, #1
 800c356:	4a06      	ldr	r2, [pc, #24]	; (800c370 <vPortFree+0xc0>)
 800c358:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c35a:	f7fe fb83 	bl	800aa64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c35e:	bf00      	nop
 800c360:	3718      	adds	r7, #24
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	20002b9c 	.word	0x20002b9c
 800c36c:	20002b8c 	.word	0x20002b8c
 800c370:	20002b98 	.word	0x20002b98

0800c374 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c374:	b480      	push	{r7}
 800c376:	b085      	sub	sp, #20
 800c378:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c37a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800c37e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c380:	4b27      	ldr	r3, [pc, #156]	; (800c420 <prvHeapInit+0xac>)
 800c382:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f003 0307 	and.w	r3, r3, #7
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d00c      	beq.n	800c3a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	3307      	adds	r3, #7
 800c392:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f023 0307 	bic.w	r3, r3, #7
 800c39a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c39c:	68ba      	ldr	r2, [r7, #8]
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	1ad3      	subs	r3, r2, r3
 800c3a2:	4a1f      	ldr	r2, [pc, #124]	; (800c420 <prvHeapInit+0xac>)
 800c3a4:	4413      	add	r3, r2
 800c3a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c3ac:	4a1d      	ldr	r2, [pc, #116]	; (800c424 <prvHeapInit+0xb0>)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c3b2:	4b1c      	ldr	r3, [pc, #112]	; (800c424 <prvHeapInit+0xb0>)
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	68ba      	ldr	r2, [r7, #8]
 800c3bc:	4413      	add	r3, r2
 800c3be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c3c0:	2208      	movs	r2, #8
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	1a9b      	subs	r3, r3, r2
 800c3c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	f023 0307 	bic.w	r3, r3, #7
 800c3ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	4a15      	ldr	r2, [pc, #84]	; (800c428 <prvHeapInit+0xb4>)
 800c3d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c3d6:	4b14      	ldr	r3, [pc, #80]	; (800c428 <prvHeapInit+0xb4>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c3de:	4b12      	ldr	r3, [pc, #72]	; (800c428 <prvHeapInit+0xb4>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	1ad2      	subs	r2, r2, r3
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c3f4:	4b0c      	ldr	r3, [pc, #48]	; (800c428 <prvHeapInit+0xb4>)
 800c3f6:	681a      	ldr	r2, [r3, #0]
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	4a0a      	ldr	r2, [pc, #40]	; (800c42c <prvHeapInit+0xb8>)
 800c402:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	4a09      	ldr	r2, [pc, #36]	; (800c430 <prvHeapInit+0xbc>)
 800c40a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c40c:	4b09      	ldr	r3, [pc, #36]	; (800c434 <prvHeapInit+0xc0>)
 800c40e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c412:	601a      	str	r2, [r3, #0]
}
 800c414:	bf00      	nop
 800c416:	3714      	adds	r7, #20
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr
 800c420:	20001fc8 	.word	0x20001fc8
 800c424:	20002b80 	.word	0x20002b80
 800c428:	20002b88 	.word	0x20002b88
 800c42c:	20002b90 	.word	0x20002b90
 800c430:	20002b8c 	.word	0x20002b8c
 800c434:	20002b9c 	.word	0x20002b9c

0800c438 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c438:	b480      	push	{r7}
 800c43a:	b085      	sub	sp, #20
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c440:	4b28      	ldr	r3, [pc, #160]	; (800c4e4 <prvInsertBlockIntoFreeList+0xac>)
 800c442:	60fb      	str	r3, [r7, #12]
 800c444:	e002      	b.n	800c44c <prvInsertBlockIntoFreeList+0x14>
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	60fb      	str	r3, [r7, #12]
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	429a      	cmp	r2, r3
 800c454:	d8f7      	bhi.n	800c446 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	68ba      	ldr	r2, [r7, #8]
 800c460:	4413      	add	r3, r2
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	429a      	cmp	r2, r3
 800c466:	d108      	bne.n	800c47a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	685a      	ldr	r2, [r3, #4]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	441a      	add	r2, r3
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	68ba      	ldr	r2, [r7, #8]
 800c484:	441a      	add	r2, r3
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	429a      	cmp	r2, r3
 800c48c:	d118      	bne.n	800c4c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681a      	ldr	r2, [r3, #0]
 800c492:	4b15      	ldr	r3, [pc, #84]	; (800c4e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	429a      	cmp	r2, r3
 800c498:	d00d      	beq.n	800c4b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	685a      	ldr	r2, [r3, #4]
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	441a      	add	r2, r3
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	681a      	ldr	r2, [r3, #0]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	601a      	str	r2, [r3, #0]
 800c4b4:	e008      	b.n	800c4c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c4b6:	4b0c      	ldr	r3, [pc, #48]	; (800c4e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c4b8:	681a      	ldr	r2, [r3, #0]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	601a      	str	r2, [r3, #0]
 800c4be:	e003      	b.n	800c4c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681a      	ldr	r2, [r3, #0]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c4c8:	68fa      	ldr	r2, [r7, #12]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d002      	beq.n	800c4d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	687a      	ldr	r2, [r7, #4]
 800c4d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4d6:	bf00      	nop
 800c4d8:	3714      	adds	r7, #20
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr
 800c4e2:	bf00      	nop
 800c4e4:	20002b80 	.word	0x20002b80
 800c4e8:	20002b88 	.word	0x20002b88

0800c4ec <__errno>:
 800c4ec:	4b01      	ldr	r3, [pc, #4]	; (800c4f4 <__errno+0x8>)
 800c4ee:	6818      	ldr	r0, [r3, #0]
 800c4f0:	4770      	bx	lr
 800c4f2:	bf00      	nop
 800c4f4:	20000010 	.word	0x20000010

0800c4f8 <std>:
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	b510      	push	{r4, lr}
 800c4fc:	4604      	mov	r4, r0
 800c4fe:	e9c0 3300 	strd	r3, r3, [r0]
 800c502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c506:	6083      	str	r3, [r0, #8]
 800c508:	8181      	strh	r1, [r0, #12]
 800c50a:	6643      	str	r3, [r0, #100]	; 0x64
 800c50c:	81c2      	strh	r2, [r0, #14]
 800c50e:	6183      	str	r3, [r0, #24]
 800c510:	4619      	mov	r1, r3
 800c512:	2208      	movs	r2, #8
 800c514:	305c      	adds	r0, #92	; 0x5c
 800c516:	f000 f93b 	bl	800c790 <memset>
 800c51a:	4b05      	ldr	r3, [pc, #20]	; (800c530 <std+0x38>)
 800c51c:	6263      	str	r3, [r4, #36]	; 0x24
 800c51e:	4b05      	ldr	r3, [pc, #20]	; (800c534 <std+0x3c>)
 800c520:	62a3      	str	r3, [r4, #40]	; 0x28
 800c522:	4b05      	ldr	r3, [pc, #20]	; (800c538 <std+0x40>)
 800c524:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c526:	4b05      	ldr	r3, [pc, #20]	; (800c53c <std+0x44>)
 800c528:	6224      	str	r4, [r4, #32]
 800c52a:	6323      	str	r3, [r4, #48]	; 0x30
 800c52c:	bd10      	pop	{r4, pc}
 800c52e:	bf00      	nop
 800c530:	0800cbb1 	.word	0x0800cbb1
 800c534:	0800cbd3 	.word	0x0800cbd3
 800c538:	0800cc0b 	.word	0x0800cc0b
 800c53c:	0800cc2f 	.word	0x0800cc2f

0800c540 <_cleanup_r>:
 800c540:	4901      	ldr	r1, [pc, #4]	; (800c548 <_cleanup_r+0x8>)
 800c542:	f000 b8af 	b.w	800c6a4 <_fwalk_reent>
 800c546:	bf00      	nop
 800c548:	0800d04d 	.word	0x0800d04d

0800c54c <__sfmoreglue>:
 800c54c:	b570      	push	{r4, r5, r6, lr}
 800c54e:	2268      	movs	r2, #104	; 0x68
 800c550:	1e4d      	subs	r5, r1, #1
 800c552:	4355      	muls	r5, r2
 800c554:	460e      	mov	r6, r1
 800c556:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c55a:	f000 f98d 	bl	800c878 <_malloc_r>
 800c55e:	4604      	mov	r4, r0
 800c560:	b140      	cbz	r0, 800c574 <__sfmoreglue+0x28>
 800c562:	2100      	movs	r1, #0
 800c564:	e9c0 1600 	strd	r1, r6, [r0]
 800c568:	300c      	adds	r0, #12
 800c56a:	60a0      	str	r0, [r4, #8]
 800c56c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c570:	f000 f90e 	bl	800c790 <memset>
 800c574:	4620      	mov	r0, r4
 800c576:	bd70      	pop	{r4, r5, r6, pc}

0800c578 <__sfp_lock_acquire>:
 800c578:	4801      	ldr	r0, [pc, #4]	; (800c580 <__sfp_lock_acquire+0x8>)
 800c57a:	f000 b8d8 	b.w	800c72e <__retarget_lock_acquire_recursive>
 800c57e:	bf00      	nop
 800c580:	20002ba1 	.word	0x20002ba1

0800c584 <__sfp_lock_release>:
 800c584:	4801      	ldr	r0, [pc, #4]	; (800c58c <__sfp_lock_release+0x8>)
 800c586:	f000 b8d3 	b.w	800c730 <__retarget_lock_release_recursive>
 800c58a:	bf00      	nop
 800c58c:	20002ba1 	.word	0x20002ba1

0800c590 <__sinit_lock_acquire>:
 800c590:	4801      	ldr	r0, [pc, #4]	; (800c598 <__sinit_lock_acquire+0x8>)
 800c592:	f000 b8cc 	b.w	800c72e <__retarget_lock_acquire_recursive>
 800c596:	bf00      	nop
 800c598:	20002ba2 	.word	0x20002ba2

0800c59c <__sinit_lock_release>:
 800c59c:	4801      	ldr	r0, [pc, #4]	; (800c5a4 <__sinit_lock_release+0x8>)
 800c59e:	f000 b8c7 	b.w	800c730 <__retarget_lock_release_recursive>
 800c5a2:	bf00      	nop
 800c5a4:	20002ba2 	.word	0x20002ba2

0800c5a8 <__sinit>:
 800c5a8:	b510      	push	{r4, lr}
 800c5aa:	4604      	mov	r4, r0
 800c5ac:	f7ff fff0 	bl	800c590 <__sinit_lock_acquire>
 800c5b0:	69a3      	ldr	r3, [r4, #24]
 800c5b2:	b11b      	cbz	r3, 800c5bc <__sinit+0x14>
 800c5b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5b8:	f7ff bff0 	b.w	800c59c <__sinit_lock_release>
 800c5bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c5c0:	6523      	str	r3, [r4, #80]	; 0x50
 800c5c2:	4b13      	ldr	r3, [pc, #76]	; (800c610 <__sinit+0x68>)
 800c5c4:	4a13      	ldr	r2, [pc, #76]	; (800c614 <__sinit+0x6c>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	62a2      	str	r2, [r4, #40]	; 0x28
 800c5ca:	42a3      	cmp	r3, r4
 800c5cc:	bf04      	itt	eq
 800c5ce:	2301      	moveq	r3, #1
 800c5d0:	61a3      	streq	r3, [r4, #24]
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	f000 f820 	bl	800c618 <__sfp>
 800c5d8:	6060      	str	r0, [r4, #4]
 800c5da:	4620      	mov	r0, r4
 800c5dc:	f000 f81c 	bl	800c618 <__sfp>
 800c5e0:	60a0      	str	r0, [r4, #8]
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	f000 f818 	bl	800c618 <__sfp>
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	60e0      	str	r0, [r4, #12]
 800c5ec:	2104      	movs	r1, #4
 800c5ee:	6860      	ldr	r0, [r4, #4]
 800c5f0:	f7ff ff82 	bl	800c4f8 <std>
 800c5f4:	68a0      	ldr	r0, [r4, #8]
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	2109      	movs	r1, #9
 800c5fa:	f7ff ff7d 	bl	800c4f8 <std>
 800c5fe:	68e0      	ldr	r0, [r4, #12]
 800c600:	2202      	movs	r2, #2
 800c602:	2112      	movs	r1, #18
 800c604:	f7ff ff78 	bl	800c4f8 <std>
 800c608:	2301      	movs	r3, #1
 800c60a:	61a3      	str	r3, [r4, #24]
 800c60c:	e7d2      	b.n	800c5b4 <__sinit+0xc>
 800c60e:	bf00      	nop
 800c610:	0800e450 	.word	0x0800e450
 800c614:	0800c541 	.word	0x0800c541

0800c618 <__sfp>:
 800c618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c61a:	4607      	mov	r7, r0
 800c61c:	f7ff ffac 	bl	800c578 <__sfp_lock_acquire>
 800c620:	4b1e      	ldr	r3, [pc, #120]	; (800c69c <__sfp+0x84>)
 800c622:	681e      	ldr	r6, [r3, #0]
 800c624:	69b3      	ldr	r3, [r6, #24]
 800c626:	b913      	cbnz	r3, 800c62e <__sfp+0x16>
 800c628:	4630      	mov	r0, r6
 800c62a:	f7ff ffbd 	bl	800c5a8 <__sinit>
 800c62e:	3648      	adds	r6, #72	; 0x48
 800c630:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c634:	3b01      	subs	r3, #1
 800c636:	d503      	bpl.n	800c640 <__sfp+0x28>
 800c638:	6833      	ldr	r3, [r6, #0]
 800c63a:	b30b      	cbz	r3, 800c680 <__sfp+0x68>
 800c63c:	6836      	ldr	r6, [r6, #0]
 800c63e:	e7f7      	b.n	800c630 <__sfp+0x18>
 800c640:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c644:	b9d5      	cbnz	r5, 800c67c <__sfp+0x64>
 800c646:	4b16      	ldr	r3, [pc, #88]	; (800c6a0 <__sfp+0x88>)
 800c648:	60e3      	str	r3, [r4, #12]
 800c64a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c64e:	6665      	str	r5, [r4, #100]	; 0x64
 800c650:	f000 f86c 	bl	800c72c <__retarget_lock_init_recursive>
 800c654:	f7ff ff96 	bl	800c584 <__sfp_lock_release>
 800c658:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c65c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c660:	6025      	str	r5, [r4, #0]
 800c662:	61a5      	str	r5, [r4, #24]
 800c664:	2208      	movs	r2, #8
 800c666:	4629      	mov	r1, r5
 800c668:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c66c:	f000 f890 	bl	800c790 <memset>
 800c670:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c674:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c678:	4620      	mov	r0, r4
 800c67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c67c:	3468      	adds	r4, #104	; 0x68
 800c67e:	e7d9      	b.n	800c634 <__sfp+0x1c>
 800c680:	2104      	movs	r1, #4
 800c682:	4638      	mov	r0, r7
 800c684:	f7ff ff62 	bl	800c54c <__sfmoreglue>
 800c688:	4604      	mov	r4, r0
 800c68a:	6030      	str	r0, [r6, #0]
 800c68c:	2800      	cmp	r0, #0
 800c68e:	d1d5      	bne.n	800c63c <__sfp+0x24>
 800c690:	f7ff ff78 	bl	800c584 <__sfp_lock_release>
 800c694:	230c      	movs	r3, #12
 800c696:	603b      	str	r3, [r7, #0]
 800c698:	e7ee      	b.n	800c678 <__sfp+0x60>
 800c69a:	bf00      	nop
 800c69c:	0800e450 	.word	0x0800e450
 800c6a0:	ffff0001 	.word	0xffff0001

0800c6a4 <_fwalk_reent>:
 800c6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6a8:	4606      	mov	r6, r0
 800c6aa:	4688      	mov	r8, r1
 800c6ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c6b0:	2700      	movs	r7, #0
 800c6b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c6b6:	f1b9 0901 	subs.w	r9, r9, #1
 800c6ba:	d505      	bpl.n	800c6c8 <_fwalk_reent+0x24>
 800c6bc:	6824      	ldr	r4, [r4, #0]
 800c6be:	2c00      	cmp	r4, #0
 800c6c0:	d1f7      	bne.n	800c6b2 <_fwalk_reent+0xe>
 800c6c2:	4638      	mov	r0, r7
 800c6c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6c8:	89ab      	ldrh	r3, [r5, #12]
 800c6ca:	2b01      	cmp	r3, #1
 800c6cc:	d907      	bls.n	800c6de <_fwalk_reent+0x3a>
 800c6ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	d003      	beq.n	800c6de <_fwalk_reent+0x3a>
 800c6d6:	4629      	mov	r1, r5
 800c6d8:	4630      	mov	r0, r6
 800c6da:	47c0      	blx	r8
 800c6dc:	4307      	orrs	r7, r0
 800c6de:	3568      	adds	r5, #104	; 0x68
 800c6e0:	e7e9      	b.n	800c6b6 <_fwalk_reent+0x12>
	...

0800c6e4 <__libc_init_array>:
 800c6e4:	b570      	push	{r4, r5, r6, lr}
 800c6e6:	4d0d      	ldr	r5, [pc, #52]	; (800c71c <__libc_init_array+0x38>)
 800c6e8:	4c0d      	ldr	r4, [pc, #52]	; (800c720 <__libc_init_array+0x3c>)
 800c6ea:	1b64      	subs	r4, r4, r5
 800c6ec:	10a4      	asrs	r4, r4, #2
 800c6ee:	2600      	movs	r6, #0
 800c6f0:	42a6      	cmp	r6, r4
 800c6f2:	d109      	bne.n	800c708 <__libc_init_array+0x24>
 800c6f4:	4d0b      	ldr	r5, [pc, #44]	; (800c724 <__libc_init_array+0x40>)
 800c6f6:	4c0c      	ldr	r4, [pc, #48]	; (800c728 <__libc_init_array+0x44>)
 800c6f8:	f001 fa96 	bl	800dc28 <_init>
 800c6fc:	1b64      	subs	r4, r4, r5
 800c6fe:	10a4      	asrs	r4, r4, #2
 800c700:	2600      	movs	r6, #0
 800c702:	42a6      	cmp	r6, r4
 800c704:	d105      	bne.n	800c712 <__libc_init_array+0x2e>
 800c706:	bd70      	pop	{r4, r5, r6, pc}
 800c708:	f855 3b04 	ldr.w	r3, [r5], #4
 800c70c:	4798      	blx	r3
 800c70e:	3601      	adds	r6, #1
 800c710:	e7ee      	b.n	800c6f0 <__libc_init_array+0xc>
 800c712:	f855 3b04 	ldr.w	r3, [r5], #4
 800c716:	4798      	blx	r3
 800c718:	3601      	adds	r6, #1
 800c71a:	e7f2      	b.n	800c702 <__libc_init_array+0x1e>
 800c71c:	0800e540 	.word	0x0800e540
 800c720:	0800e540 	.word	0x0800e540
 800c724:	0800e540 	.word	0x0800e540
 800c728:	0800e544 	.word	0x0800e544

0800c72c <__retarget_lock_init_recursive>:
 800c72c:	4770      	bx	lr

0800c72e <__retarget_lock_acquire_recursive>:
 800c72e:	4770      	bx	lr

0800c730 <__retarget_lock_release_recursive>:
 800c730:	4770      	bx	lr
	...

0800c734 <malloc>:
 800c734:	4b02      	ldr	r3, [pc, #8]	; (800c740 <malloc+0xc>)
 800c736:	4601      	mov	r1, r0
 800c738:	6818      	ldr	r0, [r3, #0]
 800c73a:	f000 b89d 	b.w	800c878 <_malloc_r>
 800c73e:	bf00      	nop
 800c740:	20000010 	.word	0x20000010

0800c744 <free>:
 800c744:	4b02      	ldr	r3, [pc, #8]	; (800c750 <free+0xc>)
 800c746:	4601      	mov	r1, r0
 800c748:	6818      	ldr	r0, [r3, #0]
 800c74a:	f000 b829 	b.w	800c7a0 <_free_r>
 800c74e:	bf00      	nop
 800c750:	20000010 	.word	0x20000010

0800c754 <memcmp>:
 800c754:	b510      	push	{r4, lr}
 800c756:	3901      	subs	r1, #1
 800c758:	4402      	add	r2, r0
 800c75a:	4290      	cmp	r0, r2
 800c75c:	d101      	bne.n	800c762 <memcmp+0xe>
 800c75e:	2000      	movs	r0, #0
 800c760:	e005      	b.n	800c76e <memcmp+0x1a>
 800c762:	7803      	ldrb	r3, [r0, #0]
 800c764:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c768:	42a3      	cmp	r3, r4
 800c76a:	d001      	beq.n	800c770 <memcmp+0x1c>
 800c76c:	1b18      	subs	r0, r3, r4
 800c76e:	bd10      	pop	{r4, pc}
 800c770:	3001      	adds	r0, #1
 800c772:	e7f2      	b.n	800c75a <memcmp+0x6>

0800c774 <memcpy>:
 800c774:	440a      	add	r2, r1
 800c776:	4291      	cmp	r1, r2
 800c778:	f100 33ff 	add.w	r3, r0, #4294967295
 800c77c:	d100      	bne.n	800c780 <memcpy+0xc>
 800c77e:	4770      	bx	lr
 800c780:	b510      	push	{r4, lr}
 800c782:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c786:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c78a:	4291      	cmp	r1, r2
 800c78c:	d1f9      	bne.n	800c782 <memcpy+0xe>
 800c78e:	bd10      	pop	{r4, pc}

0800c790 <memset>:
 800c790:	4402      	add	r2, r0
 800c792:	4603      	mov	r3, r0
 800c794:	4293      	cmp	r3, r2
 800c796:	d100      	bne.n	800c79a <memset+0xa>
 800c798:	4770      	bx	lr
 800c79a:	f803 1b01 	strb.w	r1, [r3], #1
 800c79e:	e7f9      	b.n	800c794 <memset+0x4>

0800c7a0 <_free_r>:
 800c7a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7a2:	2900      	cmp	r1, #0
 800c7a4:	d044      	beq.n	800c830 <_free_r+0x90>
 800c7a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7aa:	9001      	str	r0, [sp, #4]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	f1a1 0404 	sub.w	r4, r1, #4
 800c7b2:	bfb8      	it	lt
 800c7b4:	18e4      	addlt	r4, r4, r3
 800c7b6:	f000 fd0f 	bl	800d1d8 <__malloc_lock>
 800c7ba:	4a1e      	ldr	r2, [pc, #120]	; (800c834 <_free_r+0x94>)
 800c7bc:	9801      	ldr	r0, [sp, #4]
 800c7be:	6813      	ldr	r3, [r2, #0]
 800c7c0:	b933      	cbnz	r3, 800c7d0 <_free_r+0x30>
 800c7c2:	6063      	str	r3, [r4, #4]
 800c7c4:	6014      	str	r4, [r2, #0]
 800c7c6:	b003      	add	sp, #12
 800c7c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c7cc:	f000 bd0a 	b.w	800d1e4 <__malloc_unlock>
 800c7d0:	42a3      	cmp	r3, r4
 800c7d2:	d908      	bls.n	800c7e6 <_free_r+0x46>
 800c7d4:	6825      	ldr	r5, [r4, #0]
 800c7d6:	1961      	adds	r1, r4, r5
 800c7d8:	428b      	cmp	r3, r1
 800c7da:	bf01      	itttt	eq
 800c7dc:	6819      	ldreq	r1, [r3, #0]
 800c7de:	685b      	ldreq	r3, [r3, #4]
 800c7e0:	1949      	addeq	r1, r1, r5
 800c7e2:	6021      	streq	r1, [r4, #0]
 800c7e4:	e7ed      	b.n	800c7c2 <_free_r+0x22>
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	b10b      	cbz	r3, 800c7f0 <_free_r+0x50>
 800c7ec:	42a3      	cmp	r3, r4
 800c7ee:	d9fa      	bls.n	800c7e6 <_free_r+0x46>
 800c7f0:	6811      	ldr	r1, [r2, #0]
 800c7f2:	1855      	adds	r5, r2, r1
 800c7f4:	42a5      	cmp	r5, r4
 800c7f6:	d10b      	bne.n	800c810 <_free_r+0x70>
 800c7f8:	6824      	ldr	r4, [r4, #0]
 800c7fa:	4421      	add	r1, r4
 800c7fc:	1854      	adds	r4, r2, r1
 800c7fe:	42a3      	cmp	r3, r4
 800c800:	6011      	str	r1, [r2, #0]
 800c802:	d1e0      	bne.n	800c7c6 <_free_r+0x26>
 800c804:	681c      	ldr	r4, [r3, #0]
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	6053      	str	r3, [r2, #4]
 800c80a:	4421      	add	r1, r4
 800c80c:	6011      	str	r1, [r2, #0]
 800c80e:	e7da      	b.n	800c7c6 <_free_r+0x26>
 800c810:	d902      	bls.n	800c818 <_free_r+0x78>
 800c812:	230c      	movs	r3, #12
 800c814:	6003      	str	r3, [r0, #0]
 800c816:	e7d6      	b.n	800c7c6 <_free_r+0x26>
 800c818:	6825      	ldr	r5, [r4, #0]
 800c81a:	1961      	adds	r1, r4, r5
 800c81c:	428b      	cmp	r3, r1
 800c81e:	bf04      	itt	eq
 800c820:	6819      	ldreq	r1, [r3, #0]
 800c822:	685b      	ldreq	r3, [r3, #4]
 800c824:	6063      	str	r3, [r4, #4]
 800c826:	bf04      	itt	eq
 800c828:	1949      	addeq	r1, r1, r5
 800c82a:	6021      	streq	r1, [r4, #0]
 800c82c:	6054      	str	r4, [r2, #4]
 800c82e:	e7ca      	b.n	800c7c6 <_free_r+0x26>
 800c830:	b003      	add	sp, #12
 800c832:	bd30      	pop	{r4, r5, pc}
 800c834:	20002ba4 	.word	0x20002ba4

0800c838 <sbrk_aligned>:
 800c838:	b570      	push	{r4, r5, r6, lr}
 800c83a:	4e0e      	ldr	r6, [pc, #56]	; (800c874 <sbrk_aligned+0x3c>)
 800c83c:	460c      	mov	r4, r1
 800c83e:	6831      	ldr	r1, [r6, #0]
 800c840:	4605      	mov	r5, r0
 800c842:	b911      	cbnz	r1, 800c84a <sbrk_aligned+0x12>
 800c844:	f000 f984 	bl	800cb50 <_sbrk_r>
 800c848:	6030      	str	r0, [r6, #0]
 800c84a:	4621      	mov	r1, r4
 800c84c:	4628      	mov	r0, r5
 800c84e:	f000 f97f 	bl	800cb50 <_sbrk_r>
 800c852:	1c43      	adds	r3, r0, #1
 800c854:	d00a      	beq.n	800c86c <sbrk_aligned+0x34>
 800c856:	1cc4      	adds	r4, r0, #3
 800c858:	f024 0403 	bic.w	r4, r4, #3
 800c85c:	42a0      	cmp	r0, r4
 800c85e:	d007      	beq.n	800c870 <sbrk_aligned+0x38>
 800c860:	1a21      	subs	r1, r4, r0
 800c862:	4628      	mov	r0, r5
 800c864:	f000 f974 	bl	800cb50 <_sbrk_r>
 800c868:	3001      	adds	r0, #1
 800c86a:	d101      	bne.n	800c870 <sbrk_aligned+0x38>
 800c86c:	f04f 34ff 	mov.w	r4, #4294967295
 800c870:	4620      	mov	r0, r4
 800c872:	bd70      	pop	{r4, r5, r6, pc}
 800c874:	20002ba8 	.word	0x20002ba8

0800c878 <_malloc_r>:
 800c878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c87c:	1ccd      	adds	r5, r1, #3
 800c87e:	f025 0503 	bic.w	r5, r5, #3
 800c882:	3508      	adds	r5, #8
 800c884:	2d0c      	cmp	r5, #12
 800c886:	bf38      	it	cc
 800c888:	250c      	movcc	r5, #12
 800c88a:	2d00      	cmp	r5, #0
 800c88c:	4607      	mov	r7, r0
 800c88e:	db01      	blt.n	800c894 <_malloc_r+0x1c>
 800c890:	42a9      	cmp	r1, r5
 800c892:	d905      	bls.n	800c8a0 <_malloc_r+0x28>
 800c894:	230c      	movs	r3, #12
 800c896:	603b      	str	r3, [r7, #0]
 800c898:	2600      	movs	r6, #0
 800c89a:	4630      	mov	r0, r6
 800c89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8a0:	4e2e      	ldr	r6, [pc, #184]	; (800c95c <_malloc_r+0xe4>)
 800c8a2:	f000 fc99 	bl	800d1d8 <__malloc_lock>
 800c8a6:	6833      	ldr	r3, [r6, #0]
 800c8a8:	461c      	mov	r4, r3
 800c8aa:	bb34      	cbnz	r4, 800c8fa <_malloc_r+0x82>
 800c8ac:	4629      	mov	r1, r5
 800c8ae:	4638      	mov	r0, r7
 800c8b0:	f7ff ffc2 	bl	800c838 <sbrk_aligned>
 800c8b4:	1c43      	adds	r3, r0, #1
 800c8b6:	4604      	mov	r4, r0
 800c8b8:	d14d      	bne.n	800c956 <_malloc_r+0xde>
 800c8ba:	6834      	ldr	r4, [r6, #0]
 800c8bc:	4626      	mov	r6, r4
 800c8be:	2e00      	cmp	r6, #0
 800c8c0:	d140      	bne.n	800c944 <_malloc_r+0xcc>
 800c8c2:	6823      	ldr	r3, [r4, #0]
 800c8c4:	4631      	mov	r1, r6
 800c8c6:	4638      	mov	r0, r7
 800c8c8:	eb04 0803 	add.w	r8, r4, r3
 800c8cc:	f000 f940 	bl	800cb50 <_sbrk_r>
 800c8d0:	4580      	cmp	r8, r0
 800c8d2:	d13a      	bne.n	800c94a <_malloc_r+0xd2>
 800c8d4:	6821      	ldr	r1, [r4, #0]
 800c8d6:	3503      	adds	r5, #3
 800c8d8:	1a6d      	subs	r5, r5, r1
 800c8da:	f025 0503 	bic.w	r5, r5, #3
 800c8de:	3508      	adds	r5, #8
 800c8e0:	2d0c      	cmp	r5, #12
 800c8e2:	bf38      	it	cc
 800c8e4:	250c      	movcc	r5, #12
 800c8e6:	4629      	mov	r1, r5
 800c8e8:	4638      	mov	r0, r7
 800c8ea:	f7ff ffa5 	bl	800c838 <sbrk_aligned>
 800c8ee:	3001      	adds	r0, #1
 800c8f0:	d02b      	beq.n	800c94a <_malloc_r+0xd2>
 800c8f2:	6823      	ldr	r3, [r4, #0]
 800c8f4:	442b      	add	r3, r5
 800c8f6:	6023      	str	r3, [r4, #0]
 800c8f8:	e00e      	b.n	800c918 <_malloc_r+0xa0>
 800c8fa:	6822      	ldr	r2, [r4, #0]
 800c8fc:	1b52      	subs	r2, r2, r5
 800c8fe:	d41e      	bmi.n	800c93e <_malloc_r+0xc6>
 800c900:	2a0b      	cmp	r2, #11
 800c902:	d916      	bls.n	800c932 <_malloc_r+0xba>
 800c904:	1961      	adds	r1, r4, r5
 800c906:	42a3      	cmp	r3, r4
 800c908:	6025      	str	r5, [r4, #0]
 800c90a:	bf18      	it	ne
 800c90c:	6059      	strne	r1, [r3, #4]
 800c90e:	6863      	ldr	r3, [r4, #4]
 800c910:	bf08      	it	eq
 800c912:	6031      	streq	r1, [r6, #0]
 800c914:	5162      	str	r2, [r4, r5]
 800c916:	604b      	str	r3, [r1, #4]
 800c918:	4638      	mov	r0, r7
 800c91a:	f104 060b 	add.w	r6, r4, #11
 800c91e:	f000 fc61 	bl	800d1e4 <__malloc_unlock>
 800c922:	f026 0607 	bic.w	r6, r6, #7
 800c926:	1d23      	adds	r3, r4, #4
 800c928:	1af2      	subs	r2, r6, r3
 800c92a:	d0b6      	beq.n	800c89a <_malloc_r+0x22>
 800c92c:	1b9b      	subs	r3, r3, r6
 800c92e:	50a3      	str	r3, [r4, r2]
 800c930:	e7b3      	b.n	800c89a <_malloc_r+0x22>
 800c932:	6862      	ldr	r2, [r4, #4]
 800c934:	42a3      	cmp	r3, r4
 800c936:	bf0c      	ite	eq
 800c938:	6032      	streq	r2, [r6, #0]
 800c93a:	605a      	strne	r2, [r3, #4]
 800c93c:	e7ec      	b.n	800c918 <_malloc_r+0xa0>
 800c93e:	4623      	mov	r3, r4
 800c940:	6864      	ldr	r4, [r4, #4]
 800c942:	e7b2      	b.n	800c8aa <_malloc_r+0x32>
 800c944:	4634      	mov	r4, r6
 800c946:	6876      	ldr	r6, [r6, #4]
 800c948:	e7b9      	b.n	800c8be <_malloc_r+0x46>
 800c94a:	230c      	movs	r3, #12
 800c94c:	603b      	str	r3, [r7, #0]
 800c94e:	4638      	mov	r0, r7
 800c950:	f000 fc48 	bl	800d1e4 <__malloc_unlock>
 800c954:	e7a1      	b.n	800c89a <_malloc_r+0x22>
 800c956:	6025      	str	r5, [r4, #0]
 800c958:	e7de      	b.n	800c918 <_malloc_r+0xa0>
 800c95a:	bf00      	nop
 800c95c:	20002ba4 	.word	0x20002ba4

0800c960 <iprintf>:
 800c960:	b40f      	push	{r0, r1, r2, r3}
 800c962:	4b0a      	ldr	r3, [pc, #40]	; (800c98c <iprintf+0x2c>)
 800c964:	b513      	push	{r0, r1, r4, lr}
 800c966:	681c      	ldr	r4, [r3, #0]
 800c968:	b124      	cbz	r4, 800c974 <iprintf+0x14>
 800c96a:	69a3      	ldr	r3, [r4, #24]
 800c96c:	b913      	cbnz	r3, 800c974 <iprintf+0x14>
 800c96e:	4620      	mov	r0, r4
 800c970:	f7ff fe1a 	bl	800c5a8 <__sinit>
 800c974:	ab05      	add	r3, sp, #20
 800c976:	9a04      	ldr	r2, [sp, #16]
 800c978:	68a1      	ldr	r1, [r4, #8]
 800c97a:	9301      	str	r3, [sp, #4]
 800c97c:	4620      	mov	r0, r4
 800c97e:	f000 fdbd 	bl	800d4fc <_vfiprintf_r>
 800c982:	b002      	add	sp, #8
 800c984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c988:	b004      	add	sp, #16
 800c98a:	4770      	bx	lr
 800c98c:	20000010 	.word	0x20000010

0800c990 <_puts_r>:
 800c990:	b570      	push	{r4, r5, r6, lr}
 800c992:	460e      	mov	r6, r1
 800c994:	4605      	mov	r5, r0
 800c996:	b118      	cbz	r0, 800c9a0 <_puts_r+0x10>
 800c998:	6983      	ldr	r3, [r0, #24]
 800c99a:	b90b      	cbnz	r3, 800c9a0 <_puts_r+0x10>
 800c99c:	f7ff fe04 	bl	800c5a8 <__sinit>
 800c9a0:	69ab      	ldr	r3, [r5, #24]
 800c9a2:	68ac      	ldr	r4, [r5, #8]
 800c9a4:	b913      	cbnz	r3, 800c9ac <_puts_r+0x1c>
 800c9a6:	4628      	mov	r0, r5
 800c9a8:	f7ff fdfe 	bl	800c5a8 <__sinit>
 800c9ac:	4b2c      	ldr	r3, [pc, #176]	; (800ca60 <_puts_r+0xd0>)
 800c9ae:	429c      	cmp	r4, r3
 800c9b0:	d120      	bne.n	800c9f4 <_puts_r+0x64>
 800c9b2:	686c      	ldr	r4, [r5, #4]
 800c9b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9b6:	07db      	lsls	r3, r3, #31
 800c9b8:	d405      	bmi.n	800c9c6 <_puts_r+0x36>
 800c9ba:	89a3      	ldrh	r3, [r4, #12]
 800c9bc:	0598      	lsls	r0, r3, #22
 800c9be:	d402      	bmi.n	800c9c6 <_puts_r+0x36>
 800c9c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9c2:	f7ff feb4 	bl	800c72e <__retarget_lock_acquire_recursive>
 800c9c6:	89a3      	ldrh	r3, [r4, #12]
 800c9c8:	0719      	lsls	r1, r3, #28
 800c9ca:	d51d      	bpl.n	800ca08 <_puts_r+0x78>
 800c9cc:	6923      	ldr	r3, [r4, #16]
 800c9ce:	b1db      	cbz	r3, 800ca08 <_puts_r+0x78>
 800c9d0:	3e01      	subs	r6, #1
 800c9d2:	68a3      	ldr	r3, [r4, #8]
 800c9d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c9d8:	3b01      	subs	r3, #1
 800c9da:	60a3      	str	r3, [r4, #8]
 800c9dc:	bb39      	cbnz	r1, 800ca2e <_puts_r+0x9e>
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	da38      	bge.n	800ca54 <_puts_r+0xc4>
 800c9e2:	4622      	mov	r2, r4
 800c9e4:	210a      	movs	r1, #10
 800c9e6:	4628      	mov	r0, r5
 800c9e8:	f000 f9aa 	bl	800cd40 <__swbuf_r>
 800c9ec:	3001      	adds	r0, #1
 800c9ee:	d011      	beq.n	800ca14 <_puts_r+0x84>
 800c9f0:	250a      	movs	r5, #10
 800c9f2:	e011      	b.n	800ca18 <_puts_r+0x88>
 800c9f4:	4b1b      	ldr	r3, [pc, #108]	; (800ca64 <_puts_r+0xd4>)
 800c9f6:	429c      	cmp	r4, r3
 800c9f8:	d101      	bne.n	800c9fe <_puts_r+0x6e>
 800c9fa:	68ac      	ldr	r4, [r5, #8]
 800c9fc:	e7da      	b.n	800c9b4 <_puts_r+0x24>
 800c9fe:	4b1a      	ldr	r3, [pc, #104]	; (800ca68 <_puts_r+0xd8>)
 800ca00:	429c      	cmp	r4, r3
 800ca02:	bf08      	it	eq
 800ca04:	68ec      	ldreq	r4, [r5, #12]
 800ca06:	e7d5      	b.n	800c9b4 <_puts_r+0x24>
 800ca08:	4621      	mov	r1, r4
 800ca0a:	4628      	mov	r0, r5
 800ca0c:	f000 f9fc 	bl	800ce08 <__swsetup_r>
 800ca10:	2800      	cmp	r0, #0
 800ca12:	d0dd      	beq.n	800c9d0 <_puts_r+0x40>
 800ca14:	f04f 35ff 	mov.w	r5, #4294967295
 800ca18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca1a:	07da      	lsls	r2, r3, #31
 800ca1c:	d405      	bmi.n	800ca2a <_puts_r+0x9a>
 800ca1e:	89a3      	ldrh	r3, [r4, #12]
 800ca20:	059b      	lsls	r3, r3, #22
 800ca22:	d402      	bmi.n	800ca2a <_puts_r+0x9a>
 800ca24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca26:	f7ff fe83 	bl	800c730 <__retarget_lock_release_recursive>
 800ca2a:	4628      	mov	r0, r5
 800ca2c:	bd70      	pop	{r4, r5, r6, pc}
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	da04      	bge.n	800ca3c <_puts_r+0xac>
 800ca32:	69a2      	ldr	r2, [r4, #24]
 800ca34:	429a      	cmp	r2, r3
 800ca36:	dc06      	bgt.n	800ca46 <_puts_r+0xb6>
 800ca38:	290a      	cmp	r1, #10
 800ca3a:	d004      	beq.n	800ca46 <_puts_r+0xb6>
 800ca3c:	6823      	ldr	r3, [r4, #0]
 800ca3e:	1c5a      	adds	r2, r3, #1
 800ca40:	6022      	str	r2, [r4, #0]
 800ca42:	7019      	strb	r1, [r3, #0]
 800ca44:	e7c5      	b.n	800c9d2 <_puts_r+0x42>
 800ca46:	4622      	mov	r2, r4
 800ca48:	4628      	mov	r0, r5
 800ca4a:	f000 f979 	bl	800cd40 <__swbuf_r>
 800ca4e:	3001      	adds	r0, #1
 800ca50:	d1bf      	bne.n	800c9d2 <_puts_r+0x42>
 800ca52:	e7df      	b.n	800ca14 <_puts_r+0x84>
 800ca54:	6823      	ldr	r3, [r4, #0]
 800ca56:	250a      	movs	r5, #10
 800ca58:	1c5a      	adds	r2, r3, #1
 800ca5a:	6022      	str	r2, [r4, #0]
 800ca5c:	701d      	strb	r5, [r3, #0]
 800ca5e:	e7db      	b.n	800ca18 <_puts_r+0x88>
 800ca60:	0800e410 	.word	0x0800e410
 800ca64:	0800e430 	.word	0x0800e430
 800ca68:	0800e3f0 	.word	0x0800e3f0

0800ca6c <puts>:
 800ca6c:	4b02      	ldr	r3, [pc, #8]	; (800ca78 <puts+0xc>)
 800ca6e:	4601      	mov	r1, r0
 800ca70:	6818      	ldr	r0, [r3, #0]
 800ca72:	f7ff bf8d 	b.w	800c990 <_puts_r>
 800ca76:	bf00      	nop
 800ca78:	20000010 	.word	0x20000010

0800ca7c <cleanup_glue>:
 800ca7c:	b538      	push	{r3, r4, r5, lr}
 800ca7e:	460c      	mov	r4, r1
 800ca80:	6809      	ldr	r1, [r1, #0]
 800ca82:	4605      	mov	r5, r0
 800ca84:	b109      	cbz	r1, 800ca8a <cleanup_glue+0xe>
 800ca86:	f7ff fff9 	bl	800ca7c <cleanup_glue>
 800ca8a:	4621      	mov	r1, r4
 800ca8c:	4628      	mov	r0, r5
 800ca8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca92:	f7ff be85 	b.w	800c7a0 <_free_r>
	...

0800ca98 <_reclaim_reent>:
 800ca98:	4b2c      	ldr	r3, [pc, #176]	; (800cb4c <_reclaim_reent+0xb4>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4283      	cmp	r3, r0
 800ca9e:	b570      	push	{r4, r5, r6, lr}
 800caa0:	4604      	mov	r4, r0
 800caa2:	d051      	beq.n	800cb48 <_reclaim_reent+0xb0>
 800caa4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800caa6:	b143      	cbz	r3, 800caba <_reclaim_reent+0x22>
 800caa8:	68db      	ldr	r3, [r3, #12]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d14a      	bne.n	800cb44 <_reclaim_reent+0xac>
 800caae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cab0:	6819      	ldr	r1, [r3, #0]
 800cab2:	b111      	cbz	r1, 800caba <_reclaim_reent+0x22>
 800cab4:	4620      	mov	r0, r4
 800cab6:	f7ff fe73 	bl	800c7a0 <_free_r>
 800caba:	6961      	ldr	r1, [r4, #20]
 800cabc:	b111      	cbz	r1, 800cac4 <_reclaim_reent+0x2c>
 800cabe:	4620      	mov	r0, r4
 800cac0:	f7ff fe6e 	bl	800c7a0 <_free_r>
 800cac4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cac6:	b111      	cbz	r1, 800cace <_reclaim_reent+0x36>
 800cac8:	4620      	mov	r0, r4
 800caca:	f7ff fe69 	bl	800c7a0 <_free_r>
 800cace:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cad0:	b111      	cbz	r1, 800cad8 <_reclaim_reent+0x40>
 800cad2:	4620      	mov	r0, r4
 800cad4:	f7ff fe64 	bl	800c7a0 <_free_r>
 800cad8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cada:	b111      	cbz	r1, 800cae2 <_reclaim_reent+0x4a>
 800cadc:	4620      	mov	r0, r4
 800cade:	f7ff fe5f 	bl	800c7a0 <_free_r>
 800cae2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cae4:	b111      	cbz	r1, 800caec <_reclaim_reent+0x54>
 800cae6:	4620      	mov	r0, r4
 800cae8:	f7ff fe5a 	bl	800c7a0 <_free_r>
 800caec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800caee:	b111      	cbz	r1, 800caf6 <_reclaim_reent+0x5e>
 800caf0:	4620      	mov	r0, r4
 800caf2:	f7ff fe55 	bl	800c7a0 <_free_r>
 800caf6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800caf8:	b111      	cbz	r1, 800cb00 <_reclaim_reent+0x68>
 800cafa:	4620      	mov	r0, r4
 800cafc:	f7ff fe50 	bl	800c7a0 <_free_r>
 800cb00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb02:	b111      	cbz	r1, 800cb0a <_reclaim_reent+0x72>
 800cb04:	4620      	mov	r0, r4
 800cb06:	f7ff fe4b 	bl	800c7a0 <_free_r>
 800cb0a:	69a3      	ldr	r3, [r4, #24]
 800cb0c:	b1e3      	cbz	r3, 800cb48 <_reclaim_reent+0xb0>
 800cb0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cb10:	4620      	mov	r0, r4
 800cb12:	4798      	blx	r3
 800cb14:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cb16:	b1b9      	cbz	r1, 800cb48 <_reclaim_reent+0xb0>
 800cb18:	4620      	mov	r0, r4
 800cb1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cb1e:	f7ff bfad 	b.w	800ca7c <cleanup_glue>
 800cb22:	5949      	ldr	r1, [r1, r5]
 800cb24:	b941      	cbnz	r1, 800cb38 <_reclaim_reent+0xa0>
 800cb26:	3504      	adds	r5, #4
 800cb28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb2a:	2d80      	cmp	r5, #128	; 0x80
 800cb2c:	68d9      	ldr	r1, [r3, #12]
 800cb2e:	d1f8      	bne.n	800cb22 <_reclaim_reent+0x8a>
 800cb30:	4620      	mov	r0, r4
 800cb32:	f7ff fe35 	bl	800c7a0 <_free_r>
 800cb36:	e7ba      	b.n	800caae <_reclaim_reent+0x16>
 800cb38:	680e      	ldr	r6, [r1, #0]
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	f7ff fe30 	bl	800c7a0 <_free_r>
 800cb40:	4631      	mov	r1, r6
 800cb42:	e7ef      	b.n	800cb24 <_reclaim_reent+0x8c>
 800cb44:	2500      	movs	r5, #0
 800cb46:	e7ef      	b.n	800cb28 <_reclaim_reent+0x90>
 800cb48:	bd70      	pop	{r4, r5, r6, pc}
 800cb4a:	bf00      	nop
 800cb4c:	20000010 	.word	0x20000010

0800cb50 <_sbrk_r>:
 800cb50:	b538      	push	{r3, r4, r5, lr}
 800cb52:	4d06      	ldr	r5, [pc, #24]	; (800cb6c <_sbrk_r+0x1c>)
 800cb54:	2300      	movs	r3, #0
 800cb56:	4604      	mov	r4, r0
 800cb58:	4608      	mov	r0, r1
 800cb5a:	602b      	str	r3, [r5, #0]
 800cb5c:	f7f4 fe8c 	bl	8001878 <_sbrk>
 800cb60:	1c43      	adds	r3, r0, #1
 800cb62:	d102      	bne.n	800cb6a <_sbrk_r+0x1a>
 800cb64:	682b      	ldr	r3, [r5, #0]
 800cb66:	b103      	cbz	r3, 800cb6a <_sbrk_r+0x1a>
 800cb68:	6023      	str	r3, [r4, #0]
 800cb6a:	bd38      	pop	{r3, r4, r5, pc}
 800cb6c:	20002bac 	.word	0x20002bac

0800cb70 <siprintf>:
 800cb70:	b40e      	push	{r1, r2, r3}
 800cb72:	b500      	push	{lr}
 800cb74:	b09c      	sub	sp, #112	; 0x70
 800cb76:	ab1d      	add	r3, sp, #116	; 0x74
 800cb78:	9002      	str	r0, [sp, #8]
 800cb7a:	9006      	str	r0, [sp, #24]
 800cb7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cb80:	4809      	ldr	r0, [pc, #36]	; (800cba8 <siprintf+0x38>)
 800cb82:	9107      	str	r1, [sp, #28]
 800cb84:	9104      	str	r1, [sp, #16]
 800cb86:	4909      	ldr	r1, [pc, #36]	; (800cbac <siprintf+0x3c>)
 800cb88:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb8c:	9105      	str	r1, [sp, #20]
 800cb8e:	6800      	ldr	r0, [r0, #0]
 800cb90:	9301      	str	r3, [sp, #4]
 800cb92:	a902      	add	r1, sp, #8
 800cb94:	f000 fb88 	bl	800d2a8 <_svfiprintf_r>
 800cb98:	9b02      	ldr	r3, [sp, #8]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	701a      	strb	r2, [r3, #0]
 800cb9e:	b01c      	add	sp, #112	; 0x70
 800cba0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cba4:	b003      	add	sp, #12
 800cba6:	4770      	bx	lr
 800cba8:	20000010 	.word	0x20000010
 800cbac:	ffff0208 	.word	0xffff0208

0800cbb0 <__sread>:
 800cbb0:	b510      	push	{r4, lr}
 800cbb2:	460c      	mov	r4, r1
 800cbb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbb8:	f000 ff64 	bl	800da84 <_read_r>
 800cbbc:	2800      	cmp	r0, #0
 800cbbe:	bfab      	itete	ge
 800cbc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cbc2:	89a3      	ldrhlt	r3, [r4, #12]
 800cbc4:	181b      	addge	r3, r3, r0
 800cbc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cbca:	bfac      	ite	ge
 800cbcc:	6563      	strge	r3, [r4, #84]	; 0x54
 800cbce:	81a3      	strhlt	r3, [r4, #12]
 800cbd0:	bd10      	pop	{r4, pc}

0800cbd2 <__swrite>:
 800cbd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd6:	461f      	mov	r7, r3
 800cbd8:	898b      	ldrh	r3, [r1, #12]
 800cbda:	05db      	lsls	r3, r3, #23
 800cbdc:	4605      	mov	r5, r0
 800cbde:	460c      	mov	r4, r1
 800cbe0:	4616      	mov	r6, r2
 800cbe2:	d505      	bpl.n	800cbf0 <__swrite+0x1e>
 800cbe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbe8:	2302      	movs	r3, #2
 800cbea:	2200      	movs	r2, #0
 800cbec:	f000 fa7c 	bl	800d0e8 <_lseek_r>
 800cbf0:	89a3      	ldrh	r3, [r4, #12]
 800cbf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cbfa:	81a3      	strh	r3, [r4, #12]
 800cbfc:	4632      	mov	r2, r6
 800cbfe:	463b      	mov	r3, r7
 800cc00:	4628      	mov	r0, r5
 800cc02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc06:	f000 b8ed 	b.w	800cde4 <_write_r>

0800cc0a <__sseek>:
 800cc0a:	b510      	push	{r4, lr}
 800cc0c:	460c      	mov	r4, r1
 800cc0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc12:	f000 fa69 	bl	800d0e8 <_lseek_r>
 800cc16:	1c43      	adds	r3, r0, #1
 800cc18:	89a3      	ldrh	r3, [r4, #12]
 800cc1a:	bf15      	itete	ne
 800cc1c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cc1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cc22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cc26:	81a3      	strheq	r3, [r4, #12]
 800cc28:	bf18      	it	ne
 800cc2a:	81a3      	strhne	r3, [r4, #12]
 800cc2c:	bd10      	pop	{r4, pc}

0800cc2e <__sclose>:
 800cc2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc32:	f000 b975 	b.w	800cf20 <_close_r>

0800cc36 <strncpy>:
 800cc36:	b510      	push	{r4, lr}
 800cc38:	3901      	subs	r1, #1
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	b132      	cbz	r2, 800cc4c <strncpy+0x16>
 800cc3e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cc42:	f803 4b01 	strb.w	r4, [r3], #1
 800cc46:	3a01      	subs	r2, #1
 800cc48:	2c00      	cmp	r4, #0
 800cc4a:	d1f7      	bne.n	800cc3c <strncpy+0x6>
 800cc4c:	441a      	add	r2, r3
 800cc4e:	2100      	movs	r1, #0
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d100      	bne.n	800cc56 <strncpy+0x20>
 800cc54:	bd10      	pop	{r4, pc}
 800cc56:	f803 1b01 	strb.w	r1, [r3], #1
 800cc5a:	e7f9      	b.n	800cc50 <strncpy+0x1a>

0800cc5c <strstr>:
 800cc5c:	780a      	ldrb	r2, [r1, #0]
 800cc5e:	b570      	push	{r4, r5, r6, lr}
 800cc60:	b96a      	cbnz	r2, 800cc7e <strstr+0x22>
 800cc62:	bd70      	pop	{r4, r5, r6, pc}
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d109      	bne.n	800cc7c <strstr+0x20>
 800cc68:	460c      	mov	r4, r1
 800cc6a:	4605      	mov	r5, r0
 800cc6c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d0f6      	beq.n	800cc62 <strstr+0x6>
 800cc74:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800cc78:	429e      	cmp	r6, r3
 800cc7a:	d0f7      	beq.n	800cc6c <strstr+0x10>
 800cc7c:	3001      	adds	r0, #1
 800cc7e:	7803      	ldrb	r3, [r0, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d1ef      	bne.n	800cc64 <strstr+0x8>
 800cc84:	4618      	mov	r0, r3
 800cc86:	e7ec      	b.n	800cc62 <strstr+0x6>

0800cc88 <strtok>:
 800cc88:	4b16      	ldr	r3, [pc, #88]	; (800cce4 <strtok+0x5c>)
 800cc8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cc8c:	681e      	ldr	r6, [r3, #0]
 800cc8e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800cc90:	4605      	mov	r5, r0
 800cc92:	b9fc      	cbnz	r4, 800ccd4 <strtok+0x4c>
 800cc94:	2050      	movs	r0, #80	; 0x50
 800cc96:	9101      	str	r1, [sp, #4]
 800cc98:	f7ff fd4c 	bl	800c734 <malloc>
 800cc9c:	9901      	ldr	r1, [sp, #4]
 800cc9e:	65b0      	str	r0, [r6, #88]	; 0x58
 800cca0:	4602      	mov	r2, r0
 800cca2:	b920      	cbnz	r0, 800ccae <strtok+0x26>
 800cca4:	4b10      	ldr	r3, [pc, #64]	; (800cce8 <strtok+0x60>)
 800cca6:	4811      	ldr	r0, [pc, #68]	; (800ccec <strtok+0x64>)
 800cca8:	2157      	movs	r1, #87	; 0x57
 800ccaa:	f000 f91b 	bl	800cee4 <__assert_func>
 800ccae:	e9c0 4400 	strd	r4, r4, [r0]
 800ccb2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ccb6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ccba:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ccbe:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ccc2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ccc6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ccca:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ccce:	6184      	str	r4, [r0, #24]
 800ccd0:	7704      	strb	r4, [r0, #28]
 800ccd2:	6244      	str	r4, [r0, #36]	; 0x24
 800ccd4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	4628      	mov	r0, r5
 800ccda:	b002      	add	sp, #8
 800ccdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cce0:	f000 b806 	b.w	800ccf0 <__strtok_r>
 800cce4:	20000010 	.word	0x20000010
 800cce8:	0800e454 	.word	0x0800e454
 800ccec:	0800e46b 	.word	0x0800e46b

0800ccf0 <__strtok_r>:
 800ccf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccf2:	b908      	cbnz	r0, 800ccf8 <__strtok_r+0x8>
 800ccf4:	6810      	ldr	r0, [r2, #0]
 800ccf6:	b188      	cbz	r0, 800cd1c <__strtok_r+0x2c>
 800ccf8:	4604      	mov	r4, r0
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800cd00:	460f      	mov	r7, r1
 800cd02:	f817 6b01 	ldrb.w	r6, [r7], #1
 800cd06:	b91e      	cbnz	r6, 800cd10 <__strtok_r+0x20>
 800cd08:	b965      	cbnz	r5, 800cd24 <__strtok_r+0x34>
 800cd0a:	6015      	str	r5, [r2, #0]
 800cd0c:	4628      	mov	r0, r5
 800cd0e:	e005      	b.n	800cd1c <__strtok_r+0x2c>
 800cd10:	42b5      	cmp	r5, r6
 800cd12:	d1f6      	bne.n	800cd02 <__strtok_r+0x12>
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d1f0      	bne.n	800ccfa <__strtok_r+0xa>
 800cd18:	6014      	str	r4, [r2, #0]
 800cd1a:	7003      	strb	r3, [r0, #0]
 800cd1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd1e:	461c      	mov	r4, r3
 800cd20:	e00c      	b.n	800cd3c <__strtok_r+0x4c>
 800cd22:	b915      	cbnz	r5, 800cd2a <__strtok_r+0x3a>
 800cd24:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cd28:	460e      	mov	r6, r1
 800cd2a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800cd2e:	42ab      	cmp	r3, r5
 800cd30:	d1f7      	bne.n	800cd22 <__strtok_r+0x32>
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d0f3      	beq.n	800cd1e <__strtok_r+0x2e>
 800cd36:	2300      	movs	r3, #0
 800cd38:	f804 3c01 	strb.w	r3, [r4, #-1]
 800cd3c:	6014      	str	r4, [r2, #0]
 800cd3e:	e7ed      	b.n	800cd1c <__strtok_r+0x2c>

0800cd40 <__swbuf_r>:
 800cd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd42:	460e      	mov	r6, r1
 800cd44:	4614      	mov	r4, r2
 800cd46:	4605      	mov	r5, r0
 800cd48:	b118      	cbz	r0, 800cd52 <__swbuf_r+0x12>
 800cd4a:	6983      	ldr	r3, [r0, #24]
 800cd4c:	b90b      	cbnz	r3, 800cd52 <__swbuf_r+0x12>
 800cd4e:	f7ff fc2b 	bl	800c5a8 <__sinit>
 800cd52:	4b21      	ldr	r3, [pc, #132]	; (800cdd8 <__swbuf_r+0x98>)
 800cd54:	429c      	cmp	r4, r3
 800cd56:	d12b      	bne.n	800cdb0 <__swbuf_r+0x70>
 800cd58:	686c      	ldr	r4, [r5, #4]
 800cd5a:	69a3      	ldr	r3, [r4, #24]
 800cd5c:	60a3      	str	r3, [r4, #8]
 800cd5e:	89a3      	ldrh	r3, [r4, #12]
 800cd60:	071a      	lsls	r2, r3, #28
 800cd62:	d52f      	bpl.n	800cdc4 <__swbuf_r+0x84>
 800cd64:	6923      	ldr	r3, [r4, #16]
 800cd66:	b36b      	cbz	r3, 800cdc4 <__swbuf_r+0x84>
 800cd68:	6923      	ldr	r3, [r4, #16]
 800cd6a:	6820      	ldr	r0, [r4, #0]
 800cd6c:	1ac0      	subs	r0, r0, r3
 800cd6e:	6963      	ldr	r3, [r4, #20]
 800cd70:	b2f6      	uxtb	r6, r6
 800cd72:	4283      	cmp	r3, r0
 800cd74:	4637      	mov	r7, r6
 800cd76:	dc04      	bgt.n	800cd82 <__swbuf_r+0x42>
 800cd78:	4621      	mov	r1, r4
 800cd7a:	4628      	mov	r0, r5
 800cd7c:	f000 f966 	bl	800d04c <_fflush_r>
 800cd80:	bb30      	cbnz	r0, 800cdd0 <__swbuf_r+0x90>
 800cd82:	68a3      	ldr	r3, [r4, #8]
 800cd84:	3b01      	subs	r3, #1
 800cd86:	60a3      	str	r3, [r4, #8]
 800cd88:	6823      	ldr	r3, [r4, #0]
 800cd8a:	1c5a      	adds	r2, r3, #1
 800cd8c:	6022      	str	r2, [r4, #0]
 800cd8e:	701e      	strb	r6, [r3, #0]
 800cd90:	6963      	ldr	r3, [r4, #20]
 800cd92:	3001      	adds	r0, #1
 800cd94:	4283      	cmp	r3, r0
 800cd96:	d004      	beq.n	800cda2 <__swbuf_r+0x62>
 800cd98:	89a3      	ldrh	r3, [r4, #12]
 800cd9a:	07db      	lsls	r3, r3, #31
 800cd9c:	d506      	bpl.n	800cdac <__swbuf_r+0x6c>
 800cd9e:	2e0a      	cmp	r6, #10
 800cda0:	d104      	bne.n	800cdac <__swbuf_r+0x6c>
 800cda2:	4621      	mov	r1, r4
 800cda4:	4628      	mov	r0, r5
 800cda6:	f000 f951 	bl	800d04c <_fflush_r>
 800cdaa:	b988      	cbnz	r0, 800cdd0 <__swbuf_r+0x90>
 800cdac:	4638      	mov	r0, r7
 800cdae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdb0:	4b0a      	ldr	r3, [pc, #40]	; (800cddc <__swbuf_r+0x9c>)
 800cdb2:	429c      	cmp	r4, r3
 800cdb4:	d101      	bne.n	800cdba <__swbuf_r+0x7a>
 800cdb6:	68ac      	ldr	r4, [r5, #8]
 800cdb8:	e7cf      	b.n	800cd5a <__swbuf_r+0x1a>
 800cdba:	4b09      	ldr	r3, [pc, #36]	; (800cde0 <__swbuf_r+0xa0>)
 800cdbc:	429c      	cmp	r4, r3
 800cdbe:	bf08      	it	eq
 800cdc0:	68ec      	ldreq	r4, [r5, #12]
 800cdc2:	e7ca      	b.n	800cd5a <__swbuf_r+0x1a>
 800cdc4:	4621      	mov	r1, r4
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	f000 f81e 	bl	800ce08 <__swsetup_r>
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	d0cb      	beq.n	800cd68 <__swbuf_r+0x28>
 800cdd0:	f04f 37ff 	mov.w	r7, #4294967295
 800cdd4:	e7ea      	b.n	800cdac <__swbuf_r+0x6c>
 800cdd6:	bf00      	nop
 800cdd8:	0800e410 	.word	0x0800e410
 800cddc:	0800e430 	.word	0x0800e430
 800cde0:	0800e3f0 	.word	0x0800e3f0

0800cde4 <_write_r>:
 800cde4:	b538      	push	{r3, r4, r5, lr}
 800cde6:	4d07      	ldr	r5, [pc, #28]	; (800ce04 <_write_r+0x20>)
 800cde8:	4604      	mov	r4, r0
 800cdea:	4608      	mov	r0, r1
 800cdec:	4611      	mov	r1, r2
 800cdee:	2200      	movs	r2, #0
 800cdf0:	602a      	str	r2, [r5, #0]
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	f7f4 fcef 	bl	80017d6 <_write>
 800cdf8:	1c43      	adds	r3, r0, #1
 800cdfa:	d102      	bne.n	800ce02 <_write_r+0x1e>
 800cdfc:	682b      	ldr	r3, [r5, #0]
 800cdfe:	b103      	cbz	r3, 800ce02 <_write_r+0x1e>
 800ce00:	6023      	str	r3, [r4, #0]
 800ce02:	bd38      	pop	{r3, r4, r5, pc}
 800ce04:	20002bac 	.word	0x20002bac

0800ce08 <__swsetup_r>:
 800ce08:	4b32      	ldr	r3, [pc, #200]	; (800ced4 <__swsetup_r+0xcc>)
 800ce0a:	b570      	push	{r4, r5, r6, lr}
 800ce0c:	681d      	ldr	r5, [r3, #0]
 800ce0e:	4606      	mov	r6, r0
 800ce10:	460c      	mov	r4, r1
 800ce12:	b125      	cbz	r5, 800ce1e <__swsetup_r+0x16>
 800ce14:	69ab      	ldr	r3, [r5, #24]
 800ce16:	b913      	cbnz	r3, 800ce1e <__swsetup_r+0x16>
 800ce18:	4628      	mov	r0, r5
 800ce1a:	f7ff fbc5 	bl	800c5a8 <__sinit>
 800ce1e:	4b2e      	ldr	r3, [pc, #184]	; (800ced8 <__swsetup_r+0xd0>)
 800ce20:	429c      	cmp	r4, r3
 800ce22:	d10f      	bne.n	800ce44 <__swsetup_r+0x3c>
 800ce24:	686c      	ldr	r4, [r5, #4]
 800ce26:	89a3      	ldrh	r3, [r4, #12]
 800ce28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce2c:	0719      	lsls	r1, r3, #28
 800ce2e:	d42c      	bmi.n	800ce8a <__swsetup_r+0x82>
 800ce30:	06dd      	lsls	r5, r3, #27
 800ce32:	d411      	bmi.n	800ce58 <__swsetup_r+0x50>
 800ce34:	2309      	movs	r3, #9
 800ce36:	6033      	str	r3, [r6, #0]
 800ce38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ce3c:	81a3      	strh	r3, [r4, #12]
 800ce3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ce42:	e03e      	b.n	800cec2 <__swsetup_r+0xba>
 800ce44:	4b25      	ldr	r3, [pc, #148]	; (800cedc <__swsetup_r+0xd4>)
 800ce46:	429c      	cmp	r4, r3
 800ce48:	d101      	bne.n	800ce4e <__swsetup_r+0x46>
 800ce4a:	68ac      	ldr	r4, [r5, #8]
 800ce4c:	e7eb      	b.n	800ce26 <__swsetup_r+0x1e>
 800ce4e:	4b24      	ldr	r3, [pc, #144]	; (800cee0 <__swsetup_r+0xd8>)
 800ce50:	429c      	cmp	r4, r3
 800ce52:	bf08      	it	eq
 800ce54:	68ec      	ldreq	r4, [r5, #12]
 800ce56:	e7e6      	b.n	800ce26 <__swsetup_r+0x1e>
 800ce58:	0758      	lsls	r0, r3, #29
 800ce5a:	d512      	bpl.n	800ce82 <__swsetup_r+0x7a>
 800ce5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce5e:	b141      	cbz	r1, 800ce72 <__swsetup_r+0x6a>
 800ce60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce64:	4299      	cmp	r1, r3
 800ce66:	d002      	beq.n	800ce6e <__swsetup_r+0x66>
 800ce68:	4630      	mov	r0, r6
 800ce6a:	f7ff fc99 	bl	800c7a0 <_free_r>
 800ce6e:	2300      	movs	r3, #0
 800ce70:	6363      	str	r3, [r4, #52]	; 0x34
 800ce72:	89a3      	ldrh	r3, [r4, #12]
 800ce74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ce78:	81a3      	strh	r3, [r4, #12]
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	6063      	str	r3, [r4, #4]
 800ce7e:	6923      	ldr	r3, [r4, #16]
 800ce80:	6023      	str	r3, [r4, #0]
 800ce82:	89a3      	ldrh	r3, [r4, #12]
 800ce84:	f043 0308 	orr.w	r3, r3, #8
 800ce88:	81a3      	strh	r3, [r4, #12]
 800ce8a:	6923      	ldr	r3, [r4, #16]
 800ce8c:	b94b      	cbnz	r3, 800cea2 <__swsetup_r+0x9a>
 800ce8e:	89a3      	ldrh	r3, [r4, #12]
 800ce90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ce94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce98:	d003      	beq.n	800cea2 <__swsetup_r+0x9a>
 800ce9a:	4621      	mov	r1, r4
 800ce9c:	4630      	mov	r0, r6
 800ce9e:	f000 f95b 	bl	800d158 <__smakebuf_r>
 800cea2:	89a0      	ldrh	r0, [r4, #12]
 800cea4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cea8:	f010 0301 	ands.w	r3, r0, #1
 800ceac:	d00a      	beq.n	800cec4 <__swsetup_r+0xbc>
 800ceae:	2300      	movs	r3, #0
 800ceb0:	60a3      	str	r3, [r4, #8]
 800ceb2:	6963      	ldr	r3, [r4, #20]
 800ceb4:	425b      	negs	r3, r3
 800ceb6:	61a3      	str	r3, [r4, #24]
 800ceb8:	6923      	ldr	r3, [r4, #16]
 800ceba:	b943      	cbnz	r3, 800cece <__swsetup_r+0xc6>
 800cebc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cec0:	d1ba      	bne.n	800ce38 <__swsetup_r+0x30>
 800cec2:	bd70      	pop	{r4, r5, r6, pc}
 800cec4:	0781      	lsls	r1, r0, #30
 800cec6:	bf58      	it	pl
 800cec8:	6963      	ldrpl	r3, [r4, #20]
 800ceca:	60a3      	str	r3, [r4, #8]
 800cecc:	e7f4      	b.n	800ceb8 <__swsetup_r+0xb0>
 800cece:	2000      	movs	r0, #0
 800ced0:	e7f7      	b.n	800cec2 <__swsetup_r+0xba>
 800ced2:	bf00      	nop
 800ced4:	20000010 	.word	0x20000010
 800ced8:	0800e410 	.word	0x0800e410
 800cedc:	0800e430 	.word	0x0800e430
 800cee0:	0800e3f0 	.word	0x0800e3f0

0800cee4 <__assert_func>:
 800cee4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cee6:	4614      	mov	r4, r2
 800cee8:	461a      	mov	r2, r3
 800ceea:	4b09      	ldr	r3, [pc, #36]	; (800cf10 <__assert_func+0x2c>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4605      	mov	r5, r0
 800cef0:	68d8      	ldr	r0, [r3, #12]
 800cef2:	b14c      	cbz	r4, 800cf08 <__assert_func+0x24>
 800cef4:	4b07      	ldr	r3, [pc, #28]	; (800cf14 <__assert_func+0x30>)
 800cef6:	9100      	str	r1, [sp, #0]
 800cef8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cefc:	4906      	ldr	r1, [pc, #24]	; (800cf18 <__assert_func+0x34>)
 800cefe:	462b      	mov	r3, r5
 800cf00:	f000 f8e0 	bl	800d0c4 <fiprintf>
 800cf04:	f000 fdd0 	bl	800daa8 <abort>
 800cf08:	4b04      	ldr	r3, [pc, #16]	; (800cf1c <__assert_func+0x38>)
 800cf0a:	461c      	mov	r4, r3
 800cf0c:	e7f3      	b.n	800cef6 <__assert_func+0x12>
 800cf0e:	bf00      	nop
 800cf10:	20000010 	.word	0x20000010
 800cf14:	0800e4c8 	.word	0x0800e4c8
 800cf18:	0800e4d5 	.word	0x0800e4d5
 800cf1c:	0800e503 	.word	0x0800e503

0800cf20 <_close_r>:
 800cf20:	b538      	push	{r3, r4, r5, lr}
 800cf22:	4d06      	ldr	r5, [pc, #24]	; (800cf3c <_close_r+0x1c>)
 800cf24:	2300      	movs	r3, #0
 800cf26:	4604      	mov	r4, r0
 800cf28:	4608      	mov	r0, r1
 800cf2a:	602b      	str	r3, [r5, #0]
 800cf2c:	f7f4 fc6f 	bl	800180e <_close>
 800cf30:	1c43      	adds	r3, r0, #1
 800cf32:	d102      	bne.n	800cf3a <_close_r+0x1a>
 800cf34:	682b      	ldr	r3, [r5, #0]
 800cf36:	b103      	cbz	r3, 800cf3a <_close_r+0x1a>
 800cf38:	6023      	str	r3, [r4, #0]
 800cf3a:	bd38      	pop	{r3, r4, r5, pc}
 800cf3c:	20002bac 	.word	0x20002bac

0800cf40 <__sflush_r>:
 800cf40:	898a      	ldrh	r2, [r1, #12]
 800cf42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf46:	4605      	mov	r5, r0
 800cf48:	0710      	lsls	r0, r2, #28
 800cf4a:	460c      	mov	r4, r1
 800cf4c:	d458      	bmi.n	800d000 <__sflush_r+0xc0>
 800cf4e:	684b      	ldr	r3, [r1, #4]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	dc05      	bgt.n	800cf60 <__sflush_r+0x20>
 800cf54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	dc02      	bgt.n	800cf60 <__sflush_r+0x20>
 800cf5a:	2000      	movs	r0, #0
 800cf5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf62:	2e00      	cmp	r6, #0
 800cf64:	d0f9      	beq.n	800cf5a <__sflush_r+0x1a>
 800cf66:	2300      	movs	r3, #0
 800cf68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf6c:	682f      	ldr	r7, [r5, #0]
 800cf6e:	602b      	str	r3, [r5, #0]
 800cf70:	d032      	beq.n	800cfd8 <__sflush_r+0x98>
 800cf72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf74:	89a3      	ldrh	r3, [r4, #12]
 800cf76:	075a      	lsls	r2, r3, #29
 800cf78:	d505      	bpl.n	800cf86 <__sflush_r+0x46>
 800cf7a:	6863      	ldr	r3, [r4, #4]
 800cf7c:	1ac0      	subs	r0, r0, r3
 800cf7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf80:	b10b      	cbz	r3, 800cf86 <__sflush_r+0x46>
 800cf82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf84:	1ac0      	subs	r0, r0, r3
 800cf86:	2300      	movs	r3, #0
 800cf88:	4602      	mov	r2, r0
 800cf8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf8c:	6a21      	ldr	r1, [r4, #32]
 800cf8e:	4628      	mov	r0, r5
 800cf90:	47b0      	blx	r6
 800cf92:	1c43      	adds	r3, r0, #1
 800cf94:	89a3      	ldrh	r3, [r4, #12]
 800cf96:	d106      	bne.n	800cfa6 <__sflush_r+0x66>
 800cf98:	6829      	ldr	r1, [r5, #0]
 800cf9a:	291d      	cmp	r1, #29
 800cf9c:	d82c      	bhi.n	800cff8 <__sflush_r+0xb8>
 800cf9e:	4a2a      	ldr	r2, [pc, #168]	; (800d048 <__sflush_r+0x108>)
 800cfa0:	40ca      	lsrs	r2, r1
 800cfa2:	07d6      	lsls	r6, r2, #31
 800cfa4:	d528      	bpl.n	800cff8 <__sflush_r+0xb8>
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	6062      	str	r2, [r4, #4]
 800cfaa:	04d9      	lsls	r1, r3, #19
 800cfac:	6922      	ldr	r2, [r4, #16]
 800cfae:	6022      	str	r2, [r4, #0]
 800cfb0:	d504      	bpl.n	800cfbc <__sflush_r+0x7c>
 800cfb2:	1c42      	adds	r2, r0, #1
 800cfb4:	d101      	bne.n	800cfba <__sflush_r+0x7a>
 800cfb6:	682b      	ldr	r3, [r5, #0]
 800cfb8:	b903      	cbnz	r3, 800cfbc <__sflush_r+0x7c>
 800cfba:	6560      	str	r0, [r4, #84]	; 0x54
 800cfbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfbe:	602f      	str	r7, [r5, #0]
 800cfc0:	2900      	cmp	r1, #0
 800cfc2:	d0ca      	beq.n	800cf5a <__sflush_r+0x1a>
 800cfc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfc8:	4299      	cmp	r1, r3
 800cfca:	d002      	beq.n	800cfd2 <__sflush_r+0x92>
 800cfcc:	4628      	mov	r0, r5
 800cfce:	f7ff fbe7 	bl	800c7a0 <_free_r>
 800cfd2:	2000      	movs	r0, #0
 800cfd4:	6360      	str	r0, [r4, #52]	; 0x34
 800cfd6:	e7c1      	b.n	800cf5c <__sflush_r+0x1c>
 800cfd8:	6a21      	ldr	r1, [r4, #32]
 800cfda:	2301      	movs	r3, #1
 800cfdc:	4628      	mov	r0, r5
 800cfde:	47b0      	blx	r6
 800cfe0:	1c41      	adds	r1, r0, #1
 800cfe2:	d1c7      	bne.n	800cf74 <__sflush_r+0x34>
 800cfe4:	682b      	ldr	r3, [r5, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d0c4      	beq.n	800cf74 <__sflush_r+0x34>
 800cfea:	2b1d      	cmp	r3, #29
 800cfec:	d001      	beq.n	800cff2 <__sflush_r+0xb2>
 800cfee:	2b16      	cmp	r3, #22
 800cff0:	d101      	bne.n	800cff6 <__sflush_r+0xb6>
 800cff2:	602f      	str	r7, [r5, #0]
 800cff4:	e7b1      	b.n	800cf5a <__sflush_r+0x1a>
 800cff6:	89a3      	ldrh	r3, [r4, #12]
 800cff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cffc:	81a3      	strh	r3, [r4, #12]
 800cffe:	e7ad      	b.n	800cf5c <__sflush_r+0x1c>
 800d000:	690f      	ldr	r7, [r1, #16]
 800d002:	2f00      	cmp	r7, #0
 800d004:	d0a9      	beq.n	800cf5a <__sflush_r+0x1a>
 800d006:	0793      	lsls	r3, r2, #30
 800d008:	680e      	ldr	r6, [r1, #0]
 800d00a:	bf08      	it	eq
 800d00c:	694b      	ldreq	r3, [r1, #20]
 800d00e:	600f      	str	r7, [r1, #0]
 800d010:	bf18      	it	ne
 800d012:	2300      	movne	r3, #0
 800d014:	eba6 0807 	sub.w	r8, r6, r7
 800d018:	608b      	str	r3, [r1, #8]
 800d01a:	f1b8 0f00 	cmp.w	r8, #0
 800d01e:	dd9c      	ble.n	800cf5a <__sflush_r+0x1a>
 800d020:	6a21      	ldr	r1, [r4, #32]
 800d022:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d024:	4643      	mov	r3, r8
 800d026:	463a      	mov	r2, r7
 800d028:	4628      	mov	r0, r5
 800d02a:	47b0      	blx	r6
 800d02c:	2800      	cmp	r0, #0
 800d02e:	dc06      	bgt.n	800d03e <__sflush_r+0xfe>
 800d030:	89a3      	ldrh	r3, [r4, #12]
 800d032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d036:	81a3      	strh	r3, [r4, #12]
 800d038:	f04f 30ff 	mov.w	r0, #4294967295
 800d03c:	e78e      	b.n	800cf5c <__sflush_r+0x1c>
 800d03e:	4407      	add	r7, r0
 800d040:	eba8 0800 	sub.w	r8, r8, r0
 800d044:	e7e9      	b.n	800d01a <__sflush_r+0xda>
 800d046:	bf00      	nop
 800d048:	20400001 	.word	0x20400001

0800d04c <_fflush_r>:
 800d04c:	b538      	push	{r3, r4, r5, lr}
 800d04e:	690b      	ldr	r3, [r1, #16]
 800d050:	4605      	mov	r5, r0
 800d052:	460c      	mov	r4, r1
 800d054:	b913      	cbnz	r3, 800d05c <_fflush_r+0x10>
 800d056:	2500      	movs	r5, #0
 800d058:	4628      	mov	r0, r5
 800d05a:	bd38      	pop	{r3, r4, r5, pc}
 800d05c:	b118      	cbz	r0, 800d066 <_fflush_r+0x1a>
 800d05e:	6983      	ldr	r3, [r0, #24]
 800d060:	b90b      	cbnz	r3, 800d066 <_fflush_r+0x1a>
 800d062:	f7ff faa1 	bl	800c5a8 <__sinit>
 800d066:	4b14      	ldr	r3, [pc, #80]	; (800d0b8 <_fflush_r+0x6c>)
 800d068:	429c      	cmp	r4, r3
 800d06a:	d11b      	bne.n	800d0a4 <_fflush_r+0x58>
 800d06c:	686c      	ldr	r4, [r5, #4]
 800d06e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d0ef      	beq.n	800d056 <_fflush_r+0xa>
 800d076:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d078:	07d0      	lsls	r0, r2, #31
 800d07a:	d404      	bmi.n	800d086 <_fflush_r+0x3a>
 800d07c:	0599      	lsls	r1, r3, #22
 800d07e:	d402      	bmi.n	800d086 <_fflush_r+0x3a>
 800d080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d082:	f7ff fb54 	bl	800c72e <__retarget_lock_acquire_recursive>
 800d086:	4628      	mov	r0, r5
 800d088:	4621      	mov	r1, r4
 800d08a:	f7ff ff59 	bl	800cf40 <__sflush_r>
 800d08e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d090:	07da      	lsls	r2, r3, #31
 800d092:	4605      	mov	r5, r0
 800d094:	d4e0      	bmi.n	800d058 <_fflush_r+0xc>
 800d096:	89a3      	ldrh	r3, [r4, #12]
 800d098:	059b      	lsls	r3, r3, #22
 800d09a:	d4dd      	bmi.n	800d058 <_fflush_r+0xc>
 800d09c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d09e:	f7ff fb47 	bl	800c730 <__retarget_lock_release_recursive>
 800d0a2:	e7d9      	b.n	800d058 <_fflush_r+0xc>
 800d0a4:	4b05      	ldr	r3, [pc, #20]	; (800d0bc <_fflush_r+0x70>)
 800d0a6:	429c      	cmp	r4, r3
 800d0a8:	d101      	bne.n	800d0ae <_fflush_r+0x62>
 800d0aa:	68ac      	ldr	r4, [r5, #8]
 800d0ac:	e7df      	b.n	800d06e <_fflush_r+0x22>
 800d0ae:	4b04      	ldr	r3, [pc, #16]	; (800d0c0 <_fflush_r+0x74>)
 800d0b0:	429c      	cmp	r4, r3
 800d0b2:	bf08      	it	eq
 800d0b4:	68ec      	ldreq	r4, [r5, #12]
 800d0b6:	e7da      	b.n	800d06e <_fflush_r+0x22>
 800d0b8:	0800e410 	.word	0x0800e410
 800d0bc:	0800e430 	.word	0x0800e430
 800d0c0:	0800e3f0 	.word	0x0800e3f0

0800d0c4 <fiprintf>:
 800d0c4:	b40e      	push	{r1, r2, r3}
 800d0c6:	b503      	push	{r0, r1, lr}
 800d0c8:	4601      	mov	r1, r0
 800d0ca:	ab03      	add	r3, sp, #12
 800d0cc:	4805      	ldr	r0, [pc, #20]	; (800d0e4 <fiprintf+0x20>)
 800d0ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0d2:	6800      	ldr	r0, [r0, #0]
 800d0d4:	9301      	str	r3, [sp, #4]
 800d0d6:	f000 fa11 	bl	800d4fc <_vfiprintf_r>
 800d0da:	b002      	add	sp, #8
 800d0dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0e0:	b003      	add	sp, #12
 800d0e2:	4770      	bx	lr
 800d0e4:	20000010 	.word	0x20000010

0800d0e8 <_lseek_r>:
 800d0e8:	b538      	push	{r3, r4, r5, lr}
 800d0ea:	4d07      	ldr	r5, [pc, #28]	; (800d108 <_lseek_r+0x20>)
 800d0ec:	4604      	mov	r4, r0
 800d0ee:	4608      	mov	r0, r1
 800d0f0:	4611      	mov	r1, r2
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	602a      	str	r2, [r5, #0]
 800d0f6:	461a      	mov	r2, r3
 800d0f8:	f7f4 fbb0 	bl	800185c <_lseek>
 800d0fc:	1c43      	adds	r3, r0, #1
 800d0fe:	d102      	bne.n	800d106 <_lseek_r+0x1e>
 800d100:	682b      	ldr	r3, [r5, #0]
 800d102:	b103      	cbz	r3, 800d106 <_lseek_r+0x1e>
 800d104:	6023      	str	r3, [r4, #0]
 800d106:	bd38      	pop	{r3, r4, r5, pc}
 800d108:	20002bac 	.word	0x20002bac

0800d10c <__swhatbuf_r>:
 800d10c:	b570      	push	{r4, r5, r6, lr}
 800d10e:	460e      	mov	r6, r1
 800d110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d114:	2900      	cmp	r1, #0
 800d116:	b096      	sub	sp, #88	; 0x58
 800d118:	4614      	mov	r4, r2
 800d11a:	461d      	mov	r5, r3
 800d11c:	da08      	bge.n	800d130 <__swhatbuf_r+0x24>
 800d11e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d122:	2200      	movs	r2, #0
 800d124:	602a      	str	r2, [r5, #0]
 800d126:	061a      	lsls	r2, r3, #24
 800d128:	d410      	bmi.n	800d14c <__swhatbuf_r+0x40>
 800d12a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d12e:	e00e      	b.n	800d14e <__swhatbuf_r+0x42>
 800d130:	466a      	mov	r2, sp
 800d132:	f000 fcc1 	bl	800dab8 <_fstat_r>
 800d136:	2800      	cmp	r0, #0
 800d138:	dbf1      	blt.n	800d11e <__swhatbuf_r+0x12>
 800d13a:	9a01      	ldr	r2, [sp, #4]
 800d13c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d140:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d144:	425a      	negs	r2, r3
 800d146:	415a      	adcs	r2, r3
 800d148:	602a      	str	r2, [r5, #0]
 800d14a:	e7ee      	b.n	800d12a <__swhatbuf_r+0x1e>
 800d14c:	2340      	movs	r3, #64	; 0x40
 800d14e:	2000      	movs	r0, #0
 800d150:	6023      	str	r3, [r4, #0]
 800d152:	b016      	add	sp, #88	; 0x58
 800d154:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d158 <__smakebuf_r>:
 800d158:	898b      	ldrh	r3, [r1, #12]
 800d15a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d15c:	079d      	lsls	r5, r3, #30
 800d15e:	4606      	mov	r6, r0
 800d160:	460c      	mov	r4, r1
 800d162:	d507      	bpl.n	800d174 <__smakebuf_r+0x1c>
 800d164:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d168:	6023      	str	r3, [r4, #0]
 800d16a:	6123      	str	r3, [r4, #16]
 800d16c:	2301      	movs	r3, #1
 800d16e:	6163      	str	r3, [r4, #20]
 800d170:	b002      	add	sp, #8
 800d172:	bd70      	pop	{r4, r5, r6, pc}
 800d174:	ab01      	add	r3, sp, #4
 800d176:	466a      	mov	r2, sp
 800d178:	f7ff ffc8 	bl	800d10c <__swhatbuf_r>
 800d17c:	9900      	ldr	r1, [sp, #0]
 800d17e:	4605      	mov	r5, r0
 800d180:	4630      	mov	r0, r6
 800d182:	f7ff fb79 	bl	800c878 <_malloc_r>
 800d186:	b948      	cbnz	r0, 800d19c <__smakebuf_r+0x44>
 800d188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d18c:	059a      	lsls	r2, r3, #22
 800d18e:	d4ef      	bmi.n	800d170 <__smakebuf_r+0x18>
 800d190:	f023 0303 	bic.w	r3, r3, #3
 800d194:	f043 0302 	orr.w	r3, r3, #2
 800d198:	81a3      	strh	r3, [r4, #12]
 800d19a:	e7e3      	b.n	800d164 <__smakebuf_r+0xc>
 800d19c:	4b0d      	ldr	r3, [pc, #52]	; (800d1d4 <__smakebuf_r+0x7c>)
 800d19e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d1a0:	89a3      	ldrh	r3, [r4, #12]
 800d1a2:	6020      	str	r0, [r4, #0]
 800d1a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1a8:	81a3      	strh	r3, [r4, #12]
 800d1aa:	9b00      	ldr	r3, [sp, #0]
 800d1ac:	6163      	str	r3, [r4, #20]
 800d1ae:	9b01      	ldr	r3, [sp, #4]
 800d1b0:	6120      	str	r0, [r4, #16]
 800d1b2:	b15b      	cbz	r3, 800d1cc <__smakebuf_r+0x74>
 800d1b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1b8:	4630      	mov	r0, r6
 800d1ba:	f000 fc8f 	bl	800dadc <_isatty_r>
 800d1be:	b128      	cbz	r0, 800d1cc <__smakebuf_r+0x74>
 800d1c0:	89a3      	ldrh	r3, [r4, #12]
 800d1c2:	f023 0303 	bic.w	r3, r3, #3
 800d1c6:	f043 0301 	orr.w	r3, r3, #1
 800d1ca:	81a3      	strh	r3, [r4, #12]
 800d1cc:	89a0      	ldrh	r0, [r4, #12]
 800d1ce:	4305      	orrs	r5, r0
 800d1d0:	81a5      	strh	r5, [r4, #12]
 800d1d2:	e7cd      	b.n	800d170 <__smakebuf_r+0x18>
 800d1d4:	0800c541 	.word	0x0800c541

0800d1d8 <__malloc_lock>:
 800d1d8:	4801      	ldr	r0, [pc, #4]	; (800d1e0 <__malloc_lock+0x8>)
 800d1da:	f7ff baa8 	b.w	800c72e <__retarget_lock_acquire_recursive>
 800d1de:	bf00      	nop
 800d1e0:	20002ba0 	.word	0x20002ba0

0800d1e4 <__malloc_unlock>:
 800d1e4:	4801      	ldr	r0, [pc, #4]	; (800d1ec <__malloc_unlock+0x8>)
 800d1e6:	f7ff baa3 	b.w	800c730 <__retarget_lock_release_recursive>
 800d1ea:	bf00      	nop
 800d1ec:	20002ba0 	.word	0x20002ba0

0800d1f0 <__ssputs_r>:
 800d1f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1f4:	688e      	ldr	r6, [r1, #8]
 800d1f6:	429e      	cmp	r6, r3
 800d1f8:	4682      	mov	sl, r0
 800d1fa:	460c      	mov	r4, r1
 800d1fc:	4690      	mov	r8, r2
 800d1fe:	461f      	mov	r7, r3
 800d200:	d838      	bhi.n	800d274 <__ssputs_r+0x84>
 800d202:	898a      	ldrh	r2, [r1, #12]
 800d204:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d208:	d032      	beq.n	800d270 <__ssputs_r+0x80>
 800d20a:	6825      	ldr	r5, [r4, #0]
 800d20c:	6909      	ldr	r1, [r1, #16]
 800d20e:	eba5 0901 	sub.w	r9, r5, r1
 800d212:	6965      	ldr	r5, [r4, #20]
 800d214:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d218:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d21c:	3301      	adds	r3, #1
 800d21e:	444b      	add	r3, r9
 800d220:	106d      	asrs	r5, r5, #1
 800d222:	429d      	cmp	r5, r3
 800d224:	bf38      	it	cc
 800d226:	461d      	movcc	r5, r3
 800d228:	0553      	lsls	r3, r2, #21
 800d22a:	d531      	bpl.n	800d290 <__ssputs_r+0xa0>
 800d22c:	4629      	mov	r1, r5
 800d22e:	f7ff fb23 	bl	800c878 <_malloc_r>
 800d232:	4606      	mov	r6, r0
 800d234:	b950      	cbnz	r0, 800d24c <__ssputs_r+0x5c>
 800d236:	230c      	movs	r3, #12
 800d238:	f8ca 3000 	str.w	r3, [sl]
 800d23c:	89a3      	ldrh	r3, [r4, #12]
 800d23e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d242:	81a3      	strh	r3, [r4, #12]
 800d244:	f04f 30ff 	mov.w	r0, #4294967295
 800d248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d24c:	6921      	ldr	r1, [r4, #16]
 800d24e:	464a      	mov	r2, r9
 800d250:	f7ff fa90 	bl	800c774 <memcpy>
 800d254:	89a3      	ldrh	r3, [r4, #12]
 800d256:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d25a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d25e:	81a3      	strh	r3, [r4, #12]
 800d260:	6126      	str	r6, [r4, #16]
 800d262:	6165      	str	r5, [r4, #20]
 800d264:	444e      	add	r6, r9
 800d266:	eba5 0509 	sub.w	r5, r5, r9
 800d26a:	6026      	str	r6, [r4, #0]
 800d26c:	60a5      	str	r5, [r4, #8]
 800d26e:	463e      	mov	r6, r7
 800d270:	42be      	cmp	r6, r7
 800d272:	d900      	bls.n	800d276 <__ssputs_r+0x86>
 800d274:	463e      	mov	r6, r7
 800d276:	6820      	ldr	r0, [r4, #0]
 800d278:	4632      	mov	r2, r6
 800d27a:	4641      	mov	r1, r8
 800d27c:	f000 fc3e 	bl	800dafc <memmove>
 800d280:	68a3      	ldr	r3, [r4, #8]
 800d282:	1b9b      	subs	r3, r3, r6
 800d284:	60a3      	str	r3, [r4, #8]
 800d286:	6823      	ldr	r3, [r4, #0]
 800d288:	4433      	add	r3, r6
 800d28a:	6023      	str	r3, [r4, #0]
 800d28c:	2000      	movs	r0, #0
 800d28e:	e7db      	b.n	800d248 <__ssputs_r+0x58>
 800d290:	462a      	mov	r2, r5
 800d292:	f000 fc4d 	bl	800db30 <_realloc_r>
 800d296:	4606      	mov	r6, r0
 800d298:	2800      	cmp	r0, #0
 800d29a:	d1e1      	bne.n	800d260 <__ssputs_r+0x70>
 800d29c:	6921      	ldr	r1, [r4, #16]
 800d29e:	4650      	mov	r0, sl
 800d2a0:	f7ff fa7e 	bl	800c7a0 <_free_r>
 800d2a4:	e7c7      	b.n	800d236 <__ssputs_r+0x46>
	...

0800d2a8 <_svfiprintf_r>:
 800d2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2ac:	4698      	mov	r8, r3
 800d2ae:	898b      	ldrh	r3, [r1, #12]
 800d2b0:	061b      	lsls	r3, r3, #24
 800d2b2:	b09d      	sub	sp, #116	; 0x74
 800d2b4:	4607      	mov	r7, r0
 800d2b6:	460d      	mov	r5, r1
 800d2b8:	4614      	mov	r4, r2
 800d2ba:	d50e      	bpl.n	800d2da <_svfiprintf_r+0x32>
 800d2bc:	690b      	ldr	r3, [r1, #16]
 800d2be:	b963      	cbnz	r3, 800d2da <_svfiprintf_r+0x32>
 800d2c0:	2140      	movs	r1, #64	; 0x40
 800d2c2:	f7ff fad9 	bl	800c878 <_malloc_r>
 800d2c6:	6028      	str	r0, [r5, #0]
 800d2c8:	6128      	str	r0, [r5, #16]
 800d2ca:	b920      	cbnz	r0, 800d2d6 <_svfiprintf_r+0x2e>
 800d2cc:	230c      	movs	r3, #12
 800d2ce:	603b      	str	r3, [r7, #0]
 800d2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2d4:	e0d1      	b.n	800d47a <_svfiprintf_r+0x1d2>
 800d2d6:	2340      	movs	r3, #64	; 0x40
 800d2d8:	616b      	str	r3, [r5, #20]
 800d2da:	2300      	movs	r3, #0
 800d2dc:	9309      	str	r3, [sp, #36]	; 0x24
 800d2de:	2320      	movs	r3, #32
 800d2e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2e8:	2330      	movs	r3, #48	; 0x30
 800d2ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d494 <_svfiprintf_r+0x1ec>
 800d2ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2f2:	f04f 0901 	mov.w	r9, #1
 800d2f6:	4623      	mov	r3, r4
 800d2f8:	469a      	mov	sl, r3
 800d2fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2fe:	b10a      	cbz	r2, 800d304 <_svfiprintf_r+0x5c>
 800d300:	2a25      	cmp	r2, #37	; 0x25
 800d302:	d1f9      	bne.n	800d2f8 <_svfiprintf_r+0x50>
 800d304:	ebba 0b04 	subs.w	fp, sl, r4
 800d308:	d00b      	beq.n	800d322 <_svfiprintf_r+0x7a>
 800d30a:	465b      	mov	r3, fp
 800d30c:	4622      	mov	r2, r4
 800d30e:	4629      	mov	r1, r5
 800d310:	4638      	mov	r0, r7
 800d312:	f7ff ff6d 	bl	800d1f0 <__ssputs_r>
 800d316:	3001      	adds	r0, #1
 800d318:	f000 80aa 	beq.w	800d470 <_svfiprintf_r+0x1c8>
 800d31c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d31e:	445a      	add	r2, fp
 800d320:	9209      	str	r2, [sp, #36]	; 0x24
 800d322:	f89a 3000 	ldrb.w	r3, [sl]
 800d326:	2b00      	cmp	r3, #0
 800d328:	f000 80a2 	beq.w	800d470 <_svfiprintf_r+0x1c8>
 800d32c:	2300      	movs	r3, #0
 800d32e:	f04f 32ff 	mov.w	r2, #4294967295
 800d332:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d336:	f10a 0a01 	add.w	sl, sl, #1
 800d33a:	9304      	str	r3, [sp, #16]
 800d33c:	9307      	str	r3, [sp, #28]
 800d33e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d342:	931a      	str	r3, [sp, #104]	; 0x68
 800d344:	4654      	mov	r4, sl
 800d346:	2205      	movs	r2, #5
 800d348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d34c:	4851      	ldr	r0, [pc, #324]	; (800d494 <_svfiprintf_r+0x1ec>)
 800d34e:	f7f2 ff47 	bl	80001e0 <memchr>
 800d352:	9a04      	ldr	r2, [sp, #16]
 800d354:	b9d8      	cbnz	r0, 800d38e <_svfiprintf_r+0xe6>
 800d356:	06d0      	lsls	r0, r2, #27
 800d358:	bf44      	itt	mi
 800d35a:	2320      	movmi	r3, #32
 800d35c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d360:	0711      	lsls	r1, r2, #28
 800d362:	bf44      	itt	mi
 800d364:	232b      	movmi	r3, #43	; 0x2b
 800d366:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d36a:	f89a 3000 	ldrb.w	r3, [sl]
 800d36e:	2b2a      	cmp	r3, #42	; 0x2a
 800d370:	d015      	beq.n	800d39e <_svfiprintf_r+0xf6>
 800d372:	9a07      	ldr	r2, [sp, #28]
 800d374:	4654      	mov	r4, sl
 800d376:	2000      	movs	r0, #0
 800d378:	f04f 0c0a 	mov.w	ip, #10
 800d37c:	4621      	mov	r1, r4
 800d37e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d382:	3b30      	subs	r3, #48	; 0x30
 800d384:	2b09      	cmp	r3, #9
 800d386:	d94e      	bls.n	800d426 <_svfiprintf_r+0x17e>
 800d388:	b1b0      	cbz	r0, 800d3b8 <_svfiprintf_r+0x110>
 800d38a:	9207      	str	r2, [sp, #28]
 800d38c:	e014      	b.n	800d3b8 <_svfiprintf_r+0x110>
 800d38e:	eba0 0308 	sub.w	r3, r0, r8
 800d392:	fa09 f303 	lsl.w	r3, r9, r3
 800d396:	4313      	orrs	r3, r2
 800d398:	9304      	str	r3, [sp, #16]
 800d39a:	46a2      	mov	sl, r4
 800d39c:	e7d2      	b.n	800d344 <_svfiprintf_r+0x9c>
 800d39e:	9b03      	ldr	r3, [sp, #12]
 800d3a0:	1d19      	adds	r1, r3, #4
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	9103      	str	r1, [sp, #12]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	bfbb      	ittet	lt
 800d3aa:	425b      	neglt	r3, r3
 800d3ac:	f042 0202 	orrlt.w	r2, r2, #2
 800d3b0:	9307      	strge	r3, [sp, #28]
 800d3b2:	9307      	strlt	r3, [sp, #28]
 800d3b4:	bfb8      	it	lt
 800d3b6:	9204      	strlt	r2, [sp, #16]
 800d3b8:	7823      	ldrb	r3, [r4, #0]
 800d3ba:	2b2e      	cmp	r3, #46	; 0x2e
 800d3bc:	d10c      	bne.n	800d3d8 <_svfiprintf_r+0x130>
 800d3be:	7863      	ldrb	r3, [r4, #1]
 800d3c0:	2b2a      	cmp	r3, #42	; 0x2a
 800d3c2:	d135      	bne.n	800d430 <_svfiprintf_r+0x188>
 800d3c4:	9b03      	ldr	r3, [sp, #12]
 800d3c6:	1d1a      	adds	r2, r3, #4
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	9203      	str	r2, [sp, #12]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	bfb8      	it	lt
 800d3d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3d4:	3402      	adds	r4, #2
 800d3d6:	9305      	str	r3, [sp, #20]
 800d3d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d4a4 <_svfiprintf_r+0x1fc>
 800d3dc:	7821      	ldrb	r1, [r4, #0]
 800d3de:	2203      	movs	r2, #3
 800d3e0:	4650      	mov	r0, sl
 800d3e2:	f7f2 fefd 	bl	80001e0 <memchr>
 800d3e6:	b140      	cbz	r0, 800d3fa <_svfiprintf_r+0x152>
 800d3e8:	2340      	movs	r3, #64	; 0x40
 800d3ea:	eba0 000a 	sub.w	r0, r0, sl
 800d3ee:	fa03 f000 	lsl.w	r0, r3, r0
 800d3f2:	9b04      	ldr	r3, [sp, #16]
 800d3f4:	4303      	orrs	r3, r0
 800d3f6:	3401      	adds	r4, #1
 800d3f8:	9304      	str	r3, [sp, #16]
 800d3fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3fe:	4826      	ldr	r0, [pc, #152]	; (800d498 <_svfiprintf_r+0x1f0>)
 800d400:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d404:	2206      	movs	r2, #6
 800d406:	f7f2 feeb 	bl	80001e0 <memchr>
 800d40a:	2800      	cmp	r0, #0
 800d40c:	d038      	beq.n	800d480 <_svfiprintf_r+0x1d8>
 800d40e:	4b23      	ldr	r3, [pc, #140]	; (800d49c <_svfiprintf_r+0x1f4>)
 800d410:	bb1b      	cbnz	r3, 800d45a <_svfiprintf_r+0x1b2>
 800d412:	9b03      	ldr	r3, [sp, #12]
 800d414:	3307      	adds	r3, #7
 800d416:	f023 0307 	bic.w	r3, r3, #7
 800d41a:	3308      	adds	r3, #8
 800d41c:	9303      	str	r3, [sp, #12]
 800d41e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d420:	4433      	add	r3, r6
 800d422:	9309      	str	r3, [sp, #36]	; 0x24
 800d424:	e767      	b.n	800d2f6 <_svfiprintf_r+0x4e>
 800d426:	fb0c 3202 	mla	r2, ip, r2, r3
 800d42a:	460c      	mov	r4, r1
 800d42c:	2001      	movs	r0, #1
 800d42e:	e7a5      	b.n	800d37c <_svfiprintf_r+0xd4>
 800d430:	2300      	movs	r3, #0
 800d432:	3401      	adds	r4, #1
 800d434:	9305      	str	r3, [sp, #20]
 800d436:	4619      	mov	r1, r3
 800d438:	f04f 0c0a 	mov.w	ip, #10
 800d43c:	4620      	mov	r0, r4
 800d43e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d442:	3a30      	subs	r2, #48	; 0x30
 800d444:	2a09      	cmp	r2, #9
 800d446:	d903      	bls.n	800d450 <_svfiprintf_r+0x1a8>
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d0c5      	beq.n	800d3d8 <_svfiprintf_r+0x130>
 800d44c:	9105      	str	r1, [sp, #20]
 800d44e:	e7c3      	b.n	800d3d8 <_svfiprintf_r+0x130>
 800d450:	fb0c 2101 	mla	r1, ip, r1, r2
 800d454:	4604      	mov	r4, r0
 800d456:	2301      	movs	r3, #1
 800d458:	e7f0      	b.n	800d43c <_svfiprintf_r+0x194>
 800d45a:	ab03      	add	r3, sp, #12
 800d45c:	9300      	str	r3, [sp, #0]
 800d45e:	462a      	mov	r2, r5
 800d460:	4b0f      	ldr	r3, [pc, #60]	; (800d4a0 <_svfiprintf_r+0x1f8>)
 800d462:	a904      	add	r1, sp, #16
 800d464:	4638      	mov	r0, r7
 800d466:	f3af 8000 	nop.w
 800d46a:	1c42      	adds	r2, r0, #1
 800d46c:	4606      	mov	r6, r0
 800d46e:	d1d6      	bne.n	800d41e <_svfiprintf_r+0x176>
 800d470:	89ab      	ldrh	r3, [r5, #12]
 800d472:	065b      	lsls	r3, r3, #25
 800d474:	f53f af2c 	bmi.w	800d2d0 <_svfiprintf_r+0x28>
 800d478:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d47a:	b01d      	add	sp, #116	; 0x74
 800d47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d480:	ab03      	add	r3, sp, #12
 800d482:	9300      	str	r3, [sp, #0]
 800d484:	462a      	mov	r2, r5
 800d486:	4b06      	ldr	r3, [pc, #24]	; (800d4a0 <_svfiprintf_r+0x1f8>)
 800d488:	a904      	add	r1, sp, #16
 800d48a:	4638      	mov	r0, r7
 800d48c:	f000 f9d4 	bl	800d838 <_printf_i>
 800d490:	e7eb      	b.n	800d46a <_svfiprintf_r+0x1c2>
 800d492:	bf00      	nop
 800d494:	0800e504 	.word	0x0800e504
 800d498:	0800e50e 	.word	0x0800e50e
 800d49c:	00000000 	.word	0x00000000
 800d4a0:	0800d1f1 	.word	0x0800d1f1
 800d4a4:	0800e50a 	.word	0x0800e50a

0800d4a8 <__sfputc_r>:
 800d4a8:	6893      	ldr	r3, [r2, #8]
 800d4aa:	3b01      	subs	r3, #1
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	b410      	push	{r4}
 800d4b0:	6093      	str	r3, [r2, #8]
 800d4b2:	da08      	bge.n	800d4c6 <__sfputc_r+0x1e>
 800d4b4:	6994      	ldr	r4, [r2, #24]
 800d4b6:	42a3      	cmp	r3, r4
 800d4b8:	db01      	blt.n	800d4be <__sfputc_r+0x16>
 800d4ba:	290a      	cmp	r1, #10
 800d4bc:	d103      	bne.n	800d4c6 <__sfputc_r+0x1e>
 800d4be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4c2:	f7ff bc3d 	b.w	800cd40 <__swbuf_r>
 800d4c6:	6813      	ldr	r3, [r2, #0]
 800d4c8:	1c58      	adds	r0, r3, #1
 800d4ca:	6010      	str	r0, [r2, #0]
 800d4cc:	7019      	strb	r1, [r3, #0]
 800d4ce:	4608      	mov	r0, r1
 800d4d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4d4:	4770      	bx	lr

0800d4d6 <__sfputs_r>:
 800d4d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4d8:	4606      	mov	r6, r0
 800d4da:	460f      	mov	r7, r1
 800d4dc:	4614      	mov	r4, r2
 800d4de:	18d5      	adds	r5, r2, r3
 800d4e0:	42ac      	cmp	r4, r5
 800d4e2:	d101      	bne.n	800d4e8 <__sfputs_r+0x12>
 800d4e4:	2000      	movs	r0, #0
 800d4e6:	e007      	b.n	800d4f8 <__sfputs_r+0x22>
 800d4e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4ec:	463a      	mov	r2, r7
 800d4ee:	4630      	mov	r0, r6
 800d4f0:	f7ff ffda 	bl	800d4a8 <__sfputc_r>
 800d4f4:	1c43      	adds	r3, r0, #1
 800d4f6:	d1f3      	bne.n	800d4e0 <__sfputs_r+0xa>
 800d4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d4fc <_vfiprintf_r>:
 800d4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d500:	460d      	mov	r5, r1
 800d502:	b09d      	sub	sp, #116	; 0x74
 800d504:	4614      	mov	r4, r2
 800d506:	4698      	mov	r8, r3
 800d508:	4606      	mov	r6, r0
 800d50a:	b118      	cbz	r0, 800d514 <_vfiprintf_r+0x18>
 800d50c:	6983      	ldr	r3, [r0, #24]
 800d50e:	b90b      	cbnz	r3, 800d514 <_vfiprintf_r+0x18>
 800d510:	f7ff f84a 	bl	800c5a8 <__sinit>
 800d514:	4b89      	ldr	r3, [pc, #548]	; (800d73c <_vfiprintf_r+0x240>)
 800d516:	429d      	cmp	r5, r3
 800d518:	d11b      	bne.n	800d552 <_vfiprintf_r+0x56>
 800d51a:	6875      	ldr	r5, [r6, #4]
 800d51c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d51e:	07d9      	lsls	r1, r3, #31
 800d520:	d405      	bmi.n	800d52e <_vfiprintf_r+0x32>
 800d522:	89ab      	ldrh	r3, [r5, #12]
 800d524:	059a      	lsls	r2, r3, #22
 800d526:	d402      	bmi.n	800d52e <_vfiprintf_r+0x32>
 800d528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d52a:	f7ff f900 	bl	800c72e <__retarget_lock_acquire_recursive>
 800d52e:	89ab      	ldrh	r3, [r5, #12]
 800d530:	071b      	lsls	r3, r3, #28
 800d532:	d501      	bpl.n	800d538 <_vfiprintf_r+0x3c>
 800d534:	692b      	ldr	r3, [r5, #16]
 800d536:	b9eb      	cbnz	r3, 800d574 <_vfiprintf_r+0x78>
 800d538:	4629      	mov	r1, r5
 800d53a:	4630      	mov	r0, r6
 800d53c:	f7ff fc64 	bl	800ce08 <__swsetup_r>
 800d540:	b1c0      	cbz	r0, 800d574 <_vfiprintf_r+0x78>
 800d542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d544:	07dc      	lsls	r4, r3, #31
 800d546:	d50e      	bpl.n	800d566 <_vfiprintf_r+0x6a>
 800d548:	f04f 30ff 	mov.w	r0, #4294967295
 800d54c:	b01d      	add	sp, #116	; 0x74
 800d54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d552:	4b7b      	ldr	r3, [pc, #492]	; (800d740 <_vfiprintf_r+0x244>)
 800d554:	429d      	cmp	r5, r3
 800d556:	d101      	bne.n	800d55c <_vfiprintf_r+0x60>
 800d558:	68b5      	ldr	r5, [r6, #8]
 800d55a:	e7df      	b.n	800d51c <_vfiprintf_r+0x20>
 800d55c:	4b79      	ldr	r3, [pc, #484]	; (800d744 <_vfiprintf_r+0x248>)
 800d55e:	429d      	cmp	r5, r3
 800d560:	bf08      	it	eq
 800d562:	68f5      	ldreq	r5, [r6, #12]
 800d564:	e7da      	b.n	800d51c <_vfiprintf_r+0x20>
 800d566:	89ab      	ldrh	r3, [r5, #12]
 800d568:	0598      	lsls	r0, r3, #22
 800d56a:	d4ed      	bmi.n	800d548 <_vfiprintf_r+0x4c>
 800d56c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d56e:	f7ff f8df 	bl	800c730 <__retarget_lock_release_recursive>
 800d572:	e7e9      	b.n	800d548 <_vfiprintf_r+0x4c>
 800d574:	2300      	movs	r3, #0
 800d576:	9309      	str	r3, [sp, #36]	; 0x24
 800d578:	2320      	movs	r3, #32
 800d57a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d57e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d582:	2330      	movs	r3, #48	; 0x30
 800d584:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d748 <_vfiprintf_r+0x24c>
 800d588:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d58c:	f04f 0901 	mov.w	r9, #1
 800d590:	4623      	mov	r3, r4
 800d592:	469a      	mov	sl, r3
 800d594:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d598:	b10a      	cbz	r2, 800d59e <_vfiprintf_r+0xa2>
 800d59a:	2a25      	cmp	r2, #37	; 0x25
 800d59c:	d1f9      	bne.n	800d592 <_vfiprintf_r+0x96>
 800d59e:	ebba 0b04 	subs.w	fp, sl, r4
 800d5a2:	d00b      	beq.n	800d5bc <_vfiprintf_r+0xc0>
 800d5a4:	465b      	mov	r3, fp
 800d5a6:	4622      	mov	r2, r4
 800d5a8:	4629      	mov	r1, r5
 800d5aa:	4630      	mov	r0, r6
 800d5ac:	f7ff ff93 	bl	800d4d6 <__sfputs_r>
 800d5b0:	3001      	adds	r0, #1
 800d5b2:	f000 80aa 	beq.w	800d70a <_vfiprintf_r+0x20e>
 800d5b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5b8:	445a      	add	r2, fp
 800d5ba:	9209      	str	r2, [sp, #36]	; 0x24
 800d5bc:	f89a 3000 	ldrb.w	r3, [sl]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	f000 80a2 	beq.w	800d70a <_vfiprintf_r+0x20e>
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d5cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5d0:	f10a 0a01 	add.w	sl, sl, #1
 800d5d4:	9304      	str	r3, [sp, #16]
 800d5d6:	9307      	str	r3, [sp, #28]
 800d5d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d5dc:	931a      	str	r3, [sp, #104]	; 0x68
 800d5de:	4654      	mov	r4, sl
 800d5e0:	2205      	movs	r2, #5
 800d5e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5e6:	4858      	ldr	r0, [pc, #352]	; (800d748 <_vfiprintf_r+0x24c>)
 800d5e8:	f7f2 fdfa 	bl	80001e0 <memchr>
 800d5ec:	9a04      	ldr	r2, [sp, #16]
 800d5ee:	b9d8      	cbnz	r0, 800d628 <_vfiprintf_r+0x12c>
 800d5f0:	06d1      	lsls	r1, r2, #27
 800d5f2:	bf44      	itt	mi
 800d5f4:	2320      	movmi	r3, #32
 800d5f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5fa:	0713      	lsls	r3, r2, #28
 800d5fc:	bf44      	itt	mi
 800d5fe:	232b      	movmi	r3, #43	; 0x2b
 800d600:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d604:	f89a 3000 	ldrb.w	r3, [sl]
 800d608:	2b2a      	cmp	r3, #42	; 0x2a
 800d60a:	d015      	beq.n	800d638 <_vfiprintf_r+0x13c>
 800d60c:	9a07      	ldr	r2, [sp, #28]
 800d60e:	4654      	mov	r4, sl
 800d610:	2000      	movs	r0, #0
 800d612:	f04f 0c0a 	mov.w	ip, #10
 800d616:	4621      	mov	r1, r4
 800d618:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d61c:	3b30      	subs	r3, #48	; 0x30
 800d61e:	2b09      	cmp	r3, #9
 800d620:	d94e      	bls.n	800d6c0 <_vfiprintf_r+0x1c4>
 800d622:	b1b0      	cbz	r0, 800d652 <_vfiprintf_r+0x156>
 800d624:	9207      	str	r2, [sp, #28]
 800d626:	e014      	b.n	800d652 <_vfiprintf_r+0x156>
 800d628:	eba0 0308 	sub.w	r3, r0, r8
 800d62c:	fa09 f303 	lsl.w	r3, r9, r3
 800d630:	4313      	orrs	r3, r2
 800d632:	9304      	str	r3, [sp, #16]
 800d634:	46a2      	mov	sl, r4
 800d636:	e7d2      	b.n	800d5de <_vfiprintf_r+0xe2>
 800d638:	9b03      	ldr	r3, [sp, #12]
 800d63a:	1d19      	adds	r1, r3, #4
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	9103      	str	r1, [sp, #12]
 800d640:	2b00      	cmp	r3, #0
 800d642:	bfbb      	ittet	lt
 800d644:	425b      	neglt	r3, r3
 800d646:	f042 0202 	orrlt.w	r2, r2, #2
 800d64a:	9307      	strge	r3, [sp, #28]
 800d64c:	9307      	strlt	r3, [sp, #28]
 800d64e:	bfb8      	it	lt
 800d650:	9204      	strlt	r2, [sp, #16]
 800d652:	7823      	ldrb	r3, [r4, #0]
 800d654:	2b2e      	cmp	r3, #46	; 0x2e
 800d656:	d10c      	bne.n	800d672 <_vfiprintf_r+0x176>
 800d658:	7863      	ldrb	r3, [r4, #1]
 800d65a:	2b2a      	cmp	r3, #42	; 0x2a
 800d65c:	d135      	bne.n	800d6ca <_vfiprintf_r+0x1ce>
 800d65e:	9b03      	ldr	r3, [sp, #12]
 800d660:	1d1a      	adds	r2, r3, #4
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	9203      	str	r2, [sp, #12]
 800d666:	2b00      	cmp	r3, #0
 800d668:	bfb8      	it	lt
 800d66a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d66e:	3402      	adds	r4, #2
 800d670:	9305      	str	r3, [sp, #20]
 800d672:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d758 <_vfiprintf_r+0x25c>
 800d676:	7821      	ldrb	r1, [r4, #0]
 800d678:	2203      	movs	r2, #3
 800d67a:	4650      	mov	r0, sl
 800d67c:	f7f2 fdb0 	bl	80001e0 <memchr>
 800d680:	b140      	cbz	r0, 800d694 <_vfiprintf_r+0x198>
 800d682:	2340      	movs	r3, #64	; 0x40
 800d684:	eba0 000a 	sub.w	r0, r0, sl
 800d688:	fa03 f000 	lsl.w	r0, r3, r0
 800d68c:	9b04      	ldr	r3, [sp, #16]
 800d68e:	4303      	orrs	r3, r0
 800d690:	3401      	adds	r4, #1
 800d692:	9304      	str	r3, [sp, #16]
 800d694:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d698:	482c      	ldr	r0, [pc, #176]	; (800d74c <_vfiprintf_r+0x250>)
 800d69a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d69e:	2206      	movs	r2, #6
 800d6a0:	f7f2 fd9e 	bl	80001e0 <memchr>
 800d6a4:	2800      	cmp	r0, #0
 800d6a6:	d03f      	beq.n	800d728 <_vfiprintf_r+0x22c>
 800d6a8:	4b29      	ldr	r3, [pc, #164]	; (800d750 <_vfiprintf_r+0x254>)
 800d6aa:	bb1b      	cbnz	r3, 800d6f4 <_vfiprintf_r+0x1f8>
 800d6ac:	9b03      	ldr	r3, [sp, #12]
 800d6ae:	3307      	adds	r3, #7
 800d6b0:	f023 0307 	bic.w	r3, r3, #7
 800d6b4:	3308      	adds	r3, #8
 800d6b6:	9303      	str	r3, [sp, #12]
 800d6b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6ba:	443b      	add	r3, r7
 800d6bc:	9309      	str	r3, [sp, #36]	; 0x24
 800d6be:	e767      	b.n	800d590 <_vfiprintf_r+0x94>
 800d6c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6c4:	460c      	mov	r4, r1
 800d6c6:	2001      	movs	r0, #1
 800d6c8:	e7a5      	b.n	800d616 <_vfiprintf_r+0x11a>
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	3401      	adds	r4, #1
 800d6ce:	9305      	str	r3, [sp, #20]
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	f04f 0c0a 	mov.w	ip, #10
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6dc:	3a30      	subs	r2, #48	; 0x30
 800d6de:	2a09      	cmp	r2, #9
 800d6e0:	d903      	bls.n	800d6ea <_vfiprintf_r+0x1ee>
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d0c5      	beq.n	800d672 <_vfiprintf_r+0x176>
 800d6e6:	9105      	str	r1, [sp, #20]
 800d6e8:	e7c3      	b.n	800d672 <_vfiprintf_r+0x176>
 800d6ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6ee:	4604      	mov	r4, r0
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	e7f0      	b.n	800d6d6 <_vfiprintf_r+0x1da>
 800d6f4:	ab03      	add	r3, sp, #12
 800d6f6:	9300      	str	r3, [sp, #0]
 800d6f8:	462a      	mov	r2, r5
 800d6fa:	4b16      	ldr	r3, [pc, #88]	; (800d754 <_vfiprintf_r+0x258>)
 800d6fc:	a904      	add	r1, sp, #16
 800d6fe:	4630      	mov	r0, r6
 800d700:	f3af 8000 	nop.w
 800d704:	4607      	mov	r7, r0
 800d706:	1c78      	adds	r0, r7, #1
 800d708:	d1d6      	bne.n	800d6b8 <_vfiprintf_r+0x1bc>
 800d70a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d70c:	07d9      	lsls	r1, r3, #31
 800d70e:	d405      	bmi.n	800d71c <_vfiprintf_r+0x220>
 800d710:	89ab      	ldrh	r3, [r5, #12]
 800d712:	059a      	lsls	r2, r3, #22
 800d714:	d402      	bmi.n	800d71c <_vfiprintf_r+0x220>
 800d716:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d718:	f7ff f80a 	bl	800c730 <__retarget_lock_release_recursive>
 800d71c:	89ab      	ldrh	r3, [r5, #12]
 800d71e:	065b      	lsls	r3, r3, #25
 800d720:	f53f af12 	bmi.w	800d548 <_vfiprintf_r+0x4c>
 800d724:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d726:	e711      	b.n	800d54c <_vfiprintf_r+0x50>
 800d728:	ab03      	add	r3, sp, #12
 800d72a:	9300      	str	r3, [sp, #0]
 800d72c:	462a      	mov	r2, r5
 800d72e:	4b09      	ldr	r3, [pc, #36]	; (800d754 <_vfiprintf_r+0x258>)
 800d730:	a904      	add	r1, sp, #16
 800d732:	4630      	mov	r0, r6
 800d734:	f000 f880 	bl	800d838 <_printf_i>
 800d738:	e7e4      	b.n	800d704 <_vfiprintf_r+0x208>
 800d73a:	bf00      	nop
 800d73c:	0800e410 	.word	0x0800e410
 800d740:	0800e430 	.word	0x0800e430
 800d744:	0800e3f0 	.word	0x0800e3f0
 800d748:	0800e504 	.word	0x0800e504
 800d74c:	0800e50e 	.word	0x0800e50e
 800d750:	00000000 	.word	0x00000000
 800d754:	0800d4d7 	.word	0x0800d4d7
 800d758:	0800e50a 	.word	0x0800e50a

0800d75c <_printf_common>:
 800d75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d760:	4616      	mov	r6, r2
 800d762:	4699      	mov	r9, r3
 800d764:	688a      	ldr	r2, [r1, #8]
 800d766:	690b      	ldr	r3, [r1, #16]
 800d768:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d76c:	4293      	cmp	r3, r2
 800d76e:	bfb8      	it	lt
 800d770:	4613      	movlt	r3, r2
 800d772:	6033      	str	r3, [r6, #0]
 800d774:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d778:	4607      	mov	r7, r0
 800d77a:	460c      	mov	r4, r1
 800d77c:	b10a      	cbz	r2, 800d782 <_printf_common+0x26>
 800d77e:	3301      	adds	r3, #1
 800d780:	6033      	str	r3, [r6, #0]
 800d782:	6823      	ldr	r3, [r4, #0]
 800d784:	0699      	lsls	r1, r3, #26
 800d786:	bf42      	ittt	mi
 800d788:	6833      	ldrmi	r3, [r6, #0]
 800d78a:	3302      	addmi	r3, #2
 800d78c:	6033      	strmi	r3, [r6, #0]
 800d78e:	6825      	ldr	r5, [r4, #0]
 800d790:	f015 0506 	ands.w	r5, r5, #6
 800d794:	d106      	bne.n	800d7a4 <_printf_common+0x48>
 800d796:	f104 0a19 	add.w	sl, r4, #25
 800d79a:	68e3      	ldr	r3, [r4, #12]
 800d79c:	6832      	ldr	r2, [r6, #0]
 800d79e:	1a9b      	subs	r3, r3, r2
 800d7a0:	42ab      	cmp	r3, r5
 800d7a2:	dc26      	bgt.n	800d7f2 <_printf_common+0x96>
 800d7a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d7a8:	1e13      	subs	r3, r2, #0
 800d7aa:	6822      	ldr	r2, [r4, #0]
 800d7ac:	bf18      	it	ne
 800d7ae:	2301      	movne	r3, #1
 800d7b0:	0692      	lsls	r2, r2, #26
 800d7b2:	d42b      	bmi.n	800d80c <_printf_common+0xb0>
 800d7b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d7b8:	4649      	mov	r1, r9
 800d7ba:	4638      	mov	r0, r7
 800d7bc:	47c0      	blx	r8
 800d7be:	3001      	adds	r0, #1
 800d7c0:	d01e      	beq.n	800d800 <_printf_common+0xa4>
 800d7c2:	6823      	ldr	r3, [r4, #0]
 800d7c4:	68e5      	ldr	r5, [r4, #12]
 800d7c6:	6832      	ldr	r2, [r6, #0]
 800d7c8:	f003 0306 	and.w	r3, r3, #6
 800d7cc:	2b04      	cmp	r3, #4
 800d7ce:	bf08      	it	eq
 800d7d0:	1aad      	subeq	r5, r5, r2
 800d7d2:	68a3      	ldr	r3, [r4, #8]
 800d7d4:	6922      	ldr	r2, [r4, #16]
 800d7d6:	bf0c      	ite	eq
 800d7d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d7dc:	2500      	movne	r5, #0
 800d7de:	4293      	cmp	r3, r2
 800d7e0:	bfc4      	itt	gt
 800d7e2:	1a9b      	subgt	r3, r3, r2
 800d7e4:	18ed      	addgt	r5, r5, r3
 800d7e6:	2600      	movs	r6, #0
 800d7e8:	341a      	adds	r4, #26
 800d7ea:	42b5      	cmp	r5, r6
 800d7ec:	d11a      	bne.n	800d824 <_printf_common+0xc8>
 800d7ee:	2000      	movs	r0, #0
 800d7f0:	e008      	b.n	800d804 <_printf_common+0xa8>
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	4652      	mov	r2, sl
 800d7f6:	4649      	mov	r1, r9
 800d7f8:	4638      	mov	r0, r7
 800d7fa:	47c0      	blx	r8
 800d7fc:	3001      	adds	r0, #1
 800d7fe:	d103      	bne.n	800d808 <_printf_common+0xac>
 800d800:	f04f 30ff 	mov.w	r0, #4294967295
 800d804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d808:	3501      	adds	r5, #1
 800d80a:	e7c6      	b.n	800d79a <_printf_common+0x3e>
 800d80c:	18e1      	adds	r1, r4, r3
 800d80e:	1c5a      	adds	r2, r3, #1
 800d810:	2030      	movs	r0, #48	; 0x30
 800d812:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d816:	4422      	add	r2, r4
 800d818:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d81c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d820:	3302      	adds	r3, #2
 800d822:	e7c7      	b.n	800d7b4 <_printf_common+0x58>
 800d824:	2301      	movs	r3, #1
 800d826:	4622      	mov	r2, r4
 800d828:	4649      	mov	r1, r9
 800d82a:	4638      	mov	r0, r7
 800d82c:	47c0      	blx	r8
 800d82e:	3001      	adds	r0, #1
 800d830:	d0e6      	beq.n	800d800 <_printf_common+0xa4>
 800d832:	3601      	adds	r6, #1
 800d834:	e7d9      	b.n	800d7ea <_printf_common+0x8e>
	...

0800d838 <_printf_i>:
 800d838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d83c:	7e0f      	ldrb	r7, [r1, #24]
 800d83e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d840:	2f78      	cmp	r7, #120	; 0x78
 800d842:	4691      	mov	r9, r2
 800d844:	4680      	mov	r8, r0
 800d846:	460c      	mov	r4, r1
 800d848:	469a      	mov	sl, r3
 800d84a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d84e:	d807      	bhi.n	800d860 <_printf_i+0x28>
 800d850:	2f62      	cmp	r7, #98	; 0x62
 800d852:	d80a      	bhi.n	800d86a <_printf_i+0x32>
 800d854:	2f00      	cmp	r7, #0
 800d856:	f000 80d8 	beq.w	800da0a <_printf_i+0x1d2>
 800d85a:	2f58      	cmp	r7, #88	; 0x58
 800d85c:	f000 80a3 	beq.w	800d9a6 <_printf_i+0x16e>
 800d860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d868:	e03a      	b.n	800d8e0 <_printf_i+0xa8>
 800d86a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d86e:	2b15      	cmp	r3, #21
 800d870:	d8f6      	bhi.n	800d860 <_printf_i+0x28>
 800d872:	a101      	add	r1, pc, #4	; (adr r1, 800d878 <_printf_i+0x40>)
 800d874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d878:	0800d8d1 	.word	0x0800d8d1
 800d87c:	0800d8e5 	.word	0x0800d8e5
 800d880:	0800d861 	.word	0x0800d861
 800d884:	0800d861 	.word	0x0800d861
 800d888:	0800d861 	.word	0x0800d861
 800d88c:	0800d861 	.word	0x0800d861
 800d890:	0800d8e5 	.word	0x0800d8e5
 800d894:	0800d861 	.word	0x0800d861
 800d898:	0800d861 	.word	0x0800d861
 800d89c:	0800d861 	.word	0x0800d861
 800d8a0:	0800d861 	.word	0x0800d861
 800d8a4:	0800d9f1 	.word	0x0800d9f1
 800d8a8:	0800d915 	.word	0x0800d915
 800d8ac:	0800d9d3 	.word	0x0800d9d3
 800d8b0:	0800d861 	.word	0x0800d861
 800d8b4:	0800d861 	.word	0x0800d861
 800d8b8:	0800da13 	.word	0x0800da13
 800d8bc:	0800d861 	.word	0x0800d861
 800d8c0:	0800d915 	.word	0x0800d915
 800d8c4:	0800d861 	.word	0x0800d861
 800d8c8:	0800d861 	.word	0x0800d861
 800d8cc:	0800d9db 	.word	0x0800d9db
 800d8d0:	682b      	ldr	r3, [r5, #0]
 800d8d2:	1d1a      	adds	r2, r3, #4
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	602a      	str	r2, [r5, #0]
 800d8d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	e0a3      	b.n	800da2c <_printf_i+0x1f4>
 800d8e4:	6820      	ldr	r0, [r4, #0]
 800d8e6:	6829      	ldr	r1, [r5, #0]
 800d8e8:	0606      	lsls	r6, r0, #24
 800d8ea:	f101 0304 	add.w	r3, r1, #4
 800d8ee:	d50a      	bpl.n	800d906 <_printf_i+0xce>
 800d8f0:	680e      	ldr	r6, [r1, #0]
 800d8f2:	602b      	str	r3, [r5, #0]
 800d8f4:	2e00      	cmp	r6, #0
 800d8f6:	da03      	bge.n	800d900 <_printf_i+0xc8>
 800d8f8:	232d      	movs	r3, #45	; 0x2d
 800d8fa:	4276      	negs	r6, r6
 800d8fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d900:	485e      	ldr	r0, [pc, #376]	; (800da7c <_printf_i+0x244>)
 800d902:	230a      	movs	r3, #10
 800d904:	e019      	b.n	800d93a <_printf_i+0x102>
 800d906:	680e      	ldr	r6, [r1, #0]
 800d908:	602b      	str	r3, [r5, #0]
 800d90a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d90e:	bf18      	it	ne
 800d910:	b236      	sxthne	r6, r6
 800d912:	e7ef      	b.n	800d8f4 <_printf_i+0xbc>
 800d914:	682b      	ldr	r3, [r5, #0]
 800d916:	6820      	ldr	r0, [r4, #0]
 800d918:	1d19      	adds	r1, r3, #4
 800d91a:	6029      	str	r1, [r5, #0]
 800d91c:	0601      	lsls	r1, r0, #24
 800d91e:	d501      	bpl.n	800d924 <_printf_i+0xec>
 800d920:	681e      	ldr	r6, [r3, #0]
 800d922:	e002      	b.n	800d92a <_printf_i+0xf2>
 800d924:	0646      	lsls	r6, r0, #25
 800d926:	d5fb      	bpl.n	800d920 <_printf_i+0xe8>
 800d928:	881e      	ldrh	r6, [r3, #0]
 800d92a:	4854      	ldr	r0, [pc, #336]	; (800da7c <_printf_i+0x244>)
 800d92c:	2f6f      	cmp	r7, #111	; 0x6f
 800d92e:	bf0c      	ite	eq
 800d930:	2308      	moveq	r3, #8
 800d932:	230a      	movne	r3, #10
 800d934:	2100      	movs	r1, #0
 800d936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d93a:	6865      	ldr	r5, [r4, #4]
 800d93c:	60a5      	str	r5, [r4, #8]
 800d93e:	2d00      	cmp	r5, #0
 800d940:	bfa2      	ittt	ge
 800d942:	6821      	ldrge	r1, [r4, #0]
 800d944:	f021 0104 	bicge.w	r1, r1, #4
 800d948:	6021      	strge	r1, [r4, #0]
 800d94a:	b90e      	cbnz	r6, 800d950 <_printf_i+0x118>
 800d94c:	2d00      	cmp	r5, #0
 800d94e:	d04d      	beq.n	800d9ec <_printf_i+0x1b4>
 800d950:	4615      	mov	r5, r2
 800d952:	fbb6 f1f3 	udiv	r1, r6, r3
 800d956:	fb03 6711 	mls	r7, r3, r1, r6
 800d95a:	5dc7      	ldrb	r7, [r0, r7]
 800d95c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d960:	4637      	mov	r7, r6
 800d962:	42bb      	cmp	r3, r7
 800d964:	460e      	mov	r6, r1
 800d966:	d9f4      	bls.n	800d952 <_printf_i+0x11a>
 800d968:	2b08      	cmp	r3, #8
 800d96a:	d10b      	bne.n	800d984 <_printf_i+0x14c>
 800d96c:	6823      	ldr	r3, [r4, #0]
 800d96e:	07de      	lsls	r6, r3, #31
 800d970:	d508      	bpl.n	800d984 <_printf_i+0x14c>
 800d972:	6923      	ldr	r3, [r4, #16]
 800d974:	6861      	ldr	r1, [r4, #4]
 800d976:	4299      	cmp	r1, r3
 800d978:	bfde      	ittt	le
 800d97a:	2330      	movle	r3, #48	; 0x30
 800d97c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d980:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d984:	1b52      	subs	r2, r2, r5
 800d986:	6122      	str	r2, [r4, #16]
 800d988:	f8cd a000 	str.w	sl, [sp]
 800d98c:	464b      	mov	r3, r9
 800d98e:	aa03      	add	r2, sp, #12
 800d990:	4621      	mov	r1, r4
 800d992:	4640      	mov	r0, r8
 800d994:	f7ff fee2 	bl	800d75c <_printf_common>
 800d998:	3001      	adds	r0, #1
 800d99a:	d14c      	bne.n	800da36 <_printf_i+0x1fe>
 800d99c:	f04f 30ff 	mov.w	r0, #4294967295
 800d9a0:	b004      	add	sp, #16
 800d9a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9a6:	4835      	ldr	r0, [pc, #212]	; (800da7c <_printf_i+0x244>)
 800d9a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d9ac:	6829      	ldr	r1, [r5, #0]
 800d9ae:	6823      	ldr	r3, [r4, #0]
 800d9b0:	f851 6b04 	ldr.w	r6, [r1], #4
 800d9b4:	6029      	str	r1, [r5, #0]
 800d9b6:	061d      	lsls	r5, r3, #24
 800d9b8:	d514      	bpl.n	800d9e4 <_printf_i+0x1ac>
 800d9ba:	07df      	lsls	r7, r3, #31
 800d9bc:	bf44      	itt	mi
 800d9be:	f043 0320 	orrmi.w	r3, r3, #32
 800d9c2:	6023      	strmi	r3, [r4, #0]
 800d9c4:	b91e      	cbnz	r6, 800d9ce <_printf_i+0x196>
 800d9c6:	6823      	ldr	r3, [r4, #0]
 800d9c8:	f023 0320 	bic.w	r3, r3, #32
 800d9cc:	6023      	str	r3, [r4, #0]
 800d9ce:	2310      	movs	r3, #16
 800d9d0:	e7b0      	b.n	800d934 <_printf_i+0xfc>
 800d9d2:	6823      	ldr	r3, [r4, #0]
 800d9d4:	f043 0320 	orr.w	r3, r3, #32
 800d9d8:	6023      	str	r3, [r4, #0]
 800d9da:	2378      	movs	r3, #120	; 0x78
 800d9dc:	4828      	ldr	r0, [pc, #160]	; (800da80 <_printf_i+0x248>)
 800d9de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d9e2:	e7e3      	b.n	800d9ac <_printf_i+0x174>
 800d9e4:	0659      	lsls	r1, r3, #25
 800d9e6:	bf48      	it	mi
 800d9e8:	b2b6      	uxthmi	r6, r6
 800d9ea:	e7e6      	b.n	800d9ba <_printf_i+0x182>
 800d9ec:	4615      	mov	r5, r2
 800d9ee:	e7bb      	b.n	800d968 <_printf_i+0x130>
 800d9f0:	682b      	ldr	r3, [r5, #0]
 800d9f2:	6826      	ldr	r6, [r4, #0]
 800d9f4:	6961      	ldr	r1, [r4, #20]
 800d9f6:	1d18      	adds	r0, r3, #4
 800d9f8:	6028      	str	r0, [r5, #0]
 800d9fa:	0635      	lsls	r5, r6, #24
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	d501      	bpl.n	800da04 <_printf_i+0x1cc>
 800da00:	6019      	str	r1, [r3, #0]
 800da02:	e002      	b.n	800da0a <_printf_i+0x1d2>
 800da04:	0670      	lsls	r0, r6, #25
 800da06:	d5fb      	bpl.n	800da00 <_printf_i+0x1c8>
 800da08:	8019      	strh	r1, [r3, #0]
 800da0a:	2300      	movs	r3, #0
 800da0c:	6123      	str	r3, [r4, #16]
 800da0e:	4615      	mov	r5, r2
 800da10:	e7ba      	b.n	800d988 <_printf_i+0x150>
 800da12:	682b      	ldr	r3, [r5, #0]
 800da14:	1d1a      	adds	r2, r3, #4
 800da16:	602a      	str	r2, [r5, #0]
 800da18:	681d      	ldr	r5, [r3, #0]
 800da1a:	6862      	ldr	r2, [r4, #4]
 800da1c:	2100      	movs	r1, #0
 800da1e:	4628      	mov	r0, r5
 800da20:	f7f2 fbde 	bl	80001e0 <memchr>
 800da24:	b108      	cbz	r0, 800da2a <_printf_i+0x1f2>
 800da26:	1b40      	subs	r0, r0, r5
 800da28:	6060      	str	r0, [r4, #4]
 800da2a:	6863      	ldr	r3, [r4, #4]
 800da2c:	6123      	str	r3, [r4, #16]
 800da2e:	2300      	movs	r3, #0
 800da30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da34:	e7a8      	b.n	800d988 <_printf_i+0x150>
 800da36:	6923      	ldr	r3, [r4, #16]
 800da38:	462a      	mov	r2, r5
 800da3a:	4649      	mov	r1, r9
 800da3c:	4640      	mov	r0, r8
 800da3e:	47d0      	blx	sl
 800da40:	3001      	adds	r0, #1
 800da42:	d0ab      	beq.n	800d99c <_printf_i+0x164>
 800da44:	6823      	ldr	r3, [r4, #0]
 800da46:	079b      	lsls	r3, r3, #30
 800da48:	d413      	bmi.n	800da72 <_printf_i+0x23a>
 800da4a:	68e0      	ldr	r0, [r4, #12]
 800da4c:	9b03      	ldr	r3, [sp, #12]
 800da4e:	4298      	cmp	r0, r3
 800da50:	bfb8      	it	lt
 800da52:	4618      	movlt	r0, r3
 800da54:	e7a4      	b.n	800d9a0 <_printf_i+0x168>
 800da56:	2301      	movs	r3, #1
 800da58:	4632      	mov	r2, r6
 800da5a:	4649      	mov	r1, r9
 800da5c:	4640      	mov	r0, r8
 800da5e:	47d0      	blx	sl
 800da60:	3001      	adds	r0, #1
 800da62:	d09b      	beq.n	800d99c <_printf_i+0x164>
 800da64:	3501      	adds	r5, #1
 800da66:	68e3      	ldr	r3, [r4, #12]
 800da68:	9903      	ldr	r1, [sp, #12]
 800da6a:	1a5b      	subs	r3, r3, r1
 800da6c:	42ab      	cmp	r3, r5
 800da6e:	dcf2      	bgt.n	800da56 <_printf_i+0x21e>
 800da70:	e7eb      	b.n	800da4a <_printf_i+0x212>
 800da72:	2500      	movs	r5, #0
 800da74:	f104 0619 	add.w	r6, r4, #25
 800da78:	e7f5      	b.n	800da66 <_printf_i+0x22e>
 800da7a:	bf00      	nop
 800da7c:	0800e515 	.word	0x0800e515
 800da80:	0800e526 	.word	0x0800e526

0800da84 <_read_r>:
 800da84:	b538      	push	{r3, r4, r5, lr}
 800da86:	4d07      	ldr	r5, [pc, #28]	; (800daa4 <_read_r+0x20>)
 800da88:	4604      	mov	r4, r0
 800da8a:	4608      	mov	r0, r1
 800da8c:	4611      	mov	r1, r2
 800da8e:	2200      	movs	r2, #0
 800da90:	602a      	str	r2, [r5, #0]
 800da92:	461a      	mov	r2, r3
 800da94:	f7f3 fe82 	bl	800179c <_read>
 800da98:	1c43      	adds	r3, r0, #1
 800da9a:	d102      	bne.n	800daa2 <_read_r+0x1e>
 800da9c:	682b      	ldr	r3, [r5, #0]
 800da9e:	b103      	cbz	r3, 800daa2 <_read_r+0x1e>
 800daa0:	6023      	str	r3, [r4, #0]
 800daa2:	bd38      	pop	{r3, r4, r5, pc}
 800daa4:	20002bac 	.word	0x20002bac

0800daa8 <abort>:
 800daa8:	b508      	push	{r3, lr}
 800daaa:	2006      	movs	r0, #6
 800daac:	f000 f898 	bl	800dbe0 <raise>
 800dab0:	2001      	movs	r0, #1
 800dab2:	f7f3 fe69 	bl	8001788 <_exit>
	...

0800dab8 <_fstat_r>:
 800dab8:	b538      	push	{r3, r4, r5, lr}
 800daba:	4d07      	ldr	r5, [pc, #28]	; (800dad8 <_fstat_r+0x20>)
 800dabc:	2300      	movs	r3, #0
 800dabe:	4604      	mov	r4, r0
 800dac0:	4608      	mov	r0, r1
 800dac2:	4611      	mov	r1, r2
 800dac4:	602b      	str	r3, [r5, #0]
 800dac6:	f7f3 feae 	bl	8001826 <_fstat>
 800daca:	1c43      	adds	r3, r0, #1
 800dacc:	d102      	bne.n	800dad4 <_fstat_r+0x1c>
 800dace:	682b      	ldr	r3, [r5, #0]
 800dad0:	b103      	cbz	r3, 800dad4 <_fstat_r+0x1c>
 800dad2:	6023      	str	r3, [r4, #0]
 800dad4:	bd38      	pop	{r3, r4, r5, pc}
 800dad6:	bf00      	nop
 800dad8:	20002bac 	.word	0x20002bac

0800dadc <_isatty_r>:
 800dadc:	b538      	push	{r3, r4, r5, lr}
 800dade:	4d06      	ldr	r5, [pc, #24]	; (800daf8 <_isatty_r+0x1c>)
 800dae0:	2300      	movs	r3, #0
 800dae2:	4604      	mov	r4, r0
 800dae4:	4608      	mov	r0, r1
 800dae6:	602b      	str	r3, [r5, #0]
 800dae8:	f7f3 fead 	bl	8001846 <_isatty>
 800daec:	1c43      	adds	r3, r0, #1
 800daee:	d102      	bne.n	800daf6 <_isatty_r+0x1a>
 800daf0:	682b      	ldr	r3, [r5, #0]
 800daf2:	b103      	cbz	r3, 800daf6 <_isatty_r+0x1a>
 800daf4:	6023      	str	r3, [r4, #0]
 800daf6:	bd38      	pop	{r3, r4, r5, pc}
 800daf8:	20002bac 	.word	0x20002bac

0800dafc <memmove>:
 800dafc:	4288      	cmp	r0, r1
 800dafe:	b510      	push	{r4, lr}
 800db00:	eb01 0402 	add.w	r4, r1, r2
 800db04:	d902      	bls.n	800db0c <memmove+0x10>
 800db06:	4284      	cmp	r4, r0
 800db08:	4623      	mov	r3, r4
 800db0a:	d807      	bhi.n	800db1c <memmove+0x20>
 800db0c:	1e43      	subs	r3, r0, #1
 800db0e:	42a1      	cmp	r1, r4
 800db10:	d008      	beq.n	800db24 <memmove+0x28>
 800db12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db16:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db1a:	e7f8      	b.n	800db0e <memmove+0x12>
 800db1c:	4402      	add	r2, r0
 800db1e:	4601      	mov	r1, r0
 800db20:	428a      	cmp	r2, r1
 800db22:	d100      	bne.n	800db26 <memmove+0x2a>
 800db24:	bd10      	pop	{r4, pc}
 800db26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db2e:	e7f7      	b.n	800db20 <memmove+0x24>

0800db30 <_realloc_r>:
 800db30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db34:	4680      	mov	r8, r0
 800db36:	4614      	mov	r4, r2
 800db38:	460e      	mov	r6, r1
 800db3a:	b921      	cbnz	r1, 800db46 <_realloc_r+0x16>
 800db3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db40:	4611      	mov	r1, r2
 800db42:	f7fe be99 	b.w	800c878 <_malloc_r>
 800db46:	b92a      	cbnz	r2, 800db54 <_realloc_r+0x24>
 800db48:	f7fe fe2a 	bl	800c7a0 <_free_r>
 800db4c:	4625      	mov	r5, r4
 800db4e:	4628      	mov	r0, r5
 800db50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db54:	f000 f860 	bl	800dc18 <_malloc_usable_size_r>
 800db58:	4284      	cmp	r4, r0
 800db5a:	4607      	mov	r7, r0
 800db5c:	d802      	bhi.n	800db64 <_realloc_r+0x34>
 800db5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800db62:	d812      	bhi.n	800db8a <_realloc_r+0x5a>
 800db64:	4621      	mov	r1, r4
 800db66:	4640      	mov	r0, r8
 800db68:	f7fe fe86 	bl	800c878 <_malloc_r>
 800db6c:	4605      	mov	r5, r0
 800db6e:	2800      	cmp	r0, #0
 800db70:	d0ed      	beq.n	800db4e <_realloc_r+0x1e>
 800db72:	42bc      	cmp	r4, r7
 800db74:	4622      	mov	r2, r4
 800db76:	4631      	mov	r1, r6
 800db78:	bf28      	it	cs
 800db7a:	463a      	movcs	r2, r7
 800db7c:	f7fe fdfa 	bl	800c774 <memcpy>
 800db80:	4631      	mov	r1, r6
 800db82:	4640      	mov	r0, r8
 800db84:	f7fe fe0c 	bl	800c7a0 <_free_r>
 800db88:	e7e1      	b.n	800db4e <_realloc_r+0x1e>
 800db8a:	4635      	mov	r5, r6
 800db8c:	e7df      	b.n	800db4e <_realloc_r+0x1e>

0800db8e <_raise_r>:
 800db8e:	291f      	cmp	r1, #31
 800db90:	b538      	push	{r3, r4, r5, lr}
 800db92:	4604      	mov	r4, r0
 800db94:	460d      	mov	r5, r1
 800db96:	d904      	bls.n	800dba2 <_raise_r+0x14>
 800db98:	2316      	movs	r3, #22
 800db9a:	6003      	str	r3, [r0, #0]
 800db9c:	f04f 30ff 	mov.w	r0, #4294967295
 800dba0:	bd38      	pop	{r3, r4, r5, pc}
 800dba2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dba4:	b112      	cbz	r2, 800dbac <_raise_r+0x1e>
 800dba6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dbaa:	b94b      	cbnz	r3, 800dbc0 <_raise_r+0x32>
 800dbac:	4620      	mov	r0, r4
 800dbae:	f000 f831 	bl	800dc14 <_getpid_r>
 800dbb2:	462a      	mov	r2, r5
 800dbb4:	4601      	mov	r1, r0
 800dbb6:	4620      	mov	r0, r4
 800dbb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbbc:	f000 b818 	b.w	800dbf0 <_kill_r>
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d00a      	beq.n	800dbda <_raise_r+0x4c>
 800dbc4:	1c59      	adds	r1, r3, #1
 800dbc6:	d103      	bne.n	800dbd0 <_raise_r+0x42>
 800dbc8:	2316      	movs	r3, #22
 800dbca:	6003      	str	r3, [r0, #0]
 800dbcc:	2001      	movs	r0, #1
 800dbce:	e7e7      	b.n	800dba0 <_raise_r+0x12>
 800dbd0:	2400      	movs	r4, #0
 800dbd2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dbd6:	4628      	mov	r0, r5
 800dbd8:	4798      	blx	r3
 800dbda:	2000      	movs	r0, #0
 800dbdc:	e7e0      	b.n	800dba0 <_raise_r+0x12>
	...

0800dbe0 <raise>:
 800dbe0:	4b02      	ldr	r3, [pc, #8]	; (800dbec <raise+0xc>)
 800dbe2:	4601      	mov	r1, r0
 800dbe4:	6818      	ldr	r0, [r3, #0]
 800dbe6:	f7ff bfd2 	b.w	800db8e <_raise_r>
 800dbea:	bf00      	nop
 800dbec:	20000010 	.word	0x20000010

0800dbf0 <_kill_r>:
 800dbf0:	b538      	push	{r3, r4, r5, lr}
 800dbf2:	4d07      	ldr	r5, [pc, #28]	; (800dc10 <_kill_r+0x20>)
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	4604      	mov	r4, r0
 800dbf8:	4608      	mov	r0, r1
 800dbfa:	4611      	mov	r1, r2
 800dbfc:	602b      	str	r3, [r5, #0]
 800dbfe:	f7f3 fdb3 	bl	8001768 <_kill>
 800dc02:	1c43      	adds	r3, r0, #1
 800dc04:	d102      	bne.n	800dc0c <_kill_r+0x1c>
 800dc06:	682b      	ldr	r3, [r5, #0]
 800dc08:	b103      	cbz	r3, 800dc0c <_kill_r+0x1c>
 800dc0a:	6023      	str	r3, [r4, #0]
 800dc0c:	bd38      	pop	{r3, r4, r5, pc}
 800dc0e:	bf00      	nop
 800dc10:	20002bac 	.word	0x20002bac

0800dc14 <_getpid_r>:
 800dc14:	f7f3 bda0 	b.w	8001758 <_getpid>

0800dc18 <_malloc_usable_size_r>:
 800dc18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc1c:	1f18      	subs	r0, r3, #4
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	bfbc      	itt	lt
 800dc22:	580b      	ldrlt	r3, [r1, r0]
 800dc24:	18c0      	addlt	r0, r0, r3
 800dc26:	4770      	bx	lr

0800dc28 <_init>:
 800dc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc2a:	bf00      	nop
 800dc2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc2e:	bc08      	pop	{r3}
 800dc30:	469e      	mov	lr, r3
 800dc32:	4770      	bx	lr

0800dc34 <_fini>:
 800dc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc36:	bf00      	nop
 800dc38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc3a:	bc08      	pop	{r3}
 800dc3c:	469e      	mov	lr, r3
 800dc3e:	4770      	bx	lr
