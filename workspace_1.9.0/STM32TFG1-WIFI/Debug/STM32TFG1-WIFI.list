
STM32TFG1-WIFI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bb4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08009d44  08009d44  00019d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ed8  08009ed8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009ed8  08009ed8  00019ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ee0  08009ee0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ee0  08009ee0  00019ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ee4  08009ee4  00019ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020bc  20000074  08009f5c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002130  08009f5c  00022130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b048  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050d4  00000000  00000000  0004b0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002450  00000000  00000000  000501c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002248  00000000  00000000  00052610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cdd5  00000000  00000000  00054858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029cd3  00000000  00000000  0008162d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 18 .debug_str    0010a390  00000000  00000000  000ab241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b55d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a52c  00000000  00000000  001b5624  2**2
=======
 18 .debug_str    0010a3b2  00000000  00000000  000ab300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b56b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a52c  00000000  00000000  001b5704  2**2
>>>>>>> 0033f5f... InterQueue commit
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009d2c 	.word	0x08009d2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08009d2c 	.word	0x08009d2c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <S_SendInstruction>:
 *      - Recibir por el puerto serie
 *      - Establecer un temporizador para una instruccion
 */
#include "HAL_Instructions.h"

void S_SendInstruction(uint8_t instCode, uint8_t time) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	460a      	mov	r2, r1
 800057e:	71fb      	strb	r3, [r7, #7]
 8000580:	4613      	mov	r3, r2
 8000582:	71bb      	strb	r3, [r7, #6]
	//Creo el struct de instruccion
	MovementInstruction_t* pMov = malloc(sizeof(MovementInstruction_t));
 8000584:	2002      	movs	r0, #2
 8000586:	f008 fae5 	bl	8008b54 <malloc>
 800058a:	4603      	mov	r3, r0
 800058c:	60fb      	str	r3, [r7, #12]
	I_CreateInstructionStruct(instCode, time, pMov);
 800058e:	79b9      	ldrb	r1, [r7, #6]
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	68fa      	ldr	r2, [r7, #12]
 8000594:	4618      	mov	r0, r3
 8000596:	f000 f895 	bl	80006c4 <I_CreateInstructionStruct>
	//Transformo la instruccion a una cadena
	char* s_mov;
	I_MovementInstruction_toString(pMov, &s_mov);
 800059a:	f107 0308 	add.w	r3, r7, #8
 800059e:	4619      	mov	r1, r3
 80005a0:	68f8      	ldr	r0, [r7, #12]
 80005a2:	f000 f871 	bl	8000688 <I_MovementInstruction_toString>
	//Reservo el puerto serie
	while(xSemaphoreTake(xSemaphoreSerialHandle, portMAX_DELAY) != pdTRUE );
 80005a6:	bf00      	nop
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <S_SendInstruction+0x68>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f04f 31ff 	mov.w	r1, #4294967295
 80005b0:	4618      	mov	r0, r3
 80005b2:	f005 ff1d 	bl	80063f0 <xQueueSemaphoreTake>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d1f5      	bne.n	80005a8 <S_SendInstruction+0x34>
	//Envio el struct por el puerto serie
	printf("%s\n\r", s_mov);
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	4619      	mov	r1, r3
 80005c0:	4807      	ldr	r0, [pc, #28]	; (80005e0 <S_SendInstruction+0x6c>)
 80005c2:	f008 fbc5 	bl	8008d50 <iprintf>
	//Devuelvo el control del puerto serie
	xSemaphoreGive(xSemaphoreSerialHandle);
 80005c6:	4b05      	ldr	r3, [pc, #20]	; (80005dc <S_SendInstruction+0x68>)
 80005c8:	6818      	ldr	r0, [r3, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	2200      	movs	r2, #0
 80005ce:	2100      	movs	r1, #0
 80005d0:	f005 fc94 	bl	8005efc <xQueueGenericSend>
}
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	200006d4 	.word	0x200006d4
 80005e0:	08009d44 	.word	0x08009d44

080005e4 <__io_putchar>:
#include "SerialTask.h"

PUTCHAR_PROTOTYPE {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

	while (HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 30000)) {
 80005ec:	bf00      	nop
 80005ee:	1d39      	adds	r1, r7, #4
 80005f0:	f247 5330 	movw	r3, #30000	; 0x7530
 80005f4:	2201      	movs	r2, #1
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <__io_putchar+0x28>)
 80005f8:	f003 ff3c 	bl	8004474 <HAL_UART_Transmit>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1f5      	bne.n	80005ee <__io_putchar+0xa>
		;
	}
	//xSemaphoreTake(xSemaphore, portMAX_DELAY);
	//HAL_UART_Transmit_IT(&huart1, (uint8_t*) &ch, 1);
	return ch;
 8000602:	687b      	ldr	r3, [r7, #4]

}
 8000604:	4618      	mov	r0, r3
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	200001bc 	.word	0x200001bc

08000610 <__io_getchar>:

GETCHAR_PROTOTYPE {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0

	uint8_t ch = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	71fb      	strb	r3, [r7, #7]
	while (HAL_OK != HAL_UART_Receive(&huart1, (uint8_t*) &ch, 1, 30000)) {
 800061a:	bf00      	nop
 800061c:	1df9      	adds	r1, r7, #7
 800061e:	f247 5330 	movw	r3, #30000	; 0x7530
 8000622:	2201      	movs	r2, #1
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <__io_getchar+0x2c>)
 8000626:	f003 ffb9 	bl	800459c <HAL_UART_Receive>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d1f5      	bne.n	800061c <__io_getchar+0xc>
		;
	}
	return ch;
 8000630:	79fb      	ldrb	r3, [r7, #7]
}
 8000632:	4618      	mov	r0, r3
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200001bc 	.word	0x200001bc

08000640 <serialTxTask>:
 xQueueSend(xQueue, "H", 1);
 vTaskDelay(200);
 }
 }*/

void serialTxTask(void *parg) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	while (1) {
		uint8_t ins = I_FORDWARD;
 8000648:	2301      	movs	r3, #1
 800064a:	73fb      	strb	r3, [r7, #15]
		uint8_t time = 10;
 800064c:	230a      	movs	r3, #10
 800064e:	73bb      	strb	r3, [r7, #14]
		S_SendInstruction(ins, time);
 8000650:	7bba      	ldrb	r2, [r7, #14]
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	4611      	mov	r1, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ff8c 	bl	8000574 <S_SendInstruction>
		vTaskDelay(time*100);
 800065c:	7bbb      	ldrb	r3, [r7, #14]
 800065e:	2264      	movs	r2, #100	; 0x64
 8000660:	fb02 f303 	mul.w	r3, r2, r3
 8000664:	4618      	mov	r0, r3
 8000666:	f006 fb5b 	bl	8006d20 <vTaskDelay>
	while (1) {
 800066a:	e7ed      	b.n	8000648 <serialTxTask+0x8>

0800066c <CreateSerialObjects>:
	 * - Crear funciones de alto nivel que engloben varias instrucciones de movimiento
	 */

}

void CreateSerialObjects() {
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	//Liberamos el semaforo
	xSemaphoreGive(xSemaphoreSerialHandle);
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <CreateSerialObjects+0x18>)
 8000672:	6818      	ldr	r0, [r3, #0]
 8000674:	2300      	movs	r3, #0
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	f005 fc3f 	bl	8005efc <xQueueGenericSend>

	//Creamos una cola de 16 elementos en la que cada elemento tiene 1 byte
	//xQueue = xQueueCreate(16, 1);
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200006d4 	.word	0x200006d4

08000688 <I_MovementInstruction_toString>:
 *      Author: josec
 */

#include "generalTypes.h"

void I_MovementInstruction_toString(MovementInstruction_t *pMovIns, char **buf) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]

	char *s = (char*) malloc(NUM_CHARS_PER_INSTRUCTION);
 8000692:	2307      	movs	r3, #7
 8000694:	4618      	mov	r0, r3
 8000696:	f008 fa5d 	bl	8008b54 <malloc>
 800069a:	4603      	mov	r3, r0
 800069c:	60fb      	str	r3, [r7, #12]

	sprintf(s, "%d %d", pMovIns->instruction, pMovIns->duration);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	785b      	ldrb	r3, [r3, #1]
 80006a8:	4905      	ldr	r1, [pc, #20]	; (80006c0 <I_MovementInstruction_toString+0x38>)
 80006aa:	68f8      	ldr	r0, [r7, #12]
 80006ac:	f008 fbe2 	bl	8008e74 <siprintf>

	*buf = s;
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	601a      	str	r2, [r3, #0]
}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	08009d4c 	.word	0x08009d4c

080006c4 <I_CreateInstructionStruct>:

uint8_t I_CreateInstructionStruct(uint8_t instCode, uint8_t time,
		MovementInstruction_t *pMovOut) {
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	603a      	str	r2, [r7, #0]
 80006ce:	71fb      	strb	r3, [r7, #7]
 80006d0:	460b      	mov	r3, r1
 80006d2:	71bb      	strb	r3, [r7, #6]
	// Comprueba que todos los parametros sean correctos
	if (instCode < NUM_INSTRUCTIONS) {
 80006d4:	2205      	movs	r2, #5
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	4293      	cmp	r3, r2
 80006da:	d20e      	bcs.n	80006fa <I_CreateInstructionStruct+0x36>
		if (time < I_MAX_TIME_EXECUTION) {
 80006dc:	2264      	movs	r2, #100	; 0x64
 80006de:	79bb      	ldrb	r3, [r7, #6]
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d208      	bcs.n	80006f6 <I_CreateInstructionStruct+0x32>
			if (pMovOut != NULL) {
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d005      	beq.n	80006f6 <I_CreateInstructionStruct+0x32>
				pMovOut->instruction = instCode;
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	79fa      	ldrb	r2, [r7, #7]
 80006ee:	701a      	strb	r2, [r3, #0]
				pMovOut->duration = time;
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	79ba      	ldrb	r2, [r7, #6]
 80006f4:	705a      	strb	r2, [r3, #1]
			}
		}
		return 1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e006      	b.n	8000708 <I_CreateInstructionStruct+0x44>
	}
	// Si no devuelve una instruccion NOPE
	else {
		pMovOut->instruction = I_NOPE;
 80006fa:	2200      	movs	r2, #0
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	701a      	strb	r2, [r3, #0]
		pMovOut->duration = I_MAX_TIME_EXECUTION;
 8000700:	2264      	movs	r2, #100	; 0x64
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	705a      	strb	r2, [r3, #1]
		return 0;
 8000706:	2300      	movs	r3, #0
	}
}
 8000708:	4618      	mov	r0, r3
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071a:	f001 f81e 	bl	800175a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071e:	f000 f84d 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000722:	f000 fa17 	bl	8000b54 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000726:	f000 f8ab 	bl	8000880 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800072a:	f000 f8e1 	bl	80008f0 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800072e:	f000 f91f 	bl	8000970 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000732:	f000 f943 	bl	80009bc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000736:	f000 f97f 	bl	8000a38 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800073a:	f000 f9ad 	bl	8000a98 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800073e:	f000 f9db 	bl	8000af8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000742:	f004 ff57 	bl	80055f4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of xSemaphoreSerial */
  xSemaphoreSerialHandle = osSemaphoreNew(1, 1, &xSemaphoreSerial_attributes);
 8000746:	4a13      	ldr	r2, [pc, #76]	; (8000794 <main+0x80>)
 8000748:	2101      	movs	r1, #1
 800074a:	2001      	movs	r0, #1
 800074c:	f005 f849 	bl	80057e2 <osSemaphoreNew>
 8000750:	4603      	mov	r3, r0
 8000752:	4a11      	ldr	r2, [pc, #68]	; (8000798 <main+0x84>)
 8000754:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  CreateSerialObjects();
 8000756:	f7ff ff89 	bl	800066c <CreateSerialObjects>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of instructionQueue */
  instructionQueueHandle = osMessageQueueNew (100, sizeof(MovementInstruction_t), &instructionQueue_attributes);
 800075a:	4a10      	ldr	r2, [pc, #64]	; (800079c <main+0x88>)
 800075c:	2102      	movs	r1, #2
 800075e:	2064      	movs	r0, #100	; 0x64
 8000760:	f005 f8c8 	bl	80058f4 <osMessageQueueNew>
 8000764:	4603      	mov	r3, r0
 8000766:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <main+0x8c>)
 8000768:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <main+0x90>)
 800076c:	2100      	movs	r1, #0
 800076e:	480e      	ldr	r0, [pc, #56]	; (80007a8 <main+0x94>)
 8000770:	f004 ff8a 	bl	8005688 <osThreadNew>
 8000774:	4603      	mov	r3, r0
 8000776:	4a0d      	ldr	r2, [pc, #52]	; (80007ac <main+0x98>)
 8000778:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(serialTxTask, "tareaSerial", 128, NULL, 1, &serialTaskHandle);
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <main+0x9c>)
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	2301      	movs	r3, #1
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	2300      	movs	r3, #0
 8000784:	2280      	movs	r2, #128	; 0x80
 8000786:	490b      	ldr	r1, [pc, #44]	; (80007b4 <main+0xa0>)
 8000788:	480b      	ldr	r0, [pc, #44]	; (80007b8 <main+0xa4>)
 800078a:	f006 f96e 	bl	8006a6a <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800078e:	f004 ff55 	bl	800563c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000792:	e7fe      	b.n	8000792 <main+0x7e>
 8000794:	08009de8 	.word	0x08009de8
 8000798:	200006d4 	.word	0x200006d4
 800079c:	08009dd0 	.word	0x08009dd0
 80007a0:	200006d0 	.word	0x200006d0
 80007a4:	08009dac 	.word	0x08009dac
 80007a8:	08000eb9 	.word	0x08000eb9
 80007ac:	200006cc 	.word	0x200006cc
 80007b0:	200006d8 	.word	0x200006d8
 80007b4:	08009d88 	.word	0x08009d88
 80007b8:	08000641 	.word	0x08000641

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b096      	sub	sp, #88	; 0x58
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2244      	movs	r2, #68	; 0x44
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f008 f9d8 	bl	8008b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	463b      	mov	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007e2:	f001 fe77 	bl	80024d4 <HAL_PWREx_ControlVoltageScaling>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007ec:	f000 fb7e 	bl	8000eec <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007f0:	f001 fe52 	bl	8002498 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007f4:	4b21      	ldr	r3, [pc, #132]	; (800087c <SystemClock_Config+0xc0>)
 80007f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007fa:	4a20      	ldr	r2, [pc, #128]	; (800087c <SystemClock_Config+0xc0>)
 80007fc:	f023 0318 	bic.w	r3, r3, #24
 8000800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000804:	2314      	movs	r3, #20
 8000806:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000808:	2301      	movs	r3, #1
 800080a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800080c:	2301      	movs	r3, #1
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000814:	2360      	movs	r3, #96	; 0x60
 8000816:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000818:	2302      	movs	r3, #2
 800081a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800081c:	2301      	movs	r3, #1
 800081e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000820:	2301      	movs	r3, #1
 8000822:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000824:	2328      	movs	r3, #40	; 0x28
 8000826:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000828:	2307      	movs	r3, #7
 800082a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800082c:	2302      	movs	r3, #2
 800082e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000830:	2302      	movs	r3, #2
 8000832:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4618      	mov	r0, r3
 800083a:	f001 ff6d 	bl	8002718 <HAL_RCC_OscConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000844:	f000 fb52 	bl	8000eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000848:	230f      	movs	r3, #15
 800084a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084c:	2303      	movs	r3, #3
 800084e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	2104      	movs	r1, #4
 8000860:	4618      	mov	r0, r3
 8000862:	f002 fb41 	bl	8002ee8 <HAL_RCC_ClockConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800086c:	f000 fb3e 	bl	8000eec <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000870:	f003 f85c 	bl	800392c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000874:	bf00      	nop
 8000876:	3758      	adds	r7, #88	; 0x58
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40021000 	.word	0x40021000

08000880 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 8000886:	4a19      	ldr	r2, [pc, #100]	; (80008ec <MX_DFSDM1_Init+0x6c>)
 8000888:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 800088c:	2201      	movs	r2, #1
 800088e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 8000898:	2202      	movs	r2, #2
 800089a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 80008aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008ae:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80008b0:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 80008b8:	2204      	movs	r2, #4
 80008ba:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_DFSDM1_Init+0x68>)
 80008d6:	f001 f87f 	bl	80019d8 <HAL_DFSDM_ChannelInit>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80008e0:	f000 fb04 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000090 	.word	0x20000090
 80008ec:	40016020 	.word	0x40016020

080008f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <MX_I2C2_Init+0x74>)
 80008f6:	4a1c      	ldr	r2, [pc, #112]	; (8000968 <MX_I2C2_Init+0x78>)
 80008f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_I2C2_Init+0x74>)
 80008fc:	4a1b      	ldr	r2, [pc, #108]	; (800096c <MX_I2C2_Init+0x7c>)
 80008fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000900:	4b18      	ldr	r3, [pc, #96]	; (8000964 <MX_I2C2_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000906:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_I2C2_Init+0x74>)
 8000908:	2201      	movs	r2, #1
 800090a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <MX_I2C2_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_I2C2_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_I2C2_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_I2C2_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_I2C2_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800092a:	480e      	ldr	r0, [pc, #56]	; (8000964 <MX_I2C2_Init+0x74>)
 800092c:	f001 fb45 	bl	8001fba <HAL_I2C_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000936:	f000 fad9 	bl	8000eec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	4809      	ldr	r0, [pc, #36]	; (8000964 <MX_I2C2_Init+0x74>)
 800093e:	f001 fbcb 	bl	80020d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000948:	f000 fad0 	bl	8000eec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800094c:	2100      	movs	r1, #0
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_I2C2_Init+0x74>)
 8000950:	f001 fc0d 	bl	800216e <HAL_I2CEx_ConfigDigitalFilter>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800095a:	f000 fac7 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200000c8 	.word	0x200000c8
 8000968:	40005800 	.word	0x40005800
 800096c:	10909cec 	.word	0x10909cec

08000970 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_QUADSPI_Init+0x44>)
 8000976:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <MX_QUADSPI_Init+0x48>)
 8000978:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_QUADSPI_Init+0x44>)
 800097c:	2202      	movs	r2, #2
 800097e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_QUADSPI_Init+0x44>)
 8000982:	2204      	movs	r2, #4
 8000984:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_QUADSPI_Init+0x44>)
 8000988:	2210      	movs	r2, #16
 800098a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_QUADSPI_Init+0x44>)
 800098e:	2217      	movs	r2, #23
 8000990:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_QUADSPI_Init+0x44>)
 8000994:	2200      	movs	r2, #0
 8000996:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_QUADSPI_Init+0x44>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_QUADSPI_Init+0x44>)
 80009a0:	f001 fdfe 	bl	80025a0 <HAL_QSPI_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80009aa:	f000 fa9f 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000114 	.word	0x20000114
 80009b8:	a0001000 	.word	0xa0001000

080009bc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009c2:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <MX_SPI3_Init+0x78>)
 80009c4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009c6:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009cc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80009d4:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009d6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009da:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_SPI3_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_SPI3_Init+0x74>)
 8000a0a:	2207      	movs	r2, #7
 8000a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_SPI3_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_SPI3_Init+0x74>)
 8000a16:	2208      	movs	r2, #8
 8000a18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_SPI3_Init+0x74>)
 8000a1c:	f003 f968 	bl	8003cf0 <HAL_SPI_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a26:	f000 fa61 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000158 	.word	0x20000158
 8000a34:	40003c00 	.word	0x40003c00

08000a38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_USART1_UART_Init+0x58>)
 8000a3e:	4a15      	ldr	r2, [pc, #84]	; (8000a94 <MX_USART1_UART_Init+0x5c>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <MX_USART1_UART_Init+0x58>)
 8000a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_USART1_UART_Init+0x58>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_USART1_UART_Init+0x58>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_USART1_UART_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_USART1_UART_Init+0x58>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_USART1_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_USART1_UART_Init+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <MX_USART1_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_USART1_UART_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_USART1_UART_Init+0x58>)
 8000a7c:	f003 fcac 	bl	80043d8 <HAL_UART_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a86:	f000 fa31 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200001bc 	.word	0x200001bc
 8000a94:	40013800 	.word	0x40013800

08000a98 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_USART3_UART_Init+0x58>)
 8000a9e:	4a15      	ldr	r2, [pc, #84]	; (8000af4 <MX_USART3_UART_Init+0x5c>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <MX_USART3_UART_Init+0x58>)
 8000aa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_USART3_UART_Init+0x58>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <MX_USART3_UART_Init+0x58>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_USART3_UART_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_USART3_UART_Init+0x58>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MX_USART3_UART_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_USART3_UART_Init+0x58>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_USART3_UART_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_USART3_UART_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_USART3_UART_Init+0x58>)
 8000adc:	f003 fc7c 	bl	80043d8 <HAL_UART_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ae6:	f000 fa01 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000240 	.word	0x20000240
 8000af4:	40004800 	.word	0x40004800

08000af8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000afe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b06:	2206      	movs	r2, #6
 8000b08:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b0c:	2202      	movs	r2, #2
 8000b0e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b12:	2202      	movs	r2, #2
 8000b14:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b3c:	f001 fb63 	bl	8002206 <HAL_PCD_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b46:	f000 f9d1 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200002c4 	.word	0x200002c4

08000b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b6a:	4bbd      	ldr	r3, [pc, #756]	; (8000e60 <MX_GPIO_Init+0x30c>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	4abc      	ldr	r2, [pc, #752]	; (8000e60 <MX_GPIO_Init+0x30c>)
 8000b70:	f043 0310 	orr.w	r3, r3, #16
 8000b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b76:	4bba      	ldr	r3, [pc, #744]	; (8000e60 <MX_GPIO_Init+0x30c>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	f003 0310 	and.w	r3, r3, #16
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b82:	4bb7      	ldr	r3, [pc, #732]	; (8000e60 <MX_GPIO_Init+0x30c>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	4ab6      	ldr	r2, [pc, #728]	; (8000e60 <MX_GPIO_Init+0x30c>)
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8e:	4bb4      	ldr	r3, [pc, #720]	; (8000e60 <MX_GPIO_Init+0x30c>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	f003 0304 	and.w	r3, r3, #4
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	4bb1      	ldr	r3, [pc, #708]	; (8000e60 <MX_GPIO_Init+0x30c>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	4ab0      	ldr	r2, [pc, #704]	; (8000e60 <MX_GPIO_Init+0x30c>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba6:	4bae      	ldr	r3, [pc, #696]	; (8000e60 <MX_GPIO_Init+0x30c>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	4bab      	ldr	r3, [pc, #684]	; (8000e60 <MX_GPIO_Init+0x30c>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	4aaa      	ldr	r2, [pc, #680]	; (8000e60 <MX_GPIO_Init+0x30c>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bbe:	4ba8      	ldr	r3, [pc, #672]	; (8000e60 <MX_GPIO_Init+0x30c>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bca:	4ba5      	ldr	r3, [pc, #660]	; (8000e60 <MX_GPIO_Init+0x30c>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	4aa4      	ldr	r2, [pc, #656]	; (8000e60 <MX_GPIO_Init+0x30c>)
 8000bd0:	f043 0308 	orr.w	r3, r3, #8
 8000bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd6:	4ba2      	ldr	r3, [pc, #648]	; (8000e60 <MX_GPIO_Init+0x30c>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	f003 0308 	and.w	r3, r3, #8
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000be8:	489e      	ldr	r0, [pc, #632]	; (8000e64 <MX_GPIO_Init+0x310>)
 8000bea:	f001 f9ab 	bl	8001f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f248 1104 	movw	r1, #33028	; 0x8104
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf8:	f001 f9a4 	bl	8001f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000c02:	4899      	ldr	r0, [pc, #612]	; (8000e68 <MX_GPIO_Init+0x314>)
 8000c04:	f001 f99e 	bl	8001f44 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f241 0181 	movw	r1, #4225	; 0x1081
 8000c0e:	4897      	ldr	r0, [pc, #604]	; (8000e6c <MX_GPIO_Init+0x318>)
 8000c10:	f001 f998 	bl	8001f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1a:	4894      	ldr	r0, [pc, #592]	; (8000e6c <MX_GPIO_Init+0x318>)
 8000c1c:	f001 f992 	bl	8001f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000c26:	4892      	ldr	r0, [pc, #584]	; (8000e70 <MX_GPIO_Init+0x31c>)
 8000c28:	f001 f98c 	bl	8001f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	2120      	movs	r1, #32
 8000c30:	488d      	ldr	r0, [pc, #564]	; (8000e68 <MX_GPIO_Init+0x314>)
 8000c32:	f001 f987 	bl	8001f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c36:	2201      	movs	r2, #1
 8000c38:	2101      	movs	r1, #1
 8000c3a:	488a      	ldr	r0, [pc, #552]	; (8000e64 <MX_GPIO_Init+0x310>)
 8000c3c:	f001 f982 	bl	8001f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000c40:	f240 1315 	movw	r3, #277	; 0x115
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	4882      	ldr	r0, [pc, #520]	; (8000e64 <MX_GPIO_Init+0x310>)
 8000c5a:	f000 ffc9 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000c5e:	236a      	movs	r3, #106	; 0x6a
 8000c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	487c      	ldr	r0, [pc, #496]	; (8000e64 <MX_GPIO_Init+0x310>)
 8000c74:	f000 ffbc 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c7e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4878      	ldr	r0, [pc, #480]	; (8000e70 <MX_GPIO_Init+0x31c>)
 8000c90:	f000 ffae 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000c94:	233f      	movs	r3, #63	; 0x3f
 8000c96:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c98:	230b      	movs	r3, #11
 8000c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4872      	ldr	r0, [pc, #456]	; (8000e70 <MX_GPIO_Init+0x31c>)
 8000ca8:	f000 ffa2 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000cac:	2303      	movs	r3, #3
 8000cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cca:	f000 ff91 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000cce:	f248 1304 	movw	r3, #33028	; 0x8104
 8000cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cea:	f000 ff81 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000cee:	2308      	movs	r3, #8
 8000cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0c:	f000 ff70 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000d10:	2310      	movs	r3, #16
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d14:	230b      	movs	r3, #11
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d26:	f000 ff63 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000d2a:	23e0      	movs	r3, #224	; 0xe0
 8000d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d3a:	2305      	movs	r3, #5
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d48:	f000 ff52 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d50:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4841      	ldr	r0, [pc, #260]	; (8000e68 <MX_GPIO_Init+0x314>)
 8000d62:	f000 ff45 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000d66:	2302      	movs	r3, #2
 8000d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d6a:	230b      	movs	r3, #11
 8000d6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	483b      	ldr	r0, [pc, #236]	; (8000e68 <MX_GPIO_Init+0x314>)
 8000d7a:	f000 ff39 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000d7e:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000d82:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	4834      	ldr	r0, [pc, #208]	; (8000e68 <MX_GPIO_Init+0x314>)
 8000d98:	f000 ff2a 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000d9c:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000da0:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	482e      	ldr	r0, [pc, #184]	; (8000e6c <MX_GPIO_Init+0x318>)
 8000db4:	f000 ff1c 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000db8:	f243 0381 	movw	r3, #12417	; 0x3081
 8000dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4826      	ldr	r0, [pc, #152]	; (8000e6c <MX_GPIO_Init+0x318>)
 8000dd2:	f000 ff0d 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000dd6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4619      	mov	r1, r3
 8000dee:	4820      	ldr	r0, [pc, #128]	; (8000e70 <MX_GPIO_Init+0x31c>)
 8000df0:	f000 fefe 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000df4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dfa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4819      	ldr	r0, [pc, #100]	; (8000e70 <MX_GPIO_Init+0x31c>)
 8000e0c:	f000 fef0 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000e10:	2302      	movs	r3, #2
 8000e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e20:	2305      	movs	r3, #5
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4810      	ldr	r0, [pc, #64]	; (8000e6c <MX_GPIO_Init+0x318>)
 8000e2c:	f000 fee0 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000e30:	2378      	movs	r3, #120	; 0x78
 8000e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e40:	2307      	movs	r3, #7
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4808      	ldr	r0, [pc, #32]	; (8000e6c <MX_GPIO_Init+0x318>)
 8000e4c:	f000 fed0 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000e50:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e56:	2312      	movs	r3, #18
 8000e58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e00a      	b.n	8000e74 <MX_GPIO_Init+0x320>
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000
 8000e64:	48001000 	.word	0x48001000
 8000e68:	48000400 	.word	0x48000400
 8000e6c:	48000c00 	.word	0x48000c00
 8000e70:	48000800 	.word	0x48000800
 8000e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e76:	2303      	movs	r3, #3
 8000e78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	480b      	ldr	r0, [pc, #44]	; (8000eb4 <MX_GPIO_Init+0x360>)
 8000e86:	f000 feb3 	bl	8001bf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2105      	movs	r1, #5
 8000e8e:	2017      	movs	r0, #23
 8000e90:	f000 fd78 	bl	8001984 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e94:	2017      	movs	r0, #23
 8000e96:	f000 fd91 	bl	80019bc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2105      	movs	r1, #5
 8000e9e:	2028      	movs	r0, #40	; 0x28
 8000ea0:	f000 fd70 	bl	8001984 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ea4:	2028      	movs	r0, #40	; 0x28
 8000ea6:	f000 fd89 	bl	80019bc <HAL_NVIC_EnableIRQ>

}
 8000eaa:	bf00      	nop
 8000eac:	3728      	adds	r7, #40	; 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	48000400 	.word	0x48000400

08000eb8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f004 fc73 	bl	80057ac <osDelay>
 8000ec6:	e7fb      	b.n	8000ec0 <StartDefaultTask+0x8>

08000ec8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d101      	bne.n	8000ede <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eda:	f000 fc57 	bl	800178c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40000800 	.word	0x40000800

08000eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef0:	b672      	cpsid	i
}
 8000ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <Error_Handler+0x8>
	...

08000ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <HAL_MspInit+0x4c>)
 8000f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f02:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <HAL_MspInit+0x4c>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6613      	str	r3, [r2, #96]	; 0x60
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_MspInit+0x4c>)
 8000f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <HAL_MspInit+0x4c>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <HAL_MspInit+0x4c>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f20:	6593      	str	r3, [r2, #88]	; 0x58
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <HAL_MspInit+0x4c>)
 8000f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	210f      	movs	r1, #15
 8000f32:	f06f 0001 	mvn.w	r0, #1
 8000f36:	f000 fd25 	bl	8001984 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40021000 	.word	0x40021000

08000f48 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0ac      	sub	sp, #176	; 0xb0
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2288      	movs	r2, #136	; 0x88
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f007 fe09 	bl	8008b80 <memset>
  if(DFSDM1_Init == 0)
 8000f6e:	4b25      	ldr	r3, [pc, #148]	; (8001004 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d142      	bne.n	8000ffc <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000f76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f7a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4618      	mov	r0, r3
 8000f88:	f002 f9e6 	bl	8003358 <HAL_RCCEx_PeriphCLKConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000f92:	f7ff ffab 	bl	8000eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9a:	4a1b      	ldr	r2, [pc, #108]	; (8001008 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fa0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	4a15      	ldr	r2, [pc, #84]	; (8001008 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fb4:	f043 0310 	orr.w	r3, r3, #16
 8000fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	f003 0310 	and.w	r3, r3, #16
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000fc6:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000fca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000fe0:	2306      	movs	r3, #6
 8000fe2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fe6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fea:	4619      	mov	r1, r3
 8000fec:	4807      	ldr	r0, [pc, #28]	; (800100c <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000fee:	f000 fdff 	bl	8001bf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	4a02      	ldr	r2, [pc, #8]	; (8001004 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000ffa:	6013      	str	r3, [r2, #0]
  }

}
 8000ffc:	bf00      	nop
 8000ffe:	37b0      	adds	r7, #176	; 0xb0
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200006dc 	.word	0x200006dc
 8001008:	40021000 	.word	0x40021000
 800100c:	48001000 	.word	0x48001000

08001010 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b0ac      	sub	sp, #176	; 0xb0
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2288      	movs	r2, #136	; 0x88
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f007 fda5 	bl	8008b80 <memset>
  if(hi2c->Instance==I2C2)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <HAL_I2C_MspInit+0xb0>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d13b      	bne.n	80010b8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001044:	2300      	movs	r3, #0
 8001046:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4618      	mov	r0, r3
 800104e:	f002 f983 	bl	8003358 <HAL_RCCEx_PeriphCLKConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001058:	f7ff ff48 	bl	8000eec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105c:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <HAL_I2C_MspInit+0xb4>)
 800105e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001060:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <HAL_I2C_MspInit+0xb4>)
 8001062:	f043 0302 	orr.w	r3, r3, #2
 8001066:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HAL_I2C_MspInit+0xb4>)
 800106a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001074:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001078:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800107c:	2312      	movs	r3, #18
 800107e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001082:	2301      	movs	r3, #1
 8001084:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800108e:	2304      	movs	r3, #4
 8001090:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001094:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001098:	4619      	mov	r1, r3
 800109a:	480b      	ldr	r0, [pc, #44]	; (80010c8 <HAL_I2C_MspInit+0xb8>)
 800109c:	f000 fda8 	bl	8001bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <HAL_I2C_MspInit+0xb4>)
 80010a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a4:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <HAL_I2C_MspInit+0xb4>)
 80010a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010aa:	6593      	str	r3, [r2, #88]	; 0x58
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <HAL_I2C_MspInit+0xb4>)
 80010ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80010b8:	bf00      	nop
 80010ba:	37b0      	adds	r7, #176	; 0xb0
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40005800 	.word	0x40005800
 80010c4:	40021000 	.word	0x40021000
 80010c8:	48000400 	.word	0x48000400

080010cc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a17      	ldr	r2, [pc, #92]	; (8001148 <HAL_QSPI_MspInit+0x7c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d128      	bne.n	8001140 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <HAL_QSPI_MspInit+0x80>)
 80010f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010f2:	4a16      	ldr	r2, [pc, #88]	; (800114c <HAL_QSPI_MspInit+0x80>)
 80010f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f8:	6513      	str	r3, [r2, #80]	; 0x50
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_QSPI_MspInit+0x80>)
 80010fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <HAL_QSPI_MspInit+0x80>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	4a10      	ldr	r2, [pc, #64]	; (800114c <HAL_QSPI_MspInit+0x80>)
 800110c:	f043 0310 	orr.w	r3, r3, #16
 8001110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <HAL_QSPI_MspInit+0x80>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	f003 0310 	and.w	r3, r3, #16
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800111e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001122:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001130:	230a      	movs	r3, #10
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <HAL_QSPI_MspInit+0x84>)
 800113c:	f000 fd58 	bl	8001bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001140:	bf00      	nop
 8001142:	3728      	adds	r7, #40	; 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	a0001000 	.word	0xa0001000
 800114c:	40021000 	.word	0x40021000
 8001150:	48001000 	.word	0x48001000

08001154 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a17      	ldr	r2, [pc, #92]	; (80011d0 <HAL_SPI_MspInit+0x7c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d128      	bne.n	80011c8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <HAL_SPI_MspInit+0x80>)
 8001178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117a:	4a16      	ldr	r2, [pc, #88]	; (80011d4 <HAL_SPI_MspInit+0x80>)
 800117c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001180:	6593      	str	r3, [r2, #88]	; 0x58
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <HAL_SPI_MspInit+0x80>)
 8001184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001186:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_SPI_MspInit+0x80>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <HAL_SPI_MspInit+0x80>)
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_SPI_MspInit+0x80>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80011a6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b4:	2303      	movs	r3, #3
 80011b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011b8:	2306      	movs	r3, #6
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <HAL_SPI_MspInit+0x84>)
 80011c4:	f000 fd14 	bl	8001bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80011c8:	bf00      	nop
 80011ca:	3728      	adds	r7, #40	; 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40003c00 	.word	0x40003c00
 80011d4:	40021000 	.word	0x40021000
 80011d8:	48000800 	.word	0x48000800

080011dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b0ae      	sub	sp, #184	; 0xb8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	2288      	movs	r2, #136	; 0x88
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f007 fcbf 	bl	8008b80 <memset>
  if(huart->Instance==USART1)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a42      	ldr	r2, [pc, #264]	; (8001310 <HAL_UART_MspInit+0x134>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d13b      	bne.n	8001284 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800120c:	2301      	movs	r3, #1
 800120e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001210:	2300      	movs	r3, #0
 8001212:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	4618      	mov	r0, r3
 800121a:	f002 f89d 	bl	8003358 <HAL_RCCEx_PeriphCLKConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001224:	f7ff fe62 	bl	8000eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001228:	4b3a      	ldr	r3, [pc, #232]	; (8001314 <HAL_UART_MspInit+0x138>)
 800122a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800122c:	4a39      	ldr	r2, [pc, #228]	; (8001314 <HAL_UART_MspInit+0x138>)
 800122e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001232:	6613      	str	r3, [r2, #96]	; 0x60
 8001234:	4b37      	ldr	r3, [pc, #220]	; (8001314 <HAL_UART_MspInit+0x138>)
 8001236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001238:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123c:	61bb      	str	r3, [r7, #24]
 800123e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001240:	4b34      	ldr	r3, [pc, #208]	; (8001314 <HAL_UART_MspInit+0x138>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001244:	4a33      	ldr	r2, [pc, #204]	; (8001314 <HAL_UART_MspInit+0x138>)
 8001246:	f043 0302 	orr.w	r3, r3, #2
 800124a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124c:	4b31      	ldr	r3, [pc, #196]	; (8001314 <HAL_UART_MspInit+0x138>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001258:	23c0      	movs	r3, #192	; 0xc0
 800125a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126a:	2303      	movs	r3, #3
 800126c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001270:	2307      	movs	r3, #7
 8001272:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001276:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800127a:	4619      	mov	r1, r3
 800127c:	4826      	ldr	r0, [pc, #152]	; (8001318 <HAL_UART_MspInit+0x13c>)
 800127e:	f000 fcb7 	bl	8001bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001282:	e040      	b.n	8001306 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a24      	ldr	r2, [pc, #144]	; (800131c <HAL_UART_MspInit+0x140>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d13b      	bne.n	8001306 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800128e:	2304      	movs	r3, #4
 8001290:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001292:	2300      	movs	r3, #0
 8001294:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4618      	mov	r0, r3
 800129c:	f002 f85c 	bl	8003358 <HAL_RCCEx_PeriphCLKConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_UART_MspInit+0xce>
      Error_Handler();
 80012a6:	f7ff fe21 	bl	8000eec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <HAL_UART_MspInit+0x138>)
 80012ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ae:	4a19      	ldr	r2, [pc, #100]	; (8001314 <HAL_UART_MspInit+0x138>)
 80012b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b4:	6593      	str	r3, [r2, #88]	; 0x58
 80012b6:	4b17      	ldr	r3, [pc, #92]	; (8001314 <HAL_UART_MspInit+0x138>)
 80012b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c2:	4b14      	ldr	r3, [pc, #80]	; (8001314 <HAL_UART_MspInit+0x138>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	4a13      	ldr	r2, [pc, #76]	; (8001314 <HAL_UART_MspInit+0x138>)
 80012c8:	f043 0308 	orr.w	r3, r3, #8
 80012cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <HAL_UART_MspInit+0x138>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80012da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ee:	2303      	movs	r3, #3
 80012f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012f4:	2307      	movs	r3, #7
 80012f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012fa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012fe:	4619      	mov	r1, r3
 8001300:	4807      	ldr	r0, [pc, #28]	; (8001320 <HAL_UART_MspInit+0x144>)
 8001302:	f000 fc75 	bl	8001bf0 <HAL_GPIO_Init>
}
 8001306:	bf00      	nop
 8001308:	37b8      	adds	r7, #184	; 0xb8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40013800 	.word	0x40013800
 8001314:	40021000 	.word	0x40021000
 8001318:	48000400 	.word	0x48000400
 800131c:	40004800 	.word	0x40004800
 8001320:	48000c00 	.word	0x48000c00

08001324 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b0ac      	sub	sp, #176	; 0xb0
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2288      	movs	r2, #136	; 0x88
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f007 fc1b 	bl	8008b80 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001352:	d17c      	bne.n	800144e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001358:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800135a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800135e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001362:	2301      	movs	r3, #1
 8001364:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001366:	2301      	movs	r3, #1
 8001368:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800136a:	2318      	movs	r3, #24
 800136c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800136e:	2307      	movs	r3, #7
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001372:	2302      	movs	r3, #2
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001376:	2302      	movs	r3, #2
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800137a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800137e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4618      	mov	r0, r3
 8001386:	f001 ffe7 	bl	8003358 <HAL_RCCEx_PeriphCLKConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001390:	f7ff fdac 	bl	8000eec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001394:	4b30      	ldr	r3, [pc, #192]	; (8001458 <HAL_PCD_MspInit+0x134>)
 8001396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001398:	4a2f      	ldr	r2, [pc, #188]	; (8001458 <HAL_PCD_MspInit+0x134>)
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a0:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <HAL_PCD_MspInit+0x134>)
 80013a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80013ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013c4:	4619      	mov	r1, r3
 80013c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ca:	f000 fc11 	bl	8001bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80013ce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013e8:	230a      	movs	r3, #10
 80013ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013f2:	4619      	mov	r1, r3
 80013f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f8:	f000 fbfa 	bl	8001bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <HAL_PCD_MspInit+0x134>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001400:	4a15      	ldr	r2, [pc, #84]	; (8001458 <HAL_PCD_MspInit+0x134>)
 8001402:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001406:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <HAL_PCD_MspInit+0x134>)
 800140a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001414:	4b10      	ldr	r3, [pc, #64]	; (8001458 <HAL_PCD_MspInit+0x134>)
 8001416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d114      	bne.n	800144a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001420:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <HAL_PCD_MspInit+0x134>)
 8001422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001424:	4a0c      	ldr	r2, [pc, #48]	; (8001458 <HAL_PCD_MspInit+0x134>)
 8001426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142a:	6593      	str	r3, [r2, #88]	; 0x58
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_PCD_MspInit+0x134>)
 800142e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001438:	f001 f8a2 	bl	8002580 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_PCD_MspInit+0x134>)
 800143e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001440:	4a05      	ldr	r2, [pc, #20]	; (8001458 <HAL_PCD_MspInit+0x134>)
 8001442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001446:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001448:	e001      	b.n	800144e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800144a:	f001 f899 	bl	8002580 <HAL_PWREx_EnableVddUSB>
}
 800144e:	bf00      	nop
 8001450:	37b0      	adds	r7, #176	; 0xb0
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000

0800145c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08c      	sub	sp, #48	; 0x30
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 800146c:	2200      	movs	r2, #0
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	201e      	movs	r0, #30
 8001472:	f000 fa87 	bl	8001984 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001476:	201e      	movs	r0, #30
 8001478:	f000 faa0 	bl	80019bc <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800147c:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <HAL_InitTick+0x9c>)
 800147e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001480:	4a1d      	ldr	r2, [pc, #116]	; (80014f8 <HAL_InitTick+0x9c>)
 8001482:	f043 0304 	orr.w	r3, r3, #4
 8001486:	6593      	str	r3, [r2, #88]	; 0x58
 8001488:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <HAL_InitTick+0x9c>)
 800148a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001494:	f107 0210 	add.w	r2, r7, #16
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4611      	mov	r1, r2
 800149e:	4618      	mov	r0, r3
 80014a0:	f001 fec8 	bl	8003234 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014a4:	f001 fe9a 	bl	80031dc <HAL_RCC_GetPCLK1Freq>
 80014a8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ac:	4a13      	ldr	r2, [pc, #76]	; (80014fc <HAL_InitTick+0xa0>)
 80014ae:	fba2 2303 	umull	r2, r3, r2, r3
 80014b2:	0c9b      	lsrs	r3, r3, #18
 80014b4:	3b01      	subs	r3, #1
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <HAL_InitTick+0xa4>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	; (8001504 <HAL_InitTick+0xa8>)
 80014bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <HAL_InitTick+0xa4>)
 80014c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014c4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80014c6:	4a0e      	ldr	r2, [pc, #56]	; (8001500 <HAL_InitTick+0xa4>)
 80014c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ca:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <HAL_InitTick+0xa4>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <HAL_InitTick+0xa4>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80014d8:	4809      	ldr	r0, [pc, #36]	; (8001500 <HAL_InitTick+0xa4>)
 80014da:	f002 fcac 	bl	8003e36 <HAL_TIM_Base_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d104      	bne.n	80014ee <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80014e4:	4806      	ldr	r0, [pc, #24]	; (8001500 <HAL_InitTick+0xa4>)
 80014e6:	f002 fd07 	bl	8003ef8 <HAL_TIM_Base_Start_IT>
 80014ea:	4603      	mov	r3, r0
 80014ec:	e000      	b.n	80014f0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3730      	adds	r7, #48	; 0x30
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40021000 	.word	0x40021000
 80014fc:	431bde83 	.word	0x431bde83
 8001500:	200006e0 	.word	0x200006e0
 8001504:	40000800 	.word	0x40000800

08001508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800150c:	e7fe      	b.n	800150c <NMI_Handler+0x4>

0800150e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001512:	e7fe      	b.n	8001512 <HardFault_Handler+0x4>

08001514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <MemManage_Handler+0x4>

0800151a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151e:	e7fe      	b.n	800151e <BusFault_Handler+0x4>

08001520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <UsageFault_Handler+0x4>

08001526 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001538:	2020      	movs	r0, #32
 800153a:	f000 fd1b 	bl	8001f74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800153e:	2040      	movs	r0, #64	; 0x40
 8001540:	f000 fd18 	bl	8001f74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001544:	2080      	movs	r0, #128	; 0x80
 8001546:	f000 fd15 	bl	8001f74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800154a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800154e:	f000 fd11 	bl	8001f74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <TIM4_IRQHandler+0x10>)
 800155e:	f002 fd3b 	bl	8003fd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200006e0 	.word	0x200006e0

0800156c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001570:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001574:	f000 fcfe 	bl	8001f74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001578:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800157c:	f000 fcfa 	bl	8001f74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001580:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001584:	f000 fcf6 	bl	8001f74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001588:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800158c:	f000 fcf2 	bl	8001f74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001590:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001594:	f000 fcee 	bl	8001f74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	e00a      	b.n	80015c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015ae:	f7ff f82f 	bl	8000610 <__io_getchar>
 80015b2:	4601      	mov	r1, r0
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	60ba      	str	r2, [r7, #8]
 80015ba:	b2ca      	uxtb	r2, r1
 80015bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3301      	adds	r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dbf0      	blt.n	80015ae <_read+0x12>
	}

return len;
 80015cc:	687b      	ldr	r3, [r7, #4]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	60f8      	str	r0, [r7, #12]
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	e009      	b.n	80015fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	60ba      	str	r2, [r7, #8]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe fff7 	bl	80005e4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	3301      	adds	r3, #1
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	429a      	cmp	r2, r3
 8001602:	dbf1      	blt.n	80015e8 <_write+0x12>
	}
	return len;
 8001604:	687b      	ldr	r3, [r7, #4]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <_close>:

int _close(int file)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
	return -1;
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001636:	605a      	str	r2, [r3, #4]
	return 0;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <_isatty>:

int _isatty(int file)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
	return 1;
 800164e:	2301      	movs	r3, #1
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
	return 0;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001680:	4a14      	ldr	r2, [pc, #80]	; (80016d4 <_sbrk+0x5c>)
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <_sbrk+0x60>)
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <_sbrk+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d102      	bne.n	800169a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <_sbrk+0x64>)
 8001696:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <_sbrk+0x68>)
 8001698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d207      	bcs.n	80016b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a8:	f007 f930 	bl	800890c <__errno>
 80016ac:	4603      	mov	r3, r0
 80016ae:	220c      	movs	r2, #12
 80016b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	e009      	b.n	80016cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <_sbrk+0x64>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	4a05      	ldr	r2, [pc, #20]	; (80016dc <_sbrk+0x64>)
 80016c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ca:	68fb      	ldr	r3, [r7, #12]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20018000 	.word	0x20018000
 80016d8:	00000400 	.word	0x00000400
 80016dc:	2000072c 	.word	0x2000072c
 80016e0:	20002130 	.word	0x20002130

080016e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <SystemInit+0x20>)
 80016ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ee:	4a05      	ldr	r2, [pc, #20]	; (8001704 <SystemInit+0x20>)
 80016f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001740 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800170c:	f7ff ffea 	bl	80016e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001710:	480c      	ldr	r0, [pc, #48]	; (8001744 <LoopForever+0x6>)
  ldr r1, =_edata
 8001712:	490d      	ldr	r1, [pc, #52]	; (8001748 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001714:	4a0d      	ldr	r2, [pc, #52]	; (800174c <LoopForever+0xe>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001718:	e002      	b.n	8001720 <LoopCopyDataInit>

0800171a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800171c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171e:	3304      	adds	r3, #4

08001720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001724:	d3f9      	bcc.n	800171a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001728:	4c0a      	ldr	r4, [pc, #40]	; (8001754 <LoopForever+0x16>)
  movs r3, #0
 800172a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800172c:	e001      	b.n	8001732 <LoopFillZerobss>

0800172e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001730:	3204      	adds	r2, #4

08001732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001734:	d3fb      	bcc.n	800172e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001736:	f007 f9e5 	bl	8008b04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800173a:	f7fe ffeb 	bl	8000714 <main>

0800173e <LoopForever>:

LoopForever:
    b LoopForever
 800173e:	e7fe      	b.n	800173e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001740:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001748:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800174c:	08009ee8 	.word	0x08009ee8
  ldr r2, =_sbss
 8001750:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001754:	20002130 	.word	0x20002130

08001758 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001758:	e7fe      	b.n	8001758 <ADC1_2_IRQHandler>

0800175a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001764:	2003      	movs	r0, #3
 8001766:	f000 f902 	bl	800196e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800176a:	200f      	movs	r0, #15
 800176c:	f7ff fe76 	bl	800145c <HAL_InitTick>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d002      	beq.n	800177c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	71fb      	strb	r3, [r7, #7]
 800177a:	e001      	b.n	8001780 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800177c:	f7ff fbbc 	bl	8000ef8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001780:	79fb      	ldrb	r3, [r7, #7]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_IncTick+0x20>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_IncTick+0x24>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4413      	add	r3, r2
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <HAL_IncTick+0x24>)
 800179e:	6013      	str	r3, [r2, #0]
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000008 	.word	0x20000008
 80017b0:	20000730 	.word	0x20000730

080017b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return uwTick;
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <HAL_GetTick+0x14>)
 80017ba:	681b      	ldr	r3, [r3, #0]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000730 	.word	0x20000730

080017cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d4:	f7ff ffee 	bl	80017b4 <HAL_GetTick>
 80017d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e4:	d005      	beq.n	80017f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_Delay+0x44>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017f2:	bf00      	nop
 80017f4:	f7ff ffde 	bl	80017b4 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	429a      	cmp	r2, r3
 8001802:	d8f7      	bhi.n	80017f4 <HAL_Delay+0x28>
  {
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000008 	.word	0x20000008

08001814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001830:	4013      	ands	r3, r2
 8001832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800183c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001846:	4a04      	ldr	r2, [pc, #16]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	60d3      	str	r3, [r2, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <__NVIC_GetPriorityGrouping+0x18>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	f003 0307 	and.w	r3, r3, #7
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	2b00      	cmp	r3, #0
 8001888:	db0b      	blt.n	80018a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	f003 021f 	and.w	r2, r3, #31
 8001890:	4907      	ldr	r1, [pc, #28]	; (80018b0 <__NVIC_EnableIRQ+0x38>)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	095b      	lsrs	r3, r3, #5
 8001898:	2001      	movs	r0, #1
 800189a:	fa00 f202 	lsl.w	r2, r0, r2
 800189e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000e100 	.word	0xe000e100

080018b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db0a      	blt.n	80018de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	490c      	ldr	r1, [pc, #48]	; (8001900 <__NVIC_SetPriority+0x4c>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018dc:	e00a      	b.n	80018f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4908      	ldr	r1, [pc, #32]	; (8001904 <__NVIC_SetPriority+0x50>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	3b04      	subs	r3, #4
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	761a      	strb	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000e100 	.word	0xe000e100
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f1c3 0307 	rsb	r3, r3, #7
 8001922:	2b04      	cmp	r3, #4
 8001924:	bf28      	it	cs
 8001926:	2304      	movcs	r3, #4
 8001928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3304      	adds	r3, #4
 800192e:	2b06      	cmp	r3, #6
 8001930:	d902      	bls.n	8001938 <NVIC_EncodePriority+0x30>
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3b03      	subs	r3, #3
 8001936:	e000      	b.n	800193a <NVIC_EncodePriority+0x32>
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	f04f 32ff 	mov.w	r2, #4294967295
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43da      	mvns	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	401a      	ands	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001950:	f04f 31ff 	mov.w	r1, #4294967295
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43d9      	mvns	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	4313      	orrs	r3, r2
         );
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff ff4c 	bl	8001814 <__NVIC_SetPriorityGrouping>
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
 8001990:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001996:	f7ff ff61 	bl	800185c <__NVIC_GetPriorityGrouping>
 800199a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	68b9      	ldr	r1, [r7, #8]
 80019a0:	6978      	ldr	r0, [r7, #20]
 80019a2:	f7ff ffb1 	bl	8001908 <NVIC_EncodePriority>
 80019a6:	4602      	mov	r2, r0
 80019a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ac:	4611      	mov	r1, r2
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff ff80 	bl	80018b4 <__NVIC_SetPriority>
}
 80019b4:	bf00      	nop
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff ff54 	bl	8001878 <__NVIC_EnableIRQ>
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e0ac      	b.n	8001b44 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 f8b2 	bl	8001b58 <DFSDM_GetChannelFromInstance>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4a55      	ldr	r2, [pc, #340]	; (8001b4c <HAL_DFSDM_ChannelInit+0x174>)
 80019f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e09f      	b.n	8001b44 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff fa9f 	bl	8000f48 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001a0a:	4b51      	ldr	r3, [pc, #324]	; (8001b50 <HAL_DFSDM_ChannelInit+0x178>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	4a4f      	ldr	r2, [pc, #316]	; (8001b50 <HAL_DFSDM_ChannelInit+0x178>)
 8001a12:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001a14:	4b4e      	ldr	r3, [pc, #312]	; (8001b50 <HAL_DFSDM_ChannelInit+0x178>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d125      	bne.n	8001a68 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001a1c:	4b4d      	ldr	r3, [pc, #308]	; (8001b54 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a4c      	ldr	r2, [pc, #304]	; (8001b54 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001a26:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001a28:	4b4a      	ldr	r3, [pc, #296]	; (8001b54 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	4948      	ldr	r1, [pc, #288]	; (8001b54 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001a36:	4b47      	ldr	r3, [pc, #284]	; (8001b54 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a46      	ldr	r2, [pc, #280]	; (8001b54 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a3c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001a40:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	791b      	ldrb	r3, [r3, #4]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d108      	bne.n	8001a5c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001a4a:	4b42      	ldr	r3, [pc, #264]	; (8001b54 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	041b      	lsls	r3, r3, #16
 8001a56:	493f      	ldr	r1, [pc, #252]	; (8001b54 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001a5c:	4b3d      	ldr	r3, [pc, #244]	; (8001b54 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a3c      	ldr	r2, [pc, #240]	; (8001b54 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a66:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001a76:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6819      	ldr	r1, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a86:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001a8c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 020f 	bic.w	r2, r2, #15
 8001aa4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6819      	ldr	r1, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001acc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6899      	ldr	r1, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001adc:	3b01      	subs	r3, #1
 8001ade:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f002 0207 	and.w	r2, r2, #7
 8001af8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6859      	ldr	r1, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b24:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 f810 	bl	8001b58 <DFSDM_GetChannelFromInstance>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4904      	ldr	r1, [pc, #16]	; (8001b4c <HAL_DFSDM_ChannelInit+0x174>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000738 	.word	0x20000738
 8001b50:	20000734 	.word	0x20000734
 8001b54:	40016000 	.word	0x40016000

08001b58 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a1c      	ldr	r2, [pc, #112]	; (8001bd4 <DFSDM_GetChannelFromInstance+0x7c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d102      	bne.n	8001b6e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	e02b      	b.n	8001bc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a19      	ldr	r2, [pc, #100]	; (8001bd8 <DFSDM_GetChannelFromInstance+0x80>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d102      	bne.n	8001b7c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001b76:	2301      	movs	r3, #1
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	e024      	b.n	8001bc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a17      	ldr	r2, [pc, #92]	; (8001bdc <DFSDM_GetChannelFromInstance+0x84>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d102      	bne.n	8001b8a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001b84:	2302      	movs	r3, #2
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	e01d      	b.n	8001bc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <DFSDM_GetChannelFromInstance+0x88>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d102      	bne.n	8001b98 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001b92:	2304      	movs	r3, #4
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	e016      	b.n	8001bc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <DFSDM_GetChannelFromInstance+0x8c>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d102      	bne.n	8001ba6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001ba0:	2305      	movs	r3, #5
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	e00f      	b.n	8001bc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a0f      	ldr	r2, [pc, #60]	; (8001be8 <DFSDM_GetChannelFromInstance+0x90>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d102      	bne.n	8001bb4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001bae:	2306      	movs	r3, #6
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	e008      	b.n	8001bc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a0d      	ldr	r2, [pc, #52]	; (8001bec <DFSDM_GetChannelFromInstance+0x94>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d102      	bne.n	8001bc2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001bbc:	2307      	movs	r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	e001      	b.n	8001bc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	40016000 	.word	0x40016000
 8001bd8:	40016020 	.word	0x40016020
 8001bdc:	40016040 	.word	0x40016040
 8001be0:	40016080 	.word	0x40016080
 8001be4:	400160a0 	.word	0x400160a0
 8001be8:	400160c0 	.word	0x400160c0
 8001bec:	400160e0 	.word	0x400160e0

08001bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b087      	sub	sp, #28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bfe:	e17f      	b.n	8001f00 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	2101      	movs	r1, #1
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 8171 	beq.w	8001efa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d005      	beq.n	8001c30 <HAL_GPIO_Init+0x40>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d130      	bne.n	8001c92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c66:	2201      	movs	r2, #1
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4013      	ands	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	091b      	lsrs	r3, r3, #4
 8001c7c:	f003 0201 	and.w	r2, r3, #1
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d118      	bne.n	8001cd0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	08db      	lsrs	r3, r3, #3
 8001cba:	f003 0201 	and.w	r2, r3, #1
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d017      	beq.n	8001d0c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d123      	bne.n	8001d60 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	08da      	lsrs	r2, r3, #3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3208      	adds	r2, #8
 8001d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d24:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	220f      	movs	r2, #15
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	08da      	lsrs	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3208      	adds	r2, #8
 8001d5a:	6939      	ldr	r1, [r7, #16]
 8001d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4013      	ands	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0203 	and.w	r2, r3, #3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80ac 	beq.w	8001efa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	4b5f      	ldr	r3, [pc, #380]	; (8001f20 <HAL_GPIO_Init+0x330>)
 8001da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da6:	4a5e      	ldr	r2, [pc, #376]	; (8001f20 <HAL_GPIO_Init+0x330>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6613      	str	r3, [r2, #96]	; 0x60
 8001dae:	4b5c      	ldr	r3, [pc, #368]	; (8001f20 <HAL_GPIO_Init+0x330>)
 8001db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dba:	4a5a      	ldr	r2, [pc, #360]	; (8001f24 <HAL_GPIO_Init+0x334>)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	089b      	lsrs	r3, r3, #2
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	220f      	movs	r2, #15
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001de4:	d025      	beq.n	8001e32 <HAL_GPIO_Init+0x242>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a4f      	ldr	r2, [pc, #316]	; (8001f28 <HAL_GPIO_Init+0x338>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d01f      	beq.n	8001e2e <HAL_GPIO_Init+0x23e>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a4e      	ldr	r2, [pc, #312]	; (8001f2c <HAL_GPIO_Init+0x33c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d019      	beq.n	8001e2a <HAL_GPIO_Init+0x23a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4d      	ldr	r2, [pc, #308]	; (8001f30 <HAL_GPIO_Init+0x340>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d013      	beq.n	8001e26 <HAL_GPIO_Init+0x236>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a4c      	ldr	r2, [pc, #304]	; (8001f34 <HAL_GPIO_Init+0x344>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00d      	beq.n	8001e22 <HAL_GPIO_Init+0x232>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a4b      	ldr	r2, [pc, #300]	; (8001f38 <HAL_GPIO_Init+0x348>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d007      	beq.n	8001e1e <HAL_GPIO_Init+0x22e>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a4a      	ldr	r2, [pc, #296]	; (8001f3c <HAL_GPIO_Init+0x34c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d101      	bne.n	8001e1a <HAL_GPIO_Init+0x22a>
 8001e16:	2306      	movs	r3, #6
 8001e18:	e00c      	b.n	8001e34 <HAL_GPIO_Init+0x244>
 8001e1a:	2307      	movs	r3, #7
 8001e1c:	e00a      	b.n	8001e34 <HAL_GPIO_Init+0x244>
 8001e1e:	2305      	movs	r3, #5
 8001e20:	e008      	b.n	8001e34 <HAL_GPIO_Init+0x244>
 8001e22:	2304      	movs	r3, #4
 8001e24:	e006      	b.n	8001e34 <HAL_GPIO_Init+0x244>
 8001e26:	2303      	movs	r3, #3
 8001e28:	e004      	b.n	8001e34 <HAL_GPIO_Init+0x244>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e002      	b.n	8001e34 <HAL_GPIO_Init+0x244>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <HAL_GPIO_Init+0x244>
 8001e32:	2300      	movs	r3, #0
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	f002 0203 	and.w	r2, r2, #3
 8001e3a:	0092      	lsls	r2, r2, #2
 8001e3c:	4093      	lsls	r3, r2
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e44:	4937      	ldr	r1, [pc, #220]	; (8001f24 <HAL_GPIO_Init+0x334>)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e52:	4b3b      	ldr	r3, [pc, #236]	; (8001f40 <HAL_GPIO_Init+0x350>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e76:	4a32      	ldr	r2, [pc, #200]	; (8001f40 <HAL_GPIO_Init+0x350>)
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e7c:	4b30      	ldr	r3, [pc, #192]	; (8001f40 <HAL_GPIO_Init+0x350>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ea0:	4a27      	ldr	r2, [pc, #156]	; (8001f40 <HAL_GPIO_Init+0x350>)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ea6:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <HAL_GPIO_Init+0x350>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001eca:	4a1d      	ldr	r2, [pc, #116]	; (8001f40 <HAL_GPIO_Init+0x350>)
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <HAL_GPIO_Init+0x350>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ef4:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <HAL_GPIO_Init+0x350>)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	3301      	adds	r3, #1
 8001efe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f47f ae78 	bne.w	8001c00 <HAL_GPIO_Init+0x10>
  }
}
 8001f10:	bf00      	nop
 8001f12:	bf00      	nop
 8001f14:	371c      	adds	r7, #28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40010000 	.word	0x40010000
 8001f28:	48000400 	.word	0x48000400
 8001f2c:	48000800 	.word	0x48000800
 8001f30:	48000c00 	.word	0x48000c00
 8001f34:	48001000 	.word	0x48001000
 8001f38:	48001400 	.word	0x48001400
 8001f3c:	48001800 	.word	0x48001800
 8001f40:	40010400 	.word	0x40010400

08001f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	807b      	strh	r3, [r7, #2]
 8001f50:	4613      	mov	r3, r2
 8001f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f54:	787b      	ldrb	r3, [r7, #1]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f5a:	887a      	ldrh	r2, [r7, #2]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f60:	e002      	b.n	8001f68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f62:	887a      	ldrh	r2, [r7, #2]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f80:	695a      	ldr	r2, [r3, #20]
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d006      	beq.n	8001f98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f8a:	4a05      	ldr	r2, [pc, #20]	; (8001fa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f8c:	88fb      	ldrh	r3, [r7, #6]
 8001f8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f90:	88fb      	ldrh	r3, [r7, #6]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 f806 	bl	8001fa4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f98:	bf00      	nop
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40010400 	.word	0x40010400

08001fa4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e081      	b.n	80020d0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d106      	bne.n	8001fe6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff f815 	bl	8001010 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2224      	movs	r2, #36	; 0x24
 8001fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0201 	bic.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800200a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800201a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d107      	bne.n	8002034 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	e006      	b.n	8002042 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002040:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d104      	bne.n	8002054 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002052:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002066:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002076:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691a      	ldr	r2, [r3, #16]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69d9      	ldr	r1, [r3, #28]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a1a      	ldr	r2, [r3, #32]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f042 0201 	orr.w	r2, r2, #1
 80020b0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2220      	movs	r2, #32
 80020bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b20      	cmp	r3, #32
 80020ec:	d138      	bne.n	8002160 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e032      	b.n	8002162 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2224      	movs	r2, #36	; 0x24
 8002108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0201 	bic.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800212a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6819      	ldr	r1, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2220      	movs	r2, #32
 8002150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	e000      	b.n	8002162 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002160:	2302      	movs	r3, #2
  }
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800216e:	b480      	push	{r7}
 8002170:	b085      	sub	sp, #20
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b20      	cmp	r3, #32
 8002182:	d139      	bne.n	80021f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800218a:	2b01      	cmp	r3, #1
 800218c:	d101      	bne.n	8002192 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800218e:	2302      	movs	r3, #2
 8002190:	e033      	b.n	80021fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2224      	movs	r2, #36	; 0x24
 800219e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0201 	bic.w	r2, r2, #1
 80021b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	021b      	lsls	r3, r3, #8
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0201 	orr.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	e000      	b.n	80021fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021f8:	2302      	movs	r3, #2
  }
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002206:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002208:	b08f      	sub	sp, #60	; 0x3c
 800220a:	af0a      	add	r7, sp, #40	; 0x28
 800220c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e116      	b.n	8002446 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff f876 	bl	8001324 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2203      	movs	r2, #3
 800223c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d102      	bne.n	8002252 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f002 ff05 	bl	8005066 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	603b      	str	r3, [r7, #0]
 8002262:	687e      	ldr	r6, [r7, #4]
 8002264:	466d      	mov	r5, sp
 8002266:	f106 0410 	add.w	r4, r6, #16
 800226a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800226c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800226e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002272:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002276:	e885 0003 	stmia.w	r5, {r0, r1}
 800227a:	1d33      	adds	r3, r6, #4
 800227c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800227e:	6838      	ldr	r0, [r7, #0]
 8002280:	f002 fec5 	bl	800500e <USB_CoreInit>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2202      	movs	r2, #2
 800228e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e0d7      	b.n	8002446 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2100      	movs	r1, #0
 800229c:	4618      	mov	r0, r3
 800229e:	f002 fef3 	bl	8005088 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a2:	2300      	movs	r3, #0
 80022a4:	73fb      	strb	r3, [r7, #15]
 80022a6:	e04a      	b.n	800233e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022a8:	7bfa      	ldrb	r2, [r7, #15]
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	1a9b      	subs	r3, r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	333d      	adds	r3, #61	; 0x3d
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022bc:	7bfa      	ldrb	r2, [r7, #15]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	333c      	adds	r3, #60	; 0x3c
 80022cc:	7bfa      	ldrb	r2, [r7, #15]
 80022ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	b298      	uxth	r0, r3
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	1a9b      	subs	r3, r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	3342      	adds	r3, #66	; 0x42
 80022e4:	4602      	mov	r2, r0
 80022e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022e8:	7bfa      	ldrb	r2, [r7, #15]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	1a9b      	subs	r3, r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	333f      	adds	r3, #63	; 0x3f
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	3344      	adds	r3, #68	; 0x44
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	1a9b      	subs	r3, r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	3348      	adds	r3, #72	; 0x48
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	3350      	adds	r3, #80	; 0x50
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	3301      	adds	r3, #1
 800233c:	73fb      	strb	r3, [r7, #15]
 800233e:	7bfa      	ldrb	r2, [r7, #15]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	429a      	cmp	r2, r3
 8002346:	d3af      	bcc.n	80022a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002348:	2300      	movs	r3, #0
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	e044      	b.n	80023d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002364:	7bfa      	ldrb	r2, [r7, #15]
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	1a9b      	subs	r3, r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002376:	7bfa      	ldrb	r2, [r7, #15]
 8002378:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	1a9b      	subs	r3, r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	440b      	add	r3, r1
 8002388:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002390:	7bfa      	ldrb	r2, [r7, #15]
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	1a9b      	subs	r3, r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023a6:	7bfa      	ldrb	r2, [r7, #15]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023bc:	7bfa      	ldrb	r2, [r7, #15]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	3301      	adds	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
 80023d8:	7bfa      	ldrb	r2, [r7, #15]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d3b5      	bcc.n	800234e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	687e      	ldr	r6, [r7, #4]
 80023ea:	466d      	mov	r5, sp
 80023ec:	f106 0410 	add.w	r4, r6, #16
 80023f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002400:	1d33      	adds	r3, r6, #4
 8002402:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002404:	6838      	ldr	r0, [r7, #0]
 8002406:	f002 fe8b 	bl	8005120 <USB_DevInit>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e014      	b.n	8002446 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	2b01      	cmp	r3, #1
 8002432:	d102      	bne.n	800243a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f80a 	bl	800244e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f003 f833 	bl	80054aa <USB_DevDisconnect>

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800244e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800244e:	b480      	push	{r7}
 8002450:	b085      	sub	sp, #20
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002480:	f043 0303 	orr.w	r3, r3, #3
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a6:	6013      	str	r3, [r2, #0]
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40007000 	.word	0x40007000

080024b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024bc:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40007000 	.word	0x40007000

080024d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024e2:	d130      	bne.n	8002546 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80024e4:	4b23      	ldr	r3, [pc, #140]	; (8002574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024f0:	d038      	beq.n	8002564 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024f2:	4b20      	ldr	r3, [pc, #128]	; (8002574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024fa:	4a1e      	ldr	r2, [pc, #120]	; (8002574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002500:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002502:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2232      	movs	r2, #50	; 0x32
 8002508:	fb02 f303 	mul.w	r3, r2, r3
 800250c:	4a1b      	ldr	r2, [pc, #108]	; (800257c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800250e:	fba2 2303 	umull	r2, r3, r2, r3
 8002512:	0c9b      	lsrs	r3, r3, #18
 8002514:	3301      	adds	r3, #1
 8002516:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002518:	e002      	b.n	8002520 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3b01      	subs	r3, #1
 800251e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002520:	4b14      	ldr	r3, [pc, #80]	; (8002574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800252c:	d102      	bne.n	8002534 <HAL_PWREx_ControlVoltageScaling+0x60>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f2      	bne.n	800251a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002534:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800253c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002540:	d110      	bne.n	8002564 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e00f      	b.n	8002566 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002546:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800254e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002552:	d007      	beq.n	8002564 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002554:	4b07      	ldr	r3, [pc, #28]	; (8002574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800255c:	4a05      	ldr	r2, [pc, #20]	; (8002574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800255e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002562:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40007000 	.word	0x40007000
 8002578:	20000000 	.word	0x20000000
 800257c:	431bde83 	.word	0x431bde83

08002580 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002584:	4b05      	ldr	r3, [pc, #20]	; (800259c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	4a04      	ldr	r2, [pc, #16]	; (800259c <HAL_PWREx_EnableVddUSB+0x1c>)
 800258a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800258e:	6053      	str	r3, [r2, #4]
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40007000 	.word	0x40007000

080025a0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af02      	add	r7, sp, #8
 80025a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80025a8:	f7ff f904 	bl	80017b4 <HAL_GetTick>
 80025ac:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e063      	b.n	8002680 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10b      	bne.n	80025dc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7fe fd7d 	bl	80010cc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80025d2:	f241 3188 	movw	r1, #5000	; 0x1388
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f858 	bl	800268c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	021a      	lsls	r2, r3, #8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	2120      	movs	r1, #32
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f850 	bl	80026a8 <QSPI_WaitFlagStateUntilTimeout>
 8002608:	4603      	mov	r3, r0
 800260a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800260c:	7afb      	ldrb	r3, [r7, #11]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d131      	bne.n	8002676 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800261c:	f023 0310 	bic.w	r3, r3, #16
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6852      	ldr	r2, [r2, #4]
 8002624:	0611      	lsls	r1, r2, #24
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68d2      	ldr	r2, [r2, #12]
 800262a:	4311      	orrs	r1, r2
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	430b      	orrs	r3, r1
 8002632:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	4b13      	ldr	r3, [pc, #76]	; (8002688 <HAL_QSPI_Init+0xe8>)
 800263c:	4013      	ands	r3, r2
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6912      	ldr	r2, [r2, #16]
 8002642:	0411      	lsls	r1, r2, #16
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6952      	ldr	r2, [r2, #20]
 8002648:	4311      	orrs	r1, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6992      	ldr	r2, [r2, #24]
 800264e:	4311      	orrs	r1, r2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	430b      	orrs	r3, r1
 8002656:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800267e:	7afb      	ldrb	r3, [r7, #11]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	ffe0f8fe 	.word	0xffe0f8fe

0800268c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	4613      	mov	r3, r2
 80026b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80026b8:	e01a      	b.n	80026f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c0:	d016      	beq.n	80026f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026c2:	f7ff f877 	bl	80017b4 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d302      	bcc.n	80026d8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10b      	bne.n	80026f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2204      	movs	r2, #4
 80026dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e4:	f043 0201 	orr.w	r2, r3, #1
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e00e      	b.n	800270e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	bf14      	ite	ne
 80026fe:	2301      	movne	r3, #1
 8002700:	2300      	moveq	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	429a      	cmp	r2, r3
 800270a:	d1d6      	bne.n	80026ba <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e3d8      	b.n	8002edc <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800272a:	4b97      	ldr	r3, [pc, #604]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002734:	4b94      	ldr	r3, [pc, #592]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 80e4 	beq.w	8002914 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d007      	beq.n	8002762 <HAL_RCC_OscConfig+0x4a>
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	2b0c      	cmp	r3, #12
 8002756:	f040 808b 	bne.w	8002870 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b01      	cmp	r3, #1
 800275e:	f040 8087 	bne.w	8002870 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002762:	4b89      	ldr	r3, [pc, #548]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d005      	beq.n	800277a <HAL_RCC_OscConfig+0x62>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e3b0      	b.n	8002edc <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1a      	ldr	r2, [r3, #32]
 800277e:	4b82      	ldr	r3, [pc, #520]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b00      	cmp	r3, #0
 8002788:	d004      	beq.n	8002794 <HAL_RCC_OscConfig+0x7c>
 800278a:	4b7f      	ldr	r3, [pc, #508]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002792:	e005      	b.n	80027a0 <HAL_RCC_OscConfig+0x88>
 8002794:	4b7c      	ldr	r3, [pc, #496]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 8002796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800279a:	091b      	lsrs	r3, r3, #4
 800279c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d223      	bcs.n	80027ec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 fd75 	bl	8003298 <RCC_SetFlashLatencyFromMSIRange>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e391      	b.n	8002edc <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027b8:	4b73      	ldr	r3, [pc, #460]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a72      	ldr	r2, [pc, #456]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 80027be:	f043 0308 	orr.w	r3, r3, #8
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	4b70      	ldr	r3, [pc, #448]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	496d      	ldr	r1, [pc, #436]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027d6:	4b6c      	ldr	r3, [pc, #432]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	021b      	lsls	r3, r3, #8
 80027e4:	4968      	ldr	r1, [pc, #416]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
 80027ea:	e025      	b.n	8002838 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027ec:	4b66      	ldr	r3, [pc, #408]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a65      	ldr	r2, [pc, #404]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 80027f2:	f043 0308 	orr.w	r3, r3, #8
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	4b63      	ldr	r3, [pc, #396]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	4960      	ldr	r1, [pc, #384]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 8002806:	4313      	orrs	r3, r2
 8002808:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800280a:	4b5f      	ldr	r3, [pc, #380]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	021b      	lsls	r3, r3, #8
 8002818:	495b      	ldr	r1, [pc, #364]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 800281a:	4313      	orrs	r3, r2
 800281c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d109      	bne.n	8002838 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fd35 	bl	8003298 <RCC_SetFlashLatencyFromMSIRange>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e351      	b.n	8002edc <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002838:	f000 fc38 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b52      	ldr	r3, [pc, #328]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	091b      	lsrs	r3, r3, #4
 8002844:	f003 030f 	and.w	r3, r3, #15
 8002848:	4950      	ldr	r1, [pc, #320]	; (800298c <HAL_RCC_OscConfig+0x274>)
 800284a:	5ccb      	ldrb	r3, [r1, r3]
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	fa22 f303 	lsr.w	r3, r2, r3
 8002854:	4a4e      	ldr	r2, [pc, #312]	; (8002990 <HAL_RCC_OscConfig+0x278>)
 8002856:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002858:	4b4e      	ldr	r3, [pc, #312]	; (8002994 <HAL_RCC_OscConfig+0x27c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7fe fdfd 	bl	800145c <HAL_InitTick>
 8002862:	4603      	mov	r3, r0
 8002864:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d052      	beq.n	8002912 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	e335      	b.n	8002edc <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d032      	beq.n	80028de <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002878:	4b43      	ldr	r3, [pc, #268]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a42      	ldr	r2, [pc, #264]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002884:	f7fe ff96 	bl	80017b4 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800288c:	f7fe ff92 	bl	80017b4 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e31e      	b.n	8002edc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800289e:	4b3a      	ldr	r3, [pc, #232]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028aa:	4b37      	ldr	r3, [pc, #220]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a36      	ldr	r2, [pc, #216]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 80028b0:	f043 0308 	orr.w	r3, r3, #8
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	4b34      	ldr	r3, [pc, #208]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	4931      	ldr	r1, [pc, #196]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028c8:	4b2f      	ldr	r3, [pc, #188]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	021b      	lsls	r3, r3, #8
 80028d6:	492c      	ldr	r1, [pc, #176]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	604b      	str	r3, [r1, #4]
 80028dc:	e01a      	b.n	8002914 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028de:	4b2a      	ldr	r3, [pc, #168]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a29      	ldr	r2, [pc, #164]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 80028e4:	f023 0301 	bic.w	r3, r3, #1
 80028e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028ea:	f7fe ff63 	bl	80017b4 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028f2:	f7fe ff5f 	bl	80017b4 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e2eb      	b.n	8002edc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002904:	4b20      	ldr	r3, [pc, #128]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1f0      	bne.n	80028f2 <HAL_RCC_OscConfig+0x1da>
 8002910:	e000      	b.n	8002914 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002912:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	d074      	beq.n	8002a0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	2b08      	cmp	r3, #8
 8002924:	d005      	beq.n	8002932 <HAL_RCC_OscConfig+0x21a>
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	2b0c      	cmp	r3, #12
 800292a:	d10e      	bne.n	800294a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2b03      	cmp	r3, #3
 8002930:	d10b      	bne.n	800294a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002932:	4b15      	ldr	r3, [pc, #84]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d064      	beq.n	8002a08 <HAL_RCC_OscConfig+0x2f0>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d160      	bne.n	8002a08 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e2c8      	b.n	8002edc <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002952:	d106      	bne.n	8002962 <HAL_RCC_OscConfig+0x24a>
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a0b      	ldr	r2, [pc, #44]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 800295a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	e026      	b.n	80029b0 <HAL_RCC_OscConfig+0x298>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800296a:	d115      	bne.n	8002998 <HAL_RCC_OscConfig+0x280>
 800296c:	4b06      	ldr	r3, [pc, #24]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a05      	ldr	r2, [pc, #20]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 8002972:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	4b03      	ldr	r3, [pc, #12]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a02      	ldr	r2, [pc, #8]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 800297e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	e014      	b.n	80029b0 <HAL_RCC_OscConfig+0x298>
 8002986:	bf00      	nop
 8002988:	40021000 	.word	0x40021000
 800298c:	08009df8 	.word	0x08009df8
 8002990:	20000000 	.word	0x20000000
 8002994:	20000004 	.word	0x20000004
 8002998:	4ba0      	ldr	r3, [pc, #640]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a9f      	ldr	r2, [pc, #636]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 800299e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	4b9d      	ldr	r3, [pc, #628]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a9c      	ldr	r2, [pc, #624]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 80029aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d013      	beq.n	80029e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7fe fefc 	bl	80017b4 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c0:	f7fe fef8 	bl	80017b4 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b64      	cmp	r3, #100	; 0x64
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e284      	b.n	8002edc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029d2:	4b92      	ldr	r3, [pc, #584]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCC_OscConfig+0x2a8>
 80029de:	e014      	b.n	8002a0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e0:	f7fe fee8 	bl	80017b4 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e8:	f7fe fee4 	bl	80017b4 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b64      	cmp	r3, #100	; 0x64
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e270      	b.n	8002edc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029fa:	4b88      	ldr	r3, [pc, #544]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x2d0>
 8002a06:	e000      	b.n	8002a0a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d060      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d005      	beq.n	8002a28 <HAL_RCC_OscConfig+0x310>
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	2b0c      	cmp	r3, #12
 8002a20:	d119      	bne.n	8002a56 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d116      	bne.n	8002a56 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a28:	4b7c      	ldr	r3, [pc, #496]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <HAL_RCC_OscConfig+0x328>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e24d      	b.n	8002edc <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a40:	4b76      	ldr	r3, [pc, #472]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	061b      	lsls	r3, r3, #24
 8002a4e:	4973      	ldr	r1, [pc, #460]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a54:	e040      	b.n	8002ad8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d023      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a5e:	4b6f      	ldr	r3, [pc, #444]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a6e      	ldr	r2, [pc, #440]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6a:	f7fe fea3 	bl	80017b4 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a72:	f7fe fe9f 	bl	80017b4 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e22b      	b.n	8002edc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a84:	4b65      	ldr	r3, [pc, #404]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a90:	4b62      	ldr	r3, [pc, #392]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	061b      	lsls	r3, r3, #24
 8002a9e:	495f      	ldr	r1, [pc, #380]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]
 8002aa4:	e018      	b.n	8002ad8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aa6:	4b5d      	ldr	r3, [pc, #372]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a5c      	ldr	r2, [pc, #368]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab2:	f7fe fe7f 	bl	80017b4 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aba:	f7fe fe7b 	bl	80017b4 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e207      	b.n	8002edc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002acc:	4b53      	ldr	r3, [pc, #332]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1f0      	bne.n	8002aba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d03c      	beq.n	8002b5e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d01c      	beq.n	8002b26 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aec:	4b4b      	ldr	r3, [pc, #300]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af2:	4a4a      	ldr	r2, [pc, #296]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afc:	f7fe fe5a 	bl	80017b4 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b04:	f7fe fe56 	bl	80017b4 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e1e2      	b.n	8002edc <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b16:	4b41      	ldr	r3, [pc, #260]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0ef      	beq.n	8002b04 <HAL_RCC_OscConfig+0x3ec>
 8002b24:	e01b      	b.n	8002b5e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b26:	4b3d      	ldr	r3, [pc, #244]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b2c:	4a3b      	ldr	r2, [pc, #236]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002b2e:	f023 0301 	bic.w	r3, r3, #1
 8002b32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b36:	f7fe fe3d 	bl	80017b4 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b3e:	f7fe fe39 	bl	80017b4 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e1c5      	b.n	8002edc <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b50:	4b32      	ldr	r3, [pc, #200]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1ef      	bne.n	8002b3e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 80a6 	beq.w	8002cb8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b70:	4b2a      	ldr	r3, [pc, #168]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10d      	bne.n	8002b98 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7c:	4b27      	ldr	r3, [pc, #156]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b80:	4a26      	ldr	r2, [pc, #152]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b86:	6593      	str	r3, [r2, #88]	; 0x58
 8002b88:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b94:	2301      	movs	r3, #1
 8002b96:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b98:	4b21      	ldr	r3, [pc, #132]	; (8002c20 <HAL_RCC_OscConfig+0x508>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d118      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ba4:	4b1e      	ldr	r3, [pc, #120]	; (8002c20 <HAL_RCC_OscConfig+0x508>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a1d      	ldr	r2, [pc, #116]	; (8002c20 <HAL_RCC_OscConfig+0x508>)
 8002baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb0:	f7fe fe00 	bl	80017b4 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb8:	f7fe fdfc 	bl	80017b4 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e188      	b.n	8002edc <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bca:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <HAL_RCC_OscConfig+0x508>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d108      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x4d8>
 8002bde:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be4:	4a0d      	ldr	r2, [pc, #52]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bee:	e029      	b.n	8002c44 <HAL_RCC_OscConfig+0x52c>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2b05      	cmp	r3, #5
 8002bf6:	d115      	bne.n	8002c24 <HAL_RCC_OscConfig+0x50c>
 8002bf8:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfe:	4a07      	ldr	r2, [pc, #28]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002c00:	f043 0304 	orr.w	r3, r3, #4
 8002c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c08:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0e:	4a03      	ldr	r2, [pc, #12]	; (8002c1c <HAL_RCC_OscConfig+0x504>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c18:	e014      	b.n	8002c44 <HAL_RCC_OscConfig+0x52c>
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40007000 	.word	0x40007000
 8002c24:	4b91      	ldr	r3, [pc, #580]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2a:	4a90      	ldr	r2, [pc, #576]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002c2c:	f023 0301 	bic.w	r3, r3, #1
 8002c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c34:	4b8d      	ldr	r3, [pc, #564]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3a:	4a8c      	ldr	r2, [pc, #560]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002c3c:	f023 0304 	bic.w	r3, r3, #4
 8002c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d016      	beq.n	8002c7a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4c:	f7fe fdb2 	bl	80017b4 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c52:	e00a      	b.n	8002c6a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c54:	f7fe fdae 	bl	80017b4 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e138      	b.n	8002edc <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c6a:	4b80      	ldr	r3, [pc, #512]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0ed      	beq.n	8002c54 <HAL_RCC_OscConfig+0x53c>
 8002c78:	e015      	b.n	8002ca6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7a:	f7fe fd9b 	bl	80017b4 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c80:	e00a      	b.n	8002c98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c82:	f7fe fd97 	bl	80017b4 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e121      	b.n	8002edc <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c98:	4b74      	ldr	r3, [pc, #464]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1ed      	bne.n	8002c82 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ca6:	7ffb      	ldrb	r3, [r7, #31]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d105      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cac:	4b6f      	ldr	r3, [pc, #444]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb0:	4a6e      	ldr	r2, [pc, #440]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002cb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 810c 	beq.w	8002eda <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	f040 80d4 	bne.w	8002e74 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ccc:	4b67      	ldr	r3, [pc, #412]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f003 0203 	and.w	r2, r3, #3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d130      	bne.n	8002d42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	3b01      	subs	r3, #1
 8002cec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d127      	bne.n	8002d42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d11f      	bne.n	8002d42 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d0c:	2a07      	cmp	r2, #7
 8002d0e:	bf14      	ite	ne
 8002d10:	2201      	movne	r2, #1
 8002d12:	2200      	moveq	r2, #0
 8002d14:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d113      	bne.n	8002d42 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d24:	085b      	lsrs	r3, r3, #1
 8002d26:	3b01      	subs	r3, #1
 8002d28:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d109      	bne.n	8002d42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	085b      	lsrs	r3, r3, #1
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d06e      	beq.n	8002e20 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	2b0c      	cmp	r3, #12
 8002d46:	d069      	beq.n	8002e1c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d48:	4b48      	ldr	r3, [pc, #288]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d105      	bne.n	8002d60 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d54:	4b45      	ldr	r3, [pc, #276]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0bb      	b.n	8002edc <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d64:	4b41      	ldr	r3, [pc, #260]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a40      	ldr	r2, [pc, #256]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002d6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d6e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d70:	f7fe fd20 	bl	80017b4 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d78:	f7fe fd1c 	bl	80017b4 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e0a8      	b.n	8002edc <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d8a:	4b38      	ldr	r3, [pc, #224]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d96:	4b35      	ldr	r3, [pc, #212]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	4b35      	ldr	r3, [pc, #212]	; (8002e70 <HAL_RCC_OscConfig+0x758>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002da6:	3a01      	subs	r2, #1
 8002da8:	0112      	lsls	r2, r2, #4
 8002daa:	4311      	orrs	r1, r2
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002db0:	0212      	lsls	r2, r2, #8
 8002db2:	4311      	orrs	r1, r2
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002db8:	0852      	lsrs	r2, r2, #1
 8002dba:	3a01      	subs	r2, #1
 8002dbc:	0552      	lsls	r2, r2, #21
 8002dbe:	4311      	orrs	r1, r2
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002dc4:	0852      	lsrs	r2, r2, #1
 8002dc6:	3a01      	subs	r2, #1
 8002dc8:	0652      	lsls	r2, r2, #25
 8002dca:	4311      	orrs	r1, r2
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002dd0:	0912      	lsrs	r2, r2, #4
 8002dd2:	0452      	lsls	r2, r2, #17
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	4925      	ldr	r1, [pc, #148]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ddc:	4b23      	ldr	r3, [pc, #140]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a22      	ldr	r2, [pc, #136]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002de2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002de6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002de8:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	4a1f      	ldr	r2, [pc, #124]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002df2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002df4:	f7fe fcde 	bl	80017b4 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfc:	f7fe fcda 	bl	80017b4 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e066      	b.n	8002edc <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e0e:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f0      	beq.n	8002dfc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e1a:	e05e      	b.n	8002eda <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e05d      	b.n	8002edc <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e20:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d156      	bne.n	8002eda <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e2c:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a0e      	ldr	r2, [pc, #56]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002e32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4a0b      	ldr	r2, [pc, #44]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e44:	f7fe fcb6 	bl	80017b4 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4c:	f7fe fcb2 	bl	80017b4 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e03e      	b.n	8002edc <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5e:	4b03      	ldr	r3, [pc, #12]	; (8002e6c <HAL_RCC_OscConfig+0x754>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0f0      	beq.n	8002e4c <HAL_RCC_OscConfig+0x734>
 8002e6a:	e036      	b.n	8002eda <HAL_RCC_OscConfig+0x7c2>
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b0c      	cmp	r3, #12
 8002e78:	d02d      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <HAL_RCC_OscConfig+0x7cc>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a19      	ldr	r2, [pc, #100]	; (8002ee4 <HAL_RCC_OscConfig+0x7cc>)
 8002e80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e84:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002e86:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <HAL_RCC_OscConfig+0x7cc>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d105      	bne.n	8002e9e <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002e92:	4b14      	ldr	r3, [pc, #80]	; (8002ee4 <HAL_RCC_OscConfig+0x7cc>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	4a13      	ldr	r2, [pc, #76]	; (8002ee4 <HAL_RCC_OscConfig+0x7cc>)
 8002e98:	f023 0303 	bic.w	r3, r3, #3
 8002e9c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e9e:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <HAL_RCC_OscConfig+0x7cc>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	4a10      	ldr	r2, [pc, #64]	; (8002ee4 <HAL_RCC_OscConfig+0x7cc>)
 8002ea4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ea8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eac:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eae:	f7fe fc81 	bl	80017b4 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb6:	f7fe fc7d 	bl	80017b4 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e009      	b.n	8002edc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ec8:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <HAL_RCC_OscConfig+0x7cc>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1f0      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x79e>
 8002ed4:	e001      	b.n	8002eda <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3720      	adds	r7, #32
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40021000 	.word	0x40021000

08002ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0c8      	b.n	800308e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002efc:	4b66      	ldr	r3, [pc, #408]	; (8003098 <HAL_RCC_ClockConfig+0x1b0>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d910      	bls.n	8002f2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0a:	4b63      	ldr	r3, [pc, #396]	; (8003098 <HAL_RCC_ClockConfig+0x1b0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 0207 	bic.w	r2, r3, #7
 8002f12:	4961      	ldr	r1, [pc, #388]	; (8003098 <HAL_RCC_ClockConfig+0x1b0>)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1a:	4b5f      	ldr	r3, [pc, #380]	; (8003098 <HAL_RCC_ClockConfig+0x1b0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d001      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0b0      	b.n	800308e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d04c      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d107      	bne.n	8002f50 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f40:	4b56      	ldr	r3, [pc, #344]	; (800309c <HAL_RCC_ClockConfig+0x1b4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d121      	bne.n	8002f90 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e09e      	b.n	800308e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d107      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f58:	4b50      	ldr	r3, [pc, #320]	; (800309c <HAL_RCC_ClockConfig+0x1b4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d115      	bne.n	8002f90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e092      	b.n	800308e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d107      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f70:	4b4a      	ldr	r3, [pc, #296]	; (800309c <HAL_RCC_ClockConfig+0x1b4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d109      	bne.n	8002f90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e086      	b.n	800308e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f80:	4b46      	ldr	r3, [pc, #280]	; (800309c <HAL_RCC_ClockConfig+0x1b4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e07e      	b.n	800308e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f90:	4b42      	ldr	r3, [pc, #264]	; (800309c <HAL_RCC_ClockConfig+0x1b4>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f023 0203 	bic.w	r2, r3, #3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	493f      	ldr	r1, [pc, #252]	; (800309c <HAL_RCC_ClockConfig+0x1b4>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa2:	f7fe fc07 	bl	80017b4 <HAL_GetTick>
 8002fa6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa8:	e00a      	b.n	8002fc0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002faa:	f7fe fc03 	bl	80017b4 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e066      	b.n	800308e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc0:	4b36      	ldr	r3, [pc, #216]	; (800309c <HAL_RCC_ClockConfig+0x1b4>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 020c 	and.w	r2, r3, #12
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d1eb      	bne.n	8002faa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d008      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fde:	4b2f      	ldr	r3, [pc, #188]	; (800309c <HAL_RCC_ClockConfig+0x1b4>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	492c      	ldr	r1, [pc, #176]	; (800309c <HAL_RCC_ClockConfig+0x1b4>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff0:	4b29      	ldr	r3, [pc, #164]	; (8003098 <HAL_RCC_ClockConfig+0x1b0>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d210      	bcs.n	8003020 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffe:	4b26      	ldr	r3, [pc, #152]	; (8003098 <HAL_RCC_ClockConfig+0x1b0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 0207 	bic.w	r2, r3, #7
 8003006:	4924      	ldr	r1, [pc, #144]	; (8003098 <HAL_RCC_ClockConfig+0x1b0>)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	4313      	orrs	r3, r2
 800300c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800300e:	4b22      	ldr	r3, [pc, #136]	; (8003098 <HAL_RCC_ClockConfig+0x1b0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e036      	b.n	800308e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800302c:	4b1b      	ldr	r3, [pc, #108]	; (800309c <HAL_RCC_ClockConfig+0x1b4>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	4918      	ldr	r1, [pc, #96]	; (800309c <HAL_RCC_ClockConfig+0x1b4>)
 800303a:	4313      	orrs	r3, r2
 800303c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d009      	beq.n	800305e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800304a:	4b14      	ldr	r3, [pc, #80]	; (800309c <HAL_RCC_ClockConfig+0x1b4>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4910      	ldr	r1, [pc, #64]	; (800309c <HAL_RCC_ClockConfig+0x1b4>)
 800305a:	4313      	orrs	r3, r2
 800305c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800305e:	f000 f825 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 8003062:	4602      	mov	r2, r0
 8003064:	4b0d      	ldr	r3, [pc, #52]	; (800309c <HAL_RCC_ClockConfig+0x1b4>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	091b      	lsrs	r3, r3, #4
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	490c      	ldr	r1, [pc, #48]	; (80030a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003070:	5ccb      	ldrb	r3, [r1, r3]
 8003072:	f003 031f 	and.w	r3, r3, #31
 8003076:	fa22 f303 	lsr.w	r3, r2, r3
 800307a:	4a0a      	ldr	r2, [pc, #40]	; (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 800307c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800307e:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7fe f9ea 	bl	800145c <HAL_InitTick>
 8003088:	4603      	mov	r3, r0
 800308a:	72fb      	strb	r3, [r7, #11]

  return status;
 800308c:	7afb      	ldrb	r3, [r7, #11]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40022000 	.word	0x40022000
 800309c:	40021000 	.word	0x40021000
 80030a0:	08009df8 	.word	0x08009df8
 80030a4:	20000000 	.word	0x20000000
 80030a8:	20000004 	.word	0x20000004

080030ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b089      	sub	sp, #36	; 0x24
 80030b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61fb      	str	r3, [r7, #28]
 80030b6:	2300      	movs	r3, #0
 80030b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ba:	4b3e      	ldr	r3, [pc, #248]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030c4:	4b3b      	ldr	r3, [pc, #236]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d005      	beq.n	80030e0 <HAL_RCC_GetSysClockFreq+0x34>
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	2b0c      	cmp	r3, #12
 80030d8:	d121      	bne.n	800311e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d11e      	bne.n	800311e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030e0:	4b34      	ldr	r3, [pc, #208]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0308 	and.w	r3, r3, #8
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d107      	bne.n	80030fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030ec:	4b31      	ldr	r3, [pc, #196]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030f2:	0a1b      	lsrs	r3, r3, #8
 80030f4:	f003 030f 	and.w	r3, r3, #15
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	e005      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030fc:	4b2d      	ldr	r3, [pc, #180]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	091b      	lsrs	r3, r3, #4
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003108:	4a2b      	ldr	r2, [pc, #172]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003110:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10d      	bne.n	8003134 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800311c:	e00a      	b.n	8003134 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	2b04      	cmp	r3, #4
 8003122:	d102      	bne.n	800312a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003124:	4b25      	ldr	r3, [pc, #148]	; (80031bc <HAL_RCC_GetSysClockFreq+0x110>)
 8003126:	61bb      	str	r3, [r7, #24]
 8003128:	e004      	b.n	8003134 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	2b08      	cmp	r3, #8
 800312e:	d101      	bne.n	8003134 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003130:	4b23      	ldr	r3, [pc, #140]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003132:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	2b0c      	cmp	r3, #12
 8003138:	d134      	bne.n	80031a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800313a:	4b1e      	ldr	r3, [pc, #120]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d003      	beq.n	8003152 <HAL_RCC_GetSysClockFreq+0xa6>
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2b03      	cmp	r3, #3
 800314e:	d003      	beq.n	8003158 <HAL_RCC_GetSysClockFreq+0xac>
 8003150:	e005      	b.n	800315e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003152:	4b1a      	ldr	r3, [pc, #104]	; (80031bc <HAL_RCC_GetSysClockFreq+0x110>)
 8003154:	617b      	str	r3, [r7, #20]
      break;
 8003156:	e005      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003158:	4b19      	ldr	r3, [pc, #100]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800315a:	617b      	str	r3, [r7, #20]
      break;
 800315c:	e002      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	617b      	str	r3, [r7, #20]
      break;
 8003162:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003164:	4b13      	ldr	r3, [pc, #76]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	3301      	adds	r3, #1
 8003170:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003172:	4b10      	ldr	r3, [pc, #64]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	0a1b      	lsrs	r3, r3, #8
 8003178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	fb03 f202 	mul.w	r2, r3, r2
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	fbb2 f3f3 	udiv	r3, r2, r3
 8003188:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800318a:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	0e5b      	lsrs	r3, r3, #25
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	3301      	adds	r3, #1
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031a4:	69bb      	ldr	r3, [r7, #24]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3724      	adds	r7, #36	; 0x24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40021000 	.word	0x40021000
 80031b8:	08009e10 	.word	0x08009e10
 80031bc:	00f42400 	.word	0x00f42400
 80031c0:	007a1200 	.word	0x007a1200

080031c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031c8:	4b03      	ldr	r3, [pc, #12]	; (80031d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031ca:	681b      	ldr	r3, [r3, #0]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	20000000 	.word	0x20000000

080031dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031e0:	f7ff fff0 	bl	80031c4 <HAL_RCC_GetHCLKFreq>
 80031e4:	4602      	mov	r2, r0
 80031e6:	4b06      	ldr	r3, [pc, #24]	; (8003200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	0a1b      	lsrs	r3, r3, #8
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	4904      	ldr	r1, [pc, #16]	; (8003204 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031f2:	5ccb      	ldrb	r3, [r1, r3]
 80031f4:	f003 031f 	and.w	r3, r3, #31
 80031f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40021000 	.word	0x40021000
 8003204:	08009e08 	.word	0x08009e08

08003208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800320c:	f7ff ffda 	bl	80031c4 <HAL_RCC_GetHCLKFreq>
 8003210:	4602      	mov	r2, r0
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	0adb      	lsrs	r3, r3, #11
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	4904      	ldr	r1, [pc, #16]	; (8003230 <HAL_RCC_GetPCLK2Freq+0x28>)
 800321e:	5ccb      	ldrb	r3, [r1, r3]
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003228:	4618      	mov	r0, r3
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40021000 	.word	0x40021000
 8003230:	08009e08 	.word	0x08009e08

08003234 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	220f      	movs	r2, #15
 8003242:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003244:	4b12      	ldr	r3, [pc, #72]	; (8003290 <HAL_RCC_GetClockConfig+0x5c>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 0203 	and.w	r2, r3, #3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003250:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <HAL_RCC_GetClockConfig+0x5c>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800325c:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <HAL_RCC_GetClockConfig+0x5c>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003268:	4b09      	ldr	r3, [pc, #36]	; (8003290 <HAL_RCC_GetClockConfig+0x5c>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	08db      	lsrs	r3, r3, #3
 800326e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003276:	4b07      	ldr	r3, [pc, #28]	; (8003294 <HAL_RCC_GetClockConfig+0x60>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0207 	and.w	r2, r3, #7
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	601a      	str	r2, [r3, #0]
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40021000 	.word	0x40021000
 8003294:	40022000 	.word	0x40022000

08003298 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032a0:	2300      	movs	r3, #0
 80032a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032a4:	4b2a      	ldr	r3, [pc, #168]	; (8003350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032b0:	f7ff f902 	bl	80024b8 <HAL_PWREx_GetVoltageRange>
 80032b4:	6178      	str	r0, [r7, #20]
 80032b6:	e014      	b.n	80032e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032b8:	4b25      	ldr	r3, [pc, #148]	; (8003350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032bc:	4a24      	ldr	r2, [pc, #144]	; (8003350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c2:	6593      	str	r3, [r2, #88]	; 0x58
 80032c4:	4b22      	ldr	r3, [pc, #136]	; (8003350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032d0:	f7ff f8f2 	bl	80024b8 <HAL_PWREx_GetVoltageRange>
 80032d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032d6:	4b1e      	ldr	r3, [pc, #120]	; (8003350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032da:	4a1d      	ldr	r2, [pc, #116]	; (8003350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e8:	d10b      	bne.n	8003302 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b80      	cmp	r3, #128	; 0x80
 80032ee:	d919      	bls.n	8003324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2ba0      	cmp	r3, #160	; 0xa0
 80032f4:	d902      	bls.n	80032fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032f6:	2302      	movs	r3, #2
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	e013      	b.n	8003324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032fc:	2301      	movs	r3, #1
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	e010      	b.n	8003324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b80      	cmp	r3, #128	; 0x80
 8003306:	d902      	bls.n	800330e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003308:	2303      	movs	r3, #3
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	e00a      	b.n	8003324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b80      	cmp	r3, #128	; 0x80
 8003312:	d102      	bne.n	800331a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003314:	2302      	movs	r3, #2
 8003316:	613b      	str	r3, [r7, #16]
 8003318:	e004      	b.n	8003324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b70      	cmp	r3, #112	; 0x70
 800331e:	d101      	bne.n	8003324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003320:	2301      	movs	r3, #1
 8003322:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f023 0207 	bic.w	r2, r3, #7
 800332c:	4909      	ldr	r1, [pc, #36]	; (8003354 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003334:	4b07      	ldr	r3, [pc, #28]	; (8003354 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	429a      	cmp	r2, r3
 8003340:	d001      	beq.n	8003346 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40021000 	.word	0x40021000
 8003354:	40022000 	.word	0x40022000

08003358 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003360:	2300      	movs	r3, #0
 8003362:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003364:	2300      	movs	r3, #0
 8003366:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003370:	2b00      	cmp	r3, #0
 8003372:	d041      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003378:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800337c:	d02a      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800337e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003382:	d824      	bhi.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003384:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003388:	d008      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800338a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800338e:	d81e      	bhi.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00a      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003394:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003398:	d010      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800339a:	e018      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800339c:	4b86      	ldr	r3, [pc, #536]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4a85      	ldr	r2, [pc, #532]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033a8:	e015      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3304      	adds	r3, #4
 80033ae:	2100      	movs	r1, #0
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 facb 	bl	800394c <RCCEx_PLLSAI1_Config>
 80033b6:	4603      	mov	r3, r0
 80033b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033ba:	e00c      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3320      	adds	r3, #32
 80033c0:	2100      	movs	r1, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fbb6 	bl	8003b34 <RCCEx_PLLSAI2_Config>
 80033c8:	4603      	mov	r3, r0
 80033ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033cc:	e003      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	74fb      	strb	r3, [r7, #19]
      break;
 80033d2:	e000      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80033d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033d6:	7cfb      	ldrb	r3, [r7, #19]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10b      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033dc:	4b76      	ldr	r3, [pc, #472]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ea:	4973      	ldr	r1, [pc, #460]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033f2:	e001      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f4:	7cfb      	ldrb	r3, [r7, #19]
 80033f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d041      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003408:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800340c:	d02a      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800340e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003412:	d824      	bhi.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003414:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003418:	d008      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800341a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800341e:	d81e      	bhi.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00a      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003428:	d010      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800342a:	e018      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800342c:	4b62      	ldr	r3, [pc, #392]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4a61      	ldr	r2, [pc, #388]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003436:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003438:	e015      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3304      	adds	r3, #4
 800343e:	2100      	movs	r1, #0
 8003440:	4618      	mov	r0, r3
 8003442:	f000 fa83 	bl	800394c <RCCEx_PLLSAI1_Config>
 8003446:	4603      	mov	r3, r0
 8003448:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800344a:	e00c      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3320      	adds	r3, #32
 8003450:	2100      	movs	r1, #0
 8003452:	4618      	mov	r0, r3
 8003454:	f000 fb6e 	bl	8003b34 <RCCEx_PLLSAI2_Config>
 8003458:	4603      	mov	r3, r0
 800345a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800345c:	e003      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	74fb      	strb	r3, [r7, #19]
      break;
 8003462:	e000      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003464:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003466:	7cfb      	ldrb	r3, [r7, #19]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10b      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800346c:	4b52      	ldr	r3, [pc, #328]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800346e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003472:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800347a:	494f      	ldr	r1, [pc, #316]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347c:	4313      	orrs	r3, r2
 800347e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003482:	e001      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003484:	7cfb      	ldrb	r3, [r7, #19]
 8003486:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 80a0 	beq.w	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003496:	2300      	movs	r3, #0
 8003498:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800349a:	4b47      	ldr	r3, [pc, #284]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800349c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80034aa:	2300      	movs	r3, #0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00d      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b0:	4b41      	ldr	r3, [pc, #260]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b4:	4a40      	ldr	r2, [pc, #256]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ba:	6593      	str	r3, [r2, #88]	; 0x58
 80034bc:	4b3e      	ldr	r3, [pc, #248]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c8:	2301      	movs	r3, #1
 80034ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034cc:	4b3b      	ldr	r3, [pc, #236]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a3a      	ldr	r2, [pc, #232]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034d8:	f7fe f96c 	bl	80017b4 <HAL_GetTick>
 80034dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034de:	e009      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e0:	f7fe f968 	bl	80017b4 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d902      	bls.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	74fb      	strb	r3, [r7, #19]
        break;
 80034f2:	e005      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034f4:	4b31      	ldr	r3, [pc, #196]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0ef      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003500:	7cfb      	ldrb	r3, [r7, #19]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d15c      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003506:	4b2c      	ldr	r3, [pc, #176]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003510:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d01f      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	429a      	cmp	r2, r3
 8003522:	d019      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003524:	4b24      	ldr	r3, [pc, #144]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800352e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003530:	4b21      	ldr	r3, [pc, #132]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003536:	4a20      	ldr	r2, [pc, #128]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800353c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003540:	4b1d      	ldr	r3, [pc, #116]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003546:	4a1c      	ldr	r2, [pc, #112]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800354c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003550:	4a19      	ldr	r2, [pc, #100]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d016      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003562:	f7fe f927 	bl	80017b4 <HAL_GetTick>
 8003566:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003568:	e00b      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356a:	f7fe f923 	bl	80017b4 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	f241 3288 	movw	r2, #5000	; 0x1388
 8003578:	4293      	cmp	r3, r2
 800357a:	d902      	bls.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	74fb      	strb	r3, [r7, #19]
            break;
 8003580:	e006      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003582:	4b0d      	ldr	r3, [pc, #52]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0ec      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003590:	7cfb      	ldrb	r3, [r7, #19]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10c      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003596:	4b08      	ldr	r3, [pc, #32]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035a6:	4904      	ldr	r1, [pc, #16]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80035ae:	e009      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035b0:	7cfb      	ldrb	r3, [r7, #19]
 80035b2:	74bb      	strb	r3, [r7, #18]
 80035b4:	e006      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80035b6:	bf00      	nop
 80035b8:	40021000 	.word	0x40021000
 80035bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c0:	7cfb      	ldrb	r3, [r7, #19]
 80035c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035c4:	7c7b      	ldrb	r3, [r7, #17]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d105      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ca:	4b9e      	ldr	r3, [pc, #632]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ce:	4a9d      	ldr	r2, [pc, #628]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035e2:	4b98      	ldr	r3, [pc, #608]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e8:	f023 0203 	bic.w	r2, r3, #3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f0:	4994      	ldr	r1, [pc, #592]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003604:	4b8f      	ldr	r3, [pc, #572]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360a:	f023 020c 	bic.w	r2, r3, #12
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003612:	498c      	ldr	r1, [pc, #560]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003626:	4b87      	ldr	r3, [pc, #540]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	4983      	ldr	r1, [pc, #524]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003648:	4b7e      	ldr	r3, [pc, #504]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003656:	497b      	ldr	r1, [pc, #492]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800366a:	4b76      	ldr	r3, [pc, #472]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003670:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003678:	4972      	ldr	r1, [pc, #456]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0320 	and.w	r3, r3, #32
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00a      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800368c:	4b6d      	ldr	r3, [pc, #436]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003692:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800369a:	496a      	ldr	r1, [pc, #424]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036ae:	4b65      	ldr	r3, [pc, #404]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036bc:	4961      	ldr	r1, [pc, #388]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00a      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036d0:	4b5c      	ldr	r3, [pc, #368]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036de:	4959      	ldr	r1, [pc, #356]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036f2:	4b54      	ldr	r3, [pc, #336]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003700:	4950      	ldr	r1, [pc, #320]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003702:	4313      	orrs	r3, r2
 8003704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00a      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003714:	4b4b      	ldr	r3, [pc, #300]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003722:	4948      	ldr	r1, [pc, #288]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003736:	4b43      	ldr	r3, [pc, #268]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003744:	493f      	ldr	r1, [pc, #252]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d028      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003758:	4b3a      	ldr	r3, [pc, #232]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003766:	4937      	ldr	r1, [pc, #220]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003768:	4313      	orrs	r3, r2
 800376a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003772:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003776:	d106      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003778:	4b32      	ldr	r3, [pc, #200]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	4a31      	ldr	r2, [pc, #196]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003782:	60d3      	str	r3, [r2, #12]
 8003784:	e011      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800378a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800378e:	d10c      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3304      	adds	r3, #4
 8003794:	2101      	movs	r1, #1
 8003796:	4618      	mov	r0, r3
 8003798:	f000 f8d8 	bl	800394c <RCCEx_PLLSAI1_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037a0:	7cfb      	ldrb	r3, [r7, #19]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80037a6:	7cfb      	ldrb	r3, [r7, #19]
 80037a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d028      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037b6:	4b23      	ldr	r3, [pc, #140]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c4:	491f      	ldr	r1, [pc, #124]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037d4:	d106      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037d6:	4b1b      	ldr	r3, [pc, #108]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	4a1a      	ldr	r2, [pc, #104]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037e0:	60d3      	str	r3, [r2, #12]
 80037e2:	e011      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037ec:	d10c      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3304      	adds	r3, #4
 80037f2:	2101      	movs	r1, #1
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 f8a9 	bl	800394c <RCCEx_PLLSAI1_Config>
 80037fa:	4603      	mov	r3, r0
 80037fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037fe:	7cfb      	ldrb	r3, [r7, #19]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003804:	7cfb      	ldrb	r3, [r7, #19]
 8003806:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d02b      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003822:	4908      	ldr	r1, [pc, #32]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003824:	4313      	orrs	r3, r2
 8003826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800382e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003832:	d109      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003834:	4b03      	ldr	r3, [pc, #12]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	4a02      	ldr	r2, [pc, #8]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800383e:	60d3      	str	r3, [r2, #12]
 8003840:	e014      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003842:	bf00      	nop
 8003844:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800384c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003850:	d10c      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3304      	adds	r3, #4
 8003856:	2101      	movs	r1, #1
 8003858:	4618      	mov	r0, r3
 800385a:	f000 f877 	bl	800394c <RCCEx_PLLSAI1_Config>
 800385e:	4603      	mov	r3, r0
 8003860:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003862:	7cfb      	ldrb	r3, [r7, #19]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003868:	7cfb      	ldrb	r3, [r7, #19]
 800386a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d02f      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003878:	4b2b      	ldr	r3, [pc, #172]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003886:	4928      	ldr	r1, [pc, #160]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003892:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003896:	d10d      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3304      	adds	r3, #4
 800389c:	2102      	movs	r1, #2
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 f854 	bl	800394c <RCCEx_PLLSAI1_Config>
 80038a4:	4603      	mov	r3, r0
 80038a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038a8:	7cfb      	ldrb	r3, [r7, #19]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d014      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038ae:	7cfb      	ldrb	r3, [r7, #19]
 80038b0:	74bb      	strb	r3, [r7, #18]
 80038b2:	e011      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3320      	adds	r3, #32
 80038c2:	2102      	movs	r1, #2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f000 f935 	bl	8003b34 <RCCEx_PLLSAI2_Config>
 80038ca:	4603      	mov	r3, r0
 80038cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038ce:	7cfb      	ldrb	r3, [r7, #19]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038d4:	7cfb      	ldrb	r3, [r7, #19]
 80038d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00a      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038e4:	4b10      	ldr	r3, [pc, #64]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038f2:	490d      	ldr	r1, [pc, #52]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00b      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003906:	4b08      	ldr	r3, [pc, #32]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003916:	4904      	ldr	r1, [pc, #16]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800391e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40021000 	.word	0x40021000

0800392c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a04      	ldr	r2, [pc, #16]	; (8003948 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003936:	f043 0304 	orr.w	r3, r3, #4
 800393a:	6013      	str	r3, [r2, #0]
}
 800393c:	bf00      	nop
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000

0800394c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800395a:	4b75      	ldr	r3, [pc, #468]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d018      	beq.n	8003998 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003966:	4b72      	ldr	r3, [pc, #456]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f003 0203 	and.w	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d10d      	bne.n	8003992 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
       ||
 800397a:	2b00      	cmp	r3, #0
 800397c:	d009      	beq.n	8003992 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800397e:	4b6c      	ldr	r3, [pc, #432]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	091b      	lsrs	r3, r3, #4
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
       ||
 800398e:	429a      	cmp	r2, r3
 8003990:	d047      	beq.n	8003a22 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
 8003996:	e044      	b.n	8003a22 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b03      	cmp	r3, #3
 800399e:	d018      	beq.n	80039d2 <RCCEx_PLLSAI1_Config+0x86>
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d825      	bhi.n	80039f0 <RCCEx_PLLSAI1_Config+0xa4>
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d002      	beq.n	80039ae <RCCEx_PLLSAI1_Config+0x62>
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d009      	beq.n	80039c0 <RCCEx_PLLSAI1_Config+0x74>
 80039ac:	e020      	b.n	80039f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039ae:	4b60      	ldr	r3, [pc, #384]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d11d      	bne.n	80039f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039be:	e01a      	b.n	80039f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039c0:	4b5b      	ldr	r3, [pc, #364]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d116      	bne.n	80039fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039d0:	e013      	b.n	80039fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039d2:	4b57      	ldr	r3, [pc, #348]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10f      	bne.n	80039fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039de:	4b54      	ldr	r3, [pc, #336]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d109      	bne.n	80039fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039ee:	e006      	b.n	80039fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	73fb      	strb	r3, [r7, #15]
      break;
 80039f4:	e004      	b.n	8003a00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039f6:	bf00      	nop
 80039f8:	e002      	b.n	8003a00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039fa:	bf00      	nop
 80039fc:	e000      	b.n	8003a00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10d      	bne.n	8003a22 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a06:	4b4a      	ldr	r3, [pc, #296]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6819      	ldr	r1, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	4944      	ldr	r1, [pc, #272]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d17d      	bne.n	8003b24 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a28:	4b41      	ldr	r3, [pc, #260]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a40      	ldr	r2, [pc, #256]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a34:	f7fd febe 	bl	80017b4 <HAL_GetTick>
 8003a38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a3a:	e009      	b.n	8003a50 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a3c:	f7fd feba 	bl	80017b4 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d902      	bls.n	8003a50 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a4e:	e005      	b.n	8003a5c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a50:	4b37      	ldr	r3, [pc, #220]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1ef      	bne.n	8003a3c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d160      	bne.n	8003b24 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d111      	bne.n	8003a8c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a68:	4b31      	ldr	r3, [pc, #196]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6892      	ldr	r2, [r2, #8]
 8003a78:	0211      	lsls	r1, r2, #8
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	68d2      	ldr	r2, [r2, #12]
 8003a7e:	0912      	lsrs	r2, r2, #4
 8003a80:	0452      	lsls	r2, r2, #17
 8003a82:	430a      	orrs	r2, r1
 8003a84:	492a      	ldr	r1, [pc, #168]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	610b      	str	r3, [r1, #16]
 8003a8a:	e027      	b.n	8003adc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d112      	bne.n	8003ab8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a92:	4b27      	ldr	r3, [pc, #156]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a9a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6892      	ldr	r2, [r2, #8]
 8003aa2:	0211      	lsls	r1, r2, #8
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6912      	ldr	r2, [r2, #16]
 8003aa8:	0852      	lsrs	r2, r2, #1
 8003aaa:	3a01      	subs	r2, #1
 8003aac:	0552      	lsls	r2, r2, #21
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	491f      	ldr	r1, [pc, #124]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	610b      	str	r3, [r1, #16]
 8003ab6:	e011      	b.n	8003adc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ab8:	4b1d      	ldr	r3, [pc, #116]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ac0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6892      	ldr	r2, [r2, #8]
 8003ac8:	0211      	lsls	r1, r2, #8
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6952      	ldr	r2, [r2, #20]
 8003ace:	0852      	lsrs	r2, r2, #1
 8003ad0:	3a01      	subs	r2, #1
 8003ad2:	0652      	lsls	r2, r2, #25
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	4916      	ldr	r1, [pc, #88]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003adc:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a13      	ldr	r2, [pc, #76]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ae6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae8:	f7fd fe64 	bl	80017b4 <HAL_GetTick>
 8003aec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003aee:	e009      	b.n	8003b04 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003af0:	f7fd fe60 	bl	80017b4 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d902      	bls.n	8003b04 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	73fb      	strb	r3, [r7, #15]
          break;
 8003b02:	e005      	b.n	8003b10 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b04:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0ef      	beq.n	8003af0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b16:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	4904      	ldr	r1, [pc, #16]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40021000 	.word	0x40021000

08003b34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b42:	4b6a      	ldr	r3, [pc, #424]	; (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d018      	beq.n	8003b80 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b4e:	4b67      	ldr	r3, [pc, #412]	; (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0203 	and.w	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d10d      	bne.n	8003b7a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
       ||
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d009      	beq.n	8003b7a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b66:	4b61      	ldr	r3, [pc, #388]	; (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	091b      	lsrs	r3, r3, #4
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
       ||
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d047      	beq.n	8003c0a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	73fb      	strb	r3, [r7, #15]
 8003b7e:	e044      	b.n	8003c0a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d018      	beq.n	8003bba <RCCEx_PLLSAI2_Config+0x86>
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d825      	bhi.n	8003bd8 <RCCEx_PLLSAI2_Config+0xa4>
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d002      	beq.n	8003b96 <RCCEx_PLLSAI2_Config+0x62>
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d009      	beq.n	8003ba8 <RCCEx_PLLSAI2_Config+0x74>
 8003b94:	e020      	b.n	8003bd8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b96:	4b55      	ldr	r3, [pc, #340]	; (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d11d      	bne.n	8003bde <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ba6:	e01a      	b.n	8003bde <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ba8:	4b50      	ldr	r3, [pc, #320]	; (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d116      	bne.n	8003be2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bb8:	e013      	b.n	8003be2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bba:	4b4c      	ldr	r3, [pc, #304]	; (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10f      	bne.n	8003be6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bc6:	4b49      	ldr	r3, [pc, #292]	; (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d109      	bne.n	8003be6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bd6:	e006      	b.n	8003be6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	73fb      	strb	r3, [r7, #15]
      break;
 8003bdc:	e004      	b.n	8003be8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bde:	bf00      	nop
 8003be0:	e002      	b.n	8003be8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003be2:	bf00      	nop
 8003be4:	e000      	b.n	8003be8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003be6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10d      	bne.n	8003c0a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bee:	4b3f      	ldr	r3, [pc, #252]	; (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6819      	ldr	r1, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	430b      	orrs	r3, r1
 8003c04:	4939      	ldr	r1, [pc, #228]	; (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d167      	bne.n	8003ce0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c10:	4b36      	ldr	r3, [pc, #216]	; (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a35      	ldr	r2, [pc, #212]	; (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c1c:	f7fd fdca 	bl	80017b4 <HAL_GetTick>
 8003c20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c22:	e009      	b.n	8003c38 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c24:	f7fd fdc6 	bl	80017b4 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d902      	bls.n	8003c38 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	73fb      	strb	r3, [r7, #15]
        break;
 8003c36:	e005      	b.n	8003c44 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c38:	4b2c      	ldr	r3, [pc, #176]	; (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1ef      	bne.n	8003c24 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d14a      	bne.n	8003ce0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d111      	bne.n	8003c74 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c50:	4b26      	ldr	r3, [pc, #152]	; (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6892      	ldr	r2, [r2, #8]
 8003c60:	0211      	lsls	r1, r2, #8
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	68d2      	ldr	r2, [r2, #12]
 8003c66:	0912      	lsrs	r2, r2, #4
 8003c68:	0452      	lsls	r2, r2, #17
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	491f      	ldr	r1, [pc, #124]	; (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	614b      	str	r3, [r1, #20]
 8003c72:	e011      	b.n	8003c98 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c74:	4b1d      	ldr	r3, [pc, #116]	; (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6892      	ldr	r2, [r2, #8]
 8003c84:	0211      	lsls	r1, r2, #8
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6912      	ldr	r2, [r2, #16]
 8003c8a:	0852      	lsrs	r2, r2, #1
 8003c8c:	3a01      	subs	r2, #1
 8003c8e:	0652      	lsls	r2, r2, #25
 8003c90:	430a      	orrs	r2, r1
 8003c92:	4916      	ldr	r1, [pc, #88]	; (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c98:	4b14      	ldr	r3, [pc, #80]	; (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a13      	ldr	r2, [pc, #76]	; (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca4:	f7fd fd86 	bl	80017b4 <HAL_GetTick>
 8003ca8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003caa:	e009      	b.n	8003cc0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cac:	f7fd fd82 	bl	80017b4 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d902      	bls.n	8003cc0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	73fb      	strb	r3, [r7, #15]
          break;
 8003cbe:	e005      	b.n	8003ccc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cc0:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0ef      	beq.n	8003cac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003cd2:	4b06      	ldr	r3, [pc, #24]	; (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd4:	695a      	ldr	r2, [r3, #20]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	4904      	ldr	r1, [pc, #16]	; (8003cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000

08003cf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e095      	b.n	8003e2e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d108      	bne.n	8003d1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d12:	d009      	beq.n	8003d28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	61da      	str	r2, [r3, #28]
 8003d1a:	e005      	b.n	8003d28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fd fa06 	bl	8001154 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d68:	d902      	bls.n	8003d70 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	e002      	b.n	8003d76 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003d7e:	d007      	beq.n	8003d90 <HAL_SPI_Init+0xa0>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d88:	d002      	beq.n	8003d90 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd2:	ea42 0103 	orr.w	r1, r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dda:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	0c1b      	lsrs	r3, r3, #16
 8003dec:	f003 0204 	and.w	r2, r3, #4
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003e0c:	ea42 0103 	orr.w	r1, r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b082      	sub	sp, #8
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e049      	b.n	8003edc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d106      	bne.n	8003e62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f841 	bl	8003ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2202      	movs	r2, #2
 8003e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	3304      	adds	r3, #4
 8003e72:	4619      	mov	r1, r3
 8003e74:	4610      	mov	r0, r2
 8003e76:	f000 f9f7 	bl	8004268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d001      	beq.n	8003f10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e04f      	b.n	8003fb0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0201 	orr.w	r2, r2, #1
 8003f26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a23      	ldr	r2, [pc, #140]	; (8003fbc <HAL_TIM_Base_Start_IT+0xc4>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d01d      	beq.n	8003f6e <HAL_TIM_Base_Start_IT+0x76>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3a:	d018      	beq.n	8003f6e <HAL_TIM_Base_Start_IT+0x76>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a1f      	ldr	r2, [pc, #124]	; (8003fc0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d013      	beq.n	8003f6e <HAL_TIM_Base_Start_IT+0x76>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a1e      	ldr	r2, [pc, #120]	; (8003fc4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d00e      	beq.n	8003f6e <HAL_TIM_Base_Start_IT+0x76>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1c      	ldr	r2, [pc, #112]	; (8003fc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d009      	beq.n	8003f6e <HAL_TIM_Base_Start_IT+0x76>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1b      	ldr	r2, [pc, #108]	; (8003fcc <HAL_TIM_Base_Start_IT+0xd4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d004      	beq.n	8003f6e <HAL_TIM_Base_Start_IT+0x76>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a19      	ldr	r2, [pc, #100]	; (8003fd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d115      	bne.n	8003f9a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	4b17      	ldr	r3, [pc, #92]	; (8003fd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2b06      	cmp	r3, #6
 8003f7e:	d015      	beq.n	8003fac <HAL_TIM_Base_Start_IT+0xb4>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f86:	d011      	beq.n	8003fac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f98:	e008      	b.n	8003fac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f042 0201 	orr.w	r2, r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	e000      	b.n	8003fae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	40012c00 	.word	0x40012c00
 8003fc0:	40000400 	.word	0x40000400
 8003fc4:	40000800 	.word	0x40000800
 8003fc8:	40000c00 	.word	0x40000c00
 8003fcc:	40013400 	.word	0x40013400
 8003fd0:	40014000 	.word	0x40014000
 8003fd4:	00010007 	.word	0x00010007

08003fd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d122      	bne.n	8004034 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d11b      	bne.n	8004034 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0202 	mvn.w	r2, #2
 8004004:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f905 	bl	800422a <HAL_TIM_IC_CaptureCallback>
 8004020:	e005      	b.n	800402e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f8f7 	bl	8004216 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f908 	bl	800423e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f003 0304 	and.w	r3, r3, #4
 800403e:	2b04      	cmp	r3, #4
 8004040:	d122      	bne.n	8004088 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b04      	cmp	r3, #4
 800404e:	d11b      	bne.n	8004088 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f06f 0204 	mvn.w	r2, #4
 8004058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2202      	movs	r2, #2
 800405e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f8db 	bl	800422a <HAL_TIM_IC_CaptureCallback>
 8004074:	e005      	b.n	8004082 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f8cd 	bl	8004216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f8de 	bl	800423e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b08      	cmp	r3, #8
 8004094:	d122      	bne.n	80040dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f003 0308 	and.w	r3, r3, #8
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d11b      	bne.n	80040dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0208 	mvn.w	r2, #8
 80040ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2204      	movs	r2, #4
 80040b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f8b1 	bl	800422a <HAL_TIM_IC_CaptureCallback>
 80040c8:	e005      	b.n	80040d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f8a3 	bl	8004216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f8b4 	bl	800423e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0310 	and.w	r3, r3, #16
 80040e6:	2b10      	cmp	r3, #16
 80040e8:	d122      	bne.n	8004130 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0310 	and.w	r3, r3, #16
 80040f4:	2b10      	cmp	r3, #16
 80040f6:	d11b      	bne.n	8004130 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0210 	mvn.w	r2, #16
 8004100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2208      	movs	r2, #8
 8004106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f887 	bl	800422a <HAL_TIM_IC_CaptureCallback>
 800411c:	e005      	b.n	800412a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f879 	bl	8004216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f88a 	bl	800423e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b01      	cmp	r3, #1
 800413c:	d10e      	bne.n	800415c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b01      	cmp	r3, #1
 800414a:	d107      	bne.n	800415c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0201 	mvn.w	r2, #1
 8004154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7fc feb6 	bl	8000ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004166:	2b80      	cmp	r3, #128	; 0x80
 8004168:	d10e      	bne.n	8004188 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004174:	2b80      	cmp	r3, #128	; 0x80
 8004176:	d107      	bne.n	8004188 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f914 	bl	80043b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004196:	d10e      	bne.n	80041b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a2:	2b80      	cmp	r3, #128	; 0x80
 80041a4:	d107      	bne.n	80041b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f907 	bl	80043c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c0:	2b40      	cmp	r3, #64	; 0x40
 80041c2:	d10e      	bne.n	80041e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ce:	2b40      	cmp	r3, #64	; 0x40
 80041d0:	d107      	bne.n	80041e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f838 	bl	8004252 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	f003 0320 	and.w	r3, r3, #32
 80041ec:	2b20      	cmp	r3, #32
 80041ee:	d10e      	bne.n	800420e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	d107      	bne.n	800420e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f06f 0220 	mvn.w	r2, #32
 8004206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f8c7 	bl	800439c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800420e:	bf00      	nop
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
	...

08004268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a40      	ldr	r2, [pc, #256]	; (800437c <TIM_Base_SetConfig+0x114>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d013      	beq.n	80042a8 <TIM_Base_SetConfig+0x40>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004286:	d00f      	beq.n	80042a8 <TIM_Base_SetConfig+0x40>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a3d      	ldr	r2, [pc, #244]	; (8004380 <TIM_Base_SetConfig+0x118>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00b      	beq.n	80042a8 <TIM_Base_SetConfig+0x40>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a3c      	ldr	r2, [pc, #240]	; (8004384 <TIM_Base_SetConfig+0x11c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d007      	beq.n	80042a8 <TIM_Base_SetConfig+0x40>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a3b      	ldr	r2, [pc, #236]	; (8004388 <TIM_Base_SetConfig+0x120>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d003      	beq.n	80042a8 <TIM_Base_SetConfig+0x40>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a3a      	ldr	r2, [pc, #232]	; (800438c <TIM_Base_SetConfig+0x124>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d108      	bne.n	80042ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a2f      	ldr	r2, [pc, #188]	; (800437c <TIM_Base_SetConfig+0x114>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d01f      	beq.n	8004302 <TIM_Base_SetConfig+0x9a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c8:	d01b      	beq.n	8004302 <TIM_Base_SetConfig+0x9a>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a2c      	ldr	r2, [pc, #176]	; (8004380 <TIM_Base_SetConfig+0x118>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d017      	beq.n	8004302 <TIM_Base_SetConfig+0x9a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a2b      	ldr	r2, [pc, #172]	; (8004384 <TIM_Base_SetConfig+0x11c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d013      	beq.n	8004302 <TIM_Base_SetConfig+0x9a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a2a      	ldr	r2, [pc, #168]	; (8004388 <TIM_Base_SetConfig+0x120>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d00f      	beq.n	8004302 <TIM_Base_SetConfig+0x9a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a29      	ldr	r2, [pc, #164]	; (800438c <TIM_Base_SetConfig+0x124>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00b      	beq.n	8004302 <TIM_Base_SetConfig+0x9a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a28      	ldr	r2, [pc, #160]	; (8004390 <TIM_Base_SetConfig+0x128>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d007      	beq.n	8004302 <TIM_Base_SetConfig+0x9a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a27      	ldr	r2, [pc, #156]	; (8004394 <TIM_Base_SetConfig+0x12c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d003      	beq.n	8004302 <TIM_Base_SetConfig+0x9a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a26      	ldr	r2, [pc, #152]	; (8004398 <TIM_Base_SetConfig+0x130>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d108      	bne.n	8004314 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4313      	orrs	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a10      	ldr	r2, [pc, #64]	; (800437c <TIM_Base_SetConfig+0x114>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d00f      	beq.n	8004360 <TIM_Base_SetConfig+0xf8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a12      	ldr	r2, [pc, #72]	; (800438c <TIM_Base_SetConfig+0x124>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d00b      	beq.n	8004360 <TIM_Base_SetConfig+0xf8>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a11      	ldr	r2, [pc, #68]	; (8004390 <TIM_Base_SetConfig+0x128>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d007      	beq.n	8004360 <TIM_Base_SetConfig+0xf8>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a10      	ldr	r2, [pc, #64]	; (8004394 <TIM_Base_SetConfig+0x12c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d003      	beq.n	8004360 <TIM_Base_SetConfig+0xf8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a0f      	ldr	r2, [pc, #60]	; (8004398 <TIM_Base_SetConfig+0x130>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d103      	bne.n	8004368 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	615a      	str	r2, [r3, #20]
}
 800436e:	bf00      	nop
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	40012c00 	.word	0x40012c00
 8004380:	40000400 	.word	0x40000400
 8004384:	40000800 	.word	0x40000800
 8004388:	40000c00 	.word	0x40000c00
 800438c:	40013400 	.word	0x40013400
 8004390:	40014000 	.word	0x40014000
 8004394:	40014400 	.word	0x40014400
 8004398:	40014800 	.word	0x40014800

0800439c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e040      	b.n	800446c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d106      	bne.n	8004400 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fc feee 	bl	80011dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2224      	movs	r2, #36	; 0x24
 8004404:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0201 	bic.w	r2, r2, #1
 8004414:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f992 	bl	8004740 <UART_SetConfig>
 800441c:	4603      	mov	r3, r0
 800441e:	2b01      	cmp	r3, #1
 8004420:	d101      	bne.n	8004426 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e022      	b.n	800446c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fc3e 	bl	8004cb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004442:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004452:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 fcc5 	bl	8004df4 <UART_CheckIdleState>
 800446a:	4603      	mov	r3, r0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08a      	sub	sp, #40	; 0x28
 8004478:	af02      	add	r7, sp, #8
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	603b      	str	r3, [r7, #0]
 8004480:	4613      	mov	r3, r2
 8004482:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004488:	2b20      	cmp	r3, #32
 800448a:	f040 8082 	bne.w	8004592 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <HAL_UART_Transmit+0x26>
 8004494:	88fb      	ldrh	r3, [r7, #6]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e07a      	b.n	8004594 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d101      	bne.n	80044ac <HAL_UART_Transmit+0x38>
 80044a8:	2302      	movs	r3, #2
 80044aa:	e073      	b.n	8004594 <HAL_UART_Transmit+0x120>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2221      	movs	r2, #33	; 0x21
 80044c0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044c2:	f7fd f977 	bl	80017b4 <HAL_GetTick>
 80044c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	88fa      	ldrh	r2, [r7, #6]
 80044cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	88fa      	ldrh	r2, [r7, #6]
 80044d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e0:	d108      	bne.n	80044f4 <HAL_UART_Transmit+0x80>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d104      	bne.n	80044f4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	e003      	b.n	80044fc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044f8:	2300      	movs	r3, #0
 80044fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004504:	e02d      	b.n	8004562 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2200      	movs	r2, #0
 800450e:	2180      	movs	r1, #128	; 0x80
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 fcb8 	bl	8004e86 <UART_WaitOnFlagUntilTimeout>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e039      	b.n	8004594 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10b      	bne.n	800453e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	881a      	ldrh	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004532:	b292      	uxth	r2, r2
 8004534:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	3302      	adds	r3, #2
 800453a:	61bb      	str	r3, [r7, #24]
 800453c:	e008      	b.n	8004550 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	781a      	ldrb	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	b292      	uxth	r2, r2
 8004548:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	3301      	adds	r3, #1
 800454e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1cb      	bne.n	8004506 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2200      	movs	r2, #0
 8004576:	2140      	movs	r1, #64	; 0x40
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 fc84 	bl	8004e86 <UART_WaitOnFlagUntilTimeout>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e005      	b.n	8004594 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2220      	movs	r2, #32
 800458c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	e000      	b.n	8004594 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004592:	2302      	movs	r3, #2
  }
}
 8004594:	4618      	mov	r0, r3
 8004596:	3720      	adds	r7, #32
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08a      	sub	sp, #40	; 0x28
 80045a0:	af02      	add	r7, sp, #8
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	4613      	mov	r3, r2
 80045aa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	f040 80bf 	bne.w	8004734 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <HAL_UART_Receive+0x26>
 80045bc:	88fb      	ldrh	r3, [r7, #6]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e0b7      	b.n	8004736 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_UART_Receive+0x38>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e0b0      	b.n	8004736 <HAL_UART_Receive+0x19a>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2222      	movs	r2, #34	; 0x22
 80045e8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045f0:	f7fd f8e0 	bl	80017b4 <HAL_GetTick>
 80045f4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	88fa      	ldrh	r2, [r7, #6]
 80045fa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	88fa      	ldrh	r2, [r7, #6]
 8004602:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800460e:	d10e      	bne.n	800462e <HAL_UART_Receive+0x92>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d105      	bne.n	8004624 <HAL_UART_Receive+0x88>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800461e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004622:	e02d      	b.n	8004680 <HAL_UART_Receive+0xe4>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	22ff      	movs	r2, #255	; 0xff
 8004628:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800462c:	e028      	b.n	8004680 <HAL_UART_Receive+0xe4>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10d      	bne.n	8004652 <HAL_UART_Receive+0xb6>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d104      	bne.n	8004648 <HAL_UART_Receive+0xac>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	22ff      	movs	r2, #255	; 0xff
 8004642:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004646:	e01b      	b.n	8004680 <HAL_UART_Receive+0xe4>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	227f      	movs	r2, #127	; 0x7f
 800464c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004650:	e016      	b.n	8004680 <HAL_UART_Receive+0xe4>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800465a:	d10d      	bne.n	8004678 <HAL_UART_Receive+0xdc>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d104      	bne.n	800466e <HAL_UART_Receive+0xd2>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	227f      	movs	r2, #127	; 0x7f
 8004668:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800466c:	e008      	b.n	8004680 <HAL_UART_Receive+0xe4>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	223f      	movs	r2, #63	; 0x3f
 8004672:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004676:	e003      	b.n	8004680 <HAL_UART_Receive+0xe4>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004686:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004690:	d108      	bne.n	80046a4 <HAL_UART_Receive+0x108>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d104      	bne.n	80046a4 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800469a:	2300      	movs	r3, #0
 800469c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	e003      	b.n	80046ac <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80046b4:	e033      	b.n	800471e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2200      	movs	r2, #0
 80046be:	2120      	movs	r1, #32
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 fbe0 	bl	8004e86 <UART_WaitOnFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e032      	b.n	8004736 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10c      	bne.n	80046f0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80046dc:	b29a      	uxth	r2, r3
 80046de:	8a7b      	ldrh	r3, [r7, #18]
 80046e0:	4013      	ands	r3, r2
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	3302      	adds	r3, #2
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	e00d      	b.n	800470c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	8a7b      	ldrh	r3, [r7, #18]
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	4013      	ands	r3, r2
 8004700:	b2da      	uxtb	r2, r3
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	3301      	adds	r3, #1
 800470a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004712:	b29b      	uxth	r3, r3
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1c5      	bne.n	80046b6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2220      	movs	r2, #32
 800472e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004730:	2300      	movs	r3, #0
 8004732:	e000      	b.n	8004736 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004734:	2302      	movs	r3, #2
  }
}
 8004736:	4618      	mov	r0, r3
 8004738:	3720      	adds	r7, #32
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004744:	b08a      	sub	sp, #40	; 0x28
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	431a      	orrs	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	431a      	orrs	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	4313      	orrs	r3, r2
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4ba4      	ldr	r3, [pc, #656]	; (8004a00 <UART_SetConfig+0x2c0>)
 8004770:	4013      	ands	r3, r2
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	6812      	ldr	r2, [r2, #0]
 8004776:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004778:	430b      	orrs	r3, r1
 800477a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a99      	ldr	r2, [pc, #612]	; (8004a04 <UART_SetConfig+0x2c4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d004      	beq.n	80047ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a8:	4313      	orrs	r3, r2
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047bc:	430a      	orrs	r2, r1
 80047be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a90      	ldr	r2, [pc, #576]	; (8004a08 <UART_SetConfig+0x2c8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d126      	bne.n	8004818 <UART_SetConfig+0xd8>
 80047ca:	4b90      	ldr	r3, [pc, #576]	; (8004a0c <UART_SetConfig+0x2cc>)
 80047cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d0:	f003 0303 	and.w	r3, r3, #3
 80047d4:	2b03      	cmp	r3, #3
 80047d6:	d81b      	bhi.n	8004810 <UART_SetConfig+0xd0>
 80047d8:	a201      	add	r2, pc, #4	; (adr r2, 80047e0 <UART_SetConfig+0xa0>)
 80047da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047de:	bf00      	nop
 80047e0:	080047f1 	.word	0x080047f1
 80047e4:	08004801 	.word	0x08004801
 80047e8:	080047f9 	.word	0x080047f9
 80047ec:	08004809 	.word	0x08004809
 80047f0:	2301      	movs	r3, #1
 80047f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f6:	e116      	b.n	8004a26 <UART_SetConfig+0x2e6>
 80047f8:	2302      	movs	r3, #2
 80047fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fe:	e112      	b.n	8004a26 <UART_SetConfig+0x2e6>
 8004800:	2304      	movs	r3, #4
 8004802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004806:	e10e      	b.n	8004a26 <UART_SetConfig+0x2e6>
 8004808:	2308      	movs	r3, #8
 800480a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800480e:	e10a      	b.n	8004a26 <UART_SetConfig+0x2e6>
 8004810:	2310      	movs	r3, #16
 8004812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004816:	e106      	b.n	8004a26 <UART_SetConfig+0x2e6>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a7c      	ldr	r2, [pc, #496]	; (8004a10 <UART_SetConfig+0x2d0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d138      	bne.n	8004894 <UART_SetConfig+0x154>
 8004822:	4b7a      	ldr	r3, [pc, #488]	; (8004a0c <UART_SetConfig+0x2cc>)
 8004824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004828:	f003 030c 	and.w	r3, r3, #12
 800482c:	2b0c      	cmp	r3, #12
 800482e:	d82d      	bhi.n	800488c <UART_SetConfig+0x14c>
 8004830:	a201      	add	r2, pc, #4	; (adr r2, 8004838 <UART_SetConfig+0xf8>)
 8004832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004836:	bf00      	nop
 8004838:	0800486d 	.word	0x0800486d
 800483c:	0800488d 	.word	0x0800488d
 8004840:	0800488d 	.word	0x0800488d
 8004844:	0800488d 	.word	0x0800488d
 8004848:	0800487d 	.word	0x0800487d
 800484c:	0800488d 	.word	0x0800488d
 8004850:	0800488d 	.word	0x0800488d
 8004854:	0800488d 	.word	0x0800488d
 8004858:	08004875 	.word	0x08004875
 800485c:	0800488d 	.word	0x0800488d
 8004860:	0800488d 	.word	0x0800488d
 8004864:	0800488d 	.word	0x0800488d
 8004868:	08004885 	.word	0x08004885
 800486c:	2300      	movs	r3, #0
 800486e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004872:	e0d8      	b.n	8004a26 <UART_SetConfig+0x2e6>
 8004874:	2302      	movs	r3, #2
 8004876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800487a:	e0d4      	b.n	8004a26 <UART_SetConfig+0x2e6>
 800487c:	2304      	movs	r3, #4
 800487e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004882:	e0d0      	b.n	8004a26 <UART_SetConfig+0x2e6>
 8004884:	2308      	movs	r3, #8
 8004886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800488a:	e0cc      	b.n	8004a26 <UART_SetConfig+0x2e6>
 800488c:	2310      	movs	r3, #16
 800488e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004892:	e0c8      	b.n	8004a26 <UART_SetConfig+0x2e6>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a5e      	ldr	r2, [pc, #376]	; (8004a14 <UART_SetConfig+0x2d4>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d125      	bne.n	80048ea <UART_SetConfig+0x1aa>
 800489e:	4b5b      	ldr	r3, [pc, #364]	; (8004a0c <UART_SetConfig+0x2cc>)
 80048a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048a8:	2b30      	cmp	r3, #48	; 0x30
 80048aa:	d016      	beq.n	80048da <UART_SetConfig+0x19a>
 80048ac:	2b30      	cmp	r3, #48	; 0x30
 80048ae:	d818      	bhi.n	80048e2 <UART_SetConfig+0x1a2>
 80048b0:	2b20      	cmp	r3, #32
 80048b2:	d00a      	beq.n	80048ca <UART_SetConfig+0x18a>
 80048b4:	2b20      	cmp	r3, #32
 80048b6:	d814      	bhi.n	80048e2 <UART_SetConfig+0x1a2>
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d002      	beq.n	80048c2 <UART_SetConfig+0x182>
 80048bc:	2b10      	cmp	r3, #16
 80048be:	d008      	beq.n	80048d2 <UART_SetConfig+0x192>
 80048c0:	e00f      	b.n	80048e2 <UART_SetConfig+0x1a2>
 80048c2:	2300      	movs	r3, #0
 80048c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048c8:	e0ad      	b.n	8004a26 <UART_SetConfig+0x2e6>
 80048ca:	2302      	movs	r3, #2
 80048cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048d0:	e0a9      	b.n	8004a26 <UART_SetConfig+0x2e6>
 80048d2:	2304      	movs	r3, #4
 80048d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048d8:	e0a5      	b.n	8004a26 <UART_SetConfig+0x2e6>
 80048da:	2308      	movs	r3, #8
 80048dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048e0:	e0a1      	b.n	8004a26 <UART_SetConfig+0x2e6>
 80048e2:	2310      	movs	r3, #16
 80048e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048e8:	e09d      	b.n	8004a26 <UART_SetConfig+0x2e6>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a4a      	ldr	r2, [pc, #296]	; (8004a18 <UART_SetConfig+0x2d8>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d125      	bne.n	8004940 <UART_SetConfig+0x200>
 80048f4:	4b45      	ldr	r3, [pc, #276]	; (8004a0c <UART_SetConfig+0x2cc>)
 80048f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80048fe:	2bc0      	cmp	r3, #192	; 0xc0
 8004900:	d016      	beq.n	8004930 <UART_SetConfig+0x1f0>
 8004902:	2bc0      	cmp	r3, #192	; 0xc0
 8004904:	d818      	bhi.n	8004938 <UART_SetConfig+0x1f8>
 8004906:	2b80      	cmp	r3, #128	; 0x80
 8004908:	d00a      	beq.n	8004920 <UART_SetConfig+0x1e0>
 800490a:	2b80      	cmp	r3, #128	; 0x80
 800490c:	d814      	bhi.n	8004938 <UART_SetConfig+0x1f8>
 800490e:	2b00      	cmp	r3, #0
 8004910:	d002      	beq.n	8004918 <UART_SetConfig+0x1d8>
 8004912:	2b40      	cmp	r3, #64	; 0x40
 8004914:	d008      	beq.n	8004928 <UART_SetConfig+0x1e8>
 8004916:	e00f      	b.n	8004938 <UART_SetConfig+0x1f8>
 8004918:	2300      	movs	r3, #0
 800491a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800491e:	e082      	b.n	8004a26 <UART_SetConfig+0x2e6>
 8004920:	2302      	movs	r3, #2
 8004922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004926:	e07e      	b.n	8004a26 <UART_SetConfig+0x2e6>
 8004928:	2304      	movs	r3, #4
 800492a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800492e:	e07a      	b.n	8004a26 <UART_SetConfig+0x2e6>
 8004930:	2308      	movs	r3, #8
 8004932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004936:	e076      	b.n	8004a26 <UART_SetConfig+0x2e6>
 8004938:	2310      	movs	r3, #16
 800493a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800493e:	e072      	b.n	8004a26 <UART_SetConfig+0x2e6>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a35      	ldr	r2, [pc, #212]	; (8004a1c <UART_SetConfig+0x2dc>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d12a      	bne.n	80049a0 <UART_SetConfig+0x260>
 800494a:	4b30      	ldr	r3, [pc, #192]	; (8004a0c <UART_SetConfig+0x2cc>)
 800494c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004958:	d01a      	beq.n	8004990 <UART_SetConfig+0x250>
 800495a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800495e:	d81b      	bhi.n	8004998 <UART_SetConfig+0x258>
 8004960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004964:	d00c      	beq.n	8004980 <UART_SetConfig+0x240>
 8004966:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800496a:	d815      	bhi.n	8004998 <UART_SetConfig+0x258>
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <UART_SetConfig+0x238>
 8004970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004974:	d008      	beq.n	8004988 <UART_SetConfig+0x248>
 8004976:	e00f      	b.n	8004998 <UART_SetConfig+0x258>
 8004978:	2300      	movs	r3, #0
 800497a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800497e:	e052      	b.n	8004a26 <UART_SetConfig+0x2e6>
 8004980:	2302      	movs	r3, #2
 8004982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004986:	e04e      	b.n	8004a26 <UART_SetConfig+0x2e6>
 8004988:	2304      	movs	r3, #4
 800498a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800498e:	e04a      	b.n	8004a26 <UART_SetConfig+0x2e6>
 8004990:	2308      	movs	r3, #8
 8004992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004996:	e046      	b.n	8004a26 <UART_SetConfig+0x2e6>
 8004998:	2310      	movs	r3, #16
 800499a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800499e:	e042      	b.n	8004a26 <UART_SetConfig+0x2e6>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a17      	ldr	r2, [pc, #92]	; (8004a04 <UART_SetConfig+0x2c4>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d13a      	bne.n	8004a20 <UART_SetConfig+0x2e0>
 80049aa:	4b18      	ldr	r3, [pc, #96]	; (8004a0c <UART_SetConfig+0x2cc>)
 80049ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049b8:	d01a      	beq.n	80049f0 <UART_SetConfig+0x2b0>
 80049ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049be:	d81b      	bhi.n	80049f8 <UART_SetConfig+0x2b8>
 80049c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049c4:	d00c      	beq.n	80049e0 <UART_SetConfig+0x2a0>
 80049c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ca:	d815      	bhi.n	80049f8 <UART_SetConfig+0x2b8>
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <UART_SetConfig+0x298>
 80049d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d4:	d008      	beq.n	80049e8 <UART_SetConfig+0x2a8>
 80049d6:	e00f      	b.n	80049f8 <UART_SetConfig+0x2b8>
 80049d8:	2300      	movs	r3, #0
 80049da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049de:	e022      	b.n	8004a26 <UART_SetConfig+0x2e6>
 80049e0:	2302      	movs	r3, #2
 80049e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049e6:	e01e      	b.n	8004a26 <UART_SetConfig+0x2e6>
 80049e8:	2304      	movs	r3, #4
 80049ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ee:	e01a      	b.n	8004a26 <UART_SetConfig+0x2e6>
 80049f0:	2308      	movs	r3, #8
 80049f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049f6:	e016      	b.n	8004a26 <UART_SetConfig+0x2e6>
 80049f8:	2310      	movs	r3, #16
 80049fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049fe:	e012      	b.n	8004a26 <UART_SetConfig+0x2e6>
 8004a00:	efff69f3 	.word	0xefff69f3
 8004a04:	40008000 	.word	0x40008000
 8004a08:	40013800 	.word	0x40013800
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	40004400 	.word	0x40004400
 8004a14:	40004800 	.word	0x40004800
 8004a18:	40004c00 	.word	0x40004c00
 8004a1c:	40005000 	.word	0x40005000
 8004a20:	2310      	movs	r3, #16
 8004a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a9f      	ldr	r2, [pc, #636]	; (8004ca8 <UART_SetConfig+0x568>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d17a      	bne.n	8004b26 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d824      	bhi.n	8004a82 <UART_SetConfig+0x342>
 8004a38:	a201      	add	r2, pc, #4	; (adr r2, 8004a40 <UART_SetConfig+0x300>)
 8004a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3e:	bf00      	nop
 8004a40:	08004a65 	.word	0x08004a65
 8004a44:	08004a83 	.word	0x08004a83
 8004a48:	08004a6d 	.word	0x08004a6d
 8004a4c:	08004a83 	.word	0x08004a83
 8004a50:	08004a73 	.word	0x08004a73
 8004a54:	08004a83 	.word	0x08004a83
 8004a58:	08004a83 	.word	0x08004a83
 8004a5c:	08004a83 	.word	0x08004a83
 8004a60:	08004a7b 	.word	0x08004a7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a64:	f7fe fbba 	bl	80031dc <HAL_RCC_GetPCLK1Freq>
 8004a68:	61f8      	str	r0, [r7, #28]
        break;
 8004a6a:	e010      	b.n	8004a8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a6c:	4b8f      	ldr	r3, [pc, #572]	; (8004cac <UART_SetConfig+0x56c>)
 8004a6e:	61fb      	str	r3, [r7, #28]
        break;
 8004a70:	e00d      	b.n	8004a8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a72:	f7fe fb1b 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 8004a76:	61f8      	str	r0, [r7, #28]
        break;
 8004a78:	e009      	b.n	8004a8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a7e:	61fb      	str	r3, [r7, #28]
        break;
 8004a80:	e005      	b.n	8004a8e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 80fb 	beq.w	8004c8c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	4413      	add	r3, r2
 8004aa0:	69fa      	ldr	r2, [r7, #28]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d305      	bcc.n	8004ab2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004aac:	69fa      	ldr	r2, [r7, #28]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d903      	bls.n	8004aba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ab8:	e0e8      	b.n	8004c8c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	2200      	movs	r2, #0
 8004abe:	461c      	mov	r4, r3
 8004ac0:	4615      	mov	r5, r2
 8004ac2:	f04f 0200 	mov.w	r2, #0
 8004ac6:	f04f 0300 	mov.w	r3, #0
 8004aca:	022b      	lsls	r3, r5, #8
 8004acc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ad0:	0222      	lsls	r2, r4, #8
 8004ad2:	68f9      	ldr	r1, [r7, #12]
 8004ad4:	6849      	ldr	r1, [r1, #4]
 8004ad6:	0849      	lsrs	r1, r1, #1
 8004ad8:	2000      	movs	r0, #0
 8004ada:	4688      	mov	r8, r1
 8004adc:	4681      	mov	r9, r0
 8004ade:	eb12 0a08 	adds.w	sl, r2, r8
 8004ae2:	eb43 0b09 	adc.w	fp, r3, r9
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	603b      	str	r3, [r7, #0]
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004af4:	4650      	mov	r0, sl
 8004af6:	4659      	mov	r1, fp
 8004af8:	f7fb fbba 	bl	8000270 <__aeabi_uldivmod>
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	4613      	mov	r3, r2
 8004b02:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b0a:	d308      	bcc.n	8004b1e <UART_SetConfig+0x3de>
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b12:	d204      	bcs.n	8004b1e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	60da      	str	r2, [r3, #12]
 8004b1c:	e0b6      	b.n	8004c8c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b24:	e0b2      	b.n	8004c8c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b2e:	d15e      	bne.n	8004bee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004b30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d828      	bhi.n	8004b8a <UART_SetConfig+0x44a>
 8004b38:	a201      	add	r2, pc, #4	; (adr r2, 8004b40 <UART_SetConfig+0x400>)
 8004b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3e:	bf00      	nop
 8004b40:	08004b65 	.word	0x08004b65
 8004b44:	08004b6d 	.word	0x08004b6d
 8004b48:	08004b75 	.word	0x08004b75
 8004b4c:	08004b8b 	.word	0x08004b8b
 8004b50:	08004b7b 	.word	0x08004b7b
 8004b54:	08004b8b 	.word	0x08004b8b
 8004b58:	08004b8b 	.word	0x08004b8b
 8004b5c:	08004b8b 	.word	0x08004b8b
 8004b60:	08004b83 	.word	0x08004b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b64:	f7fe fb3a 	bl	80031dc <HAL_RCC_GetPCLK1Freq>
 8004b68:	61f8      	str	r0, [r7, #28]
        break;
 8004b6a:	e014      	b.n	8004b96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b6c:	f7fe fb4c 	bl	8003208 <HAL_RCC_GetPCLK2Freq>
 8004b70:	61f8      	str	r0, [r7, #28]
        break;
 8004b72:	e010      	b.n	8004b96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b74:	4b4d      	ldr	r3, [pc, #308]	; (8004cac <UART_SetConfig+0x56c>)
 8004b76:	61fb      	str	r3, [r7, #28]
        break;
 8004b78:	e00d      	b.n	8004b96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b7a:	f7fe fa97 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 8004b7e:	61f8      	str	r0, [r7, #28]
        break;
 8004b80:	e009      	b.n	8004b96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b86:	61fb      	str	r3, [r7, #28]
        break;
 8004b88:	e005      	b.n	8004b96 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d077      	beq.n	8004c8c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	005a      	lsls	r2, r3, #1
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	085b      	lsrs	r3, r3, #1
 8004ba6:	441a      	add	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	2b0f      	cmp	r3, #15
 8004bb6:	d916      	bls.n	8004be6 <UART_SetConfig+0x4a6>
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bbe:	d212      	bcs.n	8004be6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	f023 030f 	bic.w	r3, r3, #15
 8004bc8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	085b      	lsrs	r3, r3, #1
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	8afb      	ldrh	r3, [r7, #22]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	8afa      	ldrh	r2, [r7, #22]
 8004be2:	60da      	str	r2, [r3, #12]
 8004be4:	e052      	b.n	8004c8c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004bec:	e04e      	b.n	8004c8c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d827      	bhi.n	8004c46 <UART_SetConfig+0x506>
 8004bf6:	a201      	add	r2, pc, #4	; (adr r2, 8004bfc <UART_SetConfig+0x4bc>)
 8004bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfc:	08004c21 	.word	0x08004c21
 8004c00:	08004c29 	.word	0x08004c29
 8004c04:	08004c31 	.word	0x08004c31
 8004c08:	08004c47 	.word	0x08004c47
 8004c0c:	08004c37 	.word	0x08004c37
 8004c10:	08004c47 	.word	0x08004c47
 8004c14:	08004c47 	.word	0x08004c47
 8004c18:	08004c47 	.word	0x08004c47
 8004c1c:	08004c3f 	.word	0x08004c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c20:	f7fe fadc 	bl	80031dc <HAL_RCC_GetPCLK1Freq>
 8004c24:	61f8      	str	r0, [r7, #28]
        break;
 8004c26:	e014      	b.n	8004c52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c28:	f7fe faee 	bl	8003208 <HAL_RCC_GetPCLK2Freq>
 8004c2c:	61f8      	str	r0, [r7, #28]
        break;
 8004c2e:	e010      	b.n	8004c52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c30:	4b1e      	ldr	r3, [pc, #120]	; (8004cac <UART_SetConfig+0x56c>)
 8004c32:	61fb      	str	r3, [r7, #28]
        break;
 8004c34:	e00d      	b.n	8004c52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c36:	f7fe fa39 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 8004c3a:	61f8      	str	r0, [r7, #28]
        break;
 8004c3c:	e009      	b.n	8004c52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c42:	61fb      	str	r3, [r7, #28]
        break;
 8004c44:	e005      	b.n	8004c52 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c50:	bf00      	nop
    }

    if (pclk != 0U)
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d019      	beq.n	8004c8c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	085a      	lsrs	r2, r3, #1
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	441a      	add	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	2b0f      	cmp	r3, #15
 8004c70:	d909      	bls.n	8004c86 <UART_SetConfig+0x546>
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c78:	d205      	bcs.n	8004c86 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	60da      	str	r2, [r3, #12]
 8004c84:	e002      	b.n	8004c8c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c98:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3728      	adds	r7, #40	; 0x28
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40008000 	.word	0x40008000
 8004cac:	00f42400 	.word	0x00f42400

08004cb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	f003 0308 	and.w	r3, r3, #8
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	f003 0310 	and.w	r3, r3, #16
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00a      	beq.n	8004d62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d01a      	beq.n	8004dc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dae:	d10a      	bne.n	8004dc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	605a      	str	r2, [r3, #4]
  }
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af02      	add	r7, sp, #8
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e04:	f7fc fcd6 	bl	80017b4 <HAL_GetTick>
 8004e08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0308 	and.w	r3, r3, #8
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	d10e      	bne.n	8004e36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f82d 	bl	8004e86 <UART_WaitOnFlagUntilTimeout>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e023      	b.n	8004e7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d10e      	bne.n	8004e62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f817 	bl	8004e86 <UART_WaitOnFlagUntilTimeout>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e00d      	b.n	8004e7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b09c      	sub	sp, #112	; 0x70
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	603b      	str	r3, [r7, #0]
 8004e92:	4613      	mov	r3, r2
 8004e94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e96:	e0a5      	b.n	8004fe4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9e:	f000 80a1 	beq.w	8004fe4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea2:	f7fc fc87 	bl	80017b4 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d302      	bcc.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004eb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d13e      	bne.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ec0:	e853 3f00 	ldrex	r3, [r3]
 8004ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ecc:	667b      	str	r3, [r7, #100]	; 0x64
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ed6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ed8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004edc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ede:	e841 2300 	strex	r3, r2, [r1]
 8004ee2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1e6      	bne.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	3308      	adds	r3, #8
 8004ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ef4:	e853 3f00 	ldrex	r3, [r3]
 8004ef8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efc:	f023 0301 	bic.w	r3, r3, #1
 8004f00:	663b      	str	r3, [r7, #96]	; 0x60
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	3308      	adds	r3, #8
 8004f08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1e5      	bne.n	8004eea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2220      	movs	r2, #32
 8004f22:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2220      	movs	r2, #32
 8004f28:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e067      	b.n	8005006 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d04f      	beq.n	8004fe4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f52:	d147      	bne.n	8004fe4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f5c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e6      	bne.n	8004f5e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3308      	adds	r3, #8
 8004f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	e853 3f00 	ldrex	r3, [r3]
 8004f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f023 0301 	bic.w	r3, r3, #1
 8004fa6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3308      	adds	r3, #8
 8004fae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004fb0:	623a      	str	r2, [r7, #32]
 8004fb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	69f9      	ldr	r1, [r7, #28]
 8004fb6:	6a3a      	ldr	r2, [r7, #32]
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e5      	bne.n	8004f90 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2220      	movs	r2, #32
 8004fce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e010      	b.n	8005006 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	69da      	ldr	r2, [r3, #28]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	4013      	ands	r3, r2
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	bf0c      	ite	eq
 8004ff4:	2301      	moveq	r3, #1
 8004ff6:	2300      	movne	r3, #0
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	79fb      	ldrb	r3, [r7, #7]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	f43f af4a 	beq.w	8004e98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3770      	adds	r7, #112	; 0x70
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800500e:	b084      	sub	sp, #16
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	f107 001c 	add.w	r0, r7, #28
 800501c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 fa6b 	bl	8005508 <USB_CoreReset>
 8005032:	4603      	mov	r3, r0
 8005034:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005038:	2b00      	cmp	r3, #0
 800503a:	d106      	bne.n	800504a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005040:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	639a      	str	r2, [r3, #56]	; 0x38
 8005048:	e005      	b.n	8005056 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005056:	7bfb      	ldrb	r3, [r7, #15]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005062:	b004      	add	sp, #16
 8005064:	4770      	bx	lr

08005066 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005066:	b480      	push	{r7}
 8005068:	b083      	sub	sp, #12
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f023 0201 	bic.w	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050a4:	78fb      	ldrb	r3, [r7, #3]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d115      	bne.n	80050d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050b6:	2001      	movs	r0, #1
 80050b8:	f7fc fb88 	bl	80017cc <HAL_Delay>
      ms++;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	3301      	adds	r3, #1
 80050c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fa12 	bl	80054ec <USB_GetMode>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d01e      	beq.n	800510c <USB_SetCurrentMode+0x84>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2b31      	cmp	r3, #49	; 0x31
 80050d2:	d9f0      	bls.n	80050b6 <USB_SetCurrentMode+0x2e>
 80050d4:	e01a      	b.n	800510c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050d6:	78fb      	ldrb	r3, [r7, #3]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d115      	bne.n	8005108 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050e8:	2001      	movs	r0, #1
 80050ea:	f7fc fb6f 	bl	80017cc <HAL_Delay>
      ms++;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	3301      	adds	r3, #1
 80050f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f9f9 	bl	80054ec <USB_GetMode>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d005      	beq.n	800510c <USB_SetCurrentMode+0x84>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b31      	cmp	r3, #49	; 0x31
 8005104:	d9f0      	bls.n	80050e8 <USB_SetCurrentMode+0x60>
 8005106:	e001      	b.n	800510c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e005      	b.n	8005118 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b32      	cmp	r3, #50	; 0x32
 8005110:	d101      	bne.n	8005116 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e000      	b.n	8005118 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005120:	b084      	sub	sp, #16
 8005122:	b580      	push	{r7, lr}
 8005124:	b086      	sub	sp, #24
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
 800512a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800512e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800513a:	2300      	movs	r3, #0
 800513c:	613b      	str	r3, [r7, #16]
 800513e:	e009      	b.n	8005154 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	3340      	adds	r3, #64	; 0x40
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	2200      	movs	r2, #0
 800514c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	3301      	adds	r3, #1
 8005152:	613b      	str	r3, [r7, #16]
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	2b0e      	cmp	r3, #14
 8005158:	d9f2      	bls.n	8005140 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800515a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800515c:	2b00      	cmp	r3, #0
 800515e:	d11c      	bne.n	800519a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800516e:	f043 0302 	orr.w	r3, r3, #2
 8005172:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005178:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	e005      	b.n	80051a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051ac:	461a      	mov	r2, r3
 80051ae:	2300      	movs	r3, #0
 80051b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b8:	4619      	mov	r1, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c0:	461a      	mov	r2, r3
 80051c2:	680b      	ldr	r3, [r1, #0]
 80051c4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051c6:	2103      	movs	r1, #3
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f955 	bl	8005478 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051ce:	2110      	movs	r1, #16
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f8f1 	bl	80053b8 <USB_FlushTxFifo>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f91b 	bl	800541c <USB_FlushRxFifo>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d001      	beq.n	80051f0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f6:	461a      	mov	r2, r3
 80051f8:	2300      	movs	r3, #0
 80051fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005202:	461a      	mov	r2, r3
 8005204:	2300      	movs	r3, #0
 8005206:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520e:	461a      	mov	r2, r3
 8005210:	2300      	movs	r3, #0
 8005212:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005214:	2300      	movs	r3, #0
 8005216:	613b      	str	r3, [r7, #16]
 8005218:	e043      	b.n	80052a2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4413      	add	r3, r2
 8005222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800522c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005230:	d118      	bne.n	8005264 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10a      	bne.n	800524e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005244:	461a      	mov	r2, r3
 8005246:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	e013      	b.n	8005276 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525a:	461a      	mov	r2, r3
 800525c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	e008      	b.n	8005276 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005270:	461a      	mov	r2, r3
 8005272:	2300      	movs	r3, #0
 8005274:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005282:	461a      	mov	r2, r3
 8005284:	2300      	movs	r3, #0
 8005286:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005294:	461a      	mov	r2, r3
 8005296:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800529a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	3301      	adds	r3, #1
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d3b7      	bcc.n	800521a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052aa:	2300      	movs	r3, #0
 80052ac:	613b      	str	r3, [r7, #16]
 80052ae:	e043      	b.n	8005338 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052c6:	d118      	bne.n	80052fa <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10a      	bne.n	80052e4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052da:	461a      	mov	r2, r3
 80052dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	e013      	b.n	800530c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f0:	461a      	mov	r2, r3
 80052f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	e008      	b.n	800530c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005306:	461a      	mov	r2, r3
 8005308:	2300      	movs	r3, #0
 800530a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005318:	461a      	mov	r2, r3
 800531a:	2300      	movs	r3, #0
 800531c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532a:	461a      	mov	r2, r3
 800532c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005330:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	3301      	adds	r3, #1
 8005336:	613b      	str	r3, [r7, #16]
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	429a      	cmp	r2, r3
 800533e:	d3b7      	bcc.n	80052b0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800534e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005352:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005360:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	f043 0210 	orr.w	r2, r3, #16
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	699a      	ldr	r2, [r3, #24]
 8005372:	4b10      	ldr	r3, [pc, #64]	; (80053b4 <USB_DevInit+0x294>)
 8005374:	4313      	orrs	r3, r2
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800537a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800537c:	2b00      	cmp	r3, #0
 800537e:	d005      	beq.n	800538c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	f043 0208 	orr.w	r2, r3, #8
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800538c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800538e:	2b01      	cmp	r3, #1
 8005390:	d107      	bne.n	80053a2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800539a:	f043 0304 	orr.w	r3, r3, #4
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053ae:	b004      	add	sp, #16
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	803c3800 	.word	0x803c3800

080053b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	3301      	adds	r3, #1
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	4a12      	ldr	r2, [pc, #72]	; (8005418 <USB_FlushTxFifo+0x60>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d901      	bls.n	80053d6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e01a      	b.n	800540c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	daf3      	bge.n	80053c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	019b      	lsls	r3, r3, #6
 80053e6:	f043 0220 	orr.w	r2, r3, #32
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3301      	adds	r3, #1
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	4a08      	ldr	r2, [pc, #32]	; (8005418 <USB_FlushTxFifo+0x60>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d901      	bls.n	80053fe <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e006      	b.n	800540c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 0320 	and.w	r3, r3, #32
 8005406:	2b20      	cmp	r3, #32
 8005408:	d0f1      	beq.n	80053ee <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	00030d40 	.word	0x00030d40

0800541c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005424:	2300      	movs	r3, #0
 8005426:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	3301      	adds	r3, #1
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	4a11      	ldr	r2, [pc, #68]	; (8005474 <USB_FlushRxFifo+0x58>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d901      	bls.n	8005438 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e017      	b.n	8005468 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	2b00      	cmp	r3, #0
 800543e:	daf3      	bge.n	8005428 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2210      	movs	r2, #16
 8005448:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3301      	adds	r3, #1
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	4a08      	ldr	r2, [pc, #32]	; (8005474 <USB_FlushRxFifo+0x58>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d901      	bls.n	800545a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e006      	b.n	8005468 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f003 0310 	and.w	r3, r3, #16
 8005462:	2b10      	cmp	r3, #16
 8005464:	d0f1      	beq.n	800544a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	00030d40 	.word	0x00030d40

08005478 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	460b      	mov	r3, r1
 8005482:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	78fb      	ldrb	r3, [r7, #3]
 8005492:	68f9      	ldr	r1, [r7, #12]
 8005494:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005498:	4313      	orrs	r3, r2
 800549a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b085      	sub	sp, #20
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054c4:	f023 0303 	bic.w	r3, r3, #3
 80054c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054d8:	f043 0302 	orr.w	r3, r3, #2
 80054dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	f003 0301 	and.w	r3, r3, #1
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	3301      	adds	r3, #1
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	4a13      	ldr	r2, [pc, #76]	; (8005568 <USB_CoreReset+0x60>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d901      	bls.n	8005524 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e01a      	b.n	800555a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	daf3      	bge.n	8005514 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800552c:	2300      	movs	r3, #0
 800552e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	f043 0201 	orr.w	r2, r3, #1
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	3301      	adds	r3, #1
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	4a09      	ldr	r2, [pc, #36]	; (8005568 <USB_CoreReset+0x60>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d901      	bls.n	800554c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e006      	b.n	800555a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b01      	cmp	r3, #1
 8005556:	d0f1      	beq.n	800553c <USB_CoreReset+0x34>

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	00030d40 	.word	0x00030d40

0800556c <__NVIC_SetPriority>:
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	4603      	mov	r3, r0
 8005574:	6039      	str	r1, [r7, #0]
 8005576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800557c:	2b00      	cmp	r3, #0
 800557e:	db0a      	blt.n	8005596 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	b2da      	uxtb	r2, r3
 8005584:	490c      	ldr	r1, [pc, #48]	; (80055b8 <__NVIC_SetPriority+0x4c>)
 8005586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800558a:	0112      	lsls	r2, r2, #4
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	440b      	add	r3, r1
 8005590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005594:	e00a      	b.n	80055ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	b2da      	uxtb	r2, r3
 800559a:	4908      	ldr	r1, [pc, #32]	; (80055bc <__NVIC_SetPriority+0x50>)
 800559c:	79fb      	ldrb	r3, [r7, #7]
 800559e:	f003 030f 	and.w	r3, r3, #15
 80055a2:	3b04      	subs	r3, #4
 80055a4:	0112      	lsls	r2, r2, #4
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	440b      	add	r3, r1
 80055aa:	761a      	strb	r2, [r3, #24]
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	e000e100 	.word	0xe000e100
 80055bc:	e000ed00 	.word	0xe000ed00

080055c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80055c4:	4b05      	ldr	r3, [pc, #20]	; (80055dc <SysTick_Handler+0x1c>)
 80055c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80055c8:	f002 f83a 	bl	8007640 <xTaskGetSchedulerState>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d001      	beq.n	80055d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80055d2:	f002 ff21 	bl	8008418 <xPortSysTickHandler>
  }
}
 80055d6:	bf00      	nop
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	e000e010 	.word	0xe000e010

080055e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80055e4:	2100      	movs	r1, #0
 80055e6:	f06f 0004 	mvn.w	r0, #4
 80055ea:	f7ff ffbf 	bl	800556c <__NVIC_SetPriority>
#endif
}
 80055ee:	bf00      	nop
 80055f0:	bd80      	pop	{r7, pc}
	...

080055f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055fa:	f3ef 8305 	mrs	r3, IPSR
 80055fe:	603b      	str	r3, [r7, #0]
  return(result);
 8005600:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005606:	f06f 0305 	mvn.w	r3, #5
 800560a:	607b      	str	r3, [r7, #4]
 800560c:	e00c      	b.n	8005628 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800560e:	4b0a      	ldr	r3, [pc, #40]	; (8005638 <osKernelInitialize+0x44>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d105      	bne.n	8005622 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005616:	4b08      	ldr	r3, [pc, #32]	; (8005638 <osKernelInitialize+0x44>)
 8005618:	2201      	movs	r2, #1
 800561a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800561c:	2300      	movs	r3, #0
 800561e:	607b      	str	r3, [r7, #4]
 8005620:	e002      	b.n	8005628 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005622:	f04f 33ff 	mov.w	r3, #4294967295
 8005626:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005628:	687b      	ldr	r3, [r7, #4]
}
 800562a:	4618      	mov	r0, r3
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	20000758 	.word	0x20000758

0800563c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005642:	f3ef 8305 	mrs	r3, IPSR
 8005646:	603b      	str	r3, [r7, #0]
  return(result);
 8005648:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <osKernelStart+0x1a>
    stat = osErrorISR;
 800564e:	f06f 0305 	mvn.w	r3, #5
 8005652:	607b      	str	r3, [r7, #4]
 8005654:	e010      	b.n	8005678 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005656:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <osKernelStart+0x48>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d109      	bne.n	8005672 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800565e:	f7ff ffbf 	bl	80055e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005662:	4b08      	ldr	r3, [pc, #32]	; (8005684 <osKernelStart+0x48>)
 8005664:	2202      	movs	r2, #2
 8005666:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005668:	f001 fb8e 	bl	8006d88 <vTaskStartScheduler>
      stat = osOK;
 800566c:	2300      	movs	r3, #0
 800566e:	607b      	str	r3, [r7, #4]
 8005670:	e002      	b.n	8005678 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005672:	f04f 33ff 	mov.w	r3, #4294967295
 8005676:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005678:	687b      	ldr	r3, [r7, #4]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20000758 	.word	0x20000758

08005688 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005688:	b580      	push	{r7, lr}
 800568a:	b08e      	sub	sp, #56	; 0x38
 800568c:	af04      	add	r7, sp, #16
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005694:	2300      	movs	r3, #0
 8005696:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005698:	f3ef 8305 	mrs	r3, IPSR
 800569c:	617b      	str	r3, [r7, #20]
  return(result);
 800569e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d17e      	bne.n	80057a2 <osThreadNew+0x11a>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d07b      	beq.n	80057a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80056aa:	2380      	movs	r3, #128	; 0x80
 80056ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80056ae:	2318      	movs	r3, #24
 80056b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80056b6:	f04f 33ff 	mov.w	r3, #4294967295
 80056ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d045      	beq.n	800574e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <osThreadNew+0x48>
        name = attr->name;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d008      	beq.n	80056f6 <osThreadNew+0x6e>
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	2b38      	cmp	r3, #56	; 0x38
 80056e8:	d805      	bhi.n	80056f6 <osThreadNew+0x6e>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <osThreadNew+0x72>
        return (NULL);
 80056f6:	2300      	movs	r3, #0
 80056f8:	e054      	b.n	80057a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	089b      	lsrs	r3, r3, #2
 8005708:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00e      	beq.n	8005730 <osThreadNew+0xa8>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	2bbb      	cmp	r3, #187	; 0xbb
 8005718:	d90a      	bls.n	8005730 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800571e:	2b00      	cmp	r3, #0
 8005720:	d006      	beq.n	8005730 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d002      	beq.n	8005730 <osThreadNew+0xa8>
        mem = 1;
 800572a:	2301      	movs	r3, #1
 800572c:	61bb      	str	r3, [r7, #24]
 800572e:	e010      	b.n	8005752 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10c      	bne.n	8005752 <osThreadNew+0xca>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d108      	bne.n	8005752 <osThreadNew+0xca>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d104      	bne.n	8005752 <osThreadNew+0xca>
          mem = 0;
 8005748:	2300      	movs	r3, #0
 800574a:	61bb      	str	r3, [r7, #24]
 800574c:	e001      	b.n	8005752 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800574e:	2300      	movs	r3, #0
 8005750:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d110      	bne.n	800577a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005760:	9202      	str	r2, [sp, #8]
 8005762:	9301      	str	r3, [sp, #4]
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	6a3a      	ldr	r2, [r7, #32]
 800576c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f001 f91e 	bl	80069b0 <xTaskCreateStatic>
 8005774:	4603      	mov	r3, r0
 8005776:	613b      	str	r3, [r7, #16]
 8005778:	e013      	b.n	80057a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d110      	bne.n	80057a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	b29a      	uxth	r2, r3
 8005784:	f107 0310 	add.w	r3, r7, #16
 8005788:	9301      	str	r3, [sp, #4]
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f001 f969 	bl	8006a6a <xTaskCreate>
 8005798:	4603      	mov	r3, r0
 800579a:	2b01      	cmp	r3, #1
 800579c:	d001      	beq.n	80057a2 <osThreadNew+0x11a>
            hTask = NULL;
 800579e:	2300      	movs	r3, #0
 80057a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80057a2:	693b      	ldr	r3, [r7, #16]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3728      	adds	r7, #40	; 0x28
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057b4:	f3ef 8305 	mrs	r3, IPSR
 80057b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80057ba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <osDelay+0x1c>
    stat = osErrorISR;
 80057c0:	f06f 0305 	mvn.w	r3, #5
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	e007      	b.n	80057d8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80057c8:	2300      	movs	r3, #0
 80057ca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d002      	beq.n	80057d8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f001 faa4 	bl	8006d20 <vTaskDelay>
    }
  }

  return (stat);
 80057d8:	68fb      	ldr	r3, [r7, #12]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b08a      	sub	sp, #40	; 0x28
 80057e6:	af02      	add	r7, sp, #8
 80057e8:	60f8      	str	r0, [r7, #12]
 80057ea:	60b9      	str	r1, [r7, #8]
 80057ec:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057f2:	f3ef 8305 	mrs	r3, IPSR
 80057f6:	613b      	str	r3, [r7, #16]
  return(result);
 80057f8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d175      	bne.n	80058ea <osSemaphoreNew+0x108>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d072      	beq.n	80058ea <osSemaphoreNew+0x108>
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	429a      	cmp	r2, r3
 800580a:	d86e      	bhi.n	80058ea <osSemaphoreNew+0x108>
    mem = -1;
 800580c:	f04f 33ff 	mov.w	r3, #4294967295
 8005810:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d015      	beq.n	8005844 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d006      	beq.n	800582e <osSemaphoreNew+0x4c>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	2b4f      	cmp	r3, #79	; 0x4f
 8005826:	d902      	bls.n	800582e <osSemaphoreNew+0x4c>
        mem = 1;
 8005828:	2301      	movs	r3, #1
 800582a:	61bb      	str	r3, [r7, #24]
 800582c:	e00c      	b.n	8005848 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d108      	bne.n	8005848 <osSemaphoreNew+0x66>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d104      	bne.n	8005848 <osSemaphoreNew+0x66>
          mem = 0;
 800583e:	2300      	movs	r3, #0
 8005840:	61bb      	str	r3, [r7, #24]
 8005842:	e001      	b.n	8005848 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005844:	2300      	movs	r3, #0
 8005846:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584e:	d04c      	beq.n	80058ea <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d128      	bne.n	80058a8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d10a      	bne.n	8005872 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	2203      	movs	r2, #3
 8005862:	9200      	str	r2, [sp, #0]
 8005864:	2200      	movs	r2, #0
 8005866:	2100      	movs	r1, #0
 8005868:	2001      	movs	r0, #1
 800586a:	f000 fa07 	bl	8005c7c <xQueueGenericCreateStatic>
 800586e:	61f8      	str	r0, [r7, #28]
 8005870:	e005      	b.n	800587e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005872:	2203      	movs	r2, #3
 8005874:	2100      	movs	r1, #0
 8005876:	2001      	movs	r0, #1
 8005878:	f000 fa78 	bl	8005d6c <xQueueGenericCreate>
 800587c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d022      	beq.n	80058ca <osSemaphoreNew+0xe8>
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d01f      	beq.n	80058ca <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800588a:	2300      	movs	r3, #0
 800588c:	2200      	movs	r2, #0
 800588e:	2100      	movs	r1, #0
 8005890:	69f8      	ldr	r0, [r7, #28]
 8005892:	f000 fb33 	bl	8005efc <xQueueGenericSend>
 8005896:	4603      	mov	r3, r0
 8005898:	2b01      	cmp	r3, #1
 800589a:	d016      	beq.n	80058ca <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800589c:	69f8      	ldr	r0, [r7, #28]
 800589e:	f000 feb3 	bl	8006608 <vQueueDelete>
            hSemaphore = NULL;
 80058a2:	2300      	movs	r3, #0
 80058a4:	61fb      	str	r3, [r7, #28]
 80058a6:	e010      	b.n	80058ca <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d108      	bne.n	80058c0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	461a      	mov	r2, r3
 80058b4:	68b9      	ldr	r1, [r7, #8]
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 fab5 	bl	8005e26 <xQueueCreateCountingSemaphoreStatic>
 80058bc:	61f8      	str	r0, [r7, #28]
 80058be:	e004      	b.n	80058ca <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80058c0:	68b9      	ldr	r1, [r7, #8]
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 fae6 	bl	8005e94 <xQueueCreateCountingSemaphore>
 80058c8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00c      	beq.n	80058ea <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <osSemaphoreNew+0xfc>
          name = attr->name;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	617b      	str	r3, [r7, #20]
 80058dc:	e001      	b.n	80058e2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80058de:	2300      	movs	r3, #0
 80058e0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80058e2:	6979      	ldr	r1, [r7, #20]
 80058e4:	69f8      	ldr	r0, [r7, #28]
 80058e6:	f000 ffdb 	bl	80068a0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80058ea:	69fb      	ldr	r3, [r7, #28]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3720      	adds	r7, #32
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b08a      	sub	sp, #40	; 0x28
 80058f8:	af02      	add	r7, sp, #8
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005900:	2300      	movs	r3, #0
 8005902:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005904:	f3ef 8305 	mrs	r3, IPSR
 8005908:	613b      	str	r3, [r7, #16]
  return(result);
 800590a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800590c:	2b00      	cmp	r3, #0
 800590e:	d15f      	bne.n	80059d0 <osMessageQueueNew+0xdc>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d05c      	beq.n	80059d0 <osMessageQueueNew+0xdc>
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d059      	beq.n	80059d0 <osMessageQueueNew+0xdc>
    mem = -1;
 800591c:	f04f 33ff 	mov.w	r3, #4294967295
 8005920:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d029      	beq.n	800597c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d012      	beq.n	8005956 <osMessageQueueNew+0x62>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	2b4f      	cmp	r3, #79	; 0x4f
 8005936:	d90e      	bls.n	8005956 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	695a      	ldr	r2, [r3, #20]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	68b9      	ldr	r1, [r7, #8]
 8005948:	fb01 f303 	mul.w	r3, r1, r3
 800594c:	429a      	cmp	r2, r3
 800594e:	d302      	bcc.n	8005956 <osMessageQueueNew+0x62>
        mem = 1;
 8005950:	2301      	movs	r3, #1
 8005952:	61bb      	str	r3, [r7, #24]
 8005954:	e014      	b.n	8005980 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d110      	bne.n	8005980 <osMessageQueueNew+0x8c>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10c      	bne.n	8005980 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800596a:	2b00      	cmp	r3, #0
 800596c:	d108      	bne.n	8005980 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d104      	bne.n	8005980 <osMessageQueueNew+0x8c>
          mem = 0;
 8005976:	2300      	movs	r3, #0
 8005978:	61bb      	str	r3, [r7, #24]
 800597a:	e001      	b.n	8005980 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800597c:	2300      	movs	r3, #0
 800597e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d10b      	bne.n	800599e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691a      	ldr	r2, [r3, #16]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	2100      	movs	r1, #0
 8005990:	9100      	str	r1, [sp, #0]
 8005992:	68b9      	ldr	r1, [r7, #8]
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 f971 	bl	8005c7c <xQueueGenericCreateStatic>
 800599a:	61f8      	str	r0, [r7, #28]
 800599c:	e008      	b.n	80059b0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d105      	bne.n	80059b0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80059a4:	2200      	movs	r2, #0
 80059a6:	68b9      	ldr	r1, [r7, #8]
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 f9df 	bl	8005d6c <xQueueGenericCreate>
 80059ae:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00c      	beq.n	80059d0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	617b      	str	r3, [r7, #20]
 80059c2:	e001      	b.n	80059c8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80059c4:	2300      	movs	r3, #0
 80059c6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80059c8:	6979      	ldr	r1, [r7, #20]
 80059ca:	69f8      	ldr	r0, [r7, #28]
 80059cc:	f000 ff68 	bl	80068a0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80059d0:	69fb      	ldr	r3, [r7, #28]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3720      	adds	r7, #32
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
	...

080059dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4a07      	ldr	r2, [pc, #28]	; (8005a08 <vApplicationGetIdleTaskMemory+0x2c>)
 80059ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	4a06      	ldr	r2, [pc, #24]	; (8005a0c <vApplicationGetIdleTaskMemory+0x30>)
 80059f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2280      	movs	r2, #128	; 0x80
 80059f8:	601a      	str	r2, [r3, #0]
}
 80059fa:	bf00      	nop
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	2000075c 	.word	0x2000075c
 8005a0c:	20000818 	.word	0x20000818

08005a10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4a07      	ldr	r2, [pc, #28]	; (8005a3c <vApplicationGetTimerTaskMemory+0x2c>)
 8005a20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	4a06      	ldr	r2, [pc, #24]	; (8005a40 <vApplicationGetTimerTaskMemory+0x30>)
 8005a26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a2e:	601a      	str	r2, [r3, #0]
}
 8005a30:	bf00      	nop
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	20000a18 	.word	0x20000a18
 8005a40:	20000ad4 	.word	0x20000ad4

08005a44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f103 0208 	add.w	r2, r3, #8
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f103 0208 	add.w	r2, r3, #8
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f103 0208 	add.w	r2, r3, #8
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a92:	bf00      	nop
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b085      	sub	sp, #20
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
 8005aa6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	1c5a      	adds	r2, r3, #1
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	601a      	str	r2, [r3, #0]
}
 8005ada:	bf00      	nop
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b085      	sub	sp, #20
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afc:	d103      	bne.n	8005b06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	60fb      	str	r3, [r7, #12]
 8005b04:	e00c      	b.n	8005b20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	3308      	adds	r3, #8
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	e002      	b.n	8005b14 <vListInsert+0x2e>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d2f6      	bcs.n	8005b0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	601a      	str	r2, [r3, #0]
}
 8005b4c:	bf00      	nop
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6892      	ldr	r2, [r2, #8]
 8005b6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	6852      	ldr	r2, [r2, #4]
 8005b78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d103      	bne.n	8005b8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	1e5a      	subs	r2, r3, #1
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10a      	bne.n	8005bd6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005bd2:	bf00      	nop
 8005bd4:	e7fe      	b.n	8005bd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005bd6:	f002 fb8d 	bl	80082f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be2:	68f9      	ldr	r1, [r7, #12]
 8005be4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005be6:	fb01 f303 	mul.w	r3, r1, r3
 8005bea:	441a      	add	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c06:	3b01      	subs	r3, #1
 8005c08:	68f9      	ldr	r1, [r7, #12]
 8005c0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c0c:	fb01 f303 	mul.w	r3, r1, r3
 8005c10:	441a      	add	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	22ff      	movs	r2, #255	; 0xff
 8005c1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	22ff      	movs	r2, #255	; 0xff
 8005c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d114      	bne.n	8005c56 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d01a      	beq.n	8005c6a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	3310      	adds	r3, #16
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f001 fb3f 	bl	80072bc <xTaskRemoveFromEventList>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d012      	beq.n	8005c6a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c44:	4b0c      	ldr	r3, [pc, #48]	; (8005c78 <xQueueGenericReset+0xcc>)
 8005c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	f3bf 8f6f 	isb	sy
 8005c54:	e009      	b.n	8005c6a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	3310      	adds	r3, #16
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7ff fef2 	bl	8005a44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	3324      	adds	r3, #36	; 0x24
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff feed 	bl	8005a44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005c6a:	f002 fb73 	bl	8008354 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005c6e:	2301      	movs	r3, #1
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	e000ed04 	.word	0xe000ed04

08005c7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b08e      	sub	sp, #56	; 0x38
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10a      	bne.n	8005ca6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ca2:	bf00      	nop
 8005ca4:	e7fe      	b.n	8005ca4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10a      	bne.n	8005cc2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cbe:	bf00      	nop
 8005cc0:	e7fe      	b.n	8005cc0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <xQueueGenericCreateStatic+0x52>
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <xQueueGenericCreateStatic+0x56>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e000      	b.n	8005cd4 <xQueueGenericCreateStatic+0x58>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10a      	bne.n	8005cee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	623b      	str	r3, [r7, #32]
}
 8005cea:	bf00      	nop
 8005cec:	e7fe      	b.n	8005cec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d102      	bne.n	8005cfa <xQueueGenericCreateStatic+0x7e>
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <xQueueGenericCreateStatic+0x82>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e000      	b.n	8005d00 <xQueueGenericCreateStatic+0x84>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10a      	bne.n	8005d1a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	61fb      	str	r3, [r7, #28]
}
 8005d16:	bf00      	nop
 8005d18:	e7fe      	b.n	8005d18 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d1a:	2350      	movs	r3, #80	; 0x50
 8005d1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2b50      	cmp	r3, #80	; 0x50
 8005d22:	d00a      	beq.n	8005d3a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d28:	f383 8811 	msr	BASEPRI, r3
 8005d2c:	f3bf 8f6f 	isb	sy
 8005d30:	f3bf 8f4f 	dsb	sy
 8005d34:	61bb      	str	r3, [r7, #24]
}
 8005d36:	bf00      	nop
 8005d38:	e7fe      	b.n	8005d38 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005d3a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00d      	beq.n	8005d62 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d4e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	4613      	mov	r3, r2
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	68b9      	ldr	r1, [r7, #8]
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 f83f 	bl	8005de0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3730      	adds	r7, #48	; 0x30
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b08a      	sub	sp, #40	; 0x28
 8005d70:	af02      	add	r7, sp, #8
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	4613      	mov	r3, r2
 8005d78:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10a      	bne.n	8005d96 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	613b      	str	r3, [r7, #16]
}
 8005d92:	bf00      	nop
 8005d94:	e7fe      	b.n	8005d94 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	fb02 f303 	mul.w	r3, r2, r3
 8005d9e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	3350      	adds	r3, #80	; 0x50
 8005da4:	4618      	mov	r0, r3
 8005da6:	f002 fbc7 	bl	8008538 <pvPortMalloc>
 8005daa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d011      	beq.n	8005dd6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	3350      	adds	r3, #80	; 0x50
 8005dba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005dc4:	79fa      	ldrb	r2, [r7, #7]
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	68b9      	ldr	r1, [r7, #8]
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 f805 	bl	8005de0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005dd6:	69bb      	ldr	r3, [r7, #24]
	}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3720      	adds	r7, #32
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d103      	bne.n	8005dfc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	e002      	b.n	8005e02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e0e:	2101      	movs	r1, #1
 8005e10:	69b8      	ldr	r0, [r7, #24]
 8005e12:	f7ff fecb 	bl	8005bac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	78fa      	ldrb	r2, [r7, #3]
 8005e1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e1e:	bf00      	nop
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b08a      	sub	sp, #40	; 0x28
 8005e2a:	af02      	add	r7, sp, #8
 8005e2c:	60f8      	str	r0, [r7, #12]
 8005e2e:	60b9      	str	r1, [r7, #8]
 8005e30:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10a      	bne.n	8005e4e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3c:	f383 8811 	msr	BASEPRI, r3
 8005e40:	f3bf 8f6f 	isb	sy
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	61bb      	str	r3, [r7, #24]
}
 8005e4a:	bf00      	nop
 8005e4c:	e7fe      	b.n	8005e4c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d90a      	bls.n	8005e6c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	617b      	str	r3, [r7, #20]
}
 8005e68:	bf00      	nop
 8005e6a:	e7fe      	b.n	8005e6a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	2100      	movs	r1, #0
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f7ff ff00 	bl	8005c7c <xQueueGenericCreateStatic>
 8005e7c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d002      	beq.n	8005e8a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005e8a:	69fb      	ldr	r3, [r7, #28]
	}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3720      	adds	r7, #32
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10a      	bne.n	8005eba <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	613b      	str	r3, [r7, #16]
}
 8005eb6:	bf00      	nop
 8005eb8:	e7fe      	b.n	8005eb8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d90a      	bls.n	8005ed8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	60fb      	str	r3, [r7, #12]
}
 8005ed4:	bf00      	nop
 8005ed6:	e7fe      	b.n	8005ed6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005ed8:	2202      	movs	r2, #2
 8005eda:	2100      	movs	r1, #0
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7ff ff45 	bl	8005d6c <xQueueGenericCreate>
 8005ee2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005ef0:	697b      	ldr	r3, [r7, #20]
	}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3718      	adds	r7, #24
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08e      	sub	sp, #56	; 0x38
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10a      	bne.n	8005f2e <xQueueGenericSend+0x32>
	__asm volatile
 8005f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f2a:	bf00      	nop
 8005f2c:	e7fe      	b.n	8005f2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d103      	bne.n	8005f3c <xQueueGenericSend+0x40>
 8005f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <xQueueGenericSend+0x44>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e000      	b.n	8005f42 <xQueueGenericSend+0x46>
 8005f40:	2300      	movs	r3, #0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10a      	bne.n	8005f5c <xQueueGenericSend+0x60>
	__asm volatile
 8005f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f58:	bf00      	nop
 8005f5a:	e7fe      	b.n	8005f5a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d103      	bne.n	8005f6a <xQueueGenericSend+0x6e>
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d101      	bne.n	8005f6e <xQueueGenericSend+0x72>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e000      	b.n	8005f70 <xQueueGenericSend+0x74>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10a      	bne.n	8005f8a <xQueueGenericSend+0x8e>
	__asm volatile
 8005f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	623b      	str	r3, [r7, #32]
}
 8005f86:	bf00      	nop
 8005f88:	e7fe      	b.n	8005f88 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f8a:	f001 fb59 	bl	8007640 <xTaskGetSchedulerState>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d102      	bne.n	8005f9a <xQueueGenericSend+0x9e>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <xQueueGenericSend+0xa2>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e000      	b.n	8005fa0 <xQueueGenericSend+0xa4>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10a      	bne.n	8005fba <xQueueGenericSend+0xbe>
	__asm volatile
 8005fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	61fb      	str	r3, [r7, #28]
}
 8005fb6:	bf00      	nop
 8005fb8:	e7fe      	b.n	8005fb8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fba:	f002 f99b 	bl	80082f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d302      	bcc.n	8005fd0 <xQueueGenericSend+0xd4>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d129      	bne.n	8006024 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fd6:	f000 fb52 	bl	800667e <prvCopyDataToQueue>
 8005fda:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d010      	beq.n	8006006 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe6:	3324      	adds	r3, #36	; 0x24
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f001 f967 	bl	80072bc <xTaskRemoveFromEventList>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d013      	beq.n	800601c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ff4:	4b3f      	ldr	r3, [pc, #252]	; (80060f4 <xQueueGenericSend+0x1f8>)
 8005ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ffa:	601a      	str	r2, [r3, #0]
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	e00a      	b.n	800601c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006008:	2b00      	cmp	r3, #0
 800600a:	d007      	beq.n	800601c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800600c:	4b39      	ldr	r3, [pc, #228]	; (80060f4 <xQueueGenericSend+0x1f8>)
 800600e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800601c:	f002 f99a 	bl	8008354 <vPortExitCritical>
				return pdPASS;
 8006020:	2301      	movs	r3, #1
 8006022:	e063      	b.n	80060ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d103      	bne.n	8006032 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800602a:	f002 f993 	bl	8008354 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800602e:	2300      	movs	r3, #0
 8006030:	e05c      	b.n	80060ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006034:	2b00      	cmp	r3, #0
 8006036:	d106      	bne.n	8006046 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006038:	f107 0314 	add.w	r3, r7, #20
 800603c:	4618      	mov	r0, r3
 800603e:	f001 f9a1 	bl	8007384 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006042:	2301      	movs	r3, #1
 8006044:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006046:	f002 f985 	bl	8008354 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800604a:	f000 ff0d 	bl	8006e68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800604e:	f002 f951 	bl	80082f4 <vPortEnterCritical>
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006054:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006058:	b25b      	sxtb	r3, r3
 800605a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605e:	d103      	bne.n	8006068 <xQueueGenericSend+0x16c>
 8006060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800606e:	b25b      	sxtb	r3, r3
 8006070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006074:	d103      	bne.n	800607e <xQueueGenericSend+0x182>
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800607e:	f002 f969 	bl	8008354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006082:	1d3a      	adds	r2, r7, #4
 8006084:	f107 0314 	add.w	r3, r7, #20
 8006088:	4611      	mov	r1, r2
 800608a:	4618      	mov	r0, r3
 800608c:	f001 f990 	bl	80073b0 <xTaskCheckForTimeOut>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d124      	bne.n	80060e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006096:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006098:	f000 fbe9 	bl	800686e <prvIsQueueFull>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d018      	beq.n	80060d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	3310      	adds	r3, #16
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	4611      	mov	r1, r2
 80060aa:	4618      	mov	r0, r3
 80060ac:	f001 f8b6 	bl	800721c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80060b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060b2:	f000 fb74 	bl	800679e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80060b6:	f000 fee5 	bl	8006e84 <xTaskResumeAll>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f47f af7c 	bne.w	8005fba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80060c2:	4b0c      	ldr	r3, [pc, #48]	; (80060f4 <xQueueGenericSend+0x1f8>)
 80060c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060c8:	601a      	str	r2, [r3, #0]
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	e772      	b.n	8005fba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80060d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060d6:	f000 fb62 	bl	800679e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060da:	f000 fed3 	bl	8006e84 <xTaskResumeAll>
 80060de:	e76c      	b.n	8005fba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80060e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060e2:	f000 fb5c 	bl	800679e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060e6:	f000 fecd 	bl	8006e84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80060ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3738      	adds	r7, #56	; 0x38
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	e000ed04 	.word	0xe000ed04

080060f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b090      	sub	sp, #64	; 0x40
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800610a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10a      	bne.n	8006126 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006122:	bf00      	nop
 8006124:	e7fe      	b.n	8006124 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d103      	bne.n	8006134 <xQueueGenericSendFromISR+0x3c>
 800612c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <xQueueGenericSendFromISR+0x40>
 8006134:	2301      	movs	r3, #1
 8006136:	e000      	b.n	800613a <xQueueGenericSendFromISR+0x42>
 8006138:	2300      	movs	r3, #0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10a      	bne.n	8006154 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006150:	bf00      	nop
 8006152:	e7fe      	b.n	8006152 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	2b02      	cmp	r3, #2
 8006158:	d103      	bne.n	8006162 <xQueueGenericSendFromISR+0x6a>
 800615a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800615e:	2b01      	cmp	r3, #1
 8006160:	d101      	bne.n	8006166 <xQueueGenericSendFromISR+0x6e>
 8006162:	2301      	movs	r3, #1
 8006164:	e000      	b.n	8006168 <xQueueGenericSendFromISR+0x70>
 8006166:	2300      	movs	r3, #0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	623b      	str	r3, [r7, #32]
}
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006182:	f002 f999 	bl	80084b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006186:	f3ef 8211 	mrs	r2, BASEPRI
 800618a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	61fa      	str	r2, [r7, #28]
 800619c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800619e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d302      	bcc.n	80061b4 <xQueueGenericSendFromISR+0xbc>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d12f      	bne.n	8006214 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80061b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	68b9      	ldr	r1, [r7, #8]
 80061c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80061ca:	f000 fa58 	bl	800667e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80061ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80061d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d6:	d112      	bne.n	80061fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d016      	beq.n	800620e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e2:	3324      	adds	r3, #36	; 0x24
 80061e4:	4618      	mov	r0, r3
 80061e6:	f001 f869 	bl	80072bc <xTaskRemoveFromEventList>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00e      	beq.n	800620e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00b      	beq.n	800620e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	e007      	b.n	800620e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006202:	3301      	adds	r3, #1
 8006204:	b2db      	uxtb	r3, r3
 8006206:	b25a      	sxtb	r2, r3
 8006208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800620e:	2301      	movs	r3, #1
 8006210:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006212:	e001      	b.n	8006218 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006214:	2300      	movs	r3, #0
 8006216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800621a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006222:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006226:	4618      	mov	r0, r3
 8006228:	3740      	adds	r7, #64	; 0x40
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
	...

08006230 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b08c      	sub	sp, #48	; 0x30
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800623c:	2300      	movs	r3, #0
 800623e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10a      	bne.n	8006260 <xQueueReceive+0x30>
	__asm volatile
 800624a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	623b      	str	r3, [r7, #32]
}
 800625c:	bf00      	nop
 800625e:	e7fe      	b.n	800625e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d103      	bne.n	800626e <xQueueReceive+0x3e>
 8006266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <xQueueReceive+0x42>
 800626e:	2301      	movs	r3, #1
 8006270:	e000      	b.n	8006274 <xQueueReceive+0x44>
 8006272:	2300      	movs	r3, #0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10a      	bne.n	800628e <xQueueReceive+0x5e>
	__asm volatile
 8006278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	61fb      	str	r3, [r7, #28]
}
 800628a:	bf00      	nop
 800628c:	e7fe      	b.n	800628c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800628e:	f001 f9d7 	bl	8007640 <xTaskGetSchedulerState>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d102      	bne.n	800629e <xQueueReceive+0x6e>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <xQueueReceive+0x72>
 800629e:	2301      	movs	r3, #1
 80062a0:	e000      	b.n	80062a4 <xQueueReceive+0x74>
 80062a2:	2300      	movs	r3, #0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10a      	bne.n	80062be <xQueueReceive+0x8e>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	61bb      	str	r3, [r7, #24]
}
 80062ba:	bf00      	nop
 80062bc:	e7fe      	b.n	80062bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062be:	f002 f819 	bl	80082f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d01f      	beq.n	800630e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062ce:	68b9      	ldr	r1, [r7, #8]
 80062d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062d2:	f000 fa3e 	bl	8006752 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	1e5a      	subs	r2, r3, #1
 80062da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00f      	beq.n	8006306 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e8:	3310      	adds	r3, #16
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 ffe6 	bl	80072bc <xTaskRemoveFromEventList>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d007      	beq.n	8006306 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062f6:	4b3d      	ldr	r3, [pc, #244]	; (80063ec <xQueueReceive+0x1bc>)
 80062f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062fc:	601a      	str	r2, [r3, #0]
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006306:	f002 f825 	bl	8008354 <vPortExitCritical>
				return pdPASS;
 800630a:	2301      	movs	r3, #1
 800630c:	e069      	b.n	80063e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d103      	bne.n	800631c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006314:	f002 f81e 	bl	8008354 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006318:	2300      	movs	r3, #0
 800631a:	e062      	b.n	80063e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800631c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631e:	2b00      	cmp	r3, #0
 8006320:	d106      	bne.n	8006330 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006322:	f107 0310 	add.w	r3, r7, #16
 8006326:	4618      	mov	r0, r3
 8006328:	f001 f82c 	bl	8007384 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800632c:	2301      	movs	r3, #1
 800632e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006330:	f002 f810 	bl	8008354 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006334:	f000 fd98 	bl	8006e68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006338:	f001 ffdc 	bl	80082f4 <vPortEnterCritical>
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006342:	b25b      	sxtb	r3, r3
 8006344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006348:	d103      	bne.n	8006352 <xQueueReceive+0x122>
 800634a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006358:	b25b      	sxtb	r3, r3
 800635a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635e:	d103      	bne.n	8006368 <xQueueReceive+0x138>
 8006360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006368:	f001 fff4 	bl	8008354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800636c:	1d3a      	adds	r2, r7, #4
 800636e:	f107 0310 	add.w	r3, r7, #16
 8006372:	4611      	mov	r1, r2
 8006374:	4618      	mov	r0, r3
 8006376:	f001 f81b 	bl	80073b0 <xTaskCheckForTimeOut>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d123      	bne.n	80063c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006382:	f000 fa5e 	bl	8006842 <prvIsQueueEmpty>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d017      	beq.n	80063bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638e:	3324      	adds	r3, #36	; 0x24
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	4611      	mov	r1, r2
 8006394:	4618      	mov	r0, r3
 8006396:	f000 ff41 	bl	800721c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800639a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800639c:	f000 f9ff 	bl	800679e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063a0:	f000 fd70 	bl	8006e84 <xTaskResumeAll>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d189      	bne.n	80062be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80063aa:	4b10      	ldr	r3, [pc, #64]	; (80063ec <xQueueReceive+0x1bc>)
 80063ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	e780      	b.n	80062be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80063bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063be:	f000 f9ee 	bl	800679e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063c2:	f000 fd5f 	bl	8006e84 <xTaskResumeAll>
 80063c6:	e77a      	b.n	80062be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80063c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063ca:	f000 f9e8 	bl	800679e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063ce:	f000 fd59 	bl	8006e84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063d4:	f000 fa35 	bl	8006842 <prvIsQueueEmpty>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f43f af6f 	beq.w	80062be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3730      	adds	r7, #48	; 0x30
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	e000ed04 	.word	0xe000ed04

080063f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b08e      	sub	sp, #56	; 0x38
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80063fa:	2300      	movs	r3, #0
 80063fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006402:	2300      	movs	r3, #0
 8006404:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	623b      	str	r3, [r7, #32]
}
 800641e:	bf00      	nop
 8006420:	e7fe      	b.n	8006420 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800642a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	61fb      	str	r3, [r7, #28]
}
 800643c:	bf00      	nop
 800643e:	e7fe      	b.n	800643e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006440:	f001 f8fe 	bl	8007640 <xTaskGetSchedulerState>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d102      	bne.n	8006450 <xQueueSemaphoreTake+0x60>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <xQueueSemaphoreTake+0x64>
 8006450:	2301      	movs	r3, #1
 8006452:	e000      	b.n	8006456 <xQueueSemaphoreTake+0x66>
 8006454:	2300      	movs	r3, #0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10a      	bne.n	8006470 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	61bb      	str	r3, [r7, #24]
}
 800646c:	bf00      	nop
 800646e:	e7fe      	b.n	800646e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006470:	f001 ff40 	bl	80082f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800647a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647c:	2b00      	cmp	r3, #0
 800647e:	d024      	beq.n	80064ca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006482:	1e5a      	subs	r2, r3, #1
 8006484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006486:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d104      	bne.n	800649a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006490:	f001 fa4c 	bl	800792c <pvTaskIncrementMutexHeldCount>
 8006494:	4602      	mov	r2, r0
 8006496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006498:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800649a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00f      	beq.n	80064c2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a4:	3310      	adds	r3, #16
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 ff08 	bl	80072bc <xTaskRemoveFromEventList>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d007      	beq.n	80064c2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80064b2:	4b54      	ldr	r3, [pc, #336]	; (8006604 <xQueueSemaphoreTake+0x214>)
 80064b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80064c2:	f001 ff47 	bl	8008354 <vPortExitCritical>
				return pdPASS;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e097      	b.n	80065fa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d111      	bne.n	80064f4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80064d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00a      	beq.n	80064ec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80064d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	617b      	str	r3, [r7, #20]
}
 80064e8:	bf00      	nop
 80064ea:	e7fe      	b.n	80064ea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80064ec:	f001 ff32 	bl	8008354 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064f0:	2300      	movs	r3, #0
 80064f2:	e082      	b.n	80065fa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d106      	bne.n	8006508 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064fa:	f107 030c 	add.w	r3, r7, #12
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 ff40 	bl	8007384 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006504:	2301      	movs	r3, #1
 8006506:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006508:	f001 ff24 	bl	8008354 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800650c:	f000 fcac 	bl	8006e68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006510:	f001 fef0 	bl	80082f4 <vPortEnterCritical>
 8006514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006516:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800651a:	b25b      	sxtb	r3, r3
 800651c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006520:	d103      	bne.n	800652a <xQueueSemaphoreTake+0x13a>
 8006522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800652a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006530:	b25b      	sxtb	r3, r3
 8006532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006536:	d103      	bne.n	8006540 <xQueueSemaphoreTake+0x150>
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006540:	f001 ff08 	bl	8008354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006544:	463a      	mov	r2, r7
 8006546:	f107 030c 	add.w	r3, r7, #12
 800654a:	4611      	mov	r1, r2
 800654c:	4618      	mov	r0, r3
 800654e:	f000 ff2f 	bl	80073b0 <xTaskCheckForTimeOut>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d132      	bne.n	80065be <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006558:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800655a:	f000 f972 	bl	8006842 <prvIsQueueEmpty>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d026      	beq.n	80065b2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d109      	bne.n	8006580 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800656c:	f001 fec2 	bl	80082f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	4618      	mov	r0, r3
 8006576:	f001 f881 	bl	800767c <xTaskPriorityInherit>
 800657a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800657c:	f001 feea 	bl	8008354 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006582:	3324      	adds	r3, #36	; 0x24
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	4611      	mov	r1, r2
 8006588:	4618      	mov	r0, r3
 800658a:	f000 fe47 	bl	800721c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800658e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006590:	f000 f905 	bl	800679e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006594:	f000 fc76 	bl	8006e84 <xTaskResumeAll>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	f47f af68 	bne.w	8006470 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80065a0:	4b18      	ldr	r3, [pc, #96]	; (8006604 <xQueueSemaphoreTake+0x214>)
 80065a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a6:	601a      	str	r2, [r3, #0]
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	e75e      	b.n	8006470 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80065b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065b4:	f000 f8f3 	bl	800679e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065b8:	f000 fc64 	bl	8006e84 <xTaskResumeAll>
 80065bc:	e758      	b.n	8006470 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80065be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065c0:	f000 f8ed 	bl	800679e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065c4:	f000 fc5e 	bl	8006e84 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065ca:	f000 f93a 	bl	8006842 <prvIsQueueEmpty>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f43f af4d 	beq.w	8006470 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00d      	beq.n	80065f8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80065dc:	f001 fe8a 	bl	80082f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80065e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065e2:	f000 f834 	bl	800664e <prvGetDisinheritPriorityAfterTimeout>
 80065e6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80065e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065ee:	4618      	mov	r0, r3
 80065f0:	f001 f91a 	bl	8007828 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80065f4:	f001 feae 	bl	8008354 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3738      	adds	r7, #56	; 0x38
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	e000ed04 	.word	0xe000ed04

08006608 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10a      	bne.n	8006630 <vQueueDelete+0x28>
	__asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	60bb      	str	r3, [r7, #8]
}
 800662c:	bf00      	nop
 800662e:	e7fe      	b.n	800662e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f000 f95f 	bl	80068f4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800663c:	2b00      	cmp	r3, #0
 800663e:	d102      	bne.n	8006646 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f002 f845 	bl	80086d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006646:	bf00      	nop
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800664e:	b480      	push	{r7}
 8006650:	b085      	sub	sp, #20
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665a:	2b00      	cmp	r3, #0
 800665c:	d006      	beq.n	800666c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006668:	60fb      	str	r3, [r7, #12]
 800666a:	e001      	b.n	8006670 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800666c:	2300      	movs	r3, #0
 800666e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006670:	68fb      	ldr	r3, [r7, #12]
	}
 8006672:	4618      	mov	r0, r3
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b086      	sub	sp, #24
 8006682:	af00      	add	r7, sp, #0
 8006684:	60f8      	str	r0, [r7, #12]
 8006686:	60b9      	str	r1, [r7, #8]
 8006688:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800668a:	2300      	movs	r3, #0
 800668c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006692:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10d      	bne.n	80066b8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d14d      	bne.n	8006740 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f001 f84f 	bl	800774c <xTaskPriorityDisinherit>
 80066ae:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	609a      	str	r2, [r3, #8]
 80066b6:	e043      	b.n	8006740 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d119      	bne.n	80066f2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6858      	ldr	r0, [r3, #4]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	461a      	mov	r2, r3
 80066c8:	68b9      	ldr	r1, [r7, #8]
 80066ca:	f002 fa4b 	bl	8008b64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	685a      	ldr	r2, [r3, #4]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d6:	441a      	add	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d32b      	bcc.n	8006740 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	605a      	str	r2, [r3, #4]
 80066f0:	e026      	b.n	8006740 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	68d8      	ldr	r0, [r3, #12]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fa:	461a      	mov	r2, r3
 80066fc:	68b9      	ldr	r1, [r7, #8]
 80066fe:	f002 fa31 	bl	8008b64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	68da      	ldr	r2, [r3, #12]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670a:	425b      	negs	r3, r3
 800670c:	441a      	add	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	68da      	ldr	r2, [r3, #12]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	429a      	cmp	r2, r3
 800671c:	d207      	bcs.n	800672e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	689a      	ldr	r2, [r3, #8]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006726:	425b      	negs	r3, r3
 8006728:	441a      	add	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2b02      	cmp	r3, #2
 8006732:	d105      	bne.n	8006740 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d002      	beq.n	8006740 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	3b01      	subs	r3, #1
 800673e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006748:	697b      	ldr	r3, [r7, #20]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b082      	sub	sp, #8
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006760:	2b00      	cmp	r3, #0
 8006762:	d018      	beq.n	8006796 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68da      	ldr	r2, [r3, #12]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676c:	441a      	add	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	429a      	cmp	r2, r3
 800677c:	d303      	bcc.n	8006786 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68d9      	ldr	r1, [r3, #12]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678e:	461a      	mov	r2, r3
 8006790:	6838      	ldr	r0, [r7, #0]
 8006792:	f002 f9e7 	bl	8008b64 <memcpy>
	}
}
 8006796:	bf00      	nop
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b084      	sub	sp, #16
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067a6:	f001 fda5 	bl	80082f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067b0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067b2:	e011      	b.n	80067d8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d012      	beq.n	80067e2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	3324      	adds	r3, #36	; 0x24
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 fd7b 	bl	80072bc <xTaskRemoveFromEventList>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067cc:	f000 fe52 	bl	8007474 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
 80067d2:	3b01      	subs	r3, #1
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	dce9      	bgt.n	80067b4 <prvUnlockQueue+0x16>
 80067e0:	e000      	b.n	80067e4 <prvUnlockQueue+0x46>
					break;
 80067e2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	22ff      	movs	r2, #255	; 0xff
 80067e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067ec:	f001 fdb2 	bl	8008354 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067f0:	f001 fd80 	bl	80082f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067fa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067fc:	e011      	b.n	8006822 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d012      	beq.n	800682c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	3310      	adds	r3, #16
 800680a:	4618      	mov	r0, r3
 800680c:	f000 fd56 	bl	80072bc <xTaskRemoveFromEventList>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006816:	f000 fe2d 	bl	8007474 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800681a:	7bbb      	ldrb	r3, [r7, #14]
 800681c:	3b01      	subs	r3, #1
 800681e:	b2db      	uxtb	r3, r3
 8006820:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006822:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006826:	2b00      	cmp	r3, #0
 8006828:	dce9      	bgt.n	80067fe <prvUnlockQueue+0x60>
 800682a:	e000      	b.n	800682e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800682c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	22ff      	movs	r2, #255	; 0xff
 8006832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006836:	f001 fd8d 	bl	8008354 <vPortExitCritical>
}
 800683a:	bf00      	nop
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b084      	sub	sp, #16
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800684a:	f001 fd53 	bl	80082f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006852:	2b00      	cmp	r3, #0
 8006854:	d102      	bne.n	800685c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006856:	2301      	movs	r3, #1
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	e001      	b.n	8006860 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800685c:	2300      	movs	r3, #0
 800685e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006860:	f001 fd78 	bl	8008354 <vPortExitCritical>

	return xReturn;
 8006864:	68fb      	ldr	r3, [r7, #12]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b084      	sub	sp, #16
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006876:	f001 fd3d 	bl	80082f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006882:	429a      	cmp	r2, r3
 8006884:	d102      	bne.n	800688c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006886:	2301      	movs	r3, #1
 8006888:	60fb      	str	r3, [r7, #12]
 800688a:	e001      	b.n	8006890 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800688c:	2300      	movs	r3, #0
 800688e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006890:	f001 fd60 	bl	8008354 <vPortExitCritical>

	return xReturn;
 8006894:	68fb      	ldr	r3, [r7, #12]
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
	...

080068a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068aa:	2300      	movs	r3, #0
 80068ac:	60fb      	str	r3, [r7, #12]
 80068ae:	e014      	b.n	80068da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80068b0:	4a0f      	ldr	r2, [pc, #60]	; (80068f0 <vQueueAddToRegistry+0x50>)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10b      	bne.n	80068d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80068bc:	490c      	ldr	r1, [pc, #48]	; (80068f0 <vQueueAddToRegistry+0x50>)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80068c6:	4a0a      	ldr	r2, [pc, #40]	; (80068f0 <vQueueAddToRegistry+0x50>)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	00db      	lsls	r3, r3, #3
 80068cc:	4413      	add	r3, r2
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80068d2:	e006      	b.n	80068e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	3301      	adds	r3, #1
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2b07      	cmp	r3, #7
 80068de:	d9e7      	bls.n	80068b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80068e0:	bf00      	nop
 80068e2:	bf00      	nop
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	20000ed4 	.word	0x20000ed4

080068f4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068fc:	2300      	movs	r3, #0
 80068fe:	60fb      	str	r3, [r7, #12]
 8006900:	e016      	b.n	8006930 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006902:	4a10      	ldr	r2, [pc, #64]	; (8006944 <vQueueUnregisterQueue+0x50>)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	4413      	add	r3, r2
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	429a      	cmp	r2, r3
 8006910:	d10b      	bne.n	800692a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006912:	4a0c      	ldr	r2, [pc, #48]	; (8006944 <vQueueUnregisterQueue+0x50>)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2100      	movs	r1, #0
 8006918:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800691c:	4a09      	ldr	r2, [pc, #36]	; (8006944 <vQueueUnregisterQueue+0x50>)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	00db      	lsls	r3, r3, #3
 8006922:	4413      	add	r3, r2
 8006924:	2200      	movs	r2, #0
 8006926:	605a      	str	r2, [r3, #4]
				break;
 8006928:	e006      	b.n	8006938 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	3301      	adds	r3, #1
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2b07      	cmp	r3, #7
 8006934:	d9e5      	bls.n	8006902 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006936:	bf00      	nop
 8006938:	bf00      	nop
 800693a:	3714      	adds	r7, #20
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	20000ed4 	.word	0x20000ed4

08006948 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006958:	f001 fccc 	bl	80082f4 <vPortEnterCritical>
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006962:	b25b      	sxtb	r3, r3
 8006964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006968:	d103      	bne.n	8006972 <vQueueWaitForMessageRestricted+0x2a>
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006978:	b25b      	sxtb	r3, r3
 800697a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800697e:	d103      	bne.n	8006988 <vQueueWaitForMessageRestricted+0x40>
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006988:	f001 fce4 	bl	8008354 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006990:	2b00      	cmp	r3, #0
 8006992:	d106      	bne.n	80069a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	3324      	adds	r3, #36	; 0x24
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	68b9      	ldr	r1, [r7, #8]
 800699c:	4618      	mov	r0, r3
 800699e:	f000 fc61 	bl	8007264 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80069a2:	6978      	ldr	r0, [r7, #20]
 80069a4:	f7ff fefb 	bl	800679e <prvUnlockQueue>
	}
 80069a8:	bf00      	nop
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08e      	sub	sp, #56	; 0x38
 80069b4:	af04      	add	r7, sp, #16
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
 80069bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80069be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10a      	bne.n	80069da <xTaskCreateStatic+0x2a>
	__asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	623b      	str	r3, [r7, #32]
}
 80069d6:	bf00      	nop
 80069d8:	e7fe      	b.n	80069d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80069da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10a      	bne.n	80069f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80069e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e4:	f383 8811 	msr	BASEPRI, r3
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	61fb      	str	r3, [r7, #28]
}
 80069f2:	bf00      	nop
 80069f4:	e7fe      	b.n	80069f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069f6:	23bc      	movs	r3, #188	; 0xbc
 80069f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	2bbc      	cmp	r3, #188	; 0xbc
 80069fe:	d00a      	beq.n	8006a16 <xTaskCreateStatic+0x66>
	__asm volatile
 8006a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a04:	f383 8811 	msr	BASEPRI, r3
 8006a08:	f3bf 8f6f 	isb	sy
 8006a0c:	f3bf 8f4f 	dsb	sy
 8006a10:	61bb      	str	r3, [r7, #24]
}
 8006a12:	bf00      	nop
 8006a14:	e7fe      	b.n	8006a14 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d01e      	beq.n	8006a5c <xTaskCreateStatic+0xac>
 8006a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d01b      	beq.n	8006a5c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	2202      	movs	r2, #2
 8006a32:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a36:	2300      	movs	r3, #0
 8006a38:	9303      	str	r3, [sp, #12]
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	9302      	str	r3, [sp, #8]
 8006a3e:	f107 0314 	add.w	r3, r7, #20
 8006a42:	9301      	str	r3, [sp, #4]
 8006a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	68b9      	ldr	r1, [r7, #8]
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 f850 	bl	8006af4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a56:	f000 f8f3 	bl	8006c40 <prvAddNewTaskToReadyList>
 8006a5a:	e001      	b.n	8006a60 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a60:	697b      	ldr	r3, [r7, #20]
	}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3728      	adds	r7, #40	; 0x28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b08c      	sub	sp, #48	; 0x30
 8006a6e:	af04      	add	r7, sp, #16
 8006a70:	60f8      	str	r0, [r7, #12]
 8006a72:	60b9      	str	r1, [r7, #8]
 8006a74:	603b      	str	r3, [r7, #0]
 8006a76:	4613      	mov	r3, r2
 8006a78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a7a:	88fb      	ldrh	r3, [r7, #6]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f001 fd5a 	bl	8008538 <pvPortMalloc>
 8006a84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00e      	beq.n	8006aaa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a8c:	20bc      	movs	r0, #188	; 0xbc
 8006a8e:	f001 fd53 	bl	8008538 <pvPortMalloc>
 8006a92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	631a      	str	r2, [r3, #48]	; 0x30
 8006aa0:	e005      	b.n	8006aae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006aa2:	6978      	ldr	r0, [r7, #20]
 8006aa4:	f001 fe14 	bl	80086d0 <vPortFree>
 8006aa8:	e001      	b.n	8006aae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d017      	beq.n	8006ae4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006abc:	88fa      	ldrh	r2, [r7, #6]
 8006abe:	2300      	movs	r3, #0
 8006ac0:	9303      	str	r3, [sp, #12]
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	9302      	str	r3, [sp, #8]
 8006ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac8:	9301      	str	r3, [sp, #4]
 8006aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	68b9      	ldr	r1, [r7, #8]
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 f80e 	bl	8006af4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ad8:	69f8      	ldr	r0, [r7, #28]
 8006ada:	f000 f8b1 	bl	8006c40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	61bb      	str	r3, [r7, #24]
 8006ae2:	e002      	b.n	8006aea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006aea:	69bb      	ldr	r3, [r7, #24]
	}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3720      	adds	r7, #32
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b088      	sub	sp, #32
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
 8006b00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	21a5      	movs	r1, #165	; 0xa5
 8006b0e:	f002 f837 	bl	8008b80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	f023 0307 	bic.w	r3, r3, #7
 8006b2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	f003 0307 	and.w	r3, r3, #7
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00a      	beq.n	8006b4c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	617b      	str	r3, [r7, #20]
}
 8006b48:	bf00      	nop
 8006b4a:	e7fe      	b.n	8006b4a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d01f      	beq.n	8006b92 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b52:	2300      	movs	r3, #0
 8006b54:	61fb      	str	r3, [r7, #28]
 8006b56:	e012      	b.n	8006b7e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b58:	68ba      	ldr	r2, [r7, #8]
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	7819      	ldrb	r1, [r3, #0]
 8006b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	4413      	add	r3, r2
 8006b66:	3334      	adds	r3, #52	; 0x34
 8006b68:	460a      	mov	r2, r1
 8006b6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	4413      	add	r3, r2
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d006      	beq.n	8006b86 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	61fb      	str	r3, [r7, #28]
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	2b0f      	cmp	r3, #15
 8006b82:	d9e9      	bls.n	8006b58 <prvInitialiseNewTask+0x64>
 8006b84:	e000      	b.n	8006b88 <prvInitialiseNewTask+0x94>
			{
				break;
 8006b86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b90:	e003      	b.n	8006b9a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9c:	2b37      	cmp	r3, #55	; 0x37
 8006b9e:	d901      	bls.n	8006ba4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ba0:	2337      	movs	r3, #55	; 0x37
 8006ba2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ba8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	3304      	adds	r3, #4
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fe ff62 	bl	8005a84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc2:	3318      	adds	r3, #24
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fe ff5d 	bl	8005a84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bde:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf2:	3354      	adds	r3, #84	; 0x54
 8006bf4:	2260      	movs	r2, #96	; 0x60
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f001 ffc1 	bl	8008b80 <memset>
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	4a0c      	ldr	r2, [pc, #48]	; (8006c34 <prvInitialiseNewTask+0x140>)
 8006c02:	659a      	str	r2, [r3, #88]	; 0x58
 8006c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c06:	4a0c      	ldr	r2, [pc, #48]	; (8006c38 <prvInitialiseNewTask+0x144>)
 8006c08:	65da      	str	r2, [r3, #92]	; 0x5c
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	4a0b      	ldr	r2, [pc, #44]	; (8006c3c <prvInitialiseNewTask+0x148>)
 8006c0e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	68f9      	ldr	r1, [r7, #12]
 8006c14:	69b8      	ldr	r0, [r7, #24]
 8006c16:	f001 fa3f 	bl	8008098 <pxPortInitialiseStack>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d002      	beq.n	8006c2c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c2a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c2c:	bf00      	nop
 8006c2e:	3720      	adds	r7, #32
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	08009e60 	.word	0x08009e60
 8006c38:	08009e80 	.word	0x08009e80
 8006c3c:	08009e40 	.word	0x08009e40

08006c40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c48:	f001 fb54 	bl	80082f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c4c:	4b2d      	ldr	r3, [pc, #180]	; (8006d04 <prvAddNewTaskToReadyList+0xc4>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3301      	adds	r3, #1
 8006c52:	4a2c      	ldr	r2, [pc, #176]	; (8006d04 <prvAddNewTaskToReadyList+0xc4>)
 8006c54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c56:	4b2c      	ldr	r3, [pc, #176]	; (8006d08 <prvAddNewTaskToReadyList+0xc8>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d109      	bne.n	8006c72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c5e:	4a2a      	ldr	r2, [pc, #168]	; (8006d08 <prvAddNewTaskToReadyList+0xc8>)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c64:	4b27      	ldr	r3, [pc, #156]	; (8006d04 <prvAddNewTaskToReadyList+0xc4>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d110      	bne.n	8006c8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c6c:	f000 fc26 	bl	80074bc <prvInitialiseTaskLists>
 8006c70:	e00d      	b.n	8006c8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c72:	4b26      	ldr	r3, [pc, #152]	; (8006d0c <prvAddNewTaskToReadyList+0xcc>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d109      	bne.n	8006c8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c7a:	4b23      	ldr	r3, [pc, #140]	; (8006d08 <prvAddNewTaskToReadyList+0xc8>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d802      	bhi.n	8006c8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c88:	4a1f      	ldr	r2, [pc, #124]	; (8006d08 <prvAddNewTaskToReadyList+0xc8>)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c8e:	4b20      	ldr	r3, [pc, #128]	; (8006d10 <prvAddNewTaskToReadyList+0xd0>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3301      	adds	r3, #1
 8006c94:	4a1e      	ldr	r2, [pc, #120]	; (8006d10 <prvAddNewTaskToReadyList+0xd0>)
 8006c96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c98:	4b1d      	ldr	r3, [pc, #116]	; (8006d10 <prvAddNewTaskToReadyList+0xd0>)
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca4:	4b1b      	ldr	r3, [pc, #108]	; (8006d14 <prvAddNewTaskToReadyList+0xd4>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d903      	bls.n	8006cb4 <prvAddNewTaskToReadyList+0x74>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb0:	4a18      	ldr	r2, [pc, #96]	; (8006d14 <prvAddNewTaskToReadyList+0xd4>)
 8006cb2:	6013      	str	r3, [r2, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb8:	4613      	mov	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4a15      	ldr	r2, [pc, #84]	; (8006d18 <prvAddNewTaskToReadyList+0xd8>)
 8006cc2:	441a      	add	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	4619      	mov	r1, r3
 8006cca:	4610      	mov	r0, r2
 8006ccc:	f7fe fee7 	bl	8005a9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006cd0:	f001 fb40 	bl	8008354 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006cd4:	4b0d      	ldr	r3, [pc, #52]	; (8006d0c <prvAddNewTaskToReadyList+0xcc>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00e      	beq.n	8006cfa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006cdc:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <prvAddNewTaskToReadyList+0xc8>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d207      	bcs.n	8006cfa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cea:	4b0c      	ldr	r3, [pc, #48]	; (8006d1c <prvAddNewTaskToReadyList+0xdc>)
 8006cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cf0:	601a      	str	r2, [r3, #0]
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cfa:	bf00      	nop
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	200013e8 	.word	0x200013e8
 8006d08:	20000f14 	.word	0x20000f14
 8006d0c:	200013f4 	.word	0x200013f4
 8006d10:	20001404 	.word	0x20001404
 8006d14:	200013f0 	.word	0x200013f0
 8006d18:	20000f18 	.word	0x20000f18
 8006d1c:	e000ed04 	.word	0xe000ed04

08006d20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d017      	beq.n	8006d62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d32:	4b13      	ldr	r3, [pc, #76]	; (8006d80 <vTaskDelay+0x60>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00a      	beq.n	8006d50 <vTaskDelay+0x30>
	__asm volatile
 8006d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	60bb      	str	r3, [r7, #8]
}
 8006d4c:	bf00      	nop
 8006d4e:	e7fe      	b.n	8006d4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d50:	f000 f88a 	bl	8006e68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d54:	2100      	movs	r1, #0
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fdfc 	bl	8007954 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d5c:	f000 f892 	bl	8006e84 <xTaskResumeAll>
 8006d60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d107      	bne.n	8006d78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006d68:	4b06      	ldr	r3, [pc, #24]	; (8006d84 <vTaskDelay+0x64>)
 8006d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d78:	bf00      	nop
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	20001410 	.word	0x20001410
 8006d84:	e000ed04 	.word	0xe000ed04

08006d88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b08a      	sub	sp, #40	; 0x28
 8006d8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d92:	2300      	movs	r3, #0
 8006d94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d96:	463a      	mov	r2, r7
 8006d98:	1d39      	adds	r1, r7, #4
 8006d9a:	f107 0308 	add.w	r3, r7, #8
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fe fe1c 	bl	80059dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006da4:	6839      	ldr	r1, [r7, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	9202      	str	r2, [sp, #8]
 8006dac:	9301      	str	r3, [sp, #4]
 8006dae:	2300      	movs	r3, #0
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	2300      	movs	r3, #0
 8006db4:	460a      	mov	r2, r1
 8006db6:	4924      	ldr	r1, [pc, #144]	; (8006e48 <vTaskStartScheduler+0xc0>)
 8006db8:	4824      	ldr	r0, [pc, #144]	; (8006e4c <vTaskStartScheduler+0xc4>)
 8006dba:	f7ff fdf9 	bl	80069b0 <xTaskCreateStatic>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	4a23      	ldr	r2, [pc, #140]	; (8006e50 <vTaskStartScheduler+0xc8>)
 8006dc2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006dc4:	4b22      	ldr	r3, [pc, #136]	; (8006e50 <vTaskStartScheduler+0xc8>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d002      	beq.n	8006dd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	617b      	str	r3, [r7, #20]
 8006dd0:	e001      	b.n	8006dd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d102      	bne.n	8006de2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ddc:	f000 fe0e 	bl	80079fc <xTimerCreateTimerTask>
 8006de0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d11b      	bne.n	8006e20 <vTaskStartScheduler+0x98>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	613b      	str	r3, [r7, #16]
}
 8006dfa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006dfc:	4b15      	ldr	r3, [pc, #84]	; (8006e54 <vTaskStartScheduler+0xcc>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3354      	adds	r3, #84	; 0x54
 8006e02:	4a15      	ldr	r2, [pc, #84]	; (8006e58 <vTaskStartScheduler+0xd0>)
 8006e04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e06:	4b15      	ldr	r3, [pc, #84]	; (8006e5c <vTaskStartScheduler+0xd4>)
 8006e08:	f04f 32ff 	mov.w	r2, #4294967295
 8006e0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e0e:	4b14      	ldr	r3, [pc, #80]	; (8006e60 <vTaskStartScheduler+0xd8>)
 8006e10:	2201      	movs	r2, #1
 8006e12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e14:	4b13      	ldr	r3, [pc, #76]	; (8006e64 <vTaskStartScheduler+0xdc>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e1a:	f001 f9c9 	bl	80081b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e1e:	e00e      	b.n	8006e3e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e26:	d10a      	bne.n	8006e3e <vTaskStartScheduler+0xb6>
	__asm volatile
 8006e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2c:	f383 8811 	msr	BASEPRI, r3
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	60fb      	str	r3, [r7, #12]
}
 8006e3a:	bf00      	nop
 8006e3c:	e7fe      	b.n	8006e3c <vTaskStartScheduler+0xb4>
}
 8006e3e:	bf00      	nop
 8006e40:	3718      	adds	r7, #24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	08009d94 	.word	0x08009d94
 8006e4c:	0800748d 	.word	0x0800748d
 8006e50:	2000140c 	.word	0x2000140c
 8006e54:	20000f14 	.word	0x20000f14
 8006e58:	20000010 	.word	0x20000010
 8006e5c:	20001408 	.word	0x20001408
 8006e60:	200013f4 	.word	0x200013f4
 8006e64:	200013ec 	.word	0x200013ec

08006e68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e68:	b480      	push	{r7}
 8006e6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e6c:	4b04      	ldr	r3, [pc, #16]	; (8006e80 <vTaskSuspendAll+0x18>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3301      	adds	r3, #1
 8006e72:	4a03      	ldr	r2, [pc, #12]	; (8006e80 <vTaskSuspendAll+0x18>)
 8006e74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e76:	bf00      	nop
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	20001410 	.word	0x20001410

08006e84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e92:	4b42      	ldr	r3, [pc, #264]	; (8006f9c <xTaskResumeAll+0x118>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10a      	bne.n	8006eb0 <xTaskResumeAll+0x2c>
	__asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	603b      	str	r3, [r7, #0]
}
 8006eac:	bf00      	nop
 8006eae:	e7fe      	b.n	8006eae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006eb0:	f001 fa20 	bl	80082f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006eb4:	4b39      	ldr	r3, [pc, #228]	; (8006f9c <xTaskResumeAll+0x118>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	4a38      	ldr	r2, [pc, #224]	; (8006f9c <xTaskResumeAll+0x118>)
 8006ebc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ebe:	4b37      	ldr	r3, [pc, #220]	; (8006f9c <xTaskResumeAll+0x118>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d162      	bne.n	8006f8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ec6:	4b36      	ldr	r3, [pc, #216]	; (8006fa0 <xTaskResumeAll+0x11c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d05e      	beq.n	8006f8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ece:	e02f      	b.n	8006f30 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ed0:	4b34      	ldr	r3, [pc, #208]	; (8006fa4 <xTaskResumeAll+0x120>)
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	3318      	adds	r3, #24
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7fe fe3b 	bl	8005b58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	3304      	adds	r3, #4
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fe fe36 	bl	8005b58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef0:	4b2d      	ldr	r3, [pc, #180]	; (8006fa8 <xTaskResumeAll+0x124>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d903      	bls.n	8006f00 <xTaskResumeAll+0x7c>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efc:	4a2a      	ldr	r2, [pc, #168]	; (8006fa8 <xTaskResumeAll+0x124>)
 8006efe:	6013      	str	r3, [r2, #0]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f04:	4613      	mov	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4413      	add	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4a27      	ldr	r2, [pc, #156]	; (8006fac <xTaskResumeAll+0x128>)
 8006f0e:	441a      	add	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3304      	adds	r3, #4
 8006f14:	4619      	mov	r1, r3
 8006f16:	4610      	mov	r0, r2
 8006f18:	f7fe fdc1 	bl	8005a9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f20:	4b23      	ldr	r3, [pc, #140]	; (8006fb0 <xTaskResumeAll+0x12c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d302      	bcc.n	8006f30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006f2a:	4b22      	ldr	r3, [pc, #136]	; (8006fb4 <xTaskResumeAll+0x130>)
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f30:	4b1c      	ldr	r3, [pc, #112]	; (8006fa4 <xTaskResumeAll+0x120>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1cb      	bne.n	8006ed0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f3e:	f000 fb5f 	bl	8007600 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f42:	4b1d      	ldr	r3, [pc, #116]	; (8006fb8 <xTaskResumeAll+0x134>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d010      	beq.n	8006f70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f4e:	f000 f847 	bl	8006fe0 <xTaskIncrementTick>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f58:	4b16      	ldr	r3, [pc, #88]	; (8006fb4 <xTaskResumeAll+0x130>)
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	3b01      	subs	r3, #1
 8006f62:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1f1      	bne.n	8006f4e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006f6a:	4b13      	ldr	r3, [pc, #76]	; (8006fb8 <xTaskResumeAll+0x134>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f70:	4b10      	ldr	r3, [pc, #64]	; (8006fb4 <xTaskResumeAll+0x130>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d009      	beq.n	8006f8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f7c:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <xTaskResumeAll+0x138>)
 8006f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f82:	601a      	str	r2, [r3, #0]
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f8c:	f001 f9e2 	bl	8008354 <vPortExitCritical>

	return xAlreadyYielded;
 8006f90:	68bb      	ldr	r3, [r7, #8]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20001410 	.word	0x20001410
 8006fa0:	200013e8 	.word	0x200013e8
 8006fa4:	200013a8 	.word	0x200013a8
 8006fa8:	200013f0 	.word	0x200013f0
 8006fac:	20000f18 	.word	0x20000f18
 8006fb0:	20000f14 	.word	0x20000f14
 8006fb4:	200013fc 	.word	0x200013fc
 8006fb8:	200013f8 	.word	0x200013f8
 8006fbc:	e000ed04 	.word	0xe000ed04

08006fc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006fc6:	4b05      	ldr	r3, [pc, #20]	; (8006fdc <xTaskGetTickCount+0x1c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006fcc:	687b      	ldr	r3, [r7, #4]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	200013ec 	.word	0x200013ec

08006fe0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fea:	4b4f      	ldr	r3, [pc, #316]	; (8007128 <xTaskIncrementTick+0x148>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f040 808f 	bne.w	8007112 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ff4:	4b4d      	ldr	r3, [pc, #308]	; (800712c <xTaskIncrementTick+0x14c>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ffc:	4a4b      	ldr	r2, [pc, #300]	; (800712c <xTaskIncrementTick+0x14c>)
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d120      	bne.n	800704a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007008:	4b49      	ldr	r3, [pc, #292]	; (8007130 <xTaskIncrementTick+0x150>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00a      	beq.n	8007028 <xTaskIncrementTick+0x48>
	__asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	603b      	str	r3, [r7, #0]
}
 8007024:	bf00      	nop
 8007026:	e7fe      	b.n	8007026 <xTaskIncrementTick+0x46>
 8007028:	4b41      	ldr	r3, [pc, #260]	; (8007130 <xTaskIncrementTick+0x150>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	4b41      	ldr	r3, [pc, #260]	; (8007134 <xTaskIncrementTick+0x154>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a3f      	ldr	r2, [pc, #252]	; (8007130 <xTaskIncrementTick+0x150>)
 8007034:	6013      	str	r3, [r2, #0]
 8007036:	4a3f      	ldr	r2, [pc, #252]	; (8007134 <xTaskIncrementTick+0x154>)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6013      	str	r3, [r2, #0]
 800703c:	4b3e      	ldr	r3, [pc, #248]	; (8007138 <xTaskIncrementTick+0x158>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	3301      	adds	r3, #1
 8007042:	4a3d      	ldr	r2, [pc, #244]	; (8007138 <xTaskIncrementTick+0x158>)
 8007044:	6013      	str	r3, [r2, #0]
 8007046:	f000 fadb 	bl	8007600 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800704a:	4b3c      	ldr	r3, [pc, #240]	; (800713c <xTaskIncrementTick+0x15c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	429a      	cmp	r2, r3
 8007052:	d349      	bcc.n	80070e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007054:	4b36      	ldr	r3, [pc, #216]	; (8007130 <xTaskIncrementTick+0x150>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d104      	bne.n	8007068 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800705e:	4b37      	ldr	r3, [pc, #220]	; (800713c <xTaskIncrementTick+0x15c>)
 8007060:	f04f 32ff 	mov.w	r2, #4294967295
 8007064:	601a      	str	r2, [r3, #0]
					break;
 8007066:	e03f      	b.n	80070e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007068:	4b31      	ldr	r3, [pc, #196]	; (8007130 <xTaskIncrementTick+0x150>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	429a      	cmp	r2, r3
 800707e:	d203      	bcs.n	8007088 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007080:	4a2e      	ldr	r2, [pc, #184]	; (800713c <xTaskIncrementTick+0x15c>)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007086:	e02f      	b.n	80070e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	3304      	adds	r3, #4
 800708c:	4618      	mov	r0, r3
 800708e:	f7fe fd63 	bl	8005b58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007096:	2b00      	cmp	r3, #0
 8007098:	d004      	beq.n	80070a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	3318      	adds	r3, #24
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fe fd5a 	bl	8005b58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a8:	4b25      	ldr	r3, [pc, #148]	; (8007140 <xTaskIncrementTick+0x160>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d903      	bls.n	80070b8 <xTaskIncrementTick+0xd8>
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b4:	4a22      	ldr	r2, [pc, #136]	; (8007140 <xTaskIncrementTick+0x160>)
 80070b6:	6013      	str	r3, [r2, #0]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070bc:	4613      	mov	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4a1f      	ldr	r2, [pc, #124]	; (8007144 <xTaskIncrementTick+0x164>)
 80070c6:	441a      	add	r2, r3
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	3304      	adds	r3, #4
 80070cc:	4619      	mov	r1, r3
 80070ce:	4610      	mov	r0, r2
 80070d0:	f7fe fce5 	bl	8005a9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d8:	4b1b      	ldr	r3, [pc, #108]	; (8007148 <xTaskIncrementTick+0x168>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070de:	429a      	cmp	r2, r3
 80070e0:	d3b8      	bcc.n	8007054 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80070e2:	2301      	movs	r3, #1
 80070e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070e6:	e7b5      	b.n	8007054 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070e8:	4b17      	ldr	r3, [pc, #92]	; (8007148 <xTaskIncrementTick+0x168>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ee:	4915      	ldr	r1, [pc, #84]	; (8007144 <xTaskIncrementTick+0x164>)
 80070f0:	4613      	mov	r3, r2
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	4413      	add	r3, r2
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	440b      	add	r3, r1
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d901      	bls.n	8007104 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007100:	2301      	movs	r3, #1
 8007102:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007104:	4b11      	ldr	r3, [pc, #68]	; (800714c <xTaskIncrementTick+0x16c>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d007      	beq.n	800711c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800710c:	2301      	movs	r3, #1
 800710e:	617b      	str	r3, [r7, #20]
 8007110:	e004      	b.n	800711c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007112:	4b0f      	ldr	r3, [pc, #60]	; (8007150 <xTaskIncrementTick+0x170>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3301      	adds	r3, #1
 8007118:	4a0d      	ldr	r2, [pc, #52]	; (8007150 <xTaskIncrementTick+0x170>)
 800711a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800711c:	697b      	ldr	r3, [r7, #20]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3718      	adds	r7, #24
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20001410 	.word	0x20001410
 800712c:	200013ec 	.word	0x200013ec
 8007130:	200013a0 	.word	0x200013a0
 8007134:	200013a4 	.word	0x200013a4
 8007138:	20001400 	.word	0x20001400
 800713c:	20001408 	.word	0x20001408
 8007140:	200013f0 	.word	0x200013f0
 8007144:	20000f18 	.word	0x20000f18
 8007148:	20000f14 	.word	0x20000f14
 800714c:	200013fc 	.word	0x200013fc
 8007150:	200013f8 	.word	0x200013f8

08007154 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800715a:	4b2a      	ldr	r3, [pc, #168]	; (8007204 <vTaskSwitchContext+0xb0>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d003      	beq.n	800716a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007162:	4b29      	ldr	r3, [pc, #164]	; (8007208 <vTaskSwitchContext+0xb4>)
 8007164:	2201      	movs	r2, #1
 8007166:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007168:	e046      	b.n	80071f8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800716a:	4b27      	ldr	r3, [pc, #156]	; (8007208 <vTaskSwitchContext+0xb4>)
 800716c:	2200      	movs	r2, #0
 800716e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007170:	4b26      	ldr	r3, [pc, #152]	; (800720c <vTaskSwitchContext+0xb8>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	60fb      	str	r3, [r7, #12]
 8007176:	e010      	b.n	800719a <vTaskSwitchContext+0x46>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10a      	bne.n	8007194 <vTaskSwitchContext+0x40>
	__asm volatile
 800717e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007182:	f383 8811 	msr	BASEPRI, r3
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	f3bf 8f4f 	dsb	sy
 800718e:	607b      	str	r3, [r7, #4]
}
 8007190:	bf00      	nop
 8007192:	e7fe      	b.n	8007192 <vTaskSwitchContext+0x3e>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	3b01      	subs	r3, #1
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	491d      	ldr	r1, [pc, #116]	; (8007210 <vTaskSwitchContext+0xbc>)
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	4613      	mov	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	440b      	add	r3, r1
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d0e4      	beq.n	8007178 <vTaskSwitchContext+0x24>
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	4613      	mov	r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4a15      	ldr	r2, [pc, #84]	; (8007210 <vTaskSwitchContext+0xbc>)
 80071ba:	4413      	add	r3, r2
 80071bc:	60bb      	str	r3, [r7, #8]
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	605a      	str	r2, [r3, #4]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	3308      	adds	r3, #8
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d104      	bne.n	80071de <vTaskSwitchContext+0x8a>
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	605a      	str	r2, [r3, #4]
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	4a0b      	ldr	r2, [pc, #44]	; (8007214 <vTaskSwitchContext+0xc0>)
 80071e6:	6013      	str	r3, [r2, #0]
 80071e8:	4a08      	ldr	r2, [pc, #32]	; (800720c <vTaskSwitchContext+0xb8>)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80071ee:	4b09      	ldr	r3, [pc, #36]	; (8007214 <vTaskSwitchContext+0xc0>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3354      	adds	r3, #84	; 0x54
 80071f4:	4a08      	ldr	r2, [pc, #32]	; (8007218 <vTaskSwitchContext+0xc4>)
 80071f6:	6013      	str	r3, [r2, #0]
}
 80071f8:	bf00      	nop
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr
 8007204:	20001410 	.word	0x20001410
 8007208:	200013fc 	.word	0x200013fc
 800720c:	200013f0 	.word	0x200013f0
 8007210:	20000f18 	.word	0x20000f18
 8007214:	20000f14 	.word	0x20000f14
 8007218:	20000010 	.word	0x20000010

0800721c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10a      	bne.n	8007242 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800722c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007230:	f383 8811 	msr	BASEPRI, r3
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	60fb      	str	r3, [r7, #12]
}
 800723e:	bf00      	nop
 8007240:	e7fe      	b.n	8007240 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007242:	4b07      	ldr	r3, [pc, #28]	; (8007260 <vTaskPlaceOnEventList+0x44>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	3318      	adds	r3, #24
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7fe fc4b 	bl	8005ae6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007250:	2101      	movs	r1, #1
 8007252:	6838      	ldr	r0, [r7, #0]
 8007254:	f000 fb7e 	bl	8007954 <prvAddCurrentTaskToDelayedList>
}
 8007258:	bf00      	nop
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	20000f14 	.word	0x20000f14

08007264 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10a      	bne.n	800728c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727a:	f383 8811 	msr	BASEPRI, r3
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	617b      	str	r3, [r7, #20]
}
 8007288:	bf00      	nop
 800728a:	e7fe      	b.n	800728a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800728c:	4b0a      	ldr	r3, [pc, #40]	; (80072b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	3318      	adds	r3, #24
 8007292:	4619      	mov	r1, r3
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f7fe fc02 	bl	8005a9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80072a0:	f04f 33ff 	mov.w	r3, #4294967295
 80072a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072a6:	6879      	ldr	r1, [r7, #4]
 80072a8:	68b8      	ldr	r0, [r7, #8]
 80072aa:	f000 fb53 	bl	8007954 <prvAddCurrentTaskToDelayedList>
	}
 80072ae:	bf00      	nop
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20000f14 	.word	0x20000f14

080072bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10a      	bne.n	80072e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80072d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	60fb      	str	r3, [r7, #12]
}
 80072e4:	bf00      	nop
 80072e6:	e7fe      	b.n	80072e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	3318      	adds	r3, #24
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7fe fc33 	bl	8005b58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072f2:	4b1e      	ldr	r3, [pc, #120]	; (800736c <xTaskRemoveFromEventList+0xb0>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d11d      	bne.n	8007336 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	3304      	adds	r3, #4
 80072fe:	4618      	mov	r0, r3
 8007300:	f7fe fc2a 	bl	8005b58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007308:	4b19      	ldr	r3, [pc, #100]	; (8007370 <xTaskRemoveFromEventList+0xb4>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	429a      	cmp	r2, r3
 800730e:	d903      	bls.n	8007318 <xTaskRemoveFromEventList+0x5c>
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007314:	4a16      	ldr	r2, [pc, #88]	; (8007370 <xTaskRemoveFromEventList+0xb4>)
 8007316:	6013      	str	r3, [r2, #0]
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731c:	4613      	mov	r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	4413      	add	r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4a13      	ldr	r2, [pc, #76]	; (8007374 <xTaskRemoveFromEventList+0xb8>)
 8007326:	441a      	add	r2, r3
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	3304      	adds	r3, #4
 800732c:	4619      	mov	r1, r3
 800732e:	4610      	mov	r0, r2
 8007330:	f7fe fbb5 	bl	8005a9e <vListInsertEnd>
 8007334:	e005      	b.n	8007342 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	3318      	adds	r3, #24
 800733a:	4619      	mov	r1, r3
 800733c:	480e      	ldr	r0, [pc, #56]	; (8007378 <xTaskRemoveFromEventList+0xbc>)
 800733e:	f7fe fbae 	bl	8005a9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007346:	4b0d      	ldr	r3, [pc, #52]	; (800737c <xTaskRemoveFromEventList+0xc0>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734c:	429a      	cmp	r2, r3
 800734e:	d905      	bls.n	800735c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007350:	2301      	movs	r3, #1
 8007352:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007354:	4b0a      	ldr	r3, [pc, #40]	; (8007380 <xTaskRemoveFromEventList+0xc4>)
 8007356:	2201      	movs	r2, #1
 8007358:	601a      	str	r2, [r3, #0]
 800735a:	e001      	b.n	8007360 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800735c:	2300      	movs	r3, #0
 800735e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007360:	697b      	ldr	r3, [r7, #20]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	20001410 	.word	0x20001410
 8007370:	200013f0 	.word	0x200013f0
 8007374:	20000f18 	.word	0x20000f18
 8007378:	200013a8 	.word	0x200013a8
 800737c:	20000f14 	.word	0x20000f14
 8007380:	200013fc 	.word	0x200013fc

08007384 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800738c:	4b06      	ldr	r3, [pc, #24]	; (80073a8 <vTaskInternalSetTimeOutState+0x24>)
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007394:	4b05      	ldr	r3, [pc, #20]	; (80073ac <vTaskInternalSetTimeOutState+0x28>)
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	605a      	str	r2, [r3, #4]
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	20001400 	.word	0x20001400
 80073ac:	200013ec 	.word	0x200013ec

080073b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b088      	sub	sp, #32
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10a      	bne.n	80073d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80073c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	613b      	str	r3, [r7, #16]
}
 80073d2:	bf00      	nop
 80073d4:	e7fe      	b.n	80073d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10a      	bne.n	80073f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	60fb      	str	r3, [r7, #12]
}
 80073ee:	bf00      	nop
 80073f0:	e7fe      	b.n	80073f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80073f2:	f000 ff7f 	bl	80082f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80073f6:	4b1d      	ldr	r3, [pc, #116]	; (800746c <xTaskCheckForTimeOut+0xbc>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	69ba      	ldr	r2, [r7, #24]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800740e:	d102      	bne.n	8007416 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007410:	2300      	movs	r3, #0
 8007412:	61fb      	str	r3, [r7, #28]
 8007414:	e023      	b.n	800745e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	4b15      	ldr	r3, [pc, #84]	; (8007470 <xTaskCheckForTimeOut+0xc0>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	429a      	cmp	r2, r3
 8007420:	d007      	beq.n	8007432 <xTaskCheckForTimeOut+0x82>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	429a      	cmp	r2, r3
 800742a:	d302      	bcc.n	8007432 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800742c:	2301      	movs	r3, #1
 800742e:	61fb      	str	r3, [r7, #28]
 8007430:	e015      	b.n	800745e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	429a      	cmp	r2, r3
 800743a:	d20b      	bcs.n	8007454 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	1ad2      	subs	r2, r2, r3
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f7ff ff9b 	bl	8007384 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800744e:	2300      	movs	r3, #0
 8007450:	61fb      	str	r3, [r7, #28]
 8007452:	e004      	b.n	800745e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	2200      	movs	r2, #0
 8007458:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800745a:	2301      	movs	r3, #1
 800745c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800745e:	f000 ff79 	bl	8008354 <vPortExitCritical>

	return xReturn;
 8007462:	69fb      	ldr	r3, [r7, #28]
}
 8007464:	4618      	mov	r0, r3
 8007466:	3720      	adds	r7, #32
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	200013ec 	.word	0x200013ec
 8007470:	20001400 	.word	0x20001400

08007474 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007474:	b480      	push	{r7}
 8007476:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007478:	4b03      	ldr	r3, [pc, #12]	; (8007488 <vTaskMissedYield+0x14>)
 800747a:	2201      	movs	r2, #1
 800747c:	601a      	str	r2, [r3, #0]
}
 800747e:	bf00      	nop
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	200013fc 	.word	0x200013fc

0800748c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007494:	f000 f852 	bl	800753c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007498:	4b06      	ldr	r3, [pc, #24]	; (80074b4 <prvIdleTask+0x28>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d9f9      	bls.n	8007494 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074a0:	4b05      	ldr	r3, [pc, #20]	; (80074b8 <prvIdleTask+0x2c>)
 80074a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074a6:	601a      	str	r2, [r3, #0]
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074b0:	e7f0      	b.n	8007494 <prvIdleTask+0x8>
 80074b2:	bf00      	nop
 80074b4:	20000f18 	.word	0x20000f18
 80074b8:	e000ed04 	.word	0xe000ed04

080074bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074c2:	2300      	movs	r3, #0
 80074c4:	607b      	str	r3, [r7, #4]
 80074c6:	e00c      	b.n	80074e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	4613      	mov	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4413      	add	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4a12      	ldr	r2, [pc, #72]	; (800751c <prvInitialiseTaskLists+0x60>)
 80074d4:	4413      	add	r3, r2
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fe fab4 	bl	8005a44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	3301      	adds	r3, #1
 80074e0:	607b      	str	r3, [r7, #4]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2b37      	cmp	r3, #55	; 0x37
 80074e6:	d9ef      	bls.n	80074c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80074e8:	480d      	ldr	r0, [pc, #52]	; (8007520 <prvInitialiseTaskLists+0x64>)
 80074ea:	f7fe faab 	bl	8005a44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80074ee:	480d      	ldr	r0, [pc, #52]	; (8007524 <prvInitialiseTaskLists+0x68>)
 80074f0:	f7fe faa8 	bl	8005a44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80074f4:	480c      	ldr	r0, [pc, #48]	; (8007528 <prvInitialiseTaskLists+0x6c>)
 80074f6:	f7fe faa5 	bl	8005a44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80074fa:	480c      	ldr	r0, [pc, #48]	; (800752c <prvInitialiseTaskLists+0x70>)
 80074fc:	f7fe faa2 	bl	8005a44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007500:	480b      	ldr	r0, [pc, #44]	; (8007530 <prvInitialiseTaskLists+0x74>)
 8007502:	f7fe fa9f 	bl	8005a44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007506:	4b0b      	ldr	r3, [pc, #44]	; (8007534 <prvInitialiseTaskLists+0x78>)
 8007508:	4a05      	ldr	r2, [pc, #20]	; (8007520 <prvInitialiseTaskLists+0x64>)
 800750a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800750c:	4b0a      	ldr	r3, [pc, #40]	; (8007538 <prvInitialiseTaskLists+0x7c>)
 800750e:	4a05      	ldr	r2, [pc, #20]	; (8007524 <prvInitialiseTaskLists+0x68>)
 8007510:	601a      	str	r2, [r3, #0]
}
 8007512:	bf00      	nop
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	20000f18 	.word	0x20000f18
 8007520:	20001378 	.word	0x20001378
 8007524:	2000138c 	.word	0x2000138c
 8007528:	200013a8 	.word	0x200013a8
 800752c:	200013bc 	.word	0x200013bc
 8007530:	200013d4 	.word	0x200013d4
 8007534:	200013a0 	.word	0x200013a0
 8007538:	200013a4 	.word	0x200013a4

0800753c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007542:	e019      	b.n	8007578 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007544:	f000 fed6 	bl	80082f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007548:	4b10      	ldr	r3, [pc, #64]	; (800758c <prvCheckTasksWaitingTermination+0x50>)
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	3304      	adds	r3, #4
 8007554:	4618      	mov	r0, r3
 8007556:	f7fe faff 	bl	8005b58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800755a:	4b0d      	ldr	r3, [pc, #52]	; (8007590 <prvCheckTasksWaitingTermination+0x54>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	3b01      	subs	r3, #1
 8007560:	4a0b      	ldr	r2, [pc, #44]	; (8007590 <prvCheckTasksWaitingTermination+0x54>)
 8007562:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007564:	4b0b      	ldr	r3, [pc, #44]	; (8007594 <prvCheckTasksWaitingTermination+0x58>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	3b01      	subs	r3, #1
 800756a:	4a0a      	ldr	r2, [pc, #40]	; (8007594 <prvCheckTasksWaitingTermination+0x58>)
 800756c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800756e:	f000 fef1 	bl	8008354 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f810 	bl	8007598 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007578:	4b06      	ldr	r3, [pc, #24]	; (8007594 <prvCheckTasksWaitingTermination+0x58>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1e1      	bne.n	8007544 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007580:	bf00      	nop
 8007582:	bf00      	nop
 8007584:	3708      	adds	r7, #8
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	200013bc 	.word	0x200013bc
 8007590:	200013e8 	.word	0x200013e8
 8007594:	200013d0 	.word	0x200013d0

08007598 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	3354      	adds	r3, #84	; 0x54
 80075a4:	4618      	mov	r0, r3
 80075a6:	f001 fbf9 	bl	8008d9c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d108      	bne.n	80075c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b8:	4618      	mov	r0, r3
 80075ba:	f001 f889 	bl	80086d0 <vPortFree>
				vPortFree( pxTCB );
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f001 f886 	bl	80086d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075c4:	e018      	b.n	80075f8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d103      	bne.n	80075d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f001 f87d 	bl	80086d0 <vPortFree>
	}
 80075d6:	e00f      	b.n	80075f8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d00a      	beq.n	80075f8 <prvDeleteTCB+0x60>
	__asm volatile
 80075e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	60fb      	str	r3, [r7, #12]
}
 80075f4:	bf00      	nop
 80075f6:	e7fe      	b.n	80075f6 <prvDeleteTCB+0x5e>
	}
 80075f8:	bf00      	nop
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007606:	4b0c      	ldr	r3, [pc, #48]	; (8007638 <prvResetNextTaskUnblockTime+0x38>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d104      	bne.n	800761a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007610:	4b0a      	ldr	r3, [pc, #40]	; (800763c <prvResetNextTaskUnblockTime+0x3c>)
 8007612:	f04f 32ff 	mov.w	r2, #4294967295
 8007616:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007618:	e008      	b.n	800762c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800761a:	4b07      	ldr	r3, [pc, #28]	; (8007638 <prvResetNextTaskUnblockTime+0x38>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	4a04      	ldr	r2, [pc, #16]	; (800763c <prvResetNextTaskUnblockTime+0x3c>)
 800762a:	6013      	str	r3, [r2, #0]
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr
 8007638:	200013a0 	.word	0x200013a0
 800763c:	20001408 	.word	0x20001408

08007640 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007646:	4b0b      	ldr	r3, [pc, #44]	; (8007674 <xTaskGetSchedulerState+0x34>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d102      	bne.n	8007654 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800764e:	2301      	movs	r3, #1
 8007650:	607b      	str	r3, [r7, #4]
 8007652:	e008      	b.n	8007666 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007654:	4b08      	ldr	r3, [pc, #32]	; (8007678 <xTaskGetSchedulerState+0x38>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d102      	bne.n	8007662 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800765c:	2302      	movs	r3, #2
 800765e:	607b      	str	r3, [r7, #4]
 8007660:	e001      	b.n	8007666 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007662:	2300      	movs	r3, #0
 8007664:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007666:	687b      	ldr	r3, [r7, #4]
	}
 8007668:	4618      	mov	r0, r3
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	200013f4 	.word	0x200013f4
 8007678:	20001410 	.word	0x20001410

0800767c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007688:	2300      	movs	r3, #0
 800768a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d051      	beq.n	8007736 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007696:	4b2a      	ldr	r3, [pc, #168]	; (8007740 <xTaskPriorityInherit+0xc4>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769c:	429a      	cmp	r2, r3
 800769e:	d241      	bcs.n	8007724 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	db06      	blt.n	80076b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076a8:	4b25      	ldr	r3, [pc, #148]	; (8007740 <xTaskPriorityInherit+0xc4>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	6959      	ldr	r1, [r3, #20]
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076be:	4613      	mov	r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4413      	add	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4a1f      	ldr	r2, [pc, #124]	; (8007744 <xTaskPriorityInherit+0xc8>)
 80076c8:	4413      	add	r3, r2
 80076ca:	4299      	cmp	r1, r3
 80076cc:	d122      	bne.n	8007714 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	3304      	adds	r3, #4
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fe fa40 	bl	8005b58 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80076d8:	4b19      	ldr	r3, [pc, #100]	; (8007740 <xTaskPriorityInherit+0xc4>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e6:	4b18      	ldr	r3, [pc, #96]	; (8007748 <xTaskPriorityInherit+0xcc>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d903      	bls.n	80076f6 <xTaskPriorityInherit+0x7a>
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f2:	4a15      	ldr	r2, [pc, #84]	; (8007748 <xTaskPriorityInherit+0xcc>)
 80076f4:	6013      	str	r3, [r2, #0]
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076fa:	4613      	mov	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4a10      	ldr	r2, [pc, #64]	; (8007744 <xTaskPriorityInherit+0xc8>)
 8007704:	441a      	add	r2, r3
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	3304      	adds	r3, #4
 800770a:	4619      	mov	r1, r3
 800770c:	4610      	mov	r0, r2
 800770e:	f7fe f9c6 	bl	8005a9e <vListInsertEnd>
 8007712:	e004      	b.n	800771e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007714:	4b0a      	ldr	r3, [pc, #40]	; (8007740 <xTaskPriorityInherit+0xc4>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800771e:	2301      	movs	r3, #1
 8007720:	60fb      	str	r3, [r7, #12]
 8007722:	e008      	b.n	8007736 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007728:	4b05      	ldr	r3, [pc, #20]	; (8007740 <xTaskPriorityInherit+0xc4>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772e:	429a      	cmp	r2, r3
 8007730:	d201      	bcs.n	8007736 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007732:	2301      	movs	r3, #1
 8007734:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007736:	68fb      	ldr	r3, [r7, #12]
	}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	20000f14 	.word	0x20000f14
 8007744:	20000f18 	.word	0x20000f18
 8007748:	200013f0 	.word	0x200013f0

0800774c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800774c:	b580      	push	{r7, lr}
 800774e:	b086      	sub	sp, #24
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007758:	2300      	movs	r3, #0
 800775a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d056      	beq.n	8007810 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007762:	4b2e      	ldr	r3, [pc, #184]	; (800781c <xTaskPriorityDisinherit+0xd0>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	429a      	cmp	r2, r3
 800776a:	d00a      	beq.n	8007782 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	60fb      	str	r3, [r7, #12]
}
 800777e:	bf00      	nop
 8007780:	e7fe      	b.n	8007780 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10a      	bne.n	80077a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	60bb      	str	r3, [r7, #8]
}
 800779c:	bf00      	nop
 800779e:	e7fe      	b.n	800779e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077a4:	1e5a      	subs	r2, r3, #1
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d02c      	beq.n	8007810 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d128      	bne.n	8007810 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	3304      	adds	r3, #4
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fe f9c8 	bl	8005b58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e0:	4b0f      	ldr	r3, [pc, #60]	; (8007820 <xTaskPriorityDisinherit+0xd4>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d903      	bls.n	80077f0 <xTaskPriorityDisinherit+0xa4>
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ec:	4a0c      	ldr	r2, [pc, #48]	; (8007820 <xTaskPriorityDisinherit+0xd4>)
 80077ee:	6013      	str	r3, [r2, #0]
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f4:	4613      	mov	r3, r2
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4413      	add	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4a09      	ldr	r2, [pc, #36]	; (8007824 <xTaskPriorityDisinherit+0xd8>)
 80077fe:	441a      	add	r2, r3
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	3304      	adds	r3, #4
 8007804:	4619      	mov	r1, r3
 8007806:	4610      	mov	r0, r2
 8007808:	f7fe f949 	bl	8005a9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800780c:	2301      	movs	r3, #1
 800780e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007810:	697b      	ldr	r3, [r7, #20]
	}
 8007812:	4618      	mov	r0, r3
 8007814:	3718      	adds	r7, #24
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	20000f14 	.word	0x20000f14
 8007820:	200013f0 	.word	0x200013f0
 8007824:	20000f18 	.word	0x20000f18

08007828 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007828:	b580      	push	{r7, lr}
 800782a:	b088      	sub	sp, #32
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007836:	2301      	movs	r3, #1
 8007838:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d06a      	beq.n	8007916 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10a      	bne.n	800785e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784c:	f383 8811 	msr	BASEPRI, r3
 8007850:	f3bf 8f6f 	isb	sy
 8007854:	f3bf 8f4f 	dsb	sy
 8007858:	60fb      	str	r3, [r7, #12]
}
 800785a:	bf00      	nop
 800785c:	e7fe      	b.n	800785c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007862:	683a      	ldr	r2, [r7, #0]
 8007864:	429a      	cmp	r2, r3
 8007866:	d902      	bls.n	800786e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	61fb      	str	r3, [r7, #28]
 800786c:	e002      	b.n	8007874 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007872:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007878:	69fa      	ldr	r2, [r7, #28]
 800787a:	429a      	cmp	r2, r3
 800787c:	d04b      	beq.n	8007916 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	429a      	cmp	r2, r3
 8007886:	d146      	bne.n	8007916 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007888:	4b25      	ldr	r3, [pc, #148]	; (8007920 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	69ba      	ldr	r2, [r7, #24]
 800788e:	429a      	cmp	r2, r3
 8007890:	d10a      	bne.n	80078a8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	60bb      	str	r3, [r7, #8]
}
 80078a4:	bf00      	nop
 80078a6:	e7fe      	b.n	80078a6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	69fa      	ldr	r2, [r7, #28]
 80078b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	db04      	blt.n	80078c6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	6959      	ldr	r1, [r3, #20]
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	4613      	mov	r3, r2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	4413      	add	r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4a13      	ldr	r2, [pc, #76]	; (8007924 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80078d6:	4413      	add	r3, r2
 80078d8:	4299      	cmp	r1, r3
 80078da:	d11c      	bne.n	8007916 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	3304      	adds	r3, #4
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7fe f939 	bl	8005b58 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ea:	4b0f      	ldr	r3, [pc, #60]	; (8007928 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d903      	bls.n	80078fa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f6:	4a0c      	ldr	r2, [pc, #48]	; (8007928 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80078f8:	6013      	str	r3, [r2, #0]
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fe:	4613      	mov	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4a07      	ldr	r2, [pc, #28]	; (8007924 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007908:	441a      	add	r2, r3
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	3304      	adds	r3, #4
 800790e:	4619      	mov	r1, r3
 8007910:	4610      	mov	r0, r2
 8007912:	f7fe f8c4 	bl	8005a9e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007916:	bf00      	nop
 8007918:	3720      	adds	r7, #32
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	20000f14 	.word	0x20000f14
 8007924:	20000f18 	.word	0x20000f18
 8007928:	200013f0 	.word	0x200013f0

0800792c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800792c:	b480      	push	{r7}
 800792e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007930:	4b07      	ldr	r3, [pc, #28]	; (8007950 <pvTaskIncrementMutexHeldCount+0x24>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d004      	beq.n	8007942 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007938:	4b05      	ldr	r3, [pc, #20]	; (8007950 <pvTaskIncrementMutexHeldCount+0x24>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800793e:	3201      	adds	r2, #1
 8007940:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007942:	4b03      	ldr	r3, [pc, #12]	; (8007950 <pvTaskIncrementMutexHeldCount+0x24>)
 8007944:	681b      	ldr	r3, [r3, #0]
	}
 8007946:	4618      	mov	r0, r3
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	20000f14 	.word	0x20000f14

08007954 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800795e:	4b21      	ldr	r3, [pc, #132]	; (80079e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007964:	4b20      	ldr	r3, [pc, #128]	; (80079e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	3304      	adds	r3, #4
 800796a:	4618      	mov	r0, r3
 800796c:	f7fe f8f4 	bl	8005b58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007976:	d10a      	bne.n	800798e <prvAddCurrentTaskToDelayedList+0x3a>
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d007      	beq.n	800798e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800797e:	4b1a      	ldr	r3, [pc, #104]	; (80079e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	3304      	adds	r3, #4
 8007984:	4619      	mov	r1, r3
 8007986:	4819      	ldr	r0, [pc, #100]	; (80079ec <prvAddCurrentTaskToDelayedList+0x98>)
 8007988:	f7fe f889 	bl	8005a9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800798c:	e026      	b.n	80079dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4413      	add	r3, r2
 8007994:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007996:	4b14      	ldr	r3, [pc, #80]	; (80079e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d209      	bcs.n	80079ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079a6:	4b12      	ldr	r3, [pc, #72]	; (80079f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	4b0f      	ldr	r3, [pc, #60]	; (80079e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	3304      	adds	r3, #4
 80079b0:	4619      	mov	r1, r3
 80079b2:	4610      	mov	r0, r2
 80079b4:	f7fe f897 	bl	8005ae6 <vListInsert>
}
 80079b8:	e010      	b.n	80079dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079ba:	4b0e      	ldr	r3, [pc, #56]	; (80079f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	4b0a      	ldr	r3, [pc, #40]	; (80079e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3304      	adds	r3, #4
 80079c4:	4619      	mov	r1, r3
 80079c6:	4610      	mov	r0, r2
 80079c8:	f7fe f88d 	bl	8005ae6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80079cc:	4b0a      	ldr	r3, [pc, #40]	; (80079f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68ba      	ldr	r2, [r7, #8]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d202      	bcs.n	80079dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80079d6:	4a08      	ldr	r2, [pc, #32]	; (80079f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	6013      	str	r3, [r2, #0]
}
 80079dc:	bf00      	nop
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	200013ec 	.word	0x200013ec
 80079e8:	20000f14 	.word	0x20000f14
 80079ec:	200013d4 	.word	0x200013d4
 80079f0:	200013a4 	.word	0x200013a4
 80079f4:	200013a0 	.word	0x200013a0
 80079f8:	20001408 	.word	0x20001408

080079fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b08a      	sub	sp, #40	; 0x28
 8007a00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007a02:	2300      	movs	r3, #0
 8007a04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007a06:	f000 fb07 	bl	8008018 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007a0a:	4b1c      	ldr	r3, [pc, #112]	; (8007a7c <xTimerCreateTimerTask+0x80>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d021      	beq.n	8007a56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007a12:	2300      	movs	r3, #0
 8007a14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007a16:	2300      	movs	r3, #0
 8007a18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007a1a:	1d3a      	adds	r2, r7, #4
 8007a1c:	f107 0108 	add.w	r1, r7, #8
 8007a20:	f107 030c 	add.w	r3, r7, #12
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7fd fff3 	bl	8005a10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007a2a:	6879      	ldr	r1, [r7, #4]
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	9202      	str	r2, [sp, #8]
 8007a32:	9301      	str	r3, [sp, #4]
 8007a34:	2302      	movs	r3, #2
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	2300      	movs	r3, #0
 8007a3a:	460a      	mov	r2, r1
 8007a3c:	4910      	ldr	r1, [pc, #64]	; (8007a80 <xTimerCreateTimerTask+0x84>)
 8007a3e:	4811      	ldr	r0, [pc, #68]	; (8007a84 <xTimerCreateTimerTask+0x88>)
 8007a40:	f7fe ffb6 	bl	80069b0 <xTaskCreateStatic>
 8007a44:	4603      	mov	r3, r0
 8007a46:	4a10      	ldr	r2, [pc, #64]	; (8007a88 <xTimerCreateTimerTask+0x8c>)
 8007a48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007a4a:	4b0f      	ldr	r3, [pc, #60]	; (8007a88 <xTimerCreateTimerTask+0x8c>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007a52:	2301      	movs	r3, #1
 8007a54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10a      	bne.n	8007a72 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a60:	f383 8811 	msr	BASEPRI, r3
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	613b      	str	r3, [r7, #16]
}
 8007a6e:	bf00      	nop
 8007a70:	e7fe      	b.n	8007a70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007a72:	697b      	ldr	r3, [r7, #20]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3718      	adds	r7, #24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	20001444 	.word	0x20001444
 8007a80:	08009d9c 	.word	0x08009d9c
 8007a84:	08007bc1 	.word	0x08007bc1
 8007a88:	20001448 	.word	0x20001448

08007a8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b08a      	sub	sp, #40	; 0x28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
 8007a98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10a      	bne.n	8007aba <xTimerGenericCommand+0x2e>
	__asm volatile
 8007aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa8:	f383 8811 	msr	BASEPRI, r3
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	623b      	str	r3, [r7, #32]
}
 8007ab6:	bf00      	nop
 8007ab8:	e7fe      	b.n	8007ab8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007aba:	4b1a      	ldr	r3, [pc, #104]	; (8007b24 <xTimerGenericCommand+0x98>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d02a      	beq.n	8007b18 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2b05      	cmp	r3, #5
 8007ad2:	dc18      	bgt.n	8007b06 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ad4:	f7ff fdb4 	bl	8007640 <xTaskGetSchedulerState>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d109      	bne.n	8007af2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007ade:	4b11      	ldr	r3, [pc, #68]	; (8007b24 <xTimerGenericCommand+0x98>)
 8007ae0:	6818      	ldr	r0, [r3, #0]
 8007ae2:	f107 0110 	add.w	r1, r7, #16
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aea:	f7fe fa07 	bl	8005efc <xQueueGenericSend>
 8007aee:	6278      	str	r0, [r7, #36]	; 0x24
 8007af0:	e012      	b.n	8007b18 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007af2:	4b0c      	ldr	r3, [pc, #48]	; (8007b24 <xTimerGenericCommand+0x98>)
 8007af4:	6818      	ldr	r0, [r3, #0]
 8007af6:	f107 0110 	add.w	r1, r7, #16
 8007afa:	2300      	movs	r3, #0
 8007afc:	2200      	movs	r2, #0
 8007afe:	f7fe f9fd 	bl	8005efc <xQueueGenericSend>
 8007b02:	6278      	str	r0, [r7, #36]	; 0x24
 8007b04:	e008      	b.n	8007b18 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007b06:	4b07      	ldr	r3, [pc, #28]	; (8007b24 <xTimerGenericCommand+0x98>)
 8007b08:	6818      	ldr	r0, [r3, #0]
 8007b0a:	f107 0110 	add.w	r1, r7, #16
 8007b0e:	2300      	movs	r3, #0
 8007b10:	683a      	ldr	r2, [r7, #0]
 8007b12:	f7fe faf1 	bl	80060f8 <xQueueGenericSendFromISR>
 8007b16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3728      	adds	r7, #40	; 0x28
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	20001444 	.word	0x20001444

08007b28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b088      	sub	sp, #32
 8007b2c:	af02      	add	r7, sp, #8
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b32:	4b22      	ldr	r3, [pc, #136]	; (8007bbc <prvProcessExpiredTimer+0x94>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	3304      	adds	r3, #4
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fe f809 	bl	8005b58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b4c:	f003 0304 	and.w	r3, r3, #4
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d022      	beq.n	8007b9a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	699a      	ldr	r2, [r3, #24]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	18d1      	adds	r1, r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	683a      	ldr	r2, [r7, #0]
 8007b60:	6978      	ldr	r0, [r7, #20]
 8007b62:	f000 f8d1 	bl	8007d08 <prvInsertTimerInActiveList>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d01f      	beq.n	8007bac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	2300      	movs	r3, #0
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	2100      	movs	r1, #0
 8007b76:	6978      	ldr	r0, [r7, #20]
 8007b78:	f7ff ff88 	bl	8007a8c <xTimerGenericCommand>
 8007b7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d113      	bne.n	8007bac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	60fb      	str	r3, [r7, #12]
}
 8007b96:	bf00      	nop
 8007b98:	e7fe      	b.n	8007b98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ba0:	f023 0301 	bic.w	r3, r3, #1
 8007ba4:	b2da      	uxtb	r2, r3
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	6a1b      	ldr	r3, [r3, #32]
 8007bb0:	6978      	ldr	r0, [r7, #20]
 8007bb2:	4798      	blx	r3
}
 8007bb4:	bf00      	nop
 8007bb6:	3718      	adds	r7, #24
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	2000143c 	.word	0x2000143c

08007bc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007bc8:	f107 0308 	add.w	r3, r7, #8
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f000 f857 	bl	8007c80 <prvGetNextExpireTime>
 8007bd2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 f803 	bl	8007be4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007bde:	f000 f8d5 	bl	8007d8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007be2:	e7f1      	b.n	8007bc8 <prvTimerTask+0x8>

08007be4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007bee:	f7ff f93b 	bl	8006e68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bf2:	f107 0308 	add.w	r3, r7, #8
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f000 f866 	bl	8007cc8 <prvSampleTimeNow>
 8007bfc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d130      	bne.n	8007c66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10a      	bne.n	8007c20 <prvProcessTimerOrBlockTask+0x3c>
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d806      	bhi.n	8007c20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007c12:	f7ff f937 	bl	8006e84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c16:	68f9      	ldr	r1, [r7, #12]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f7ff ff85 	bl	8007b28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007c1e:	e024      	b.n	8007c6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d008      	beq.n	8007c38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c26:	4b13      	ldr	r3, [pc, #76]	; (8007c74 <prvProcessTimerOrBlockTask+0x90>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <prvProcessTimerOrBlockTask+0x50>
 8007c30:	2301      	movs	r3, #1
 8007c32:	e000      	b.n	8007c36 <prvProcessTimerOrBlockTask+0x52>
 8007c34:	2300      	movs	r3, #0
 8007c36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007c38:	4b0f      	ldr	r3, [pc, #60]	; (8007c78 <prvProcessTimerOrBlockTask+0x94>)
 8007c3a:	6818      	ldr	r0, [r3, #0]
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	4619      	mov	r1, r3
 8007c46:	f7fe fe7f 	bl	8006948 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007c4a:	f7ff f91b 	bl	8006e84 <xTaskResumeAll>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10a      	bne.n	8007c6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007c54:	4b09      	ldr	r3, [pc, #36]	; (8007c7c <prvProcessTimerOrBlockTask+0x98>)
 8007c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c5a:	601a      	str	r2, [r3, #0]
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	f3bf 8f6f 	isb	sy
}
 8007c64:	e001      	b.n	8007c6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007c66:	f7ff f90d 	bl	8006e84 <xTaskResumeAll>
}
 8007c6a:	bf00      	nop
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	20001440 	.word	0x20001440
 8007c78:	20001444 	.word	0x20001444
 8007c7c:	e000ed04 	.word	0xe000ed04

08007c80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007c88:	4b0e      	ldr	r3, [pc, #56]	; (8007cc4 <prvGetNextExpireTime+0x44>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d101      	bne.n	8007c96 <prvGetNextExpireTime+0x16>
 8007c92:	2201      	movs	r2, #1
 8007c94:	e000      	b.n	8007c98 <prvGetNextExpireTime+0x18>
 8007c96:	2200      	movs	r2, #0
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d105      	bne.n	8007cb0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ca4:	4b07      	ldr	r3, [pc, #28]	; (8007cc4 <prvGetNextExpireTime+0x44>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	60fb      	str	r3, [r7, #12]
 8007cae:	e001      	b.n	8007cb4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3714      	adds	r7, #20
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	2000143c 	.word	0x2000143c

08007cc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007cd0:	f7ff f976 	bl	8006fc0 <xTaskGetTickCount>
 8007cd4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007cd6:	4b0b      	ldr	r3, [pc, #44]	; (8007d04 <prvSampleTimeNow+0x3c>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d205      	bcs.n	8007cec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ce0:	f000 f936 	bl	8007f50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	e002      	b.n	8007cf2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007cf2:	4a04      	ldr	r2, [pc, #16]	; (8007d04 <prvSampleTimeNow+0x3c>)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	2000144c 	.word	0x2000144c

08007d08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
 8007d14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007d16:	2300      	movs	r3, #0
 8007d18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d812      	bhi.n	8007d54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	1ad2      	subs	r2, r2, r3
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d302      	bcc.n	8007d42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	617b      	str	r3, [r7, #20]
 8007d40:	e01b      	b.n	8007d7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007d42:	4b10      	ldr	r3, [pc, #64]	; (8007d84 <prvInsertTimerInActiveList+0x7c>)
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	3304      	adds	r3, #4
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	f7fd feca 	bl	8005ae6 <vListInsert>
 8007d52:	e012      	b.n	8007d7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d206      	bcs.n	8007d6a <prvInsertTimerInActiveList+0x62>
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d302      	bcc.n	8007d6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007d64:	2301      	movs	r3, #1
 8007d66:	617b      	str	r3, [r7, #20]
 8007d68:	e007      	b.n	8007d7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d6a:	4b07      	ldr	r3, [pc, #28]	; (8007d88 <prvInsertTimerInActiveList+0x80>)
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	3304      	adds	r3, #4
 8007d72:	4619      	mov	r1, r3
 8007d74:	4610      	mov	r0, r2
 8007d76:	f7fd feb6 	bl	8005ae6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007d7a:	697b      	ldr	r3, [r7, #20]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3718      	adds	r7, #24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	20001440 	.word	0x20001440
 8007d88:	2000143c 	.word	0x2000143c

08007d8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b08e      	sub	sp, #56	; 0x38
 8007d90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d92:	e0ca      	b.n	8007f2a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	da18      	bge.n	8007dcc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007d9a:	1d3b      	adds	r3, r7, #4
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10a      	bne.n	8007dbc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007daa:	f383 8811 	msr	BASEPRI, r3
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	61fb      	str	r3, [r7, #28]
}
 8007db8:	bf00      	nop
 8007dba:	e7fe      	b.n	8007dba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dc2:	6850      	ldr	r0, [r2, #4]
 8007dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dc6:	6892      	ldr	r2, [r2, #8]
 8007dc8:	4611      	mov	r1, r2
 8007dca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f2c0 80aa 	blt.w	8007f28 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d004      	beq.n	8007dea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de2:	3304      	adds	r3, #4
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7fd feb7 	bl	8005b58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007dea:	463b      	mov	r3, r7
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7ff ff6b 	bl	8007cc8 <prvSampleTimeNow>
 8007df2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2b09      	cmp	r3, #9
 8007df8:	f200 8097 	bhi.w	8007f2a <prvProcessReceivedCommands+0x19e>
 8007dfc:	a201      	add	r2, pc, #4	; (adr r2, 8007e04 <prvProcessReceivedCommands+0x78>)
 8007dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e02:	bf00      	nop
 8007e04:	08007e2d 	.word	0x08007e2d
 8007e08:	08007e2d 	.word	0x08007e2d
 8007e0c:	08007e2d 	.word	0x08007e2d
 8007e10:	08007ea1 	.word	0x08007ea1
 8007e14:	08007eb5 	.word	0x08007eb5
 8007e18:	08007eff 	.word	0x08007eff
 8007e1c:	08007e2d 	.word	0x08007e2d
 8007e20:	08007e2d 	.word	0x08007e2d
 8007e24:	08007ea1 	.word	0x08007ea1
 8007e28:	08007eb5 	.word	0x08007eb5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e32:	f043 0301 	orr.w	r3, r3, #1
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	18d1      	adds	r1, r2, r3
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e4c:	f7ff ff5c 	bl	8007d08 <prvInsertTimerInActiveList>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d069      	beq.n	8007f2a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e58:	6a1b      	ldr	r3, [r3, #32]
 8007e5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e64:	f003 0304 	and.w	r3, r3, #4
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d05e      	beq.n	8007f2a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	441a      	add	r2, r3
 8007e74:	2300      	movs	r3, #0
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	2300      	movs	r3, #0
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e7e:	f7ff fe05 	bl	8007a8c <xTimerGenericCommand>
 8007e82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007e84:	6a3b      	ldr	r3, [r7, #32]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d14f      	bne.n	8007f2a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8e:	f383 8811 	msr	BASEPRI, r3
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	61bb      	str	r3, [r7, #24]
}
 8007e9c:	bf00      	nop
 8007e9e:	e7fe      	b.n	8007e9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ea6:	f023 0301 	bic.w	r3, r3, #1
 8007eaa:	b2da      	uxtb	r2, r3
 8007eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007eb2:	e03a      	b.n	8007f2a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007eba:	f043 0301 	orr.w	r3, r3, #1
 8007ebe:	b2da      	uxtb	r2, r3
 8007ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007ec6:	68ba      	ldr	r2, [r7, #8]
 8007ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10a      	bne.n	8007eea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed8:	f383 8811 	msr	BASEPRI, r3
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	f3bf 8f4f 	dsb	sy
 8007ee4:	617b      	str	r3, [r7, #20]
}
 8007ee6:	bf00      	nop
 8007ee8:	e7fe      	b.n	8007ee8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eec:	699a      	ldr	r2, [r3, #24]
 8007eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef0:	18d1      	adds	r1, r2, r3
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ef6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ef8:	f7ff ff06 	bl	8007d08 <prvInsertTimerInActiveList>
					break;
 8007efc:	e015      	b.n	8007f2a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f04:	f003 0302 	and.w	r3, r3, #2
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d103      	bne.n	8007f14 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007f0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f0e:	f000 fbdf 	bl	80086d0 <vPortFree>
 8007f12:	e00a      	b.n	8007f2a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f1a:	f023 0301 	bic.w	r3, r3, #1
 8007f1e:	b2da      	uxtb	r2, r3
 8007f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007f26:	e000      	b.n	8007f2a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007f28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f2a:	4b08      	ldr	r3, [pc, #32]	; (8007f4c <prvProcessReceivedCommands+0x1c0>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	1d39      	adds	r1, r7, #4
 8007f30:	2200      	movs	r2, #0
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fe f97c 	bl	8006230 <xQueueReceive>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f47f af2a 	bne.w	8007d94 <prvProcessReceivedCommands+0x8>
	}
}
 8007f40:	bf00      	nop
 8007f42:	bf00      	nop
 8007f44:	3730      	adds	r7, #48	; 0x30
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20001444 	.word	0x20001444

08007f50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b088      	sub	sp, #32
 8007f54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f56:	e048      	b.n	8007fea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f58:	4b2d      	ldr	r3, [pc, #180]	; (8008010 <prvSwitchTimerLists+0xc0>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f62:	4b2b      	ldr	r3, [pc, #172]	; (8008010 <prvSwitchTimerLists+0xc0>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	3304      	adds	r3, #4
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7fd fdf1 	bl	8005b58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f84:	f003 0304 	and.w	r3, r3, #4
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d02e      	beq.n	8007fea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	693a      	ldr	r2, [r7, #16]
 8007f92:	4413      	add	r3, r2
 8007f94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d90e      	bls.n	8007fbc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007faa:	4b19      	ldr	r3, [pc, #100]	; (8008010 <prvSwitchTimerLists+0xc0>)
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	3304      	adds	r3, #4
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	4610      	mov	r0, r2
 8007fb6:	f7fd fd96 	bl	8005ae6 <vListInsert>
 8007fba:	e016      	b.n	8007fea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f7ff fd60 	bl	8007a8c <xTimerGenericCommand>
 8007fcc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10a      	bne.n	8007fea <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	603b      	str	r3, [r7, #0]
}
 8007fe6:	bf00      	nop
 8007fe8:	e7fe      	b.n	8007fe8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007fea:	4b09      	ldr	r3, [pc, #36]	; (8008010 <prvSwitchTimerLists+0xc0>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1b1      	bne.n	8007f58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007ff4:	4b06      	ldr	r3, [pc, #24]	; (8008010 <prvSwitchTimerLists+0xc0>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007ffa:	4b06      	ldr	r3, [pc, #24]	; (8008014 <prvSwitchTimerLists+0xc4>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a04      	ldr	r2, [pc, #16]	; (8008010 <prvSwitchTimerLists+0xc0>)
 8008000:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008002:	4a04      	ldr	r2, [pc, #16]	; (8008014 <prvSwitchTimerLists+0xc4>)
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	6013      	str	r3, [r2, #0]
}
 8008008:	bf00      	nop
 800800a:	3718      	adds	r7, #24
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	2000143c 	.word	0x2000143c
 8008014:	20001440 	.word	0x20001440

08008018 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800801e:	f000 f969 	bl	80082f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008022:	4b15      	ldr	r3, [pc, #84]	; (8008078 <prvCheckForValidListAndQueue+0x60>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d120      	bne.n	800806c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800802a:	4814      	ldr	r0, [pc, #80]	; (800807c <prvCheckForValidListAndQueue+0x64>)
 800802c:	f7fd fd0a 	bl	8005a44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008030:	4813      	ldr	r0, [pc, #76]	; (8008080 <prvCheckForValidListAndQueue+0x68>)
 8008032:	f7fd fd07 	bl	8005a44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008036:	4b13      	ldr	r3, [pc, #76]	; (8008084 <prvCheckForValidListAndQueue+0x6c>)
 8008038:	4a10      	ldr	r2, [pc, #64]	; (800807c <prvCheckForValidListAndQueue+0x64>)
 800803a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800803c:	4b12      	ldr	r3, [pc, #72]	; (8008088 <prvCheckForValidListAndQueue+0x70>)
 800803e:	4a10      	ldr	r2, [pc, #64]	; (8008080 <prvCheckForValidListAndQueue+0x68>)
 8008040:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008042:	2300      	movs	r3, #0
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	4b11      	ldr	r3, [pc, #68]	; (800808c <prvCheckForValidListAndQueue+0x74>)
 8008048:	4a11      	ldr	r2, [pc, #68]	; (8008090 <prvCheckForValidListAndQueue+0x78>)
 800804a:	2110      	movs	r1, #16
 800804c:	200a      	movs	r0, #10
 800804e:	f7fd fe15 	bl	8005c7c <xQueueGenericCreateStatic>
 8008052:	4603      	mov	r3, r0
 8008054:	4a08      	ldr	r2, [pc, #32]	; (8008078 <prvCheckForValidListAndQueue+0x60>)
 8008056:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008058:	4b07      	ldr	r3, [pc, #28]	; (8008078 <prvCheckForValidListAndQueue+0x60>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d005      	beq.n	800806c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008060:	4b05      	ldr	r3, [pc, #20]	; (8008078 <prvCheckForValidListAndQueue+0x60>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	490b      	ldr	r1, [pc, #44]	; (8008094 <prvCheckForValidListAndQueue+0x7c>)
 8008066:	4618      	mov	r0, r3
 8008068:	f7fe fc1a 	bl	80068a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800806c:	f000 f972 	bl	8008354 <vPortExitCritical>
}
 8008070:	bf00      	nop
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	20001444 	.word	0x20001444
 800807c:	20001414 	.word	0x20001414
 8008080:	20001428 	.word	0x20001428
 8008084:	2000143c 	.word	0x2000143c
 8008088:	20001440 	.word	0x20001440
 800808c:	200014f0 	.word	0x200014f0
 8008090:	20001450 	.word	0x20001450
 8008094:	08009da4 	.word	0x08009da4

08008098 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	3b04      	subs	r3, #4
 80080a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80080b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	3b04      	subs	r3, #4
 80080b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	f023 0201 	bic.w	r2, r3, #1
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	3b04      	subs	r3, #4
 80080c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80080c8:	4a0c      	ldr	r2, [pc, #48]	; (80080fc <pxPortInitialiseStack+0x64>)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	3b14      	subs	r3, #20
 80080d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3b04      	subs	r3, #4
 80080de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f06f 0202 	mvn.w	r2, #2
 80080e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	3b20      	subs	r3, #32
 80080ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80080ee:	68fb      	ldr	r3, [r7, #12]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3714      	adds	r7, #20
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr
 80080fc:	08008101 	.word	0x08008101

08008100 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008106:	2300      	movs	r3, #0
 8008108:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800810a:	4b12      	ldr	r3, [pc, #72]	; (8008154 <prvTaskExitError+0x54>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008112:	d00a      	beq.n	800812a <prvTaskExitError+0x2a>
	__asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	60fb      	str	r3, [r7, #12]
}
 8008126:	bf00      	nop
 8008128:	e7fe      	b.n	8008128 <prvTaskExitError+0x28>
	__asm volatile
 800812a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	60bb      	str	r3, [r7, #8]
}
 800813c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800813e:	bf00      	nop
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d0fc      	beq.n	8008140 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008146:	bf00      	nop
 8008148:	bf00      	nop
 800814a:	3714      	adds	r7, #20
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr
 8008154:	2000000c 	.word	0x2000000c
	...

08008160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008160:	4b07      	ldr	r3, [pc, #28]	; (8008180 <pxCurrentTCBConst2>)
 8008162:	6819      	ldr	r1, [r3, #0]
 8008164:	6808      	ldr	r0, [r1, #0]
 8008166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816a:	f380 8809 	msr	PSP, r0
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f04f 0000 	mov.w	r0, #0
 8008176:	f380 8811 	msr	BASEPRI, r0
 800817a:	4770      	bx	lr
 800817c:	f3af 8000 	nop.w

08008180 <pxCurrentTCBConst2>:
 8008180:	20000f14 	.word	0x20000f14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008184:	bf00      	nop
 8008186:	bf00      	nop

08008188 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008188:	4808      	ldr	r0, [pc, #32]	; (80081ac <prvPortStartFirstTask+0x24>)
 800818a:	6800      	ldr	r0, [r0, #0]
 800818c:	6800      	ldr	r0, [r0, #0]
 800818e:	f380 8808 	msr	MSP, r0
 8008192:	f04f 0000 	mov.w	r0, #0
 8008196:	f380 8814 	msr	CONTROL, r0
 800819a:	b662      	cpsie	i
 800819c:	b661      	cpsie	f
 800819e:	f3bf 8f4f 	dsb	sy
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	df00      	svc	0
 80081a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081aa:	bf00      	nop
 80081ac:	e000ed08 	.word	0xe000ed08

080081b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80081b6:	4b46      	ldr	r3, [pc, #280]	; (80082d0 <xPortStartScheduler+0x120>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a46      	ldr	r2, [pc, #280]	; (80082d4 <xPortStartScheduler+0x124>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d10a      	bne.n	80081d6 <xPortStartScheduler+0x26>
	__asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	613b      	str	r3, [r7, #16]
}
 80081d2:	bf00      	nop
 80081d4:	e7fe      	b.n	80081d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80081d6:	4b3e      	ldr	r3, [pc, #248]	; (80082d0 <xPortStartScheduler+0x120>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a3f      	ldr	r2, [pc, #252]	; (80082d8 <xPortStartScheduler+0x128>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d10a      	bne.n	80081f6 <xPortStartScheduler+0x46>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	60fb      	str	r3, [r7, #12]
}
 80081f2:	bf00      	nop
 80081f4:	e7fe      	b.n	80081f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80081f6:	4b39      	ldr	r3, [pc, #228]	; (80082dc <xPortStartScheduler+0x12c>)
 80081f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	22ff      	movs	r2, #255	; 0xff
 8008206:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	b2db      	uxtb	r3, r3
 800820e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008210:	78fb      	ldrb	r3, [r7, #3]
 8008212:	b2db      	uxtb	r3, r3
 8008214:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008218:	b2da      	uxtb	r2, r3
 800821a:	4b31      	ldr	r3, [pc, #196]	; (80082e0 <xPortStartScheduler+0x130>)
 800821c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800821e:	4b31      	ldr	r3, [pc, #196]	; (80082e4 <xPortStartScheduler+0x134>)
 8008220:	2207      	movs	r2, #7
 8008222:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008224:	e009      	b.n	800823a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008226:	4b2f      	ldr	r3, [pc, #188]	; (80082e4 <xPortStartScheduler+0x134>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	3b01      	subs	r3, #1
 800822c:	4a2d      	ldr	r2, [pc, #180]	; (80082e4 <xPortStartScheduler+0x134>)
 800822e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008230:	78fb      	ldrb	r3, [r7, #3]
 8008232:	b2db      	uxtb	r3, r3
 8008234:	005b      	lsls	r3, r3, #1
 8008236:	b2db      	uxtb	r3, r3
 8008238:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800823a:	78fb      	ldrb	r3, [r7, #3]
 800823c:	b2db      	uxtb	r3, r3
 800823e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008242:	2b80      	cmp	r3, #128	; 0x80
 8008244:	d0ef      	beq.n	8008226 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008246:	4b27      	ldr	r3, [pc, #156]	; (80082e4 <xPortStartScheduler+0x134>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f1c3 0307 	rsb	r3, r3, #7
 800824e:	2b04      	cmp	r3, #4
 8008250:	d00a      	beq.n	8008268 <xPortStartScheduler+0xb8>
	__asm volatile
 8008252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	60bb      	str	r3, [r7, #8]
}
 8008264:	bf00      	nop
 8008266:	e7fe      	b.n	8008266 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008268:	4b1e      	ldr	r3, [pc, #120]	; (80082e4 <xPortStartScheduler+0x134>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	021b      	lsls	r3, r3, #8
 800826e:	4a1d      	ldr	r2, [pc, #116]	; (80082e4 <xPortStartScheduler+0x134>)
 8008270:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008272:	4b1c      	ldr	r3, [pc, #112]	; (80082e4 <xPortStartScheduler+0x134>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800827a:	4a1a      	ldr	r2, [pc, #104]	; (80082e4 <xPortStartScheduler+0x134>)
 800827c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	b2da      	uxtb	r2, r3
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008286:	4b18      	ldr	r3, [pc, #96]	; (80082e8 <xPortStartScheduler+0x138>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a17      	ldr	r2, [pc, #92]	; (80082e8 <xPortStartScheduler+0x138>)
 800828c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008290:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008292:	4b15      	ldr	r3, [pc, #84]	; (80082e8 <xPortStartScheduler+0x138>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a14      	ldr	r2, [pc, #80]	; (80082e8 <xPortStartScheduler+0x138>)
 8008298:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800829c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800829e:	f000 f8dd 	bl	800845c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082a2:	4b12      	ldr	r3, [pc, #72]	; (80082ec <xPortStartScheduler+0x13c>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80082a8:	f000 f8fc 	bl	80084a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082ac:	4b10      	ldr	r3, [pc, #64]	; (80082f0 <xPortStartScheduler+0x140>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a0f      	ldr	r2, [pc, #60]	; (80082f0 <xPortStartScheduler+0x140>)
 80082b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80082b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082b8:	f7ff ff66 	bl	8008188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082bc:	f7fe ff4a 	bl	8007154 <vTaskSwitchContext>
	prvTaskExitError();
 80082c0:	f7ff ff1e 	bl	8008100 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3718      	adds	r7, #24
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	e000ed00 	.word	0xe000ed00
 80082d4:	410fc271 	.word	0x410fc271
 80082d8:	410fc270 	.word	0x410fc270
 80082dc:	e000e400 	.word	0xe000e400
 80082e0:	20001540 	.word	0x20001540
 80082e4:	20001544 	.word	0x20001544
 80082e8:	e000ed20 	.word	0xe000ed20
 80082ec:	2000000c 	.word	0x2000000c
 80082f0:	e000ef34 	.word	0xe000ef34

080082f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
	__asm volatile
 80082fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fe:	f383 8811 	msr	BASEPRI, r3
 8008302:	f3bf 8f6f 	isb	sy
 8008306:	f3bf 8f4f 	dsb	sy
 800830a:	607b      	str	r3, [r7, #4]
}
 800830c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800830e:	4b0f      	ldr	r3, [pc, #60]	; (800834c <vPortEnterCritical+0x58>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	3301      	adds	r3, #1
 8008314:	4a0d      	ldr	r2, [pc, #52]	; (800834c <vPortEnterCritical+0x58>)
 8008316:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008318:	4b0c      	ldr	r3, [pc, #48]	; (800834c <vPortEnterCritical+0x58>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d10f      	bne.n	8008340 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008320:	4b0b      	ldr	r3, [pc, #44]	; (8008350 <vPortEnterCritical+0x5c>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00a      	beq.n	8008340 <vPortEnterCritical+0x4c>
	__asm volatile
 800832a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832e:	f383 8811 	msr	BASEPRI, r3
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	603b      	str	r3, [r7, #0]
}
 800833c:	bf00      	nop
 800833e:	e7fe      	b.n	800833e <vPortEnterCritical+0x4a>
	}
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	2000000c 	.word	0x2000000c
 8008350:	e000ed04 	.word	0xe000ed04

08008354 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800835a:	4b12      	ldr	r3, [pc, #72]	; (80083a4 <vPortExitCritical+0x50>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d10a      	bne.n	8008378 <vPortExitCritical+0x24>
	__asm volatile
 8008362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008366:	f383 8811 	msr	BASEPRI, r3
 800836a:	f3bf 8f6f 	isb	sy
 800836e:	f3bf 8f4f 	dsb	sy
 8008372:	607b      	str	r3, [r7, #4]
}
 8008374:	bf00      	nop
 8008376:	e7fe      	b.n	8008376 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008378:	4b0a      	ldr	r3, [pc, #40]	; (80083a4 <vPortExitCritical+0x50>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3b01      	subs	r3, #1
 800837e:	4a09      	ldr	r2, [pc, #36]	; (80083a4 <vPortExitCritical+0x50>)
 8008380:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008382:	4b08      	ldr	r3, [pc, #32]	; (80083a4 <vPortExitCritical+0x50>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d105      	bne.n	8008396 <vPortExitCritical+0x42>
 800838a:	2300      	movs	r3, #0
 800838c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	f383 8811 	msr	BASEPRI, r3
}
 8008394:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008396:	bf00      	nop
 8008398:	370c      	adds	r7, #12
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	2000000c 	.word	0x2000000c
	...

080083b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083b0:	f3ef 8009 	mrs	r0, PSP
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	4b15      	ldr	r3, [pc, #84]	; (8008410 <pxCurrentTCBConst>)
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	f01e 0f10 	tst.w	lr, #16
 80083c0:	bf08      	it	eq
 80083c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80083c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ca:	6010      	str	r0, [r2, #0]
 80083cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80083d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80083d4:	f380 8811 	msr	BASEPRI, r0
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	f3bf 8f6f 	isb	sy
 80083e0:	f7fe feb8 	bl	8007154 <vTaskSwitchContext>
 80083e4:	f04f 0000 	mov.w	r0, #0
 80083e8:	f380 8811 	msr	BASEPRI, r0
 80083ec:	bc09      	pop	{r0, r3}
 80083ee:	6819      	ldr	r1, [r3, #0]
 80083f0:	6808      	ldr	r0, [r1, #0]
 80083f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f6:	f01e 0f10 	tst.w	lr, #16
 80083fa:	bf08      	it	eq
 80083fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008400:	f380 8809 	msr	PSP, r0
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	f3af 8000 	nop.w

08008410 <pxCurrentTCBConst>:
 8008410:	20000f14 	.word	0x20000f14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008414:	bf00      	nop
 8008416:	bf00      	nop

08008418 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	607b      	str	r3, [r7, #4]
}
 8008430:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008432:	f7fe fdd5 	bl	8006fe0 <xTaskIncrementTick>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d003      	beq.n	8008444 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800843c:	4b06      	ldr	r3, [pc, #24]	; (8008458 <xPortSysTickHandler+0x40>)
 800843e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008442:	601a      	str	r2, [r3, #0]
 8008444:	2300      	movs	r3, #0
 8008446:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	f383 8811 	msr	BASEPRI, r3
}
 800844e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008450:	bf00      	nop
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	e000ed04 	.word	0xe000ed04

0800845c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800845c:	b480      	push	{r7}
 800845e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008460:	4b0b      	ldr	r3, [pc, #44]	; (8008490 <vPortSetupTimerInterrupt+0x34>)
 8008462:	2200      	movs	r2, #0
 8008464:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008466:	4b0b      	ldr	r3, [pc, #44]	; (8008494 <vPortSetupTimerInterrupt+0x38>)
 8008468:	2200      	movs	r2, #0
 800846a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800846c:	4b0a      	ldr	r3, [pc, #40]	; (8008498 <vPortSetupTimerInterrupt+0x3c>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a0a      	ldr	r2, [pc, #40]	; (800849c <vPortSetupTimerInterrupt+0x40>)
 8008472:	fba2 2303 	umull	r2, r3, r2, r3
 8008476:	099b      	lsrs	r3, r3, #6
 8008478:	4a09      	ldr	r2, [pc, #36]	; (80084a0 <vPortSetupTimerInterrupt+0x44>)
 800847a:	3b01      	subs	r3, #1
 800847c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800847e:	4b04      	ldr	r3, [pc, #16]	; (8008490 <vPortSetupTimerInterrupt+0x34>)
 8008480:	2207      	movs	r2, #7
 8008482:	601a      	str	r2, [r3, #0]
}
 8008484:	bf00      	nop
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	e000e010 	.word	0xe000e010
 8008494:	e000e018 	.word	0xe000e018
 8008498:	20000000 	.word	0x20000000
 800849c:	10624dd3 	.word	0x10624dd3
 80084a0:	e000e014 	.word	0xe000e014

080084a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80084b4 <vPortEnableVFP+0x10>
 80084a8:	6801      	ldr	r1, [r0, #0]
 80084aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80084ae:	6001      	str	r1, [r0, #0]
 80084b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80084b2:	bf00      	nop
 80084b4:	e000ed88 	.word	0xe000ed88

080084b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80084be:	f3ef 8305 	mrs	r3, IPSR
 80084c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2b0f      	cmp	r3, #15
 80084c8:	d914      	bls.n	80084f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80084ca:	4a17      	ldr	r2, [pc, #92]	; (8008528 <vPortValidateInterruptPriority+0x70>)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	4413      	add	r3, r2
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80084d4:	4b15      	ldr	r3, [pc, #84]	; (800852c <vPortValidateInterruptPriority+0x74>)
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	7afa      	ldrb	r2, [r7, #11]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d20a      	bcs.n	80084f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	607b      	str	r3, [r7, #4]
}
 80084f0:	bf00      	nop
 80084f2:	e7fe      	b.n	80084f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80084f4:	4b0e      	ldr	r3, [pc, #56]	; (8008530 <vPortValidateInterruptPriority+0x78>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80084fc:	4b0d      	ldr	r3, [pc, #52]	; (8008534 <vPortValidateInterruptPriority+0x7c>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	429a      	cmp	r2, r3
 8008502:	d90a      	bls.n	800851a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	603b      	str	r3, [r7, #0]
}
 8008516:	bf00      	nop
 8008518:	e7fe      	b.n	8008518 <vPortValidateInterruptPriority+0x60>
	}
 800851a:	bf00      	nop
 800851c:	3714      	adds	r7, #20
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	e000e3f0 	.word	0xe000e3f0
 800852c:	20001540 	.word	0x20001540
 8008530:	e000ed0c 	.word	0xe000ed0c
 8008534:	20001544 	.word	0x20001544

08008538 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b08a      	sub	sp, #40	; 0x28
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008540:	2300      	movs	r3, #0
 8008542:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008544:	f7fe fc90 	bl	8006e68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008548:	4b5b      	ldr	r3, [pc, #364]	; (80086b8 <pvPortMalloc+0x180>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d101      	bne.n	8008554 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008550:	f000 f920 	bl	8008794 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008554:	4b59      	ldr	r3, [pc, #356]	; (80086bc <pvPortMalloc+0x184>)
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4013      	ands	r3, r2
 800855c:	2b00      	cmp	r3, #0
 800855e:	f040 8093 	bne.w	8008688 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d01d      	beq.n	80085a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008568:	2208      	movs	r2, #8
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4413      	add	r3, r2
 800856e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f003 0307 	and.w	r3, r3, #7
 8008576:	2b00      	cmp	r3, #0
 8008578:	d014      	beq.n	80085a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f023 0307 	bic.w	r3, r3, #7
 8008580:	3308      	adds	r3, #8
 8008582:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f003 0307 	and.w	r3, r3, #7
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00a      	beq.n	80085a4 <pvPortMalloc+0x6c>
	__asm volatile
 800858e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	617b      	str	r3, [r7, #20]
}
 80085a0:	bf00      	nop
 80085a2:	e7fe      	b.n	80085a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d06e      	beq.n	8008688 <pvPortMalloc+0x150>
 80085aa:	4b45      	ldr	r3, [pc, #276]	; (80086c0 <pvPortMalloc+0x188>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d869      	bhi.n	8008688 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80085b4:	4b43      	ldr	r3, [pc, #268]	; (80086c4 <pvPortMalloc+0x18c>)
 80085b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80085b8:	4b42      	ldr	r3, [pc, #264]	; (80086c4 <pvPortMalloc+0x18c>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085be:	e004      	b.n	80085ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80085c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d903      	bls.n	80085dc <pvPortMalloc+0xa4>
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1f1      	bne.n	80085c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80085dc:	4b36      	ldr	r3, [pc, #216]	; (80086b8 <pvPortMalloc+0x180>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d050      	beq.n	8008688 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80085e6:	6a3b      	ldr	r3, [r7, #32]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2208      	movs	r2, #8
 80085ec:	4413      	add	r3, r2
 80085ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	6a3b      	ldr	r3, [r7, #32]
 80085f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	685a      	ldr	r2, [r3, #4]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	1ad2      	subs	r2, r2, r3
 8008600:	2308      	movs	r3, #8
 8008602:	005b      	lsls	r3, r3, #1
 8008604:	429a      	cmp	r2, r3
 8008606:	d91f      	bls.n	8008648 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4413      	add	r3, r2
 800860e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	f003 0307 	and.w	r3, r3, #7
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00a      	beq.n	8008630 <pvPortMalloc+0xf8>
	__asm volatile
 800861a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861e:	f383 8811 	msr	BASEPRI, r3
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	f3bf 8f4f 	dsb	sy
 800862a:	613b      	str	r3, [r7, #16]
}
 800862c:	bf00      	nop
 800862e:	e7fe      	b.n	800862e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	685a      	ldr	r2, [r3, #4]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	1ad2      	subs	r2, r2, r3
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800863c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008642:	69b8      	ldr	r0, [r7, #24]
 8008644:	f000 f908 	bl	8008858 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008648:	4b1d      	ldr	r3, [pc, #116]	; (80086c0 <pvPortMalloc+0x188>)
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	4a1b      	ldr	r2, [pc, #108]	; (80086c0 <pvPortMalloc+0x188>)
 8008654:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008656:	4b1a      	ldr	r3, [pc, #104]	; (80086c0 <pvPortMalloc+0x188>)
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	4b1b      	ldr	r3, [pc, #108]	; (80086c8 <pvPortMalloc+0x190>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	429a      	cmp	r2, r3
 8008660:	d203      	bcs.n	800866a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008662:	4b17      	ldr	r3, [pc, #92]	; (80086c0 <pvPortMalloc+0x188>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a18      	ldr	r2, [pc, #96]	; (80086c8 <pvPortMalloc+0x190>)
 8008668:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	4b13      	ldr	r3, [pc, #76]	; (80086bc <pvPortMalloc+0x184>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	431a      	orrs	r2, r3
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	2200      	movs	r2, #0
 800867c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800867e:	4b13      	ldr	r3, [pc, #76]	; (80086cc <pvPortMalloc+0x194>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	3301      	adds	r3, #1
 8008684:	4a11      	ldr	r2, [pc, #68]	; (80086cc <pvPortMalloc+0x194>)
 8008686:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008688:	f7fe fbfc 	bl	8006e84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	f003 0307 	and.w	r3, r3, #7
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00a      	beq.n	80086ac <pvPortMalloc+0x174>
	__asm volatile
 8008696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869a:	f383 8811 	msr	BASEPRI, r3
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	60fb      	str	r3, [r7, #12]
}
 80086a8:	bf00      	nop
 80086aa:	e7fe      	b.n	80086aa <pvPortMalloc+0x172>
	return pvReturn;
 80086ac:	69fb      	ldr	r3, [r7, #28]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3728      	adds	r7, #40	; 0x28
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	20002108 	.word	0x20002108
 80086bc:	2000211c 	.word	0x2000211c
 80086c0:	2000210c 	.word	0x2000210c
 80086c4:	20002100 	.word	0x20002100
 80086c8:	20002110 	.word	0x20002110
 80086cc:	20002114 	.word	0x20002114

080086d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d04d      	beq.n	800877e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80086e2:	2308      	movs	r3, #8
 80086e4:	425b      	negs	r3, r3
 80086e6:	697a      	ldr	r2, [r7, #20]
 80086e8:	4413      	add	r3, r2
 80086ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	685a      	ldr	r2, [r3, #4]
 80086f4:	4b24      	ldr	r3, [pc, #144]	; (8008788 <vPortFree+0xb8>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4013      	ands	r3, r2
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d10a      	bne.n	8008714 <vPortFree+0x44>
	__asm volatile
 80086fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	60fb      	str	r3, [r7, #12]
}
 8008710:	bf00      	nop
 8008712:	e7fe      	b.n	8008712 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00a      	beq.n	8008732 <vPortFree+0x62>
	__asm volatile
 800871c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008720:	f383 8811 	msr	BASEPRI, r3
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	60bb      	str	r3, [r7, #8]
}
 800872e:	bf00      	nop
 8008730:	e7fe      	b.n	8008730 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	685a      	ldr	r2, [r3, #4]
 8008736:	4b14      	ldr	r3, [pc, #80]	; (8008788 <vPortFree+0xb8>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4013      	ands	r3, r2
 800873c:	2b00      	cmp	r3, #0
 800873e:	d01e      	beq.n	800877e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d11a      	bne.n	800877e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	685a      	ldr	r2, [r3, #4]
 800874c:	4b0e      	ldr	r3, [pc, #56]	; (8008788 <vPortFree+0xb8>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	43db      	mvns	r3, r3
 8008752:	401a      	ands	r2, r3
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008758:	f7fe fb86 	bl	8006e68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	685a      	ldr	r2, [r3, #4]
 8008760:	4b0a      	ldr	r3, [pc, #40]	; (800878c <vPortFree+0xbc>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4413      	add	r3, r2
 8008766:	4a09      	ldr	r2, [pc, #36]	; (800878c <vPortFree+0xbc>)
 8008768:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800876a:	6938      	ldr	r0, [r7, #16]
 800876c:	f000 f874 	bl	8008858 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008770:	4b07      	ldr	r3, [pc, #28]	; (8008790 <vPortFree+0xc0>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	3301      	adds	r3, #1
 8008776:	4a06      	ldr	r2, [pc, #24]	; (8008790 <vPortFree+0xc0>)
 8008778:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800877a:	f7fe fb83 	bl	8006e84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800877e:	bf00      	nop
 8008780:	3718      	adds	r7, #24
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	2000211c 	.word	0x2000211c
 800878c:	2000210c 	.word	0x2000210c
 8008790:	20002118 	.word	0x20002118

08008794 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800879a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800879e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087a0:	4b27      	ldr	r3, [pc, #156]	; (8008840 <prvHeapInit+0xac>)
 80087a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f003 0307 	and.w	r3, r3, #7
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00c      	beq.n	80087c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	3307      	adds	r3, #7
 80087b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f023 0307 	bic.w	r3, r3, #7
 80087ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80087bc:	68ba      	ldr	r2, [r7, #8]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	4a1f      	ldr	r2, [pc, #124]	; (8008840 <prvHeapInit+0xac>)
 80087c4:	4413      	add	r3, r2
 80087c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80087cc:	4a1d      	ldr	r2, [pc, #116]	; (8008844 <prvHeapInit+0xb0>)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80087d2:	4b1c      	ldr	r3, [pc, #112]	; (8008844 <prvHeapInit+0xb0>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	4413      	add	r3, r2
 80087de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80087e0:	2208      	movs	r2, #8
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	1a9b      	subs	r3, r3, r2
 80087e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f023 0307 	bic.w	r3, r3, #7
 80087ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	4a15      	ldr	r2, [pc, #84]	; (8008848 <prvHeapInit+0xb4>)
 80087f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80087f6:	4b14      	ldr	r3, [pc, #80]	; (8008848 <prvHeapInit+0xb4>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2200      	movs	r2, #0
 80087fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80087fe:	4b12      	ldr	r3, [pc, #72]	; (8008848 <prvHeapInit+0xb4>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2200      	movs	r2, #0
 8008804:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	1ad2      	subs	r2, r2, r3
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008814:	4b0c      	ldr	r3, [pc, #48]	; (8008848 <prvHeapInit+0xb4>)
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	4a0a      	ldr	r2, [pc, #40]	; (800884c <prvHeapInit+0xb8>)
 8008822:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	4a09      	ldr	r2, [pc, #36]	; (8008850 <prvHeapInit+0xbc>)
 800882a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800882c:	4b09      	ldr	r3, [pc, #36]	; (8008854 <prvHeapInit+0xc0>)
 800882e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008832:	601a      	str	r2, [r3, #0]
}
 8008834:	bf00      	nop
 8008836:	3714      	adds	r7, #20
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr
 8008840:	20001548 	.word	0x20001548
 8008844:	20002100 	.word	0x20002100
 8008848:	20002108 	.word	0x20002108
 800884c:	20002110 	.word	0x20002110
 8008850:	2000210c 	.word	0x2000210c
 8008854:	2000211c 	.word	0x2000211c

08008858 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008860:	4b28      	ldr	r3, [pc, #160]	; (8008904 <prvInsertBlockIntoFreeList+0xac>)
 8008862:	60fb      	str	r3, [r7, #12]
 8008864:	e002      	b.n	800886c <prvInsertBlockIntoFreeList+0x14>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	429a      	cmp	r2, r3
 8008874:	d8f7      	bhi.n	8008866 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	4413      	add	r3, r2
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	429a      	cmp	r2, r3
 8008886:	d108      	bne.n	800889a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	685a      	ldr	r2, [r3, #4]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	441a      	add	r2, r3
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	68ba      	ldr	r2, [r7, #8]
 80088a4:	441a      	add	r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d118      	bne.n	80088e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	4b15      	ldr	r3, [pc, #84]	; (8008908 <prvInsertBlockIntoFreeList+0xb0>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d00d      	beq.n	80088d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	685a      	ldr	r2, [r3, #4]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	441a      	add	r2, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	601a      	str	r2, [r3, #0]
 80088d4:	e008      	b.n	80088e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80088d6:	4b0c      	ldr	r3, [pc, #48]	; (8008908 <prvInsertBlockIntoFreeList+0xb0>)
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	601a      	str	r2, [r3, #0]
 80088de:	e003      	b.n	80088e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d002      	beq.n	80088f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088f6:	bf00      	nop
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	20002100 	.word	0x20002100
 8008908:	20002108 	.word	0x20002108

0800890c <__errno>:
 800890c:	4b01      	ldr	r3, [pc, #4]	; (8008914 <__errno+0x8>)
 800890e:	6818      	ldr	r0, [r3, #0]
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop
 8008914:	20000010 	.word	0x20000010

08008918 <std>:
 8008918:	2300      	movs	r3, #0
 800891a:	b510      	push	{r4, lr}
 800891c:	4604      	mov	r4, r0
 800891e:	e9c0 3300 	strd	r3, r3, [r0]
 8008922:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008926:	6083      	str	r3, [r0, #8]
 8008928:	8181      	strh	r1, [r0, #12]
 800892a:	6643      	str	r3, [r0, #100]	; 0x64
 800892c:	81c2      	strh	r2, [r0, #14]
 800892e:	6183      	str	r3, [r0, #24]
 8008930:	4619      	mov	r1, r3
 8008932:	2208      	movs	r2, #8
 8008934:	305c      	adds	r0, #92	; 0x5c
 8008936:	f000 f923 	bl	8008b80 <memset>
 800893a:	4b05      	ldr	r3, [pc, #20]	; (8008950 <std+0x38>)
 800893c:	6263      	str	r3, [r4, #36]	; 0x24
 800893e:	4b05      	ldr	r3, [pc, #20]	; (8008954 <std+0x3c>)
 8008940:	62a3      	str	r3, [r4, #40]	; 0x28
 8008942:	4b05      	ldr	r3, [pc, #20]	; (8008958 <std+0x40>)
 8008944:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008946:	4b05      	ldr	r3, [pc, #20]	; (800895c <std+0x44>)
 8008948:	6224      	str	r4, [r4, #32]
 800894a:	6323      	str	r3, [r4, #48]	; 0x30
 800894c:	bd10      	pop	{r4, pc}
 800894e:	bf00      	nop
 8008950:	08008eb5 	.word	0x08008eb5
 8008954:	08008ed7 	.word	0x08008ed7
 8008958:	08008f0f 	.word	0x08008f0f
 800895c:	08008f33 	.word	0x08008f33

08008960 <_cleanup_r>:
 8008960:	4901      	ldr	r1, [pc, #4]	; (8008968 <_cleanup_r+0x8>)
 8008962:	f000 b8af 	b.w	8008ac4 <_fwalk_reent>
 8008966:	bf00      	nop
 8008968:	0800908d 	.word	0x0800908d

0800896c <__sfmoreglue>:
 800896c:	b570      	push	{r4, r5, r6, lr}
 800896e:	2268      	movs	r2, #104	; 0x68
 8008970:	1e4d      	subs	r5, r1, #1
 8008972:	4355      	muls	r5, r2
 8008974:	460e      	mov	r6, r1
 8008976:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800897a:	f000 f975 	bl	8008c68 <_malloc_r>
 800897e:	4604      	mov	r4, r0
 8008980:	b140      	cbz	r0, 8008994 <__sfmoreglue+0x28>
 8008982:	2100      	movs	r1, #0
 8008984:	e9c0 1600 	strd	r1, r6, [r0]
 8008988:	300c      	adds	r0, #12
 800898a:	60a0      	str	r0, [r4, #8]
 800898c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008990:	f000 f8f6 	bl	8008b80 <memset>
 8008994:	4620      	mov	r0, r4
 8008996:	bd70      	pop	{r4, r5, r6, pc}

08008998 <__sfp_lock_acquire>:
 8008998:	4801      	ldr	r0, [pc, #4]	; (80089a0 <__sfp_lock_acquire+0x8>)
 800899a:	f000 b8d8 	b.w	8008b4e <__retarget_lock_acquire_recursive>
 800899e:	bf00      	nop
 80089a0:	20002121 	.word	0x20002121

080089a4 <__sfp_lock_release>:
 80089a4:	4801      	ldr	r0, [pc, #4]	; (80089ac <__sfp_lock_release+0x8>)
 80089a6:	f000 b8d3 	b.w	8008b50 <__retarget_lock_release_recursive>
 80089aa:	bf00      	nop
 80089ac:	20002121 	.word	0x20002121

080089b0 <__sinit_lock_acquire>:
 80089b0:	4801      	ldr	r0, [pc, #4]	; (80089b8 <__sinit_lock_acquire+0x8>)
 80089b2:	f000 b8cc 	b.w	8008b4e <__retarget_lock_acquire_recursive>
 80089b6:	bf00      	nop
 80089b8:	20002122 	.word	0x20002122

080089bc <__sinit_lock_release>:
 80089bc:	4801      	ldr	r0, [pc, #4]	; (80089c4 <__sinit_lock_release+0x8>)
 80089be:	f000 b8c7 	b.w	8008b50 <__retarget_lock_release_recursive>
 80089c2:	bf00      	nop
 80089c4:	20002122 	.word	0x20002122

080089c8 <__sinit>:
 80089c8:	b510      	push	{r4, lr}
 80089ca:	4604      	mov	r4, r0
 80089cc:	f7ff fff0 	bl	80089b0 <__sinit_lock_acquire>
 80089d0:	69a3      	ldr	r3, [r4, #24]
 80089d2:	b11b      	cbz	r3, 80089dc <__sinit+0x14>
 80089d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089d8:	f7ff bff0 	b.w	80089bc <__sinit_lock_release>
 80089dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80089e0:	6523      	str	r3, [r4, #80]	; 0x50
 80089e2:	4b13      	ldr	r3, [pc, #76]	; (8008a30 <__sinit+0x68>)
 80089e4:	4a13      	ldr	r2, [pc, #76]	; (8008a34 <__sinit+0x6c>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80089ea:	42a3      	cmp	r3, r4
 80089ec:	bf04      	itt	eq
 80089ee:	2301      	moveq	r3, #1
 80089f0:	61a3      	streq	r3, [r4, #24]
 80089f2:	4620      	mov	r0, r4
 80089f4:	f000 f820 	bl	8008a38 <__sfp>
 80089f8:	6060      	str	r0, [r4, #4]
 80089fa:	4620      	mov	r0, r4
 80089fc:	f000 f81c 	bl	8008a38 <__sfp>
 8008a00:	60a0      	str	r0, [r4, #8]
 8008a02:	4620      	mov	r0, r4
 8008a04:	f000 f818 	bl	8008a38 <__sfp>
 8008a08:	2200      	movs	r2, #0
 8008a0a:	60e0      	str	r0, [r4, #12]
 8008a0c:	2104      	movs	r1, #4
 8008a0e:	6860      	ldr	r0, [r4, #4]
 8008a10:	f7ff ff82 	bl	8008918 <std>
 8008a14:	68a0      	ldr	r0, [r4, #8]
 8008a16:	2201      	movs	r2, #1
 8008a18:	2109      	movs	r1, #9
 8008a1a:	f7ff ff7d 	bl	8008918 <std>
 8008a1e:	68e0      	ldr	r0, [r4, #12]
 8008a20:	2202      	movs	r2, #2
 8008a22:	2112      	movs	r1, #18
 8008a24:	f7ff ff78 	bl	8008918 <std>
 8008a28:	2301      	movs	r3, #1
 8008a2a:	61a3      	str	r3, [r4, #24]
 8008a2c:	e7d2      	b.n	80089d4 <__sinit+0xc>
 8008a2e:	bf00      	nop
 8008a30:	08009ea0 	.word	0x08009ea0
 8008a34:	08008961 	.word	0x08008961

08008a38 <__sfp>:
 8008a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3a:	4607      	mov	r7, r0
 8008a3c:	f7ff ffac 	bl	8008998 <__sfp_lock_acquire>
 8008a40:	4b1e      	ldr	r3, [pc, #120]	; (8008abc <__sfp+0x84>)
 8008a42:	681e      	ldr	r6, [r3, #0]
 8008a44:	69b3      	ldr	r3, [r6, #24]
 8008a46:	b913      	cbnz	r3, 8008a4e <__sfp+0x16>
 8008a48:	4630      	mov	r0, r6
 8008a4a:	f7ff ffbd 	bl	80089c8 <__sinit>
 8008a4e:	3648      	adds	r6, #72	; 0x48
 8008a50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008a54:	3b01      	subs	r3, #1
 8008a56:	d503      	bpl.n	8008a60 <__sfp+0x28>
 8008a58:	6833      	ldr	r3, [r6, #0]
 8008a5a:	b30b      	cbz	r3, 8008aa0 <__sfp+0x68>
 8008a5c:	6836      	ldr	r6, [r6, #0]
 8008a5e:	e7f7      	b.n	8008a50 <__sfp+0x18>
 8008a60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a64:	b9d5      	cbnz	r5, 8008a9c <__sfp+0x64>
 8008a66:	4b16      	ldr	r3, [pc, #88]	; (8008ac0 <__sfp+0x88>)
 8008a68:	60e3      	str	r3, [r4, #12]
 8008a6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a6e:	6665      	str	r5, [r4, #100]	; 0x64
 8008a70:	f000 f86c 	bl	8008b4c <__retarget_lock_init_recursive>
 8008a74:	f7ff ff96 	bl	80089a4 <__sfp_lock_release>
 8008a78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a80:	6025      	str	r5, [r4, #0]
 8008a82:	61a5      	str	r5, [r4, #24]
 8008a84:	2208      	movs	r2, #8
 8008a86:	4629      	mov	r1, r5
 8008a88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a8c:	f000 f878 	bl	8008b80 <memset>
 8008a90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a98:	4620      	mov	r0, r4
 8008a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a9c:	3468      	adds	r4, #104	; 0x68
 8008a9e:	e7d9      	b.n	8008a54 <__sfp+0x1c>
 8008aa0:	2104      	movs	r1, #4
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	f7ff ff62 	bl	800896c <__sfmoreglue>
 8008aa8:	4604      	mov	r4, r0
 8008aaa:	6030      	str	r0, [r6, #0]
 8008aac:	2800      	cmp	r0, #0
 8008aae:	d1d5      	bne.n	8008a5c <__sfp+0x24>
 8008ab0:	f7ff ff78 	bl	80089a4 <__sfp_lock_release>
 8008ab4:	230c      	movs	r3, #12
 8008ab6:	603b      	str	r3, [r7, #0]
 8008ab8:	e7ee      	b.n	8008a98 <__sfp+0x60>
 8008aba:	bf00      	nop
 8008abc:	08009ea0 	.word	0x08009ea0
 8008ac0:	ffff0001 	.word	0xffff0001

08008ac4 <_fwalk_reent>:
 8008ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ac8:	4606      	mov	r6, r0
 8008aca:	4688      	mov	r8, r1
 8008acc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ad0:	2700      	movs	r7, #0
 8008ad2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ad6:	f1b9 0901 	subs.w	r9, r9, #1
 8008ada:	d505      	bpl.n	8008ae8 <_fwalk_reent+0x24>
 8008adc:	6824      	ldr	r4, [r4, #0]
 8008ade:	2c00      	cmp	r4, #0
 8008ae0:	d1f7      	bne.n	8008ad2 <_fwalk_reent+0xe>
 8008ae2:	4638      	mov	r0, r7
 8008ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ae8:	89ab      	ldrh	r3, [r5, #12]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d907      	bls.n	8008afe <_fwalk_reent+0x3a>
 8008aee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008af2:	3301      	adds	r3, #1
 8008af4:	d003      	beq.n	8008afe <_fwalk_reent+0x3a>
 8008af6:	4629      	mov	r1, r5
 8008af8:	4630      	mov	r0, r6
 8008afa:	47c0      	blx	r8
 8008afc:	4307      	orrs	r7, r0
 8008afe:	3568      	adds	r5, #104	; 0x68
 8008b00:	e7e9      	b.n	8008ad6 <_fwalk_reent+0x12>
	...

08008b04 <__libc_init_array>:
 8008b04:	b570      	push	{r4, r5, r6, lr}
 8008b06:	4d0d      	ldr	r5, [pc, #52]	; (8008b3c <__libc_init_array+0x38>)
 8008b08:	4c0d      	ldr	r4, [pc, #52]	; (8008b40 <__libc_init_array+0x3c>)
 8008b0a:	1b64      	subs	r4, r4, r5
 8008b0c:	10a4      	asrs	r4, r4, #2
 8008b0e:	2600      	movs	r6, #0
 8008b10:	42a6      	cmp	r6, r4
 8008b12:	d109      	bne.n	8008b28 <__libc_init_array+0x24>
 8008b14:	4d0b      	ldr	r5, [pc, #44]	; (8008b44 <__libc_init_array+0x40>)
 8008b16:	4c0c      	ldr	r4, [pc, #48]	; (8008b48 <__libc_init_array+0x44>)
 8008b18:	f001 f908 	bl	8009d2c <_init>
 8008b1c:	1b64      	subs	r4, r4, r5
 8008b1e:	10a4      	asrs	r4, r4, #2
 8008b20:	2600      	movs	r6, #0
 8008b22:	42a6      	cmp	r6, r4
 8008b24:	d105      	bne.n	8008b32 <__libc_init_array+0x2e>
 8008b26:	bd70      	pop	{r4, r5, r6, pc}
 8008b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b2c:	4798      	blx	r3
 8008b2e:	3601      	adds	r6, #1
 8008b30:	e7ee      	b.n	8008b10 <__libc_init_array+0xc>
 8008b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b36:	4798      	blx	r3
 8008b38:	3601      	adds	r6, #1
 8008b3a:	e7f2      	b.n	8008b22 <__libc_init_array+0x1e>
 8008b3c:	08009ee0 	.word	0x08009ee0
 8008b40:	08009ee0 	.word	0x08009ee0
 8008b44:	08009ee0 	.word	0x08009ee0
 8008b48:	08009ee4 	.word	0x08009ee4

08008b4c <__retarget_lock_init_recursive>:
 8008b4c:	4770      	bx	lr

08008b4e <__retarget_lock_acquire_recursive>:
 8008b4e:	4770      	bx	lr

08008b50 <__retarget_lock_release_recursive>:
 8008b50:	4770      	bx	lr
	...

08008b54 <malloc>:
 8008b54:	4b02      	ldr	r3, [pc, #8]	; (8008b60 <malloc+0xc>)
 8008b56:	4601      	mov	r1, r0
 8008b58:	6818      	ldr	r0, [r3, #0]
 8008b5a:	f000 b885 	b.w	8008c68 <_malloc_r>
 8008b5e:	bf00      	nop
 8008b60:	20000010 	.word	0x20000010

08008b64 <memcpy>:
 8008b64:	440a      	add	r2, r1
 8008b66:	4291      	cmp	r1, r2
 8008b68:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b6c:	d100      	bne.n	8008b70 <memcpy+0xc>
 8008b6e:	4770      	bx	lr
 8008b70:	b510      	push	{r4, lr}
 8008b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b7a:	4291      	cmp	r1, r2
 8008b7c:	d1f9      	bne.n	8008b72 <memcpy+0xe>
 8008b7e:	bd10      	pop	{r4, pc}

08008b80 <memset>:
 8008b80:	4402      	add	r2, r0
 8008b82:	4603      	mov	r3, r0
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d100      	bne.n	8008b8a <memset+0xa>
 8008b88:	4770      	bx	lr
 8008b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b8e:	e7f9      	b.n	8008b84 <memset+0x4>

08008b90 <_free_r>:
 8008b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b92:	2900      	cmp	r1, #0
 8008b94:	d044      	beq.n	8008c20 <_free_r+0x90>
 8008b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b9a:	9001      	str	r0, [sp, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f1a1 0404 	sub.w	r4, r1, #4
 8008ba2:	bfb8      	it	lt
 8008ba4:	18e4      	addlt	r4, r4, r3
 8008ba6:	f000 fabf 	bl	8009128 <__malloc_lock>
 8008baa:	4a1e      	ldr	r2, [pc, #120]	; (8008c24 <_free_r+0x94>)
 8008bac:	9801      	ldr	r0, [sp, #4]
 8008bae:	6813      	ldr	r3, [r2, #0]
 8008bb0:	b933      	cbnz	r3, 8008bc0 <_free_r+0x30>
 8008bb2:	6063      	str	r3, [r4, #4]
 8008bb4:	6014      	str	r4, [r2, #0]
 8008bb6:	b003      	add	sp, #12
 8008bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bbc:	f000 baba 	b.w	8009134 <__malloc_unlock>
 8008bc0:	42a3      	cmp	r3, r4
 8008bc2:	d908      	bls.n	8008bd6 <_free_r+0x46>
 8008bc4:	6825      	ldr	r5, [r4, #0]
 8008bc6:	1961      	adds	r1, r4, r5
 8008bc8:	428b      	cmp	r3, r1
 8008bca:	bf01      	itttt	eq
 8008bcc:	6819      	ldreq	r1, [r3, #0]
 8008bce:	685b      	ldreq	r3, [r3, #4]
 8008bd0:	1949      	addeq	r1, r1, r5
 8008bd2:	6021      	streq	r1, [r4, #0]
 8008bd4:	e7ed      	b.n	8008bb2 <_free_r+0x22>
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	b10b      	cbz	r3, 8008be0 <_free_r+0x50>
 8008bdc:	42a3      	cmp	r3, r4
 8008bde:	d9fa      	bls.n	8008bd6 <_free_r+0x46>
 8008be0:	6811      	ldr	r1, [r2, #0]
 8008be2:	1855      	adds	r5, r2, r1
 8008be4:	42a5      	cmp	r5, r4
 8008be6:	d10b      	bne.n	8008c00 <_free_r+0x70>
 8008be8:	6824      	ldr	r4, [r4, #0]
 8008bea:	4421      	add	r1, r4
 8008bec:	1854      	adds	r4, r2, r1
 8008bee:	42a3      	cmp	r3, r4
 8008bf0:	6011      	str	r1, [r2, #0]
 8008bf2:	d1e0      	bne.n	8008bb6 <_free_r+0x26>
 8008bf4:	681c      	ldr	r4, [r3, #0]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	6053      	str	r3, [r2, #4]
 8008bfa:	4421      	add	r1, r4
 8008bfc:	6011      	str	r1, [r2, #0]
 8008bfe:	e7da      	b.n	8008bb6 <_free_r+0x26>
 8008c00:	d902      	bls.n	8008c08 <_free_r+0x78>
 8008c02:	230c      	movs	r3, #12
 8008c04:	6003      	str	r3, [r0, #0]
 8008c06:	e7d6      	b.n	8008bb6 <_free_r+0x26>
 8008c08:	6825      	ldr	r5, [r4, #0]
 8008c0a:	1961      	adds	r1, r4, r5
 8008c0c:	428b      	cmp	r3, r1
 8008c0e:	bf04      	itt	eq
 8008c10:	6819      	ldreq	r1, [r3, #0]
 8008c12:	685b      	ldreq	r3, [r3, #4]
 8008c14:	6063      	str	r3, [r4, #4]
 8008c16:	bf04      	itt	eq
 8008c18:	1949      	addeq	r1, r1, r5
 8008c1a:	6021      	streq	r1, [r4, #0]
 8008c1c:	6054      	str	r4, [r2, #4]
 8008c1e:	e7ca      	b.n	8008bb6 <_free_r+0x26>
 8008c20:	b003      	add	sp, #12
 8008c22:	bd30      	pop	{r4, r5, pc}
 8008c24:	20002124 	.word	0x20002124

08008c28 <sbrk_aligned>:
 8008c28:	b570      	push	{r4, r5, r6, lr}
 8008c2a:	4e0e      	ldr	r6, [pc, #56]	; (8008c64 <sbrk_aligned+0x3c>)
 8008c2c:	460c      	mov	r4, r1
 8008c2e:	6831      	ldr	r1, [r6, #0]
 8008c30:	4605      	mov	r5, r0
 8008c32:	b911      	cbnz	r1, 8008c3a <sbrk_aligned+0x12>
 8008c34:	f000 f90e 	bl	8008e54 <_sbrk_r>
 8008c38:	6030      	str	r0, [r6, #0]
 8008c3a:	4621      	mov	r1, r4
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	f000 f909 	bl	8008e54 <_sbrk_r>
 8008c42:	1c43      	adds	r3, r0, #1
 8008c44:	d00a      	beq.n	8008c5c <sbrk_aligned+0x34>
 8008c46:	1cc4      	adds	r4, r0, #3
 8008c48:	f024 0403 	bic.w	r4, r4, #3
 8008c4c:	42a0      	cmp	r0, r4
 8008c4e:	d007      	beq.n	8008c60 <sbrk_aligned+0x38>
 8008c50:	1a21      	subs	r1, r4, r0
 8008c52:	4628      	mov	r0, r5
 8008c54:	f000 f8fe 	bl	8008e54 <_sbrk_r>
 8008c58:	3001      	adds	r0, #1
 8008c5a:	d101      	bne.n	8008c60 <sbrk_aligned+0x38>
 8008c5c:	f04f 34ff 	mov.w	r4, #4294967295
 8008c60:	4620      	mov	r0, r4
 8008c62:	bd70      	pop	{r4, r5, r6, pc}
 8008c64:	20002128 	.word	0x20002128

08008c68 <_malloc_r>:
 8008c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c6c:	1ccd      	adds	r5, r1, #3
 8008c6e:	f025 0503 	bic.w	r5, r5, #3
 8008c72:	3508      	adds	r5, #8
 8008c74:	2d0c      	cmp	r5, #12
 8008c76:	bf38      	it	cc
 8008c78:	250c      	movcc	r5, #12
 8008c7a:	2d00      	cmp	r5, #0
 8008c7c:	4607      	mov	r7, r0
 8008c7e:	db01      	blt.n	8008c84 <_malloc_r+0x1c>
 8008c80:	42a9      	cmp	r1, r5
 8008c82:	d905      	bls.n	8008c90 <_malloc_r+0x28>
 8008c84:	230c      	movs	r3, #12
 8008c86:	603b      	str	r3, [r7, #0]
 8008c88:	2600      	movs	r6, #0
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c90:	4e2e      	ldr	r6, [pc, #184]	; (8008d4c <_malloc_r+0xe4>)
 8008c92:	f000 fa49 	bl	8009128 <__malloc_lock>
 8008c96:	6833      	ldr	r3, [r6, #0]
 8008c98:	461c      	mov	r4, r3
 8008c9a:	bb34      	cbnz	r4, 8008cea <_malloc_r+0x82>
 8008c9c:	4629      	mov	r1, r5
 8008c9e:	4638      	mov	r0, r7
 8008ca0:	f7ff ffc2 	bl	8008c28 <sbrk_aligned>
 8008ca4:	1c43      	adds	r3, r0, #1
 8008ca6:	4604      	mov	r4, r0
 8008ca8:	d14d      	bne.n	8008d46 <_malloc_r+0xde>
 8008caa:	6834      	ldr	r4, [r6, #0]
 8008cac:	4626      	mov	r6, r4
 8008cae:	2e00      	cmp	r6, #0
 8008cb0:	d140      	bne.n	8008d34 <_malloc_r+0xcc>
 8008cb2:	6823      	ldr	r3, [r4, #0]
 8008cb4:	4631      	mov	r1, r6
 8008cb6:	4638      	mov	r0, r7
 8008cb8:	eb04 0803 	add.w	r8, r4, r3
 8008cbc:	f000 f8ca 	bl	8008e54 <_sbrk_r>
 8008cc0:	4580      	cmp	r8, r0
 8008cc2:	d13a      	bne.n	8008d3a <_malloc_r+0xd2>
 8008cc4:	6821      	ldr	r1, [r4, #0]
 8008cc6:	3503      	adds	r5, #3
 8008cc8:	1a6d      	subs	r5, r5, r1
 8008cca:	f025 0503 	bic.w	r5, r5, #3
 8008cce:	3508      	adds	r5, #8
 8008cd0:	2d0c      	cmp	r5, #12
 8008cd2:	bf38      	it	cc
 8008cd4:	250c      	movcc	r5, #12
 8008cd6:	4629      	mov	r1, r5
 8008cd8:	4638      	mov	r0, r7
 8008cda:	f7ff ffa5 	bl	8008c28 <sbrk_aligned>
 8008cde:	3001      	adds	r0, #1
 8008ce0:	d02b      	beq.n	8008d3a <_malloc_r+0xd2>
 8008ce2:	6823      	ldr	r3, [r4, #0]
 8008ce4:	442b      	add	r3, r5
 8008ce6:	6023      	str	r3, [r4, #0]
 8008ce8:	e00e      	b.n	8008d08 <_malloc_r+0xa0>
 8008cea:	6822      	ldr	r2, [r4, #0]
 8008cec:	1b52      	subs	r2, r2, r5
 8008cee:	d41e      	bmi.n	8008d2e <_malloc_r+0xc6>
 8008cf0:	2a0b      	cmp	r2, #11
 8008cf2:	d916      	bls.n	8008d22 <_malloc_r+0xba>
 8008cf4:	1961      	adds	r1, r4, r5
 8008cf6:	42a3      	cmp	r3, r4
 8008cf8:	6025      	str	r5, [r4, #0]
 8008cfa:	bf18      	it	ne
 8008cfc:	6059      	strne	r1, [r3, #4]
 8008cfe:	6863      	ldr	r3, [r4, #4]
 8008d00:	bf08      	it	eq
 8008d02:	6031      	streq	r1, [r6, #0]
 8008d04:	5162      	str	r2, [r4, r5]
 8008d06:	604b      	str	r3, [r1, #4]
 8008d08:	4638      	mov	r0, r7
 8008d0a:	f104 060b 	add.w	r6, r4, #11
 8008d0e:	f000 fa11 	bl	8009134 <__malloc_unlock>
 8008d12:	f026 0607 	bic.w	r6, r6, #7
 8008d16:	1d23      	adds	r3, r4, #4
 8008d18:	1af2      	subs	r2, r6, r3
 8008d1a:	d0b6      	beq.n	8008c8a <_malloc_r+0x22>
 8008d1c:	1b9b      	subs	r3, r3, r6
 8008d1e:	50a3      	str	r3, [r4, r2]
 8008d20:	e7b3      	b.n	8008c8a <_malloc_r+0x22>
 8008d22:	6862      	ldr	r2, [r4, #4]
 8008d24:	42a3      	cmp	r3, r4
 8008d26:	bf0c      	ite	eq
 8008d28:	6032      	streq	r2, [r6, #0]
 8008d2a:	605a      	strne	r2, [r3, #4]
 8008d2c:	e7ec      	b.n	8008d08 <_malloc_r+0xa0>
 8008d2e:	4623      	mov	r3, r4
 8008d30:	6864      	ldr	r4, [r4, #4]
 8008d32:	e7b2      	b.n	8008c9a <_malloc_r+0x32>
 8008d34:	4634      	mov	r4, r6
 8008d36:	6876      	ldr	r6, [r6, #4]
 8008d38:	e7b9      	b.n	8008cae <_malloc_r+0x46>
 8008d3a:	230c      	movs	r3, #12
 8008d3c:	603b      	str	r3, [r7, #0]
 8008d3e:	4638      	mov	r0, r7
 8008d40:	f000 f9f8 	bl	8009134 <__malloc_unlock>
 8008d44:	e7a1      	b.n	8008c8a <_malloc_r+0x22>
 8008d46:	6025      	str	r5, [r4, #0]
 8008d48:	e7de      	b.n	8008d08 <_malloc_r+0xa0>
 8008d4a:	bf00      	nop
 8008d4c:	20002124 	.word	0x20002124

08008d50 <iprintf>:
 8008d50:	b40f      	push	{r0, r1, r2, r3}
 8008d52:	4b0a      	ldr	r3, [pc, #40]	; (8008d7c <iprintf+0x2c>)
 8008d54:	b513      	push	{r0, r1, r4, lr}
 8008d56:	681c      	ldr	r4, [r3, #0]
 8008d58:	b124      	cbz	r4, 8008d64 <iprintf+0x14>
 8008d5a:	69a3      	ldr	r3, [r4, #24]
 8008d5c:	b913      	cbnz	r3, 8008d64 <iprintf+0x14>
 8008d5e:	4620      	mov	r0, r4
 8008d60:	f7ff fe32 	bl	80089c8 <__sinit>
 8008d64:	ab05      	add	r3, sp, #20
 8008d66:	9a04      	ldr	r2, [sp, #16]
 8008d68:	68a1      	ldr	r1, [r4, #8]
 8008d6a:	9301      	str	r3, [sp, #4]
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	f000 fb6d 	bl	800944c <_vfiprintf_r>
 8008d72:	b002      	add	sp, #8
 8008d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d78:	b004      	add	sp, #16
 8008d7a:	4770      	bx	lr
 8008d7c:	20000010 	.word	0x20000010

08008d80 <cleanup_glue>:
 8008d80:	b538      	push	{r3, r4, r5, lr}
 8008d82:	460c      	mov	r4, r1
 8008d84:	6809      	ldr	r1, [r1, #0]
 8008d86:	4605      	mov	r5, r0
 8008d88:	b109      	cbz	r1, 8008d8e <cleanup_glue+0xe>
 8008d8a:	f7ff fff9 	bl	8008d80 <cleanup_glue>
 8008d8e:	4621      	mov	r1, r4
 8008d90:	4628      	mov	r0, r5
 8008d92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d96:	f7ff befb 	b.w	8008b90 <_free_r>
	...

08008d9c <_reclaim_reent>:
 8008d9c:	4b2c      	ldr	r3, [pc, #176]	; (8008e50 <_reclaim_reent+0xb4>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4283      	cmp	r3, r0
 8008da2:	b570      	push	{r4, r5, r6, lr}
 8008da4:	4604      	mov	r4, r0
 8008da6:	d051      	beq.n	8008e4c <_reclaim_reent+0xb0>
 8008da8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008daa:	b143      	cbz	r3, 8008dbe <_reclaim_reent+0x22>
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d14a      	bne.n	8008e48 <_reclaim_reent+0xac>
 8008db2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008db4:	6819      	ldr	r1, [r3, #0]
 8008db6:	b111      	cbz	r1, 8008dbe <_reclaim_reent+0x22>
 8008db8:	4620      	mov	r0, r4
 8008dba:	f7ff fee9 	bl	8008b90 <_free_r>
 8008dbe:	6961      	ldr	r1, [r4, #20]
 8008dc0:	b111      	cbz	r1, 8008dc8 <_reclaim_reent+0x2c>
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f7ff fee4 	bl	8008b90 <_free_r>
 8008dc8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008dca:	b111      	cbz	r1, 8008dd2 <_reclaim_reent+0x36>
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f7ff fedf 	bl	8008b90 <_free_r>
 8008dd2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008dd4:	b111      	cbz	r1, 8008ddc <_reclaim_reent+0x40>
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	f7ff feda 	bl	8008b90 <_free_r>
 8008ddc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008dde:	b111      	cbz	r1, 8008de6 <_reclaim_reent+0x4a>
 8008de0:	4620      	mov	r0, r4
 8008de2:	f7ff fed5 	bl	8008b90 <_free_r>
 8008de6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008de8:	b111      	cbz	r1, 8008df0 <_reclaim_reent+0x54>
 8008dea:	4620      	mov	r0, r4
 8008dec:	f7ff fed0 	bl	8008b90 <_free_r>
 8008df0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008df2:	b111      	cbz	r1, 8008dfa <_reclaim_reent+0x5e>
 8008df4:	4620      	mov	r0, r4
 8008df6:	f7ff fecb 	bl	8008b90 <_free_r>
 8008dfa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008dfc:	b111      	cbz	r1, 8008e04 <_reclaim_reent+0x68>
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f7ff fec6 	bl	8008b90 <_free_r>
 8008e04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e06:	b111      	cbz	r1, 8008e0e <_reclaim_reent+0x72>
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f7ff fec1 	bl	8008b90 <_free_r>
 8008e0e:	69a3      	ldr	r3, [r4, #24]
 8008e10:	b1e3      	cbz	r3, 8008e4c <_reclaim_reent+0xb0>
 8008e12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008e14:	4620      	mov	r0, r4
 8008e16:	4798      	blx	r3
 8008e18:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008e1a:	b1b9      	cbz	r1, 8008e4c <_reclaim_reent+0xb0>
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008e22:	f7ff bfad 	b.w	8008d80 <cleanup_glue>
 8008e26:	5949      	ldr	r1, [r1, r5]
 8008e28:	b941      	cbnz	r1, 8008e3c <_reclaim_reent+0xa0>
 8008e2a:	3504      	adds	r5, #4
 8008e2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e2e:	2d80      	cmp	r5, #128	; 0x80
 8008e30:	68d9      	ldr	r1, [r3, #12]
 8008e32:	d1f8      	bne.n	8008e26 <_reclaim_reent+0x8a>
 8008e34:	4620      	mov	r0, r4
 8008e36:	f7ff feab 	bl	8008b90 <_free_r>
 8008e3a:	e7ba      	b.n	8008db2 <_reclaim_reent+0x16>
 8008e3c:	680e      	ldr	r6, [r1, #0]
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f7ff fea6 	bl	8008b90 <_free_r>
 8008e44:	4631      	mov	r1, r6
 8008e46:	e7ef      	b.n	8008e28 <_reclaim_reent+0x8c>
 8008e48:	2500      	movs	r5, #0
 8008e4a:	e7ef      	b.n	8008e2c <_reclaim_reent+0x90>
 8008e4c:	bd70      	pop	{r4, r5, r6, pc}
 8008e4e:	bf00      	nop
 8008e50:	20000010 	.word	0x20000010

08008e54 <_sbrk_r>:
 8008e54:	b538      	push	{r3, r4, r5, lr}
 8008e56:	4d06      	ldr	r5, [pc, #24]	; (8008e70 <_sbrk_r+0x1c>)
 8008e58:	2300      	movs	r3, #0
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	4608      	mov	r0, r1
 8008e5e:	602b      	str	r3, [r5, #0]
 8008e60:	f7f8 fc0a 	bl	8001678 <_sbrk>
 8008e64:	1c43      	adds	r3, r0, #1
 8008e66:	d102      	bne.n	8008e6e <_sbrk_r+0x1a>
 8008e68:	682b      	ldr	r3, [r5, #0]
 8008e6a:	b103      	cbz	r3, 8008e6e <_sbrk_r+0x1a>
 8008e6c:	6023      	str	r3, [r4, #0]
 8008e6e:	bd38      	pop	{r3, r4, r5, pc}
 8008e70:	2000212c 	.word	0x2000212c

08008e74 <siprintf>:
 8008e74:	b40e      	push	{r1, r2, r3}
 8008e76:	b500      	push	{lr}
 8008e78:	b09c      	sub	sp, #112	; 0x70
 8008e7a:	ab1d      	add	r3, sp, #116	; 0x74
 8008e7c:	9002      	str	r0, [sp, #8]
 8008e7e:	9006      	str	r0, [sp, #24]
 8008e80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e84:	4809      	ldr	r0, [pc, #36]	; (8008eac <siprintf+0x38>)
 8008e86:	9107      	str	r1, [sp, #28]
 8008e88:	9104      	str	r1, [sp, #16]
 8008e8a:	4909      	ldr	r1, [pc, #36]	; (8008eb0 <siprintf+0x3c>)
 8008e8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e90:	9105      	str	r1, [sp, #20]
 8008e92:	6800      	ldr	r0, [r0, #0]
 8008e94:	9301      	str	r3, [sp, #4]
 8008e96:	a902      	add	r1, sp, #8
 8008e98:	f000 f9ae 	bl	80091f8 <_svfiprintf_r>
 8008e9c:	9b02      	ldr	r3, [sp, #8]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	701a      	strb	r2, [r3, #0]
 8008ea2:	b01c      	add	sp, #112	; 0x70
 8008ea4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ea8:	b003      	add	sp, #12
 8008eaa:	4770      	bx	lr
 8008eac:	20000010 	.word	0x20000010
 8008eb0:	ffff0208 	.word	0xffff0208

08008eb4 <__sread>:
 8008eb4:	b510      	push	{r4, lr}
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ebc:	f000 fd8a 	bl	80099d4 <_read_r>
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	bfab      	itete	ge
 8008ec4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ec6:	89a3      	ldrhlt	r3, [r4, #12]
 8008ec8:	181b      	addge	r3, r3, r0
 8008eca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ece:	bfac      	ite	ge
 8008ed0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ed2:	81a3      	strhlt	r3, [r4, #12]
 8008ed4:	bd10      	pop	{r4, pc}

08008ed6 <__swrite>:
 8008ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eda:	461f      	mov	r7, r3
 8008edc:	898b      	ldrh	r3, [r1, #12]
 8008ede:	05db      	lsls	r3, r3, #23
 8008ee0:	4605      	mov	r5, r0
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	4616      	mov	r6, r2
 8008ee6:	d505      	bpl.n	8008ef4 <__swrite+0x1e>
 8008ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eec:	2302      	movs	r3, #2
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f000 f908 	bl	8009104 <_lseek_r>
 8008ef4:	89a3      	ldrh	r3, [r4, #12]
 8008ef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008efa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008efe:	81a3      	strh	r3, [r4, #12]
 8008f00:	4632      	mov	r2, r6
 8008f02:	463b      	mov	r3, r7
 8008f04:	4628      	mov	r0, r5
 8008f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0a:	f000 b817 	b.w	8008f3c <_write_r>

08008f0e <__sseek>:
 8008f0e:	b510      	push	{r4, lr}
 8008f10:	460c      	mov	r4, r1
 8008f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f16:	f000 f8f5 	bl	8009104 <_lseek_r>
 8008f1a:	1c43      	adds	r3, r0, #1
 8008f1c:	89a3      	ldrh	r3, [r4, #12]
 8008f1e:	bf15      	itete	ne
 8008f20:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f2a:	81a3      	strheq	r3, [r4, #12]
 8008f2c:	bf18      	it	ne
 8008f2e:	81a3      	strhne	r3, [r4, #12]
 8008f30:	bd10      	pop	{r4, pc}

08008f32 <__sclose>:
 8008f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f36:	f000 b813 	b.w	8008f60 <_close_r>
	...

08008f3c <_write_r>:
 8008f3c:	b538      	push	{r3, r4, r5, lr}
 8008f3e:	4d07      	ldr	r5, [pc, #28]	; (8008f5c <_write_r+0x20>)
 8008f40:	4604      	mov	r4, r0
 8008f42:	4608      	mov	r0, r1
 8008f44:	4611      	mov	r1, r2
 8008f46:	2200      	movs	r2, #0
 8008f48:	602a      	str	r2, [r5, #0]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	f7f8 fb43 	bl	80015d6 <_write>
 8008f50:	1c43      	adds	r3, r0, #1
 8008f52:	d102      	bne.n	8008f5a <_write_r+0x1e>
 8008f54:	682b      	ldr	r3, [r5, #0]
 8008f56:	b103      	cbz	r3, 8008f5a <_write_r+0x1e>
 8008f58:	6023      	str	r3, [r4, #0]
 8008f5a:	bd38      	pop	{r3, r4, r5, pc}
 8008f5c:	2000212c 	.word	0x2000212c

08008f60 <_close_r>:
 8008f60:	b538      	push	{r3, r4, r5, lr}
 8008f62:	4d06      	ldr	r5, [pc, #24]	; (8008f7c <_close_r+0x1c>)
 8008f64:	2300      	movs	r3, #0
 8008f66:	4604      	mov	r4, r0
 8008f68:	4608      	mov	r0, r1
 8008f6a:	602b      	str	r3, [r5, #0]
 8008f6c:	f7f8 fb4f 	bl	800160e <_close>
 8008f70:	1c43      	adds	r3, r0, #1
 8008f72:	d102      	bne.n	8008f7a <_close_r+0x1a>
 8008f74:	682b      	ldr	r3, [r5, #0]
 8008f76:	b103      	cbz	r3, 8008f7a <_close_r+0x1a>
 8008f78:	6023      	str	r3, [r4, #0]
 8008f7a:	bd38      	pop	{r3, r4, r5, pc}
 8008f7c:	2000212c 	.word	0x2000212c

08008f80 <__sflush_r>:
 8008f80:	898a      	ldrh	r2, [r1, #12]
 8008f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f86:	4605      	mov	r5, r0
 8008f88:	0710      	lsls	r0, r2, #28
 8008f8a:	460c      	mov	r4, r1
 8008f8c:	d458      	bmi.n	8009040 <__sflush_r+0xc0>
 8008f8e:	684b      	ldr	r3, [r1, #4]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	dc05      	bgt.n	8008fa0 <__sflush_r+0x20>
 8008f94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	dc02      	bgt.n	8008fa0 <__sflush_r+0x20>
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fa2:	2e00      	cmp	r6, #0
 8008fa4:	d0f9      	beq.n	8008f9a <__sflush_r+0x1a>
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fac:	682f      	ldr	r7, [r5, #0]
 8008fae:	602b      	str	r3, [r5, #0]
 8008fb0:	d032      	beq.n	8009018 <__sflush_r+0x98>
 8008fb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008fb4:	89a3      	ldrh	r3, [r4, #12]
 8008fb6:	075a      	lsls	r2, r3, #29
 8008fb8:	d505      	bpl.n	8008fc6 <__sflush_r+0x46>
 8008fba:	6863      	ldr	r3, [r4, #4]
 8008fbc:	1ac0      	subs	r0, r0, r3
 8008fbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fc0:	b10b      	cbz	r3, 8008fc6 <__sflush_r+0x46>
 8008fc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fc4:	1ac0      	subs	r0, r0, r3
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	4602      	mov	r2, r0
 8008fca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fcc:	6a21      	ldr	r1, [r4, #32]
 8008fce:	4628      	mov	r0, r5
 8008fd0:	47b0      	blx	r6
 8008fd2:	1c43      	adds	r3, r0, #1
 8008fd4:	89a3      	ldrh	r3, [r4, #12]
 8008fd6:	d106      	bne.n	8008fe6 <__sflush_r+0x66>
 8008fd8:	6829      	ldr	r1, [r5, #0]
 8008fda:	291d      	cmp	r1, #29
 8008fdc:	d82c      	bhi.n	8009038 <__sflush_r+0xb8>
 8008fde:	4a2a      	ldr	r2, [pc, #168]	; (8009088 <__sflush_r+0x108>)
 8008fe0:	40ca      	lsrs	r2, r1
 8008fe2:	07d6      	lsls	r6, r2, #31
 8008fe4:	d528      	bpl.n	8009038 <__sflush_r+0xb8>
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	6062      	str	r2, [r4, #4]
 8008fea:	04d9      	lsls	r1, r3, #19
 8008fec:	6922      	ldr	r2, [r4, #16]
 8008fee:	6022      	str	r2, [r4, #0]
 8008ff0:	d504      	bpl.n	8008ffc <__sflush_r+0x7c>
 8008ff2:	1c42      	adds	r2, r0, #1
 8008ff4:	d101      	bne.n	8008ffa <__sflush_r+0x7a>
 8008ff6:	682b      	ldr	r3, [r5, #0]
 8008ff8:	b903      	cbnz	r3, 8008ffc <__sflush_r+0x7c>
 8008ffa:	6560      	str	r0, [r4, #84]	; 0x54
 8008ffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ffe:	602f      	str	r7, [r5, #0]
 8009000:	2900      	cmp	r1, #0
 8009002:	d0ca      	beq.n	8008f9a <__sflush_r+0x1a>
 8009004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009008:	4299      	cmp	r1, r3
 800900a:	d002      	beq.n	8009012 <__sflush_r+0x92>
 800900c:	4628      	mov	r0, r5
 800900e:	f7ff fdbf 	bl	8008b90 <_free_r>
 8009012:	2000      	movs	r0, #0
 8009014:	6360      	str	r0, [r4, #52]	; 0x34
 8009016:	e7c1      	b.n	8008f9c <__sflush_r+0x1c>
 8009018:	6a21      	ldr	r1, [r4, #32]
 800901a:	2301      	movs	r3, #1
 800901c:	4628      	mov	r0, r5
 800901e:	47b0      	blx	r6
 8009020:	1c41      	adds	r1, r0, #1
 8009022:	d1c7      	bne.n	8008fb4 <__sflush_r+0x34>
 8009024:	682b      	ldr	r3, [r5, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d0c4      	beq.n	8008fb4 <__sflush_r+0x34>
 800902a:	2b1d      	cmp	r3, #29
 800902c:	d001      	beq.n	8009032 <__sflush_r+0xb2>
 800902e:	2b16      	cmp	r3, #22
 8009030:	d101      	bne.n	8009036 <__sflush_r+0xb6>
 8009032:	602f      	str	r7, [r5, #0]
 8009034:	e7b1      	b.n	8008f9a <__sflush_r+0x1a>
 8009036:	89a3      	ldrh	r3, [r4, #12]
 8009038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800903c:	81a3      	strh	r3, [r4, #12]
 800903e:	e7ad      	b.n	8008f9c <__sflush_r+0x1c>
 8009040:	690f      	ldr	r7, [r1, #16]
 8009042:	2f00      	cmp	r7, #0
 8009044:	d0a9      	beq.n	8008f9a <__sflush_r+0x1a>
 8009046:	0793      	lsls	r3, r2, #30
 8009048:	680e      	ldr	r6, [r1, #0]
 800904a:	bf08      	it	eq
 800904c:	694b      	ldreq	r3, [r1, #20]
 800904e:	600f      	str	r7, [r1, #0]
 8009050:	bf18      	it	ne
 8009052:	2300      	movne	r3, #0
 8009054:	eba6 0807 	sub.w	r8, r6, r7
 8009058:	608b      	str	r3, [r1, #8]
 800905a:	f1b8 0f00 	cmp.w	r8, #0
 800905e:	dd9c      	ble.n	8008f9a <__sflush_r+0x1a>
 8009060:	6a21      	ldr	r1, [r4, #32]
 8009062:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009064:	4643      	mov	r3, r8
 8009066:	463a      	mov	r2, r7
 8009068:	4628      	mov	r0, r5
 800906a:	47b0      	blx	r6
 800906c:	2800      	cmp	r0, #0
 800906e:	dc06      	bgt.n	800907e <__sflush_r+0xfe>
 8009070:	89a3      	ldrh	r3, [r4, #12]
 8009072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009076:	81a3      	strh	r3, [r4, #12]
 8009078:	f04f 30ff 	mov.w	r0, #4294967295
 800907c:	e78e      	b.n	8008f9c <__sflush_r+0x1c>
 800907e:	4407      	add	r7, r0
 8009080:	eba8 0800 	sub.w	r8, r8, r0
 8009084:	e7e9      	b.n	800905a <__sflush_r+0xda>
 8009086:	bf00      	nop
 8009088:	20400001 	.word	0x20400001

0800908c <_fflush_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	690b      	ldr	r3, [r1, #16]
 8009090:	4605      	mov	r5, r0
 8009092:	460c      	mov	r4, r1
 8009094:	b913      	cbnz	r3, 800909c <_fflush_r+0x10>
 8009096:	2500      	movs	r5, #0
 8009098:	4628      	mov	r0, r5
 800909a:	bd38      	pop	{r3, r4, r5, pc}
 800909c:	b118      	cbz	r0, 80090a6 <_fflush_r+0x1a>
 800909e:	6983      	ldr	r3, [r0, #24]
 80090a0:	b90b      	cbnz	r3, 80090a6 <_fflush_r+0x1a>
 80090a2:	f7ff fc91 	bl	80089c8 <__sinit>
 80090a6:	4b14      	ldr	r3, [pc, #80]	; (80090f8 <_fflush_r+0x6c>)
 80090a8:	429c      	cmp	r4, r3
 80090aa:	d11b      	bne.n	80090e4 <_fflush_r+0x58>
 80090ac:	686c      	ldr	r4, [r5, #4]
 80090ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d0ef      	beq.n	8009096 <_fflush_r+0xa>
 80090b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090b8:	07d0      	lsls	r0, r2, #31
 80090ba:	d404      	bmi.n	80090c6 <_fflush_r+0x3a>
 80090bc:	0599      	lsls	r1, r3, #22
 80090be:	d402      	bmi.n	80090c6 <_fflush_r+0x3a>
 80090c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090c2:	f7ff fd44 	bl	8008b4e <__retarget_lock_acquire_recursive>
 80090c6:	4628      	mov	r0, r5
 80090c8:	4621      	mov	r1, r4
 80090ca:	f7ff ff59 	bl	8008f80 <__sflush_r>
 80090ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090d0:	07da      	lsls	r2, r3, #31
 80090d2:	4605      	mov	r5, r0
 80090d4:	d4e0      	bmi.n	8009098 <_fflush_r+0xc>
 80090d6:	89a3      	ldrh	r3, [r4, #12]
 80090d8:	059b      	lsls	r3, r3, #22
 80090da:	d4dd      	bmi.n	8009098 <_fflush_r+0xc>
 80090dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090de:	f7ff fd37 	bl	8008b50 <__retarget_lock_release_recursive>
 80090e2:	e7d9      	b.n	8009098 <_fflush_r+0xc>
 80090e4:	4b05      	ldr	r3, [pc, #20]	; (80090fc <_fflush_r+0x70>)
 80090e6:	429c      	cmp	r4, r3
 80090e8:	d101      	bne.n	80090ee <_fflush_r+0x62>
 80090ea:	68ac      	ldr	r4, [r5, #8]
 80090ec:	e7df      	b.n	80090ae <_fflush_r+0x22>
 80090ee:	4b04      	ldr	r3, [pc, #16]	; (8009100 <_fflush_r+0x74>)
 80090f0:	429c      	cmp	r4, r3
 80090f2:	bf08      	it	eq
 80090f4:	68ec      	ldreq	r4, [r5, #12]
 80090f6:	e7da      	b.n	80090ae <_fflush_r+0x22>
 80090f8:	08009e60 	.word	0x08009e60
 80090fc:	08009e80 	.word	0x08009e80
 8009100:	08009e40 	.word	0x08009e40

08009104 <_lseek_r>:
 8009104:	b538      	push	{r3, r4, r5, lr}
 8009106:	4d07      	ldr	r5, [pc, #28]	; (8009124 <_lseek_r+0x20>)
 8009108:	4604      	mov	r4, r0
 800910a:	4608      	mov	r0, r1
 800910c:	4611      	mov	r1, r2
 800910e:	2200      	movs	r2, #0
 8009110:	602a      	str	r2, [r5, #0]
 8009112:	461a      	mov	r2, r3
 8009114:	f7f8 faa2 	bl	800165c <_lseek>
 8009118:	1c43      	adds	r3, r0, #1
 800911a:	d102      	bne.n	8009122 <_lseek_r+0x1e>
 800911c:	682b      	ldr	r3, [r5, #0]
 800911e:	b103      	cbz	r3, 8009122 <_lseek_r+0x1e>
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	bd38      	pop	{r3, r4, r5, pc}
 8009124:	2000212c 	.word	0x2000212c

08009128 <__malloc_lock>:
 8009128:	4801      	ldr	r0, [pc, #4]	; (8009130 <__malloc_lock+0x8>)
 800912a:	f7ff bd10 	b.w	8008b4e <__retarget_lock_acquire_recursive>
 800912e:	bf00      	nop
 8009130:	20002120 	.word	0x20002120

08009134 <__malloc_unlock>:
 8009134:	4801      	ldr	r0, [pc, #4]	; (800913c <__malloc_unlock+0x8>)
 8009136:	f7ff bd0b 	b.w	8008b50 <__retarget_lock_release_recursive>
 800913a:	bf00      	nop
 800913c:	20002120 	.word	0x20002120

08009140 <__ssputs_r>:
 8009140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009144:	688e      	ldr	r6, [r1, #8]
 8009146:	429e      	cmp	r6, r3
 8009148:	4682      	mov	sl, r0
 800914a:	460c      	mov	r4, r1
 800914c:	4690      	mov	r8, r2
 800914e:	461f      	mov	r7, r3
 8009150:	d838      	bhi.n	80091c4 <__ssputs_r+0x84>
 8009152:	898a      	ldrh	r2, [r1, #12]
 8009154:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009158:	d032      	beq.n	80091c0 <__ssputs_r+0x80>
 800915a:	6825      	ldr	r5, [r4, #0]
 800915c:	6909      	ldr	r1, [r1, #16]
 800915e:	eba5 0901 	sub.w	r9, r5, r1
 8009162:	6965      	ldr	r5, [r4, #20]
 8009164:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009168:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800916c:	3301      	adds	r3, #1
 800916e:	444b      	add	r3, r9
 8009170:	106d      	asrs	r5, r5, #1
 8009172:	429d      	cmp	r5, r3
 8009174:	bf38      	it	cc
 8009176:	461d      	movcc	r5, r3
 8009178:	0553      	lsls	r3, r2, #21
 800917a:	d531      	bpl.n	80091e0 <__ssputs_r+0xa0>
 800917c:	4629      	mov	r1, r5
 800917e:	f7ff fd73 	bl	8008c68 <_malloc_r>
 8009182:	4606      	mov	r6, r0
 8009184:	b950      	cbnz	r0, 800919c <__ssputs_r+0x5c>
 8009186:	230c      	movs	r3, #12
 8009188:	f8ca 3000 	str.w	r3, [sl]
 800918c:	89a3      	ldrh	r3, [r4, #12]
 800918e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009192:	81a3      	strh	r3, [r4, #12]
 8009194:	f04f 30ff 	mov.w	r0, #4294967295
 8009198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800919c:	6921      	ldr	r1, [r4, #16]
 800919e:	464a      	mov	r2, r9
 80091a0:	f7ff fce0 	bl	8008b64 <memcpy>
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091ae:	81a3      	strh	r3, [r4, #12]
 80091b0:	6126      	str	r6, [r4, #16]
 80091b2:	6165      	str	r5, [r4, #20]
 80091b4:	444e      	add	r6, r9
 80091b6:	eba5 0509 	sub.w	r5, r5, r9
 80091ba:	6026      	str	r6, [r4, #0]
 80091bc:	60a5      	str	r5, [r4, #8]
 80091be:	463e      	mov	r6, r7
 80091c0:	42be      	cmp	r6, r7
 80091c2:	d900      	bls.n	80091c6 <__ssputs_r+0x86>
 80091c4:	463e      	mov	r6, r7
 80091c6:	6820      	ldr	r0, [r4, #0]
 80091c8:	4632      	mov	r2, r6
 80091ca:	4641      	mov	r1, r8
 80091cc:	f000 fd3a 	bl	8009c44 <memmove>
 80091d0:	68a3      	ldr	r3, [r4, #8]
 80091d2:	1b9b      	subs	r3, r3, r6
 80091d4:	60a3      	str	r3, [r4, #8]
 80091d6:	6823      	ldr	r3, [r4, #0]
 80091d8:	4433      	add	r3, r6
 80091da:	6023      	str	r3, [r4, #0]
 80091dc:	2000      	movs	r0, #0
 80091de:	e7db      	b.n	8009198 <__ssputs_r+0x58>
 80091e0:	462a      	mov	r2, r5
 80091e2:	f000 fd49 	bl	8009c78 <_realloc_r>
 80091e6:	4606      	mov	r6, r0
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d1e1      	bne.n	80091b0 <__ssputs_r+0x70>
 80091ec:	6921      	ldr	r1, [r4, #16]
 80091ee:	4650      	mov	r0, sl
 80091f0:	f7ff fcce 	bl	8008b90 <_free_r>
 80091f4:	e7c7      	b.n	8009186 <__ssputs_r+0x46>
	...

080091f8 <_svfiprintf_r>:
 80091f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091fc:	4698      	mov	r8, r3
 80091fe:	898b      	ldrh	r3, [r1, #12]
 8009200:	061b      	lsls	r3, r3, #24
 8009202:	b09d      	sub	sp, #116	; 0x74
 8009204:	4607      	mov	r7, r0
 8009206:	460d      	mov	r5, r1
 8009208:	4614      	mov	r4, r2
 800920a:	d50e      	bpl.n	800922a <_svfiprintf_r+0x32>
 800920c:	690b      	ldr	r3, [r1, #16]
 800920e:	b963      	cbnz	r3, 800922a <_svfiprintf_r+0x32>
 8009210:	2140      	movs	r1, #64	; 0x40
 8009212:	f7ff fd29 	bl	8008c68 <_malloc_r>
 8009216:	6028      	str	r0, [r5, #0]
 8009218:	6128      	str	r0, [r5, #16]
 800921a:	b920      	cbnz	r0, 8009226 <_svfiprintf_r+0x2e>
 800921c:	230c      	movs	r3, #12
 800921e:	603b      	str	r3, [r7, #0]
 8009220:	f04f 30ff 	mov.w	r0, #4294967295
 8009224:	e0d1      	b.n	80093ca <_svfiprintf_r+0x1d2>
 8009226:	2340      	movs	r3, #64	; 0x40
 8009228:	616b      	str	r3, [r5, #20]
 800922a:	2300      	movs	r3, #0
 800922c:	9309      	str	r3, [sp, #36]	; 0x24
 800922e:	2320      	movs	r3, #32
 8009230:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009234:	f8cd 800c 	str.w	r8, [sp, #12]
 8009238:	2330      	movs	r3, #48	; 0x30
 800923a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80093e4 <_svfiprintf_r+0x1ec>
 800923e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009242:	f04f 0901 	mov.w	r9, #1
 8009246:	4623      	mov	r3, r4
 8009248:	469a      	mov	sl, r3
 800924a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800924e:	b10a      	cbz	r2, 8009254 <_svfiprintf_r+0x5c>
 8009250:	2a25      	cmp	r2, #37	; 0x25
 8009252:	d1f9      	bne.n	8009248 <_svfiprintf_r+0x50>
 8009254:	ebba 0b04 	subs.w	fp, sl, r4
 8009258:	d00b      	beq.n	8009272 <_svfiprintf_r+0x7a>
 800925a:	465b      	mov	r3, fp
 800925c:	4622      	mov	r2, r4
 800925e:	4629      	mov	r1, r5
 8009260:	4638      	mov	r0, r7
 8009262:	f7ff ff6d 	bl	8009140 <__ssputs_r>
 8009266:	3001      	adds	r0, #1
 8009268:	f000 80aa 	beq.w	80093c0 <_svfiprintf_r+0x1c8>
 800926c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800926e:	445a      	add	r2, fp
 8009270:	9209      	str	r2, [sp, #36]	; 0x24
 8009272:	f89a 3000 	ldrb.w	r3, [sl]
 8009276:	2b00      	cmp	r3, #0
 8009278:	f000 80a2 	beq.w	80093c0 <_svfiprintf_r+0x1c8>
 800927c:	2300      	movs	r3, #0
 800927e:	f04f 32ff 	mov.w	r2, #4294967295
 8009282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009286:	f10a 0a01 	add.w	sl, sl, #1
 800928a:	9304      	str	r3, [sp, #16]
 800928c:	9307      	str	r3, [sp, #28]
 800928e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009292:	931a      	str	r3, [sp, #104]	; 0x68
 8009294:	4654      	mov	r4, sl
 8009296:	2205      	movs	r2, #5
 8009298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800929c:	4851      	ldr	r0, [pc, #324]	; (80093e4 <_svfiprintf_r+0x1ec>)
 800929e:	f7f6 ff97 	bl	80001d0 <memchr>
 80092a2:	9a04      	ldr	r2, [sp, #16]
 80092a4:	b9d8      	cbnz	r0, 80092de <_svfiprintf_r+0xe6>
 80092a6:	06d0      	lsls	r0, r2, #27
 80092a8:	bf44      	itt	mi
 80092aa:	2320      	movmi	r3, #32
 80092ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092b0:	0711      	lsls	r1, r2, #28
 80092b2:	bf44      	itt	mi
 80092b4:	232b      	movmi	r3, #43	; 0x2b
 80092b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092ba:	f89a 3000 	ldrb.w	r3, [sl]
 80092be:	2b2a      	cmp	r3, #42	; 0x2a
 80092c0:	d015      	beq.n	80092ee <_svfiprintf_r+0xf6>
 80092c2:	9a07      	ldr	r2, [sp, #28]
 80092c4:	4654      	mov	r4, sl
 80092c6:	2000      	movs	r0, #0
 80092c8:	f04f 0c0a 	mov.w	ip, #10
 80092cc:	4621      	mov	r1, r4
 80092ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092d2:	3b30      	subs	r3, #48	; 0x30
 80092d4:	2b09      	cmp	r3, #9
 80092d6:	d94e      	bls.n	8009376 <_svfiprintf_r+0x17e>
 80092d8:	b1b0      	cbz	r0, 8009308 <_svfiprintf_r+0x110>
 80092da:	9207      	str	r2, [sp, #28]
 80092dc:	e014      	b.n	8009308 <_svfiprintf_r+0x110>
 80092de:	eba0 0308 	sub.w	r3, r0, r8
 80092e2:	fa09 f303 	lsl.w	r3, r9, r3
 80092e6:	4313      	orrs	r3, r2
 80092e8:	9304      	str	r3, [sp, #16]
 80092ea:	46a2      	mov	sl, r4
 80092ec:	e7d2      	b.n	8009294 <_svfiprintf_r+0x9c>
 80092ee:	9b03      	ldr	r3, [sp, #12]
 80092f0:	1d19      	adds	r1, r3, #4
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	9103      	str	r1, [sp, #12]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	bfbb      	ittet	lt
 80092fa:	425b      	neglt	r3, r3
 80092fc:	f042 0202 	orrlt.w	r2, r2, #2
 8009300:	9307      	strge	r3, [sp, #28]
 8009302:	9307      	strlt	r3, [sp, #28]
 8009304:	bfb8      	it	lt
 8009306:	9204      	strlt	r2, [sp, #16]
 8009308:	7823      	ldrb	r3, [r4, #0]
 800930a:	2b2e      	cmp	r3, #46	; 0x2e
 800930c:	d10c      	bne.n	8009328 <_svfiprintf_r+0x130>
 800930e:	7863      	ldrb	r3, [r4, #1]
 8009310:	2b2a      	cmp	r3, #42	; 0x2a
 8009312:	d135      	bne.n	8009380 <_svfiprintf_r+0x188>
 8009314:	9b03      	ldr	r3, [sp, #12]
 8009316:	1d1a      	adds	r2, r3, #4
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	9203      	str	r2, [sp, #12]
 800931c:	2b00      	cmp	r3, #0
 800931e:	bfb8      	it	lt
 8009320:	f04f 33ff 	movlt.w	r3, #4294967295
 8009324:	3402      	adds	r4, #2
 8009326:	9305      	str	r3, [sp, #20]
 8009328:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80093f4 <_svfiprintf_r+0x1fc>
 800932c:	7821      	ldrb	r1, [r4, #0]
 800932e:	2203      	movs	r2, #3
 8009330:	4650      	mov	r0, sl
 8009332:	f7f6 ff4d 	bl	80001d0 <memchr>
 8009336:	b140      	cbz	r0, 800934a <_svfiprintf_r+0x152>
 8009338:	2340      	movs	r3, #64	; 0x40
 800933a:	eba0 000a 	sub.w	r0, r0, sl
 800933e:	fa03 f000 	lsl.w	r0, r3, r0
 8009342:	9b04      	ldr	r3, [sp, #16]
 8009344:	4303      	orrs	r3, r0
 8009346:	3401      	adds	r4, #1
 8009348:	9304      	str	r3, [sp, #16]
 800934a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800934e:	4826      	ldr	r0, [pc, #152]	; (80093e8 <_svfiprintf_r+0x1f0>)
 8009350:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009354:	2206      	movs	r2, #6
 8009356:	f7f6 ff3b 	bl	80001d0 <memchr>
 800935a:	2800      	cmp	r0, #0
 800935c:	d038      	beq.n	80093d0 <_svfiprintf_r+0x1d8>
 800935e:	4b23      	ldr	r3, [pc, #140]	; (80093ec <_svfiprintf_r+0x1f4>)
 8009360:	bb1b      	cbnz	r3, 80093aa <_svfiprintf_r+0x1b2>
 8009362:	9b03      	ldr	r3, [sp, #12]
 8009364:	3307      	adds	r3, #7
 8009366:	f023 0307 	bic.w	r3, r3, #7
 800936a:	3308      	adds	r3, #8
 800936c:	9303      	str	r3, [sp, #12]
 800936e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009370:	4433      	add	r3, r6
 8009372:	9309      	str	r3, [sp, #36]	; 0x24
 8009374:	e767      	b.n	8009246 <_svfiprintf_r+0x4e>
 8009376:	fb0c 3202 	mla	r2, ip, r2, r3
 800937a:	460c      	mov	r4, r1
 800937c:	2001      	movs	r0, #1
 800937e:	e7a5      	b.n	80092cc <_svfiprintf_r+0xd4>
 8009380:	2300      	movs	r3, #0
 8009382:	3401      	adds	r4, #1
 8009384:	9305      	str	r3, [sp, #20]
 8009386:	4619      	mov	r1, r3
 8009388:	f04f 0c0a 	mov.w	ip, #10
 800938c:	4620      	mov	r0, r4
 800938e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009392:	3a30      	subs	r2, #48	; 0x30
 8009394:	2a09      	cmp	r2, #9
 8009396:	d903      	bls.n	80093a0 <_svfiprintf_r+0x1a8>
 8009398:	2b00      	cmp	r3, #0
 800939a:	d0c5      	beq.n	8009328 <_svfiprintf_r+0x130>
 800939c:	9105      	str	r1, [sp, #20]
 800939e:	e7c3      	b.n	8009328 <_svfiprintf_r+0x130>
 80093a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80093a4:	4604      	mov	r4, r0
 80093a6:	2301      	movs	r3, #1
 80093a8:	e7f0      	b.n	800938c <_svfiprintf_r+0x194>
 80093aa:	ab03      	add	r3, sp, #12
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	462a      	mov	r2, r5
 80093b0:	4b0f      	ldr	r3, [pc, #60]	; (80093f0 <_svfiprintf_r+0x1f8>)
 80093b2:	a904      	add	r1, sp, #16
 80093b4:	4638      	mov	r0, r7
 80093b6:	f3af 8000 	nop.w
 80093ba:	1c42      	adds	r2, r0, #1
 80093bc:	4606      	mov	r6, r0
 80093be:	d1d6      	bne.n	800936e <_svfiprintf_r+0x176>
 80093c0:	89ab      	ldrh	r3, [r5, #12]
 80093c2:	065b      	lsls	r3, r3, #25
 80093c4:	f53f af2c 	bmi.w	8009220 <_svfiprintf_r+0x28>
 80093c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093ca:	b01d      	add	sp, #116	; 0x74
 80093cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d0:	ab03      	add	r3, sp, #12
 80093d2:	9300      	str	r3, [sp, #0]
 80093d4:	462a      	mov	r2, r5
 80093d6:	4b06      	ldr	r3, [pc, #24]	; (80093f0 <_svfiprintf_r+0x1f8>)
 80093d8:	a904      	add	r1, sp, #16
 80093da:	4638      	mov	r0, r7
 80093dc:	f000 f9d4 	bl	8009788 <_printf_i>
 80093e0:	e7eb      	b.n	80093ba <_svfiprintf_r+0x1c2>
 80093e2:	bf00      	nop
 80093e4:	08009ea4 	.word	0x08009ea4
 80093e8:	08009eae 	.word	0x08009eae
 80093ec:	00000000 	.word	0x00000000
 80093f0:	08009141 	.word	0x08009141
 80093f4:	08009eaa 	.word	0x08009eaa

080093f8 <__sfputc_r>:
 80093f8:	6893      	ldr	r3, [r2, #8]
 80093fa:	3b01      	subs	r3, #1
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	b410      	push	{r4}
 8009400:	6093      	str	r3, [r2, #8]
 8009402:	da08      	bge.n	8009416 <__sfputc_r+0x1e>
 8009404:	6994      	ldr	r4, [r2, #24]
 8009406:	42a3      	cmp	r3, r4
 8009408:	db01      	blt.n	800940e <__sfputc_r+0x16>
 800940a:	290a      	cmp	r1, #10
 800940c:	d103      	bne.n	8009416 <__sfputc_r+0x1e>
 800940e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009412:	f000 baf1 	b.w	80099f8 <__swbuf_r>
 8009416:	6813      	ldr	r3, [r2, #0]
 8009418:	1c58      	adds	r0, r3, #1
 800941a:	6010      	str	r0, [r2, #0]
 800941c:	7019      	strb	r1, [r3, #0]
 800941e:	4608      	mov	r0, r1
 8009420:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009424:	4770      	bx	lr

08009426 <__sfputs_r>:
 8009426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009428:	4606      	mov	r6, r0
 800942a:	460f      	mov	r7, r1
 800942c:	4614      	mov	r4, r2
 800942e:	18d5      	adds	r5, r2, r3
 8009430:	42ac      	cmp	r4, r5
 8009432:	d101      	bne.n	8009438 <__sfputs_r+0x12>
 8009434:	2000      	movs	r0, #0
 8009436:	e007      	b.n	8009448 <__sfputs_r+0x22>
 8009438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800943c:	463a      	mov	r2, r7
 800943e:	4630      	mov	r0, r6
 8009440:	f7ff ffda 	bl	80093f8 <__sfputc_r>
 8009444:	1c43      	adds	r3, r0, #1
 8009446:	d1f3      	bne.n	8009430 <__sfputs_r+0xa>
 8009448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800944c <_vfiprintf_r>:
 800944c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009450:	460d      	mov	r5, r1
 8009452:	b09d      	sub	sp, #116	; 0x74
 8009454:	4614      	mov	r4, r2
 8009456:	4698      	mov	r8, r3
 8009458:	4606      	mov	r6, r0
 800945a:	b118      	cbz	r0, 8009464 <_vfiprintf_r+0x18>
 800945c:	6983      	ldr	r3, [r0, #24]
 800945e:	b90b      	cbnz	r3, 8009464 <_vfiprintf_r+0x18>
 8009460:	f7ff fab2 	bl	80089c8 <__sinit>
 8009464:	4b89      	ldr	r3, [pc, #548]	; (800968c <_vfiprintf_r+0x240>)
 8009466:	429d      	cmp	r5, r3
 8009468:	d11b      	bne.n	80094a2 <_vfiprintf_r+0x56>
 800946a:	6875      	ldr	r5, [r6, #4]
 800946c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800946e:	07d9      	lsls	r1, r3, #31
 8009470:	d405      	bmi.n	800947e <_vfiprintf_r+0x32>
 8009472:	89ab      	ldrh	r3, [r5, #12]
 8009474:	059a      	lsls	r2, r3, #22
 8009476:	d402      	bmi.n	800947e <_vfiprintf_r+0x32>
 8009478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800947a:	f7ff fb68 	bl	8008b4e <__retarget_lock_acquire_recursive>
 800947e:	89ab      	ldrh	r3, [r5, #12]
 8009480:	071b      	lsls	r3, r3, #28
 8009482:	d501      	bpl.n	8009488 <_vfiprintf_r+0x3c>
 8009484:	692b      	ldr	r3, [r5, #16]
 8009486:	b9eb      	cbnz	r3, 80094c4 <_vfiprintf_r+0x78>
 8009488:	4629      	mov	r1, r5
 800948a:	4630      	mov	r0, r6
 800948c:	f000 fb06 	bl	8009a9c <__swsetup_r>
 8009490:	b1c0      	cbz	r0, 80094c4 <_vfiprintf_r+0x78>
 8009492:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009494:	07dc      	lsls	r4, r3, #31
 8009496:	d50e      	bpl.n	80094b6 <_vfiprintf_r+0x6a>
 8009498:	f04f 30ff 	mov.w	r0, #4294967295
 800949c:	b01d      	add	sp, #116	; 0x74
 800949e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a2:	4b7b      	ldr	r3, [pc, #492]	; (8009690 <_vfiprintf_r+0x244>)
 80094a4:	429d      	cmp	r5, r3
 80094a6:	d101      	bne.n	80094ac <_vfiprintf_r+0x60>
 80094a8:	68b5      	ldr	r5, [r6, #8]
 80094aa:	e7df      	b.n	800946c <_vfiprintf_r+0x20>
 80094ac:	4b79      	ldr	r3, [pc, #484]	; (8009694 <_vfiprintf_r+0x248>)
 80094ae:	429d      	cmp	r5, r3
 80094b0:	bf08      	it	eq
 80094b2:	68f5      	ldreq	r5, [r6, #12]
 80094b4:	e7da      	b.n	800946c <_vfiprintf_r+0x20>
 80094b6:	89ab      	ldrh	r3, [r5, #12]
 80094b8:	0598      	lsls	r0, r3, #22
 80094ba:	d4ed      	bmi.n	8009498 <_vfiprintf_r+0x4c>
 80094bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094be:	f7ff fb47 	bl	8008b50 <__retarget_lock_release_recursive>
 80094c2:	e7e9      	b.n	8009498 <_vfiprintf_r+0x4c>
 80094c4:	2300      	movs	r3, #0
 80094c6:	9309      	str	r3, [sp, #36]	; 0x24
 80094c8:	2320      	movs	r3, #32
 80094ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80094d2:	2330      	movs	r3, #48	; 0x30
 80094d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009698 <_vfiprintf_r+0x24c>
 80094d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094dc:	f04f 0901 	mov.w	r9, #1
 80094e0:	4623      	mov	r3, r4
 80094e2:	469a      	mov	sl, r3
 80094e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094e8:	b10a      	cbz	r2, 80094ee <_vfiprintf_r+0xa2>
 80094ea:	2a25      	cmp	r2, #37	; 0x25
 80094ec:	d1f9      	bne.n	80094e2 <_vfiprintf_r+0x96>
 80094ee:	ebba 0b04 	subs.w	fp, sl, r4
 80094f2:	d00b      	beq.n	800950c <_vfiprintf_r+0xc0>
 80094f4:	465b      	mov	r3, fp
 80094f6:	4622      	mov	r2, r4
 80094f8:	4629      	mov	r1, r5
 80094fa:	4630      	mov	r0, r6
 80094fc:	f7ff ff93 	bl	8009426 <__sfputs_r>
 8009500:	3001      	adds	r0, #1
 8009502:	f000 80aa 	beq.w	800965a <_vfiprintf_r+0x20e>
 8009506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009508:	445a      	add	r2, fp
 800950a:	9209      	str	r2, [sp, #36]	; 0x24
 800950c:	f89a 3000 	ldrb.w	r3, [sl]
 8009510:	2b00      	cmp	r3, #0
 8009512:	f000 80a2 	beq.w	800965a <_vfiprintf_r+0x20e>
 8009516:	2300      	movs	r3, #0
 8009518:	f04f 32ff 	mov.w	r2, #4294967295
 800951c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009520:	f10a 0a01 	add.w	sl, sl, #1
 8009524:	9304      	str	r3, [sp, #16]
 8009526:	9307      	str	r3, [sp, #28]
 8009528:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800952c:	931a      	str	r3, [sp, #104]	; 0x68
 800952e:	4654      	mov	r4, sl
 8009530:	2205      	movs	r2, #5
 8009532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009536:	4858      	ldr	r0, [pc, #352]	; (8009698 <_vfiprintf_r+0x24c>)
 8009538:	f7f6 fe4a 	bl	80001d0 <memchr>
 800953c:	9a04      	ldr	r2, [sp, #16]
 800953e:	b9d8      	cbnz	r0, 8009578 <_vfiprintf_r+0x12c>
 8009540:	06d1      	lsls	r1, r2, #27
 8009542:	bf44      	itt	mi
 8009544:	2320      	movmi	r3, #32
 8009546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800954a:	0713      	lsls	r3, r2, #28
 800954c:	bf44      	itt	mi
 800954e:	232b      	movmi	r3, #43	; 0x2b
 8009550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009554:	f89a 3000 	ldrb.w	r3, [sl]
 8009558:	2b2a      	cmp	r3, #42	; 0x2a
 800955a:	d015      	beq.n	8009588 <_vfiprintf_r+0x13c>
 800955c:	9a07      	ldr	r2, [sp, #28]
 800955e:	4654      	mov	r4, sl
 8009560:	2000      	movs	r0, #0
 8009562:	f04f 0c0a 	mov.w	ip, #10
 8009566:	4621      	mov	r1, r4
 8009568:	f811 3b01 	ldrb.w	r3, [r1], #1
 800956c:	3b30      	subs	r3, #48	; 0x30
 800956e:	2b09      	cmp	r3, #9
 8009570:	d94e      	bls.n	8009610 <_vfiprintf_r+0x1c4>
 8009572:	b1b0      	cbz	r0, 80095a2 <_vfiprintf_r+0x156>
 8009574:	9207      	str	r2, [sp, #28]
 8009576:	e014      	b.n	80095a2 <_vfiprintf_r+0x156>
 8009578:	eba0 0308 	sub.w	r3, r0, r8
 800957c:	fa09 f303 	lsl.w	r3, r9, r3
 8009580:	4313      	orrs	r3, r2
 8009582:	9304      	str	r3, [sp, #16]
 8009584:	46a2      	mov	sl, r4
 8009586:	e7d2      	b.n	800952e <_vfiprintf_r+0xe2>
 8009588:	9b03      	ldr	r3, [sp, #12]
 800958a:	1d19      	adds	r1, r3, #4
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	9103      	str	r1, [sp, #12]
 8009590:	2b00      	cmp	r3, #0
 8009592:	bfbb      	ittet	lt
 8009594:	425b      	neglt	r3, r3
 8009596:	f042 0202 	orrlt.w	r2, r2, #2
 800959a:	9307      	strge	r3, [sp, #28]
 800959c:	9307      	strlt	r3, [sp, #28]
 800959e:	bfb8      	it	lt
 80095a0:	9204      	strlt	r2, [sp, #16]
 80095a2:	7823      	ldrb	r3, [r4, #0]
 80095a4:	2b2e      	cmp	r3, #46	; 0x2e
 80095a6:	d10c      	bne.n	80095c2 <_vfiprintf_r+0x176>
 80095a8:	7863      	ldrb	r3, [r4, #1]
 80095aa:	2b2a      	cmp	r3, #42	; 0x2a
 80095ac:	d135      	bne.n	800961a <_vfiprintf_r+0x1ce>
 80095ae:	9b03      	ldr	r3, [sp, #12]
 80095b0:	1d1a      	adds	r2, r3, #4
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	9203      	str	r2, [sp, #12]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	bfb8      	it	lt
 80095ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80095be:	3402      	adds	r4, #2
 80095c0:	9305      	str	r3, [sp, #20]
 80095c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80096a8 <_vfiprintf_r+0x25c>
 80095c6:	7821      	ldrb	r1, [r4, #0]
 80095c8:	2203      	movs	r2, #3
 80095ca:	4650      	mov	r0, sl
 80095cc:	f7f6 fe00 	bl	80001d0 <memchr>
 80095d0:	b140      	cbz	r0, 80095e4 <_vfiprintf_r+0x198>
 80095d2:	2340      	movs	r3, #64	; 0x40
 80095d4:	eba0 000a 	sub.w	r0, r0, sl
 80095d8:	fa03 f000 	lsl.w	r0, r3, r0
 80095dc:	9b04      	ldr	r3, [sp, #16]
 80095de:	4303      	orrs	r3, r0
 80095e0:	3401      	adds	r4, #1
 80095e2:	9304      	str	r3, [sp, #16]
 80095e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095e8:	482c      	ldr	r0, [pc, #176]	; (800969c <_vfiprintf_r+0x250>)
 80095ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095ee:	2206      	movs	r2, #6
 80095f0:	f7f6 fdee 	bl	80001d0 <memchr>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d03f      	beq.n	8009678 <_vfiprintf_r+0x22c>
 80095f8:	4b29      	ldr	r3, [pc, #164]	; (80096a0 <_vfiprintf_r+0x254>)
 80095fa:	bb1b      	cbnz	r3, 8009644 <_vfiprintf_r+0x1f8>
 80095fc:	9b03      	ldr	r3, [sp, #12]
 80095fe:	3307      	adds	r3, #7
 8009600:	f023 0307 	bic.w	r3, r3, #7
 8009604:	3308      	adds	r3, #8
 8009606:	9303      	str	r3, [sp, #12]
 8009608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800960a:	443b      	add	r3, r7
 800960c:	9309      	str	r3, [sp, #36]	; 0x24
 800960e:	e767      	b.n	80094e0 <_vfiprintf_r+0x94>
 8009610:	fb0c 3202 	mla	r2, ip, r2, r3
 8009614:	460c      	mov	r4, r1
 8009616:	2001      	movs	r0, #1
 8009618:	e7a5      	b.n	8009566 <_vfiprintf_r+0x11a>
 800961a:	2300      	movs	r3, #0
 800961c:	3401      	adds	r4, #1
 800961e:	9305      	str	r3, [sp, #20]
 8009620:	4619      	mov	r1, r3
 8009622:	f04f 0c0a 	mov.w	ip, #10
 8009626:	4620      	mov	r0, r4
 8009628:	f810 2b01 	ldrb.w	r2, [r0], #1
 800962c:	3a30      	subs	r2, #48	; 0x30
 800962e:	2a09      	cmp	r2, #9
 8009630:	d903      	bls.n	800963a <_vfiprintf_r+0x1ee>
 8009632:	2b00      	cmp	r3, #0
 8009634:	d0c5      	beq.n	80095c2 <_vfiprintf_r+0x176>
 8009636:	9105      	str	r1, [sp, #20]
 8009638:	e7c3      	b.n	80095c2 <_vfiprintf_r+0x176>
 800963a:	fb0c 2101 	mla	r1, ip, r1, r2
 800963e:	4604      	mov	r4, r0
 8009640:	2301      	movs	r3, #1
 8009642:	e7f0      	b.n	8009626 <_vfiprintf_r+0x1da>
 8009644:	ab03      	add	r3, sp, #12
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	462a      	mov	r2, r5
 800964a:	4b16      	ldr	r3, [pc, #88]	; (80096a4 <_vfiprintf_r+0x258>)
 800964c:	a904      	add	r1, sp, #16
 800964e:	4630      	mov	r0, r6
 8009650:	f3af 8000 	nop.w
 8009654:	4607      	mov	r7, r0
 8009656:	1c78      	adds	r0, r7, #1
 8009658:	d1d6      	bne.n	8009608 <_vfiprintf_r+0x1bc>
 800965a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800965c:	07d9      	lsls	r1, r3, #31
 800965e:	d405      	bmi.n	800966c <_vfiprintf_r+0x220>
 8009660:	89ab      	ldrh	r3, [r5, #12]
 8009662:	059a      	lsls	r2, r3, #22
 8009664:	d402      	bmi.n	800966c <_vfiprintf_r+0x220>
 8009666:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009668:	f7ff fa72 	bl	8008b50 <__retarget_lock_release_recursive>
 800966c:	89ab      	ldrh	r3, [r5, #12]
 800966e:	065b      	lsls	r3, r3, #25
 8009670:	f53f af12 	bmi.w	8009498 <_vfiprintf_r+0x4c>
 8009674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009676:	e711      	b.n	800949c <_vfiprintf_r+0x50>
 8009678:	ab03      	add	r3, sp, #12
 800967a:	9300      	str	r3, [sp, #0]
 800967c:	462a      	mov	r2, r5
 800967e:	4b09      	ldr	r3, [pc, #36]	; (80096a4 <_vfiprintf_r+0x258>)
 8009680:	a904      	add	r1, sp, #16
 8009682:	4630      	mov	r0, r6
 8009684:	f000 f880 	bl	8009788 <_printf_i>
 8009688:	e7e4      	b.n	8009654 <_vfiprintf_r+0x208>
 800968a:	bf00      	nop
 800968c:	08009e60 	.word	0x08009e60
 8009690:	08009e80 	.word	0x08009e80
 8009694:	08009e40 	.word	0x08009e40
 8009698:	08009ea4 	.word	0x08009ea4
 800969c:	08009eae 	.word	0x08009eae
 80096a0:	00000000 	.word	0x00000000
 80096a4:	08009427 	.word	0x08009427
 80096a8:	08009eaa 	.word	0x08009eaa

080096ac <_printf_common>:
 80096ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b0:	4616      	mov	r6, r2
 80096b2:	4699      	mov	r9, r3
 80096b4:	688a      	ldr	r2, [r1, #8]
 80096b6:	690b      	ldr	r3, [r1, #16]
 80096b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096bc:	4293      	cmp	r3, r2
 80096be:	bfb8      	it	lt
 80096c0:	4613      	movlt	r3, r2
 80096c2:	6033      	str	r3, [r6, #0]
 80096c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096c8:	4607      	mov	r7, r0
 80096ca:	460c      	mov	r4, r1
 80096cc:	b10a      	cbz	r2, 80096d2 <_printf_common+0x26>
 80096ce:	3301      	adds	r3, #1
 80096d0:	6033      	str	r3, [r6, #0]
 80096d2:	6823      	ldr	r3, [r4, #0]
 80096d4:	0699      	lsls	r1, r3, #26
 80096d6:	bf42      	ittt	mi
 80096d8:	6833      	ldrmi	r3, [r6, #0]
 80096da:	3302      	addmi	r3, #2
 80096dc:	6033      	strmi	r3, [r6, #0]
 80096de:	6825      	ldr	r5, [r4, #0]
 80096e0:	f015 0506 	ands.w	r5, r5, #6
 80096e4:	d106      	bne.n	80096f4 <_printf_common+0x48>
 80096e6:	f104 0a19 	add.w	sl, r4, #25
 80096ea:	68e3      	ldr	r3, [r4, #12]
 80096ec:	6832      	ldr	r2, [r6, #0]
 80096ee:	1a9b      	subs	r3, r3, r2
 80096f0:	42ab      	cmp	r3, r5
 80096f2:	dc26      	bgt.n	8009742 <_printf_common+0x96>
 80096f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80096f8:	1e13      	subs	r3, r2, #0
 80096fa:	6822      	ldr	r2, [r4, #0]
 80096fc:	bf18      	it	ne
 80096fe:	2301      	movne	r3, #1
 8009700:	0692      	lsls	r2, r2, #26
 8009702:	d42b      	bmi.n	800975c <_printf_common+0xb0>
 8009704:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009708:	4649      	mov	r1, r9
 800970a:	4638      	mov	r0, r7
 800970c:	47c0      	blx	r8
 800970e:	3001      	adds	r0, #1
 8009710:	d01e      	beq.n	8009750 <_printf_common+0xa4>
 8009712:	6823      	ldr	r3, [r4, #0]
 8009714:	68e5      	ldr	r5, [r4, #12]
 8009716:	6832      	ldr	r2, [r6, #0]
 8009718:	f003 0306 	and.w	r3, r3, #6
 800971c:	2b04      	cmp	r3, #4
 800971e:	bf08      	it	eq
 8009720:	1aad      	subeq	r5, r5, r2
 8009722:	68a3      	ldr	r3, [r4, #8]
 8009724:	6922      	ldr	r2, [r4, #16]
 8009726:	bf0c      	ite	eq
 8009728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800972c:	2500      	movne	r5, #0
 800972e:	4293      	cmp	r3, r2
 8009730:	bfc4      	itt	gt
 8009732:	1a9b      	subgt	r3, r3, r2
 8009734:	18ed      	addgt	r5, r5, r3
 8009736:	2600      	movs	r6, #0
 8009738:	341a      	adds	r4, #26
 800973a:	42b5      	cmp	r5, r6
 800973c:	d11a      	bne.n	8009774 <_printf_common+0xc8>
 800973e:	2000      	movs	r0, #0
 8009740:	e008      	b.n	8009754 <_printf_common+0xa8>
 8009742:	2301      	movs	r3, #1
 8009744:	4652      	mov	r2, sl
 8009746:	4649      	mov	r1, r9
 8009748:	4638      	mov	r0, r7
 800974a:	47c0      	blx	r8
 800974c:	3001      	adds	r0, #1
 800974e:	d103      	bne.n	8009758 <_printf_common+0xac>
 8009750:	f04f 30ff 	mov.w	r0, #4294967295
 8009754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009758:	3501      	adds	r5, #1
 800975a:	e7c6      	b.n	80096ea <_printf_common+0x3e>
 800975c:	18e1      	adds	r1, r4, r3
 800975e:	1c5a      	adds	r2, r3, #1
 8009760:	2030      	movs	r0, #48	; 0x30
 8009762:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009766:	4422      	add	r2, r4
 8009768:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800976c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009770:	3302      	adds	r3, #2
 8009772:	e7c7      	b.n	8009704 <_printf_common+0x58>
 8009774:	2301      	movs	r3, #1
 8009776:	4622      	mov	r2, r4
 8009778:	4649      	mov	r1, r9
 800977a:	4638      	mov	r0, r7
 800977c:	47c0      	blx	r8
 800977e:	3001      	adds	r0, #1
 8009780:	d0e6      	beq.n	8009750 <_printf_common+0xa4>
 8009782:	3601      	adds	r6, #1
 8009784:	e7d9      	b.n	800973a <_printf_common+0x8e>
	...

08009788 <_printf_i>:
 8009788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800978c:	7e0f      	ldrb	r7, [r1, #24]
 800978e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009790:	2f78      	cmp	r7, #120	; 0x78
 8009792:	4691      	mov	r9, r2
 8009794:	4680      	mov	r8, r0
 8009796:	460c      	mov	r4, r1
 8009798:	469a      	mov	sl, r3
 800979a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800979e:	d807      	bhi.n	80097b0 <_printf_i+0x28>
 80097a0:	2f62      	cmp	r7, #98	; 0x62
 80097a2:	d80a      	bhi.n	80097ba <_printf_i+0x32>
 80097a4:	2f00      	cmp	r7, #0
 80097a6:	f000 80d8 	beq.w	800995a <_printf_i+0x1d2>
 80097aa:	2f58      	cmp	r7, #88	; 0x58
 80097ac:	f000 80a3 	beq.w	80098f6 <_printf_i+0x16e>
 80097b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80097b8:	e03a      	b.n	8009830 <_printf_i+0xa8>
 80097ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80097be:	2b15      	cmp	r3, #21
 80097c0:	d8f6      	bhi.n	80097b0 <_printf_i+0x28>
 80097c2:	a101      	add	r1, pc, #4	; (adr r1, 80097c8 <_printf_i+0x40>)
 80097c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097c8:	08009821 	.word	0x08009821
 80097cc:	08009835 	.word	0x08009835
 80097d0:	080097b1 	.word	0x080097b1
 80097d4:	080097b1 	.word	0x080097b1
 80097d8:	080097b1 	.word	0x080097b1
 80097dc:	080097b1 	.word	0x080097b1
 80097e0:	08009835 	.word	0x08009835
 80097e4:	080097b1 	.word	0x080097b1
 80097e8:	080097b1 	.word	0x080097b1
 80097ec:	080097b1 	.word	0x080097b1
 80097f0:	080097b1 	.word	0x080097b1
 80097f4:	08009941 	.word	0x08009941
 80097f8:	08009865 	.word	0x08009865
 80097fc:	08009923 	.word	0x08009923
 8009800:	080097b1 	.word	0x080097b1
 8009804:	080097b1 	.word	0x080097b1
 8009808:	08009963 	.word	0x08009963
 800980c:	080097b1 	.word	0x080097b1
 8009810:	08009865 	.word	0x08009865
 8009814:	080097b1 	.word	0x080097b1
 8009818:	080097b1 	.word	0x080097b1
 800981c:	0800992b 	.word	0x0800992b
 8009820:	682b      	ldr	r3, [r5, #0]
 8009822:	1d1a      	adds	r2, r3, #4
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	602a      	str	r2, [r5, #0]
 8009828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800982c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009830:	2301      	movs	r3, #1
 8009832:	e0a3      	b.n	800997c <_printf_i+0x1f4>
 8009834:	6820      	ldr	r0, [r4, #0]
 8009836:	6829      	ldr	r1, [r5, #0]
 8009838:	0606      	lsls	r6, r0, #24
 800983a:	f101 0304 	add.w	r3, r1, #4
 800983e:	d50a      	bpl.n	8009856 <_printf_i+0xce>
 8009840:	680e      	ldr	r6, [r1, #0]
 8009842:	602b      	str	r3, [r5, #0]
 8009844:	2e00      	cmp	r6, #0
 8009846:	da03      	bge.n	8009850 <_printf_i+0xc8>
 8009848:	232d      	movs	r3, #45	; 0x2d
 800984a:	4276      	negs	r6, r6
 800984c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009850:	485e      	ldr	r0, [pc, #376]	; (80099cc <_printf_i+0x244>)
 8009852:	230a      	movs	r3, #10
 8009854:	e019      	b.n	800988a <_printf_i+0x102>
 8009856:	680e      	ldr	r6, [r1, #0]
 8009858:	602b      	str	r3, [r5, #0]
 800985a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800985e:	bf18      	it	ne
 8009860:	b236      	sxthne	r6, r6
 8009862:	e7ef      	b.n	8009844 <_printf_i+0xbc>
 8009864:	682b      	ldr	r3, [r5, #0]
 8009866:	6820      	ldr	r0, [r4, #0]
 8009868:	1d19      	adds	r1, r3, #4
 800986a:	6029      	str	r1, [r5, #0]
 800986c:	0601      	lsls	r1, r0, #24
 800986e:	d501      	bpl.n	8009874 <_printf_i+0xec>
 8009870:	681e      	ldr	r6, [r3, #0]
 8009872:	e002      	b.n	800987a <_printf_i+0xf2>
 8009874:	0646      	lsls	r6, r0, #25
 8009876:	d5fb      	bpl.n	8009870 <_printf_i+0xe8>
 8009878:	881e      	ldrh	r6, [r3, #0]
 800987a:	4854      	ldr	r0, [pc, #336]	; (80099cc <_printf_i+0x244>)
 800987c:	2f6f      	cmp	r7, #111	; 0x6f
 800987e:	bf0c      	ite	eq
 8009880:	2308      	moveq	r3, #8
 8009882:	230a      	movne	r3, #10
 8009884:	2100      	movs	r1, #0
 8009886:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800988a:	6865      	ldr	r5, [r4, #4]
 800988c:	60a5      	str	r5, [r4, #8]
 800988e:	2d00      	cmp	r5, #0
 8009890:	bfa2      	ittt	ge
 8009892:	6821      	ldrge	r1, [r4, #0]
 8009894:	f021 0104 	bicge.w	r1, r1, #4
 8009898:	6021      	strge	r1, [r4, #0]
 800989a:	b90e      	cbnz	r6, 80098a0 <_printf_i+0x118>
 800989c:	2d00      	cmp	r5, #0
 800989e:	d04d      	beq.n	800993c <_printf_i+0x1b4>
 80098a0:	4615      	mov	r5, r2
 80098a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80098a6:	fb03 6711 	mls	r7, r3, r1, r6
 80098aa:	5dc7      	ldrb	r7, [r0, r7]
 80098ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80098b0:	4637      	mov	r7, r6
 80098b2:	42bb      	cmp	r3, r7
 80098b4:	460e      	mov	r6, r1
 80098b6:	d9f4      	bls.n	80098a2 <_printf_i+0x11a>
 80098b8:	2b08      	cmp	r3, #8
 80098ba:	d10b      	bne.n	80098d4 <_printf_i+0x14c>
 80098bc:	6823      	ldr	r3, [r4, #0]
 80098be:	07de      	lsls	r6, r3, #31
 80098c0:	d508      	bpl.n	80098d4 <_printf_i+0x14c>
 80098c2:	6923      	ldr	r3, [r4, #16]
 80098c4:	6861      	ldr	r1, [r4, #4]
 80098c6:	4299      	cmp	r1, r3
 80098c8:	bfde      	ittt	le
 80098ca:	2330      	movle	r3, #48	; 0x30
 80098cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80098d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80098d4:	1b52      	subs	r2, r2, r5
 80098d6:	6122      	str	r2, [r4, #16]
 80098d8:	f8cd a000 	str.w	sl, [sp]
 80098dc:	464b      	mov	r3, r9
 80098de:	aa03      	add	r2, sp, #12
 80098e0:	4621      	mov	r1, r4
 80098e2:	4640      	mov	r0, r8
 80098e4:	f7ff fee2 	bl	80096ac <_printf_common>
 80098e8:	3001      	adds	r0, #1
 80098ea:	d14c      	bne.n	8009986 <_printf_i+0x1fe>
 80098ec:	f04f 30ff 	mov.w	r0, #4294967295
 80098f0:	b004      	add	sp, #16
 80098f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098f6:	4835      	ldr	r0, [pc, #212]	; (80099cc <_printf_i+0x244>)
 80098f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80098fc:	6829      	ldr	r1, [r5, #0]
 80098fe:	6823      	ldr	r3, [r4, #0]
 8009900:	f851 6b04 	ldr.w	r6, [r1], #4
 8009904:	6029      	str	r1, [r5, #0]
 8009906:	061d      	lsls	r5, r3, #24
 8009908:	d514      	bpl.n	8009934 <_printf_i+0x1ac>
 800990a:	07df      	lsls	r7, r3, #31
 800990c:	bf44      	itt	mi
 800990e:	f043 0320 	orrmi.w	r3, r3, #32
 8009912:	6023      	strmi	r3, [r4, #0]
 8009914:	b91e      	cbnz	r6, 800991e <_printf_i+0x196>
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	f023 0320 	bic.w	r3, r3, #32
 800991c:	6023      	str	r3, [r4, #0]
 800991e:	2310      	movs	r3, #16
 8009920:	e7b0      	b.n	8009884 <_printf_i+0xfc>
 8009922:	6823      	ldr	r3, [r4, #0]
 8009924:	f043 0320 	orr.w	r3, r3, #32
 8009928:	6023      	str	r3, [r4, #0]
 800992a:	2378      	movs	r3, #120	; 0x78
 800992c:	4828      	ldr	r0, [pc, #160]	; (80099d0 <_printf_i+0x248>)
 800992e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009932:	e7e3      	b.n	80098fc <_printf_i+0x174>
 8009934:	0659      	lsls	r1, r3, #25
 8009936:	bf48      	it	mi
 8009938:	b2b6      	uxthmi	r6, r6
 800993a:	e7e6      	b.n	800990a <_printf_i+0x182>
 800993c:	4615      	mov	r5, r2
 800993e:	e7bb      	b.n	80098b8 <_printf_i+0x130>
 8009940:	682b      	ldr	r3, [r5, #0]
 8009942:	6826      	ldr	r6, [r4, #0]
 8009944:	6961      	ldr	r1, [r4, #20]
 8009946:	1d18      	adds	r0, r3, #4
 8009948:	6028      	str	r0, [r5, #0]
 800994a:	0635      	lsls	r5, r6, #24
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	d501      	bpl.n	8009954 <_printf_i+0x1cc>
 8009950:	6019      	str	r1, [r3, #0]
 8009952:	e002      	b.n	800995a <_printf_i+0x1d2>
 8009954:	0670      	lsls	r0, r6, #25
 8009956:	d5fb      	bpl.n	8009950 <_printf_i+0x1c8>
 8009958:	8019      	strh	r1, [r3, #0]
 800995a:	2300      	movs	r3, #0
 800995c:	6123      	str	r3, [r4, #16]
 800995e:	4615      	mov	r5, r2
 8009960:	e7ba      	b.n	80098d8 <_printf_i+0x150>
 8009962:	682b      	ldr	r3, [r5, #0]
 8009964:	1d1a      	adds	r2, r3, #4
 8009966:	602a      	str	r2, [r5, #0]
 8009968:	681d      	ldr	r5, [r3, #0]
 800996a:	6862      	ldr	r2, [r4, #4]
 800996c:	2100      	movs	r1, #0
 800996e:	4628      	mov	r0, r5
 8009970:	f7f6 fc2e 	bl	80001d0 <memchr>
 8009974:	b108      	cbz	r0, 800997a <_printf_i+0x1f2>
 8009976:	1b40      	subs	r0, r0, r5
 8009978:	6060      	str	r0, [r4, #4]
 800997a:	6863      	ldr	r3, [r4, #4]
 800997c:	6123      	str	r3, [r4, #16]
 800997e:	2300      	movs	r3, #0
 8009980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009984:	e7a8      	b.n	80098d8 <_printf_i+0x150>
 8009986:	6923      	ldr	r3, [r4, #16]
 8009988:	462a      	mov	r2, r5
 800998a:	4649      	mov	r1, r9
 800998c:	4640      	mov	r0, r8
 800998e:	47d0      	blx	sl
 8009990:	3001      	adds	r0, #1
 8009992:	d0ab      	beq.n	80098ec <_printf_i+0x164>
 8009994:	6823      	ldr	r3, [r4, #0]
 8009996:	079b      	lsls	r3, r3, #30
 8009998:	d413      	bmi.n	80099c2 <_printf_i+0x23a>
 800999a:	68e0      	ldr	r0, [r4, #12]
 800999c:	9b03      	ldr	r3, [sp, #12]
 800999e:	4298      	cmp	r0, r3
 80099a0:	bfb8      	it	lt
 80099a2:	4618      	movlt	r0, r3
 80099a4:	e7a4      	b.n	80098f0 <_printf_i+0x168>
 80099a6:	2301      	movs	r3, #1
 80099a8:	4632      	mov	r2, r6
 80099aa:	4649      	mov	r1, r9
 80099ac:	4640      	mov	r0, r8
 80099ae:	47d0      	blx	sl
 80099b0:	3001      	adds	r0, #1
 80099b2:	d09b      	beq.n	80098ec <_printf_i+0x164>
 80099b4:	3501      	adds	r5, #1
 80099b6:	68e3      	ldr	r3, [r4, #12]
 80099b8:	9903      	ldr	r1, [sp, #12]
 80099ba:	1a5b      	subs	r3, r3, r1
 80099bc:	42ab      	cmp	r3, r5
 80099be:	dcf2      	bgt.n	80099a6 <_printf_i+0x21e>
 80099c0:	e7eb      	b.n	800999a <_printf_i+0x212>
 80099c2:	2500      	movs	r5, #0
 80099c4:	f104 0619 	add.w	r6, r4, #25
 80099c8:	e7f5      	b.n	80099b6 <_printf_i+0x22e>
 80099ca:	bf00      	nop
 80099cc:	08009eb5 	.word	0x08009eb5
 80099d0:	08009ec6 	.word	0x08009ec6

080099d4 <_read_r>:
 80099d4:	b538      	push	{r3, r4, r5, lr}
 80099d6:	4d07      	ldr	r5, [pc, #28]	; (80099f4 <_read_r+0x20>)
 80099d8:	4604      	mov	r4, r0
 80099da:	4608      	mov	r0, r1
 80099dc:	4611      	mov	r1, r2
 80099de:	2200      	movs	r2, #0
 80099e0:	602a      	str	r2, [r5, #0]
 80099e2:	461a      	mov	r2, r3
 80099e4:	f7f7 fdda 	bl	800159c <_read>
 80099e8:	1c43      	adds	r3, r0, #1
 80099ea:	d102      	bne.n	80099f2 <_read_r+0x1e>
 80099ec:	682b      	ldr	r3, [r5, #0]
 80099ee:	b103      	cbz	r3, 80099f2 <_read_r+0x1e>
 80099f0:	6023      	str	r3, [r4, #0]
 80099f2:	bd38      	pop	{r3, r4, r5, pc}
 80099f4:	2000212c 	.word	0x2000212c

080099f8 <__swbuf_r>:
 80099f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fa:	460e      	mov	r6, r1
 80099fc:	4614      	mov	r4, r2
 80099fe:	4605      	mov	r5, r0
 8009a00:	b118      	cbz	r0, 8009a0a <__swbuf_r+0x12>
 8009a02:	6983      	ldr	r3, [r0, #24]
 8009a04:	b90b      	cbnz	r3, 8009a0a <__swbuf_r+0x12>
 8009a06:	f7fe ffdf 	bl	80089c8 <__sinit>
 8009a0a:	4b21      	ldr	r3, [pc, #132]	; (8009a90 <__swbuf_r+0x98>)
 8009a0c:	429c      	cmp	r4, r3
 8009a0e:	d12b      	bne.n	8009a68 <__swbuf_r+0x70>
 8009a10:	686c      	ldr	r4, [r5, #4]
 8009a12:	69a3      	ldr	r3, [r4, #24]
 8009a14:	60a3      	str	r3, [r4, #8]
 8009a16:	89a3      	ldrh	r3, [r4, #12]
 8009a18:	071a      	lsls	r2, r3, #28
 8009a1a:	d52f      	bpl.n	8009a7c <__swbuf_r+0x84>
 8009a1c:	6923      	ldr	r3, [r4, #16]
 8009a1e:	b36b      	cbz	r3, 8009a7c <__swbuf_r+0x84>
 8009a20:	6923      	ldr	r3, [r4, #16]
 8009a22:	6820      	ldr	r0, [r4, #0]
 8009a24:	1ac0      	subs	r0, r0, r3
 8009a26:	6963      	ldr	r3, [r4, #20]
 8009a28:	b2f6      	uxtb	r6, r6
 8009a2a:	4283      	cmp	r3, r0
 8009a2c:	4637      	mov	r7, r6
 8009a2e:	dc04      	bgt.n	8009a3a <__swbuf_r+0x42>
 8009a30:	4621      	mov	r1, r4
 8009a32:	4628      	mov	r0, r5
 8009a34:	f7ff fb2a 	bl	800908c <_fflush_r>
 8009a38:	bb30      	cbnz	r0, 8009a88 <__swbuf_r+0x90>
 8009a3a:	68a3      	ldr	r3, [r4, #8]
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	60a3      	str	r3, [r4, #8]
 8009a40:	6823      	ldr	r3, [r4, #0]
 8009a42:	1c5a      	adds	r2, r3, #1
 8009a44:	6022      	str	r2, [r4, #0]
 8009a46:	701e      	strb	r6, [r3, #0]
 8009a48:	6963      	ldr	r3, [r4, #20]
 8009a4a:	3001      	adds	r0, #1
 8009a4c:	4283      	cmp	r3, r0
 8009a4e:	d004      	beq.n	8009a5a <__swbuf_r+0x62>
 8009a50:	89a3      	ldrh	r3, [r4, #12]
 8009a52:	07db      	lsls	r3, r3, #31
 8009a54:	d506      	bpl.n	8009a64 <__swbuf_r+0x6c>
 8009a56:	2e0a      	cmp	r6, #10
 8009a58:	d104      	bne.n	8009a64 <__swbuf_r+0x6c>
 8009a5a:	4621      	mov	r1, r4
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	f7ff fb15 	bl	800908c <_fflush_r>
 8009a62:	b988      	cbnz	r0, 8009a88 <__swbuf_r+0x90>
 8009a64:	4638      	mov	r0, r7
 8009a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a68:	4b0a      	ldr	r3, [pc, #40]	; (8009a94 <__swbuf_r+0x9c>)
 8009a6a:	429c      	cmp	r4, r3
 8009a6c:	d101      	bne.n	8009a72 <__swbuf_r+0x7a>
 8009a6e:	68ac      	ldr	r4, [r5, #8]
 8009a70:	e7cf      	b.n	8009a12 <__swbuf_r+0x1a>
 8009a72:	4b09      	ldr	r3, [pc, #36]	; (8009a98 <__swbuf_r+0xa0>)
 8009a74:	429c      	cmp	r4, r3
 8009a76:	bf08      	it	eq
 8009a78:	68ec      	ldreq	r4, [r5, #12]
 8009a7a:	e7ca      	b.n	8009a12 <__swbuf_r+0x1a>
 8009a7c:	4621      	mov	r1, r4
 8009a7e:	4628      	mov	r0, r5
 8009a80:	f000 f80c 	bl	8009a9c <__swsetup_r>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d0cb      	beq.n	8009a20 <__swbuf_r+0x28>
 8009a88:	f04f 37ff 	mov.w	r7, #4294967295
 8009a8c:	e7ea      	b.n	8009a64 <__swbuf_r+0x6c>
 8009a8e:	bf00      	nop
 8009a90:	08009e60 	.word	0x08009e60
 8009a94:	08009e80 	.word	0x08009e80
 8009a98:	08009e40 	.word	0x08009e40

08009a9c <__swsetup_r>:
 8009a9c:	4b32      	ldr	r3, [pc, #200]	; (8009b68 <__swsetup_r+0xcc>)
 8009a9e:	b570      	push	{r4, r5, r6, lr}
 8009aa0:	681d      	ldr	r5, [r3, #0]
 8009aa2:	4606      	mov	r6, r0
 8009aa4:	460c      	mov	r4, r1
 8009aa6:	b125      	cbz	r5, 8009ab2 <__swsetup_r+0x16>
 8009aa8:	69ab      	ldr	r3, [r5, #24]
 8009aaa:	b913      	cbnz	r3, 8009ab2 <__swsetup_r+0x16>
 8009aac:	4628      	mov	r0, r5
 8009aae:	f7fe ff8b 	bl	80089c8 <__sinit>
 8009ab2:	4b2e      	ldr	r3, [pc, #184]	; (8009b6c <__swsetup_r+0xd0>)
 8009ab4:	429c      	cmp	r4, r3
 8009ab6:	d10f      	bne.n	8009ad8 <__swsetup_r+0x3c>
 8009ab8:	686c      	ldr	r4, [r5, #4]
 8009aba:	89a3      	ldrh	r3, [r4, #12]
 8009abc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ac0:	0719      	lsls	r1, r3, #28
 8009ac2:	d42c      	bmi.n	8009b1e <__swsetup_r+0x82>
 8009ac4:	06dd      	lsls	r5, r3, #27
 8009ac6:	d411      	bmi.n	8009aec <__swsetup_r+0x50>
 8009ac8:	2309      	movs	r3, #9
 8009aca:	6033      	str	r3, [r6, #0]
 8009acc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ad0:	81a3      	strh	r3, [r4, #12]
 8009ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad6:	e03e      	b.n	8009b56 <__swsetup_r+0xba>
 8009ad8:	4b25      	ldr	r3, [pc, #148]	; (8009b70 <__swsetup_r+0xd4>)
 8009ada:	429c      	cmp	r4, r3
 8009adc:	d101      	bne.n	8009ae2 <__swsetup_r+0x46>
 8009ade:	68ac      	ldr	r4, [r5, #8]
 8009ae0:	e7eb      	b.n	8009aba <__swsetup_r+0x1e>
 8009ae2:	4b24      	ldr	r3, [pc, #144]	; (8009b74 <__swsetup_r+0xd8>)
 8009ae4:	429c      	cmp	r4, r3
 8009ae6:	bf08      	it	eq
 8009ae8:	68ec      	ldreq	r4, [r5, #12]
 8009aea:	e7e6      	b.n	8009aba <__swsetup_r+0x1e>
 8009aec:	0758      	lsls	r0, r3, #29
 8009aee:	d512      	bpl.n	8009b16 <__swsetup_r+0x7a>
 8009af0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009af2:	b141      	cbz	r1, 8009b06 <__swsetup_r+0x6a>
 8009af4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009af8:	4299      	cmp	r1, r3
 8009afa:	d002      	beq.n	8009b02 <__swsetup_r+0x66>
 8009afc:	4630      	mov	r0, r6
 8009afe:	f7ff f847 	bl	8008b90 <_free_r>
 8009b02:	2300      	movs	r3, #0
 8009b04:	6363      	str	r3, [r4, #52]	; 0x34
 8009b06:	89a3      	ldrh	r3, [r4, #12]
 8009b08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b0c:	81a3      	strh	r3, [r4, #12]
 8009b0e:	2300      	movs	r3, #0
 8009b10:	6063      	str	r3, [r4, #4]
 8009b12:	6923      	ldr	r3, [r4, #16]
 8009b14:	6023      	str	r3, [r4, #0]
 8009b16:	89a3      	ldrh	r3, [r4, #12]
 8009b18:	f043 0308 	orr.w	r3, r3, #8
 8009b1c:	81a3      	strh	r3, [r4, #12]
 8009b1e:	6923      	ldr	r3, [r4, #16]
 8009b20:	b94b      	cbnz	r3, 8009b36 <__swsetup_r+0x9a>
 8009b22:	89a3      	ldrh	r3, [r4, #12]
 8009b24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b2c:	d003      	beq.n	8009b36 <__swsetup_r+0x9a>
 8009b2e:	4621      	mov	r1, r4
 8009b30:	4630      	mov	r0, r6
 8009b32:	f000 f847 	bl	8009bc4 <__smakebuf_r>
 8009b36:	89a0      	ldrh	r0, [r4, #12]
 8009b38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b3c:	f010 0301 	ands.w	r3, r0, #1
 8009b40:	d00a      	beq.n	8009b58 <__swsetup_r+0xbc>
 8009b42:	2300      	movs	r3, #0
 8009b44:	60a3      	str	r3, [r4, #8]
 8009b46:	6963      	ldr	r3, [r4, #20]
 8009b48:	425b      	negs	r3, r3
 8009b4a:	61a3      	str	r3, [r4, #24]
 8009b4c:	6923      	ldr	r3, [r4, #16]
 8009b4e:	b943      	cbnz	r3, 8009b62 <__swsetup_r+0xc6>
 8009b50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b54:	d1ba      	bne.n	8009acc <__swsetup_r+0x30>
 8009b56:	bd70      	pop	{r4, r5, r6, pc}
 8009b58:	0781      	lsls	r1, r0, #30
 8009b5a:	bf58      	it	pl
 8009b5c:	6963      	ldrpl	r3, [r4, #20]
 8009b5e:	60a3      	str	r3, [r4, #8]
 8009b60:	e7f4      	b.n	8009b4c <__swsetup_r+0xb0>
 8009b62:	2000      	movs	r0, #0
 8009b64:	e7f7      	b.n	8009b56 <__swsetup_r+0xba>
 8009b66:	bf00      	nop
 8009b68:	20000010 	.word	0x20000010
 8009b6c:	08009e60 	.word	0x08009e60
 8009b70:	08009e80 	.word	0x08009e80
 8009b74:	08009e40 	.word	0x08009e40

08009b78 <__swhatbuf_r>:
 8009b78:	b570      	push	{r4, r5, r6, lr}
 8009b7a:	460e      	mov	r6, r1
 8009b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b80:	2900      	cmp	r1, #0
 8009b82:	b096      	sub	sp, #88	; 0x58
 8009b84:	4614      	mov	r4, r2
 8009b86:	461d      	mov	r5, r3
 8009b88:	da08      	bge.n	8009b9c <__swhatbuf_r+0x24>
 8009b8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	602a      	str	r2, [r5, #0]
 8009b92:	061a      	lsls	r2, r3, #24
 8009b94:	d410      	bmi.n	8009bb8 <__swhatbuf_r+0x40>
 8009b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b9a:	e00e      	b.n	8009bba <__swhatbuf_r+0x42>
 8009b9c:	466a      	mov	r2, sp
 8009b9e:	f000 f89b 	bl	8009cd8 <_fstat_r>
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	dbf1      	blt.n	8009b8a <__swhatbuf_r+0x12>
 8009ba6:	9a01      	ldr	r2, [sp, #4]
 8009ba8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009bac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009bb0:	425a      	negs	r2, r3
 8009bb2:	415a      	adcs	r2, r3
 8009bb4:	602a      	str	r2, [r5, #0]
 8009bb6:	e7ee      	b.n	8009b96 <__swhatbuf_r+0x1e>
 8009bb8:	2340      	movs	r3, #64	; 0x40
 8009bba:	2000      	movs	r0, #0
 8009bbc:	6023      	str	r3, [r4, #0]
 8009bbe:	b016      	add	sp, #88	; 0x58
 8009bc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08009bc4 <__smakebuf_r>:
 8009bc4:	898b      	ldrh	r3, [r1, #12]
 8009bc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bc8:	079d      	lsls	r5, r3, #30
 8009bca:	4606      	mov	r6, r0
 8009bcc:	460c      	mov	r4, r1
 8009bce:	d507      	bpl.n	8009be0 <__smakebuf_r+0x1c>
 8009bd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009bd4:	6023      	str	r3, [r4, #0]
 8009bd6:	6123      	str	r3, [r4, #16]
 8009bd8:	2301      	movs	r3, #1
 8009bda:	6163      	str	r3, [r4, #20]
 8009bdc:	b002      	add	sp, #8
 8009bde:	bd70      	pop	{r4, r5, r6, pc}
 8009be0:	ab01      	add	r3, sp, #4
 8009be2:	466a      	mov	r2, sp
 8009be4:	f7ff ffc8 	bl	8009b78 <__swhatbuf_r>
 8009be8:	9900      	ldr	r1, [sp, #0]
 8009bea:	4605      	mov	r5, r0
 8009bec:	4630      	mov	r0, r6
 8009bee:	f7ff f83b 	bl	8008c68 <_malloc_r>
 8009bf2:	b948      	cbnz	r0, 8009c08 <__smakebuf_r+0x44>
 8009bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bf8:	059a      	lsls	r2, r3, #22
 8009bfa:	d4ef      	bmi.n	8009bdc <__smakebuf_r+0x18>
 8009bfc:	f023 0303 	bic.w	r3, r3, #3
 8009c00:	f043 0302 	orr.w	r3, r3, #2
 8009c04:	81a3      	strh	r3, [r4, #12]
 8009c06:	e7e3      	b.n	8009bd0 <__smakebuf_r+0xc>
 8009c08:	4b0d      	ldr	r3, [pc, #52]	; (8009c40 <__smakebuf_r+0x7c>)
 8009c0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c0c:	89a3      	ldrh	r3, [r4, #12]
 8009c0e:	6020      	str	r0, [r4, #0]
 8009c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c14:	81a3      	strh	r3, [r4, #12]
 8009c16:	9b00      	ldr	r3, [sp, #0]
 8009c18:	6163      	str	r3, [r4, #20]
 8009c1a:	9b01      	ldr	r3, [sp, #4]
 8009c1c:	6120      	str	r0, [r4, #16]
 8009c1e:	b15b      	cbz	r3, 8009c38 <__smakebuf_r+0x74>
 8009c20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c24:	4630      	mov	r0, r6
 8009c26:	f000 f869 	bl	8009cfc <_isatty_r>
 8009c2a:	b128      	cbz	r0, 8009c38 <__smakebuf_r+0x74>
 8009c2c:	89a3      	ldrh	r3, [r4, #12]
 8009c2e:	f023 0303 	bic.w	r3, r3, #3
 8009c32:	f043 0301 	orr.w	r3, r3, #1
 8009c36:	81a3      	strh	r3, [r4, #12]
 8009c38:	89a0      	ldrh	r0, [r4, #12]
 8009c3a:	4305      	orrs	r5, r0
 8009c3c:	81a5      	strh	r5, [r4, #12]
 8009c3e:	e7cd      	b.n	8009bdc <__smakebuf_r+0x18>
 8009c40:	08008961 	.word	0x08008961

08009c44 <memmove>:
 8009c44:	4288      	cmp	r0, r1
 8009c46:	b510      	push	{r4, lr}
 8009c48:	eb01 0402 	add.w	r4, r1, r2
 8009c4c:	d902      	bls.n	8009c54 <memmove+0x10>
 8009c4e:	4284      	cmp	r4, r0
 8009c50:	4623      	mov	r3, r4
 8009c52:	d807      	bhi.n	8009c64 <memmove+0x20>
 8009c54:	1e43      	subs	r3, r0, #1
 8009c56:	42a1      	cmp	r1, r4
 8009c58:	d008      	beq.n	8009c6c <memmove+0x28>
 8009c5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c62:	e7f8      	b.n	8009c56 <memmove+0x12>
 8009c64:	4402      	add	r2, r0
 8009c66:	4601      	mov	r1, r0
 8009c68:	428a      	cmp	r2, r1
 8009c6a:	d100      	bne.n	8009c6e <memmove+0x2a>
 8009c6c:	bd10      	pop	{r4, pc}
 8009c6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c76:	e7f7      	b.n	8009c68 <memmove+0x24>

08009c78 <_realloc_r>:
 8009c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c7c:	4680      	mov	r8, r0
 8009c7e:	4614      	mov	r4, r2
 8009c80:	460e      	mov	r6, r1
 8009c82:	b921      	cbnz	r1, 8009c8e <_realloc_r+0x16>
 8009c84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c88:	4611      	mov	r1, r2
 8009c8a:	f7fe bfed 	b.w	8008c68 <_malloc_r>
 8009c8e:	b92a      	cbnz	r2, 8009c9c <_realloc_r+0x24>
 8009c90:	f7fe ff7e 	bl	8008b90 <_free_r>
 8009c94:	4625      	mov	r5, r4
 8009c96:	4628      	mov	r0, r5
 8009c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c9c:	f000 f83e 	bl	8009d1c <_malloc_usable_size_r>
 8009ca0:	4284      	cmp	r4, r0
 8009ca2:	4607      	mov	r7, r0
 8009ca4:	d802      	bhi.n	8009cac <_realloc_r+0x34>
 8009ca6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009caa:	d812      	bhi.n	8009cd2 <_realloc_r+0x5a>
 8009cac:	4621      	mov	r1, r4
 8009cae:	4640      	mov	r0, r8
 8009cb0:	f7fe ffda 	bl	8008c68 <_malloc_r>
 8009cb4:	4605      	mov	r5, r0
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d0ed      	beq.n	8009c96 <_realloc_r+0x1e>
 8009cba:	42bc      	cmp	r4, r7
 8009cbc:	4622      	mov	r2, r4
 8009cbe:	4631      	mov	r1, r6
 8009cc0:	bf28      	it	cs
 8009cc2:	463a      	movcs	r2, r7
 8009cc4:	f7fe ff4e 	bl	8008b64 <memcpy>
 8009cc8:	4631      	mov	r1, r6
 8009cca:	4640      	mov	r0, r8
 8009ccc:	f7fe ff60 	bl	8008b90 <_free_r>
 8009cd0:	e7e1      	b.n	8009c96 <_realloc_r+0x1e>
 8009cd2:	4635      	mov	r5, r6
 8009cd4:	e7df      	b.n	8009c96 <_realloc_r+0x1e>
	...

08009cd8 <_fstat_r>:
 8009cd8:	b538      	push	{r3, r4, r5, lr}
 8009cda:	4d07      	ldr	r5, [pc, #28]	; (8009cf8 <_fstat_r+0x20>)
 8009cdc:	2300      	movs	r3, #0
 8009cde:	4604      	mov	r4, r0
 8009ce0:	4608      	mov	r0, r1
 8009ce2:	4611      	mov	r1, r2
 8009ce4:	602b      	str	r3, [r5, #0]
 8009ce6:	f7f7 fc9e 	bl	8001626 <_fstat>
 8009cea:	1c43      	adds	r3, r0, #1
 8009cec:	d102      	bne.n	8009cf4 <_fstat_r+0x1c>
 8009cee:	682b      	ldr	r3, [r5, #0]
 8009cf0:	b103      	cbz	r3, 8009cf4 <_fstat_r+0x1c>
 8009cf2:	6023      	str	r3, [r4, #0]
 8009cf4:	bd38      	pop	{r3, r4, r5, pc}
 8009cf6:	bf00      	nop
 8009cf8:	2000212c 	.word	0x2000212c

08009cfc <_isatty_r>:
 8009cfc:	b538      	push	{r3, r4, r5, lr}
 8009cfe:	4d06      	ldr	r5, [pc, #24]	; (8009d18 <_isatty_r+0x1c>)
 8009d00:	2300      	movs	r3, #0
 8009d02:	4604      	mov	r4, r0
 8009d04:	4608      	mov	r0, r1
 8009d06:	602b      	str	r3, [r5, #0]
 8009d08:	f7f7 fc9d 	bl	8001646 <_isatty>
 8009d0c:	1c43      	adds	r3, r0, #1
 8009d0e:	d102      	bne.n	8009d16 <_isatty_r+0x1a>
 8009d10:	682b      	ldr	r3, [r5, #0]
 8009d12:	b103      	cbz	r3, 8009d16 <_isatty_r+0x1a>
 8009d14:	6023      	str	r3, [r4, #0]
 8009d16:	bd38      	pop	{r3, r4, r5, pc}
 8009d18:	2000212c 	.word	0x2000212c

08009d1c <_malloc_usable_size_r>:
 8009d1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d20:	1f18      	subs	r0, r3, #4
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	bfbc      	itt	lt
 8009d26:	580b      	ldrlt	r3, [r1, r0]
 8009d28:	18c0      	addlt	r0, r0, r3
 8009d2a:	4770      	bx	lr

08009d2c <_init>:
 8009d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d2e:	bf00      	nop
 8009d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d32:	bc08      	pop	{r3}
 8009d34:	469e      	mov	lr, r3
 8009d36:	4770      	bx	lr

08009d38 <_fini>:
 8009d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d3a:	bf00      	nop
 8009d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d3e:	bc08      	pop	{r3}
 8009d40:	469e      	mov	lr, r3
 8009d42:	4770      	bx	lr
